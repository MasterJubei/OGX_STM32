
xbox_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013688  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012c8  08013858  08013858  00023858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014b20  08014b20  00030184  2**0
                  CONTENTS
  4 .ARM          00000008  08014b20  08014b20  00024b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014b28  08014b28  00030184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014b28  08014b28  00024b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014b30  08014b30  00024b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08014b34  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005bd4  20000184  08014cb8  00030184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005d58  08014cb8  00035d58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00061e84  00000000  00000000  000301b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008de2  00000000  00000000  00092038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000028f0  00000000  00000000  0009ae20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002728  00000000  00000000  0009d710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d1a0  00000000  00000000  0009fe38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000316d3  00000000  00000000  000ccfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f87d6  00000000  00000000  000fe6ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f6e81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b2cc  00000000  00000000  001f6ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000184 	.word	0x20000184
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013840 	.word	0x08013840

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000188 	.word	0x20000188
 800020c:	08013840 	.word	0x08013840

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d101      	bne.n	800052c <_ZN5Print5writeEPKc+0x14>
 8000528:	2300      	movs	r3, #0
 800052a:	e00d      	b.n	8000548 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	3304      	adds	r3, #4
 8000532:	681c      	ldr	r4, [r3, #0]
 8000534:	6838      	ldr	r0, [r7, #0]
 8000536:	f7ff fe6b 	bl	8000210 <strlen>
 800053a:	4603      	mov	r3, r0
 800053c:	461a      	mov	r2, r3
 800053e:	6839      	ldr	r1, [r7, #0]
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	47a0      	blx	r4
 8000544:	4603      	mov	r3, r0
 8000546:	bf00      	nop
    }
 8000548:	4618      	mov	r0, r3
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bd90      	pop	{r4, r7, pc}

08000550 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	1e5a      	subs	r2, r3, #1
 8000564:	607a      	str	r2, [r7, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	bf14      	ite	ne
 800056a:	2301      	movne	r3, #1
 800056c:	2300      	moveq	r3, #0
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00e      	beq.n	8000592 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	1c59      	adds	r1, r3, #1
 800057e:	60b9      	str	r1, [r7, #8]
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	4619      	mov	r1, r3
 8000584:	68f8      	ldr	r0, [r7, #12]
 8000586:	4790      	blx	r2
 8000588:	4602      	mov	r2, r0
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	4413      	add	r3, r2
 800058e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000590:	e7e6      	b.n	8000560 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8000592:	697b      	ldr	r3, [r7, #20]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3718      	adds	r7, #24
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 80005a6:	6839      	ldr	r1, [r7, #0]
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f000 f805 	bl	80005b8 <_ZN5Print5printEPKc>
 80005ae:	4603      	mov	r3, r0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
  return write(str);
 80005c2:	6839      	ldr	r1, [r7, #0]
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff ffa7 	bl	8000518 <_ZN5Print5writeEPKc>
 80005ca:	4603      	mov	r3, r0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	70fb      	strb	r3, [r7, #3]
  return write(c);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	78fa      	ldrb	r2, [r7, #3]
 80005e8:	4611      	mov	r1, r2
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	4798      	blx	r3
 80005ee:	4603      	mov	r3, r0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <_ZN5Print5printEhi>:

size_t Print::print(unsigned char b, int base)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	460b      	mov	r3, r1
 8000602:	607a      	str	r2, [r7, #4]
 8000604:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
 8000606:	7afb      	ldrb	r3, [r7, #11]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4619      	mov	r1, r3
 800060c:	68f8      	ldr	r0, [r7, #12]
 800060e:	f000 f856 	bl	80006be <_ZN5Print5printEmi>
 8000612:	4603      	mov	r3, r0
}
 8000614:	4618      	mov	r0, r3
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <_ZN5Print5printEii>:

size_t Print::print(int n, int base)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	68b9      	ldr	r1, [r7, #8]
 800062c:	68f8      	ldr	r0, [r7, #12]
 800062e:	f000 f805 	bl	800063c <_ZN5Print5printEli>
 8000632:	4603      	mov	r3, r0
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d109      	bne.n	8000662 <_ZN5Print5printEli+0x26>
    return write(n);
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	68ba      	ldr	r2, [r7, #8]
 8000656:	b2d2      	uxtb	r2, r2
 8000658:	4611      	mov	r1, r2
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	4798      	blx	r3
 800065e:	4603      	mov	r3, r0
 8000660:	e029      	b.n	80006b6 <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b0a      	cmp	r3, #10
 8000666:	d11d      	bne.n	80006a4 <_ZN5Print5printEli+0x68>
    if (n < 0) {
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	2b00      	cmp	r3, #0
 800066c:	da12      	bge.n	8000694 <_ZN5Print5printEli+0x58>
      int t = print('-');
 800066e:	212d      	movs	r1, #45	; 0x2d
 8000670:	68f8      	ldr	r0, [r7, #12]
 8000672:	f7ff ffaf 	bl	80005d4 <_ZN5Print5printEc>
 8000676:	4603      	mov	r3, r0
 8000678:	617b      	str	r3, [r7, #20]
      n = -n;
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	425b      	negs	r3, r3
 800067e:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	220a      	movs	r2, #10
 8000684:	4619      	mov	r1, r3
 8000686:	68f8      	ldr	r0, [r7, #12]
 8000688:	f000 f839 	bl	80006fe <_ZN5Print11printNumberEmh>
 800068c:	4602      	mov	r2, r0
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	4413      	add	r3, r2
 8000692:	e010      	b.n	80006b6 <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	220a      	movs	r2, #10
 8000698:	4619      	mov	r1, r3
 800069a:	68f8      	ldr	r0, [r7, #12]
 800069c:	f000 f82f 	bl	80006fe <_ZN5Print11printNumberEmh>
 80006a0:	4603      	mov	r3, r0
 80006a2:	e008      	b.n	80006b6 <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	4619      	mov	r1, r3
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f000 f826 	bl	80006fe <_ZN5Print11printNumberEmh>
 80006b2:	4603      	mov	r3, r0
 80006b4:	bf00      	nop
  }
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b084      	sub	sp, #16
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	60f8      	str	r0, [r7, #12]
 80006c6:	60b9      	str	r1, [r7, #8]
 80006c8:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d109      	bne.n	80006e4 <_ZN5Print5printEmi+0x26>
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	4611      	mov	r1, r2
 80006dc:	68f8      	ldr	r0, [r7, #12]
 80006de:	4798      	blx	r3
 80006e0:	4603      	mov	r3, r0
 80006e2:	e008      	b.n	80006f6 <_ZN5Print5printEmi+0x38>
  else return printNumber(n, base);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	461a      	mov	r2, r3
 80006ea:	68b9      	ldr	r1, [r7, #8]
 80006ec:	68f8      	ldr	r0, [r7, #12]
 80006ee:	f000 f806 	bl	80006fe <_ZN5Print11printNumberEmh>
 80006f2:	4603      	mov	r3, r0
 80006f4:	bf00      	nop
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80006fe:	b580      	push	{r7, lr}
 8000700:	b090      	sub	sp, #64	; 0x40
 8000702:	af00      	add	r7, sp, #0
 8000704:	60f8      	str	r0, [r7, #12]
 8000706:	60b9      	str	r1, [r7, #8]
 8000708:	4613      	mov	r3, r2
 800070a:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	3320      	adds	r3, #32
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 8000714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d801      	bhi.n	8000724 <_ZN5Print11printNumberEmh+0x26>
 8000720:	230a      	movs	r3, #10
 8000722:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000730:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 8000732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000734:	b2da      	uxtb	r2, r3
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	79f9      	ldrb	r1, [r7, #7]
 800073c:	fb11 f303 	smulbb	r3, r1, r3
 8000740:	b2db      	uxtb	r3, r3
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8000748:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800074c:	2b09      	cmp	r3, #9
 800074e:	d804      	bhi.n	800075a <_ZN5Print11printNumberEmh+0x5c>
 8000750:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000754:	3330      	adds	r3, #48	; 0x30
 8000756:	b2db      	uxtb	r3, r3
 8000758:	e003      	b.n	8000762 <_ZN5Print11printNumberEmh+0x64>
 800075a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800075e:	3337      	adds	r3, #55	; 0x37
 8000760:	b2db      	uxtb	r3, r3
 8000762:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000764:	3a01      	subs	r2, #1
 8000766:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000768:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800076a:	7013      	strb	r3, [r2, #0]
  } while(n);
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d000      	beq.n	8000774 <_ZN5Print11printNumberEmh+0x76>
  do {
 8000772:	e7d7      	b.n	8000724 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 8000774:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000776:	68f8      	ldr	r0, [r7, #12]
 8000778:	f7ff fece 	bl	8000518 <_ZN5Print5writeEPKc>
 800077c:	4603      	mov	r3, r0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3740      	adds	r7, #64	; 0x40
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <_ZN11SerialClass5writeEh>:
#include "SerialClass.h"

size_t SerialClass::write(uint8_t data) {
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
 800078e:	460b      	mov	r3, r1
 8000790:	70fb      	strb	r3, [r7, #3]
	return write(&data, 1);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	3304      	adds	r3, #4
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	1cf9      	adds	r1, r7, #3
 800079c:	2201      	movs	r2, #1
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	4798      	blx	r3
 80007a2:	4603      	mov	r3, r0
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <_ZN11SerialClass5writeEPKhj>:

size_t SerialClass::write(const uint8_t *buffer, size_t size) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
	uint8_t *pBuffer = (uint8_t*)buffer;
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(pUART_Handle, pBuffer, size, HAL_MAX_DELAY);
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	6918      	ldr	r0, [r3, #16]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295
 80007c8:	6979      	ldr	r1, [r7, #20]
 80007ca:	f006 fa84 	bl	8006cd6 <HAL_UART_Transmit>
	return size;
 80007ce:	687b      	ldr	r3, [r7, #4]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3718      	adds	r7, #24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <_ZN11SerialClass4readEv>:

int SerialClass::read() {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	uint8_t data;
	HAL_UART_Receive(pUART_Handle, &data, 1, HAL_MAX_DELAY);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6918      	ldr	r0, [r3, #16]
 80007e4:	f107 010f 	add.w	r1, r7, #15
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ec:	2201      	movs	r2, #1
 80007ee:	f006 fb04 	bl	8006dfa <HAL_UART_Receive>
	return data;
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <_ZN11SerialClass9availableEv>:

int SerialClass::available() {
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	return -1;
 8000804:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000808:	4618      	mov	r0, r3
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <_ZN11SerialClass4peekEv>:

int SerialClass::peek() {
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	return -1;
 800081c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000820:	4618      	mov	r0, r3
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <_ZN11SerialClass5flushEv>:

void SerialClass::flush() {
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	4a06      	ldr	r2, [pc, #24]	; (8000864 <_ZN5PrintC1Ev+0x24>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4618      	mov	r0, r3
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	08013ac4 	.word	0x08013ac4

08000868 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ffe4 	bl	8000840 <_ZN5PrintC1Ev>
 8000878:	4a05      	ldr	r2, [pc, #20]	; (8000890 <_ZN6StreamC1Ev+0x28>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	08013c14 	.word	0x08013c14

08000894 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>:
#include "Stream.h"
#include "stm32f4xx_hal.h"

class SerialClass : public Stream {
public:
	SerialClass(UART_HandleTypeDef *UART_Handle) : pUART_Handle(UART_Handle) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ffe1 	bl	8000868 <_ZN6StreamC1Ev>
 80008a6:	4a05      	ldr	r2, [pc, #20]	; (80008bc <_ZN11SerialClassC1EP20__UART_HandleTypeDef+0x28>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	683a      	ldr	r2, [r7, #0]
 80008b0:	611a      	str	r2, [r3, #16]
	};
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4618      	mov	r0, r3
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	08013ad4 	.word	0x08013ad4

080008c0 <_ZN2P910SetDirReadEv>:
MAKE_PIN(P4, GPIOB, GPIO_PIN_5); // D4
MAKE_PIN(P5, GPIOB, GPIO_PIN_4); // D5
MAKE_PIN(P6, GPIOB, GPIO_PIN_10); // D6
MAKE_PIN(P7, GPIOA, GPIO_PIN_8); // D7
MAKE_PIN(P8, GPIOA, GPIO_PIN_9); // D8
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <_ZN2P910SetDirReadEv+0x24>)
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <_ZN2P910SetDirReadEv+0x24>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <_ZN2P910SetDirReadEv+0x24>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	4903      	ldr	r1, [pc, #12]	; (80008e4 <_ZN2P910SetDirReadEv+0x24>)
 80008d8:	4803      	ldr	r0, [pc, #12]	; (80008e8 <_ZN2P910SetDirReadEv+0x28>)
 80008da:	f002 f8c5 	bl	8002a68 <HAL_GPIO_Init>
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200001a0 	.word	0x200001a0
 80008e8:	40020800 	.word	0x40020800

080008ec <_ZN3P103SetEv>:
MAKE_PIN(P10, GPIOB, GPIO_PIN_6); // D10
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	2201      	movs	r2, #1
 80008f2:	2140      	movs	r1, #64	; 0x40
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <_ZN3P103SetEv+0x14>)
 80008f6:	f002 fa63 	bl	8002dc0 <HAL_GPIO_WritePin>
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40020400 	.word	0x40020400

08000904 <_ZN3P105ClearEv>:
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
 8000908:	2200      	movs	r2, #0
 800090a:	2140      	movs	r1, #64	; 0x40
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <_ZN3P105ClearEv+0x14>)
 800090e:	f002 fa57 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40020400 	.word	0x40020400

0800091c <_ZN3P1011SetDirWriteEv>:
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 8000922:	2240      	movs	r2, #64	; 0x40
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 8000928:	2201      	movs	r2, #1
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 8000934:	2203      	movs	r2, #3
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	4902      	ldr	r1, [pc, #8]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 800093a:	4803      	ldr	r0, [pc, #12]	; (8000948 <_ZN3P1011SetDirWriteEv+0x2c>)
 800093c:	f002 f894 	bl	8002a68 <HAL_GPIO_Init>
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200001b4 	.word	0x200001b4
 8000948:	40020400 	.word	0x40020400

0800094c <_ZN3BTD11pairWithHIDEv>:
        bool motionPlusInside;
        /** True if it's a Wii U Pro Controller. */
        bool wiiUProController;

        /** Call this function to pair with a HID device */
        void pairWithHID() {
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
                waitingForConnection = false;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2200      	movs	r2, #0
 8000958:	721a      	strb	r2, [r3, #8]
                pairWithHIDDevice = true;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2201      	movs	r2, #1
 800095e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                hci_state = HCI_CHECK_DEVICE_SERVICE;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2206      	movs	r2, #6
 8000966:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        };
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <_ZN5BTHID4pairEv>:

        /** True if a device is connected */
        bool connected;

        /** Call this to start the pairing sequence with a device */
        void pair(void) {
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
                if(pBtd)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d004      	beq.n	8000990 <_ZN5BTHID4pairEv+0x1a>
                        pBtd->pairWithHID();
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff ffde 	bl	800094c <_ZN3BTD11pairWithHIDEv>
        };
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <_ZN5BTHID6onInitEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        void onInit() {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
                if(pFuncOnInit)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d002      	beq.n	80009ae <_ZN5BTHID6onInitEv+0x16>
                        pFuncOnInit(); // Call the user function
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	4798      	blx	r3
                OnInitBTHID();
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	331c      	adds	r3, #28
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	4798      	blx	r3
        };
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <_ZN5BTHID21ParseBTHIDControlDataEhPh>:
        };
        /**
         * Same as ParseBTHIDData for reports that are sent through the
         * interrupt pipe (in response to a GET_REPORT).
         */
        virtual void ParseBTHIDControlData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 80009c2:	b480      	push	{r7}
 80009c4:	b085      	sub	sp, #20
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	60f8      	str	r0, [r7, #12]
 80009ca:	460b      	mov	r3, r1
 80009cc:	607a      	str	r2, [r7, #4]
 80009ce:	72fb      	strb	r3, [r7, #11]
                return;
 80009d0:	bf00      	nop
        }
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <_ZN9PS4ParserC1Ev>:

/** This class parses all the data sent by the PS4 controller */
class PS4Parser {
public:
        /** Constructor for the PS4Parser class. */
        PS4Parser() {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	4a05      	ldr	r2, [pc, #20]	; (80009fc <_ZN9PS4ParserC1Ev+0x20>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	601a      	str	r2, [r3, #0]
                Reset();
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f011 f90a 	bl	8011c04 <_ZN9PS4Parser5ResetEv>
        };
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	08013c08 	.word	0x08013c08

08000a00 <_ZN9PS4Parser12setRumbleOffEv>:
                setRumbleOff();
                setLedOff();
        };

        /** Set rumble off. */
        void setRumbleOff() {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
                setRumbleOn(0, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f000 f81c 	bl	8000a4a <_ZN9PS4Parser11setRumbleOnEhh>
        };
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>:

        /**
         * Turn on rumble.
         * @param mode Either ::RumbleHigh or ::RumbleLow.
         */
        void setRumbleOn(RumbleEnum mode) {
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	460b      	mov	r3, r1
 8000a24:	70fb      	strb	r3, [r7, #3]
                if (mode == RumbleLow)
 8000a26:	78fb      	ldrb	r3, [r7, #3]
 8000a28:	2b20      	cmp	r3, #32
 8000a2a:	d105      	bne.n	8000a38 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x1e>
                        setRumbleOn(0x00, 0xFF);
 8000a2c:	22ff      	movs	r2, #255	; 0xff
 8000a2e:	2100      	movs	r1, #0
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f000 f80a 	bl	8000a4a <_ZN9PS4Parser11setRumbleOnEhh>
                else
                        setRumbleOn(0xFF, 0x00);
        };
 8000a36:	e004      	b.n	8000a42 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x28>
                        setRumbleOn(0xFF, 0x00);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	21ff      	movs	r1, #255	; 0xff
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f000 f804 	bl	8000a4a <_ZN9PS4Parser11setRumbleOnEhh>
        };
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_ZN9PS4Parser11setRumbleOnEhh>:
        /**
         * Turn on rumble.
         * @param bigRumble   Value for big motor.
         * @param smallRumble Value for small motor.
         */
        void setRumbleOn(uint8_t bigRumble, uint8_t smallRumble) {
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	460b      	mov	r3, r1
 8000a54:	70fb      	strb	r3, [r7, #3]
 8000a56:	4613      	mov	r3, r2
 8000a58:	70bb      	strb	r3, [r7, #2]
                ps4Output.bigRumble = bigRumble;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	78fa      	ldrb	r2, [r7, #3]
 8000a5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                ps4Output.smallRumble = smallRumble;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	78ba      	ldrb	r2, [r7, #2]
 8000a66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                ps4Output.reportChanged = true;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <_ZN9PS4Parser6setLedEhhh>:

        /**
         * Use this to set the color using RGB values.
         * @param r,g,b RGB value.
         */
        void setLed(uint8_t r, uint8_t g, uint8_t b) {
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
 8000a86:	4608      	mov	r0, r1
 8000a88:	4611      	mov	r1, r2
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	70fb      	strb	r3, [r7, #3]
 8000a90:	460b      	mov	r3, r1
 8000a92:	70bb      	strb	r3, [r7, #2]
 8000a94:	4613      	mov	r3, r2
 8000a96:	707b      	strb	r3, [r7, #1]
                ps4Output.r = r;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	78fa      	ldrb	r2, [r7, #3]
 8000a9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                ps4Output.g = g;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	78ba      	ldrb	r2, [r7, #2]
 8000aa4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                ps4Output.b = b;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	787a      	ldrb	r2, [r7, #1]
 8000aac:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                ps4Output.reportChanged = true;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <_ZN9PS4Parser6setLedE10ColorsEnum>:

        /**
         * Use this to set the color using the predefined colors in ::ColorsEnum.
         * @param color The desired color.
         */
        void setLed(ColorsEnum color) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
                setLed((uint8_t)(color >> 16), (uint8_t)(color >> 8), (uint8_t)(color));
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	141b      	asrs	r3, r3, #16
 8000ad2:	b2d9      	uxtb	r1, r3
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	121b      	asrs	r3, r3, #8
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ffcd 	bl	8000a7e <_ZN9PS4Parser6setLedEhhh>
        };
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <_ZN5PS4BTC1EP3BTDbPKc>:
         * Constructor for the PS4BT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         * @param  pin   Write the pin to BTD#btdPin. If argument is omitted, then "0000" will be used.
         */
        PS4BT(BTD *p, bool pair = false, const char *pin = "0000") :
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	4613      	mov	r3, r2
 8000afa:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair, pin) {
 8000afc:	68f8      	ldr	r0, [r7, #12]
 8000afe:	79fa      	ldrb	r2, [r7, #7]
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	68b9      	ldr	r1, [r7, #8]
 8000b04:	f00f fe98 	bl	8010838 <_ZN5BTHIDC1EP3BTDbPKc>
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	3378      	adds	r3, #120	; 0x78
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff65 	bl	80009dc <_ZN9PS4ParserC1Ev>
 8000b12:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <_ZN5PS4BTC1EP3BTDbPKc+0x48>)
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <_ZN5PS4BTC1EP3BTDbPKc+0x4c>)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	679a      	str	r2, [r3, #120]	; 0x78
                PS4Parser::Reset();
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	3378      	adds	r3, #120	; 0x78
 8000b22:	4618      	mov	r0, r3
 8000b24:	f011 f86e 	bl	8011c04 <_ZN9PS4Parser5ResetEv>
        };
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	08013bcc 	.word	0x08013bcc
 8000b38:	08013bfc 	.word	0x08013bfc

08000b3c <_ZN5PS4BT9connectedEv>:

        /**
         * Used to check if a PS4 controller is connected.
         * @return Returns true if it is connected.
         */
        bool connected() {
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
                return BTHID::connected;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	7d5b      	ldrb	r3, [r3, #21]
        };
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <_ZN5PS4BT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	607a      	str	r2, [r7, #4]
 8000b60:	72fb      	strb	r3, [r7, #11]
                PS4Parser::Parse(len, buf);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	3378      	adds	r3, #120	; 0x78
 8000b66:	7af9      	ldrb	r1, [r7, #11]
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f010 ff85 	bl	8011a7a <_ZN9PS4Parser5ParseEhPh>
        };
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <_ZN5PS4BT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3378      	adds	r3, #120	; 0x78
 8000b84:	4618      	mov	r0, r3
 8000b86:	f011 f83d 	bl	8011c04 <_ZN9PS4Parser5ResetEv>
                enable_sixaxis(); // Make the controller send out the entire output report
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 f855 	bl	8000c3a <_ZN5PS4BT14enable_sixaxisEv>
                if (!pFuncOnInit)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d105      	bne.n	8000ba4 <_ZN5PS4BT11OnInitBTHIDEv+0x2c>
                        setLed(Blue); // Only call this is a user function has not been set
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3378      	adds	r3, #120	; 0x78
 8000b9c:	21ff      	movs	r1, #255	; 0xff
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff90 	bl	8000ac4 <_ZN9PS4Parser6setLedE10ColorsEnum>
        };
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <_ZN5PS4BT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3378      	adds	r3, #120	; 0x78
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f011 f823 	bl	8011c04 <_ZN9PS4Parser5ResetEv>
        };
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <_ZN5PS4BT16sendOutputReportEP9PS4Output>:
        /**@}*/

        /** @name PS4Parser implementation */
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b096      	sub	sp, #88	; 0x58
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	6039      	str	r1, [r7, #0]
                uint8_t buf[79];
                memset(buf, 0, sizeof(buf));
 8000bd0:	f107 0308 	add.w	r3, r7, #8
 8000bd4:	224f      	movs	r2, #79	; 0x4f
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f012 fdd3 	bl	8013784 <memset>

                buf[0] = 0x52; // HID BT Set_report (0x50) | Report Type (Output 0x02)
 8000bde:	2352      	movs	r3, #82	; 0x52
 8000be0:	723b      	strb	r3, [r7, #8]
                buf[1] = 0x11; // Report ID
 8000be2:	2311      	movs	r3, #17
 8000be4:	727b      	strb	r3, [r7, #9]
                buf[2] = 0x80;
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	72bb      	strb	r3, [r7, #10]
                buf[4]= 0xFF;
 8000bea:	23ff      	movs	r3, #255	; 0xff
 8000bec:	733b      	strb	r3, [r7, #12]

                buf[7] = output->smallRumble; // Small Rumble
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	785b      	ldrb	r3, [r3, #1]
 8000bf2:	73fb      	strb	r3, [r7, #15]
                buf[8] = output->bigRumble; // Big rumble
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	743b      	strb	r3, [r7, #16]

                buf[9] = output->r; // Red
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	789b      	ldrb	r3, [r3, #2]
 8000bfe:	747b      	strb	r3, [r7, #17]
                buf[10] = output->g; // Green
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	78db      	ldrb	r3, [r3, #3]
 8000c04:	74bb      	strb	r3, [r7, #18]
                buf[11] = output->b; // Blue
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	791b      	ldrb	r3, [r3, #4]
 8000c0a:	74fb      	strb	r3, [r7, #19]

                buf[12] = output->flashOn; // Time to flash bright (255 = 2.5 seconds)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	795b      	ldrb	r3, [r3, #5]
 8000c10:	753b      	strb	r3, [r7, #20]
                buf[13] = output->flashOff; // Time to flash dark (255 = 2.5 seconds)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	799b      	ldrb	r3, [r3, #6]
 8000c16:	757b      	strb	r3, [r7, #21]

                output->reportChanged = false;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	71da      	strb	r2, [r3, #7]

                // The PS4 console actually set the four last bytes to a CRC32 checksum, but it seems like it is actually not needed

                HID_Command(buf, sizeof(buf));
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	224f      	movs	r2, #79	; 0x4f
 8000c24:	4619      	mov	r1, r3
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f000 f81a 	bl	8000c60 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000c2c:	bf00      	nop
 8000c2e:	3758      	adds	r7, #88	; 0x58
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <_ZThn120_N5PS4BT16sendOutputReportEP9PS4Output>:
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000c34:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 8000c38:	e7c5      	b.n	8000bc6 <_ZN5PS4BT16sendOutputReportEP9PS4Output>

08000c3a <_ZN5PS4BT14enable_sixaxisEv>:
        /**@}*/

private:
        void enable_sixaxis() { // Command used to make the PS4 controller send out the entire output report
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b084      	sub	sp, #16
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
                uint8_t buf[2];
                buf[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
 8000c42:	2343      	movs	r3, #67	; 0x43
 8000c44:	733b      	strb	r3, [r7, #12]
                buf[1] = 0x02; // Report ID
 8000c46:	2302      	movs	r3, #2
 8000c48:	737b      	strb	r3, [r7, #13]

                HID_Command(buf, 2);
 8000c4a:	f107 030c 	add.w	r3, r7, #12
 8000c4e:	2202      	movs	r2, #2
 8000c50:	4619      	mov	r1, r3
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f000 f804 	bl	8000c60 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <_ZN5PS4BT11HID_CommandEPhh>:

        void HID_Command(uint8_t *data, uint8_t nbytes) {
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b087      	sub	sp, #28
 8000c64:	af02      	add	r7, sp, #8
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	71fb      	strb	r3, [r7, #7]
                pBtd->L2CAP_Command(hci_handle, data, nbytes, control_scid[0], control_scid[1]);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	6898      	ldr	r0, [r3, #8]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	8999      	ldrh	r1, [r3, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	7d9b      	ldrb	r3, [r3, #22]
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	7dd2      	ldrb	r2, [r2, #23]
 8000c7e:	79fc      	ldrb	r4, [r7, #7]
 8000c80:	9201      	str	r2, [sp, #4]
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	4623      	mov	r3, r4
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f00e fe72 	bl	800f970 <_ZN3BTD13L2CAP_CommandEtPhhhh>
        };
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd90      	pop	{r4, r7, pc}

08000c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c98:	f001 fd9e 	bl	80027d8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9c:	f000 f8e4 	bl	8000e68 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca0:	f000 fa42 	bl	8001128 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000ca4:	f000 fa12 	bl	80010cc <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8000ca8:	f000 f9d4 	bl	8001054 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8000cac:	f00b ffae 	bl	800cc0c <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 8000cb0:	f000 f972 	bl	8000f98 <_ZL13MX_TIM14_Initv>
  MX_I2C1_Init();
 8000cb4:	f000 f99a 	bl	8000fec <_ZL12MX_I2C1_Initv>

  //MX_ADC1_Init();
  /* USER CODE BEGIN 2 */

  /* For the USB Host Shield Library*/
  SPI_Handle = hspi1;
 8000cb8:	4a49      	ldr	r2, [pc, #292]	; (8000de0 <main+0x14c>)
 8000cba:	4b4a      	ldr	r3, [pc, #296]	; (8000de4 <main+0x150>)
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	2358      	movs	r3, #88	; 0x58
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	f012 fd50 	bl	8013768 <memcpy>
  UART_Handle = huart2;
 8000cc8:	4a47      	ldr	r2, [pc, #284]	; (8000de8 <main+0x154>)
 8000cca:	4b48      	ldr	r3, [pc, #288]	; (8000dec <main+0x158>)
 8000ccc:	4610      	mov	r0, r2
 8000cce:	4619      	mov	r1, r3
 8000cd0:	2344      	movs	r3, #68	; 0x44
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	f012 fd48 	bl	8013768 <memcpy>

  /* The Primary Timer, since using freeRTOS, not using systick */
  HAL_TIM_Base_Start_IT(&htim14);
 8000cd8:	4845      	ldr	r0, [pc, #276]	; (8000df0 <main+0x15c>)
 8000cda:	f005 fd5b 	bl	8006794 <HAL_TIM_Base_Start_IT>

  /* Verify our CPU Frequency
   * We should get a 500ms delay here */
  Serial.print(F("\r\nCPU Frequency is: "));
 8000cde:	4945      	ldr	r1, [pc, #276]	; (8000df4 <main+0x160>)
 8000ce0:	4845      	ldr	r0, [pc, #276]	; (8000df8 <main+0x164>)
 8000ce2:	f7ff fc5b 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
  cpu_freq = HAL_RCC_GetHCLKFreq()/1000000;
 8000ce6:	f003 ff7d 	bl	8004be4 <HAL_RCC_GetHCLKFreq>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4a43      	ldr	r2, [pc, #268]	; (8000dfc <main+0x168>)
 8000cee:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf2:	0c9b      	lsrs	r3, r3, #18
 8000cf4:	4a42      	ldr	r2, [pc, #264]	; (8000e00 <main+0x16c>)
 8000cf6:	6013      	str	r3, [r2, #0]
  Serial.print((int)cpu_freq);
 8000cf8:	4b41      	ldr	r3, [pc, #260]	; (8000e00 <main+0x16c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	220a      	movs	r2, #10
 8000cfe:	4619      	mov	r1, r3
 8000d00:	483d      	ldr	r0, [pc, #244]	; (8000df8 <main+0x164>)
 8000d02:	f7ff fc8b 	bl	800061c <_ZN5Print5printEii>
  Serial.print("MHz");
 8000d06:	493f      	ldr	r1, [pc, #252]	; (8000e04 <main+0x170>)
 8000d08:	483b      	ldr	r0, [pc, #236]	; (8000df8 <main+0x164>)
 8000d0a:	f7ff fc55 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print("\r\nStart");
 8000d0e:	493e      	ldr	r1, [pc, #248]	; (8000e08 <main+0x174>)
 8000d10:	4839      	ldr	r0, [pc, #228]	; (8000df8 <main+0x164>)
 8000d12:	f7ff fc51 	bl	80005b8 <_ZN5Print5printEPKc>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14);
 8000d16:	4b36      	ldr	r3, [pc, #216]	; (8000df0 <main+0x15c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	4b3b      	ldr	r3, [pc, #236]	; (8000e0c <main+0x178>)
 8000d20:	801a      	strh	r2, [r3, #0]
  HAL_Delay(500);
 8000d22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d26:	f001 fd99 	bl	800285c <HAL_Delay>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14) - timer_val;
 8000d2a:	4b31      	ldr	r3, [pc, #196]	; (8000df0 <main+0x15c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	4b36      	ldr	r3, [pc, #216]	; (8000e0c <main+0x178>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	4b34      	ldr	r3, [pc, #208]	; (8000e0c <main+0x178>)
 8000d3c:	801a      	strh	r2, [r3, #0]
  Serial.print("\r\nTime Elapsed is: ");
 8000d3e:	4934      	ldr	r1, [pc, #208]	; (8000e10 <main+0x17c>)
 8000d40:	482d      	ldr	r0, [pc, #180]	; (8000df8 <main+0x164>)
 8000d42:	f7ff fc39 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print((int)timer_val/10);
 8000d46:	4b31      	ldr	r3, [pc, #196]	; (8000e0c <main+0x178>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	4a32      	ldr	r2, [pc, #200]	; (8000e14 <main+0x180>)
 8000d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d50:	08db      	lsrs	r3, r3, #3
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	220a      	movs	r2, #10
 8000d56:	4619      	mov	r1, r3
 8000d58:	4827      	ldr	r0, [pc, #156]	; (8000df8 <main+0x164>)
 8000d5a:	f7ff fc5f 	bl	800061c <_ZN5Print5printEii>
  Serial.print(" ms");
 8000d5e:	492e      	ldr	r1, [pc, #184]	; (8000e18 <main+0x184>)
 8000d60:	4825      	ldr	r0, [pc, #148]	; (8000df8 <main+0x164>)
 8000d62:	f7ff fc29 	bl	80005b8 <_ZN5Print5printEPKc>
//  hal_gettick = HAL_GetTick();
//  hal_gettick/1000;

  Serial.print((int)hal_gettick);
 8000d66:	4b2d      	ldr	r3, [pc, #180]	; (8000e1c <main+0x188>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	220a      	movs	r2, #10
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4822      	ldr	r0, [pc, #136]	; (8000df8 <main+0x164>)
 8000d70:	f7ff fc54 	bl	800061c <_ZN5Print5printEii>



  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 8000d74:	f009 f9fa 	bl	800a16c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of getBT */
  getBTHandle = osThreadNew(StartGetBT, NULL, &getBT_attributes);
 8000d78:	4a29      	ldr	r2, [pc, #164]	; (8000e20 <main+0x18c>)
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4829      	ldr	r0, [pc, #164]	; (8000e24 <main+0x190>)
 8000d7e:	f009 fa3f 	bl	800a200 <osThreadNew>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4a28      	ldr	r2, [pc, #160]	; (8000e28 <main+0x194>)
 8000d86:	6013      	str	r3, [r2, #0]

  /* creation of sendUSB */
  sendUSBHandle = osThreadNew(StartSendUSB, NULL, &sendUSB_attributes);
 8000d88:	4a28      	ldr	r2, [pc, #160]	; (8000e2c <main+0x198>)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4828      	ldr	r0, [pc, #160]	; (8000e30 <main+0x19c>)
 8000d8e:	f009 fa37 	bl	800a200 <osThreadNew>
 8000d92:	4603      	mov	r3, r0
 8000d94:	4a27      	ldr	r2, [pc, #156]	; (8000e34 <main+0x1a0>)
 8000d96:	6013      	str	r3, [r2, #0]

  /* creation of controllerJoin */
  controllerJoinHandle = osThreadNew(StartControllerJoin, NULL, &controllerJoin_attributes);
 8000d98:	4a27      	ldr	r2, [pc, #156]	; (8000e38 <main+0x1a4>)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4827      	ldr	r0, [pc, #156]	; (8000e3c <main+0x1a8>)
 8000d9e:	f009 fa2f 	bl	800a200 <osThreadNew>
 8000da2:	4603      	mov	r3, r0
 8000da4:	4a26      	ldr	r2, [pc, #152]	; (8000e40 <main+0x1ac>)
 8000da6:	6013      	str	r3, [r2, #0]

  /* creation of buttonPress */
  buttonPressHandle = osThreadNew(StartButtonPress, NULL, &buttonPress_attributes);
 8000da8:	4a26      	ldr	r2, [pc, #152]	; (8000e44 <main+0x1b0>)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4826      	ldr	r0, [pc, #152]	; (8000e48 <main+0x1b4>)
 8000dae:	f009 fa27 	bl	800a200 <osThreadNew>
 8000db2:	4603      	mov	r3, r0
 8000db4:	4a25      	ldr	r2, [pc, #148]	; (8000e4c <main+0x1b8>)
 8000db6:	6013      	str	r3, [r2, #0]

  /* creation of updateLCD */
  updateLCDHandle = osThreadNew(StartUpdateLCD, NULL, &updateLCD_attributes);
 8000db8:	4a25      	ldr	r2, [pc, #148]	; (8000e50 <main+0x1bc>)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4825      	ldr	r0, [pc, #148]	; (8000e54 <main+0x1c0>)
 8000dbe:	f009 fa1f 	bl	800a200 <osThreadNew>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4a24      	ldr	r2, [pc, #144]	; (8000e58 <main+0x1c4>)
 8000dc6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* Used to Meaesure latencies of tasks*/
  getLatencies = osThreadNew(StartGetLatencies, NULL, &getLatencies_attributes);
 8000dc8:	4a24      	ldr	r2, [pc, #144]	; (8000e5c <main+0x1c8>)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4824      	ldr	r0, [pc, #144]	; (8000e60 <main+0x1cc>)
 8000dce:	f009 fa17 	bl	800a200 <osThreadNew>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a23      	ldr	r2, [pc, #140]	; (8000e64 <main+0x1d0>)
 8000dd6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000dd8:	f009 f9ec 	bl	800a1b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <main+0x148>
 8000dde:	bf00      	nop
 8000de0:	20000320 	.word	0x20000320
 8000de4:	20000224 	.word	0x20000224
 8000de8:	20000378 	.word	0x20000378
 8000dec:	2000027c 	.word	0x2000027c
 8000df0:	200002c0 	.word	0x200002c0
 8000df4:	080138a0 	.word	0x080138a0
 8000df8:	200003bc 	.word	0x200003bc
 8000dfc:	431bde83 	.word	0x431bde83
 8000e00:	20000674 	.word	0x20000674
 8000e04:	080138b8 	.word	0x080138b8
 8000e08:	080138bc 	.word	0x080138bc
 8000e0c:	20000678 	.word	0x20000678
 8000e10:	080138c4 	.word	0x080138c4
 8000e14:	cccccccd 	.word	0xcccccccd
 8000e18:	080138d8 	.word	0x080138d8
 8000e1c:	2000067c 	.word	0x2000067c
 8000e20:	08013aec 	.word	0x08013aec
 8000e24:	08001399 	.word	0x08001399
 8000e28:	20000308 	.word	0x20000308
 8000e2c:	08013b10 	.word	0x08013b10
 8000e30:	080019b9 	.word	0x080019b9
 8000e34:	2000030c 	.word	0x2000030c
 8000e38:	08013b34 	.word	0x08013b34
 8000e3c:	08001a09 	.word	0x08001a09
 8000e40:	20000310 	.word	0x20000310
 8000e44:	08013b58 	.word	0x08013b58
 8000e48:	08001a61 	.word	0x08001a61
 8000e4c:	20000314 	.word	0x20000314
 8000e50:	08013b7c 	.word	0x08013b7c
 8000e54:	08001afd 	.word	0x08001afd
 8000e58:	20000318 	.word	0x20000318
 8000e5c:	08013ba0 	.word	0x08013ba0
 8000e60:	080012b5 	.word	0x080012b5
 8000e64:	2000031c 	.word	0x2000031c

08000e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b0ac      	sub	sp, #176	; 0xb0
 8000e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e72:	2234      	movs	r2, #52	; 0x34
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f012 fc84 	bl	8013784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e7c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	225c      	movs	r2, #92	; 0x5c
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f012 fc75 	bl	8013784 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <SystemClock_Config+0x128>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a3b      	ldr	r2, [pc, #236]	; (8000f90 <SystemClock_Config+0x128>)
 8000ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eaa:	4b39      	ldr	r3, [pc, #228]	; (8000f90 <SystemClock_Config+0x128>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b36      	ldr	r3, [pc, #216]	; (8000f94 <SystemClock_Config+0x12c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a35      	ldr	r2, [pc, #212]	; (8000f94 <SystemClock_Config+0x12c>)
 8000ec0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	4b33      	ldr	r3, [pc, #204]	; (8000f94 <SystemClock_Config+0x12c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ee4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000eec:	2304      	movs	r3, #4
 8000eee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ef2:	23a8      	movs	r3, #168	; 0xa8
 8000ef4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000efe:	2307      	movs	r3, #7
 8000f00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f04:	2302      	movs	r3, #2
 8000f06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f004 fbaa 	bl	8005668 <HAL_RCC_OscConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	bf14      	ite	ne
 8000f1a:	2301      	movne	r3, #1
 8000f1c:	2300      	moveq	r3, #0
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f24:	f000 ff1a 	bl	8001d5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f28:	230f      	movs	r3, #15
 8000f2a:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f38:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3e:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f40:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f44:	2105      	movs	r1, #5
 8000f46:	4618      	mov	r0, r3
 8000f48:	f003 fd66 	bl	8004a18 <HAL_RCC_ClockConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	bf14      	ite	ne
 8000f52:	2301      	movne	r3, #1
 8000f54:	2300      	moveq	r3, #0
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000f5c:	f000 fefe 	bl	8001d5c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f64:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000f66:	2300      	movs	r3, #0
 8000f68:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f003 fe9e 	bl	8004cb0 <HAL_RCCEx_PeriphCLKConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	bf14      	ite	ne
 8000f7a:	2301      	movne	r3, #1
 8000f7c:	2300      	moveq	r3, #0
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000f84:	f000 feea 	bl	8001d5c <Error_Handler>
  }
}
 8000f88:	bf00      	nop
 8000f8a:	37b0      	adds	r7, #176	; 0xb0
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40007000 	.word	0x40007000

08000f98 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000f9c:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <_ZL13MX_TIM14_Initv+0x4c>)
 8000f9e:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <_ZL13MX_TIM14_Initv+0x50>)
 8000fa0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (168/2)*100 -1;
 8000fa2:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <_ZL13MX_TIM14_Initv+0x4c>)
 8000fa4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000fa8:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <_ZL13MX_TIM14_Initv+0x4c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <_ZL13MX_TIM14_Initv+0x4c>)
 8000fb2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000fb6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <_ZL13MX_TIM14_Initv+0x4c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <_ZL13MX_TIM14_Initv+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000fc4:	4807      	ldr	r0, [pc, #28]	; (8000fe4 <_ZL13MX_TIM14_Initv+0x4c>)
 8000fc6:	f005 fb95 	bl	80066f4 <HAL_TIM_Base_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	bf14      	ite	ne
 8000fd0:	2301      	movne	r3, #1
 8000fd2:	2300      	moveq	r3, #0
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <_ZL13MX_TIM14_Initv+0x46>
  {
    Error_Handler();
 8000fda:	f000 febf 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200002c0 	.word	0x200002c0
 8000fe8:	40002000 	.word	0x40002000

08000fec <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ff2:	4a16      	ldr	r2, [pc, #88]	; (800104c <_ZL12MX_I2C1_Initv+0x60>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ff8:	4a15      	ldr	r2, [pc, #84]	; (8001050 <_ZL12MX_I2C1_Initv+0x64>)
 8000ffa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8001004:	2200      	movs	r2, #0
 8001006:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 800100a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800100e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001010:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8001012:	2200      	movs	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8001024:	2200      	movs	r2, #0
 8001026:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001028:	4807      	ldr	r0, [pc, #28]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 800102a:	f001 fee3 	bl	8002df4 <HAL_I2C_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	bf14      	ite	ne
 8001034:	2301      	movne	r3, #1
 8001036:	2300      	moveq	r3, #0
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800103e:	f000 fe8d 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200001d0 	.word	0x200001d0
 800104c:	40005400 	.word	0x40005400
 8001050:	00061a80 	.word	0x00061a80

08001054 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 800105a:	4a1b      	ldr	r2, [pc, #108]	; (80010c8 <_ZL12MX_SPI1_Initv+0x74>)
 800105c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001060:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001064:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 800107a:	2200      	movs	r2, #0
 800107c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001084:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001086:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001088:	2218      	movs	r2, #24
 800108a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800108c:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 800108e:	2200      	movs	r2, #0
 8001090:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001094:	2200      	movs	r2, #0
 8001096:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 800109a:	2200      	movs	r2, #0
 800109c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 80010a0:	220a      	movs	r2, #10
 80010a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010a4:	4807      	ldr	r0, [pc, #28]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 80010a6:	f004 fd7d 	bl	8005ba4 <HAL_SPI_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	bf14      	ite	ne
 80010b0:	2301      	movne	r3, #1
 80010b2:	2300      	moveq	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 80010ba:	f000 fe4f 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000224 	.word	0x20000224
 80010c8:	40013000 	.word	0x40013000

080010cc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010d2:	4a14      	ldr	r2, [pc, #80]	; (8001124 <_ZL19MX_USART2_UART_Initv+0x58>)
 80010d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010e4:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010f0:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010f2:	220c      	movs	r2, #12
 80010f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001102:	4807      	ldr	r0, [pc, #28]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001104:	f005 fd9a 	bl	8006c3c <HAL_UART_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	bf14      	ite	ne
 800110e:	2301      	movne	r3, #1
 8001110:	2300      	moveq	r3, #0
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001118:	f000 fe20 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	2000027c 	.word	0x2000027c
 8001124:	40004400 	.word	0x40004400

08001128 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b36      	ldr	r3, [pc, #216]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a35      	ldr	r2, [pc, #212]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001148:	f043 0304 	orr.w	r3, r3, #4
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b33      	ldr	r3, [pc, #204]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b2f      	ldr	r3, [pc, #188]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a2e      	ldr	r2, [pc, #184]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b2c      	ldr	r3, [pc, #176]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	4b28      	ldr	r3, [pc, #160]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a27      	ldr	r2, [pc, #156]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b25      	ldr	r3, [pc, #148]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	4b21      	ldr	r3, [pc, #132]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a20      	ldr	r2, [pc, #128]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b1e      	ldr	r3, [pc, #120]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011b4:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <_ZL12MX_GPIO_Initv+0xf8>)
 80011b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	4818      	ldr	r0, [pc, #96]	; (8001224 <_ZL12MX_GPIO_Initv+0xfc>)
 80011c4:	f001 fc50 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	4812      	ldr	r0, [pc, #72]	; (8001228 <_ZL12MX_GPIO_Initv+0x100>)
 80011de:	f001 fc43 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011e2:	2310      	movs	r3, #16
 80011e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <_ZL12MX_GPIO_Initv+0x104>)
 80011f6:	f001 fc37 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001204:	2301      	movs	r3, #1
 8001206:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	4807      	ldr	r0, [pc, #28]	; (800122c <_ZL12MX_GPIO_Initv+0x104>)
 8001210:	f001 fc2a 	bl	8002a68 <HAL_GPIO_Init>
}
 8001214:	bf00      	nop
 8001216:	3728      	adds	r7, #40	; 0x28
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40023800 	.word	0x40023800
 8001220:	10210000 	.word	0x10210000
 8001224:	40020800 	.word	0x40020800
 8001228:	40020000 	.word	0x40020000
 800122c:	40020400 	.word	0x40020400

08001230 <_Z23ProcessKeyCodeInContexth>:

/* USER CODE BEGIN 4 */
void ProcessKeyCodeInContext(uint8_t keyCode) {
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
/*Updates the display_no
* We could also just call display funcitons directly here, but since we have extra processing speed
* Let's play with freeRTOS */
  if(display_no == 0) { /* This is the status screen, show if controller or not connected */
 800123a:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x78>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10d      	bne.n	800125e <_Z23ProcessKeyCodeInContexth+0x2e>
    if(keyCode == BACK_BTN)
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2b03      	cmp	r3, #3
 8001246:	d103      	bne.n	8001250 <_Z23ProcessKeyCodeInContexth+0x20>
      display_no = 1;
 8001248:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x78>)
 800124a:	2201      	movs	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
 800124e:	e01e      	b.n	800128e <_Z23ProcessKeyCodeInContexth+0x5e>
    else if(keyCode == FORWARD_BTN)
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	2b06      	cmp	r3, #6
 8001254:	d11b      	bne.n	800128e <_Z23ProcessKeyCodeInContexth+0x5e>
      display_no = 1;
 8001256:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x78>)
 8001258:	2201      	movs	r2, #1
 800125a:	701a      	strb	r2, [r3, #0]
 800125c:	e017      	b.n	800128e <_Z23ProcessKeyCodeInContexth+0x5e>
  } else if (display_no == 1) { /* Pair Controller Screen */
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x78>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d113      	bne.n	800128e <_Z23ProcessKeyCodeInContexth+0x5e>
    if(keyCode == BACK_BTN)
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2b03      	cmp	r3, #3
 800126a:	d103      	bne.n	8001274 <_Z23ProcessKeyCodeInContexth+0x44>
      display_no = 0;
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x78>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
 8001272:	e00c      	b.n	800128e <_Z23ProcessKeyCodeInContexth+0x5e>
    else if(keyCode == FORWARD_BTN)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b06      	cmp	r3, #6
 8001278:	d103      	bne.n	8001282 <_Z23ProcessKeyCodeInContexth+0x52>
      display_no = 0;
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x78>)
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
 8001280:	e005      	b.n	800128e <_Z23ProcessKeyCodeInContexth+0x5e>
    else if(keyCode == SELECT_BTN) {
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b05      	cmp	r3, #5
 8001286:	d102      	bne.n	800128e <_Z23ProcessKeyCodeInContexth+0x5e>
      display_no = 7;  /* Only get to the pair status screen from here */
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x78>)
 800128a:	2207      	movs	r2, #7
 800128c:	701a      	strb	r2, [r3, #0]
  } else if (display_no == 2) {

  }
//  Serial.print("\r\nDisplay no is: ");
//  Serial.print(display_no);
  display_run_once = 0;
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <_Z23ProcessKeyCodeInContexth+0x7c>)
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
  display_force_update = 1;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <_Z23ProcessKeyCodeInContexth+0x80>)
 8001296:	2201      	movs	r2, #1
 8001298:	701a      	strb	r2, [r3, #0]
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20000680 	.word	0x20000680
 80012ac:	20000684 	.word	0x20000684
 80012b0:	20000683 	.word	0x20000683

080012b4 <_Z17StartGetLatenciesPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControllerJoin */
void StartGetLatencies(void *argument)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetLatencies */
  /* Infinite loop */
  for(;;)
  {
#if rtos_delay_view //this is just used to measure the delay of StartGetBT task
	  if(timer_val_getBT >= 7) {
 80012bc:	4b2c      	ldr	r3, [pc, #176]	; (8001370 <_Z17StartGetLatenciesPv+0xbc>)
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	2b06      	cmp	r3, #6
 80012c2:	d90a      	bls.n	80012da <_Z17StartGetLatenciesPv+0x26>
		  Serial.print("\r\nWarning High CPU/BT Latency, getBT latency is: ");
 80012c4:	492b      	ldr	r1, [pc, #172]	; (8001374 <_Z17StartGetLatenciesPv+0xc0>)
 80012c6:	482c      	ldr	r0, [pc, #176]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 80012c8:	f7ff f976 	bl	80005b8 <_ZN5Print5printEPKc>
		  Serial.print(timer_val_getBT);
 80012cc:	4b28      	ldr	r3, [pc, #160]	; (8001370 <_Z17StartGetLatenciesPv+0xbc>)
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	220a      	movs	r2, #10
 80012d2:	4619      	mov	r1, r3
 80012d4:	4828      	ldr	r0, [pc, #160]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 80012d6:	f7ff f9a1 	bl	800061c <_ZN5Print5printEii>
	  }
	  if(timer_val_getUSB >= 4) {
 80012da:	4b28      	ldr	r3, [pc, #160]	; (800137c <_Z17StartGetLatenciesPv+0xc8>)
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d90a      	bls.n	80012f8 <_Z17StartGetLatenciesPv+0x44>
		  Serial.print("\r\nWarning High CPU/USB Latency, getUSB latency is: ");
 80012e2:	4927      	ldr	r1, [pc, #156]	; (8001380 <_Z17StartGetLatenciesPv+0xcc>)
 80012e4:	4824      	ldr	r0, [pc, #144]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 80012e6:	f7ff f967 	bl	80005b8 <_ZN5Print5printEPKc>
		  Serial.print(timer_val_getUSB);
 80012ea:	4b24      	ldr	r3, [pc, #144]	; (800137c <_Z17StartGetLatenciesPv+0xc8>)
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	220a      	movs	r2, #10
 80012f0:	4619      	mov	r1, r3
 80012f2:	4821      	ldr	r0, [pc, #132]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 80012f4:	f7ff f992 	bl	800061c <_ZN5Print5printEii>

	  Serial.print(" ");
	  Serial.print(timer_val_LCD);
#endif
#endif
	Serial.print("\r\nRumble Data: ");
 80012f8:	4922      	ldr	r1, [pc, #136]	; (8001384 <_Z17StartGetLatenciesPv+0xd0>)
 80012fa:	481f      	ldr	r0, [pc, #124]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 80012fc:	f7ff f95c 	bl	80005b8 <_ZN5Print5printEPKc>
	Serial.print(rx_buf[0]);
 8001300:	4b21      	ldr	r3, [pc, #132]	; (8001388 <_Z17StartGetLatenciesPv+0xd4>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	220a      	movs	r2, #10
 8001306:	4619      	mov	r1, r3
 8001308:	481b      	ldr	r0, [pc, #108]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 800130a:	f7ff f975 	bl	80005f8 <_ZN5Print5printEhi>
	Serial.print(" ");
 800130e:	491f      	ldr	r1, [pc, #124]	; (800138c <_Z17StartGetLatenciesPv+0xd8>)
 8001310:	4819      	ldr	r0, [pc, #100]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 8001312:	f7ff f951 	bl	80005b8 <_ZN5Print5printEPKc>
	Serial.print(rx_buf[3]);
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <_Z17StartGetLatenciesPv+0xd4>)
 8001318:	78db      	ldrb	r3, [r3, #3]
 800131a:	220a      	movs	r2, #10
 800131c:	4619      	mov	r1, r3
 800131e:	4816      	ldr	r0, [pc, #88]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 8001320:	f7ff f96a 	bl	80005f8 <_ZN5Print5printEhi>
	Serial.print(" ");
 8001324:	4919      	ldr	r1, [pc, #100]	; (800138c <_Z17StartGetLatenciesPv+0xd8>)
 8001326:	4814      	ldr	r0, [pc, #80]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 8001328:	f7ff f946 	bl	80005b8 <_ZN5Print5printEPKc>
	Serial.print(rx_buf[5]);
 800132c:	4b16      	ldr	r3, [pc, #88]	; (8001388 <_Z17StartGetLatenciesPv+0xd4>)
 800132e:	795b      	ldrb	r3, [r3, #5]
 8001330:	220a      	movs	r2, #10
 8001332:	4619      	mov	r1, r3
 8001334:	4810      	ldr	r0, [pc, #64]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 8001336:	f7ff f95f 	bl	80005f8 <_ZN5Print5printEhi>
	Serial.print(" ");
 800133a:	4914      	ldr	r1, [pc, #80]	; (800138c <_Z17StartGetLatenciesPv+0xd8>)
 800133c:	480e      	ldr	r0, [pc, #56]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 800133e:	f7ff f93b 	bl	80005b8 <_ZN5Print5printEPKc>
	Serial.print(dataout_ran);
 8001342:	4b13      	ldr	r3, [pc, #76]	; (8001390 <_Z17StartGetLatenciesPv+0xdc>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	220a      	movs	r2, #10
 8001348:	4619      	mov	r1, r3
 800134a:	480b      	ldr	r0, [pc, #44]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 800134c:	f7ff f954 	bl	80005f8 <_ZN5Print5printEhi>
	Serial.print(" ");
 8001350:	490e      	ldr	r1, [pc, #56]	; (800138c <_Z17StartGetLatenciesPv+0xd8>)
 8001352:	4809      	ldr	r0, [pc, #36]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 8001354:	f7ff f930 	bl	80005b8 <_ZN5Print5printEPKc>
	Serial.print(rumble_brequest_sent);
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <_Z17StartGetLatenciesPv+0xe0>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	220a      	movs	r2, #10
 800135e:	4619      	mov	r1, r3
 8001360:	4805      	ldr	r0, [pc, #20]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 8001362:	f7ff f949 	bl	80005f8 <_ZN5Print5printEhi>
	osDelay(1000);
 8001366:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800136a:	f008 ffdb 	bl	800a324 <osDelay>
	  if(timer_val_getBT >= 7) {
 800136e:	e7a5      	b.n	80012bc <_Z17StartGetLatenciesPv+0x8>
 8001370:	20000686 	.word	0x20000686
 8001374:	080138dc 	.word	0x080138dc
 8001378:	200003bc 	.word	0x200003bc
 800137c:	20000688 	.word	0x20000688
 8001380:	08013910 	.word	0x08013910
 8001384:	08013944 	.word	0x08013944
 8001388:	200001c8 	.word	0x200001c8
 800138c:	08013954 	.word	0x08013954
 8001390:	20000abb 	.word	0x20000abb
 8001394:	20000abd 	.word	0x20000abd

08001398 <_Z10StartGetBTPv>:
  /* USER CODE END StartGetLatencies */
}
/* USER CODE END 4 */

void StartGetBT(void *argument)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */

  /* USER CODE BEGIN 5 */
  if (Usb.Init() == -1) {
 80013a0:	48b5      	ldr	r0, [pc, #724]	; (8001678 <_Z10StartGetBTPv+0x2e0>)
 80013a2:	f000 fce9 	bl	8001d78 <_ZN8MAX3421eI3P102P9E4InitEv>
 80013a6:	4603      	mov	r3, r0
 80013a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ac:	bf0c      	ite	eq
 80013ae:	2301      	moveq	r3, #1
 80013b0:	2300      	movne	r3, #0
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d004      	beq.n	80013c2 <_Z10StartGetBTPv+0x2a>
  		Serial.print(F("\r\nOSC did not start"));
 80013b8:	49b0      	ldr	r1, [pc, #704]	; (800167c <_Z10StartGetBTPv+0x2e4>)
 80013ba:	48b1      	ldr	r0, [pc, #708]	; (8001680 <_Z10StartGetBTPv+0x2e8>)
 80013bc:	f7ff f8ee 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
  		while (1); // Halt
 80013c0:	e7fe      	b.n	80013c0 <_Z10StartGetBTPv+0x28>
  }
  Serial.print(F("\r\nPS4 Bluetooth Library Started"));
 80013c2:	49b0      	ldr	r1, [pc, #704]	; (8001684 <_Z10StartGetBTPv+0x2ec>)
 80013c4:	48ae      	ldr	r0, [pc, #696]	; (8001680 <_Z10StartGetBTPv+0x2e8>)
 80013c6:	f7ff f8e9 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>

  /*Initialize our gamepad, this is for use on a PC*/
  gameHID.JoyX = 0;
 80013ca:	4baf      	ldr	r3, [pc, #700]	; (8001688 <_Z10StartGetBTPv+0x2f0>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	709a      	strb	r2, [r3, #2]
  gameHID.JoyY = 0;
 80013d0:	4bad      	ldr	r3, [pc, #692]	; (8001688 <_Z10StartGetBTPv+0x2f0>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	70da      	strb	r2, [r3, #3]
  gameHID.Joy2X = 0;
 80013d6:	4bac      	ldr	r3, [pc, #688]	; (8001688 <_Z10StartGetBTPv+0x2f0>)
 80013d8:	2200      	movs	r2, #0
 80013da:	711a      	strb	r2, [r3, #4]
  gameHID.Joy2Y = 0;
 80013dc:	4baa      	ldr	r3, [pc, #680]	; (8001688 <_Z10StartGetBTPv+0x2f0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	715a      	strb	r2, [r3, #5]
  gameHID.Joy_LT = 0;
 80013e2:	4ba9      	ldr	r3, [pc, #676]	; (8001688 <_Z10StartGetBTPv+0x2f0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
  gameHID.Joy_RT = 0;
 80013e8:	4ba7      	ldr	r3, [pc, #668]	; (8001688 <_Z10StartGetBTPv+0x2f0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	705a      	strb	r2, [r3, #1]
  gameHID.ps4ButtonsTag.dummy = 0;
 80013ee:	4aa6      	ldr	r2, [pc, #664]	; (8001688 <_Z10StartGetBTPv+0x2f0>)
 80013f0:	7993      	ldrb	r3, [r2, #6]
 80013f2:	f36f 0300 	bfc	r3, #0, #1
 80013f6:	7193      	strb	r3, [r2, #6]


  /* Initalize our Xbox Controller data that we will send in our hid reports */
  xboxHID.startByte = 0x00;
 80013f8:	4ba4      	ldr	r3, [pc, #656]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
  xboxHID.bLength = 20;
 80013fe:	4ba3      	ldr	r3, [pc, #652]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 8001400:	2214      	movs	r2, #20
 8001402:	705a      	strb	r2, [r3, #1]
  xboxHID.dButtons = 0x00;
 8001404:	4ba1      	ldr	r3, [pc, #644]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 8001406:	2200      	movs	r2, #0
 8001408:	709a      	strb	r2, [r3, #2]
  xboxHID.A = 0;
 800140a:	4ba0      	ldr	r3, [pc, #640]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 800140c:	2200      	movs	r2, #0
 800140e:	711a      	strb	r2, [r3, #4]
  xboxHID.B = 0;
 8001410:	4b9e      	ldr	r3, [pc, #632]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 8001412:	2200      	movs	r2, #0
 8001414:	715a      	strb	r2, [r3, #5]
  xboxHID.X = 0;
 8001416:	4b9d      	ldr	r3, [pc, #628]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 8001418:	2200      	movs	r2, #0
 800141a:	719a      	strb	r2, [r3, #6]
  xboxHID.Y = 0;
 800141c:	4b9b      	ldr	r3, [pc, #620]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 800141e:	2200      	movs	r2, #0
 8001420:	71da      	strb	r2, [r3, #7]
  xboxHID.BLACK = 0;
 8001422:	4b9a      	ldr	r3, [pc, #616]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 8001424:	2200      	movs	r2, #0
 8001426:	721a      	strb	r2, [r3, #8]
  xboxHID.WHITE = 0;
 8001428:	4b98      	ldr	r3, [pc, #608]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 800142a:	2200      	movs	r2, #0
 800142c:	725a      	strb	r2, [r3, #9]
  xboxHID.L = 0;
 800142e:	4b97      	ldr	r3, [pc, #604]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 8001430:	2200      	movs	r2, #0
 8001432:	729a      	strb	r2, [r3, #10]
  xboxHID.R = 0;
 8001434:	4b95      	ldr	r3, [pc, #596]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 8001436:	2200      	movs	r2, #0
 8001438:	72da      	strb	r2, [r3, #11]
  xboxHID.leftStickX = 0;
 800143a:	4b94      	ldr	r3, [pc, #592]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 800143c:	2200      	movs	r2, #0
 800143e:	819a      	strh	r2, [r3, #12]
  xboxHID.leftStickY = 0;
 8001440:	4b92      	ldr	r3, [pc, #584]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 8001442:	2200      	movs	r2, #0
 8001444:	81da      	strh	r2, [r3, #14]
  xboxHID.rightStickX = 0;
 8001446:	4b91      	ldr	r3, [pc, #580]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 8001448:	2200      	movs	r2, #0
 800144a:	821a      	strh	r2, [r3, #16]
  xboxHID.rightStickY = 0;
 800144c:	4b8f      	ldr	r3, [pc, #572]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 800144e:	2200      	movs	r2, #0
 8001450:	825a      	strh	r2, [r3, #18]
//		}
//		if(usb_failed || usb_failed2) {
//			Serial.print("\r\nUSBd failed");
//		}
#if rtos_delay_view
	  	timer_val_getBT = __HAL_TIM_GET_COUNTER(&htim14);
 8001452:	4b8f      	ldr	r3, [pc, #572]	; (8001690 <_Z10StartGetBTPv+0x2f8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	b29a      	uxth	r2, r3
 800145a:	4b8e      	ldr	r3, [pc, #568]	; (8001694 <_Z10StartGetBTPv+0x2fc>)
 800145c:	801a      	strh	r2, [r3, #0]
#endif
		Usb.Task();
 800145e:	4886      	ldr	r0, [pc, #536]	; (8001678 <_Z10StartGetBTPv+0x2e0>)
 8001460:	f011 f90e 	bl	8012680 <_ZN3USB4TaskEv>
		if (PS4.connected()) {
 8001464:	488c      	ldr	r0, [pc, #560]	; (8001698 <_Z10StartGetBTPv+0x300>)
 8001466:	f7ff fb69 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 825e 	beq.w	800192e <_Z10StartGetBTPv+0x596>
			ps4_connected = 1;
 8001472:	4b8a      	ldr	r3, [pc, #552]	; (800169c <_Z10StartGetBTPv+0x304>)
 8001474:	2201      	movs	r2, #1
 8001476:	701a      	strb	r2, [r3, #0]
			LeftHatX_val = PS4.getAnalogHat(LeftHatX);
 8001478:	2100      	movs	r1, #0
 800147a:	4889      	ldr	r0, [pc, #548]	; (80016a0 <_Z10StartGetBTPv+0x308>)
 800147c:	f010 faed 	bl	8011a5a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	4b87      	ldr	r3, [pc, #540]	; (80016a4 <_Z10StartGetBTPv+0x30c>)
 8001486:	701a      	strb	r2, [r3, #0]
			LeftHatY_val = PS4.getAnalogHat(LeftHatY);
 8001488:	2101      	movs	r1, #1
 800148a:	4885      	ldr	r0, [pc, #532]	; (80016a0 <_Z10StartGetBTPv+0x308>)
 800148c:	f010 fae5 	bl	8011a5a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	4b84      	ldr	r3, [pc, #528]	; (80016a8 <_Z10StartGetBTPv+0x310>)
 8001496:	701a      	strb	r2, [r3, #0]
			RightHatX_val = PS4.getAnalogHat(RightHatX);
 8001498:	2102      	movs	r1, #2
 800149a:	4881      	ldr	r0, [pc, #516]	; (80016a0 <_Z10StartGetBTPv+0x308>)
 800149c:	f010 fadd 	bl	8011a5a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b81      	ldr	r3, [pc, #516]	; (80016ac <_Z10StartGetBTPv+0x314>)
 80014a6:	701a      	strb	r2, [r3, #0]
			RightHatY_val = PS4.getAnalogHat(RightHatY);
 80014a8:	2103      	movs	r1, #3
 80014aa:	487d      	ldr	r0, [pc, #500]	; (80016a0 <_Z10StartGetBTPv+0x308>)
 80014ac:	f010 fad5 	bl	8011a5a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b7e      	ldr	r3, [pc, #504]	; (80016b0 <_Z10StartGetBTPv+0x318>)
 80014b6:	701a      	strb	r2, [r3, #0]
				gameHID.Joy2Y = 0;
				xboxHID.rightStickX = 0;
				xboxHID.rightStickY = 0;
			}
#elif !deadzone_enable
			gameHID.JoyX = PS4.getAnalogHat(LeftHatX) - 128;
 80014b8:	2100      	movs	r1, #0
 80014ba:	4879      	ldr	r0, [pc, #484]	; (80016a0 <_Z10StartGetBTPv+0x308>)
 80014bc:	f010 facd 	bl	8011a5a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80014c0:	4603      	mov	r3, r0
 80014c2:	3b80      	subs	r3, #128	; 0x80
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	b25a      	sxtb	r2, r3
 80014c8:	4b6f      	ldr	r3, [pc, #444]	; (8001688 <_Z10StartGetBTPv+0x2f0>)
 80014ca:	709a      	strb	r2, [r3, #2]
			gameHID.JoyY = PS4.getAnalogHat(LeftHatY) - 128;
 80014cc:	2101      	movs	r1, #1
 80014ce:	4874      	ldr	r0, [pc, #464]	; (80016a0 <_Z10StartGetBTPv+0x308>)
 80014d0:	f010 fac3 	bl	8011a5a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80014d4:	4603      	mov	r3, r0
 80014d6:	3b80      	subs	r3, #128	; 0x80
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	b25a      	sxtb	r2, r3
 80014dc:	4b6a      	ldr	r3, [pc, #424]	; (8001688 <_Z10StartGetBTPv+0x2f0>)
 80014de:	70da      	strb	r2, [r3, #3]
			xboxHID.leftStickX = gameHID.JoyX << 8;	//only getting 8 bit value from bt
 80014e0:	4b69      	ldr	r3, [pc, #420]	; (8001688 <_Z10StartGetBTPv+0x2f0>)
 80014e2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80014e6:	021b      	lsls	r3, r3, #8
 80014e8:	b21a      	sxth	r2, r3
 80014ea:	4b68      	ldr	r3, [pc, #416]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 80014ec:	819a      	strh	r2, [r3, #12]
			xboxHID.leftStickY = gameHID.JoyY << 8;	//xbox uses 16 bit signed
 80014ee:	4b66      	ldr	r3, [pc, #408]	; (8001688 <_Z10StartGetBTPv+0x2f0>)
 80014f0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80014f4:	021b      	lsls	r3, r3, #8
 80014f6:	b21a      	sxth	r2, r3
 80014f8:	4b64      	ldr	r3, [pc, #400]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 80014fa:	81da      	strh	r2, [r3, #14]
			/* The Y axis by default is inverted on the Xbox */
			xboxHID.leftStickY = -xboxHID.leftStickY-128;
 80014fc:	4b63      	ldr	r3, [pc, #396]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 80014fe:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001502:	b29a      	uxth	r2, r3
 8001504:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001508:	1a9b      	subs	r3, r3, r2
 800150a:	b29b      	uxth	r3, r3
 800150c:	b21a      	sxth	r2, r3
 800150e:	4b5f      	ldr	r3, [pc, #380]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 8001510:	81da      	strh	r2, [r3, #14]

			gameHID.Joy2X = PS4.getAnalogHat(RightHatX) - 128;
 8001512:	2102      	movs	r1, #2
 8001514:	4862      	ldr	r0, [pc, #392]	; (80016a0 <_Z10StartGetBTPv+0x308>)
 8001516:	f010 faa0 	bl	8011a5a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800151a:	4603      	mov	r3, r0
 800151c:	3b80      	subs	r3, #128	; 0x80
 800151e:	b2db      	uxtb	r3, r3
 8001520:	b25a      	sxtb	r2, r3
 8001522:	4b59      	ldr	r3, [pc, #356]	; (8001688 <_Z10StartGetBTPv+0x2f0>)
 8001524:	711a      	strb	r2, [r3, #4]
			gameHID.Joy2Y = PS4.getAnalogHat(RightHatY) - 128;
 8001526:	2103      	movs	r1, #3
 8001528:	485d      	ldr	r0, [pc, #372]	; (80016a0 <_Z10StartGetBTPv+0x308>)
 800152a:	f010 fa96 	bl	8011a5a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800152e:	4603      	mov	r3, r0
 8001530:	3b80      	subs	r3, #128	; 0x80
 8001532:	b2db      	uxtb	r3, r3
 8001534:	b25a      	sxtb	r2, r3
 8001536:	4b54      	ldr	r3, [pc, #336]	; (8001688 <_Z10StartGetBTPv+0x2f0>)
 8001538:	715a      	strb	r2, [r3, #5]
			xboxHID.rightStickX = gameHID.Joy2X << 8;
 800153a:	4b53      	ldr	r3, [pc, #332]	; (8001688 <_Z10StartGetBTPv+0x2f0>)
 800153c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001540:	021b      	lsls	r3, r3, #8
 8001542:	b21a      	sxth	r2, r3
 8001544:	4b51      	ldr	r3, [pc, #324]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 8001546:	821a      	strh	r2, [r3, #16]
			xboxHID.rightStickY = gameHID.Joy2Y << 8;
 8001548:	4b4f      	ldr	r3, [pc, #316]	; (8001688 <_Z10StartGetBTPv+0x2f0>)
 800154a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	b21a      	sxth	r2, r3
 8001552:	4b4e      	ldr	r3, [pc, #312]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 8001554:	825a      	strh	r2, [r3, #18]

			/* The Y axis by default is inverted on the Xbox */
			xboxHID.rightStickY = -xboxHID.rightStickY - 128;
 8001556:	4b4d      	ldr	r3, [pc, #308]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 8001558:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800155c:	b29a      	uxth	r2, r3
 800155e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001562:	1a9b      	subs	r3, r3, r2
 8001564:	b29b      	uxth	r3, r3
 8001566:	b21a      	sxth	r2, r3
 8001568:	4b48      	ldr	r3, [pc, #288]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 800156a:	825a      	strh	r2, [r3, #18]
#endif

			xboxHID.L = PS4.getAnalogButton(L2);
 800156c:	2108      	movs	r1, #8
 800156e:	484c      	ldr	r0, [pc, #304]	; (80016a0 <_Z10StartGetBTPv+0x308>)
 8001570:	f010 fa5a 	bl	8011a28 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001574:	4603      	mov	r3, r0
 8001576:	461a      	mov	r2, r3
 8001578:	4b44      	ldr	r3, [pc, #272]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 800157a:	729a      	strb	r2, [r3, #10]
			xboxHID.R = PS4.getAnalogButton(R2);
 800157c:	2109      	movs	r1, #9
 800157e:	4848      	ldr	r0, [pc, #288]	; (80016a0 <_Z10StartGetBTPv+0x308>)
 8001580:	f010 fa52 	bl	8011a28 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001584:	4603      	mov	r3, r0
 8001586:	461a      	mov	r2, r3
 8001588:	4b40      	ldr	r3, [pc, #256]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 800158a:	72da      	strb	r2, [r3, #11]
			gameHID.Joy_LT = xboxHID.L - 128;
 800158c:	4b3f      	ldr	r3, [pc, #252]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 800158e:	7a9b      	ldrb	r3, [r3, #10]
 8001590:	3b80      	subs	r3, #128	; 0x80
 8001592:	b2db      	uxtb	r3, r3
 8001594:	b25a      	sxtb	r2, r3
 8001596:	4b3c      	ldr	r3, [pc, #240]	; (8001688 <_Z10StartGetBTPv+0x2f0>)
 8001598:	701a      	strb	r2, [r3, #0]
			gameHID.Joy_RT = xboxHID.R - 128;
 800159a:	4b3c      	ldr	r3, [pc, #240]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 800159c:	7adb      	ldrb	r3, [r3, #11]
 800159e:	3b80      	subs	r3, #128	; 0x80
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	b25a      	sxtb	r2, r3
 80015a4:	4b38      	ldr	r3, [pc, #224]	; (8001688 <_Z10StartGetBTPv+0x2f0>)
 80015a6:	705a      	strb	r2, [r3, #1]

			if (PS4.getButtonClick(PS)) {
 80015a8:	2110      	movs	r1, #16
 80015aa:	483d      	ldr	r0, [pc, #244]	; (80016a0 <_Z10StartGetBTPv+0x308>)
 80015ac:	f010 f9fc 	bl	80119a8 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d008      	beq.n	80015c8 <_Z10StartGetBTPv+0x230>
				PS4.disconnect();
 80015b6:	4838      	ldr	r0, [pc, #224]	; (8001698 <_Z10StartGetBTPv+0x300>)
 80015b8:	f00f f9af 	bl	801091a <_ZN5BTHID10disconnectEv>
				display_run_once = 0;
 80015bc:	4b3d      	ldr	r3, [pc, #244]	; (80016b4 <_Z10StartGetBTPv+0x31c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
				rumble_once = 0;
 80015c2:	4b3d      	ldr	r3, [pc, #244]	; (80016b8 <_Z10StartGetBTPv+0x320>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
        
			}
			if (PS4.getButtonPress(TRIANGLE)) {
 80015c8:	210c      	movs	r1, #12
 80015ca:	4835      	ldr	r0, [pc, #212]	; (80016a0 <_Z10StartGetBTPv+0x308>)
 80015cc:	f010 f9c4 	bl	8011958 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d008      	beq.n	80015e8 <_Z10StartGetBTPv+0x250>
				gameHID.ps4ButtonsTag.button_triangle = 1;
 80015d6:	4a2c      	ldr	r2, [pc, #176]	; (8001688 <_Z10StartGetBTPv+0x2f0>)
 80015d8:	79d3      	ldrb	r3, [r2, #7]
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	71d3      	strb	r3, [r2, #7]
				xboxHID.Y = 0xFF;
 80015e0:	4b2a      	ldr	r3, [pc, #168]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 80015e2:	22ff      	movs	r2, #255	; 0xff
 80015e4:	71da      	strb	r2, [r3, #7]
 80015e6:	e007      	b.n	80015f8 <_Z10StartGetBTPv+0x260>
			} else {
				gameHID.ps4ButtonsTag.button_triangle = 0;
 80015e8:	4a27      	ldr	r2, [pc, #156]	; (8001688 <_Z10StartGetBTPv+0x2f0>)
 80015ea:	79d3      	ldrb	r3, [r2, #7]
 80015ec:	f36f 0300 	bfc	r3, #0, #1
 80015f0:	71d3      	strb	r3, [r2, #7]
				xboxHID.Y = 0;
 80015f2:	4b26      	ldr	r3, [pc, #152]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	71da      	strb	r2, [r3, #7]
			}

			if (PS4.getButtonPress(CIRCLE)) {
 80015f8:	210d      	movs	r1, #13
 80015fa:	4829      	ldr	r0, [pc, #164]	; (80016a0 <_Z10StartGetBTPv+0x308>)
 80015fc:	f010 f9ac 	bl	8011958 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d008      	beq.n	8001618 <_Z10StartGetBTPv+0x280>
				gameHID.ps4ButtonsTag.button_circle = 1;
 8001606:	4a20      	ldr	r2, [pc, #128]	; (8001688 <_Z10StartGetBTPv+0x2f0>)
 8001608:	7993      	ldrb	r3, [r2, #6]
 800160a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800160e:	7193      	strb	r3, [r2, #6]
				xboxHID.B = 0xFF;
 8001610:	4b1e      	ldr	r3, [pc, #120]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 8001612:	22ff      	movs	r2, #255	; 0xff
 8001614:	715a      	strb	r2, [r3, #5]
 8001616:	e007      	b.n	8001628 <_Z10StartGetBTPv+0x290>
			} else {
				gameHID.ps4ButtonsTag.button_circle = 0;
 8001618:	4a1b      	ldr	r2, [pc, #108]	; (8001688 <_Z10StartGetBTPv+0x2f0>)
 800161a:	7993      	ldrb	r3, [r2, #6]
 800161c:	f36f 13c7 	bfc	r3, #7, #1
 8001620:	7193      	strb	r3, [r2, #6]
				xboxHID.B = 0;
 8001622:	4b1a      	ldr	r3, [pc, #104]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 8001624:	2200      	movs	r2, #0
 8001626:	715a      	strb	r2, [r3, #5]
			}

			if (PS4.getButtonPress(CROSS)) {
 8001628:	210e      	movs	r1, #14
 800162a:	481d      	ldr	r0, [pc, #116]	; (80016a0 <_Z10StartGetBTPv+0x308>)
 800162c:	f010 f994 	bl	8011958 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d008      	beq.n	8001648 <_Z10StartGetBTPv+0x2b0>
				gameHID.ps4ButtonsTag.button_cross = 1;
 8001636:	4a14      	ldr	r2, [pc, #80]	; (8001688 <_Z10StartGetBTPv+0x2f0>)
 8001638:	7993      	ldrb	r3, [r2, #6]
 800163a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800163e:	7193      	strb	r3, [r2, #6]
				xboxHID.A = 0xFF;
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 8001642:	22ff      	movs	r2, #255	; 0xff
 8001644:	711a      	strb	r2, [r3, #4]
 8001646:	e007      	b.n	8001658 <_Z10StartGetBTPv+0x2c0>
			} else {
				gameHID.ps4ButtonsTag.button_cross = 0;
 8001648:	4a0f      	ldr	r2, [pc, #60]	; (8001688 <_Z10StartGetBTPv+0x2f0>)
 800164a:	7993      	ldrb	r3, [r2, #6]
 800164c:	f36f 1386 	bfc	r3, #6, #1
 8001650:	7193      	strb	r3, [r2, #6]
				xboxHID.A = 0;
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 8001654:	2200      	movs	r2, #0
 8001656:	711a      	strb	r2, [r3, #4]
			}

			if (PS4.getButtonPress(SQUARE)) {
 8001658:	210f      	movs	r1, #15
 800165a:	4811      	ldr	r0, [pc, #68]	; (80016a0 <_Z10StartGetBTPv+0x308>)
 800165c:	f010 f97c 	bl	8011958 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d02a      	beq.n	80016bc <_Z10StartGetBTPv+0x324>
				gameHID.ps4ButtonsTag.button_square = 1;
 8001666:	4a08      	ldr	r2, [pc, #32]	; (8001688 <_Z10StartGetBTPv+0x2f0>)
 8001668:	79d3      	ldrb	r3, [r2, #7]
 800166a:	f043 0302 	orr.w	r3, r3, #2
 800166e:	71d3      	strb	r3, [r2, #7]
				xboxHID.X = 0xFF;
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <_Z10StartGetBTPv+0x2f4>)
 8001672:	22ff      	movs	r2, #255	; 0xff
 8001674:	719a      	strb	r2, [r3, #6]
 8001676:	e029      	b.n	80016cc <_Z10StartGetBTPv+0x334>
 8001678:	200003d0 	.word	0x200003d0
 800167c:	08013958 	.word	0x08013958
 8001680:	200003bc 	.word	0x200003bc
 8001684:	0801396c 	.word	0x0801396c
 8001688:	2000068c 	.word	0x2000068c
 800168c:	20000694 	.word	0x20000694
 8001690:	200002c0 	.word	0x200002c0
 8001694:	20000686 	.word	0x20000686
 8001698:	200005a4 	.word	0x200005a4
 800169c:	2000066e 	.word	0x2000066e
 80016a0:	2000061c 	.word	0x2000061c
 80016a4:	2000066f 	.word	0x2000066f
 80016a8:	20000670 	.word	0x20000670
 80016ac:	20000671 	.word	0x20000671
 80016b0:	20000672 	.word	0x20000672
 80016b4:	20000684 	.word	0x20000684
 80016b8:	2000066d 	.word	0x2000066d
			} else {
				gameHID.ps4ButtonsTag.button_square = 0;
 80016bc:	4ab4      	ldr	r2, [pc, #720]	; (8001990 <_Z10StartGetBTPv+0x5f8>)
 80016be:	79d3      	ldrb	r3, [r2, #7]
 80016c0:	f36f 0341 	bfc	r3, #1, #1
 80016c4:	71d3      	strb	r3, [r2, #7]
				xboxHID.X = 0;
 80016c6:	4bb3      	ldr	r3, [pc, #716]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	719a      	strb	r2, [r3, #6]
			}

			if (PS4.getButtonPress(UP)) {
 80016cc:	2100      	movs	r1, #0
 80016ce:	48b2      	ldr	r0, [pc, #712]	; (8001998 <_Z10StartGetBTPv+0x600>)
 80016d0:	f010 f942 	bl	8011958 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00c      	beq.n	80016f4 <_Z10StartGetBTPv+0x35c>
				gameHID.ps4ButtonsTag.button_dpad_up = 1;
 80016da:	4aad      	ldr	r2, [pc, #692]	; (8001990 <_Z10StartGetBTPv+0x5f8>)
 80016dc:	79d3      	ldrb	r3, [r2, #7]
 80016de:	f043 0304 	orr.w	r3, r3, #4
 80016e2:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DUP;
 80016e4:	4bab      	ldr	r3, [pc, #684]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 80016e6:	789b      	ldrb	r3, [r3, #2]
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4ba9      	ldr	r3, [pc, #676]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 80016f0:	709a      	strb	r2, [r3, #2]
 80016f2:	e00b      	b.n	800170c <_Z10StartGetBTPv+0x374>
			} else {
				gameHID.ps4ButtonsTag.button_dpad_up = 0;
 80016f4:	4aa6      	ldr	r2, [pc, #664]	; (8001990 <_Z10StartGetBTPv+0x5f8>)
 80016f6:	79d3      	ldrb	r3, [r2, #7]
 80016f8:	f36f 0382 	bfc	r3, #2, #1
 80016fc:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DUP;
 80016fe:	4ba5      	ldr	r3, [pc, #660]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 8001700:	789b      	ldrb	r3, [r3, #2]
 8001702:	f023 0301 	bic.w	r3, r3, #1
 8001706:	b2da      	uxtb	r2, r3
 8001708:	4ba2      	ldr	r3, [pc, #648]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 800170a:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(RIGHT)) {
 800170c:	2101      	movs	r1, #1
 800170e:	48a2      	ldr	r0, [pc, #648]	; (8001998 <_Z10StartGetBTPv+0x600>)
 8001710:	f010 f922 	bl	8011958 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00c      	beq.n	8001734 <_Z10StartGetBTPv+0x39c>
				gameHID.ps4ButtonsTag.button_dpad_right = 1;
 800171a:	4a9d      	ldr	r2, [pc, #628]	; (8001990 <_Z10StartGetBTPv+0x5f8>)
 800171c:	79d3      	ldrb	r3, [r2, #7]
 800171e:	f043 0308 	orr.w	r3, r3, #8
 8001722:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DRIGHT;
 8001724:	4b9b      	ldr	r3, [pc, #620]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 8001726:	789b      	ldrb	r3, [r3, #2]
 8001728:	f043 0308 	orr.w	r3, r3, #8
 800172c:	b2da      	uxtb	r2, r3
 800172e:	4b99      	ldr	r3, [pc, #612]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 8001730:	709a      	strb	r2, [r3, #2]
 8001732:	e00b      	b.n	800174c <_Z10StartGetBTPv+0x3b4>
			} else {
				gameHID.ps4ButtonsTag.button_dpad_right = 0;
 8001734:	4a96      	ldr	r2, [pc, #600]	; (8001990 <_Z10StartGetBTPv+0x5f8>)
 8001736:	79d3      	ldrb	r3, [r2, #7]
 8001738:	f36f 03c3 	bfc	r3, #3, #1
 800173c:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DRIGHT;
 800173e:	4b95      	ldr	r3, [pc, #596]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 8001740:	789b      	ldrb	r3, [r3, #2]
 8001742:	f023 0308 	bic.w	r3, r3, #8
 8001746:	b2da      	uxtb	r2, r3
 8001748:	4b92      	ldr	r3, [pc, #584]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 800174a:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(DOWN)) {
 800174c:	2102      	movs	r1, #2
 800174e:	4892      	ldr	r0, [pc, #584]	; (8001998 <_Z10StartGetBTPv+0x600>)
 8001750:	f010 f902 	bl	8011958 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00c      	beq.n	8001774 <_Z10StartGetBTPv+0x3dc>
				gameHID.ps4ButtonsTag.button_dpad_down = 1;
 800175a:	4a8d      	ldr	r2, [pc, #564]	; (8001990 <_Z10StartGetBTPv+0x5f8>)
 800175c:	79d3      	ldrb	r3, [r2, #7]
 800175e:	f043 0320 	orr.w	r3, r3, #32
 8001762:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DDOWN;
 8001764:	4b8b      	ldr	r3, [pc, #556]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 8001766:	789b      	ldrb	r3, [r3, #2]
 8001768:	f043 0302 	orr.w	r3, r3, #2
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4b89      	ldr	r3, [pc, #548]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 8001770:	709a      	strb	r2, [r3, #2]
 8001772:	e00b      	b.n	800178c <_Z10StartGetBTPv+0x3f4>
			} else {
				gameHID.ps4ButtonsTag.button_dpad_down = 0;
 8001774:	4a86      	ldr	r2, [pc, #536]	; (8001990 <_Z10StartGetBTPv+0x5f8>)
 8001776:	79d3      	ldrb	r3, [r2, #7]
 8001778:	f36f 1345 	bfc	r3, #5, #1
 800177c:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DDOWN;
 800177e:	4b85      	ldr	r3, [pc, #532]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 8001780:	789b      	ldrb	r3, [r3, #2]
 8001782:	f023 0302 	bic.w	r3, r3, #2
 8001786:	b2da      	uxtb	r2, r3
 8001788:	4b82      	ldr	r3, [pc, #520]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 800178a:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(LEFT)) {
 800178c:	2103      	movs	r1, #3
 800178e:	4882      	ldr	r0, [pc, #520]	; (8001998 <_Z10StartGetBTPv+0x600>)
 8001790:	f010 f8e2 	bl	8011958 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00c      	beq.n	80017b4 <_Z10StartGetBTPv+0x41c>
				gameHID.ps4ButtonsTag.button_dpad_left = 1;
 800179a:	4a7d      	ldr	r2, [pc, #500]	; (8001990 <_Z10StartGetBTPv+0x5f8>)
 800179c:	79d3      	ldrb	r3, [r2, #7]
 800179e:	f043 0310 	orr.w	r3, r3, #16
 80017a2:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DLEFT;
 80017a4:	4b7b      	ldr	r3, [pc, #492]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 80017a6:	789b      	ldrb	r3, [r3, #2]
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4b79      	ldr	r3, [pc, #484]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 80017b0:	709a      	strb	r2, [r3, #2]
 80017b2:	e00b      	b.n	80017cc <_Z10StartGetBTPv+0x434>

			} else {
				gameHID.ps4ButtonsTag.button_dpad_left = 0;
 80017b4:	4a76      	ldr	r2, [pc, #472]	; (8001990 <_Z10StartGetBTPv+0x5f8>)
 80017b6:	79d3      	ldrb	r3, [r2, #7]
 80017b8:	f36f 1304 	bfc	r3, #4, #1
 80017bc:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DLEFT;
 80017be:	4b75      	ldr	r3, [pc, #468]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 80017c0:	789b      	ldrb	r3, [r3, #2]
 80017c2:	f023 0304 	bic.w	r3, r3, #4
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	4b72      	ldr	r3, [pc, #456]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 80017ca:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(L1)) {
 80017cc:	210a      	movs	r1, #10
 80017ce:	4872      	ldr	r0, [pc, #456]	; (8001998 <_Z10StartGetBTPv+0x600>)
 80017d0:	f010 f8c2 	bl	8011958 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d008      	beq.n	80017ec <_Z10StartGetBTPv+0x454>
				gameHID.ps4ButtonsTag.button_left_trigger = 1;
 80017da:	4a6d      	ldr	r2, [pc, #436]	; (8001990 <_Z10StartGetBTPv+0x5f8>)
 80017dc:	7993      	ldrb	r3, [r2, #6]
 80017de:	f043 0320 	orr.w	r3, r3, #32
 80017e2:	7193      	strb	r3, [r2, #6]
				xboxHID.WHITE = 0xFF;
 80017e4:	4b6b      	ldr	r3, [pc, #428]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 80017e6:	22ff      	movs	r2, #255	; 0xff
 80017e8:	725a      	strb	r2, [r3, #9]
 80017ea:	e007      	b.n	80017fc <_Z10StartGetBTPv+0x464>

			} else {
				gameHID.ps4ButtonsTag.button_left_trigger = 0;
 80017ec:	4a68      	ldr	r2, [pc, #416]	; (8001990 <_Z10StartGetBTPv+0x5f8>)
 80017ee:	7993      	ldrb	r3, [r2, #6]
 80017f0:	f36f 1345 	bfc	r3, #5, #1
 80017f4:	7193      	strb	r3, [r2, #6]
				xboxHID.WHITE = 0;
 80017f6:	4b67      	ldr	r3, [pc, #412]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	725a      	strb	r2, [r3, #9]
			}

			if (PS4.getButtonPress(L3)) {
 80017fc:	2106      	movs	r1, #6
 80017fe:	4866      	ldr	r0, [pc, #408]	; (8001998 <_Z10StartGetBTPv+0x600>)
 8001800:	f010 f8aa 	bl	8011958 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00c      	beq.n	8001824 <_Z10StartGetBTPv+0x48c>
				gameHID.ps4ButtonsTag.button_left_thumb = 1;
 800180a:	4a61      	ldr	r2, [pc, #388]	; (8001990 <_Z10StartGetBTPv+0x5f8>)
 800180c:	79d3      	ldrb	r3, [r2, #7]
 800180e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001812:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_LS_BTN;
 8001814:	4b5f      	ldr	r3, [pc, #380]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 8001816:	789b      	ldrb	r3, [r3, #2]
 8001818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4b5d      	ldr	r3, [pc, #372]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 8001820:	709a      	strb	r2, [r3, #2]
 8001822:	e00b      	b.n	800183c <_Z10StartGetBTPv+0x4a4>
			} else {
				gameHID.ps4ButtonsTag.button_left_thumb = 0;
 8001824:	4a5a      	ldr	r2, [pc, #360]	; (8001990 <_Z10StartGetBTPv+0x5f8>)
 8001826:	79d3      	ldrb	r3, [r2, #7]
 8001828:	f36f 1386 	bfc	r3, #6, #1
 800182c:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_LS_BTN;
 800182e:	4b59      	ldr	r3, [pc, #356]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 8001830:	789b      	ldrb	r3, [r3, #2]
 8001832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001836:	b2da      	uxtb	r2, r3
 8001838:	4b56      	ldr	r3, [pc, #344]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 800183a:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(R1)) {
 800183c:	210b      	movs	r1, #11
 800183e:	4856      	ldr	r0, [pc, #344]	; (8001998 <_Z10StartGetBTPv+0x600>)
 8001840:	f010 f88a 	bl	8011958 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d008      	beq.n	800185c <_Z10StartGetBTPv+0x4c4>
				gameHID.ps4ButtonsTag.button_right_trigger = 1;
 800184a:	4a51      	ldr	r2, [pc, #324]	; (8001990 <_Z10StartGetBTPv+0x5f8>)
 800184c:	7993      	ldrb	r3, [r2, #6]
 800184e:	f043 0310 	orr.w	r3, r3, #16
 8001852:	7193      	strb	r3, [r2, #6]
				xboxHID.BLACK = 0xFF;
 8001854:	4b4f      	ldr	r3, [pc, #316]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 8001856:	22ff      	movs	r2, #255	; 0xff
 8001858:	721a      	strb	r2, [r3, #8]
 800185a:	e007      	b.n	800186c <_Z10StartGetBTPv+0x4d4>
			} else {
				gameHID.ps4ButtonsTag.button_right_trigger = 0;
 800185c:	4a4c      	ldr	r2, [pc, #304]	; (8001990 <_Z10StartGetBTPv+0x5f8>)
 800185e:	7993      	ldrb	r3, [r2, #6]
 8001860:	f36f 1304 	bfc	r3, #4, #1
 8001864:	7193      	strb	r3, [r2, #6]
				xboxHID.BLACK = 0;
 8001866:	4b4b      	ldr	r3, [pc, #300]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 8001868:	2200      	movs	r2, #0
 800186a:	721a      	strb	r2, [r3, #8]
			}

			if (PS4.getButtonPress(R3)) {
 800186c:	2107      	movs	r1, #7
 800186e:	484a      	ldr	r0, [pc, #296]	; (8001998 <_Z10StartGetBTPv+0x600>)
 8001870:	f010 f872 	bl	8011958 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00c      	beq.n	8001894 <_Z10StartGetBTPv+0x4fc>
				gameHID.ps4ButtonsTag.button_right_thumb = 1;
 800187a:	4a45      	ldr	r2, [pc, #276]	; (8001990 <_Z10StartGetBTPv+0x5f8>)
 800187c:	79d3      	ldrb	r3, [r2, #7]
 800187e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001882:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_RS_BTN;
 8001884:	4b43      	ldr	r3, [pc, #268]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 8001886:	789b      	ldrb	r3, [r3, #2]
 8001888:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4b41      	ldr	r3, [pc, #260]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 8001890:	709a      	strb	r2, [r3, #2]
 8001892:	e00b      	b.n	80018ac <_Z10StartGetBTPv+0x514>
			} else {
				gameHID.ps4ButtonsTag.button_right_thumb = 0;
 8001894:	4a3e      	ldr	r2, [pc, #248]	; (8001990 <_Z10StartGetBTPv+0x5f8>)
 8001896:	79d3      	ldrb	r3, [r2, #7]
 8001898:	f36f 13c7 	bfc	r3, #7, #1
 800189c:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_RS_BTN;
 800189e:	4b3d      	ldr	r3, [pc, #244]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 80018a0:	789b      	ldrb	r3, [r3, #2]
 80018a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	4b3a      	ldr	r3, [pc, #232]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 80018aa:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(SHARE)) {
 80018ac:	2104      	movs	r1, #4
 80018ae:	483a      	ldr	r0, [pc, #232]	; (8001998 <_Z10StartGetBTPv+0x600>)
 80018b0:	f010 f852 	bl	8011958 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00c      	beq.n	80018d4 <_Z10StartGetBTPv+0x53c>
				gameHID.ps4ButtonsTag.button_share = 1;
 80018ba:	4a35      	ldr	r2, [pc, #212]	; (8001990 <_Z10StartGetBTPv+0x5f8>)
 80018bc:	7993      	ldrb	r3, [r2, #6]
 80018be:	f043 0308 	orr.w	r3, r3, #8
 80018c2:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons |= XBOX_BACK_BTN;
 80018c4:	4b33      	ldr	r3, [pc, #204]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 80018c6:	789b      	ldrb	r3, [r3, #2]
 80018c8:	f043 0320 	orr.w	r3, r3, #32
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4b31      	ldr	r3, [pc, #196]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 80018d0:	709a      	strb	r2, [r3, #2]
 80018d2:	e00b      	b.n	80018ec <_Z10StartGetBTPv+0x554>
			} else {
				gameHID.ps4ButtonsTag.button_share = 0;
 80018d4:	4a2e      	ldr	r2, [pc, #184]	; (8001990 <_Z10StartGetBTPv+0x5f8>)
 80018d6:	7993      	ldrb	r3, [r2, #6]
 80018d8:	f36f 03c3 	bfc	r3, #3, #1
 80018dc:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_BACK_BTN;
 80018de:	4b2d      	ldr	r3, [pc, #180]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 80018e0:	789b      	ldrb	r3, [r3, #2]
 80018e2:	f023 0320 	bic.w	r3, r3, #32
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	4b2a      	ldr	r3, [pc, #168]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 80018ea:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(OPTIONS)) {
 80018ec:	2105      	movs	r1, #5
 80018ee:	482a      	ldr	r0, [pc, #168]	; (8001998 <_Z10StartGetBTPv+0x600>)
 80018f0:	f010 f832 	bl	8011958 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00c      	beq.n	8001914 <_Z10StartGetBTPv+0x57c>
				gameHID.ps4ButtonsTag.button_start = 1;
 80018fa:	4a25      	ldr	r2, [pc, #148]	; (8001990 <_Z10StartGetBTPv+0x5f8>)
 80018fc:	7993      	ldrb	r3, [r2, #6]
 80018fe:	f043 0304 	orr.w	r3, r3, #4
 8001902:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons |= XBOX_START_BTN;
 8001904:	4b23      	ldr	r3, [pc, #140]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 8001906:	789b      	ldrb	r3, [r3, #2]
 8001908:	f043 0310 	orr.w	r3, r3, #16
 800190c:	b2da      	uxtb	r2, r3
 800190e:	4b21      	ldr	r3, [pc, #132]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 8001910:	709a      	strb	r2, [r3, #2]
 8001912:	e02e      	b.n	8001972 <_Z10StartGetBTPv+0x5da>
			} else {
				gameHID.ps4ButtonsTag.button_start = 0;
 8001914:	4a1e      	ldr	r2, [pc, #120]	; (8001990 <_Z10StartGetBTPv+0x5f8>)
 8001916:	7993      	ldrb	r3, [r2, #6]
 8001918:	f36f 0382 	bfc	r3, #2, #1
 800191c:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_START_BTN;
 800191e:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 8001920:	789b      	ldrb	r3, [r3, #2]
 8001922:	f023 0310 	bic.w	r3, r3, #16
 8001926:	b2da      	uxtb	r2, r3
 8001928:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <_Z10StartGetBTPv+0x5fc>)
 800192a:	709a      	strb	r2, [r3, #2]
 800192c:	e021      	b.n	8001972 <_Z10StartGetBTPv+0x5da>
			}

		} else if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 800192e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001932:	481a      	ldr	r0, [pc, #104]	; (800199c <_Z10StartGetBTPv+0x604>)
 8001934:	f001 fa2c 	bl	8002d90 <HAL_GPIO_ReadPin>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	bf0c      	ite	eq
 800193e:	2301      	moveq	r3, #1
 8001940:	2300      	movne	r3, #0
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b00      	cmp	r3, #0
 8001946:	d011      	beq.n	800196c <_Z10StartGetBTPv+0x5d4>
			if (!buttonPressed) {
 8001948:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <_Z10StartGetBTPv+0x608>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	f083 0301 	eor.w	r3, r3, #1
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d006      	beq.n	8001964 <_Z10StartGetBTPv+0x5cc>
				Serial.print(F("\r\nButton Pressed"));
 8001956:	4913      	ldr	r1, [pc, #76]	; (80019a4 <_Z10StartGetBTPv+0x60c>)
 8001958:	4813      	ldr	r0, [pc, #76]	; (80019a8 <_Z10StartGetBTPv+0x610>)
 800195a:	f7fe fe1f 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
				PS4.pair(); // Start paring routine if user button was just pressed
 800195e:	4813      	ldr	r0, [pc, #76]	; (80019ac <_Z10StartGetBTPv+0x614>)
 8001960:	f7ff f809 	bl	8000976 <_ZN5BTHID4pairEv>
			}
			buttonPressed = true;
 8001964:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <_Z10StartGetBTPv+0x608>)
 8001966:	2201      	movs	r2, #1
 8001968:	701a      	strb	r2, [r3, #0]
 800196a:	e002      	b.n	8001972 <_Z10StartGetBTPv+0x5da>
		} else
			buttonPressed = false;
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <_Z10StartGetBTPv+0x608>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
#if rtos_delay_view
		timer_val_getBT = __HAL_TIM_GET_COUNTER(&htim14) - timer_val_getBT;
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <_Z10StartGetBTPv+0x618>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	b29a      	uxth	r2, r3
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <_Z10StartGetBTPv+0x61c>)
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	b29a      	uxth	r2, r3
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <_Z10StartGetBTPv+0x61c>)
 8001984:	801a      	strh	r2, [r3, #0]
#endif
    osDelay(1);
 8001986:	2001      	movs	r0, #1
 8001988:	f008 fccc 	bl	800a324 <osDelay>
	  	timer_val_getBT = __HAL_TIM_GET_COUNTER(&htim14);
 800198c:	e561      	b.n	8001452 <_Z10StartGetBTPv+0xba>
 800198e:	bf00      	nop
 8001990:	2000068c 	.word	0x2000068c
 8001994:	20000694 	.word	0x20000694
 8001998:	2000061c 	.word	0x2000061c
 800199c:	40020800 	.word	0x40020800
 80019a0:	2000066c 	.word	0x2000066c
 80019a4:	0801398c 	.word	0x0801398c
 80019a8:	200003bc 	.word	0x200003bc
 80019ac:	200005a4 	.word	0x200005a4
 80019b0:	200002c0 	.word	0x200002c0
 80019b4:	20000686 	.word	0x20000686

080019b8 <_Z12StartSendUSBPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendUSB */
void StartSendUSB(void *argument)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendUSB */
	MX_USB_DEVICE_Init();
 80019c0:	f00b f924 	bl	800cc0c <MX_USB_DEVICE_Init>
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
#endif

#if OG_XBOX_SETUP
#if rtos_delay_view
	timer_val_getUSB = __HAL_TIM_GET_COUNTER(&htim14);
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <_Z12StartSendUSBPv+0x40>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <_Z12StartSendUSBPv+0x44>)
 80019ce:	801a      	strh	r2, [r3, #0]
#endif
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &xboxHID, sizeof(struct xboxHID_t));
 80019d0:	2214      	movs	r2, #20
 80019d2:	490b      	ldr	r1, [pc, #44]	; (8001a00 <_Z12StartSendUSBPv+0x48>)
 80019d4:	480b      	ldr	r0, [pc, #44]	; (8001a04 <_Z12StartSendUSBPv+0x4c>)
 80019d6:	f007 f997 	bl	8008d08 <USBD_HID_SendReport>
#if rtos_delay_view
	timer_val_getUSB = __HAL_TIM_GET_COUNTER(&htim14) - timer_val_getUSB;
 80019da:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <_Z12StartSendUSBPv+0x40>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <_Z12StartSendUSBPv+0x44>)
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	4b04      	ldr	r3, [pc, #16]	; (80019fc <_Z12StartSendUSBPv+0x44>)
 80019ec:	801a      	strh	r2, [r3, #0]
#endif
#endif
    osDelay(1);
 80019ee:	2001      	movs	r0, #1
 80019f0:	f008 fc98 	bl	800a324 <osDelay>
	timer_val_getUSB = __HAL_TIM_GET_COUNTER(&htim14);
 80019f4:	e7e6      	b.n	80019c4 <_Z12StartSendUSBPv+0xc>
 80019f6:	bf00      	nop
 80019f8:	200002c0 	.word	0x200002c0
 80019fc:	20000688 	.word	0x20000688
 8001a00:	20000694 	.word	0x20000694
 8001a04:	2000547c 	.word	0x2000547c

08001a08 <_Z19StartControllerJoinPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControllerJoin */
void StartControllerJoin(void *argument)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControllerJoin */
  /* Infinite loop */
  for(;;)
  {
	if(PS4.connected() && !rumble_once) {
 8001a10:	4810      	ldr	r0, [pc, #64]	; (8001a54 <_Z19StartControllerJoinPv+0x4c>)
 8001a12:	f7ff f893 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <_Z19StartControllerJoinPv+0x20>
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <_Z19StartControllerJoinPv+0x50>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <_Z19StartControllerJoinPv+0x20>
 8001a24:	2301      	movs	r3, #1
 8001a26:	e000      	b.n	8001a2a <_Z19StartControllerJoinPv+0x22>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00d      	beq.n	8001a4a <_Z19StartControllerJoinPv+0x42>
	  PS4.setRumbleOn(RumbleLow);
 8001a2e:	2120      	movs	r1, #32
 8001a30:	480a      	ldr	r0, [pc, #40]	; (8001a5c <_Z19StartControllerJoinPv+0x54>)
 8001a32:	f7fe fff2 	bl	8000a1a <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>
	  osDelay(500);
 8001a36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a3a:	f008 fc73 	bl	800a324 <osDelay>
	  PS4.setRumbleOff();
 8001a3e:	4807      	ldr	r0, [pc, #28]	; (8001a5c <_Z19StartControllerJoinPv+0x54>)
 8001a40:	f7fe ffde 	bl	8000a00 <_ZN9PS4Parser12setRumbleOffEv>
	  rumble_once = 1;
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <_Z19StartControllerJoinPv+0x50>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	701a      	strb	r2, [r3, #0]
	}
	osDelay(300);
 8001a4a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a4e:	f008 fc69 	bl	800a324 <osDelay>
	if(PS4.connected() && !rumble_once) {
 8001a52:	e7dd      	b.n	8001a10 <_Z19StartControllerJoinPv+0x8>
 8001a54:	200005a4 	.word	0x200005a4
 8001a58:	2000066d 	.word	0x2000066d
 8001a5c:	2000061c 	.word	0x2000061c

08001a60 <_Z16StartButtonPressPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonPress */
void StartButtonPress(void *argument)
{
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonPress */
  /* Infinite loop */
  for(;;)
  {
  keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8001a68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a6c:	481e      	ldr	r0, [pc, #120]	; (8001ae8 <_Z16StartButtonPressPv+0x88>)
 8001a6e:	f001 f98f 	bl	8002d90 <HAL_GPIO_ReadPin>
 8001a72:	4603      	mov	r3, r0
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(SELECT_BTN_GPIO) << 1) |
 8001a78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a7c:	481b      	ldr	r0, [pc, #108]	; (8001aec <_Z16StartButtonPressPv+0x8c>)
 8001a7e:	f001 f987 	bl	8002d90 <HAL_GPIO_ReadPin>
 8001a82:	4603      	mov	r3, r0
 8001a84:	005b      	lsls	r3, r3, #1
  keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8001a86:	b25b      	sxtb	r3, r3
 8001a88:	4323      	orrs	r3, r4
 8001a8a:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(FORWARD_BTN_GPIO) << 0);
 8001a8c:	2110      	movs	r1, #16
 8001a8e:	4817      	ldr	r0, [pc, #92]	; (8001aec <_Z16StartButtonPressPv+0x8c>)
 8001a90:	f001 f97e 	bl	8002d90 <HAL_GPIO_ReadPin>
 8001a94:	4603      	mov	r3, r0
 8001a96:	b25b      	sxtb	r3, r3
			(HAL_GPIO_ReadPin(SELECT_BTN_GPIO) << 1) |
 8001a98:	4323      	orrs	r3, r4
 8001a9a:	b25b      	sxtb	r3, r3
 8001a9c:	b2da      	uxtb	r2, r3
  keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8001a9e:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <_Z16StartButtonPressPv+0x90>)
 8001aa0:	701a      	strb	r2, [r3, #0]

  if (BUTTON_PRESSED) {
 8001aa2:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <_Z16StartButtonPressPv+0x90>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b07      	cmp	r3, #7
 8001aa8:	d014      	beq.n	8001ad4 <_Z16StartButtonPressPv+0x74>
	  if(buttonDebounced == 1) {  // you only get here if the same button combination has been pressed for 100mS
 8001aaa:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <_Z16StartButtonPressPv+0x94>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d10c      	bne.n	8001acc <_Z16StartButtonPressPv+0x6c>
		  if (buttonProcessed == 0) { // here's where we do the real work on the keyboard, and ensure we only do it once/keypress
 8001ab2:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <_Z16StartButtonPressPv+0x98>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d112      	bne.n	8001ae0 <_Z16StartButtonPressPv+0x80>
			  buttonProcessed = 1;
 8001aba:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <_Z16StartButtonPressPv+0x98>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	701a      	strb	r2, [r3, #0]
			  ProcessKeyCodeInContext(keyCode);
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <_Z16StartButtonPressPv+0x90>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fbb3 	bl	8001230 <_Z23ProcessKeyCodeInContexth>
 8001aca:	e009      	b.n	8001ae0 <_Z16StartButtonPressPv+0x80>
		  }
	  } else {
		  buttonDebounced = true;
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <_Z16StartButtonPressPv+0x94>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	701a      	strb	r2, [r3, #0]
 8001ad2:	e005      	b.n	8001ae0 <_Z16StartButtonPressPv+0x80>
	  }
  } else {
	  buttonDebounced = false;
 8001ad4:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <_Z16StartButtonPressPv+0x94>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
	  buttonProcessed = false;
 8001ada:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <_Z16StartButtonPressPv+0x98>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
  }
//  	Serial.print("\r\n");
//  	Serial.print(keyCode);
    osDelay(100);
 8001ae0:	2064      	movs	r0, #100	; 0x64
 8001ae2:	f008 fc1f 	bl	800a324 <osDelay>
  keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8001ae6:	e7bf      	b.n	8001a68 <_Z16StartButtonPressPv+0x8>
 8001ae8:	40020000 	.word	0x40020000
 8001aec:	40020400 	.word	0x40020400
 8001af0:	20000000 	.word	0x20000000
 8001af4:	20000681 	.word	0x20000681
 8001af8:	20000682 	.word	0x20000682

08001afc <_Z14StartUpdateLCDPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUpdateLCD */
void StartUpdateLCD(void *argument)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUpdateLCD */
  /* Infinite loop */

  ssd1306_Fill(Black_);
 8001b04:	2000      	movs	r0, #0
 8001b06:	f000 fcf5 	bl	80024f4 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8001b0a:	f000 fd17 	bl	800253c <ssd1306_UpdateScreen>
  for(;;)
  {
#if rtos_delay_view
	  	timer_val_LCD = __HAL_TIM_GET_COUNTER(&htim14);
 8001b0e:	4b7d      	ldr	r3, [pc, #500]	; (8001d04 <_Z14StartUpdateLCDPv+0x208>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	4b7c      	ldr	r3, [pc, #496]	; (8001d08 <_Z14StartUpdateLCDPv+0x20c>)
 8001b18:	801a      	strh	r2, [r3, #0]
#endif
	if(display_run_once == 0) {
 8001b1a:	4b7c      	ldr	r3, [pc, #496]	; (8001d0c <_Z14StartUpdateLCDPv+0x210>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f040 80e1 	bne.w	8001ce6 <_Z14StartUpdateLCDPv+0x1ea>
		ssd1306_Fill(Black_);
 8001b24:	2000      	movs	r0, #0
 8001b26:	f000 fce5 	bl	80024f4 <ssd1306_Fill>
		ssd1306_UpdateScreen();
 8001b2a:	f000 fd07 	bl	800253c <ssd1306_UpdateScreen>
		switch(display_no)
 8001b2e:	4b78      	ldr	r3, [pc, #480]	; (8001d10 <_Z14StartUpdateLCDPv+0x214>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b07      	cmp	r3, #7
 8001b34:	f000 80a0 	beq.w	8001c78 <_Z14StartUpdateLCDPv+0x17c>
 8001b38:	2b07      	cmp	r3, #7
 8001b3a:	f300 80d4 	bgt.w	8001ce6 <_Z14StartUpdateLCDPv+0x1ea>
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <_Z14StartUpdateLCDPv+0x4e>
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	f000 8082 	beq.w	8001c4c <_Z14StartUpdateLCDPv+0x150>
 8001b48:	e0cd      	b.n	8001ce6 <_Z14StartUpdateLCDPv+0x1ea>
		{
			case 0 :
			{
				uint8_t alternate_print = 1;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	73fb      	strb	r3, [r7, #15]
				if(!PS4.connected()) {
 8001b4e:	4871      	ldr	r0, [pc, #452]	; (8001d14 <_Z14StartUpdateLCDPv+0x218>)
 8001b50:	f7fe fff4 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f083 0301 	eor.w	r3, r3, #1
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d017      	beq.n	8001b90 <_Z14StartUpdateLCDPv+0x94>
				  ssd1306_SetCursor((128-11*3)/2,0);
 8001b60:	2100      	movs	r1, #0
 8001b62:	202f      	movs	r0, #47	; 0x2f
 8001b64:	f000 fe20 	bl	80027a8 <ssd1306_SetCursor>
				  ssd1306_WriteString("Not", Font_11x18, White_);
 8001b68:	4a6b      	ldr	r2, [pc, #428]	; (8001d18 <_Z14StartUpdateLCDPv+0x21c>)
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	ca06      	ldmia	r2, {r1, r2}
 8001b6e:	486b      	ldr	r0, [pc, #428]	; (8001d1c <_Z14StartUpdateLCDPv+0x220>)
 8001b70:	f000 fdf4 	bl	800275c <ssd1306_WriteString>
				  display_force_update = 0;
 8001b74:	4b6a      	ldr	r3, [pc, #424]	; (8001d20 <_Z14StartUpdateLCDPv+0x224>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
				  ssd1306_SetCursor((128-11*9)/2, 26);
 8001b7a:	211a      	movs	r1, #26
 8001b7c:	200e      	movs	r0, #14
 8001b7e:	f000 fe13 	bl	80027a8 <ssd1306_SetCursor>
				  ssd1306_WriteString("Connected", Font_11x18, White_);
 8001b82:	4a65      	ldr	r2, [pc, #404]	; (8001d18 <_Z14StartUpdateLCDPv+0x21c>)
 8001b84:	2301      	movs	r3, #1
 8001b86:	ca06      	ldmia	r2, {r1, r2}
 8001b88:	4866      	ldr	r0, [pc, #408]	; (8001d24 <_Z14StartUpdateLCDPv+0x228>)
 8001b8a:	f000 fde7 	bl	800275c <ssd1306_WriteString>
 8001b8e:	e017      	b.n	8001bc0 <_Z14StartUpdateLCDPv+0xc4>
				} else if (PS4.connected()) {
 8001b90:	4860      	ldr	r0, [pc, #384]	; (8001d14 <_Z14StartUpdateLCDPv+0x218>)
 8001b92:	f7fe ffd3 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d011      	beq.n	8001bc0 <_Z14StartUpdateLCDPv+0xc4>
				  ssd1306_SetCursor((128-11*9)/2, 26);
 8001b9c:	211a      	movs	r1, #26
 8001b9e:	200e      	movs	r0, #14
 8001ba0:	f000 fe02 	bl	80027a8 <ssd1306_SetCursor>
				  ssd1306_WriteString("Connected", Font_11x18, White_);
 8001ba4:	4a5c      	ldr	r2, [pc, #368]	; (8001d18 <_Z14StartUpdateLCDPv+0x21c>)
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	ca06      	ldmia	r2, {r1, r2}
 8001baa:	485e      	ldr	r0, [pc, #376]	; (8001d24 <_Z14StartUpdateLCDPv+0x228>)
 8001bac:	f000 fdd6 	bl	800275c <ssd1306_WriteString>
				  alternate_print = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	73fb      	strb	r3, [r7, #15]
				  display_run_once = 1;
 8001bb4:	4b55      	ldr	r3, [pc, #340]	; (8001d0c <_Z14StartUpdateLCDPv+0x210>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	701a      	strb	r2, [r3, #0]
				  display_force_update = 0;
 8001bba:	4b59      	ldr	r3, [pc, #356]	; (8001d20 <_Z14StartUpdateLCDPv+0x224>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]
				}
				ssd1306_UpdateScreen();
 8001bc0:	f000 fcbc 	bl	800253c <ssd1306_UpdateScreen>

				while(!PS4.connected() && display_force_update == 0) {
 8001bc4:	4853      	ldr	r0, [pc, #332]	; (8001d14 <_Z14StartUpdateLCDPv+0x218>)
 8001bc6:	f7fe ffb9 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f083 0301 	eor.w	r3, r3, #1
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d005      	beq.n	8001be2 <_Z14StartUpdateLCDPv+0xe6>
 8001bd6:	4b52      	ldr	r3, [pc, #328]	; (8001d20 <_Z14StartUpdateLCDPv+0x224>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <_Z14StartUpdateLCDPv+0xe6>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <_Z14StartUpdateLCDPv+0xe8>
 8001be2:	2300      	movs	r3, #0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <_Z14StartUpdateLCDPv+0xf4>
					osDelay(100);
 8001be8:	2064      	movs	r0, #100	; 0x64
 8001bea:	f008 fb9b 	bl	800a324 <osDelay>
				while(!PS4.connected() && display_force_update == 0) {
 8001bee:	e7e9      	b.n	8001bc4 <_Z14StartUpdateLCDPv+0xc8>
				}
				/* If the user presses a Button, interrupt and show next screen */
				if(display_force_update == 1) {
 8001bf0:	4b4b      	ldr	r3, [pc, #300]	; (8001d20 <_Z14StartUpdateLCDPv+0x224>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d106      	bne.n	8001c06 <_Z14StartUpdateLCDPv+0x10a>
					display_force_update = 0;
 8001bf8:	4b49      	ldr	r3, [pc, #292]	; (8001d20 <_Z14StartUpdateLCDPv+0x224>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
					display_run_once = 0;
 8001bfe:	4b43      	ldr	r3, [pc, #268]	; (8001d0c <_Z14StartUpdateLCDPv+0x210>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]
					break;
 8001c04:	e06f      	b.n	8001ce6 <_Z14StartUpdateLCDPv+0x1ea>
				}
				/*When the controller is finally paired update current screen
				 * Only runs if the first PS4.connected() above does not run*/
				if(PS4.connected() && alternate_print) {
 8001c06:	4843      	ldr	r0, [pc, #268]	; (8001d14 <_Z14StartUpdateLCDPv+0x218>)
 8001c08:	f7fe ff98 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d004      	beq.n	8001c1c <_Z14StartUpdateLCDPv+0x120>
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <_Z14StartUpdateLCDPv+0x120>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e000      	b.n	8001c1e <_Z14StartUpdateLCDPv+0x122>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d060      	beq.n	8001ce4 <_Z14StartUpdateLCDPv+0x1e8>
				    ssd1306_Fill(Black_);
 8001c22:	2000      	movs	r0, #0
 8001c24:	f000 fc66 	bl	80024f4 <ssd1306_Fill>
				    ssd1306_UpdateScreen();
 8001c28:	f000 fc88 	bl	800253c <ssd1306_UpdateScreen>
//				    ssd1306_SetCursor(25,0);
//				    ssd1306_WriteString("Status:", Font_11x18, White_);
					ssd1306_SetCursor((128-11*10)/2, 26);
 8001c2c:	211a      	movs	r1, #26
 8001c2e:	2009      	movs	r0, #9
 8001c30:	f000 fdba 	bl	80027a8 <ssd1306_SetCursor>
					ssd1306_WriteString("Connected!", Font_11x18, White_);
 8001c34:	4a38      	ldr	r2, [pc, #224]	; (8001d18 <_Z14StartUpdateLCDPv+0x21c>)
 8001c36:	2301      	movs	r3, #1
 8001c38:	ca06      	ldmia	r2, {r1, r2}
 8001c3a:	483b      	ldr	r0, [pc, #236]	; (8001d28 <_Z14StartUpdateLCDPv+0x22c>)
 8001c3c:	f000 fd8e 	bl	800275c <ssd1306_WriteString>
				    ssd1306_UpdateScreen();
 8001c40:	f000 fc7c 	bl	800253c <ssd1306_UpdateScreen>
				    display_run_once = 1;
 8001c44:	4b31      	ldr	r3, [pc, #196]	; (8001d0c <_Z14StartUpdateLCDPv+0x210>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001c4a:	e04b      	b.n	8001ce4 <_Z14StartUpdateLCDPv+0x1e8>
			}

			case 1 :
				display_run_once = 1;
 8001c4c:	4b2f      	ldr	r3, [pc, #188]	; (8001d0c <_Z14StartUpdateLCDPv+0x210>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	701a      	strb	r2, [r3, #0]
				display_force_update = 0;
 8001c52:	4b33      	ldr	r3, [pc, #204]	; (8001d20 <_Z14StartUpdateLCDPv+0x224>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	701a      	strb	r2, [r3, #0]
				ssd1306_Fill(Black_);
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f000 fc4b 	bl	80024f4 <ssd1306_Fill>
				ssd1306_SetCursor((128-11*5)/2,0);
 8001c5e:	2100      	movs	r1, #0
 8001c60:	2024      	movs	r0, #36	; 0x24
 8001c62:	f000 fda1 	bl	80027a8 <ssd1306_SetCursor>
				ssd1306_WriteString("Pair?", Font_11x18, White_);
 8001c66:	4a2c      	ldr	r2, [pc, #176]	; (8001d18 <_Z14StartUpdateLCDPv+0x21c>)
 8001c68:	2301      	movs	r3, #1
 8001c6a:	ca06      	ldmia	r2, {r1, r2}
 8001c6c:	482f      	ldr	r0, [pc, #188]	; (8001d2c <_Z14StartUpdateLCDPv+0x230>)
 8001c6e:	f000 fd75 	bl	800275c <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8001c72:	f000 fc63 	bl	800253c <ssd1306_UpdateScreen>
				break;
 8001c76:	e036      	b.n	8001ce6 <_Z14StartUpdateLCDPv+0x1ea>

			case 7 :
				display_run_once = 1;
 8001c78:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <_Z14StartUpdateLCDPv+0x210>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	701a      	strb	r2, [r3, #0]
				display_force_update = 0;
 8001c7e:	4b28      	ldr	r3, [pc, #160]	; (8001d20 <_Z14StartUpdateLCDPv+0x224>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
				ssd1306_Fill(Black_);
 8001c84:	2000      	movs	r0, #0
 8001c86:	f000 fc35 	bl	80024f4 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8001c8a:	f000 fc57 	bl	800253c <ssd1306_UpdateScreen>
				ssd1306_SetCursor((128-11*10)/2,0);
 8001c8e:	2100      	movs	r1, #0
 8001c90:	2009      	movs	r0, #9
 8001c92:	f000 fd89 	bl	80027a8 <ssd1306_SetCursor>
				ssd1306_WriteString("Pairing...", Font_11x18, White_);
 8001c96:	4a20      	ldr	r2, [pc, #128]	; (8001d18 <_Z14StartUpdateLCDPv+0x21c>)
 8001c98:	2301      	movs	r3, #1
 8001c9a:	ca06      	ldmia	r2, {r1, r2}
 8001c9c:	4824      	ldr	r0, [pc, #144]	; (8001d30 <_Z14StartUpdateLCDPv+0x234>)
 8001c9e:	f000 fd5d 	bl	800275c <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8001ca2:	f000 fc4b 	bl	800253c <ssd1306_UpdateScreen>
				PS4.pair();
 8001ca6:	481b      	ldr	r0, [pc, #108]	; (8001d14 <_Z14StartUpdateLCDPv+0x218>)
 8001ca8:	f7fe fe65 	bl	8000976 <_ZN5BTHID4pairEv>
				while(PS4.connected() == 0) {
 8001cac:	4819      	ldr	r0, [pc, #100]	; (8001d14 <_Z14StartUpdateLCDPv+0x218>)
 8001cae:	f7fe ff45 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	bf0c      	ite	eq
 8001cb8:	2301      	moveq	r3, #1
 8001cba:	2300      	movne	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <_Z14StartUpdateLCDPv+0x1ce>
				  osDelay(100);
 8001cc2:	2064      	movs	r0, #100	; 0x64
 8001cc4:	f008 fb2e 	bl	800a324 <osDelay>
				while(PS4.connected() == 0) {
 8001cc8:	e7f0      	b.n	8001cac <_Z14StartUpdateLCDPv+0x1b0>
				}
				ssd1306_SetCursor((128-11*10)/2,26);
 8001cca:	211a      	movs	r1, #26
 8001ccc:	2009      	movs	r0, #9
 8001cce:	f000 fd6b 	bl	80027a8 <ssd1306_SetCursor>
				ssd1306_WriteString("Paired!", Font_11x18, White_);
 8001cd2:	4a11      	ldr	r2, [pc, #68]	; (8001d18 <_Z14StartUpdateLCDPv+0x21c>)
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	ca06      	ldmia	r2, {r1, r2}
 8001cd8:	4816      	ldr	r0, [pc, #88]	; (8001d34 <_Z14StartUpdateLCDPv+0x238>)
 8001cda:	f000 fd3f 	bl	800275c <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8001cde:	f000 fc2d 	bl	800253c <ssd1306_UpdateScreen>
				break;
 8001ce2:	e000      	b.n	8001ce6 <_Z14StartUpdateLCDPv+0x1ea>
				break;
 8001ce4:	bf00      	nop
		}
	}
#if rtos_delay_view
		timer_val_LCD = __HAL_TIM_GET_COUNTER(&htim14) - timer_val_LCD;
 8001ce6:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <_Z14StartUpdateLCDPv+0x208>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <_Z14StartUpdateLCDPv+0x20c>)
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <_Z14StartUpdateLCDPv+0x20c>)
 8001cf8:	801a      	strh	r2, [r3, #0]
#endif
    osDelay(100);
 8001cfa:	2064      	movs	r0, #100	; 0x64
 8001cfc:	f008 fb12 	bl	800a324 <osDelay>
  }
 8001d00:	e705      	b.n	8001b0e <_Z14StartUpdateLCDPv+0x12>
 8001d02:	bf00      	nop
 8001d04:	200002c0 	.word	0x200002c0
 8001d08:	2000068a 	.word	0x2000068a
 8001d0c:	20000684 	.word	0x20000684
 8001d10:	20000680 	.word	0x20000680
 8001d14:	200005a4 	.word	0x200005a4
 8001d18:	20000008 	.word	0x20000008
 8001d1c:	080139a0 	.word	0x080139a0
 8001d20:	20000683 	.word	0x20000683
 8001d24:	080139a4 	.word	0x080139a4
 8001d28:	080139b0 	.word	0x080139b0
 8001d2c:	080139bc 	.word	0x080139bc
 8001d30:	080139c4 	.word	0x080139c4
 8001d34:	080139d0 	.word	0x080139d0

08001d38 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END StartUpdateLCD */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a04      	ldr	r2, [pc, #16]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d101      	bne.n	8001d4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d4a:	f000 fd67 	bl	800281c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40001c00 	.word	0x40001c00

08001d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	Serial.print("\r\nSomething went wrong!");
 8001d60:	4903      	ldr	r1, [pc, #12]	; (8001d70 <Error_Handler+0x14>)
 8001d62:	4804      	ldr	r0, [pc, #16]	; (8001d74 <Error_Handler+0x18>)
 8001d64:	f7fe fc28 	bl	80005b8 <_ZN5Print5printEPKc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d68:	b672      	cpsid	i
}
 8001d6a:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <Error_Handler+0x10>
 8001d6e:	bf00      	nop
 8001d70:	080139d8 	.word	0x080139d8
 8001d74:	200003bc 	.word	0x200003bc

08001d78 <_ZN8MAX3421eI3P102P9E4InitEv>:
        return ( i);
}

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
template< typename SPI_SS, typename INTR >
int8_t MAX3421e< SPI_SS, INTR >::Init() {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
        XMEM_ACQUIRE_SPI();
        // Moved here.
        // you really should not init hardware in the constructor when it involves locks.
        // Also avoids the vbus flicker issue confusing some devices.
        /* pin and peripheral setup */
        SPI_SS::SetDirWrite();
 8001d80:	f7fe fdcc 	bl	800091c <_ZN3P1011SetDirWriteEv>
        SPI_SS::Set();
 8001d84:	f7fe fdb2 	bl	80008ec <_ZN3P103SetEv>
        spi::init();
 8001d88:	f000 f845 	bl	8001e16 <_ZN3SPiI3P133P113P123P10E4initEv>
        INTR::SetDirRead();
 8001d8c:	f7fe fd98 	bl	80008c0 <_ZN2P910SetDirReadEv>
        XMEM_RELEASE_SPI();
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 8001d90:	2218      	movs	r2, #24
 8001d92:	2188      	movs	r1, #136	; 0x88
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f845 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f864 	bl	8001e68 <_ZN8MAX3421eI3P102P9E5resetEv>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	bf0c      	ite	eq
 8001da6:	2301      	moveq	r3, #1
 8001da8:	2300      	movne	r3, #0
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d002      	beq.n	8001db6 <_ZN8MAX3421eI3P102P9E4InitEv+0x3e>
                return ( -1);
 8001db0:	f04f 33ff 	mov.w	r3, #4294967295
 8001db4:	e02b      	b.n	8001e0e <_ZN8MAX3421eI3P102P9E4InitEv+0x96>
        }

        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 8001db6:	22c1      	movs	r2, #193	; 0xc1
 8001db8:	21d8      	movs	r1, #216	; 0xd8
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f832 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 8001dc0:	2260      	movs	r2, #96	; 0x60
 8001dc2:	21d0      	movs	r1, #208	; 0xd0
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f82d 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        /* check if device is connected */
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 8001dca:	2204      	movs	r2, #4
 8001dcc:	21e8      	movs	r1, #232	; 0xe8
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f828 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 8001dd4:	21e8      	movs	r1, #232	; 0xe8
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f876 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	bf0c      	ite	eq
 8001de6:	2301      	moveq	r3, #1
 8001de8:	2300      	movne	r3, #0
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d000      	beq.n	8001df2 <_ZN8MAX3421eI3P102P9E4InitEv+0x7a>
 8001df0:	e7f0      	b.n	8001dd4 <_ZN8MAX3421eI3P102P9E4InitEv+0x5c>

        busprobe(); //check if anything is connected
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f88a 	bl	8001f0c <_ZN8MAX3421eI3P102P9E8busprobeEv>

        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 8001df8:	2220      	movs	r2, #32
 8001dfa:	21c8      	movs	r1, #200	; 0xc8
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f811 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
 8001e02:	2201      	movs	r2, #1
 8001e04:	2180      	movs	r1, #128	; 0x80
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f80c 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return ( 0);
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <_ZN3SPiI3P133P113P123P10E4initEv>:
        static void init() {
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0
        }
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>:
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	70fb      	strb	r3, [r7, #3]
 8001e30:	4613      	mov	r3, r2
 8001e32:	70bb      	strb	r3, [r7, #2]
        SPI_SS::Clear();
 8001e34:	f7fe fd66 	bl	8000904 <_ZN3P105ClearEv>
        c[0] = reg | 0x02;
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	f043 0302 	orr.w	r3, r3, #2
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	733b      	strb	r3, [r7, #12]
        c[1] = data;
 8001e42:	78bb      	ldrb	r3, [r7, #2]
 8001e44:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(&SPI_Handle, c, 2, HAL_MAX_DELAY);
 8001e46:	f107 010c 	add.w	r1, r7, #12
 8001e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4e:	2202      	movs	r2, #2
 8001e50:	4804      	ldr	r0, [pc, #16]	; (8001e64 <_ZN8MAX3421eI3P102P9E5regWrEhh+0x40>)
 8001e52:	f003 ff30 	bl	8005cb6 <HAL_SPI_Transmit>
        SPI_SS::Set();
 8001e56:	f7fe fd49 	bl	80008ec <_ZN3P103SetEv>
        return;
 8001e5a:	bf00      	nop
};
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000320 	.word	0x20000320

08001e68 <_ZN8MAX3421eI3P102P9E5resetEv>:
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
        uint16_t i = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	81fb      	strh	r3, [r7, #14]
        regWr(rUSBCTL, bmCHIPRES);
 8001e74:	2220      	movs	r2, #32
 8001e76:	2178      	movs	r1, #120	; 0x78
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ffd3 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rUSBCTL, 0x00);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2178      	movs	r1, #120	; 0x78
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff ffce 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(++i) {
 8001e88:	89fb      	ldrh	r3, [r7, #14]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	81fb      	strh	r3, [r7, #14]
 8001e8e:	89fb      	ldrh	r3, [r7, #14]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	bf14      	ite	ne
 8001e94:	2301      	movne	r3, #1
 8001e96:	2300      	moveq	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00f      	beq.n	8001ebe <_ZN8MAX3421eI3P102P9E5resetEv+0x56>
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 8001e9e:	2168      	movs	r1, #104	; 0x68
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f811 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	bf14      	ite	ne
 8001eb0:	2301      	movne	r3, #1
 8001eb2:	2300      	moveq	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d100      	bne.n	8001ebc <_ZN8MAX3421eI3P102P9E5resetEv+0x54>
        while(++i) {
 8001eba:	e7e5      	b.n	8001e88 <_ZN8MAX3421eI3P102P9E5resetEv+0x20>
                        break;
 8001ebc:	bf00      	nop
        return ( i);
 8001ebe:	89fb      	ldrh	r3, [r7, #14]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <_ZN8MAX3421eI3P102P9E5regRdEh>:
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	70fb      	strb	r3, [r7, #3]
        SPI_SS::Clear();
 8001ed4:	f7fe fd16 	bl	8000904 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8001ed8:	1cf9      	adds	r1, r7, #3
 8001eda:	f04f 33ff 	mov.w	r3, #4294967295
 8001ede:	2201      	movs	r2, #1
 8001ee0:	4809      	ldr	r0, [pc, #36]	; (8001f08 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 8001ee2:	f003 fee8 	bl	8005cb6 <HAL_SPI_Transmit>
        uint8_t rv = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	73fb      	strb	r3, [r7, #15]
        HAL_SPI_Receive(&SPI_Handle, &rv, 1, HAL_MAX_DELAY);
 8001eea:	f107 010f 	add.w	r1, r7, #15
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	4804      	ldr	r0, [pc, #16]	; (8001f08 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 8001ef6:	f004 f81a 	bl	8005f2e <HAL_SPI_Receive>
        SPI_SS::Set();
 8001efa:	f7fe fcf7 	bl	80008ec <_ZN3P103SetEv>
        return (rv);
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000320 	.word	0x20000320

08001f0c <_ZN8MAX3421eI3P102P9E8busprobeEv>:
        return ( 0);
}

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
 8001f14:	21f8      	movs	r1, #248	; 0xf8
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff ffd6 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	73fb      	strb	r3, [r7, #15]
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f26:	73fb      	strb	r3, [r7, #15]
        switch(bus_sample) { //start full-speed or low-speed host
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
 8001f2a:	2bc0      	cmp	r3, #192	; 0xc0
 8001f2c:	d04a      	beq.n	8001fc4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xb8>
 8001f2e:	2bc0      	cmp	r3, #192	; 0xc0
 8001f30:	dc55      	bgt.n	8001fde <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 8001f32:	2b80      	cmp	r3, #128	; 0x80
 8001f34:	d006      	beq.n	8001f44 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x38>
 8001f36:	2b80      	cmp	r3, #128	; 0x80
 8001f38:	dc51      	bgt.n	8001fde <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d046      	beq.n	8001fcc <_ZN8MAX3421eI3P102P9E8busprobeEv+0xc0>
 8001f3e:	2b40      	cmp	r3, #64	; 0x40
 8001f40:	d020      	beq.n	8001f84 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x78>
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
                        vbusState = SE0;
                        break;
        }//end switch( bus_sample )
}
 8001f42:	e04c      	b.n	8001fde <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8001f44:	21d8      	movs	r1, #216	; 0xd8
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ffbe 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	bf0c      	ite	eq
 8001f56:	2301      	moveq	r3, #1
 8001f58:	2300      	movne	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d008      	beq.n	8001f72 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x66>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 8001f60:	22c9      	movs	r2, #201	; 0xc9
 8001f62:	21d8      	movs	r1, #216	; 0xd8
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff ff5d 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 8001f6a:	4b1f      	ldr	r3, [pc, #124]	; (8001fe8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	701a      	strb	r2, [r3, #0]
                        break;
 8001f70:	e035      	b.n	8001fde <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8001f72:	22cb      	movs	r2, #203	; 0xcb
 8001f74:	21d8      	movs	r1, #216	; 0xd8
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff ff54 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8001f7c:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001f7e:	2203      	movs	r2, #3
 8001f80:	701a      	strb	r2, [r3, #0]
                        break;
 8001f82:	e02c      	b.n	8001fde <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8001f84:	21d8      	movs	r1, #216	; 0xd8
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff ff9e 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	bf0c      	ite	eq
 8001f96:	2301      	moveq	r3, #1
 8001f98:	2300      	movne	r3, #0
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xa6>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8001fa0:	22cb      	movs	r2, #203	; 0xcb
 8001fa2:	21d8      	movs	r1, #216	; 0xd8
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff ff3d 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8001faa:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001fac:	2203      	movs	r2, #3
 8001fae:	701a      	strb	r2, [r3, #0]
                        break;
 8001fb0:	e015      	b.n	8001fde <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 8001fb2:	22c9      	movs	r2, #201	; 0xc9
 8001fb4:	21d8      	movs	r1, #216	; 0xd8
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff ff34 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 8001fbc:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	701a      	strb	r2, [r3, #0]
                        break;
 8001fc2:	e00c      	b.n	8001fde <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        vbusState = SE1;
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	701a      	strb	r2, [r3, #0]
                        break;
 8001fca:	e008      	b.n	8001fde <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 8001fcc:	22d1      	movs	r2, #209	; 0xd1
 8001fce:	21d8      	movs	r1, #216	; 0xd8
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff ff27 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        vbusState = SE0;
 8001fd6:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
                        break;
 8001fdc:	bf00      	nop
}
 8001fde:	bf00      	nop
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	200006a8 	.word	0x200006a8

08001fec <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d115      	bne.n	8002028 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002002:	4293      	cmp	r3, r2
 8002004:	d110      	bne.n	8002028 <_Z41__static_initialization_and_destruction_0ii+0x3c>
SerialClass Serial(&huart2);
 8002006:	490a      	ldr	r1, [pc, #40]	; (8002030 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002008:	480a      	ldr	r0, [pc, #40]	; (8002034 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800200a:	f7fe fc43 	bl	8000894 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>
USB Usb;
 800200e:	480a      	ldr	r0, [pc, #40]	; (8002038 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002010:	f00f fe96 	bl	8011d40 <_ZN3USBC1Ev>
BTD Btd(&Usb);
 8002014:	4908      	ldr	r1, [pc, #32]	; (8002038 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002016:	4809      	ldr	r0, [pc, #36]	; (800203c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002018:	f00b fc96 	bl	800d948 <_ZN3BTDC1EP3USB>
PS4BT PS4(&Btd);
 800201c:	4b08      	ldr	r3, [pc, #32]	; (8002040 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800201e:	2200      	movs	r2, #0
 8002020:	4906      	ldr	r1, [pc, #24]	; (800203c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002022:	4808      	ldr	r0, [pc, #32]	; (8002044 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002024:	f7fe fd62 	bl	8000aec <_ZN5PS4BTC1EP3BTDbPKc>
}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	2000027c 	.word	0x2000027c
 8002034:	200003bc 	.word	0x200003bc
 8002038:	200003d0 	.word	0x200003d0
 800203c:	2000048c 	.word	0x2000048c
 8002040:	080139f0 	.word	0x080139f0
 8002044:	200005a4 	.word	0x200005a4

08002048 <_GLOBAL__sub_I_hi2c1>:
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
 800204c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002050:	2001      	movs	r0, #1
 8002052:	f7ff ffcb 	bl	8001fec <_Z41__static_initialization_and_destruction_0ii>
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	607b      	str	r3, [r7, #4]
 8002062:	4b12      	ldr	r3, [pc, #72]	; (80020ac <HAL_MspInit+0x54>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	4a11      	ldr	r2, [pc, #68]	; (80020ac <HAL_MspInit+0x54>)
 8002068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800206c:	6453      	str	r3, [r2, #68]	; 0x44
 800206e:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <HAL_MspInit+0x54>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002076:	607b      	str	r3, [r7, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	603b      	str	r3, [r7, #0]
 800207e:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <HAL_MspInit+0x54>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <HAL_MspInit+0x54>)
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002088:	6413      	str	r3, [r2, #64]	; 0x40
 800208a:	4b08      	ldr	r3, [pc, #32]	; (80020ac <HAL_MspInit+0x54>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	210f      	movs	r1, #15
 800209a:	f06f 0001 	mvn.w	r0, #1
 800209e:	f000 fcb9 	bl	8002a14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40023800 	.word	0x40023800

080020b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08a      	sub	sp, #40	; 0x28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a19      	ldr	r2, [pc, #100]	; (8002134 <HAL_I2C_MspInit+0x84>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d12c      	bne.n	800212c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	4b18      	ldr	r3, [pc, #96]	; (8002138 <HAL_I2C_MspInit+0x88>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a17      	ldr	r2, [pc, #92]	; (8002138 <HAL_I2C_MspInit+0x88>)
 80020dc:	f043 0302 	orr.w	r3, r3, #2
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <HAL_I2C_MspInit+0x88>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020f4:	2312      	movs	r3, #18
 80020f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020f8:	2301      	movs	r3, #1
 80020fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fc:	2303      	movs	r3, #3
 80020fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002100:	2304      	movs	r3, #4
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	4619      	mov	r1, r3
 800210a:	480c      	ldr	r0, [pc, #48]	; (800213c <HAL_I2C_MspInit+0x8c>)
 800210c:	f000 fcac 	bl	8002a68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002110:	2300      	movs	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	4b08      	ldr	r3, [pc, #32]	; (8002138 <HAL_I2C_MspInit+0x88>)
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	4a07      	ldr	r2, [pc, #28]	; (8002138 <HAL_I2C_MspInit+0x88>)
 800211a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800211e:	6413      	str	r3, [r2, #64]	; 0x40
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_I2C_MspInit+0x88>)
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800212c:	bf00      	nop
 800212e:	3728      	adds	r7, #40	; 0x28
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40005400 	.word	0x40005400
 8002138:	40023800 	.word	0x40023800
 800213c:	40020400 	.word	0x40020400

08002140 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08a      	sub	sp, #40	; 0x28
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a19      	ldr	r2, [pc, #100]	; (80021c4 <HAL_SPI_MspInit+0x84>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d12b      	bne.n	80021ba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	4b18      	ldr	r3, [pc, #96]	; (80021c8 <HAL_SPI_MspInit+0x88>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	4a17      	ldr	r2, [pc, #92]	; (80021c8 <HAL_SPI_MspInit+0x88>)
 800216c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002170:	6453      	str	r3, [r2, #68]	; 0x44
 8002172:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <HAL_SPI_MspInit+0x88>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <HAL_SPI_MspInit+0x88>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a10      	ldr	r2, [pc, #64]	; (80021c8 <HAL_SPI_MspInit+0x88>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <HAL_SPI_MspInit+0x88>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800219a:	23e0      	movs	r3, #224	; 0xe0
 800219c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	2302      	movs	r3, #2
 80021a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a6:	2303      	movs	r3, #3
 80021a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021aa:	2305      	movs	r3, #5
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ae:	f107 0314 	add.w	r3, r7, #20
 80021b2:	4619      	mov	r1, r3
 80021b4:	4805      	ldr	r0, [pc, #20]	; (80021cc <HAL_SPI_MspInit+0x8c>)
 80021b6:	f000 fc57 	bl	8002a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80021ba:	bf00      	nop
 80021bc:	3728      	adds	r7, #40	; 0x28
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40013000 	.word	0x40013000
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40020000 	.word	0x40020000

080021d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0e      	ldr	r2, [pc, #56]	; (8002218 <HAL_TIM_Base_MspInit+0x48>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d115      	bne.n	800220e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	4b0d      	ldr	r3, [pc, #52]	; (800221c <HAL_TIM_Base_MspInit+0x4c>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	4a0c      	ldr	r2, [pc, #48]	; (800221c <HAL_TIM_Base_MspInit+0x4c>)
 80021ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f0:	6413      	str	r3, [r2, #64]	; 0x40
 80021f2:	4b0a      	ldr	r3, [pc, #40]	; (800221c <HAL_TIM_Base_MspInit+0x4c>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 80021fe:	2200      	movs	r2, #0
 8002200:	2105      	movs	r1, #5
 8002202:	202d      	movs	r0, #45	; 0x2d
 8002204:	f000 fc06 	bl	8002a14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002208:	202d      	movs	r0, #45	; 0x2d
 800220a:	f000 fc1f 	bl	8002a4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800220e:	bf00      	nop
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40002000 	.word	0x40002000
 800221c:	40023800 	.word	0x40023800

08002220 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08a      	sub	sp, #40	; 0x28
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a19      	ldr	r2, [pc, #100]	; (80022a4 <HAL_UART_MspInit+0x84>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d12b      	bne.n	800229a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	4b18      	ldr	r3, [pc, #96]	; (80022a8 <HAL_UART_MspInit+0x88>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	4a17      	ldr	r2, [pc, #92]	; (80022a8 <HAL_UART_MspInit+0x88>)
 800224c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002250:	6413      	str	r3, [r2, #64]	; 0x40
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <HAL_UART_MspInit+0x88>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <HAL_UART_MspInit+0x88>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	4a10      	ldr	r2, [pc, #64]	; (80022a8 <HAL_UART_MspInit+0x88>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6313      	str	r3, [r2, #48]	; 0x30
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <HAL_UART_MspInit+0x88>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800227a:	230c      	movs	r3, #12
 800227c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227e:	2302      	movs	r3, #2
 8002280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002286:	2303      	movs	r3, #3
 8002288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800228a:	2307      	movs	r3, #7
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228e:	f107 0314 	add.w	r3, r7, #20
 8002292:	4619      	mov	r1, r3
 8002294:	4805      	ldr	r0, [pc, #20]	; (80022ac <HAL_UART_MspInit+0x8c>)
 8002296:	f000 fbe7 	bl	8002a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800229a:	bf00      	nop
 800229c:	3728      	adds	r7, #40	; 0x28
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40004400 	.word	0x40004400
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40020000 	.word	0x40020000

080022b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08c      	sub	sp, #48	; 0x30
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 80022c0:	2200      	movs	r2, #0
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	202c      	movs	r0, #44	; 0x2c
 80022c6:	f000 fba5 	bl	8002a14 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80022ca:	202c      	movs	r0, #44	; 0x2c
 80022cc:	f000 fbbe 	bl	8002a4c <HAL_NVIC_EnableIRQ>
  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	4b1f      	ldr	r3, [pc, #124]	; (8002354 <HAL_InitTick+0xa4>)
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	4a1e      	ldr	r2, [pc, #120]	; (8002354 <HAL_InitTick+0xa4>)
 80022da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022de:	6413      	str	r3, [r2, #64]	; 0x40
 80022e0:	4b1c      	ldr	r3, [pc, #112]	; (8002354 <HAL_InitTick+0xa4>)
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022ec:	f107 0210 	add.w	r2, r7, #16
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	4611      	mov	r1, r2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f002 fca8 	bl	8004c4c <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80022fc:	f002 fc7e 	bl	8004bfc <HAL_RCC_GetPCLK1Freq>
 8002300:	4603      	mov	r3, r0
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002308:	4a13      	ldr	r2, [pc, #76]	; (8002358 <HAL_InitTick+0xa8>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	0c9b      	lsrs	r3, r3, #18
 8002310:	3b01      	subs	r3, #1
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <HAL_InitTick+0xac>)
 8002316:	4a12      	ldr	r2, [pc, #72]	; (8002360 <HAL_InitTick+0xb0>)
 8002318:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 800231a:	4b10      	ldr	r3, [pc, #64]	; (800235c <HAL_InitTick+0xac>)
 800231c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002320:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8002322:	4a0e      	ldr	r2, [pc, #56]	; (800235c <HAL_InitTick+0xac>)
 8002324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002326:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <HAL_InitTick+0xac>)
 800232a:	2200      	movs	r2, #0
 800232c:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232e:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_InitTick+0xac>)
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8002334:	4809      	ldr	r0, [pc, #36]	; (800235c <HAL_InitTick+0xac>)
 8002336:	f004 f9dd 	bl	80066f4 <HAL_TIM_Base_Init>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d104      	bne.n	800234a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8002340:	4806      	ldr	r0, [pc, #24]	; (800235c <HAL_InitTick+0xac>)
 8002342:	f004 fa27 	bl	8006794 <HAL_TIM_Base_Start_IT>
 8002346:	4603      	mov	r3, r0
 8002348:	e000      	b.n	800234c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
}
 800234c:	4618      	mov	r0, r3
 800234e:	3730      	adds	r7, #48	; 0x30
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40023800 	.word	0x40023800
 8002358:	431bde83 	.word	0x431bde83
 800235c:	200053f0 	.word	0x200053f0
 8002360:	40001c00 	.word	0x40001c00

08002364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002368:	e7fe      	b.n	8002368 <NMI_Handler+0x4>

0800236a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800236e:	e7fe      	b.n	800236e <HardFault_Handler+0x4>

08002370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002374:	e7fe      	b.n	8002374 <MemManage_Handler+0x4>

08002376 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800237a:	e7fe      	b.n	800237a <BusFault_Handler+0x4>

0800237c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002380:	e7fe      	b.n	8002380 <UsageFault_Handler+0x4>

08002382 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002382:	b480      	push	{r7}
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002396:	f004 fa6d 	bl	8006874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200053f0 	.word	0x200053f0

080023a4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80023a8:	4802      	ldr	r0, [pc, #8]	; (80023b4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80023aa:	f004 fa63 	bl	8006874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200002c0 	.word	0x200002c0

080023b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80023bc:	4802      	ldr	r0, [pc, #8]	; (80023c8 <OTG_FS_IRQHandler+0x10>)
 80023be:	f001 facb 	bl	8003958 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	2000594c 	.word	0x2000594c

080023cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
	return 1;
 80023d0:	2301      	movs	r3, #1
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <_kill>:

int _kill(int pid, int sig)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023e6:	f011 f995 	bl	8013714 <__errno>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2216      	movs	r2, #22
 80023ee:	601a      	str	r2, [r3, #0]
	return -1;
 80023f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <_exit>:

void _exit (int status)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002404:	f04f 31ff 	mov.w	r1, #4294967295
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ffe7 	bl	80023dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800240e:	e7fe      	b.n	800240e <_exit+0x12>

08002410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <SystemInit+0x28>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241a:	4a07      	ldr	r2, [pc, #28]	; (8002438 <SystemInit+0x28>)
 800241c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002424:	4b04      	ldr	r3, [pc, #16]	; (8002438 <SystemInit+0x28>)
 8002426:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800242a:	609a      	str	r2, [r3, #8]
#endif
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800243c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002474 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002440:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002442:	e003      	b.n	800244c <LoopCopyDataInit>

08002444 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002444:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002446:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002448:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800244a:	3104      	adds	r1, #4

0800244c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800244c:	480b      	ldr	r0, [pc, #44]	; (800247c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800244e:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002450:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002452:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002454:	d3f6      	bcc.n	8002444 <CopyDataInit>
  ldr  r2, =_sbss
 8002456:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002458:	e002      	b.n	8002460 <LoopFillZerobss>

0800245a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800245a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800245c:	f842 3b04 	str.w	r3, [r2], #4

08002460 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002460:	4b09      	ldr	r3, [pc, #36]	; (8002488 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002462:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002464:	d3f9      	bcc.n	800245a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002466:	f7ff ffd3 	bl	8002410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800246a:	f011 f959 	bl	8013720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800246e:	f7fe fc11 	bl	8000c94 <main>
  bx  lr    
 8002472:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002474:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002478:	08014b34 	.word	0x08014b34
  ldr  r0, =_sdata
 800247c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002480:	20000184 	.word	0x20000184
  ldr  r2, =_sbss
 8002484:	20000184 	.word	0x20000184
  ldr  r3, = _ebss
 8002488:	20005d58 	.word	0x20005d58

0800248c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800248c:	e7fe      	b.n	800248c <ADC_IRQHandler>
	...

08002490 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af04      	add	r7, sp, #16
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800249a:	f04f 33ff 	mov.w	r3, #4294967295
 800249e:	9302      	str	r3, [sp, #8]
 80024a0:	2301      	movs	r3, #1
 80024a2:	9301      	str	r3, [sp, #4]
 80024a4:	1dfb      	adds	r3, r7, #7
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	2301      	movs	r3, #1
 80024aa:	2200      	movs	r2, #0
 80024ac:	2178      	movs	r1, #120	; 0x78
 80024ae:	4803      	ldr	r0, [pc, #12]	; (80024bc <ssd1306_WriteCommand+0x2c>)
 80024b0:	f000 fde4 	bl	800307c <HAL_I2C_Mem_Write>
}
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	200001d0 	.word	0x200001d0

080024c0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af04      	add	r7, sp, #16
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	f04f 32ff 	mov.w	r2, #4294967295
 80024d2:	9202      	str	r2, [sp, #8]
 80024d4:	9301      	str	r3, [sp, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	2301      	movs	r3, #1
 80024dc:	2240      	movs	r2, #64	; 0x40
 80024de:	2178      	movs	r1, #120	; 0x78
 80024e0:	4803      	ldr	r0, [pc, #12]	; (80024f0 <ssd1306_WriteData+0x30>)
 80024e2:	f000 fdcb 	bl	800307c <HAL_I2C_Mem_Write>
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	200001d0 	.word	0x200001d0

080024f4 <ssd1306_Fill>:
    
    SSD1306.Initialized = 1;
}

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	e00d      	b.n	8002520 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black_) ? 0x00 : 0xFF;
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <ssd1306_Fill+0x1a>
 800250a:	2100      	movs	r1, #0
 800250c:	e000      	b.n	8002510 <ssd1306_Fill+0x1c>
 800250e:	21ff      	movs	r1, #255	; 0xff
 8002510:	4a09      	ldr	r2, [pc, #36]	; (8002538 <ssd1306_Fill+0x44>)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4413      	add	r3, r2
 8002516:	460a      	mov	r2, r1
 8002518:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	3301      	adds	r3, #1
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002526:	d3ed      	bcc.n	8002504 <ssd1306_Fill+0x10>
    }
}
 8002528:	bf00      	nop
 800252a:	bf00      	nop
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	200006ac 	.word	0x200006ac

0800253c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002542:	2300      	movs	r3, #0
 8002544:	71fb      	strb	r3, [r7, #7]
 8002546:	e016      	b.n	8002576 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	3b50      	subs	r3, #80	; 0x50
 800254c:	b2db      	uxtb	r3, r3
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff ff9e 	bl	8002490 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8002554:	2000      	movs	r0, #0
 8002556:	f7ff ff9b 	bl	8002490 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800255a:	2010      	movs	r0, #16
 800255c:	f7ff ff98 	bl	8002490 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	01db      	lsls	r3, r3, #7
 8002564:	4a08      	ldr	r2, [pc, #32]	; (8002588 <ssd1306_UpdateScreen+0x4c>)
 8002566:	4413      	add	r3, r2
 8002568:	2180      	movs	r1, #128	; 0x80
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff ffa8 	bl	80024c0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	3301      	adds	r3, #1
 8002574:	71fb      	strb	r3, [r7, #7]
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	2b07      	cmp	r3, #7
 800257a:	d9e5      	bls.n	8002548 <ssd1306_UpdateScreen+0xc>
    }
}
 800257c:	bf00      	nop
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	200006ac 	.word	0x200006ac

0800258c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
 8002596:	460b      	mov	r3, r1
 8002598:	71bb      	strb	r3, [r7, #6]
 800259a:	4613      	mov	r3, r2
 800259c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	db48      	blt.n	8002638 <ssd1306_DrawPixel+0xac>
 80025a6:	79bb      	ldrb	r3, [r7, #6]
 80025a8:	2b3f      	cmp	r3, #63	; 0x3f
 80025aa:	d845      	bhi.n	8002638 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80025ac:	4b25      	ldr	r3, [pc, #148]	; (8002644 <ssd1306_DrawPixel+0xb8>)
 80025ae:	791b      	ldrb	r3, [r3, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d006      	beq.n	80025c2 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80025b4:	797b      	ldrb	r3, [r7, #5]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	bf0c      	ite	eq
 80025ba:	2301      	moveq	r3, #1
 80025bc:	2300      	movne	r3, #0
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White_) {
 80025c2:	797b      	ldrb	r3, [r7, #5]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d11a      	bne.n	80025fe <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80025c8:	79fa      	ldrb	r2, [r7, #7]
 80025ca:	79bb      	ldrb	r3, [r7, #6]
 80025cc:	08db      	lsrs	r3, r3, #3
 80025ce:	b2d8      	uxtb	r0, r3
 80025d0:	4603      	mov	r3, r0
 80025d2:	01db      	lsls	r3, r3, #7
 80025d4:	4413      	add	r3, r2
 80025d6:	4a1c      	ldr	r2, [pc, #112]	; (8002648 <ssd1306_DrawPixel+0xbc>)
 80025d8:	5cd3      	ldrb	r3, [r2, r3]
 80025da:	b25a      	sxtb	r2, r3
 80025dc:	79bb      	ldrb	r3, [r7, #6]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	2101      	movs	r1, #1
 80025e4:	fa01 f303 	lsl.w	r3, r1, r3
 80025e8:	b25b      	sxtb	r3, r3
 80025ea:	4313      	orrs	r3, r2
 80025ec:	b259      	sxtb	r1, r3
 80025ee:	79fa      	ldrb	r2, [r7, #7]
 80025f0:	4603      	mov	r3, r0
 80025f2:	01db      	lsls	r3, r3, #7
 80025f4:	4413      	add	r3, r2
 80025f6:	b2c9      	uxtb	r1, r1
 80025f8:	4a13      	ldr	r2, [pc, #76]	; (8002648 <ssd1306_DrawPixel+0xbc>)
 80025fa:	54d1      	strb	r1, [r2, r3]
 80025fc:	e01d      	b.n	800263a <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80025fe:	79fa      	ldrb	r2, [r7, #7]
 8002600:	79bb      	ldrb	r3, [r7, #6]
 8002602:	08db      	lsrs	r3, r3, #3
 8002604:	b2d8      	uxtb	r0, r3
 8002606:	4603      	mov	r3, r0
 8002608:	01db      	lsls	r3, r3, #7
 800260a:	4413      	add	r3, r2
 800260c:	4a0e      	ldr	r2, [pc, #56]	; (8002648 <ssd1306_DrawPixel+0xbc>)
 800260e:	5cd3      	ldrb	r3, [r2, r3]
 8002610:	b25a      	sxtb	r2, r3
 8002612:	79bb      	ldrb	r3, [r7, #6]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	2101      	movs	r1, #1
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	b25b      	sxtb	r3, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	b25b      	sxtb	r3, r3
 8002624:	4013      	ands	r3, r2
 8002626:	b259      	sxtb	r1, r3
 8002628:	79fa      	ldrb	r2, [r7, #7]
 800262a:	4603      	mov	r3, r0
 800262c:	01db      	lsls	r3, r3, #7
 800262e:	4413      	add	r3, r2
 8002630:	b2c9      	uxtb	r1, r1
 8002632:	4a05      	ldr	r2, [pc, #20]	; (8002648 <ssd1306_DrawPixel+0xbc>)
 8002634:	54d1      	strb	r1, [r2, r3]
 8002636:	e000      	b.n	800263a <ssd1306_DrawPixel+0xae>
        return;
 8002638:	bf00      	nop
    }
}
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	20000aac 	.word	0x20000aac
 8002648:	200006ac 	.word	0x200006ac

0800264c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800264c:	b590      	push	{r4, r7, lr}
 800264e:	b089      	sub	sp, #36	; 0x24
 8002650:	af00      	add	r7, sp, #0
 8002652:	4604      	mov	r4, r0
 8002654:	1d38      	adds	r0, r7, #4
 8002656:	e880 0006 	stmia.w	r0, {r1, r2}
 800265a:	461a      	mov	r2, r3
 800265c:	4623      	mov	r3, r4
 800265e:	73fb      	strb	r3, [r7, #15]
 8002660:	4613      	mov	r3, r2
 8002662:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	2b1f      	cmp	r3, #31
 8002668:	d902      	bls.n	8002670 <ssd1306_WriteChar+0x24>
 800266a:	7bfb      	ldrb	r3, [r7, #15]
 800266c:	2b7e      	cmp	r3, #126	; 0x7e
 800266e:	d901      	bls.n	8002674 <ssd1306_WriteChar+0x28>
        return 0;
 8002670:	2300      	movs	r3, #0
 8002672:	e06d      	b.n	8002750 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002674:	4b38      	ldr	r3, [pc, #224]	; (8002758 <ssd1306_WriteChar+0x10c>)
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	793b      	ldrb	r3, [r7, #4]
 800267c:	4413      	add	r3, r2
 800267e:	2b80      	cmp	r3, #128	; 0x80
 8002680:	dc06      	bgt.n	8002690 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002682:	4b35      	ldr	r3, [pc, #212]	; (8002758 <ssd1306_WriteChar+0x10c>)
 8002684:	885b      	ldrh	r3, [r3, #2]
 8002686:	461a      	mov	r2, r3
 8002688:	797b      	ldrb	r3, [r7, #5]
 800268a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800268c:	2b40      	cmp	r3, #64	; 0x40
 800268e:	dd01      	ble.n	8002694 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002690:	2300      	movs	r3, #0
 8002692:	e05d      	b.n	8002750 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002694:	2300      	movs	r3, #0
 8002696:	61fb      	str	r3, [r7, #28]
 8002698:	e04c      	b.n	8002734 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	3b20      	subs	r3, #32
 80026a0:	7979      	ldrb	r1, [r7, #5]
 80026a2:	fb01 f303 	mul.w	r3, r1, r3
 80026a6:	4619      	mov	r1, r3
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	440b      	add	r3, r1
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4413      	add	r3, r2
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80026b4:	2300      	movs	r3, #0
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	e034      	b.n	8002724 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d012      	beq.n	80026f0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80026ca:	4b23      	ldr	r3, [pc, #140]	; (8002758 <ssd1306_WriteChar+0x10c>)
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	4413      	add	r3, r2
 80026d6:	b2d8      	uxtb	r0, r3
 80026d8:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <ssd1306_WriteChar+0x10c>)
 80026da:	885b      	ldrh	r3, [r3, #2]
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	4413      	add	r3, r2
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	7bba      	ldrb	r2, [r7, #14]
 80026e8:	4619      	mov	r1, r3
 80026ea:	f7ff ff4f 	bl	800258c <ssd1306_DrawPixel>
 80026ee:	e016      	b.n	800271e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80026f0:	4b19      	ldr	r3, [pc, #100]	; (8002758 <ssd1306_WriteChar+0x10c>)
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	b2d8      	uxtb	r0, r3
 80026fe:	4b16      	ldr	r3, [pc, #88]	; (8002758 <ssd1306_WriteChar+0x10c>)
 8002700:	885b      	ldrh	r3, [r3, #2]
 8002702:	b2da      	uxtb	r2, r3
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	b2db      	uxtb	r3, r3
 8002708:	4413      	add	r3, r2
 800270a:	b2d9      	uxtb	r1, r3
 800270c:	7bbb      	ldrb	r3, [r7, #14]
 800270e:	2b00      	cmp	r3, #0
 8002710:	bf0c      	ite	eq
 8002712:	2301      	moveq	r3, #1
 8002714:	2300      	movne	r3, #0
 8002716:	b2db      	uxtb	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	f7ff ff37 	bl	800258c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	3301      	adds	r3, #1
 8002722:	61bb      	str	r3, [r7, #24]
 8002724:	793b      	ldrb	r3, [r7, #4]
 8002726:	461a      	mov	r2, r3
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	4293      	cmp	r3, r2
 800272c:	d3c5      	bcc.n	80026ba <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3301      	adds	r3, #1
 8002732:	61fb      	str	r3, [r7, #28]
 8002734:	797b      	ldrb	r3, [r7, #5]
 8002736:	461a      	mov	r2, r3
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	4293      	cmp	r3, r2
 800273c:	d3ad      	bcc.n	800269a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <ssd1306_WriteChar+0x10c>)
 8002740:	881a      	ldrh	r2, [r3, #0]
 8002742:	793b      	ldrb	r3, [r7, #4]
 8002744:	b29b      	uxth	r3, r3
 8002746:	4413      	add	r3, r2
 8002748:	b29a      	uxth	r2, r3
 800274a:	4b03      	ldr	r3, [pc, #12]	; (8002758 <ssd1306_WriteChar+0x10c>)
 800274c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800274e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3724      	adds	r7, #36	; 0x24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd90      	pop	{r4, r7, pc}
 8002758:	20000aac 	.word	0x20000aac

0800275c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	1d38      	adds	r0, r7, #4
 8002766:	e880 0006 	stmia.w	r0, {r1, r2}
 800276a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 800276c:	e012      	b.n	8002794 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	7818      	ldrb	r0, [r3, #0]
 8002772:	78fb      	ldrb	r3, [r7, #3]
 8002774:	1d3a      	adds	r2, r7, #4
 8002776:	ca06      	ldmia	r2, {r1, r2}
 8002778:	f7ff ff68 	bl	800264c <ssd1306_WriteChar>
 800277c:	4603      	mov	r3, r0
 800277e:	461a      	mov	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d002      	beq.n	800278e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	e008      	b.n	80027a0 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	3301      	adds	r3, #1
 8002792:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1e8      	bne.n	800276e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	781b      	ldrb	r3, [r3, #0]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	460a      	mov	r2, r1
 80027b2:	71fb      	strb	r3, [r7, #7]
 80027b4:	4613      	mov	r3, r2
 80027b6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <ssd1306_SetCursor+0x2c>)
 80027be:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80027c0:	79bb      	ldrb	r3, [r7, #6]
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	4b03      	ldr	r3, [pc, #12]	; (80027d4 <ssd1306_SetCursor+0x2c>)
 80027c6:	805a      	strh	r2, [r3, #2]
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	20000aac 	.word	0x20000aac

080027d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027dc:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <HAL_Init+0x40>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a0d      	ldr	r2, [pc, #52]	; (8002818 <HAL_Init+0x40>)
 80027e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <HAL_Init+0x40>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <HAL_Init+0x40>)
 80027ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027f4:	4b08      	ldr	r3, [pc, #32]	; (8002818 <HAL_Init+0x40>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a07      	ldr	r2, [pc, #28]	; (8002818 <HAL_Init+0x40>)
 80027fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002800:	2003      	movs	r0, #3
 8002802:	f000 f8fc 	bl	80029fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002806:	2000      	movs	r0, #0
 8002808:	f7ff fd52 	bl	80022b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800280c:	f7ff fc24 	bl	8002058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40023c00 	.word	0x40023c00

0800281c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_IncTick+0x20>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_IncTick+0x24>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4413      	add	r3, r2
 800282c:	4a04      	ldr	r2, [pc, #16]	; (8002840 <HAL_IncTick+0x24>)
 800282e:	6013      	str	r3, [r2, #0]
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	20000014 	.word	0x20000014
 8002840:	20005438 	.word	0x20005438

08002844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return uwTick;
 8002848:	4b03      	ldr	r3, [pc, #12]	; (8002858 <HAL_GetTick+0x14>)
 800284a:	681b      	ldr	r3, [r3, #0]
}
 800284c:	4618      	mov	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	20005438 	.word	0x20005438

0800285c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002864:	f7ff ffee 	bl	8002844 <HAL_GetTick>
 8002868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002874:	d005      	beq.n	8002882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002876:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <HAL_Delay+0x44>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002882:	bf00      	nop
 8002884:	f7ff ffde 	bl	8002844 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	429a      	cmp	r2, r3
 8002892:	d8f7      	bhi.n	8002884 <HAL_Delay+0x28>
  {
  }
}
 8002894:	bf00      	nop
 8002896:	bf00      	nop
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000014 	.word	0x20000014

080028a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028c0:	4013      	ands	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028d6:	4a04      	ldr	r2, [pc, #16]	; (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	60d3      	str	r3, [r2, #12]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f0:	4b04      	ldr	r3, [pc, #16]	; (8002904 <__NVIC_GetPriorityGrouping+0x18>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	f003 0307 	and.w	r3, r3, #7
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	2b00      	cmp	r3, #0
 8002918:	db0b      	blt.n	8002932 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	f003 021f 	and.w	r2, r3, #31
 8002920:	4907      	ldr	r1, [pc, #28]	; (8002940 <__NVIC_EnableIRQ+0x38>)
 8002922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	2001      	movs	r0, #1
 800292a:	fa00 f202 	lsl.w	r2, r0, r2
 800292e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	e000e100 	.word	0xe000e100

08002944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	6039      	str	r1, [r7, #0]
 800294e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002954:	2b00      	cmp	r3, #0
 8002956:	db0a      	blt.n	800296e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	b2da      	uxtb	r2, r3
 800295c:	490c      	ldr	r1, [pc, #48]	; (8002990 <__NVIC_SetPriority+0x4c>)
 800295e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002962:	0112      	lsls	r2, r2, #4
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	440b      	add	r3, r1
 8002968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800296c:	e00a      	b.n	8002984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4908      	ldr	r1, [pc, #32]	; (8002994 <__NVIC_SetPriority+0x50>)
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	3b04      	subs	r3, #4
 800297c:	0112      	lsls	r2, r2, #4
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	440b      	add	r3, r1
 8002982:	761a      	strb	r2, [r3, #24]
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	e000e100 	.word	0xe000e100
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002998:	b480      	push	{r7}
 800299a:	b089      	sub	sp, #36	; 0x24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f1c3 0307 	rsb	r3, r3, #7
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	bf28      	it	cs
 80029b6:	2304      	movcs	r3, #4
 80029b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	3304      	adds	r3, #4
 80029be:	2b06      	cmp	r3, #6
 80029c0:	d902      	bls.n	80029c8 <NVIC_EncodePriority+0x30>
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3b03      	subs	r3, #3
 80029c6:	e000      	b.n	80029ca <NVIC_EncodePriority+0x32>
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029cc:	f04f 32ff 	mov.w	r2, #4294967295
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43da      	mvns	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	401a      	ands	r2, r3
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e0:	f04f 31ff 	mov.w	r1, #4294967295
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ea:	43d9      	mvns	r1, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f0:	4313      	orrs	r3, r2
         );
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3724      	adds	r7, #36	; 0x24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff ff4c 	bl	80028a4 <__NVIC_SetPriorityGrouping>
}
 8002a0c:	bf00      	nop
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a26:	f7ff ff61 	bl	80028ec <__NVIC_GetPriorityGrouping>
 8002a2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	68b9      	ldr	r1, [r7, #8]
 8002a30:	6978      	ldr	r0, [r7, #20]
 8002a32:	f7ff ffb1 	bl	8002998 <NVIC_EncodePriority>
 8002a36:	4602      	mov	r2, r0
 8002a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a3c:	4611      	mov	r1, r2
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff ff80 	bl	8002944 <__NVIC_SetPriority>
}
 8002a44:	bf00      	nop
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff ff54 	bl	8002908 <__NVIC_EnableIRQ>
}
 8002a60:	bf00      	nop
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b089      	sub	sp, #36	; 0x24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	e165      	b.n	8002d50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a84:	2201      	movs	r2, #1
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	4013      	ands	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	f040 8154 	bne.w	8002d4a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d005      	beq.n	8002aba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d130      	bne.n	8002b1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002af0:	2201      	movs	r2, #1
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	091b      	lsrs	r3, r3, #4
 8002b06:	f003 0201 	and.w	r2, r3, #1
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d017      	beq.n	8002b58 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	2203      	movs	r2, #3
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d123      	bne.n	8002bac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	08da      	lsrs	r2, r3, #3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3208      	adds	r2, #8
 8002b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	220f      	movs	r2, #15
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4013      	ands	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	691a      	ldr	r2, [r3, #16]
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	08da      	lsrs	r2, r3, #3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3208      	adds	r2, #8
 8002ba6:	69b9      	ldr	r1, [r7, #24]
 8002ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 0203 	and.w	r2, r3, #3
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 80ae 	beq.w	8002d4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	4b5d      	ldr	r3, [pc, #372]	; (8002d68 <HAL_GPIO_Init+0x300>)
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf6:	4a5c      	ldr	r2, [pc, #368]	; (8002d68 <HAL_GPIO_Init+0x300>)
 8002bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8002bfe:	4b5a      	ldr	r3, [pc, #360]	; (8002d68 <HAL_GPIO_Init+0x300>)
 8002c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c0a:	4a58      	ldr	r2, [pc, #352]	; (8002d6c <HAL_GPIO_Init+0x304>)
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	089b      	lsrs	r3, r3, #2
 8002c10:	3302      	adds	r3, #2
 8002c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	220f      	movs	r2, #15
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43db      	mvns	r3, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a4f      	ldr	r2, [pc, #316]	; (8002d70 <HAL_GPIO_Init+0x308>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d025      	beq.n	8002c82 <HAL_GPIO_Init+0x21a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a4e      	ldr	r2, [pc, #312]	; (8002d74 <HAL_GPIO_Init+0x30c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d01f      	beq.n	8002c7e <HAL_GPIO_Init+0x216>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a4d      	ldr	r2, [pc, #308]	; (8002d78 <HAL_GPIO_Init+0x310>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d019      	beq.n	8002c7a <HAL_GPIO_Init+0x212>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a4c      	ldr	r2, [pc, #304]	; (8002d7c <HAL_GPIO_Init+0x314>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d013      	beq.n	8002c76 <HAL_GPIO_Init+0x20e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a4b      	ldr	r2, [pc, #300]	; (8002d80 <HAL_GPIO_Init+0x318>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00d      	beq.n	8002c72 <HAL_GPIO_Init+0x20a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a4a      	ldr	r2, [pc, #296]	; (8002d84 <HAL_GPIO_Init+0x31c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d007      	beq.n	8002c6e <HAL_GPIO_Init+0x206>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a49      	ldr	r2, [pc, #292]	; (8002d88 <HAL_GPIO_Init+0x320>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d101      	bne.n	8002c6a <HAL_GPIO_Init+0x202>
 8002c66:	2306      	movs	r3, #6
 8002c68:	e00c      	b.n	8002c84 <HAL_GPIO_Init+0x21c>
 8002c6a:	2307      	movs	r3, #7
 8002c6c:	e00a      	b.n	8002c84 <HAL_GPIO_Init+0x21c>
 8002c6e:	2305      	movs	r3, #5
 8002c70:	e008      	b.n	8002c84 <HAL_GPIO_Init+0x21c>
 8002c72:	2304      	movs	r3, #4
 8002c74:	e006      	b.n	8002c84 <HAL_GPIO_Init+0x21c>
 8002c76:	2303      	movs	r3, #3
 8002c78:	e004      	b.n	8002c84 <HAL_GPIO_Init+0x21c>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e002      	b.n	8002c84 <HAL_GPIO_Init+0x21c>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <HAL_GPIO_Init+0x21c>
 8002c82:	2300      	movs	r3, #0
 8002c84:	69fa      	ldr	r2, [r7, #28]
 8002c86:	f002 0203 	and.w	r2, r2, #3
 8002c8a:	0092      	lsls	r2, r2, #2
 8002c8c:	4093      	lsls	r3, r2
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c94:	4935      	ldr	r1, [pc, #212]	; (8002d6c <HAL_GPIO_Init+0x304>)
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	089b      	lsrs	r3, r3, #2
 8002c9a:	3302      	adds	r3, #2
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ca2:	4b3a      	ldr	r3, [pc, #232]	; (8002d8c <HAL_GPIO_Init+0x324>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	43db      	mvns	r3, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cc6:	4a31      	ldr	r2, [pc, #196]	; (8002d8c <HAL_GPIO_Init+0x324>)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ccc:	4b2f      	ldr	r3, [pc, #188]	; (8002d8c <HAL_GPIO_Init+0x324>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cf0:	4a26      	ldr	r2, [pc, #152]	; (8002d8c <HAL_GPIO_Init+0x324>)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cf6:	4b25      	ldr	r3, [pc, #148]	; (8002d8c <HAL_GPIO_Init+0x324>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d1a:	4a1c      	ldr	r2, [pc, #112]	; (8002d8c <HAL_GPIO_Init+0x324>)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d20:	4b1a      	ldr	r3, [pc, #104]	; (8002d8c <HAL_GPIO_Init+0x324>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d44:	4a11      	ldr	r2, [pc, #68]	; (8002d8c <HAL_GPIO_Init+0x324>)
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	61fb      	str	r3, [r7, #28]
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	2b0f      	cmp	r3, #15
 8002d54:	f67f ae96 	bls.w	8002a84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d58:	bf00      	nop
 8002d5a:	bf00      	nop
 8002d5c:	3724      	adds	r7, #36	; 0x24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	40013800 	.word	0x40013800
 8002d70:	40020000 	.word	0x40020000
 8002d74:	40020400 	.word	0x40020400
 8002d78:	40020800 	.word	0x40020800
 8002d7c:	40020c00 	.word	0x40020c00
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40021400 	.word	0x40021400
 8002d88:	40021800 	.word	0x40021800
 8002d8c:	40013c00 	.word	0x40013c00

08002d90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	887b      	ldrh	r3, [r7, #2]
 8002da2:	4013      	ands	r3, r2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002da8:	2301      	movs	r3, #1
 8002daa:	73fb      	strb	r3, [r7, #15]
 8002dac:	e001      	b.n	8002db2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dae:	2300      	movs	r3, #0
 8002db0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	807b      	strh	r3, [r7, #2]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dd0:	787b      	ldrb	r3, [r7, #1]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dd6:	887a      	ldrh	r2, [r7, #2]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ddc:	e003      	b.n	8002de6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dde:	887b      	ldrh	r3, [r7, #2]
 8002de0:	041a      	lsls	r2, r3, #16
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	619a      	str	r2, [r3, #24]
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
	...

08002df4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e12b      	b.n	800305e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d106      	bne.n	8002e20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff f948 	bl	80020b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2224      	movs	r2, #36	; 0x24
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0201 	bic.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e58:	f001 fed0 	bl	8004bfc <HAL_RCC_GetPCLK1Freq>
 8002e5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	4a81      	ldr	r2, [pc, #516]	; (8003068 <HAL_I2C_Init+0x274>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d807      	bhi.n	8002e78 <HAL_I2C_Init+0x84>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4a80      	ldr	r2, [pc, #512]	; (800306c <HAL_I2C_Init+0x278>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	bf94      	ite	ls
 8002e70:	2301      	movls	r3, #1
 8002e72:	2300      	movhi	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	e006      	b.n	8002e86 <HAL_I2C_Init+0x92>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4a7d      	ldr	r2, [pc, #500]	; (8003070 <HAL_I2C_Init+0x27c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	bf94      	ite	ls
 8002e80:	2301      	movls	r3, #1
 8002e82:	2300      	movhi	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e0e7      	b.n	800305e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4a78      	ldr	r2, [pc, #480]	; (8003074 <HAL_I2C_Init+0x280>)
 8002e92:	fba2 2303 	umull	r2, r3, r2, r3
 8002e96:	0c9b      	lsrs	r3, r3, #18
 8002e98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	4a6a      	ldr	r2, [pc, #424]	; (8003068 <HAL_I2C_Init+0x274>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d802      	bhi.n	8002ec8 <HAL_I2C_Init+0xd4>
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	e009      	b.n	8002edc <HAL_I2C_Init+0xe8>
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ece:	fb02 f303 	mul.w	r3, r2, r3
 8002ed2:	4a69      	ldr	r2, [pc, #420]	; (8003078 <HAL_I2C_Init+0x284>)
 8002ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed8:	099b      	lsrs	r3, r3, #6
 8002eda:	3301      	adds	r3, #1
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002eee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	495c      	ldr	r1, [pc, #368]	; (8003068 <HAL_I2C_Init+0x274>)
 8002ef8:	428b      	cmp	r3, r1
 8002efa:	d819      	bhi.n	8002f30 <HAL_I2C_Init+0x13c>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1e59      	subs	r1, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f0a:	1c59      	adds	r1, r3, #1
 8002f0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f10:	400b      	ands	r3, r1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00a      	beq.n	8002f2c <HAL_I2C_Init+0x138>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	1e59      	subs	r1, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f24:	3301      	adds	r3, #1
 8002f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f2a:	e051      	b.n	8002fd0 <HAL_I2C_Init+0x1dc>
 8002f2c:	2304      	movs	r3, #4
 8002f2e:	e04f      	b.n	8002fd0 <HAL_I2C_Init+0x1dc>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d111      	bne.n	8002f5c <HAL_I2C_Init+0x168>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1e58      	subs	r0, r3, #1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6859      	ldr	r1, [r3, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	440b      	add	r3, r1
 8002f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	bf0c      	ite	eq
 8002f54:	2301      	moveq	r3, #1
 8002f56:	2300      	movne	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	e012      	b.n	8002f82 <HAL_I2C_Init+0x18e>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1e58      	subs	r0, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6859      	ldr	r1, [r3, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	0099      	lsls	r1, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f72:	3301      	adds	r3, #1
 8002f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	bf0c      	ite	eq
 8002f7c:	2301      	moveq	r3, #1
 8002f7e:	2300      	movne	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_I2C_Init+0x196>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e022      	b.n	8002fd0 <HAL_I2C_Init+0x1dc>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10e      	bne.n	8002fb0 <HAL_I2C_Init+0x1bc>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	1e58      	subs	r0, r3, #1
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6859      	ldr	r1, [r3, #4]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	440b      	add	r3, r1
 8002fa0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fae:	e00f      	b.n	8002fd0 <HAL_I2C_Init+0x1dc>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1e58      	subs	r0, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6859      	ldr	r1, [r3, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	0099      	lsls	r1, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	6809      	ldr	r1, [r1, #0]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69da      	ldr	r2, [r3, #28]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ffe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6911      	ldr	r1, [r2, #16]
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	68d2      	ldr	r2, [r2, #12]
 800300a:	4311      	orrs	r1, r2
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	430b      	orrs	r3, r1
 8003012:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	695a      	ldr	r2, [r3, #20]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0201 	orr.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2220      	movs	r2, #32
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	000186a0 	.word	0x000186a0
 800306c:	001e847f 	.word	0x001e847f
 8003070:	003d08ff 	.word	0x003d08ff
 8003074:	431bde83 	.word	0x431bde83
 8003078:	10624dd3 	.word	0x10624dd3

0800307c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b088      	sub	sp, #32
 8003080:	af02      	add	r7, sp, #8
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	4608      	mov	r0, r1
 8003086:	4611      	mov	r1, r2
 8003088:	461a      	mov	r2, r3
 800308a:	4603      	mov	r3, r0
 800308c:	817b      	strh	r3, [r7, #10]
 800308e:	460b      	mov	r3, r1
 8003090:	813b      	strh	r3, [r7, #8]
 8003092:	4613      	mov	r3, r2
 8003094:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003096:	f7ff fbd5 	bl	8002844 <HAL_GetTick>
 800309a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b20      	cmp	r3, #32
 80030a6:	f040 80d9 	bne.w	800325c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	2319      	movs	r3, #25
 80030b0:	2201      	movs	r2, #1
 80030b2:	496d      	ldr	r1, [pc, #436]	; (8003268 <HAL_I2C_Mem_Write+0x1ec>)
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 f971 	bl	800339c <I2C_WaitOnFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80030c0:	2302      	movs	r3, #2
 80030c2:	e0cc      	b.n	800325e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d101      	bne.n	80030d2 <HAL_I2C_Mem_Write+0x56>
 80030ce:	2302      	movs	r3, #2
 80030d0:	e0c5      	b.n	800325e <HAL_I2C_Mem_Write+0x1e2>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d007      	beq.n	80030f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0201 	orr.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003106:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2221      	movs	r2, #33	; 0x21
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2240      	movs	r2, #64	; 0x40
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a3a      	ldr	r2, [r7, #32]
 8003122:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003128:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4a4d      	ldr	r2, [pc, #308]	; (800326c <HAL_I2C_Mem_Write+0x1f0>)
 8003138:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800313a:	88f8      	ldrh	r0, [r7, #6]
 800313c:	893a      	ldrh	r2, [r7, #8]
 800313e:	8979      	ldrh	r1, [r7, #10]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	9301      	str	r3, [sp, #4]
 8003144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	4603      	mov	r3, r0
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 f890 	bl	8003270 <I2C_RequestMemoryWrite>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d052      	beq.n	80031fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e081      	b.n	800325e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f9f2 	bl	8003548 <I2C_WaitOnTXEFlagUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00d      	beq.n	8003186 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	2b04      	cmp	r3, #4
 8003170:	d107      	bne.n	8003182 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003180:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e06b      	b.n	800325e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	781a      	ldrb	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d11b      	bne.n	80031fc <HAL_I2C_Mem_Write+0x180>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d017      	beq.n	80031fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	781a      	ldrb	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1aa      	bne.n	800315a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 f9de 	bl	80035ca <I2C_WaitOnBTFFlagUntilTimeout>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00d      	beq.n	8003230 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	2b04      	cmp	r3, #4
 800321a:	d107      	bne.n	800322c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800322a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e016      	b.n	800325e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800323e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003258:	2300      	movs	r3, #0
 800325a:	e000      	b.n	800325e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800325c:	2302      	movs	r3, #2
  }
}
 800325e:	4618      	mov	r0, r3
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	00100002 	.word	0x00100002
 800326c:	ffff0000 	.word	0xffff0000

08003270 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af02      	add	r7, sp, #8
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	4608      	mov	r0, r1
 800327a:	4611      	mov	r1, r2
 800327c:	461a      	mov	r2, r3
 800327e:	4603      	mov	r3, r0
 8003280:	817b      	strh	r3, [r7, #10]
 8003282:	460b      	mov	r3, r1
 8003284:	813b      	strh	r3, [r7, #8]
 8003286:	4613      	mov	r3, r2
 8003288:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003298:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 f878 	bl	800339c <I2C_WaitOnFlagUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00d      	beq.n	80032ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c0:	d103      	bne.n	80032ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e05f      	b.n	800338e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032ce:	897b      	ldrh	r3, [r7, #10]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	461a      	mov	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	6a3a      	ldr	r2, [r7, #32]
 80032e2:	492d      	ldr	r1, [pc, #180]	; (8003398 <I2C_RequestMemoryWrite+0x128>)
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f8b0 	bl	800344a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e04c      	b.n	800338e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800330a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330c:	6a39      	ldr	r1, [r7, #32]
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 f91a 	bl	8003548 <I2C_WaitOnTXEFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00d      	beq.n	8003336 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	2b04      	cmp	r3, #4
 8003320:	d107      	bne.n	8003332 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003330:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e02b      	b.n	800338e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003336:	88fb      	ldrh	r3, [r7, #6]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d105      	bne.n	8003348 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800333c:	893b      	ldrh	r3, [r7, #8]
 800333e:	b2da      	uxtb	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	611a      	str	r2, [r3, #16]
 8003346:	e021      	b.n	800338c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003348:	893b      	ldrh	r3, [r7, #8]
 800334a:	0a1b      	lsrs	r3, r3, #8
 800334c:	b29b      	uxth	r3, r3
 800334e:	b2da      	uxtb	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003358:	6a39      	ldr	r1, [r7, #32]
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 f8f4 	bl	8003548 <I2C_WaitOnTXEFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00d      	beq.n	8003382 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	2b04      	cmp	r3, #4
 800336c:	d107      	bne.n	800337e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800337c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e005      	b.n	800338e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003382:	893b      	ldrh	r3, [r7, #8]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	00010002 	.word	0x00010002

0800339c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	603b      	str	r3, [r7, #0]
 80033a8:	4613      	mov	r3, r2
 80033aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033ac:	e025      	b.n	80033fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b4:	d021      	beq.n	80033fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b6:	f7ff fa45 	bl	8002844 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d302      	bcc.n	80033cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d116      	bne.n	80033fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2220      	movs	r2, #32
 80033d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f043 0220 	orr.w	r2, r3, #32
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e023      	b.n	8003442 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	0c1b      	lsrs	r3, r3, #16
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b01      	cmp	r3, #1
 8003402:	d10d      	bne.n	8003420 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	43da      	mvns	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	4013      	ands	r3, r2
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	bf0c      	ite	eq
 8003416:	2301      	moveq	r3, #1
 8003418:	2300      	movne	r3, #0
 800341a:	b2db      	uxtb	r3, r3
 800341c:	461a      	mov	r2, r3
 800341e:	e00c      	b.n	800343a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	43da      	mvns	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4013      	ands	r3, r2
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	bf0c      	ite	eq
 8003432:	2301      	moveq	r3, #1
 8003434:	2300      	movne	r3, #0
 8003436:	b2db      	uxtb	r3, r3
 8003438:	461a      	mov	r2, r3
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	429a      	cmp	r2, r3
 800343e:	d0b6      	beq.n	80033ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b084      	sub	sp, #16
 800344e:	af00      	add	r7, sp, #0
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003458:	e051      	b.n	80034fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003468:	d123      	bne.n	80034b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003478:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003482:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2220      	movs	r2, #32
 800348e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f043 0204 	orr.w	r2, r3, #4
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e046      	b.n	8003540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b8:	d021      	beq.n	80034fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ba:	f7ff f9c3 	bl	8002844 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d302      	bcc.n	80034d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d116      	bne.n	80034fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f043 0220 	orr.w	r2, r3, #32
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e020      	b.n	8003540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	0c1b      	lsrs	r3, r3, #16
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	d10c      	bne.n	8003522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	43da      	mvns	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4013      	ands	r3, r2
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	bf14      	ite	ne
 800351a:	2301      	movne	r3, #1
 800351c:	2300      	moveq	r3, #0
 800351e:	b2db      	uxtb	r3, r3
 8003520:	e00b      	b.n	800353a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	43da      	mvns	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4013      	ands	r3, r2
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	bf14      	ite	ne
 8003534:	2301      	movne	r3, #1
 8003536:	2300      	moveq	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d18d      	bne.n	800345a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003554:	e02d      	b.n	80035b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f878 	bl	800364c <I2C_IsAcknowledgeFailed>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e02d      	b.n	80035c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356c:	d021      	beq.n	80035b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356e:	f7ff f969 	bl	8002844 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	429a      	cmp	r2, r3
 800357c:	d302      	bcc.n	8003584 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d116      	bne.n	80035b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	f043 0220 	orr.w	r2, r3, #32
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e007      	b.n	80035c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035bc:	2b80      	cmp	r3, #128	; 0x80
 80035be:	d1ca      	bne.n	8003556 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b084      	sub	sp, #16
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035d6:	e02d      	b.n	8003634 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 f837 	bl	800364c <I2C_IsAcknowledgeFailed>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e02d      	b.n	8003644 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ee:	d021      	beq.n	8003634 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f0:	f7ff f928 	bl	8002844 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d302      	bcc.n	8003606 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d116      	bne.n	8003634 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	f043 0220 	orr.w	r2, r3, #32
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e007      	b.n	8003644 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b04      	cmp	r3, #4
 8003640:	d1ca      	bne.n	80035d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003662:	d11b      	bne.n	800369c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800366c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	f043 0204 	orr.w	r2, r3, #4
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ac:	b08f      	sub	sp, #60	; 0x3c
 80036ae:	af0a      	add	r7, sp, #40	; 0x28
 80036b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e116      	b.n	80038ea <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f009 fbd8 	bl	800ce8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2203      	movs	r2, #3
 80036e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d102      	bne.n	80036f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f003 ff47 	bl	800758e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	603b      	str	r3, [r7, #0]
 8003706:	687e      	ldr	r6, [r7, #4]
 8003708:	466d      	mov	r5, sp
 800370a:	f106 0410 	add.w	r4, r6, #16
 800370e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003710:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003714:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003716:	e894 0003 	ldmia.w	r4, {r0, r1}
 800371a:	e885 0003 	stmia.w	r5, {r0, r1}
 800371e:	1d33      	adds	r3, r6, #4
 8003720:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003722:	6838      	ldr	r0, [r7, #0]
 8003724:	f003 fe1e 	bl	8007364 <USB_CoreInit>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2202      	movs	r2, #2
 8003732:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e0d7      	b.n	80038ea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2100      	movs	r1, #0
 8003740:	4618      	mov	r0, r3
 8003742:	f003 ff35 	bl	80075b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003746:	2300      	movs	r3, #0
 8003748:	73fb      	strb	r3, [r7, #15]
 800374a:	e04a      	b.n	80037e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800374c:	7bfa      	ldrb	r2, [r7, #15]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	1a9b      	subs	r3, r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	333d      	adds	r3, #61	; 0x3d
 800375c:	2201      	movs	r2, #1
 800375e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003760:	7bfa      	ldrb	r2, [r7, #15]
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	4613      	mov	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	333c      	adds	r3, #60	; 0x3c
 8003770:	7bfa      	ldrb	r2, [r7, #15]
 8003772:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003774:	7bfa      	ldrb	r2, [r7, #15]
 8003776:	7bfb      	ldrb	r3, [r7, #15]
 8003778:	b298      	uxth	r0, r3
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	3342      	adds	r3, #66	; 0x42
 8003788:	4602      	mov	r2, r0
 800378a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800378c:	7bfa      	ldrb	r2, [r7, #15]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	1a9b      	subs	r3, r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	333f      	adds	r3, #63	; 0x3f
 800379c:	2200      	movs	r2, #0
 800379e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037a0:	7bfa      	ldrb	r2, [r7, #15]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	3344      	adds	r3, #68	; 0x44
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037b4:	7bfa      	ldrb	r2, [r7, #15]
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4613      	mov	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	1a9b      	subs	r3, r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	3348      	adds	r3, #72	; 0x48
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037c8:	7bfa      	ldrb	r2, [r7, #15]
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	3350      	adds	r3, #80	; 0x50
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
 80037de:	3301      	adds	r3, #1
 80037e0:	73fb      	strb	r3, [r7, #15]
 80037e2:	7bfa      	ldrb	r2, [r7, #15]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d3af      	bcc.n	800374c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ec:	2300      	movs	r3, #0
 80037ee:	73fb      	strb	r3, [r7, #15]
 80037f0:	e044      	b.n	800387c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037f2:	7bfa      	ldrb	r2, [r7, #15]
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	4613      	mov	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	1a9b      	subs	r3, r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003804:	2200      	movs	r2, #0
 8003806:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003808:	7bfa      	ldrb	r2, [r7, #15]
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	4613      	mov	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	1a9b      	subs	r3, r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800381a:	7bfa      	ldrb	r2, [r7, #15]
 800381c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800381e:	7bfa      	ldrb	r2, [r7, #15]
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	4613      	mov	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	1a9b      	subs	r3, r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003834:	7bfa      	ldrb	r2, [r7, #15]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	1a9b      	subs	r3, r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800384a:	7bfa      	ldrb	r2, [r7, #15]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003860:	7bfa      	ldrb	r2, [r7, #15]
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	1a9b      	subs	r3, r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003876:	7bfb      	ldrb	r3, [r7, #15]
 8003878:	3301      	adds	r3, #1
 800387a:	73fb      	strb	r3, [r7, #15]
 800387c:	7bfa      	ldrb	r2, [r7, #15]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	429a      	cmp	r2, r3
 8003884:	d3b5      	bcc.n	80037f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	603b      	str	r3, [r7, #0]
 800388c:	687e      	ldr	r6, [r7, #4]
 800388e:	466d      	mov	r5, sp
 8003890:	f106 0410 	add.w	r4, r6, #16
 8003894:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003896:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003898:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800389a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800389c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80038a4:	1d33      	adds	r3, r6, #4
 80038a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038a8:	6838      	ldr	r0, [r7, #0]
 80038aa:	f003 feab 	bl	8007604 <USB_DevInit>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e014      	b.n	80038ea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d102      	bne.n	80038de <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f001 f879 	bl	80049d0 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f004 fee6 	bl	80086b4 <USB_DevDisconnect>

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038f2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b084      	sub	sp, #16
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003906:	2b01      	cmp	r3, #1
 8003908:	d101      	bne.n	800390e <HAL_PCD_Start+0x1c>
 800390a:	2302      	movs	r3, #2
 800390c:	e020      	b.n	8003950 <HAL_PCD_Start+0x5e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391a:	2b01      	cmp	r3, #1
 800391c:	d109      	bne.n	8003932 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003922:	2b01      	cmp	r3, #1
 8003924:	d005      	beq.n	8003932 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f003 fe18 	bl	800756c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f004 fe96 	bl	8008672 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003958:	b590      	push	{r4, r7, lr}
 800395a:	b08d      	sub	sp, #52	; 0x34
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f004 ff54 	bl	800881c <USB_GetMode>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	f040 83ca 	bne.w	8004110 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f004 feb8 	bl	80086f6 <USB_ReadInterrupts>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 83c0 	beq.w	800410e <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f004 feaf 	bl	80086f6 <USB_ReadInterrupts>
 8003998:	4603      	mov	r3, r0
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d107      	bne.n	80039b2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695a      	ldr	r2, [r3, #20]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f002 0202 	and.w	r2, r2, #2
 80039b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f004 fe9d 	bl	80086f6 <USB_ReadInterrupts>
 80039bc:	4603      	mov	r3, r0
 80039be:	f003 0310 	and.w	r3, r3, #16
 80039c2:	2b10      	cmp	r3, #16
 80039c4:	d161      	bne.n	8003a8a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	699a      	ldr	r2, [r3, #24]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0210 	bic.w	r2, r2, #16
 80039d4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	f003 020f 	and.w	r2, r3, #15
 80039e2:	4613      	mov	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	1a9b      	subs	r3, r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	4413      	add	r3, r2
 80039f2:	3304      	adds	r3, #4
 80039f4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	0c5b      	lsrs	r3, r3, #17
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d124      	bne.n	8003a4c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d035      	beq.n	8003a7a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	091b      	lsrs	r3, r3, #4
 8003a16:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	461a      	mov	r2, r3
 8003a20:	6a38      	ldr	r0, [r7, #32]
 8003a22:	f004 fd03 	bl	800842c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	091b      	lsrs	r3, r3, #4
 8003a2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a32:	441a      	add	r2, r3
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	699a      	ldr	r2, [r3, #24]
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	091b      	lsrs	r3, r3, #4
 8003a40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a44:	441a      	add	r2, r3
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	619a      	str	r2, [r3, #24]
 8003a4a:	e016      	b.n	8003a7a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	0c5b      	lsrs	r3, r3, #17
 8003a50:	f003 030f 	and.w	r3, r3, #15
 8003a54:	2b06      	cmp	r3, #6
 8003a56:	d110      	bne.n	8003a7a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a5e:	2208      	movs	r2, #8
 8003a60:	4619      	mov	r1, r3
 8003a62:	6a38      	ldr	r0, [r7, #32]
 8003a64:	f004 fce2 	bl	800842c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	699a      	ldr	r2, [r3, #24]
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	091b      	lsrs	r3, r3, #4
 8003a70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a74:	441a      	add	r2, r3
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	699a      	ldr	r2, [r3, #24]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0210 	orr.w	r2, r2, #16
 8003a88:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f004 fe31 	bl	80086f6 <USB_ReadInterrupts>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a9a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a9e:	d16e      	bne.n	8003b7e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f004 fe37 	bl	800871c <USB_ReadDevAllOutEpInterrupt>
 8003aae:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003ab0:	e062      	b.n	8003b78 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d057      	beq.n	8003b6c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	4611      	mov	r1, r2
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f004 fe5c 	bl	8008784 <USB_ReadDevOutEPInterrupt>
 8003acc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00c      	beq.n	8003af2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003aea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 fdc5 	bl	800467c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00c      	beq.n	8003b16 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b08:	461a      	mov	r2, r3
 8003b0a:	2308      	movs	r3, #8
 8003b0c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003b0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 febf 	bl	8004894 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	2310      	movs	r3, #16
 8003b30:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f003 0320 	and.w	r3, r3, #32
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b48:	461a      	mov	r2, r3
 8003b4a:	2320      	movs	r3, #32
 8003b4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d009      	beq.n	8003b6c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b64:	461a      	mov	r2, r3
 8003b66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b6a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	3301      	adds	r3, #1
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b74:	085b      	lsrs	r3, r3, #1
 8003b76:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d199      	bne.n	8003ab2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f004 fdb7 	bl	80086f6 <USB_ReadInterrupts>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b92:	f040 80c0 	bne.w	8003d16 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f004 fdd8 	bl	8008750 <USB_ReadDevAllInEpInterrupt>
 8003ba0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003ba6:	e0b2      	b.n	8003d0e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 80a7 	beq.w	8003d02 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f004 fdfe 	bl	80087c0 <USB_ReadDevInEPInterrupt>
 8003bc4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d057      	beq.n	8003c80 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	43db      	mvns	r3, r3
 8003bea:	69f9      	ldr	r1, [r7, #28]
 8003bec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c00:	461a      	mov	r2, r3
 8003c02:	2301      	movs	r3, #1
 8003c04:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d132      	bne.n	8003c74 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c12:	4613      	mov	r3, r2
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	1a9b      	subs	r3, r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	3348      	adds	r3, #72	; 0x48
 8003c1e:	6819      	ldr	r1, [r3, #0]
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c24:	4613      	mov	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4403      	add	r3, r0
 8003c2e:	3344      	adds	r3, #68	; 0x44
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4419      	add	r1, r3
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c38:	4613      	mov	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4403      	add	r3, r0
 8003c42:	3348      	adds	r3, #72	; 0x48
 8003c44:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d113      	bne.n	8003c74 <HAL_PCD_IRQHandler+0x31c>
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c50:	4613      	mov	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	1a9b      	subs	r3, r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	3350      	adds	r3, #80	; 0x50
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d108      	bne.n	8003c74 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	2101      	movs	r1, #1
 8003c70:	f004 fe06 	bl	8008880 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	4619      	mov	r1, r3
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f009 f987 	bl	800cf8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d008      	beq.n	8003c9c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c96:	461a      	mov	r2, r3
 8003c98:	2308      	movs	r3, #8
 8003c9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f003 0310 	and.w	r3, r3, #16
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d008      	beq.n	8003cb8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	2310      	movs	r3, #16
 8003cb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d008      	beq.n	8003cd4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cce:	461a      	mov	r2, r3
 8003cd0:	2340      	movs	r3, #64	; 0x40
 8003cd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d008      	beq.n	8003cf0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cea:	461a      	mov	r2, r3
 8003cec:	2302      	movs	r3, #2
 8003cee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003cfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 fc30 	bl	8004562 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	3301      	adds	r3, #1
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0a:	085b      	lsrs	r3, r3, #1
 8003d0c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f47f af49 	bne.w	8003ba8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f004 fceb 	bl	80086f6 <USB_ReadInterrupts>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d2a:	d122      	bne.n	8003d72 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	69fa      	ldr	r2, [r7, #28]
 8003d36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d3a:	f023 0301 	bic.w	r3, r3, #1
 8003d3e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d108      	bne.n	8003d5c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d52:	2100      	movs	r1, #0
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f009 fb57 	bl	800d408 <HAL_PCDEx_LPM_Callback>
 8003d5a:	e002      	b.n	8003d62 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f009 f98d 	bl	800d07c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695a      	ldr	r2, [r3, #20]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003d70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f004 fcbd 	bl	80086f6 <USB_ReadInterrupts>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d86:	d112      	bne.n	8003dae <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d102      	bne.n	8003d9e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f009 f949 	bl	800d030 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	695a      	ldr	r2, [r3, #20]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003dac:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f004 fc9f 	bl	80086f6 <USB_ReadInterrupts>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dc2:	d121      	bne.n	8003e08 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695a      	ldr	r2, [r3, #20]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003dd2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d111      	bne.n	8003e02 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dec:	089b      	lsrs	r3, r3, #2
 8003dee:	f003 020f 	and.w	r2, r3, #15
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003df8:	2101      	movs	r1, #1
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f009 fb04 	bl	800d408 <HAL_PCDEx_LPM_Callback>
 8003e00:	e002      	b.n	8003e08 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f009 f914 	bl	800d030 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f004 fc72 	bl	80086f6 <USB_ReadInterrupts>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1c:	f040 80c7 	bne.w	8003fae <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	69fa      	ldr	r2, [r7, #28]
 8003e2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e2e:	f023 0301 	bic.w	r3, r3, #1
 8003e32:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2110      	movs	r1, #16
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f003 fd40 	bl	80078c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e40:	2300      	movs	r3, #0
 8003e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e44:	e056      	b.n	8003ef4 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e48:	015a      	lsls	r2, r3, #5
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e52:	461a      	mov	r2, r3
 8003e54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e58:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5c:	015a      	lsls	r2, r3, #5
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	4413      	add	r3, r2
 8003e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e6a:	0151      	lsls	r1, r2, #5
 8003e6c:	69fa      	ldr	r2, [r7, #28]
 8003e6e:	440a      	add	r2, r1
 8003e70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e78:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7c:	015a      	lsls	r2, r3, #5
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	4413      	add	r3, r2
 8003e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e8a:	0151      	lsls	r1, r2, #5
 8003e8c:	69fa      	ldr	r2, [r7, #28]
 8003e8e:	440a      	add	r2, r1
 8003e90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e98:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003eac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ebe:	0151      	lsls	r1, r2, #5
 8003ec0:	69fa      	ldr	r2, [r7, #28]
 8003ec2:	440a      	add	r2, r1
 8003ec4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ec8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ecc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed0:	015a      	lsls	r2, r3, #5
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ede:	0151      	lsls	r1, r2, #5
 8003ee0:	69fa      	ldr	r2, [r7, #28]
 8003ee2:	440a      	add	r2, r1
 8003ee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ee8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003eec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d3a3      	bcc.n	8003e46 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	69fa      	ldr	r2, [r7, #28]
 8003f08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f0c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003f10:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d016      	beq.n	8003f48 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f24:	69fa      	ldr	r2, [r7, #28]
 8003f26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f2a:	f043 030b 	orr.w	r3, r3, #11
 8003f2e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3a:	69fa      	ldr	r2, [r7, #28]
 8003f3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f40:	f043 030b 	orr.w	r3, r3, #11
 8003f44:	6453      	str	r3, [r2, #68]	; 0x44
 8003f46:	e015      	b.n	8003f74 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	69fa      	ldr	r2, [r7, #28]
 8003f52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f5a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003f5e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	69fa      	ldr	r2, [r7, #28]
 8003f6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f6e:	f043 030b 	orr.w	r3, r3, #11
 8003f72:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69fa      	ldr	r2, [r7, #28]
 8003f7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f82:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003f86:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f98:	461a      	mov	r2, r3
 8003f9a:	f004 fc71 	bl	8008880 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695a      	ldr	r2, [r3, #20]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003fac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f004 fb9f 	bl	80086f6 <USB_ReadInterrupts>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc2:	d124      	bne.n	800400e <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f004 fc35 	bl	8008838 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f003 fcd5 	bl	8007982 <USB_GetDevSpeed>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	461a      	mov	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681c      	ldr	r4, [r3, #0]
 8003fe4:	f000 fdfe 	bl	8004be4 <HAL_RCC_GetHCLKFreq>
 8003fe8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	f003 fa18 	bl	8007428 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f008 fff0 	bl	800cfde <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695a      	ldr	r2, [r3, #20]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800400c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4618      	mov	r0, r3
 8004014:	f004 fb6f 	bl	80086f6 <USB_ReadInterrupts>
 8004018:	4603      	mov	r3, r0
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b08      	cmp	r3, #8
 8004020:	d10a      	bne.n	8004038 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f008 ffcd 	bl	800cfc2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695a      	ldr	r2, [r3, #20]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f002 0208 	and.w	r2, r2, #8
 8004036:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f004 fb5a 	bl	80086f6 <USB_ReadInterrupts>
 8004042:	4603      	mov	r3, r0
 8004044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004048:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800404c:	d10f      	bne.n	800406e <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800404e:	2300      	movs	r3, #0
 8004050:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	b2db      	uxtb	r3, r3
 8004056:	4619      	mov	r1, r3
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f009 f82f 	bl	800d0bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695a      	ldr	r2, [r3, #20]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800406c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f004 fb3f 	bl	80086f6 <USB_ReadInterrupts>
 8004078:	4603      	mov	r3, r0
 800407a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800407e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004082:	d10f      	bne.n	80040a4 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	b2db      	uxtb	r3, r3
 800408c:	4619      	mov	r1, r3
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f009 f802 	bl	800d098 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80040a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f004 fb24 	bl	80086f6 <USB_ReadInterrupts>
 80040ae:	4603      	mov	r3, r0
 80040b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80040b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b8:	d10a      	bne.n	80040d0 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f009 f810 	bl	800d0e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695a      	ldr	r2, [r3, #20]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80040ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f004 fb0e 	bl	80086f6 <USB_ReadInterrupts>
 80040da:	4603      	mov	r3, r0
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d115      	bne.n	8004110 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f009 f800 	bl	800d0fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6859      	ldr	r1, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	430a      	orrs	r2, r1
 800410a:	605a      	str	r2, [r3, #4]
 800410c:	e000      	b.n	8004110 <HAL_PCD_IRQHandler+0x7b8>
      return;
 800410e:	bf00      	nop
    }
  }
}
 8004110:	3734      	adds	r7, #52	; 0x34
 8004112:	46bd      	mov	sp, r7
 8004114:	bd90      	pop	{r4, r7, pc}

08004116 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	460b      	mov	r3, r1
 8004120:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_PCD_SetAddress+0x1a>
 800412c:	2302      	movs	r3, #2
 800412e:	e013      	b.n	8004158 <HAL_PCD_SetAddress+0x42>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	78fa      	ldrb	r2, [r7, #3]
 800413c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	78fa      	ldrb	r2, [r7, #3]
 8004146:	4611      	mov	r1, r2
 8004148:	4618      	mov	r0, r3
 800414a:	f004 fa6c 	bl	8008626 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	4608      	mov	r0, r1
 800416a:	4611      	mov	r1, r2
 800416c:	461a      	mov	r2, r3
 800416e:	4603      	mov	r3, r0
 8004170:	70fb      	strb	r3, [r7, #3]
 8004172:	460b      	mov	r3, r1
 8004174:	803b      	strh	r3, [r7, #0]
 8004176:	4613      	mov	r3, r2
 8004178:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800417e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004182:	2b00      	cmp	r3, #0
 8004184:	da0f      	bge.n	80041a6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004186:	78fb      	ldrb	r3, [r7, #3]
 8004188:	f003 020f 	and.w	r2, r3, #15
 800418c:	4613      	mov	r3, r2
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	1a9b      	subs	r3, r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	3338      	adds	r3, #56	; 0x38
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	4413      	add	r3, r2
 800419a:	3304      	adds	r3, #4
 800419c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2201      	movs	r2, #1
 80041a2:	705a      	strb	r2, [r3, #1]
 80041a4:	e00f      	b.n	80041c6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041a6:	78fb      	ldrb	r3, [r7, #3]
 80041a8:	f003 020f 	and.w	r2, r3, #15
 80041ac:	4613      	mov	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	1a9b      	subs	r3, r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	4413      	add	r3, r2
 80041bc:	3304      	adds	r3, #4
 80041be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80041c6:	78fb      	ldrb	r3, [r7, #3]
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80041d2:	883a      	ldrh	r2, [r7, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	78ba      	ldrb	r2, [r7, #2]
 80041dc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	785b      	ldrb	r3, [r3, #1]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d004      	beq.n	80041f0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80041f0:	78bb      	ldrb	r3, [r7, #2]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d102      	bne.n	80041fc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004202:	2b01      	cmp	r3, #1
 8004204:	d101      	bne.n	800420a <HAL_PCD_EP_Open+0xaa>
 8004206:	2302      	movs	r3, #2
 8004208:	e00e      	b.n	8004228 <HAL_PCD_EP_Open+0xc8>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68f9      	ldr	r1, [r7, #12]
 8004218:	4618      	mov	r0, r3
 800421a:	f003 fbd7 	bl	80079cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004226:	7afb      	ldrb	r3, [r7, #11]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800423c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004240:	2b00      	cmp	r3, #0
 8004242:	da0f      	bge.n	8004264 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004244:	78fb      	ldrb	r3, [r7, #3]
 8004246:	f003 020f 	and.w	r2, r3, #15
 800424a:	4613      	mov	r3, r2
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	1a9b      	subs	r3, r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	3338      	adds	r3, #56	; 0x38
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	4413      	add	r3, r2
 8004258:	3304      	adds	r3, #4
 800425a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2201      	movs	r2, #1
 8004260:	705a      	strb	r2, [r3, #1]
 8004262:	e00f      	b.n	8004284 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	f003 020f 	and.w	r2, r3, #15
 800426a:	4613      	mov	r3, r2
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	1a9b      	subs	r3, r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	4413      	add	r3, r2
 800427a:	3304      	adds	r3, #4
 800427c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004284:	78fb      	ldrb	r3, [r7, #3]
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	b2da      	uxtb	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004296:	2b01      	cmp	r3, #1
 8004298:	d101      	bne.n	800429e <HAL_PCD_EP_Close+0x6e>
 800429a:	2302      	movs	r3, #2
 800429c:	e00e      	b.n	80042bc <HAL_PCD_EP_Close+0x8c>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68f9      	ldr	r1, [r7, #12]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f003 fc15 	bl	8007adc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	607a      	str	r2, [r7, #4]
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	460b      	mov	r3, r1
 80042d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042d4:	7afb      	ldrb	r3, [r7, #11]
 80042d6:	f003 020f 	and.w	r2, r3, #15
 80042da:	4613      	mov	r3, r2
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	1a9b      	subs	r3, r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4413      	add	r3, r2
 80042ea:	3304      	adds	r3, #4
 80042ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2200      	movs	r2, #0
 80042fe:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	2200      	movs	r2, #0
 8004304:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004306:	7afb      	ldrb	r3, [r7, #11]
 8004308:	f003 030f 	and.w	r3, r3, #15
 800430c:	b2da      	uxtb	r2, r3
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d102      	bne.n	8004320 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004320:	7afb      	ldrb	r3, [r7, #11]
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	2b00      	cmp	r3, #0
 8004328:	d109      	bne.n	800433e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6818      	ldr	r0, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	b2db      	uxtb	r3, r3
 8004334:	461a      	mov	r2, r3
 8004336:	6979      	ldr	r1, [r7, #20]
 8004338:	f003 fef0 	bl	800811c <USB_EP0StartXfer>
 800433c:	e008      	b.n	8004350 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	b2db      	uxtb	r3, r3
 8004348:	461a      	mov	r2, r3
 800434a:	6979      	ldr	r1, [r7, #20]
 800434c:	f003 fca2 	bl	8007c94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b086      	sub	sp, #24
 800435e:	af00      	add	r7, sp, #0
 8004360:	60f8      	str	r0, [r7, #12]
 8004362:	607a      	str	r2, [r7, #4]
 8004364:	603b      	str	r3, [r7, #0]
 8004366:	460b      	mov	r3, r1
 8004368:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800436a:	7afb      	ldrb	r3, [r7, #11]
 800436c:	f003 020f 	and.w	r2, r3, #15
 8004370:	4613      	mov	r3, r2
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	1a9b      	subs	r3, r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	3338      	adds	r3, #56	; 0x38
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	4413      	add	r3, r2
 800437e:	3304      	adds	r3, #4
 8004380:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2200      	movs	r2, #0
 8004392:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	2201      	movs	r2, #1
 8004398:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800439a:	7afb      	ldrb	r3, [r7, #11]
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d102      	bne.n	80043b4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043b4:	7afb      	ldrb	r3, [r7, #11]
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d109      	bne.n	80043d2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	461a      	mov	r2, r3
 80043ca:	6979      	ldr	r1, [r7, #20]
 80043cc:	f003 fea6 	bl	800811c <USB_EP0StartXfer>
 80043d0:	e008      	b.n	80043e4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	461a      	mov	r2, r3
 80043de:	6979      	ldr	r1, [r7, #20]
 80043e0:	f003 fc58 	bl	8007c94 <USB_EPStartXfer>
  }

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	460b      	mov	r3, r1
 80043f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80043fa:	78fb      	ldrb	r3, [r7, #3]
 80043fc:	f003 020f 	and.w	r2, r3, #15
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	429a      	cmp	r2, r3
 8004406:	d901      	bls.n	800440c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e050      	b.n	80044ae <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800440c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004410:	2b00      	cmp	r3, #0
 8004412:	da0f      	bge.n	8004434 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	f003 020f 	and.w	r2, r3, #15
 800441a:	4613      	mov	r3, r2
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	1a9b      	subs	r3, r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	3338      	adds	r3, #56	; 0x38
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	4413      	add	r3, r2
 8004428:	3304      	adds	r3, #4
 800442a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2201      	movs	r2, #1
 8004430:	705a      	strb	r2, [r3, #1]
 8004432:	e00d      	b.n	8004450 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004434:	78fa      	ldrb	r2, [r7, #3]
 8004436:	4613      	mov	r3, r2
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	1a9b      	subs	r3, r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	4413      	add	r3, r2
 8004446:	3304      	adds	r3, #4
 8004448:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2201      	movs	r2, #1
 8004454:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004456:	78fb      	ldrb	r3, [r7, #3]
 8004458:	f003 030f 	and.w	r3, r3, #15
 800445c:	b2da      	uxtb	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004468:	2b01      	cmp	r3, #1
 800446a:	d101      	bne.n	8004470 <HAL_PCD_EP_SetStall+0x82>
 800446c:	2302      	movs	r3, #2
 800446e:	e01e      	b.n	80044ae <HAL_PCD_EP_SetStall+0xc0>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68f9      	ldr	r1, [r7, #12]
 800447e:	4618      	mov	r0, r3
 8004480:	f003 fffd 	bl	800847e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004484:	78fb      	ldrb	r3, [r7, #3]
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10a      	bne.n	80044a4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	b2d9      	uxtb	r1, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800449e:	461a      	mov	r2, r3
 80044a0:	f004 f9ee 	bl	8008880 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b084      	sub	sp, #16
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	460b      	mov	r3, r1
 80044c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80044c2:	78fb      	ldrb	r3, [r7, #3]
 80044c4:	f003 020f 	and.w	r2, r3, #15
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d901      	bls.n	80044d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e042      	b.n	800455a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	da0f      	bge.n	80044fc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044dc:	78fb      	ldrb	r3, [r7, #3]
 80044de:	f003 020f 	and.w	r2, r3, #15
 80044e2:	4613      	mov	r3, r2
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	1a9b      	subs	r3, r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	3338      	adds	r3, #56	; 0x38
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	4413      	add	r3, r2
 80044f0:	3304      	adds	r3, #4
 80044f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2201      	movs	r2, #1
 80044f8:	705a      	strb	r2, [r3, #1]
 80044fa:	e00f      	b.n	800451c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044fc:	78fb      	ldrb	r3, [r7, #3]
 80044fe:	f003 020f 	and.w	r2, r3, #15
 8004502:	4613      	mov	r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	1a9b      	subs	r3, r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	4413      	add	r3, r2
 8004512:	3304      	adds	r3, #4
 8004514:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004522:	78fb      	ldrb	r3, [r7, #3]
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	b2da      	uxtb	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004534:	2b01      	cmp	r3, #1
 8004536:	d101      	bne.n	800453c <HAL_PCD_EP_ClrStall+0x86>
 8004538:	2302      	movs	r3, #2
 800453a:	e00e      	b.n	800455a <HAL_PCD_EP_ClrStall+0xa4>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68f9      	ldr	r1, [r7, #12]
 800454a:	4618      	mov	r0, r3
 800454c:	f004 f805 	bl	800855a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b08a      	sub	sp, #40	; 0x28
 8004566:	af02      	add	r7, sp, #8
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	4613      	mov	r3, r2
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	1a9b      	subs	r3, r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	3338      	adds	r3, #56	; 0x38
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	4413      	add	r3, r2
 8004586:	3304      	adds	r3, #4
 8004588:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	699a      	ldr	r2, [r3, #24]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	429a      	cmp	r2, r3
 8004594:	d901      	bls.n	800459a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e06c      	b.n	8004674 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	695a      	ldr	r2, [r3, #20]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d902      	bls.n	80045b6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	3303      	adds	r3, #3
 80045ba:	089b      	lsrs	r3, r3, #2
 80045bc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045be:	e02b      	b.n	8004618 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	695a      	ldr	r2, [r3, #20]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	69fa      	ldr	r2, [r7, #28]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d902      	bls.n	80045dc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	3303      	adds	r3, #3
 80045e0:	089b      	lsrs	r3, r3, #2
 80045e2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	68d9      	ldr	r1, [r3, #12]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	4603      	mov	r3, r0
 80045fa:	6978      	ldr	r0, [r7, #20]
 80045fc:	f003 fee1 	bl	80083c2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	68da      	ldr	r2, [r3, #12]
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	441a      	add	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	699a      	ldr	r2, [r3, #24]
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	441a      	add	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	4413      	add	r3, r2
 8004620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	b29b      	uxth	r3, r3
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	429a      	cmp	r2, r3
 800462c:	d809      	bhi.n	8004642 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	699a      	ldr	r2, [r3, #24]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004636:	429a      	cmp	r2, r3
 8004638:	d203      	bcs.n	8004642 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1be      	bne.n	80045c0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	695a      	ldr	r2, [r3, #20]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	429a      	cmp	r2, r3
 800464c:	d811      	bhi.n	8004672 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	f003 030f 	and.w	r3, r3, #15
 8004654:	2201      	movs	r2, #1
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004662:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	43db      	mvns	r3, r3
 8004668:	6939      	ldr	r1, [r7, #16]
 800466a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800466e:	4013      	ands	r3, r2
 8004670:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3720      	adds	r7, #32
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	333c      	adds	r3, #60	; 0x3c
 8004694:	3304      	adds	r3, #4
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	f040 80a0 	bne.w	80047f4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d015      	beq.n	80046ea <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4a72      	ldr	r2, [pc, #456]	; (800488c <PCD_EP_OutXfrComplete_int+0x210>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	f240 80dd 	bls.w	8004882 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 80d7 	beq.w	8004882 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e0:	461a      	mov	r2, r3
 80046e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046e6:	6093      	str	r3, [r2, #8]
 80046e8:	e0cb      	b.n	8004882 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	f003 0320 	and.w	r3, r3, #32
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d009      	beq.n	8004708 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004700:	461a      	mov	r2, r3
 8004702:	2320      	movs	r3, #32
 8004704:	6093      	str	r3, [r2, #8]
 8004706:	e0bc      	b.n	8004882 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800470e:	2b00      	cmp	r3, #0
 8004710:	f040 80b7 	bne.w	8004882 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4a5d      	ldr	r2, [pc, #372]	; (800488c <PCD_EP_OutXfrComplete_int+0x210>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d90f      	bls.n	800473c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	4413      	add	r3, r2
 800472e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004732:	461a      	mov	r2, r3
 8004734:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004738:	6093      	str	r3, [r2, #8]
 800473a:	e0a2      	b.n	8004882 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800473c:	6879      	ldr	r1, [r7, #4]
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	4613      	mov	r3, r2
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	1a9b      	subs	r3, r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	440b      	add	r3, r1
 800474a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800474e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	0159      	lsls	r1, r3, #5
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	440b      	add	r3, r1
 8004758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004762:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	4613      	mov	r3, r2
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4403      	add	r3, r0
 8004772:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004776:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	4613      	mov	r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	1a9b      	subs	r3, r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800478a:	6819      	ldr	r1, [r3, #0]
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	4613      	mov	r3, r2
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	1a9b      	subs	r3, r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4403      	add	r3, r0
 800479a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4419      	add	r1, r3
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	4613      	mov	r3, r2
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	1a9b      	subs	r3, r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4403      	add	r3, r0
 80047b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80047b4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d114      	bne.n	80047e6 <PCD_EP_OutXfrComplete_int+0x16a>
 80047bc:	6879      	ldr	r1, [r7, #4]
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	4613      	mov	r3, r2
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	1a9b      	subs	r3, r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	440b      	add	r3, r1
 80047ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d108      	bne.n	80047e6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6818      	ldr	r0, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80047de:	461a      	mov	r2, r3
 80047e0:	2101      	movs	r1, #1
 80047e2:	f004 f84d 	bl	8008880 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	4619      	mov	r1, r3
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f008 fbb3 	bl	800cf58 <HAL_PCD_DataOutStageCallback>
 80047f2:	e046      	b.n	8004882 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4a26      	ldr	r2, [pc, #152]	; (8004890 <PCD_EP_OutXfrComplete_int+0x214>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d124      	bne.n	8004846 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004812:	461a      	mov	r2, r3
 8004814:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004818:	6093      	str	r3, [r2, #8]
 800481a:	e032      	b.n	8004882 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f003 0320 	and.w	r3, r3, #32
 8004822:	2b00      	cmp	r3, #0
 8004824:	d008      	beq.n	8004838 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	4413      	add	r3, r2
 800482e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004832:	461a      	mov	r2, r3
 8004834:	2320      	movs	r3, #32
 8004836:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	b2db      	uxtb	r3, r3
 800483c:	4619      	mov	r1, r3
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f008 fb8a 	bl	800cf58 <HAL_PCD_DataOutStageCallback>
 8004844:	e01d      	b.n	8004882 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d114      	bne.n	8004876 <PCD_EP_OutXfrComplete_int+0x1fa>
 800484c:	6879      	ldr	r1, [r7, #4]
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	4613      	mov	r3, r2
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	1a9b      	subs	r3, r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d108      	bne.n	8004876 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6818      	ldr	r0, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800486e:	461a      	mov	r2, r3
 8004870:	2100      	movs	r1, #0
 8004872:	f004 f805 	bl	8008880 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	b2db      	uxtb	r3, r3
 800487a:	4619      	mov	r1, r3
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f008 fb6b 	bl	800cf58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	4f54300a 	.word	0x4f54300a
 8004890:	4f54310a 	.word	0x4f54310a

08004894 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	333c      	adds	r3, #60	; 0x3c
 80048ac:	3304      	adds	r3, #4
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4a15      	ldr	r2, [pc, #84]	; (800491c <PCD_EP_OutSetupPacket_int+0x88>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d90e      	bls.n	80048e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d009      	beq.n	80048e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e0:	461a      	mov	r2, r3
 80048e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f008 fb23 	bl	800cf34 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4a0a      	ldr	r2, [pc, #40]	; (800491c <PCD_EP_OutSetupPacket_int+0x88>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d90c      	bls.n	8004910 <PCD_EP_OutSetupPacket_int+0x7c>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d108      	bne.n	8004910 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004908:	461a      	mov	r2, r3
 800490a:	2101      	movs	r1, #1
 800490c:	f003 ffb8 	bl	8008880 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	4f54300a 	.word	0x4f54300a

08004920 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	460b      	mov	r3, r1
 800492a:	70fb      	strb	r3, [r7, #3]
 800492c:	4613      	mov	r3, r2
 800492e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004938:	78fb      	ldrb	r3, [r7, #3]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d107      	bne.n	800494e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800493e:	883b      	ldrh	r3, [r7, #0]
 8004940:	0419      	lsls	r1, r3, #16
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	430a      	orrs	r2, r1
 800494a:	629a      	str	r2, [r3, #40]	; 0x28
 800494c:	e028      	b.n	80049a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004954:	0c1b      	lsrs	r3, r3, #16
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	4413      	add	r3, r2
 800495a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800495c:	2300      	movs	r3, #0
 800495e:	73fb      	strb	r3, [r7, #15]
 8004960:	e00d      	b.n	800497e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	7bfb      	ldrb	r3, [r7, #15]
 8004968:	3340      	adds	r3, #64	; 0x40
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	0c1b      	lsrs	r3, r3, #16
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	4413      	add	r3, r2
 8004976:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004978:	7bfb      	ldrb	r3, [r7, #15]
 800497a:	3301      	adds	r3, #1
 800497c:	73fb      	strb	r3, [r7, #15]
 800497e:	7bfa      	ldrb	r2, [r7, #15]
 8004980:	78fb      	ldrb	r3, [r7, #3]
 8004982:	3b01      	subs	r3, #1
 8004984:	429a      	cmp	r2, r3
 8004986:	d3ec      	bcc.n	8004962 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004988:	883b      	ldrh	r3, [r7, #0]
 800498a:	0418      	lsls	r0, r3, #16
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6819      	ldr	r1, [r3, #0]
 8004990:	78fb      	ldrb	r3, [r7, #3]
 8004992:	3b01      	subs	r3, #1
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	4302      	orrs	r2, r0
 8004998:	3340      	adds	r3, #64	; 0x40
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	440b      	add	r3, r1
 800499e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	460b      	mov	r3, r1
 80049b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	887a      	ldrh	r2, [r7, #2]
 80049c0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a02:	f043 0303 	orr.w	r3, r3, #3
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e0cc      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a2c:	4b68      	ldr	r3, [pc, #416]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 030f 	and.w	r3, r3, #15
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d90c      	bls.n	8004a54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3a:	4b65      	ldr	r3, [pc, #404]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a42:	4b63      	ldr	r3, [pc, #396]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d001      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e0b8      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d020      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d005      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a6c:	4b59      	ldr	r3, [pc, #356]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	4a58      	ldr	r2, [pc, #352]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0308 	and.w	r3, r3, #8
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d005      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a84:	4b53      	ldr	r3, [pc, #332]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	4a52      	ldr	r2, [pc, #328]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a90:	4b50      	ldr	r3, [pc, #320]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	494d      	ldr	r1, [pc, #308]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d044      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d107      	bne.n	8004ac6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab6:	4b47      	ldr	r3, [pc, #284]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d119      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e07f      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d003      	beq.n	8004ad6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	d107      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad6:	4b3f      	ldr	r3, [pc, #252]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d109      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e06f      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae6:	4b3b      	ldr	r3, [pc, #236]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e067      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004af6:	4b37      	ldr	r3, [pc, #220]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f023 0203 	bic.w	r2, r3, #3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	4934      	ldr	r1, [pc, #208]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b08:	f7fd fe9c 	bl	8002844 <HAL_GetTick>
 8004b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0e:	e00a      	b.n	8004b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b10:	f7fd fe98 	bl	8002844 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e04f      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b26:	4b2b      	ldr	r3, [pc, #172]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 020c 	and.w	r2, r3, #12
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d1eb      	bne.n	8004b10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b38:	4b25      	ldr	r3, [pc, #148]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 030f 	and.w	r3, r3, #15
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d20c      	bcs.n	8004b60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b46:	4b22      	ldr	r3, [pc, #136]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4e:	4b20      	ldr	r3, [pc, #128]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 030f 	and.w	r3, r3, #15
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d001      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e032      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d008      	beq.n	8004b7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b6c:	4b19      	ldr	r3, [pc, #100]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	4916      	ldr	r1, [pc, #88]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d009      	beq.n	8004b9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b8a:	4b12      	ldr	r3, [pc, #72]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	490e      	ldr	r1, [pc, #56]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b9e:	f000 fbb1 	bl	8005304 <HAL_RCC_GetSysClockFreq>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	091b      	lsrs	r3, r3, #4
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	490a      	ldr	r1, [pc, #40]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004bb0:	5ccb      	ldrb	r3, [r1, r3]
 8004bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb6:	4a09      	ldr	r2, [pc, #36]	; (8004bdc <HAL_RCC_ClockConfig+0x1c4>)
 8004bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bba:	4b09      	ldr	r3, [pc, #36]	; (8004be0 <HAL_RCC_ClockConfig+0x1c8>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fd fb76 	bl	80022b0 <HAL_InitTick>

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40023c00 	.word	0x40023c00
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	08013c2c 	.word	0x08013c2c
 8004bdc:	20000004 	.word	0x20000004
 8004be0:	20000010 	.word	0x20000010

08004be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004be8:	4b03      	ldr	r3, [pc, #12]	; (8004bf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bea:	681b      	ldr	r3, [r3, #0]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	20000004 	.word	0x20000004

08004bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c00:	f7ff fff0 	bl	8004be4 <HAL_RCC_GetHCLKFreq>
 8004c04:	4602      	mov	r2, r0
 8004c06:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	0a9b      	lsrs	r3, r3, #10
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	4903      	ldr	r1, [pc, #12]	; (8004c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c12:	5ccb      	ldrb	r3, [r1, r3]
 8004c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	40023800 	.word	0x40023800
 8004c20:	08013c3c 	.word	0x08013c3c

08004c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c28:	f7ff ffdc 	bl	8004be4 <HAL_RCC_GetHCLKFreq>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	0b5b      	lsrs	r3, r3, #13
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	4903      	ldr	r1, [pc, #12]	; (8004c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c3a:	5ccb      	ldrb	r3, [r1, r3]
 8004c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40023800 	.word	0x40023800
 8004c48:	08013c3c 	.word	0x08013c3c

08004c4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	220f      	movs	r2, #15
 8004c5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c5c:	4b12      	ldr	r3, [pc, #72]	; (8004ca8 <HAL_RCC_GetClockConfig+0x5c>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f003 0203 	and.w	r2, r3, #3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c68:	4b0f      	ldr	r3, [pc, #60]	; (8004ca8 <HAL_RCC_GetClockConfig+0x5c>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c74:	4b0c      	ldr	r3, [pc, #48]	; (8004ca8 <HAL_RCC_GetClockConfig+0x5c>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004c80:	4b09      	ldr	r3, [pc, #36]	; (8004ca8 <HAL_RCC_GetClockConfig+0x5c>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	08db      	lsrs	r3, r3, #3
 8004c86:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c8e:	4b07      	ldr	r3, [pc, #28]	; (8004cac <HAL_RCC_GetClockConfig+0x60>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 020f 	and.w	r2, r3, #15
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	601a      	str	r2, [r3, #0]
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	40023c00 	.word	0x40023c00

08004cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08c      	sub	sp, #48	; 0x30
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d010      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004ce8:	4b6f      	ldr	r3, [pc, #444]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cee:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf6:	496c      	ldr	r1, [pc, #432]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004d06:	2301      	movs	r3, #1
 8004d08:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d010      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004d16:	4b64      	ldr	r3, [pc, #400]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d1c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d24:	4960      	ldr	r1, [pc, #384]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004d34:	2301      	movs	r3, #1
 8004d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d017      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d44:	4b58      	ldr	r3, [pc, #352]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d52:	4955      	ldr	r1, [pc, #340]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d62:	d101      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004d64:	2301      	movs	r3, #1
 8004d66:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004d70:	2301      	movs	r3, #1
 8004d72:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0308 	and.w	r3, r3, #8
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d017      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d80:	4b49      	ldr	r3, [pc, #292]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8e:	4946      	ldr	r1, [pc, #280]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d9e:	d101      	bne.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004da0:	2301      	movs	r3, #1
 8004da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004dac:	2301      	movs	r3, #1
 8004dae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 808a 	beq.w	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60bb      	str	r3, [r7, #8]
 8004dc2:	4b39      	ldr	r3, [pc, #228]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	4a38      	ldr	r2, [pc, #224]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8004dce:	4b36      	ldr	r3, [pc, #216]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd6:	60bb      	str	r3, [r7, #8]
 8004dd8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004dda:	4b34      	ldr	r3, [pc, #208]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a33      	ldr	r2, [pc, #204]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004de6:	f7fd fd2d 	bl	8002844 <HAL_GetTick>
 8004dea:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004dec:	e008      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004dee:	f7fd fd29 	bl	8002844 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e278      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e00:	4b2a      	ldr	r3, [pc, #168]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0f0      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e0c:	4b26      	ldr	r3, [pc, #152]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e14:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d02f      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e24:	6a3a      	ldr	r2, [r7, #32]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d028      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e2a:	4b1f      	ldr	r3, [pc, #124]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e32:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e34:	4b1e      	ldr	r3, [pc, #120]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004e36:	2201      	movs	r2, #1
 8004e38:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e3a:	4b1d      	ldr	r3, [pc, #116]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e40:	4a19      	ldr	r2, [pc, #100]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e46:	4b18      	ldr	r3, [pc, #96]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d114      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004e52:	f7fd fcf7 	bl	8002844 <HAL_GetTick>
 8004e56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e58:	e00a      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e5a:	f7fd fcf3 	bl	8002844 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e240      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e70:	4b0d      	ldr	r3, [pc, #52]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0ee      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e88:	d114      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004e8a:	4b07      	ldr	r3, [pc, #28]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e9e:	4902      	ldr	r1, [pc, #8]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	608b      	str	r3, [r1, #8]
 8004ea4:	e00c      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004ea6:	bf00      	nop
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	40007000 	.word	0x40007000
 8004eb0:	42470e40 	.word	0x42470e40
 8004eb4:	4b4a      	ldr	r3, [pc, #296]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	4a49      	ldr	r2, [pc, #292]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004eba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ebe:	6093      	str	r3, [r2, #8]
 8004ec0:	4b47      	ldr	r3, [pc, #284]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ec2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ecc:	4944      	ldr	r1, [pc, #272]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0310 	and.w	r3, r3, #16
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d004      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004ee4:	4b3f      	ldr	r3, [pc, #252]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004ee6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004ef4:	4b3a      	ldr	r3, [pc, #232]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004efa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f02:	4937      	ldr	r1, [pc, #220]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f16:	4b32      	ldr	r3, [pc, #200]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f1c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f24:	492e      	ldr	r1, [pc, #184]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d011      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004f38:	4b29      	ldr	r3, [pc, #164]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f3e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f46:	4926      	ldr	r1, [pc, #152]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f56:	d101      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00a      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004f68:	4b1d      	ldr	r3, [pc, #116]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f6e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f76:	491a      	ldr	r1, [pc, #104]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d011      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004f8a:	4b15      	ldr	r3, [pc, #84]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f90:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f98:	4911      	ldr	r1, [pc, #68]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fa8:	d101      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004faa:	2301      	movs	r3, #1
 8004fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d005      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fbc:	f040 80ff 	bne.w	80051be <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fc0:	4b09      	ldr	r3, [pc, #36]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fc6:	f7fd fc3d 	bl	8002844 <HAL_GetTick>
 8004fca:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fcc:	e00e      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fce:	f7fd fc39 	bl	8002844 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d907      	bls.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e188      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004fe0:	40023800 	.word	0x40023800
 8004fe4:	424711e0 	.word	0x424711e0
 8004fe8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fec:	4b7e      	ldr	r3, [pc, #504]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1ea      	bne.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005008:	2b00      	cmp	r3, #0
 800500a:	d009      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005014:	2b00      	cmp	r3, #0
 8005016:	d028      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d124      	bne.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005020:	4b71      	ldr	r3, [pc, #452]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005026:	0c1b      	lsrs	r3, r3, #16
 8005028:	f003 0303 	and.w	r3, r3, #3
 800502c:	3301      	adds	r3, #1
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005032:	4b6d      	ldr	r3, [pc, #436]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005038:	0e1b      	lsrs	r3, r3, #24
 800503a:	f003 030f 	and.w	r3, r3, #15
 800503e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	019b      	lsls	r3, r3, #6
 800504a:	431a      	orrs	r2, r3
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	085b      	lsrs	r3, r3, #1
 8005050:	3b01      	subs	r3, #1
 8005052:	041b      	lsls	r3, r3, #16
 8005054:	431a      	orrs	r2, r3
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	061b      	lsls	r3, r3, #24
 800505a:	431a      	orrs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	071b      	lsls	r3, r3, #28
 8005062:	4961      	ldr	r1, [pc, #388]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005064:	4313      	orrs	r3, r2
 8005066:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0304 	and.w	r3, r3, #4
 8005072:	2b00      	cmp	r3, #0
 8005074:	d004      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800507e:	d00a      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005088:	2b00      	cmp	r3, #0
 800508a:	d035      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005090:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005094:	d130      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005096:	4b54      	ldr	r3, [pc, #336]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800509c:	0c1b      	lsrs	r3, r3, #16
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	3301      	adds	r3, #1
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050a8:	4b4f      	ldr	r3, [pc, #316]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050ae:	0f1b      	lsrs	r3, r3, #28
 80050b0:	f003 0307 	and.w	r3, r3, #7
 80050b4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	019b      	lsls	r3, r3, #6
 80050c0:	431a      	orrs	r2, r3
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	085b      	lsrs	r3, r3, #1
 80050c6:	3b01      	subs	r3, #1
 80050c8:	041b      	lsls	r3, r3, #16
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	061b      	lsls	r3, r3, #24
 80050d2:	431a      	orrs	r2, r3
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	071b      	lsls	r3, r3, #28
 80050d8:	4943      	ldr	r1, [pc, #268]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80050e0:	4b41      	ldr	r3, [pc, #260]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050e6:	f023 021f 	bic.w	r2, r3, #31
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ee:	3b01      	subs	r3, #1
 80050f0:	493d      	ldr	r1, [pc, #244]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005100:	2b00      	cmp	r3, #0
 8005102:	d029      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800510c:	d124      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800510e:	4b36      	ldr	r3, [pc, #216]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005114:	0c1b      	lsrs	r3, r3, #16
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	3301      	adds	r3, #1
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005120:	4b31      	ldr	r3, [pc, #196]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005126:	0f1b      	lsrs	r3, r3, #28
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	019b      	lsls	r3, r3, #6
 8005138:	431a      	orrs	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	085b      	lsrs	r3, r3, #1
 8005140:	3b01      	subs	r3, #1
 8005142:	041b      	lsls	r3, r3, #16
 8005144:	431a      	orrs	r2, r3
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	061b      	lsls	r3, r3, #24
 800514a:	431a      	orrs	r2, r3
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	071b      	lsls	r3, r3, #28
 8005150:	4925      	ldr	r1, [pc, #148]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005152:	4313      	orrs	r3, r2
 8005154:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005160:	2b00      	cmp	r3, #0
 8005162:	d016      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	019b      	lsls	r3, r3, #6
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	085b      	lsrs	r3, r3, #1
 8005176:	3b01      	subs	r3, #1
 8005178:	041b      	lsls	r3, r3, #16
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	061b      	lsls	r3, r3, #24
 8005182:	431a      	orrs	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	071b      	lsls	r3, r3, #28
 800518a:	4917      	ldr	r1, [pc, #92]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800518c:	4313      	orrs	r3, r2
 800518e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005192:	4b16      	ldr	r3, [pc, #88]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005194:	2201      	movs	r2, #1
 8005196:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005198:	f7fd fb54 	bl	8002844 <HAL_GetTick>
 800519c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800519e:	e008      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051a0:	f7fd fb50 	bl	8002844 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e09f      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051b2:	4b0d      	ldr	r3, [pc, #52]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0f0      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80051be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	f040 8095 	bne.w	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80051c6:	4b0a      	ldr	r3, [pc, #40]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051cc:	f7fd fb3a 	bl	8002844 <HAL_GetTick>
 80051d0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051d2:	e00f      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80051d4:	f7fd fb36 	bl	8002844 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d908      	bls.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e085      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80051e6:	bf00      	nop
 80051e8:	40023800 	.word	0x40023800
 80051ec:	42470068 	.word	0x42470068
 80051f0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051f4:	4b41      	ldr	r3, [pc, #260]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005200:	d0e8      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0304 	and.w	r3, r3, #4
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005212:	2b00      	cmp	r3, #0
 8005214:	d009      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800521e:	2b00      	cmp	r3, #0
 8005220:	d02b      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005226:	2b00      	cmp	r3, #0
 8005228:	d127      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800522a:	4b34      	ldr	r3, [pc, #208]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800522c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005230:	0c1b      	lsrs	r3, r3, #16
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	3301      	adds	r3, #1
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699a      	ldr	r2, [r3, #24]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	019b      	lsls	r3, r3, #6
 8005246:	431a      	orrs	r2, r3
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	085b      	lsrs	r3, r3, #1
 800524c:	3b01      	subs	r3, #1
 800524e:	041b      	lsls	r3, r3, #16
 8005250:	431a      	orrs	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	061b      	lsls	r3, r3, #24
 8005258:	4928      	ldr	r1, [pc, #160]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800525a:	4313      	orrs	r3, r2
 800525c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005260:	4b26      	ldr	r3, [pc, #152]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005262:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005266:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	3b01      	subs	r3, #1
 8005270:	021b      	lsls	r3, r3, #8
 8005272:	4922      	ldr	r1, [pc, #136]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005282:	2b00      	cmp	r3, #0
 8005284:	d01d      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800528e:	d118      	bne.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005290:	4b1a      	ldr	r3, [pc, #104]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005296:	0e1b      	lsrs	r3, r3, #24
 8005298:	f003 030f 	and.w	r3, r3, #15
 800529c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	699a      	ldr	r2, [r3, #24]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	019b      	lsls	r3, r3, #6
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	085b      	lsrs	r3, r3, #1
 80052b0:	3b01      	subs	r3, #1
 80052b2:	041b      	lsls	r3, r3, #16
 80052b4:	431a      	orrs	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	061b      	lsls	r3, r3, #24
 80052ba:	4910      	ldr	r1, [pc, #64]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80052c2:	4b0f      	ldr	r3, [pc, #60]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80052c4:	2201      	movs	r2, #1
 80052c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052c8:	f7fd fabc 	bl	8002844 <HAL_GetTick>
 80052cc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052ce:	e008      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80052d0:	f7fd fab8 	bl	8002844 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e007      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052e2:	4b06      	ldr	r3, [pc, #24]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ee:	d1ef      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3730      	adds	r7, #48	; 0x30
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40023800 	.word	0x40023800
 8005300:	42470070 	.word	0x42470070

08005304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005308:	b088      	sub	sp, #32
 800530a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800530c:	2300      	movs	r3, #0
 800530e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005320:	4bce      	ldr	r3, [pc, #824]	; (800565c <HAL_RCC_GetSysClockFreq+0x358>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f003 030c 	and.w	r3, r3, #12
 8005328:	2b0c      	cmp	r3, #12
 800532a:	f200 818d 	bhi.w	8005648 <HAL_RCC_GetSysClockFreq+0x344>
 800532e:	a201      	add	r2, pc, #4	; (adr r2, 8005334 <HAL_RCC_GetSysClockFreq+0x30>)
 8005330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005334:	08005369 	.word	0x08005369
 8005338:	08005649 	.word	0x08005649
 800533c:	08005649 	.word	0x08005649
 8005340:	08005649 	.word	0x08005649
 8005344:	0800536f 	.word	0x0800536f
 8005348:	08005649 	.word	0x08005649
 800534c:	08005649 	.word	0x08005649
 8005350:	08005649 	.word	0x08005649
 8005354:	08005375 	.word	0x08005375
 8005358:	08005649 	.word	0x08005649
 800535c:	08005649 	.word	0x08005649
 8005360:	08005649 	.word	0x08005649
 8005364:	080054e9 	.word	0x080054e9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005368:	4bbd      	ldr	r3, [pc, #756]	; (8005660 <HAL_RCC_GetSysClockFreq+0x35c>)
 800536a:	61bb      	str	r3, [r7, #24]
       break;
 800536c:	e16f      	b.n	800564e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800536e:	4bbd      	ldr	r3, [pc, #756]	; (8005664 <HAL_RCC_GetSysClockFreq+0x360>)
 8005370:	61bb      	str	r3, [r7, #24]
      break;
 8005372:	e16c      	b.n	800564e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005374:	4bb9      	ldr	r3, [pc, #740]	; (800565c <HAL_RCC_GetSysClockFreq+0x358>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800537c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800537e:	4bb7      	ldr	r3, [pc, #732]	; (800565c <HAL_RCC_GetSysClockFreq+0x358>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d053      	beq.n	8005432 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800538a:	4bb4      	ldr	r3, [pc, #720]	; (800565c <HAL_RCC_GetSysClockFreq+0x358>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	099b      	lsrs	r3, r3, #6
 8005390:	461a      	mov	r2, r3
 8005392:	f04f 0300 	mov.w	r3, #0
 8005396:	f240 10ff 	movw	r0, #511	; 0x1ff
 800539a:	f04f 0100 	mov.w	r1, #0
 800539e:	ea02 0400 	and.w	r4, r2, r0
 80053a2:	603c      	str	r4, [r7, #0]
 80053a4:	400b      	ands	r3, r1
 80053a6:	607b      	str	r3, [r7, #4]
 80053a8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053ac:	4620      	mov	r0, r4
 80053ae:	4629      	mov	r1, r5
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	014b      	lsls	r3, r1, #5
 80053ba:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80053be:	0142      	lsls	r2, r0, #5
 80053c0:	4610      	mov	r0, r2
 80053c2:	4619      	mov	r1, r3
 80053c4:	4623      	mov	r3, r4
 80053c6:	1ac0      	subs	r0, r0, r3
 80053c8:	462b      	mov	r3, r5
 80053ca:	eb61 0103 	sbc.w	r1, r1, r3
 80053ce:	f04f 0200 	mov.w	r2, #0
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	018b      	lsls	r3, r1, #6
 80053d8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80053dc:	0182      	lsls	r2, r0, #6
 80053de:	1a12      	subs	r2, r2, r0
 80053e0:	eb63 0301 	sbc.w	r3, r3, r1
 80053e4:	f04f 0000 	mov.w	r0, #0
 80053e8:	f04f 0100 	mov.w	r1, #0
 80053ec:	00d9      	lsls	r1, r3, #3
 80053ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053f2:	00d0      	lsls	r0, r2, #3
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	4621      	mov	r1, r4
 80053fa:	1852      	adds	r2, r2, r1
 80053fc:	4629      	mov	r1, r5
 80053fe:	eb43 0101 	adc.w	r1, r3, r1
 8005402:	460b      	mov	r3, r1
 8005404:	f04f 0000 	mov.w	r0, #0
 8005408:	f04f 0100 	mov.w	r1, #0
 800540c:	0259      	lsls	r1, r3, #9
 800540e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005412:	0250      	lsls	r0, r2, #9
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	4610      	mov	r0, r2
 800541a:	4619      	mov	r1, r3
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	461a      	mov	r2, r3
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	f7fa fefc 	bl	8000220 <__aeabi_uldivmod>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	4613      	mov	r3, r2
 800542e:	61fb      	str	r3, [r7, #28]
 8005430:	e04c      	b.n	80054cc <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005432:	4b8a      	ldr	r3, [pc, #552]	; (800565c <HAL_RCC_GetSysClockFreq+0x358>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	099b      	lsrs	r3, r3, #6
 8005438:	461a      	mov	r2, r3
 800543a:	f04f 0300 	mov.w	r3, #0
 800543e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005442:	f04f 0100 	mov.w	r1, #0
 8005446:	ea02 0a00 	and.w	sl, r2, r0
 800544a:	ea03 0b01 	and.w	fp, r3, r1
 800544e:	4650      	mov	r0, sl
 8005450:	4659      	mov	r1, fp
 8005452:	f04f 0200 	mov.w	r2, #0
 8005456:	f04f 0300 	mov.w	r3, #0
 800545a:	014b      	lsls	r3, r1, #5
 800545c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005460:	0142      	lsls	r2, r0, #5
 8005462:	4610      	mov	r0, r2
 8005464:	4619      	mov	r1, r3
 8005466:	ebb0 000a 	subs.w	r0, r0, sl
 800546a:	eb61 010b 	sbc.w	r1, r1, fp
 800546e:	f04f 0200 	mov.w	r2, #0
 8005472:	f04f 0300 	mov.w	r3, #0
 8005476:	018b      	lsls	r3, r1, #6
 8005478:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800547c:	0182      	lsls	r2, r0, #6
 800547e:	1a12      	subs	r2, r2, r0
 8005480:	eb63 0301 	sbc.w	r3, r3, r1
 8005484:	f04f 0000 	mov.w	r0, #0
 8005488:	f04f 0100 	mov.w	r1, #0
 800548c:	00d9      	lsls	r1, r3, #3
 800548e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005492:	00d0      	lsls	r0, r2, #3
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	eb12 020a 	adds.w	r2, r2, sl
 800549c:	eb43 030b 	adc.w	r3, r3, fp
 80054a0:	f04f 0000 	mov.w	r0, #0
 80054a4:	f04f 0100 	mov.w	r1, #0
 80054a8:	0299      	lsls	r1, r3, #10
 80054aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80054ae:	0290      	lsls	r0, r2, #10
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	4610      	mov	r0, r2
 80054b6:	4619      	mov	r1, r3
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	461a      	mov	r2, r3
 80054bc:	f04f 0300 	mov.w	r3, #0
 80054c0:	f7fa feae 	bl	8000220 <__aeabi_uldivmod>
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	4613      	mov	r3, r2
 80054ca:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054cc:	4b63      	ldr	r3, [pc, #396]	; (800565c <HAL_RCC_GetSysClockFreq+0x358>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	0c1b      	lsrs	r3, r3, #16
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	3301      	adds	r3, #1
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80054dc:	69fa      	ldr	r2, [r7, #28]
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e4:	61bb      	str	r3, [r7, #24]
      break;
 80054e6:	e0b2      	b.n	800564e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054e8:	4b5c      	ldr	r3, [pc, #368]	; (800565c <HAL_RCC_GetSysClockFreq+0x358>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054f0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054f2:	4b5a      	ldr	r3, [pc, #360]	; (800565c <HAL_RCC_GetSysClockFreq+0x358>)
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d04d      	beq.n	800559a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054fe:	4b57      	ldr	r3, [pc, #348]	; (800565c <HAL_RCC_GetSysClockFreq+0x358>)
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	099b      	lsrs	r3, r3, #6
 8005504:	461a      	mov	r2, r3
 8005506:	f04f 0300 	mov.w	r3, #0
 800550a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800550e:	f04f 0100 	mov.w	r1, #0
 8005512:	ea02 0800 	and.w	r8, r2, r0
 8005516:	ea03 0901 	and.w	r9, r3, r1
 800551a:	4640      	mov	r0, r8
 800551c:	4649      	mov	r1, r9
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	f04f 0300 	mov.w	r3, #0
 8005526:	014b      	lsls	r3, r1, #5
 8005528:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800552c:	0142      	lsls	r2, r0, #5
 800552e:	4610      	mov	r0, r2
 8005530:	4619      	mov	r1, r3
 8005532:	ebb0 0008 	subs.w	r0, r0, r8
 8005536:	eb61 0109 	sbc.w	r1, r1, r9
 800553a:	f04f 0200 	mov.w	r2, #0
 800553e:	f04f 0300 	mov.w	r3, #0
 8005542:	018b      	lsls	r3, r1, #6
 8005544:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005548:	0182      	lsls	r2, r0, #6
 800554a:	1a12      	subs	r2, r2, r0
 800554c:	eb63 0301 	sbc.w	r3, r3, r1
 8005550:	f04f 0000 	mov.w	r0, #0
 8005554:	f04f 0100 	mov.w	r1, #0
 8005558:	00d9      	lsls	r1, r3, #3
 800555a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800555e:	00d0      	lsls	r0, r2, #3
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	eb12 0208 	adds.w	r2, r2, r8
 8005568:	eb43 0309 	adc.w	r3, r3, r9
 800556c:	f04f 0000 	mov.w	r0, #0
 8005570:	f04f 0100 	mov.w	r1, #0
 8005574:	0259      	lsls	r1, r3, #9
 8005576:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800557a:	0250      	lsls	r0, r2, #9
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4610      	mov	r0, r2
 8005582:	4619      	mov	r1, r3
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	461a      	mov	r2, r3
 8005588:	f04f 0300 	mov.w	r3, #0
 800558c:	f7fa fe48 	bl	8000220 <__aeabi_uldivmod>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4613      	mov	r3, r2
 8005596:	61fb      	str	r3, [r7, #28]
 8005598:	e04a      	b.n	8005630 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800559a:	4b30      	ldr	r3, [pc, #192]	; (800565c <HAL_RCC_GetSysClockFreq+0x358>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	099b      	lsrs	r3, r3, #6
 80055a0:	461a      	mov	r2, r3
 80055a2:	f04f 0300 	mov.w	r3, #0
 80055a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80055aa:	f04f 0100 	mov.w	r1, #0
 80055ae:	ea02 0400 	and.w	r4, r2, r0
 80055b2:	ea03 0501 	and.w	r5, r3, r1
 80055b6:	4620      	mov	r0, r4
 80055b8:	4629      	mov	r1, r5
 80055ba:	f04f 0200 	mov.w	r2, #0
 80055be:	f04f 0300 	mov.w	r3, #0
 80055c2:	014b      	lsls	r3, r1, #5
 80055c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80055c8:	0142      	lsls	r2, r0, #5
 80055ca:	4610      	mov	r0, r2
 80055cc:	4619      	mov	r1, r3
 80055ce:	1b00      	subs	r0, r0, r4
 80055d0:	eb61 0105 	sbc.w	r1, r1, r5
 80055d4:	f04f 0200 	mov.w	r2, #0
 80055d8:	f04f 0300 	mov.w	r3, #0
 80055dc:	018b      	lsls	r3, r1, #6
 80055de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80055e2:	0182      	lsls	r2, r0, #6
 80055e4:	1a12      	subs	r2, r2, r0
 80055e6:	eb63 0301 	sbc.w	r3, r3, r1
 80055ea:	f04f 0000 	mov.w	r0, #0
 80055ee:	f04f 0100 	mov.w	r1, #0
 80055f2:	00d9      	lsls	r1, r3, #3
 80055f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055f8:	00d0      	lsls	r0, r2, #3
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	1912      	adds	r2, r2, r4
 8005600:	eb45 0303 	adc.w	r3, r5, r3
 8005604:	f04f 0000 	mov.w	r0, #0
 8005608:	f04f 0100 	mov.w	r1, #0
 800560c:	0299      	lsls	r1, r3, #10
 800560e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005612:	0290      	lsls	r0, r2, #10
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	4610      	mov	r0, r2
 800561a:	4619      	mov	r1, r3
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	461a      	mov	r2, r3
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	f7fa fdfc 	bl	8000220 <__aeabi_uldivmod>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	4613      	mov	r3, r2
 800562e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005630:	4b0a      	ldr	r3, [pc, #40]	; (800565c <HAL_RCC_GetSysClockFreq+0x358>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	0f1b      	lsrs	r3, r3, #28
 8005636:	f003 0307 	and.w	r3, r3, #7
 800563a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800563c:	69fa      	ldr	r2, [r7, #28]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	fbb2 f3f3 	udiv	r3, r2, r3
 8005644:	61bb      	str	r3, [r7, #24]
      break;
 8005646:	e002      	b.n	800564e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005648:	4b05      	ldr	r3, [pc, #20]	; (8005660 <HAL_RCC_GetSysClockFreq+0x35c>)
 800564a:	61bb      	str	r3, [r7, #24]
      break;
 800564c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800564e:	69bb      	ldr	r3, [r7, #24]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3720      	adds	r7, #32
 8005654:	46bd      	mov	sp, r7
 8005656:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800565a:	bf00      	nop
 800565c:	40023800 	.word	0x40023800
 8005660:	00f42400 	.word	0x00f42400
 8005664:	007a1200 	.word	0x007a1200

08005668 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e28d      	b.n	8005b96 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 8083 	beq.w	800578e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005688:	4b94      	ldr	r3, [pc, #592]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f003 030c 	and.w	r3, r3, #12
 8005690:	2b04      	cmp	r3, #4
 8005692:	d019      	beq.n	80056c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005694:	4b91      	ldr	r3, [pc, #580]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800569c:	2b08      	cmp	r3, #8
 800569e:	d106      	bne.n	80056ae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80056a0:	4b8e      	ldr	r3, [pc, #568]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056ac:	d00c      	beq.n	80056c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056ae:	4b8b      	ldr	r3, [pc, #556]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80056b6:	2b0c      	cmp	r3, #12
 80056b8:	d112      	bne.n	80056e0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056ba:	4b88      	ldr	r3, [pc, #544]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056c6:	d10b      	bne.n	80056e0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056c8:	4b84      	ldr	r3, [pc, #528]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d05b      	beq.n	800578c <HAL_RCC_OscConfig+0x124>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d157      	bne.n	800578c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e25a      	b.n	8005b96 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056e8:	d106      	bne.n	80056f8 <HAL_RCC_OscConfig+0x90>
 80056ea:	4b7c      	ldr	r3, [pc, #496]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a7b      	ldr	r2, [pc, #492]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 80056f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	e01d      	b.n	8005734 <HAL_RCC_OscConfig+0xcc>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005700:	d10c      	bne.n	800571c <HAL_RCC_OscConfig+0xb4>
 8005702:	4b76      	ldr	r3, [pc, #472]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a75      	ldr	r2, [pc, #468]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 8005708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	4b73      	ldr	r3, [pc, #460]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a72      	ldr	r2, [pc, #456]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 8005714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	e00b      	b.n	8005734 <HAL_RCC_OscConfig+0xcc>
 800571c:	4b6f      	ldr	r3, [pc, #444]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a6e      	ldr	r2, [pc, #440]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 8005722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	4b6c      	ldr	r3, [pc, #432]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a6b      	ldr	r2, [pc, #428]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 800572e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d013      	beq.n	8005764 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800573c:	f7fd f882 	bl	8002844 <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005742:	e008      	b.n	8005756 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005744:	f7fd f87e 	bl	8002844 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b64      	cmp	r3, #100	; 0x64
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e21f      	b.n	8005b96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005756:	4b61      	ldr	r3, [pc, #388]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0f0      	beq.n	8005744 <HAL_RCC_OscConfig+0xdc>
 8005762:	e014      	b.n	800578e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005764:	f7fd f86e 	bl	8002844 <HAL_GetTick>
 8005768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800576a:	e008      	b.n	800577e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800576c:	f7fd f86a 	bl	8002844 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b64      	cmp	r3, #100	; 0x64
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e20b      	b.n	8005b96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800577e:	4b57      	ldr	r3, [pc, #348]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1f0      	bne.n	800576c <HAL_RCC_OscConfig+0x104>
 800578a:	e000      	b.n	800578e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800578c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d06f      	beq.n	800587a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800579a:	4b50      	ldr	r3, [pc, #320]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f003 030c 	and.w	r3, r3, #12
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d017      	beq.n	80057d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80057a6:	4b4d      	ldr	r3, [pc, #308]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80057ae:	2b08      	cmp	r3, #8
 80057b0:	d105      	bne.n	80057be <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80057b2:	4b4a      	ldr	r3, [pc, #296]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00b      	beq.n	80057d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057be:	4b47      	ldr	r3, [pc, #284]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80057c6:	2b0c      	cmp	r3, #12
 80057c8:	d11c      	bne.n	8005804 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057ca:	4b44      	ldr	r3, [pc, #272]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d116      	bne.n	8005804 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057d6:	4b41      	ldr	r3, [pc, #260]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d005      	beq.n	80057ee <HAL_RCC_OscConfig+0x186>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d001      	beq.n	80057ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e1d3      	b.n	8005b96 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ee:	4b3b      	ldr	r3, [pc, #236]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	4937      	ldr	r1, [pc, #220]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005802:	e03a      	b.n	800587a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d020      	beq.n	800584e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800580c:	4b34      	ldr	r3, [pc, #208]	; (80058e0 <HAL_RCC_OscConfig+0x278>)
 800580e:	2201      	movs	r2, #1
 8005810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005812:	f7fd f817 	bl	8002844 <HAL_GetTick>
 8005816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005818:	e008      	b.n	800582c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800581a:	f7fd f813 	bl	8002844 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e1b4      	b.n	8005b96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800582c:	4b2b      	ldr	r3, [pc, #172]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0f0      	beq.n	800581a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005838:	4b28      	ldr	r3, [pc, #160]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	4925      	ldr	r1, [pc, #148]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 8005848:	4313      	orrs	r3, r2
 800584a:	600b      	str	r3, [r1, #0]
 800584c:	e015      	b.n	800587a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800584e:	4b24      	ldr	r3, [pc, #144]	; (80058e0 <HAL_RCC_OscConfig+0x278>)
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005854:	f7fc fff6 	bl	8002844 <HAL_GetTick>
 8005858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800585a:	e008      	b.n	800586e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800585c:	f7fc fff2 	bl	8002844 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b02      	cmp	r3, #2
 8005868:	d901      	bls.n	800586e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e193      	b.n	8005b96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800586e:	4b1b      	ldr	r3, [pc, #108]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1f0      	bne.n	800585c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0308 	and.w	r3, r3, #8
 8005882:	2b00      	cmp	r3, #0
 8005884:	d036      	beq.n	80058f4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d016      	beq.n	80058bc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800588e:	4b15      	ldr	r3, [pc, #84]	; (80058e4 <HAL_RCC_OscConfig+0x27c>)
 8005890:	2201      	movs	r2, #1
 8005892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005894:	f7fc ffd6 	bl	8002844 <HAL_GetTick>
 8005898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800589a:	e008      	b.n	80058ae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800589c:	f7fc ffd2 	bl	8002844 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e173      	b.n	8005b96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ae:	4b0b      	ldr	r3, [pc, #44]	; (80058dc <HAL_RCC_OscConfig+0x274>)
 80058b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d0f0      	beq.n	800589c <HAL_RCC_OscConfig+0x234>
 80058ba:	e01b      	b.n	80058f4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058bc:	4b09      	ldr	r3, [pc, #36]	; (80058e4 <HAL_RCC_OscConfig+0x27c>)
 80058be:	2200      	movs	r2, #0
 80058c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c2:	f7fc ffbf 	bl	8002844 <HAL_GetTick>
 80058c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058c8:	e00e      	b.n	80058e8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058ca:	f7fc ffbb 	bl	8002844 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d907      	bls.n	80058e8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e15c      	b.n	8005b96 <HAL_RCC_OscConfig+0x52e>
 80058dc:	40023800 	.word	0x40023800
 80058e0:	42470000 	.word	0x42470000
 80058e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058e8:	4b8a      	ldr	r3, [pc, #552]	; (8005b14 <HAL_RCC_OscConfig+0x4ac>)
 80058ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1ea      	bne.n	80058ca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0304 	and.w	r3, r3, #4
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f000 8097 	beq.w	8005a30 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005902:	2300      	movs	r3, #0
 8005904:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005906:	4b83      	ldr	r3, [pc, #524]	; (8005b14 <HAL_RCC_OscConfig+0x4ac>)
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10f      	bne.n	8005932 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005912:	2300      	movs	r3, #0
 8005914:	60bb      	str	r3, [r7, #8]
 8005916:	4b7f      	ldr	r3, [pc, #508]	; (8005b14 <HAL_RCC_OscConfig+0x4ac>)
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	4a7e      	ldr	r2, [pc, #504]	; (8005b14 <HAL_RCC_OscConfig+0x4ac>)
 800591c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005920:	6413      	str	r3, [r2, #64]	; 0x40
 8005922:	4b7c      	ldr	r3, [pc, #496]	; (8005b14 <HAL_RCC_OscConfig+0x4ac>)
 8005924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800592a:	60bb      	str	r3, [r7, #8]
 800592c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800592e:	2301      	movs	r3, #1
 8005930:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005932:	4b79      	ldr	r3, [pc, #484]	; (8005b18 <HAL_RCC_OscConfig+0x4b0>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593a:	2b00      	cmp	r3, #0
 800593c:	d118      	bne.n	8005970 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800593e:	4b76      	ldr	r3, [pc, #472]	; (8005b18 <HAL_RCC_OscConfig+0x4b0>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a75      	ldr	r2, [pc, #468]	; (8005b18 <HAL_RCC_OscConfig+0x4b0>)
 8005944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800594a:	f7fc ff7b 	bl	8002844 <HAL_GetTick>
 800594e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005950:	e008      	b.n	8005964 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005952:	f7fc ff77 	bl	8002844 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d901      	bls.n	8005964 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e118      	b.n	8005b96 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005964:	4b6c      	ldr	r3, [pc, #432]	; (8005b18 <HAL_RCC_OscConfig+0x4b0>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596c:	2b00      	cmp	r3, #0
 800596e:	d0f0      	beq.n	8005952 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d106      	bne.n	8005986 <HAL_RCC_OscConfig+0x31e>
 8005978:	4b66      	ldr	r3, [pc, #408]	; (8005b14 <HAL_RCC_OscConfig+0x4ac>)
 800597a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597c:	4a65      	ldr	r2, [pc, #404]	; (8005b14 <HAL_RCC_OscConfig+0x4ac>)
 800597e:	f043 0301 	orr.w	r3, r3, #1
 8005982:	6713      	str	r3, [r2, #112]	; 0x70
 8005984:	e01c      	b.n	80059c0 <HAL_RCC_OscConfig+0x358>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	2b05      	cmp	r3, #5
 800598c:	d10c      	bne.n	80059a8 <HAL_RCC_OscConfig+0x340>
 800598e:	4b61      	ldr	r3, [pc, #388]	; (8005b14 <HAL_RCC_OscConfig+0x4ac>)
 8005990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005992:	4a60      	ldr	r2, [pc, #384]	; (8005b14 <HAL_RCC_OscConfig+0x4ac>)
 8005994:	f043 0304 	orr.w	r3, r3, #4
 8005998:	6713      	str	r3, [r2, #112]	; 0x70
 800599a:	4b5e      	ldr	r3, [pc, #376]	; (8005b14 <HAL_RCC_OscConfig+0x4ac>)
 800599c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599e:	4a5d      	ldr	r2, [pc, #372]	; (8005b14 <HAL_RCC_OscConfig+0x4ac>)
 80059a0:	f043 0301 	orr.w	r3, r3, #1
 80059a4:	6713      	str	r3, [r2, #112]	; 0x70
 80059a6:	e00b      	b.n	80059c0 <HAL_RCC_OscConfig+0x358>
 80059a8:	4b5a      	ldr	r3, [pc, #360]	; (8005b14 <HAL_RCC_OscConfig+0x4ac>)
 80059aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ac:	4a59      	ldr	r2, [pc, #356]	; (8005b14 <HAL_RCC_OscConfig+0x4ac>)
 80059ae:	f023 0301 	bic.w	r3, r3, #1
 80059b2:	6713      	str	r3, [r2, #112]	; 0x70
 80059b4:	4b57      	ldr	r3, [pc, #348]	; (8005b14 <HAL_RCC_OscConfig+0x4ac>)
 80059b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b8:	4a56      	ldr	r2, [pc, #344]	; (8005b14 <HAL_RCC_OscConfig+0x4ac>)
 80059ba:	f023 0304 	bic.w	r3, r3, #4
 80059be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d015      	beq.n	80059f4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c8:	f7fc ff3c 	bl	8002844 <HAL_GetTick>
 80059cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ce:	e00a      	b.n	80059e6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059d0:	f7fc ff38 	bl	8002844 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	f241 3288 	movw	r2, #5000	; 0x1388
 80059de:	4293      	cmp	r3, r2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e0d7      	b.n	8005b96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059e6:	4b4b      	ldr	r3, [pc, #300]	; (8005b14 <HAL_RCC_OscConfig+0x4ac>)
 80059e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0ee      	beq.n	80059d0 <HAL_RCC_OscConfig+0x368>
 80059f2:	e014      	b.n	8005a1e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059f4:	f7fc ff26 	bl	8002844 <HAL_GetTick>
 80059f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059fa:	e00a      	b.n	8005a12 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059fc:	f7fc ff22 	bl	8002844 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e0c1      	b.n	8005b96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a12:	4b40      	ldr	r3, [pc, #256]	; (8005b14 <HAL_RCC_OscConfig+0x4ac>)
 8005a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1ee      	bne.n	80059fc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a1e:	7dfb      	ldrb	r3, [r7, #23]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d105      	bne.n	8005a30 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a24:	4b3b      	ldr	r3, [pc, #236]	; (8005b14 <HAL_RCC_OscConfig+0x4ac>)
 8005a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a28:	4a3a      	ldr	r2, [pc, #232]	; (8005b14 <HAL_RCC_OscConfig+0x4ac>)
 8005a2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 80ad 	beq.w	8005b94 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a3a:	4b36      	ldr	r3, [pc, #216]	; (8005b14 <HAL_RCC_OscConfig+0x4ac>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f003 030c 	and.w	r3, r3, #12
 8005a42:	2b08      	cmp	r3, #8
 8005a44:	d060      	beq.n	8005b08 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d145      	bne.n	8005ada <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a4e:	4b33      	ldr	r3, [pc, #204]	; (8005b1c <HAL_RCC_OscConfig+0x4b4>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a54:	f7fc fef6 	bl	8002844 <HAL_GetTick>
 8005a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a5a:	e008      	b.n	8005a6e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a5c:	f7fc fef2 	bl	8002844 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e093      	b.n	8005b96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a6e:	4b29      	ldr	r3, [pc, #164]	; (8005b14 <HAL_RCC_OscConfig+0x4ac>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1f0      	bne.n	8005a5c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	69da      	ldr	r2, [r3, #28]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	431a      	orrs	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a88:	019b      	lsls	r3, r3, #6
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a90:	085b      	lsrs	r3, r3, #1
 8005a92:	3b01      	subs	r3, #1
 8005a94:	041b      	lsls	r3, r3, #16
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9c:	061b      	lsls	r3, r3, #24
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa4:	071b      	lsls	r3, r3, #28
 8005aa6:	491b      	ldr	r1, [pc, #108]	; (8005b14 <HAL_RCC_OscConfig+0x4ac>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005aac:	4b1b      	ldr	r3, [pc, #108]	; (8005b1c <HAL_RCC_OscConfig+0x4b4>)
 8005aae:	2201      	movs	r2, #1
 8005ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab2:	f7fc fec7 	bl	8002844 <HAL_GetTick>
 8005ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ab8:	e008      	b.n	8005acc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aba:	f7fc fec3 	bl	8002844 <HAL_GetTick>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d901      	bls.n	8005acc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e064      	b.n	8005b96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005acc:	4b11      	ldr	r3, [pc, #68]	; (8005b14 <HAL_RCC_OscConfig+0x4ac>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0f0      	beq.n	8005aba <HAL_RCC_OscConfig+0x452>
 8005ad8:	e05c      	b.n	8005b94 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ada:	4b10      	ldr	r3, [pc, #64]	; (8005b1c <HAL_RCC_OscConfig+0x4b4>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae0:	f7fc feb0 	bl	8002844 <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ae8:	f7fc feac 	bl	8002844 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e04d      	b.n	8005b96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005afa:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <HAL_RCC_OscConfig+0x4ac>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1f0      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x480>
 8005b06:	e045      	b.n	8005b94 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d107      	bne.n	8005b20 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e040      	b.n	8005b96 <HAL_RCC_OscConfig+0x52e>
 8005b14:	40023800 	.word	0x40023800
 8005b18:	40007000 	.word	0x40007000
 8005b1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b20:	4b1f      	ldr	r3, [pc, #124]	; (8005ba0 <HAL_RCC_OscConfig+0x538>)
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d030      	beq.n	8005b90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d129      	bne.n	8005b90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d122      	bne.n	8005b90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b50:	4013      	ands	r3, r2
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d119      	bne.n	8005b90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b66:	085b      	lsrs	r3, r3, #1
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d10f      	bne.n	8005b90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d107      	bne.n	8005b90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d001      	beq.n	8005b94 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e000      	b.n	8005b96 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3718      	adds	r7, #24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	40023800 	.word	0x40023800

08005ba4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e07b      	b.n	8005cae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d108      	bne.n	8005bd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bc6:	d009      	beq.n	8005bdc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	61da      	str	r2, [r3, #28]
 8005bce:	e005      	b.n	8005bdc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d106      	bne.n	8005bfc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7fc faa2 	bl	8002140 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c24:	431a      	orrs	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c4c:	431a      	orrs	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c56:	431a      	orrs	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
 8005c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c60:	ea42 0103 	orr.w	r1, r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c68:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	0c1b      	lsrs	r3, r3, #16
 8005c7a:	f003 0104 	and.w	r1, r3, #4
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	f003 0210 	and.w	r2, r3, #16
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69da      	ldr	r2, [r3, #28]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b088      	sub	sp, #32
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	60f8      	str	r0, [r7, #12]
 8005cbe:	60b9      	str	r1, [r7, #8]
 8005cc0:	603b      	str	r3, [r7, #0]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d101      	bne.n	8005cd8 <HAL_SPI_Transmit+0x22>
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	e126      	b.n	8005f26 <HAL_SPI_Transmit+0x270>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ce0:	f7fc fdb0 	bl	8002844 <HAL_GetTick>
 8005ce4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ce6:	88fb      	ldrh	r3, [r7, #6]
 8005ce8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d002      	beq.n	8005cfc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005cf6:	2302      	movs	r3, #2
 8005cf8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005cfa:	e10b      	b.n	8005f14 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <HAL_SPI_Transmit+0x52>
 8005d02:	88fb      	ldrh	r3, [r7, #6]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d102      	bne.n	8005d0e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d0c:	e102      	b.n	8005f14 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2203      	movs	r2, #3
 8005d12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	88fa      	ldrh	r2, [r7, #6]
 8005d26:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	88fa      	ldrh	r2, [r7, #6]
 8005d2c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d54:	d10f      	bne.n	8005d76 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d80:	2b40      	cmp	r3, #64	; 0x40
 8005d82:	d007      	beq.n	8005d94 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d9c:	d14b      	bne.n	8005e36 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d002      	beq.n	8005dac <HAL_SPI_Transmit+0xf6>
 8005da6:	8afb      	ldrh	r3, [r7, #22]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d13e      	bne.n	8005e2a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db0:	881a      	ldrh	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbc:	1c9a      	adds	r2, r3, #2
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005dd0:	e02b      	b.n	8005e2a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d112      	bne.n	8005e06 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de4:	881a      	ldrh	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df0:	1c9a      	adds	r2, r3, #2
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e04:	e011      	b.n	8005e2a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e06:	f7fc fd1d 	bl	8002844 <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d803      	bhi.n	8005e1e <HAL_SPI_Transmit+0x168>
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1c:	d102      	bne.n	8005e24 <HAL_SPI_Transmit+0x16e>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d102      	bne.n	8005e2a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e28:	e074      	b.n	8005f14 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1ce      	bne.n	8005dd2 <HAL_SPI_Transmit+0x11c>
 8005e34:	e04c      	b.n	8005ed0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d002      	beq.n	8005e44 <HAL_SPI_Transmit+0x18e>
 8005e3e:	8afb      	ldrh	r3, [r7, #22]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d140      	bne.n	8005ec6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	330c      	adds	r3, #12
 8005e4e:	7812      	ldrb	r2, [r2, #0]
 8005e50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	3b01      	subs	r3, #1
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005e6a:	e02c      	b.n	8005ec6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d113      	bne.n	8005ea2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	330c      	adds	r3, #12
 8005e84:	7812      	ldrb	r2, [r2, #0]
 8005e86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8c:	1c5a      	adds	r2, r3, #1
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ea0:	e011      	b.n	8005ec6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ea2:	f7fc fccf 	bl	8002844 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d803      	bhi.n	8005eba <HAL_SPI_Transmit+0x204>
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb8:	d102      	bne.n	8005ec0 <HAL_SPI_Transmit+0x20a>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d102      	bne.n	8005ec6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ec4:	e026      	b.n	8005f14 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1cd      	bne.n	8005e6c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	6839      	ldr	r1, [r7, #0]
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f000 fbcb 	bl	8006670 <SPI_EndRxTxTransaction>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10a      	bne.n	8005f04 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005eee:	2300      	movs	r3, #0
 8005ef0:	613b      	str	r3, [r7, #16]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	613b      	str	r3, [r7, #16]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	613b      	str	r3, [r7, #16]
 8005f02:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d002      	beq.n	8005f12 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	77fb      	strb	r3, [r7, #31]
 8005f10:	e000      	b.n	8005f14 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005f12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f24:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3720      	adds	r7, #32
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b088      	sub	sp, #32
 8005f32:	af02      	add	r7, sp, #8
 8005f34:	60f8      	str	r0, [r7, #12]
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	603b      	str	r3, [r7, #0]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f4a:	d112      	bne.n	8005f72 <HAL_SPI_Receive+0x44>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10e      	bne.n	8005f72 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2204      	movs	r2, #4
 8005f58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005f5c:	88fa      	ldrh	r2, [r7, #6]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	4613      	mov	r3, r2
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	68b9      	ldr	r1, [r7, #8]
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 f8f1 	bl	8006150 <HAL_SPI_TransmitReceive>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	e0ea      	b.n	8006148 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d101      	bne.n	8005f80 <HAL_SPI_Receive+0x52>
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	e0e3      	b.n	8006148 <HAL_SPI_Receive+0x21a>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f88:	f7fc fc5c 	bl	8002844 <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d002      	beq.n	8005fa0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f9e:	e0ca      	b.n	8006136 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d002      	beq.n	8005fac <HAL_SPI_Receive+0x7e>
 8005fa6:	88fb      	ldrh	r3, [r7, #6]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d102      	bne.n	8005fb2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005fb0:	e0c1      	b.n	8006136 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2204      	movs	r2, #4
 8005fb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	88fa      	ldrh	r2, [r7, #6]
 8005fca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	88fa      	ldrh	r2, [r7, #6]
 8005fd0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ff8:	d10f      	bne.n	800601a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006008:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006018:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006024:	2b40      	cmp	r3, #64	; 0x40
 8006026:	d007      	beq.n	8006038 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006036:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d162      	bne.n	8006106 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006040:	e02e      	b.n	80060a0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b01      	cmp	r3, #1
 800604e:	d115      	bne.n	800607c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f103 020c 	add.w	r2, r3, #12
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	7812      	ldrb	r2, [r2, #0]
 800605e:	b2d2      	uxtb	r2, r2
 8006060:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006066:	1c5a      	adds	r2, r3, #1
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006070:	b29b      	uxth	r3, r3
 8006072:	3b01      	subs	r3, #1
 8006074:	b29a      	uxth	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	87da      	strh	r2, [r3, #62]	; 0x3e
 800607a:	e011      	b.n	80060a0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800607c:	f7fc fbe2 	bl	8002844 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	429a      	cmp	r2, r3
 800608a:	d803      	bhi.n	8006094 <HAL_SPI_Receive+0x166>
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006092:	d102      	bne.n	800609a <HAL_SPI_Receive+0x16c>
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d102      	bne.n	80060a0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800609e:	e04a      	b.n	8006136 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1cb      	bne.n	8006042 <HAL_SPI_Receive+0x114>
 80060aa:	e031      	b.n	8006110 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d113      	bne.n	80060e2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c4:	b292      	uxth	r2, r2
 80060c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	1c9a      	adds	r2, r3, #2
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	3b01      	subs	r3, #1
 80060da:	b29a      	uxth	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060e0:	e011      	b.n	8006106 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060e2:	f7fc fbaf 	bl	8002844 <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d803      	bhi.n	80060fa <HAL_SPI_Receive+0x1cc>
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f8:	d102      	bne.n	8006100 <HAL_SPI_Receive+0x1d2>
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d102      	bne.n	8006106 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006104:	e017      	b.n	8006136 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800610a:	b29b      	uxth	r3, r3
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1cd      	bne.n	80060ac <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	6839      	ldr	r1, [r7, #0]
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f000 fa45 	bl	80065a4 <SPI_EndRxTransaction>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2220      	movs	r2, #32
 8006124:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	75fb      	strb	r3, [r7, #23]
 8006132:	e000      	b.n	8006136 <HAL_SPI_Receive+0x208>
  }

error :
 8006134:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006146:	7dfb      	ldrb	r3, [r7, #23]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3718      	adds	r7, #24
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b08c      	sub	sp, #48	; 0x30
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
 800615c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800615e:	2301      	movs	r3, #1
 8006160:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006162:	2300      	movs	r3, #0
 8006164:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800616e:	2b01      	cmp	r3, #1
 8006170:	d101      	bne.n	8006176 <HAL_SPI_TransmitReceive+0x26>
 8006172:	2302      	movs	r3, #2
 8006174:	e18a      	b.n	800648c <HAL_SPI_TransmitReceive+0x33c>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800617e:	f7fc fb61 	bl	8002844 <HAL_GetTick>
 8006182:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800618a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006194:	887b      	ldrh	r3, [r7, #2]
 8006196:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006198:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800619c:	2b01      	cmp	r3, #1
 800619e:	d00f      	beq.n	80061c0 <HAL_SPI_TransmitReceive+0x70>
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061a6:	d107      	bne.n	80061b8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d103      	bne.n	80061b8 <HAL_SPI_TransmitReceive+0x68>
 80061b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	d003      	beq.n	80061c0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80061b8:	2302      	movs	r3, #2
 80061ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80061be:	e15b      	b.n	8006478 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d005      	beq.n	80061d2 <HAL_SPI_TransmitReceive+0x82>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <HAL_SPI_TransmitReceive+0x82>
 80061cc:	887b      	ldrh	r3, [r7, #2]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d103      	bne.n	80061da <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80061d8:	e14e      	b.n	8006478 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d003      	beq.n	80061ee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2205      	movs	r2, #5
 80061ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	887a      	ldrh	r2, [r7, #2]
 80061fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	887a      	ldrh	r2, [r7, #2]
 8006204:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	887a      	ldrh	r2, [r7, #2]
 8006210:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	887a      	ldrh	r2, [r7, #2]
 8006216:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622e:	2b40      	cmp	r3, #64	; 0x40
 8006230:	d007      	beq.n	8006242 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006240:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800624a:	d178      	bne.n	800633e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d002      	beq.n	800625a <HAL_SPI_TransmitReceive+0x10a>
 8006254:	8b7b      	ldrh	r3, [r7, #26]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d166      	bne.n	8006328 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625e:	881a      	ldrh	r2, [r3, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626a:	1c9a      	adds	r2, r3, #2
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006274:	b29b      	uxth	r3, r3
 8006276:	3b01      	subs	r3, #1
 8006278:	b29a      	uxth	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800627e:	e053      	b.n	8006328 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	2b02      	cmp	r3, #2
 800628c:	d11b      	bne.n	80062c6 <HAL_SPI_TransmitReceive+0x176>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006292:	b29b      	uxth	r3, r3
 8006294:	2b00      	cmp	r3, #0
 8006296:	d016      	beq.n	80062c6 <HAL_SPI_TransmitReceive+0x176>
 8006298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629a:	2b01      	cmp	r3, #1
 800629c:	d113      	bne.n	80062c6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a2:	881a      	ldrh	r2, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ae:	1c9a      	adds	r2, r3, #2
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	3b01      	subs	r3, #1
 80062bc:	b29a      	uxth	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062c2:	2300      	movs	r3, #0
 80062c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d119      	bne.n	8006308 <HAL_SPI_TransmitReceive+0x1b8>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062d8:	b29b      	uxth	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d014      	beq.n	8006308 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68da      	ldr	r2, [r3, #12]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e8:	b292      	uxth	r2, r2
 80062ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f0:	1c9a      	adds	r2, r3, #2
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	3b01      	subs	r3, #1
 80062fe:	b29a      	uxth	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006304:	2301      	movs	r3, #1
 8006306:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006308:	f7fc fa9c 	bl	8002844 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006314:	429a      	cmp	r2, r3
 8006316:	d807      	bhi.n	8006328 <HAL_SPI_TransmitReceive+0x1d8>
 8006318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631e:	d003      	beq.n	8006328 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006326:	e0a7      	b.n	8006478 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800632c:	b29b      	uxth	r3, r3
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1a6      	bne.n	8006280 <HAL_SPI_TransmitReceive+0x130>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006336:	b29b      	uxth	r3, r3
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1a1      	bne.n	8006280 <HAL_SPI_TransmitReceive+0x130>
 800633c:	e07c      	b.n	8006438 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <HAL_SPI_TransmitReceive+0x1fc>
 8006346:	8b7b      	ldrh	r3, [r7, #26]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d16b      	bne.n	8006424 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	330c      	adds	r3, #12
 8006356:	7812      	ldrb	r2, [r2, #0]
 8006358:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006368:	b29b      	uxth	r3, r3
 800636a:	3b01      	subs	r3, #1
 800636c:	b29a      	uxth	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006372:	e057      	b.n	8006424 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b02      	cmp	r3, #2
 8006380:	d11c      	bne.n	80063bc <HAL_SPI_TransmitReceive+0x26c>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006386:	b29b      	uxth	r3, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	d017      	beq.n	80063bc <HAL_SPI_TransmitReceive+0x26c>
 800638c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638e:	2b01      	cmp	r3, #1
 8006390:	d114      	bne.n	80063bc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	330c      	adds	r3, #12
 800639c:	7812      	ldrb	r2, [r2, #0]
 800639e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	3b01      	subs	r3, #1
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063b8:	2300      	movs	r3, #0
 80063ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d119      	bne.n	80063fe <HAL_SPI_TransmitReceive+0x2ae>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d014      	beq.n	80063fe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68da      	ldr	r2, [r3, #12]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063de:	b2d2      	uxtb	r2, r2
 80063e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e6:	1c5a      	adds	r2, r3, #1
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	3b01      	subs	r3, #1
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063fa:	2301      	movs	r3, #1
 80063fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80063fe:	f7fc fa21 	bl	8002844 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800640a:	429a      	cmp	r2, r3
 800640c:	d803      	bhi.n	8006416 <HAL_SPI_TransmitReceive+0x2c6>
 800640e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006414:	d102      	bne.n	800641c <HAL_SPI_TransmitReceive+0x2cc>
 8006416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006418:	2b00      	cmp	r3, #0
 800641a:	d103      	bne.n	8006424 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006422:	e029      	b.n	8006478 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006428:	b29b      	uxth	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1a2      	bne.n	8006374 <HAL_SPI_TransmitReceive+0x224>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006432:	b29b      	uxth	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d19d      	bne.n	8006374 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800643a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 f917 	bl	8006670 <SPI_EndRxTxTransaction>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d006      	beq.n	8006456 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2220      	movs	r2, #32
 8006452:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006454:	e010      	b.n	8006478 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10b      	bne.n	8006476 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800645e:	2300      	movs	r3, #0
 8006460:	617b      	str	r3, [r7, #20]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	617b      	str	r3, [r7, #20]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	617b      	str	r3, [r7, #20]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	e000      	b.n	8006478 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006476:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006488:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800648c:	4618      	mov	r0, r3
 800648e:	3730      	adds	r7, #48	; 0x30
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	603b      	str	r3, [r7, #0]
 80064a0:	4613      	mov	r3, r2
 80064a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80064a4:	f7fc f9ce 	bl	8002844 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ac:	1a9b      	subs	r3, r3, r2
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	4413      	add	r3, r2
 80064b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80064b4:	f7fc f9c6 	bl	8002844 <HAL_GetTick>
 80064b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80064ba:	4b39      	ldr	r3, [pc, #228]	; (80065a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	015b      	lsls	r3, r3, #5
 80064c0:	0d1b      	lsrs	r3, r3, #20
 80064c2:	69fa      	ldr	r2, [r7, #28]
 80064c4:	fb02 f303 	mul.w	r3, r2, r3
 80064c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064ca:	e054      	b.n	8006576 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d2:	d050      	beq.n	8006576 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064d4:	f7fc f9b6 	bl	8002844 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	69fa      	ldr	r2, [r7, #28]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d902      	bls.n	80064ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d13d      	bne.n	8006566 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	685a      	ldr	r2, [r3, #4]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006502:	d111      	bne.n	8006528 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800650c:	d004      	beq.n	8006518 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006516:	d107      	bne.n	8006528 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006526:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006530:	d10f      	bne.n	8006552 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006550:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e017      	b.n	8006596 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800656c:	2300      	movs	r3, #0
 800656e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	3b01      	subs	r3, #1
 8006574:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	689a      	ldr	r2, [r3, #8]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	4013      	ands	r3, r2
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	429a      	cmp	r2, r3
 8006584:	bf0c      	ite	eq
 8006586:	2301      	moveq	r3, #1
 8006588:	2300      	movne	r3, #0
 800658a:	b2db      	uxtb	r3, r3
 800658c:	461a      	mov	r2, r3
 800658e:	79fb      	ldrb	r3, [r7, #7]
 8006590:	429a      	cmp	r2, r3
 8006592:	d19b      	bne.n	80064cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3720      	adds	r7, #32
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	20000004 	.word	0x20000004

080065a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af02      	add	r7, sp, #8
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065b8:	d111      	bne.n	80065de <SPI_EndRxTransaction+0x3a>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065c2:	d004      	beq.n	80065ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065cc:	d107      	bne.n	80065de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065dc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065e6:	d12a      	bne.n	800663e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065f0:	d012      	beq.n	8006618 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2200      	movs	r2, #0
 80065fa:	2180      	movs	r1, #128	; 0x80
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f7ff ff49 	bl	8006494 <SPI_WaitFlagStateUntilTimeout>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d02d      	beq.n	8006664 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660c:	f043 0220 	orr.w	r2, r3, #32
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e026      	b.n	8006666 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	2200      	movs	r2, #0
 8006620:	2101      	movs	r1, #1
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f7ff ff36 	bl	8006494 <SPI_WaitFlagStateUntilTimeout>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d01a      	beq.n	8006664 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006632:	f043 0220 	orr.w	r2, r3, #32
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e013      	b.n	8006666 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	2200      	movs	r2, #0
 8006646:	2101      	movs	r1, #1
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f7ff ff23 	bl	8006494 <SPI_WaitFlagStateUntilTimeout>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d007      	beq.n	8006664 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006658:	f043 0220 	orr.w	r2, r3, #32
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e000      	b.n	8006666 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
	...

08006670 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b088      	sub	sp, #32
 8006674:	af02      	add	r7, sp, #8
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800667c:	4b1b      	ldr	r3, [pc, #108]	; (80066ec <SPI_EndRxTxTransaction+0x7c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a1b      	ldr	r2, [pc, #108]	; (80066f0 <SPI_EndRxTxTransaction+0x80>)
 8006682:	fba2 2303 	umull	r2, r3, r2, r3
 8006686:	0d5b      	lsrs	r3, r3, #21
 8006688:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800668c:	fb02 f303 	mul.w	r3, r2, r3
 8006690:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800669a:	d112      	bne.n	80066c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2200      	movs	r2, #0
 80066a4:	2180      	movs	r1, #128	; 0x80
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f7ff fef4 	bl	8006494 <SPI_WaitFlagStateUntilTimeout>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d016      	beq.n	80066e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b6:	f043 0220 	orr.w	r2, r3, #32
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e00f      	b.n	80066e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00a      	beq.n	80066de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	3b01      	subs	r3, #1
 80066cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d8:	2b80      	cmp	r3, #128	; 0x80
 80066da:	d0f2      	beq.n	80066c2 <SPI_EndRxTxTransaction+0x52>
 80066dc:	e000      	b.n	80066e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80066de:	bf00      	nop
  }

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3718      	adds	r7, #24
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	20000004 	.word	0x20000004
 80066f0:	165e9f81 	.word	0x165e9f81

080066f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d101      	bne.n	8006706 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e041      	b.n	800678a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d106      	bne.n	8006720 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7fb fd58 	bl	80021d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2202      	movs	r2, #2
 8006724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	3304      	adds	r3, #4
 8006730:	4619      	mov	r1, r3
 8006732:	4610      	mov	r0, r2
 8006734:	f000 f9ce 	bl	8006ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
	...

08006794 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d001      	beq.n	80067ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e04e      	b.n	800684a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2202      	movs	r2, #2
 80067b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68da      	ldr	r2, [r3, #12]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f042 0201 	orr.w	r2, r2, #1
 80067c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a23      	ldr	r2, [pc, #140]	; (8006858 <HAL_TIM_Base_Start_IT+0xc4>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d022      	beq.n	8006814 <HAL_TIM_Base_Start_IT+0x80>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d6:	d01d      	beq.n	8006814 <HAL_TIM_Base_Start_IT+0x80>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a1f      	ldr	r2, [pc, #124]	; (800685c <HAL_TIM_Base_Start_IT+0xc8>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d018      	beq.n	8006814 <HAL_TIM_Base_Start_IT+0x80>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a1e      	ldr	r2, [pc, #120]	; (8006860 <HAL_TIM_Base_Start_IT+0xcc>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d013      	beq.n	8006814 <HAL_TIM_Base_Start_IT+0x80>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a1c      	ldr	r2, [pc, #112]	; (8006864 <HAL_TIM_Base_Start_IT+0xd0>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d00e      	beq.n	8006814 <HAL_TIM_Base_Start_IT+0x80>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a1b      	ldr	r2, [pc, #108]	; (8006868 <HAL_TIM_Base_Start_IT+0xd4>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d009      	beq.n	8006814 <HAL_TIM_Base_Start_IT+0x80>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a19      	ldr	r2, [pc, #100]	; (800686c <HAL_TIM_Base_Start_IT+0xd8>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d004      	beq.n	8006814 <HAL_TIM_Base_Start_IT+0x80>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a18      	ldr	r2, [pc, #96]	; (8006870 <HAL_TIM_Base_Start_IT+0xdc>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d111      	bne.n	8006838 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f003 0307 	and.w	r3, r3, #7
 800681e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2b06      	cmp	r3, #6
 8006824:	d010      	beq.n	8006848 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f042 0201 	orr.w	r2, r2, #1
 8006834:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006836:	e007      	b.n	8006848 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f042 0201 	orr.w	r2, r2, #1
 8006846:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	40010000 	.word	0x40010000
 800685c:	40000400 	.word	0x40000400
 8006860:	40000800 	.word	0x40000800
 8006864:	40000c00 	.word	0x40000c00
 8006868:	40010400 	.word	0x40010400
 800686c:	40014000 	.word	0x40014000
 8006870:	40001800 	.word	0x40001800

08006874 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b02      	cmp	r3, #2
 8006888:	d122      	bne.n	80068d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b02      	cmp	r3, #2
 8006896:	d11b      	bne.n	80068d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f06f 0202 	mvn.w	r2, #2
 80068a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	f003 0303 	and.w	r3, r3, #3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f8ee 	bl	8006a98 <HAL_TIM_IC_CaptureCallback>
 80068bc:	e005      	b.n	80068ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f8e0 	bl	8006a84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f8f1 	bl	8006aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	f003 0304 	and.w	r3, r3, #4
 80068da:	2b04      	cmp	r3, #4
 80068dc:	d122      	bne.n	8006924 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	f003 0304 	and.w	r3, r3, #4
 80068e8:	2b04      	cmp	r3, #4
 80068ea:	d11b      	bne.n	8006924 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f06f 0204 	mvn.w	r2, #4
 80068f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2202      	movs	r2, #2
 80068fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f8c4 	bl	8006a98 <HAL_TIM_IC_CaptureCallback>
 8006910:	e005      	b.n	800691e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f8b6 	bl	8006a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f8c7 	bl	8006aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	f003 0308 	and.w	r3, r3, #8
 800692e:	2b08      	cmp	r3, #8
 8006930:	d122      	bne.n	8006978 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	f003 0308 	and.w	r3, r3, #8
 800693c:	2b08      	cmp	r3, #8
 800693e:	d11b      	bne.n	8006978 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f06f 0208 	mvn.w	r2, #8
 8006948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2204      	movs	r2, #4
 800694e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	f003 0303 	and.w	r3, r3, #3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f89a 	bl	8006a98 <HAL_TIM_IC_CaptureCallback>
 8006964:	e005      	b.n	8006972 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f88c 	bl	8006a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f89d 	bl	8006aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	f003 0310 	and.w	r3, r3, #16
 8006982:	2b10      	cmp	r3, #16
 8006984:	d122      	bne.n	80069cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	f003 0310 	and.w	r3, r3, #16
 8006990:	2b10      	cmp	r3, #16
 8006992:	d11b      	bne.n	80069cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f06f 0210 	mvn.w	r2, #16
 800699c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2208      	movs	r2, #8
 80069a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f870 	bl	8006a98 <HAL_TIM_IC_CaptureCallback>
 80069b8:	e005      	b.n	80069c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f862 	bl	8006a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f873 	bl	8006aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d10e      	bne.n	80069f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d107      	bne.n	80069f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f06f 0201 	mvn.w	r2, #1
 80069f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7fb f9a0 	bl	8001d38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a02:	2b80      	cmp	r3, #128	; 0x80
 8006a04:	d10e      	bne.n	8006a24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a10:	2b80      	cmp	r3, #128	; 0x80
 8006a12:	d107      	bne.n	8006a24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f902 	bl	8006c28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2e:	2b40      	cmp	r3, #64	; 0x40
 8006a30:	d10e      	bne.n	8006a50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3c:	2b40      	cmp	r3, #64	; 0x40
 8006a3e:	d107      	bne.n	8006a50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f838 	bl	8006ac0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	f003 0320 	and.w	r3, r3, #32
 8006a5a:	2b20      	cmp	r3, #32
 8006a5c:	d10e      	bne.n	8006a7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	f003 0320 	and.w	r3, r3, #32
 8006a68:	2b20      	cmp	r3, #32
 8006a6a:	d107      	bne.n	8006a7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f06f 0220 	mvn.w	r2, #32
 8006a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f8cc 	bl	8006c14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a7c:	bf00      	nop
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a40      	ldr	r2, [pc, #256]	; (8006be8 <TIM_Base_SetConfig+0x114>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d013      	beq.n	8006b14 <TIM_Base_SetConfig+0x40>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af2:	d00f      	beq.n	8006b14 <TIM_Base_SetConfig+0x40>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a3d      	ldr	r2, [pc, #244]	; (8006bec <TIM_Base_SetConfig+0x118>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d00b      	beq.n	8006b14 <TIM_Base_SetConfig+0x40>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a3c      	ldr	r2, [pc, #240]	; (8006bf0 <TIM_Base_SetConfig+0x11c>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d007      	beq.n	8006b14 <TIM_Base_SetConfig+0x40>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a3b      	ldr	r2, [pc, #236]	; (8006bf4 <TIM_Base_SetConfig+0x120>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d003      	beq.n	8006b14 <TIM_Base_SetConfig+0x40>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a3a      	ldr	r2, [pc, #232]	; (8006bf8 <TIM_Base_SetConfig+0x124>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d108      	bne.n	8006b26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a2f      	ldr	r2, [pc, #188]	; (8006be8 <TIM_Base_SetConfig+0x114>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d02b      	beq.n	8006b86 <TIM_Base_SetConfig+0xb2>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b34:	d027      	beq.n	8006b86 <TIM_Base_SetConfig+0xb2>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a2c      	ldr	r2, [pc, #176]	; (8006bec <TIM_Base_SetConfig+0x118>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d023      	beq.n	8006b86 <TIM_Base_SetConfig+0xb2>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a2b      	ldr	r2, [pc, #172]	; (8006bf0 <TIM_Base_SetConfig+0x11c>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d01f      	beq.n	8006b86 <TIM_Base_SetConfig+0xb2>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a2a      	ldr	r2, [pc, #168]	; (8006bf4 <TIM_Base_SetConfig+0x120>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d01b      	beq.n	8006b86 <TIM_Base_SetConfig+0xb2>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a29      	ldr	r2, [pc, #164]	; (8006bf8 <TIM_Base_SetConfig+0x124>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d017      	beq.n	8006b86 <TIM_Base_SetConfig+0xb2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a28      	ldr	r2, [pc, #160]	; (8006bfc <TIM_Base_SetConfig+0x128>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d013      	beq.n	8006b86 <TIM_Base_SetConfig+0xb2>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a27      	ldr	r2, [pc, #156]	; (8006c00 <TIM_Base_SetConfig+0x12c>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d00f      	beq.n	8006b86 <TIM_Base_SetConfig+0xb2>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a26      	ldr	r2, [pc, #152]	; (8006c04 <TIM_Base_SetConfig+0x130>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d00b      	beq.n	8006b86 <TIM_Base_SetConfig+0xb2>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a25      	ldr	r2, [pc, #148]	; (8006c08 <TIM_Base_SetConfig+0x134>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d007      	beq.n	8006b86 <TIM_Base_SetConfig+0xb2>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a24      	ldr	r2, [pc, #144]	; (8006c0c <TIM_Base_SetConfig+0x138>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d003      	beq.n	8006b86 <TIM_Base_SetConfig+0xb2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a23      	ldr	r2, [pc, #140]	; (8006c10 <TIM_Base_SetConfig+0x13c>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d108      	bne.n	8006b98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	689a      	ldr	r2, [r3, #8]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a0a      	ldr	r2, [pc, #40]	; (8006be8 <TIM_Base_SetConfig+0x114>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d003      	beq.n	8006bcc <TIM_Base_SetConfig+0xf8>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a0c      	ldr	r2, [pc, #48]	; (8006bf8 <TIM_Base_SetConfig+0x124>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d103      	bne.n	8006bd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	691a      	ldr	r2, [r3, #16]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	615a      	str	r2, [r3, #20]
}
 8006bda:	bf00      	nop
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	40010000 	.word	0x40010000
 8006bec:	40000400 	.word	0x40000400
 8006bf0:	40000800 	.word	0x40000800
 8006bf4:	40000c00 	.word	0x40000c00
 8006bf8:	40010400 	.word	0x40010400
 8006bfc:	40014000 	.word	0x40014000
 8006c00:	40014400 	.word	0x40014400
 8006c04:	40014800 	.word	0x40014800
 8006c08:	40001800 	.word	0x40001800
 8006c0c:	40001c00 	.word	0x40001c00
 8006c10:	40002000 	.word	0x40002000

08006c14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e03f      	b.n	8006cce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d106      	bne.n	8006c68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f7fb fadc 	bl	8002220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2224      	movs	r2, #36	; 0x24
 8006c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f9a7 	bl	8006fd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	691a      	ldr	r2, [r3, #16]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	695a      	ldr	r2, [r3, #20]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ca4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68da      	ldr	r2, [r3, #12]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2220      	movs	r2, #32
 8006cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3708      	adds	r7, #8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b08a      	sub	sp, #40	; 0x28
 8006cda:	af02      	add	r7, sp, #8
 8006cdc:	60f8      	str	r0, [r7, #12]
 8006cde:	60b9      	str	r1, [r7, #8]
 8006ce0:	603b      	str	r3, [r7, #0]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b20      	cmp	r3, #32
 8006cf4:	d17c      	bne.n	8006df0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d002      	beq.n	8006d02 <HAL_UART_Transmit+0x2c>
 8006cfc:	88fb      	ldrh	r3, [r7, #6]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e075      	b.n	8006df2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d101      	bne.n	8006d14 <HAL_UART_Transmit+0x3e>
 8006d10:	2302      	movs	r3, #2
 8006d12:	e06e      	b.n	8006df2 <HAL_UART_Transmit+0x11c>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2221      	movs	r2, #33	; 0x21
 8006d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d2a:	f7fb fd8b 	bl	8002844 <HAL_GetTick>
 8006d2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	88fa      	ldrh	r2, [r7, #6]
 8006d34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	88fa      	ldrh	r2, [r7, #6]
 8006d3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d44:	d108      	bne.n	8006d58 <HAL_UART_Transmit+0x82>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d104      	bne.n	8006d58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	61bb      	str	r3, [r7, #24]
 8006d56:	e003      	b.n	8006d60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006d68:	e02a      	b.n	8006dc0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2200      	movs	r2, #0
 8006d72:	2180      	movs	r1, #128	; 0x80
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f000 f8e2 	bl	8006f3e <UART_WaitOnFlagUntilTimeout>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d001      	beq.n	8006d84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e036      	b.n	8006df2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10b      	bne.n	8006da2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	881b      	ldrh	r3, [r3, #0]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	3302      	adds	r3, #2
 8006d9e:	61bb      	str	r3, [r7, #24]
 8006da0:	e007      	b.n	8006db2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	781a      	ldrb	r2, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	3301      	adds	r3, #1
 8006db0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	3b01      	subs	r3, #1
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1cf      	bne.n	8006d6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	9300      	str	r3, [sp, #0]
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	2140      	movs	r1, #64	; 0x40
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 f8b2 	bl	8006f3e <UART_WaitOnFlagUntilTimeout>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d001      	beq.n	8006de4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e006      	b.n	8006df2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2220      	movs	r2, #32
 8006de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	e000      	b.n	8006df2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006df0:	2302      	movs	r3, #2
  }
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3720      	adds	r7, #32
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b08a      	sub	sp, #40	; 0x28
 8006dfe:	af02      	add	r7, sp, #8
 8006e00:	60f8      	str	r0, [r7, #12]
 8006e02:	60b9      	str	r1, [r7, #8]
 8006e04:	603b      	str	r3, [r7, #0]
 8006e06:	4613      	mov	r3, r2
 8006e08:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b20      	cmp	r3, #32
 8006e18:	f040 808c 	bne.w	8006f34 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d002      	beq.n	8006e28 <HAL_UART_Receive+0x2e>
 8006e22:	88fb      	ldrh	r3, [r7, #6]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e084      	b.n	8006f36 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d101      	bne.n	8006e3a <HAL_UART_Receive+0x40>
 8006e36:	2302      	movs	r3, #2
 8006e38:	e07d      	b.n	8006f36 <HAL_UART_Receive+0x13c>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2222      	movs	r2, #34	; 0x22
 8006e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e56:	f7fb fcf5 	bl	8002844 <HAL_GetTick>
 8006e5a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	88fa      	ldrh	r2, [r7, #6]
 8006e60:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	88fa      	ldrh	r2, [r7, #6]
 8006e66:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e70:	d108      	bne.n	8006e84 <HAL_UART_Receive+0x8a>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d104      	bne.n	8006e84 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	61bb      	str	r3, [r7, #24]
 8006e82:	e003      	b.n	8006e8c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006e94:	e043      	b.n	8006f1e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	2120      	movs	r1, #32
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f000 f84c 	bl	8006f3e <UART_WaitOnFlagUntilTimeout>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d001      	beq.n	8006eb0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e042      	b.n	8006f36 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10c      	bne.n	8006ed0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	3302      	adds	r3, #2
 8006ecc:	61bb      	str	r3, [r7, #24]
 8006ece:	e01f      	b.n	8006f10 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ed8:	d007      	beq.n	8006eea <HAL_UART_Receive+0xf0>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10a      	bne.n	8006ef8 <HAL_UART_Receive+0xfe>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d106      	bne.n	8006ef8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	701a      	strb	r2, [r3, #0]
 8006ef6:	e008      	b.n	8006f0a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	3b01      	subs	r3, #1
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1b6      	bne.n	8006e96 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006f30:	2300      	movs	r3, #0
 8006f32:	e000      	b.n	8006f36 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006f34:	2302      	movs	r3, #2
  }
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3720      	adds	r7, #32
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b084      	sub	sp, #16
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	60f8      	str	r0, [r7, #12]
 8006f46:	60b9      	str	r1, [r7, #8]
 8006f48:	603b      	str	r3, [r7, #0]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f4e:	e02c      	b.n	8006faa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f56:	d028      	beq.n	8006faa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d007      	beq.n	8006f6e <UART_WaitOnFlagUntilTimeout+0x30>
 8006f5e:	f7fb fc71 	bl	8002844 <HAL_GetTick>
 8006f62:	4602      	mov	r2, r0
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	69ba      	ldr	r2, [r7, #24]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d21d      	bcs.n	8006faa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68da      	ldr	r2, [r3, #12]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f7c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	695a      	ldr	r2, [r3, #20]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f022 0201 	bic.w	r2, r2, #1
 8006f8c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2220      	movs	r2, #32
 8006f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2220      	movs	r2, #32
 8006f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e00f      	b.n	8006fca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	bf0c      	ite	eq
 8006fba:	2301      	moveq	r3, #1
 8006fbc:	2300      	movne	r3, #0
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	79fb      	ldrb	r3, [r7, #7]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d0c3      	beq.n	8006f50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
	...

08006fd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd8:	b09f      	sub	sp, #124	; 0x7c
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fea:	68d9      	ldr	r1, [r3, #12]
 8006fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	ea40 0301 	orr.w	r3, r0, r1
 8006ff4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ff8:	689a      	ldr	r2, [r3, #8]
 8006ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	431a      	orrs	r2, r3
 8007000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007002:	695b      	ldr	r3, [r3, #20]
 8007004:	431a      	orrs	r2, r3
 8007006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	4313      	orrs	r3, r2
 800700c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800700e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007018:	f021 010c 	bic.w	r1, r1, #12
 800701c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007022:	430b      	orrs	r3, r1
 8007024:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007032:	6999      	ldr	r1, [r3, #24]
 8007034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	ea40 0301 	orr.w	r3, r0, r1
 800703c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800703e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	4bc5      	ldr	r3, [pc, #788]	; (8007358 <UART_SetConfig+0x384>)
 8007044:	429a      	cmp	r2, r3
 8007046:	d004      	beq.n	8007052 <UART_SetConfig+0x7e>
 8007048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	4bc3      	ldr	r3, [pc, #780]	; (800735c <UART_SetConfig+0x388>)
 800704e:	429a      	cmp	r2, r3
 8007050:	d103      	bne.n	800705a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007052:	f7fd fde7 	bl	8004c24 <HAL_RCC_GetPCLK2Freq>
 8007056:	6778      	str	r0, [r7, #116]	; 0x74
 8007058:	e002      	b.n	8007060 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800705a:	f7fd fdcf 	bl	8004bfc <HAL_RCC_GetPCLK1Freq>
 800705e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007068:	f040 80b6 	bne.w	80071d8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800706c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800706e:	461c      	mov	r4, r3
 8007070:	f04f 0500 	mov.w	r5, #0
 8007074:	4622      	mov	r2, r4
 8007076:	462b      	mov	r3, r5
 8007078:	1891      	adds	r1, r2, r2
 800707a:	6439      	str	r1, [r7, #64]	; 0x40
 800707c:	415b      	adcs	r3, r3
 800707e:	647b      	str	r3, [r7, #68]	; 0x44
 8007080:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007084:	1912      	adds	r2, r2, r4
 8007086:	eb45 0303 	adc.w	r3, r5, r3
 800708a:	f04f 0000 	mov.w	r0, #0
 800708e:	f04f 0100 	mov.w	r1, #0
 8007092:	00d9      	lsls	r1, r3, #3
 8007094:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007098:	00d0      	lsls	r0, r2, #3
 800709a:	4602      	mov	r2, r0
 800709c:	460b      	mov	r3, r1
 800709e:	1911      	adds	r1, r2, r4
 80070a0:	6639      	str	r1, [r7, #96]	; 0x60
 80070a2:	416b      	adcs	r3, r5
 80070a4:	667b      	str	r3, [r7, #100]	; 0x64
 80070a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	461a      	mov	r2, r3
 80070ac:	f04f 0300 	mov.w	r3, #0
 80070b0:	1891      	adds	r1, r2, r2
 80070b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80070b4:	415b      	adcs	r3, r3
 80070b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80070bc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80070c0:	f7f9 f8ae 	bl	8000220 <__aeabi_uldivmod>
 80070c4:	4602      	mov	r2, r0
 80070c6:	460b      	mov	r3, r1
 80070c8:	4ba5      	ldr	r3, [pc, #660]	; (8007360 <UART_SetConfig+0x38c>)
 80070ca:	fba3 2302 	umull	r2, r3, r3, r2
 80070ce:	095b      	lsrs	r3, r3, #5
 80070d0:	011e      	lsls	r6, r3, #4
 80070d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070d4:	461c      	mov	r4, r3
 80070d6:	f04f 0500 	mov.w	r5, #0
 80070da:	4622      	mov	r2, r4
 80070dc:	462b      	mov	r3, r5
 80070de:	1891      	adds	r1, r2, r2
 80070e0:	6339      	str	r1, [r7, #48]	; 0x30
 80070e2:	415b      	adcs	r3, r3
 80070e4:	637b      	str	r3, [r7, #52]	; 0x34
 80070e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80070ea:	1912      	adds	r2, r2, r4
 80070ec:	eb45 0303 	adc.w	r3, r5, r3
 80070f0:	f04f 0000 	mov.w	r0, #0
 80070f4:	f04f 0100 	mov.w	r1, #0
 80070f8:	00d9      	lsls	r1, r3, #3
 80070fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80070fe:	00d0      	lsls	r0, r2, #3
 8007100:	4602      	mov	r2, r0
 8007102:	460b      	mov	r3, r1
 8007104:	1911      	adds	r1, r2, r4
 8007106:	65b9      	str	r1, [r7, #88]	; 0x58
 8007108:	416b      	adcs	r3, r5
 800710a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800710c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	461a      	mov	r2, r3
 8007112:	f04f 0300 	mov.w	r3, #0
 8007116:	1891      	adds	r1, r2, r2
 8007118:	62b9      	str	r1, [r7, #40]	; 0x28
 800711a:	415b      	adcs	r3, r3
 800711c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800711e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007122:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007126:	f7f9 f87b 	bl	8000220 <__aeabi_uldivmod>
 800712a:	4602      	mov	r2, r0
 800712c:	460b      	mov	r3, r1
 800712e:	4b8c      	ldr	r3, [pc, #560]	; (8007360 <UART_SetConfig+0x38c>)
 8007130:	fba3 1302 	umull	r1, r3, r3, r2
 8007134:	095b      	lsrs	r3, r3, #5
 8007136:	2164      	movs	r1, #100	; 0x64
 8007138:	fb01 f303 	mul.w	r3, r1, r3
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	00db      	lsls	r3, r3, #3
 8007140:	3332      	adds	r3, #50	; 0x32
 8007142:	4a87      	ldr	r2, [pc, #540]	; (8007360 <UART_SetConfig+0x38c>)
 8007144:	fba2 2303 	umull	r2, r3, r2, r3
 8007148:	095b      	lsrs	r3, r3, #5
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007150:	441e      	add	r6, r3
 8007152:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007154:	4618      	mov	r0, r3
 8007156:	f04f 0100 	mov.w	r1, #0
 800715a:	4602      	mov	r2, r0
 800715c:	460b      	mov	r3, r1
 800715e:	1894      	adds	r4, r2, r2
 8007160:	623c      	str	r4, [r7, #32]
 8007162:	415b      	adcs	r3, r3
 8007164:	627b      	str	r3, [r7, #36]	; 0x24
 8007166:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800716a:	1812      	adds	r2, r2, r0
 800716c:	eb41 0303 	adc.w	r3, r1, r3
 8007170:	f04f 0400 	mov.w	r4, #0
 8007174:	f04f 0500 	mov.w	r5, #0
 8007178:	00dd      	lsls	r5, r3, #3
 800717a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800717e:	00d4      	lsls	r4, r2, #3
 8007180:	4622      	mov	r2, r4
 8007182:	462b      	mov	r3, r5
 8007184:	1814      	adds	r4, r2, r0
 8007186:	653c      	str	r4, [r7, #80]	; 0x50
 8007188:	414b      	adcs	r3, r1
 800718a:	657b      	str	r3, [r7, #84]	; 0x54
 800718c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	461a      	mov	r2, r3
 8007192:	f04f 0300 	mov.w	r3, #0
 8007196:	1891      	adds	r1, r2, r2
 8007198:	61b9      	str	r1, [r7, #24]
 800719a:	415b      	adcs	r3, r3
 800719c:	61fb      	str	r3, [r7, #28]
 800719e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80071a6:	f7f9 f83b 	bl	8000220 <__aeabi_uldivmod>
 80071aa:	4602      	mov	r2, r0
 80071ac:	460b      	mov	r3, r1
 80071ae:	4b6c      	ldr	r3, [pc, #432]	; (8007360 <UART_SetConfig+0x38c>)
 80071b0:	fba3 1302 	umull	r1, r3, r3, r2
 80071b4:	095b      	lsrs	r3, r3, #5
 80071b6:	2164      	movs	r1, #100	; 0x64
 80071b8:	fb01 f303 	mul.w	r3, r1, r3
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	00db      	lsls	r3, r3, #3
 80071c0:	3332      	adds	r3, #50	; 0x32
 80071c2:	4a67      	ldr	r2, [pc, #412]	; (8007360 <UART_SetConfig+0x38c>)
 80071c4:	fba2 2303 	umull	r2, r3, r2, r3
 80071c8:	095b      	lsrs	r3, r3, #5
 80071ca:	f003 0207 	and.w	r2, r3, #7
 80071ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4432      	add	r2, r6
 80071d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80071d6:	e0b9      	b.n	800734c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071da:	461c      	mov	r4, r3
 80071dc:	f04f 0500 	mov.w	r5, #0
 80071e0:	4622      	mov	r2, r4
 80071e2:	462b      	mov	r3, r5
 80071e4:	1891      	adds	r1, r2, r2
 80071e6:	6139      	str	r1, [r7, #16]
 80071e8:	415b      	adcs	r3, r3
 80071ea:	617b      	str	r3, [r7, #20]
 80071ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80071f0:	1912      	adds	r2, r2, r4
 80071f2:	eb45 0303 	adc.w	r3, r5, r3
 80071f6:	f04f 0000 	mov.w	r0, #0
 80071fa:	f04f 0100 	mov.w	r1, #0
 80071fe:	00d9      	lsls	r1, r3, #3
 8007200:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007204:	00d0      	lsls	r0, r2, #3
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	eb12 0804 	adds.w	r8, r2, r4
 800720e:	eb43 0905 	adc.w	r9, r3, r5
 8007212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	4618      	mov	r0, r3
 8007218:	f04f 0100 	mov.w	r1, #0
 800721c:	f04f 0200 	mov.w	r2, #0
 8007220:	f04f 0300 	mov.w	r3, #0
 8007224:	008b      	lsls	r3, r1, #2
 8007226:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800722a:	0082      	lsls	r2, r0, #2
 800722c:	4640      	mov	r0, r8
 800722e:	4649      	mov	r1, r9
 8007230:	f7f8 fff6 	bl	8000220 <__aeabi_uldivmod>
 8007234:	4602      	mov	r2, r0
 8007236:	460b      	mov	r3, r1
 8007238:	4b49      	ldr	r3, [pc, #292]	; (8007360 <UART_SetConfig+0x38c>)
 800723a:	fba3 2302 	umull	r2, r3, r3, r2
 800723e:	095b      	lsrs	r3, r3, #5
 8007240:	011e      	lsls	r6, r3, #4
 8007242:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007244:	4618      	mov	r0, r3
 8007246:	f04f 0100 	mov.w	r1, #0
 800724a:	4602      	mov	r2, r0
 800724c:	460b      	mov	r3, r1
 800724e:	1894      	adds	r4, r2, r2
 8007250:	60bc      	str	r4, [r7, #8]
 8007252:	415b      	adcs	r3, r3
 8007254:	60fb      	str	r3, [r7, #12]
 8007256:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800725a:	1812      	adds	r2, r2, r0
 800725c:	eb41 0303 	adc.w	r3, r1, r3
 8007260:	f04f 0400 	mov.w	r4, #0
 8007264:	f04f 0500 	mov.w	r5, #0
 8007268:	00dd      	lsls	r5, r3, #3
 800726a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800726e:	00d4      	lsls	r4, r2, #3
 8007270:	4622      	mov	r2, r4
 8007272:	462b      	mov	r3, r5
 8007274:	1814      	adds	r4, r2, r0
 8007276:	64bc      	str	r4, [r7, #72]	; 0x48
 8007278:	414b      	adcs	r3, r1
 800727a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800727c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	4618      	mov	r0, r3
 8007282:	f04f 0100 	mov.w	r1, #0
 8007286:	f04f 0200 	mov.w	r2, #0
 800728a:	f04f 0300 	mov.w	r3, #0
 800728e:	008b      	lsls	r3, r1, #2
 8007290:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007294:	0082      	lsls	r2, r0, #2
 8007296:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800729a:	f7f8 ffc1 	bl	8000220 <__aeabi_uldivmod>
 800729e:	4602      	mov	r2, r0
 80072a0:	460b      	mov	r3, r1
 80072a2:	4b2f      	ldr	r3, [pc, #188]	; (8007360 <UART_SetConfig+0x38c>)
 80072a4:	fba3 1302 	umull	r1, r3, r3, r2
 80072a8:	095b      	lsrs	r3, r3, #5
 80072aa:	2164      	movs	r1, #100	; 0x64
 80072ac:	fb01 f303 	mul.w	r3, r1, r3
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	011b      	lsls	r3, r3, #4
 80072b4:	3332      	adds	r3, #50	; 0x32
 80072b6:	4a2a      	ldr	r2, [pc, #168]	; (8007360 <UART_SetConfig+0x38c>)
 80072b8:	fba2 2303 	umull	r2, r3, r2, r3
 80072bc:	095b      	lsrs	r3, r3, #5
 80072be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072c2:	441e      	add	r6, r3
 80072c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072c6:	4618      	mov	r0, r3
 80072c8:	f04f 0100 	mov.w	r1, #0
 80072cc:	4602      	mov	r2, r0
 80072ce:	460b      	mov	r3, r1
 80072d0:	1894      	adds	r4, r2, r2
 80072d2:	603c      	str	r4, [r7, #0]
 80072d4:	415b      	adcs	r3, r3
 80072d6:	607b      	str	r3, [r7, #4]
 80072d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072dc:	1812      	adds	r2, r2, r0
 80072de:	eb41 0303 	adc.w	r3, r1, r3
 80072e2:	f04f 0400 	mov.w	r4, #0
 80072e6:	f04f 0500 	mov.w	r5, #0
 80072ea:	00dd      	lsls	r5, r3, #3
 80072ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80072f0:	00d4      	lsls	r4, r2, #3
 80072f2:	4622      	mov	r2, r4
 80072f4:	462b      	mov	r3, r5
 80072f6:	eb12 0a00 	adds.w	sl, r2, r0
 80072fa:	eb43 0b01 	adc.w	fp, r3, r1
 80072fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	4618      	mov	r0, r3
 8007304:	f04f 0100 	mov.w	r1, #0
 8007308:	f04f 0200 	mov.w	r2, #0
 800730c:	f04f 0300 	mov.w	r3, #0
 8007310:	008b      	lsls	r3, r1, #2
 8007312:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007316:	0082      	lsls	r2, r0, #2
 8007318:	4650      	mov	r0, sl
 800731a:	4659      	mov	r1, fp
 800731c:	f7f8 ff80 	bl	8000220 <__aeabi_uldivmod>
 8007320:	4602      	mov	r2, r0
 8007322:	460b      	mov	r3, r1
 8007324:	4b0e      	ldr	r3, [pc, #56]	; (8007360 <UART_SetConfig+0x38c>)
 8007326:	fba3 1302 	umull	r1, r3, r3, r2
 800732a:	095b      	lsrs	r3, r3, #5
 800732c:	2164      	movs	r1, #100	; 0x64
 800732e:	fb01 f303 	mul.w	r3, r1, r3
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	011b      	lsls	r3, r3, #4
 8007336:	3332      	adds	r3, #50	; 0x32
 8007338:	4a09      	ldr	r2, [pc, #36]	; (8007360 <UART_SetConfig+0x38c>)
 800733a:	fba2 2303 	umull	r2, r3, r2, r3
 800733e:	095b      	lsrs	r3, r3, #5
 8007340:	f003 020f 	and.w	r2, r3, #15
 8007344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4432      	add	r2, r6
 800734a:	609a      	str	r2, [r3, #8]
}
 800734c:	bf00      	nop
 800734e:	377c      	adds	r7, #124	; 0x7c
 8007350:	46bd      	mov	sp, r7
 8007352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007356:	bf00      	nop
 8007358:	40011000 	.word	0x40011000
 800735c:	40011400 	.word	0x40011400
 8007360:	51eb851f 	.word	0x51eb851f

08007364 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007364:	b084      	sub	sp, #16
 8007366:	b580      	push	{r7, lr}
 8007368:	b084      	sub	sp, #16
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	f107 001c 	add.w	r0, r7, #28
 8007372:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007378:	2b01      	cmp	r3, #1
 800737a:	d122      	bne.n	80073c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007380:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80073a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d105      	bne.n	80073b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f001 fac0 	bl	800893c <USB_CoreReset>
 80073bc:	4603      	mov	r3, r0
 80073be:	73fb      	strb	r3, [r7, #15]
 80073c0:	e01a      	b.n	80073f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f001 fab4 	bl	800893c <USB_CoreReset>
 80073d4:	4603      	mov	r3, r0
 80073d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80073d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d106      	bne.n	80073ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	639a      	str	r2, [r3, #56]	; 0x38
 80073ea:	e005      	b.n	80073f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80073f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d10b      	bne.n	8007416 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	f043 0206 	orr.w	r2, r3, #6
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f043 0220 	orr.w	r2, r3, #32
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007416:	7bfb      	ldrb	r3, [r7, #15]
}
 8007418:	4618      	mov	r0, r3
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007422:	b004      	add	sp, #16
 8007424:	4770      	bx	lr
	...

08007428 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007428:	b480      	push	{r7}
 800742a:	b087      	sub	sp, #28
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	4613      	mov	r3, r2
 8007434:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007436:	79fb      	ldrb	r3, [r7, #7]
 8007438:	2b02      	cmp	r3, #2
 800743a:	d165      	bne.n	8007508 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	4a41      	ldr	r2, [pc, #260]	; (8007544 <USB_SetTurnaroundTime+0x11c>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d906      	bls.n	8007452 <USB_SetTurnaroundTime+0x2a>
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	4a40      	ldr	r2, [pc, #256]	; (8007548 <USB_SetTurnaroundTime+0x120>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d202      	bcs.n	8007452 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800744c:	230f      	movs	r3, #15
 800744e:	617b      	str	r3, [r7, #20]
 8007450:	e062      	b.n	8007518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	4a3c      	ldr	r2, [pc, #240]	; (8007548 <USB_SetTurnaroundTime+0x120>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d306      	bcc.n	8007468 <USB_SetTurnaroundTime+0x40>
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	4a3b      	ldr	r2, [pc, #236]	; (800754c <USB_SetTurnaroundTime+0x124>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d202      	bcs.n	8007468 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007462:	230e      	movs	r3, #14
 8007464:	617b      	str	r3, [r7, #20]
 8007466:	e057      	b.n	8007518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	4a38      	ldr	r2, [pc, #224]	; (800754c <USB_SetTurnaroundTime+0x124>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d306      	bcc.n	800747e <USB_SetTurnaroundTime+0x56>
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	4a37      	ldr	r2, [pc, #220]	; (8007550 <USB_SetTurnaroundTime+0x128>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d202      	bcs.n	800747e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007478:	230d      	movs	r3, #13
 800747a:	617b      	str	r3, [r7, #20]
 800747c:	e04c      	b.n	8007518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	4a33      	ldr	r2, [pc, #204]	; (8007550 <USB_SetTurnaroundTime+0x128>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d306      	bcc.n	8007494 <USB_SetTurnaroundTime+0x6c>
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	4a32      	ldr	r2, [pc, #200]	; (8007554 <USB_SetTurnaroundTime+0x12c>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d802      	bhi.n	8007494 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800748e:	230c      	movs	r3, #12
 8007490:	617b      	str	r3, [r7, #20]
 8007492:	e041      	b.n	8007518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	4a2f      	ldr	r2, [pc, #188]	; (8007554 <USB_SetTurnaroundTime+0x12c>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d906      	bls.n	80074aa <USB_SetTurnaroundTime+0x82>
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	4a2e      	ldr	r2, [pc, #184]	; (8007558 <USB_SetTurnaroundTime+0x130>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d802      	bhi.n	80074aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80074a4:	230b      	movs	r3, #11
 80074a6:	617b      	str	r3, [r7, #20]
 80074a8:	e036      	b.n	8007518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	4a2a      	ldr	r2, [pc, #168]	; (8007558 <USB_SetTurnaroundTime+0x130>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d906      	bls.n	80074c0 <USB_SetTurnaroundTime+0x98>
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	4a29      	ldr	r2, [pc, #164]	; (800755c <USB_SetTurnaroundTime+0x134>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d802      	bhi.n	80074c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80074ba:	230a      	movs	r3, #10
 80074bc:	617b      	str	r3, [r7, #20]
 80074be:	e02b      	b.n	8007518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	4a26      	ldr	r2, [pc, #152]	; (800755c <USB_SetTurnaroundTime+0x134>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d906      	bls.n	80074d6 <USB_SetTurnaroundTime+0xae>
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	4a25      	ldr	r2, [pc, #148]	; (8007560 <USB_SetTurnaroundTime+0x138>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d202      	bcs.n	80074d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80074d0:	2309      	movs	r3, #9
 80074d2:	617b      	str	r3, [r7, #20]
 80074d4:	e020      	b.n	8007518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	4a21      	ldr	r2, [pc, #132]	; (8007560 <USB_SetTurnaroundTime+0x138>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d306      	bcc.n	80074ec <USB_SetTurnaroundTime+0xc4>
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	4a20      	ldr	r2, [pc, #128]	; (8007564 <USB_SetTurnaroundTime+0x13c>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d802      	bhi.n	80074ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80074e6:	2308      	movs	r3, #8
 80074e8:	617b      	str	r3, [r7, #20]
 80074ea:	e015      	b.n	8007518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	4a1d      	ldr	r2, [pc, #116]	; (8007564 <USB_SetTurnaroundTime+0x13c>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d906      	bls.n	8007502 <USB_SetTurnaroundTime+0xda>
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	4a1c      	ldr	r2, [pc, #112]	; (8007568 <USB_SetTurnaroundTime+0x140>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d202      	bcs.n	8007502 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80074fc:	2307      	movs	r3, #7
 80074fe:	617b      	str	r3, [r7, #20]
 8007500:	e00a      	b.n	8007518 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007502:	2306      	movs	r3, #6
 8007504:	617b      	str	r3, [r7, #20]
 8007506:	e007      	b.n	8007518 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007508:	79fb      	ldrb	r3, [r7, #7]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d102      	bne.n	8007514 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800750e:	2309      	movs	r3, #9
 8007510:	617b      	str	r3, [r7, #20]
 8007512:	e001      	b.n	8007518 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007514:	2309      	movs	r3, #9
 8007516:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	68da      	ldr	r2, [r3, #12]
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	029b      	lsls	r3, r3, #10
 800752c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007530:	431a      	orrs	r2, r3
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	371c      	adds	r7, #28
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	00d8acbf 	.word	0x00d8acbf
 8007548:	00e4e1c0 	.word	0x00e4e1c0
 800754c:	00f42400 	.word	0x00f42400
 8007550:	01067380 	.word	0x01067380
 8007554:	011a499f 	.word	0x011a499f
 8007558:	01312cff 	.word	0x01312cff
 800755c:	014ca43f 	.word	0x014ca43f
 8007560:	016e3600 	.word	0x016e3600
 8007564:	01a6ab1f 	.word	0x01a6ab1f
 8007568:	01e84800 	.word	0x01e84800

0800756c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f043 0201 	orr.w	r2, r3, #1
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	370c      	adds	r7, #12
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr

0800758e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800758e:	b480      	push	{r7}
 8007590:	b083      	sub	sp, #12
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	f023 0201 	bic.w	r2, r3, #1
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	460b      	mov	r3, r1
 80075ba:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80075c8:	78fb      	ldrb	r3, [r7, #3]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d106      	bne.n	80075dc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	60da      	str	r2, [r3, #12]
 80075da:	e00b      	b.n	80075f4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80075dc:	78fb      	ldrb	r3, [r7, #3]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d106      	bne.n	80075f0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	60da      	str	r2, [r3, #12]
 80075ee:	e001      	b.n	80075f4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e003      	b.n	80075fc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80075f4:	2032      	movs	r0, #50	; 0x32
 80075f6:	f7fb f931 	bl	800285c <HAL_Delay>

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007604:	b084      	sub	sp, #16
 8007606:	b580      	push	{r7, lr}
 8007608:	b086      	sub	sp, #24
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007612:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800761e:	2300      	movs	r3, #0
 8007620:	613b      	str	r3, [r7, #16]
 8007622:	e009      	b.n	8007638 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	3340      	adds	r3, #64	; 0x40
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	4413      	add	r3, r2
 800762e:	2200      	movs	r2, #0
 8007630:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	3301      	adds	r3, #1
 8007636:	613b      	str	r3, [r7, #16]
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	2b0e      	cmp	r3, #14
 800763c:	d9f2      	bls.n	8007624 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800763e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007640:	2b00      	cmp	r3, #0
 8007642:	d11c      	bne.n	800767e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007652:	f043 0302 	orr.w	r3, r3, #2
 8007656:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	e005      	b.n	800768a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007682:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007690:	461a      	mov	r2, r3
 8007692:	2300      	movs	r3, #0
 8007694:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800769c:	4619      	mov	r1, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076a4:	461a      	mov	r2, r3
 80076a6:	680b      	ldr	r3, [r1, #0]
 80076a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d10c      	bne.n	80076ca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80076b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d104      	bne.n	80076c0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80076b6:	2100      	movs	r1, #0
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f949 	bl	8007950 <USB_SetDevSpeed>
 80076be:	e008      	b.n	80076d2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80076c0:	2101      	movs	r1, #1
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f944 	bl	8007950 <USB_SetDevSpeed>
 80076c8:	e003      	b.n	80076d2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80076ca:	2103      	movs	r1, #3
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 f93f 	bl	8007950 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80076d2:	2110      	movs	r1, #16
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 f8f3 	bl	80078c0 <USB_FlushTxFifo>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d001      	beq.n	80076e4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f911 	bl	800790c <USB_FlushRxFifo>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d001      	beq.n	80076f4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076fa:	461a      	mov	r2, r3
 80076fc:	2300      	movs	r3, #0
 80076fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007706:	461a      	mov	r2, r3
 8007708:	2300      	movs	r3, #0
 800770a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007712:	461a      	mov	r2, r3
 8007714:	2300      	movs	r3, #0
 8007716:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007718:	2300      	movs	r3, #0
 800771a:	613b      	str	r3, [r7, #16]
 800771c:	e043      	b.n	80077a6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	015a      	lsls	r2, r3, #5
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	4413      	add	r3, r2
 8007726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007734:	d118      	bne.n	8007768 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d10a      	bne.n	8007752 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	4413      	add	r3, r2
 8007744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007748:	461a      	mov	r2, r3
 800774a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800774e:	6013      	str	r3, [r2, #0]
 8007750:	e013      	b.n	800777a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	015a      	lsls	r2, r3, #5
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	4413      	add	r3, r2
 800775a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800775e:	461a      	mov	r2, r3
 8007760:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007764:	6013      	str	r3, [r2, #0]
 8007766:	e008      	b.n	800777a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	015a      	lsls	r2, r3, #5
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4413      	add	r3, r2
 8007770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007774:	461a      	mov	r2, r3
 8007776:	2300      	movs	r3, #0
 8007778:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	015a      	lsls	r2, r3, #5
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	4413      	add	r3, r2
 8007782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007786:	461a      	mov	r2, r3
 8007788:	2300      	movs	r3, #0
 800778a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4413      	add	r3, r2
 8007794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007798:	461a      	mov	r2, r3
 800779a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800779e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	3301      	adds	r3, #1
 80077a4:	613b      	str	r3, [r7, #16]
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d3b7      	bcc.n	800771e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077ae:	2300      	movs	r3, #0
 80077b0:	613b      	str	r3, [r7, #16]
 80077b2:	e043      	b.n	800783c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077ca:	d118      	bne.n	80077fe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10a      	bne.n	80077e8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	015a      	lsls	r2, r3, #5
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077de:	461a      	mov	r2, r3
 80077e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80077e4:	6013      	str	r3, [r2, #0]
 80077e6:	e013      	b.n	8007810 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f4:	461a      	mov	r2, r3
 80077f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	e008      	b.n	8007810 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	015a      	lsls	r2, r3, #5
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	4413      	add	r3, r2
 8007806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800780a:	461a      	mov	r2, r3
 800780c:	2300      	movs	r3, #0
 800780e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4413      	add	r3, r2
 8007818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800781c:	461a      	mov	r2, r3
 800781e:	2300      	movs	r3, #0
 8007820:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	015a      	lsls	r2, r3, #5
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	4413      	add	r3, r2
 800782a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800782e:	461a      	mov	r2, r3
 8007830:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007834:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	3301      	adds	r3, #1
 800783a:	613b      	str	r3, [r7, #16]
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	693a      	ldr	r2, [r7, #16]
 8007840:	429a      	cmp	r2, r3
 8007842:	d3b7      	bcc.n	80077b4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007852:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007856:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007864:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007868:	2b00      	cmp	r3, #0
 800786a:	d105      	bne.n	8007878 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	f043 0210 	orr.w	r2, r3, #16
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	699a      	ldr	r2, [r3, #24]
 800787c:	4b0f      	ldr	r3, [pc, #60]	; (80078bc <USB_DevInit+0x2b8>)
 800787e:	4313      	orrs	r3, r2
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007886:	2b00      	cmp	r3, #0
 8007888:	d005      	beq.n	8007896 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	f043 0208 	orr.w	r2, r3, #8
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007898:	2b01      	cmp	r3, #1
 800789a:	d107      	bne.n	80078ac <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078a4:	f043 0304 	orr.w	r3, r3, #4
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80078ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3718      	adds	r7, #24
 80078b2:	46bd      	mov	sp, r7
 80078b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078b8:	b004      	add	sp, #16
 80078ba:	4770      	bx	lr
 80078bc:	803c3800 	.word	0x803c3800

080078c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	019b      	lsls	r3, r3, #6
 80078d2:	f043 0220 	orr.w	r2, r3, #32
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	3301      	adds	r3, #1
 80078de:	60fb      	str	r3, [r7, #12]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	4a09      	ldr	r2, [pc, #36]	; (8007908 <USB_FlushTxFifo+0x48>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d901      	bls.n	80078ec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e006      	b.n	80078fa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	f003 0320 	and.w	r3, r3, #32
 80078f4:	2b20      	cmp	r3, #32
 80078f6:	d0f0      	beq.n	80078da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	00030d40 	.word	0x00030d40

0800790c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007914:	2300      	movs	r3, #0
 8007916:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2210      	movs	r2, #16
 800791c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	3301      	adds	r3, #1
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	4a09      	ldr	r2, [pc, #36]	; (800794c <USB_FlushRxFifo+0x40>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d901      	bls.n	8007930 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	e006      	b.n	800793e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	f003 0310 	and.w	r3, r3, #16
 8007938:	2b10      	cmp	r3, #16
 800793a:	d0f0      	beq.n	800791e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3714      	adds	r7, #20
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	00030d40 	.word	0x00030d40

08007950 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	460b      	mov	r3, r1
 800795a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	78fb      	ldrb	r3, [r7, #3]
 800796a:	68f9      	ldr	r1, [r7, #12]
 800796c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007970:	4313      	orrs	r3, r2
 8007972:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007982:	b480      	push	{r7}
 8007984:	b087      	sub	sp, #28
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f003 0306 	and.w	r3, r3, #6
 800799a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d102      	bne.n	80079a8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80079a2:	2300      	movs	r3, #0
 80079a4:	75fb      	strb	r3, [r7, #23]
 80079a6:	e00a      	b.n	80079be <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d002      	beq.n	80079b4 <USB_GetDevSpeed+0x32>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2b06      	cmp	r3, #6
 80079b2:	d102      	bne.n	80079ba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80079b4:	2302      	movs	r3, #2
 80079b6:	75fb      	strb	r3, [r7, #23]
 80079b8:	e001      	b.n	80079be <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80079ba:	230f      	movs	r3, #15
 80079bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80079be:	7dfb      	ldrb	r3, [r7, #23]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	371c      	adds	r7, #28
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	785b      	ldrb	r3, [r3, #1]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d13a      	bne.n	8007a5e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ee:	69da      	ldr	r2, [r3, #28]
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	f003 030f 	and.w	r3, r3, #15
 80079f8:	2101      	movs	r1, #1
 80079fa:	fa01 f303 	lsl.w	r3, r1, r3
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	68f9      	ldr	r1, [r7, #12]
 8007a02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a06:	4313      	orrs	r3, r2
 8007a08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	015a      	lsls	r2, r3, #5
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	4413      	add	r3, r2
 8007a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d155      	bne.n	8007acc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	015a      	lsls	r2, r3, #5
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	4413      	add	r3, r2
 8007a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	78db      	ldrb	r3, [r3, #3]
 8007a3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007a3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	059b      	lsls	r3, r3, #22
 8007a42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007a44:	4313      	orrs	r3, r2
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	0151      	lsls	r1, r2, #5
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	440a      	add	r2, r1
 8007a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a5a:	6013      	str	r3, [r2, #0]
 8007a5c:	e036      	b.n	8007acc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a64:	69da      	ldr	r2, [r3, #28]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	f003 030f 	and.w	r3, r3, #15
 8007a6e:	2101      	movs	r1, #1
 8007a70:	fa01 f303 	lsl.w	r3, r1, r3
 8007a74:	041b      	lsls	r3, r3, #16
 8007a76:	68f9      	ldr	r1, [r7, #12]
 8007a78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	015a      	lsls	r2, r3, #5
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4413      	add	r3, r2
 8007a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d11a      	bne.n	8007acc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	015a      	lsls	r2, r3, #5
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	78db      	ldrb	r3, [r3, #3]
 8007ab0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007ab2:	430b      	orrs	r3, r1
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	0151      	lsls	r1, r2, #5
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	440a      	add	r2, r1
 8007abe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3714      	adds	r7, #20
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
	...

08007adc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	785b      	ldrb	r3, [r3, #1]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d161      	bne.n	8007bbc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	015a      	lsls	r2, r3, #5
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b0e:	d11f      	bne.n	8007b50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	0151      	lsls	r1, r2, #5
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	440a      	add	r2, r1
 8007b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	015a      	lsls	r2, r3, #5
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	4413      	add	r3, r2
 8007b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	0151      	lsls	r1, r2, #5
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	440a      	add	r2, r1
 8007b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	f003 030f 	and.w	r3, r3, #15
 8007b60:	2101      	movs	r1, #1
 8007b62:	fa01 f303 	lsl.w	r3, r1, r3
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	43db      	mvns	r3, r3
 8007b6a:	68f9      	ldr	r1, [r7, #12]
 8007b6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b70:	4013      	ands	r3, r2
 8007b72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b7a:	69da      	ldr	r2, [r3, #28]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	f003 030f 	and.w	r3, r3, #15
 8007b84:	2101      	movs	r1, #1
 8007b86:	fa01 f303 	lsl.w	r3, r1, r3
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	43db      	mvns	r3, r3
 8007b8e:	68f9      	ldr	r1, [r7, #12]
 8007b90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b94:	4013      	ands	r3, r2
 8007b96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	015a      	lsls	r2, r3, #5
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	0159      	lsls	r1, r3, #5
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	440b      	add	r3, r1
 8007bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	4b35      	ldr	r3, [pc, #212]	; (8007c8c <USB_DeactivateEndpoint+0x1b0>)
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	600b      	str	r3, [r1, #0]
 8007bba:	e060      	b.n	8007c7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bd2:	d11f      	bne.n	8007c14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	0151      	lsls	r1, r2, #5
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	440a      	add	r2, r1
 8007bea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007bf2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	015a      	lsls	r2, r3, #5
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	0151      	lsls	r1, r2, #5
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	440a      	add	r2, r1
 8007c0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	f003 030f 	and.w	r3, r3, #15
 8007c24:	2101      	movs	r1, #1
 8007c26:	fa01 f303 	lsl.w	r3, r1, r3
 8007c2a:	041b      	lsls	r3, r3, #16
 8007c2c:	43db      	mvns	r3, r3
 8007c2e:	68f9      	ldr	r1, [r7, #12]
 8007c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c34:	4013      	ands	r3, r2
 8007c36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c3e:	69da      	ldr	r2, [r3, #28]
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	f003 030f 	and.w	r3, r3, #15
 8007c48:	2101      	movs	r1, #1
 8007c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c4e:	041b      	lsls	r3, r3, #16
 8007c50:	43db      	mvns	r3, r3
 8007c52:	68f9      	ldr	r1, [r7, #12]
 8007c54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c58:	4013      	ands	r3, r2
 8007c5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	015a      	lsls	r2, r3, #5
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4413      	add	r3, r2
 8007c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	0159      	lsls	r1, r3, #5
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	440b      	add	r3, r1
 8007c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c76:	4619      	mov	r1, r3
 8007c78:	4b05      	ldr	r3, [pc, #20]	; (8007c90 <USB_DeactivateEndpoint+0x1b4>)
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	ec337800 	.word	0xec337800
 8007c90:	eff37800 	.word	0xeff37800

08007c94 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08a      	sub	sp, #40	; 0x28
 8007c98:	af02      	add	r7, sp, #8
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	785b      	ldrb	r3, [r3, #1]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	f040 815c 	bne.w	8007f6e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	695b      	ldr	r3, [r3, #20]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d132      	bne.n	8007d24 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	015a      	lsls	r2, r3, #5
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	69ba      	ldr	r2, [r7, #24]
 8007cce:	0151      	lsls	r1, r2, #5
 8007cd0:	69fa      	ldr	r2, [r7, #28]
 8007cd2:	440a      	add	r2, r1
 8007cd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007cdc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ce0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	015a      	lsls	r2, r3, #5
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	4413      	add	r3, r2
 8007cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	0151      	lsls	r1, r2, #5
 8007cf4:	69fa      	ldr	r2, [r7, #28]
 8007cf6:	440a      	add	r2, r1
 8007cf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	015a      	lsls	r2, r3, #5
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	4413      	add	r3, r2
 8007d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	69ba      	ldr	r2, [r7, #24]
 8007d12:	0151      	lsls	r1, r2, #5
 8007d14:	69fa      	ldr	r2, [r7, #28]
 8007d16:	440a      	add	r2, r1
 8007d18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d1c:	0cdb      	lsrs	r3, r3, #19
 8007d1e:	04db      	lsls	r3, r3, #19
 8007d20:	6113      	str	r3, [r2, #16]
 8007d22:	e074      	b.n	8007e0e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	015a      	lsls	r2, r3, #5
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	69ba      	ldr	r2, [r7, #24]
 8007d34:	0151      	lsls	r1, r2, #5
 8007d36:	69fa      	ldr	r2, [r7, #28]
 8007d38:	440a      	add	r2, r1
 8007d3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d3e:	0cdb      	lsrs	r3, r3, #19
 8007d40:	04db      	lsls	r3, r3, #19
 8007d42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	69ba      	ldr	r2, [r7, #24]
 8007d54:	0151      	lsls	r1, r2, #5
 8007d56:	69fa      	ldr	r2, [r7, #28]
 8007d58:	440a      	add	r2, r1
 8007d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	015a      	lsls	r2, r3, #5
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	4413      	add	r3, r2
 8007d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d74:	691a      	ldr	r2, [r3, #16]
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	6959      	ldr	r1, [r3, #20]
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	440b      	add	r3, r1
 8007d80:	1e59      	subs	r1, r3, #1
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d8a:	04d9      	lsls	r1, r3, #19
 8007d8c:	4b9d      	ldr	r3, [pc, #628]	; (8008004 <USB_EPStartXfer+0x370>)
 8007d8e:	400b      	ands	r3, r1
 8007d90:	69b9      	ldr	r1, [r7, #24]
 8007d92:	0148      	lsls	r0, r1, #5
 8007d94:	69f9      	ldr	r1, [r7, #28]
 8007d96:	4401      	add	r1, r0
 8007d98:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	015a      	lsls	r2, r3, #5
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	4413      	add	r3, r2
 8007da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dac:	691a      	ldr	r2, [r3, #16]
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007db6:	69b9      	ldr	r1, [r7, #24]
 8007db8:	0148      	lsls	r0, r1, #5
 8007dba:	69f9      	ldr	r1, [r7, #28]
 8007dbc:	4401      	add	r1, r0
 8007dbe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	78db      	ldrb	r3, [r3, #3]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d11f      	bne.n	8007e0e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	015a      	lsls	r2, r3, #5
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	69ba      	ldr	r2, [r7, #24]
 8007dde:	0151      	lsls	r1, r2, #5
 8007de0:	69fa      	ldr	r2, [r7, #28]
 8007de2:	440a      	add	r2, r1
 8007de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007de8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007dec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	015a      	lsls	r2, r3, #5
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	4413      	add	r3, r2
 8007df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	69ba      	ldr	r2, [r7, #24]
 8007dfe:	0151      	lsls	r1, r2, #5
 8007e00:	69fa      	ldr	r2, [r7, #28]
 8007e02:	440a      	add	r2, r1
 8007e04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e0c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007e0e:	79fb      	ldrb	r3, [r7, #7]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d14b      	bne.n	8007eac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d009      	beq.n	8007e30 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	015a      	lsls	r2, r3, #5
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	4413      	add	r3, r2
 8007e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e28:	461a      	mov	r2, r3
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	78db      	ldrb	r3, [r3, #3]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d128      	bne.n	8007e8a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d110      	bne.n	8007e6a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	015a      	lsls	r2, r3, #5
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	69ba      	ldr	r2, [r7, #24]
 8007e58:	0151      	lsls	r1, r2, #5
 8007e5a:	69fa      	ldr	r2, [r7, #28]
 8007e5c:	440a      	add	r2, r1
 8007e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e66:	6013      	str	r3, [r2, #0]
 8007e68:	e00f      	b.n	8007e8a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	015a      	lsls	r2, r3, #5
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	4413      	add	r3, r2
 8007e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	69ba      	ldr	r2, [r7, #24]
 8007e7a:	0151      	lsls	r1, r2, #5
 8007e7c:	69fa      	ldr	r2, [r7, #28]
 8007e7e:	440a      	add	r2, r1
 8007e80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e88:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	015a      	lsls	r2, r3, #5
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	4413      	add	r3, r2
 8007e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	69ba      	ldr	r2, [r7, #24]
 8007e9a:	0151      	lsls	r1, r2, #5
 8007e9c:	69fa      	ldr	r2, [r7, #28]
 8007e9e:	440a      	add	r2, r1
 8007ea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ea4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ea8:	6013      	str	r3, [r2, #0]
 8007eaa:	e12f      	b.n	800810c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	015a      	lsls	r2, r3, #5
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	69ba      	ldr	r2, [r7, #24]
 8007ebc:	0151      	lsls	r1, r2, #5
 8007ebe:	69fa      	ldr	r2, [r7, #28]
 8007ec0:	440a      	add	r2, r1
 8007ec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ec6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007eca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	78db      	ldrb	r3, [r3, #3]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d015      	beq.n	8007f00 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	695b      	ldr	r3, [r3, #20]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f000 8117 	beq.w	800810c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	f003 030f 	and.w	r3, r3, #15
 8007eee:	2101      	movs	r1, #1
 8007ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ef4:	69f9      	ldr	r1, [r7, #28]
 8007ef6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007efa:	4313      	orrs	r3, r2
 8007efc:	634b      	str	r3, [r1, #52]	; 0x34
 8007efe:	e105      	b.n	800810c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d110      	bne.n	8007f32 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	015a      	lsls	r2, r3, #5
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	4413      	add	r3, r2
 8007f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	69ba      	ldr	r2, [r7, #24]
 8007f20:	0151      	lsls	r1, r2, #5
 8007f22:	69fa      	ldr	r2, [r7, #28]
 8007f24:	440a      	add	r2, r1
 8007f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f2e:	6013      	str	r3, [r2, #0]
 8007f30:	e00f      	b.n	8007f52 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	015a      	lsls	r2, r3, #5
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	4413      	add	r3, r2
 8007f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	69ba      	ldr	r2, [r7, #24]
 8007f42:	0151      	lsls	r1, r2, #5
 8007f44:	69fa      	ldr	r2, [r7, #28]
 8007f46:	440a      	add	r2, r1
 8007f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f50:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	68d9      	ldr	r1, [r3, #12]
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	781a      	ldrb	r2, [r3, #0]
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	b298      	uxth	r0, r3
 8007f60:	79fb      	ldrb	r3, [r7, #7]
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	4603      	mov	r3, r0
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f000 fa2b 	bl	80083c2 <USB_WritePacket>
 8007f6c:	e0ce      	b.n	800810c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	015a      	lsls	r2, r3, #5
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	69ba      	ldr	r2, [r7, #24]
 8007f7e:	0151      	lsls	r1, r2, #5
 8007f80:	69fa      	ldr	r2, [r7, #28]
 8007f82:	440a      	add	r2, r1
 8007f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f88:	0cdb      	lsrs	r3, r3, #19
 8007f8a:	04db      	lsls	r3, r3, #19
 8007f8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	015a      	lsls	r2, r3, #5
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	4413      	add	r3, r2
 8007f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	69ba      	ldr	r2, [r7, #24]
 8007f9e:	0151      	lsls	r1, r2, #5
 8007fa0:	69fa      	ldr	r2, [r7, #28]
 8007fa2:	440a      	add	r2, r1
 8007fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fa8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007fac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007fb0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d126      	bne.n	8008008 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	015a      	lsls	r2, r3, #5
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc6:	691a      	ldr	r2, [r3, #16]
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fd0:	69b9      	ldr	r1, [r7, #24]
 8007fd2:	0148      	lsls	r0, r1, #5
 8007fd4:	69f9      	ldr	r1, [r7, #28]
 8007fd6:	4401      	add	r1, r0
 8007fd8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	015a      	lsls	r2, r3, #5
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	69ba      	ldr	r2, [r7, #24]
 8007ff0:	0151      	lsls	r1, r2, #5
 8007ff2:	69fa      	ldr	r2, [r7, #28]
 8007ff4:	440a      	add	r2, r1
 8007ff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ffa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ffe:	6113      	str	r3, [r2, #16]
 8008000:	e036      	b.n	8008070 <USB_EPStartXfer+0x3dc>
 8008002:	bf00      	nop
 8008004:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	695a      	ldr	r2, [r3, #20]
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	4413      	add	r3, r2
 8008012:	1e5a      	subs	r2, r3, #1
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	fbb2 f3f3 	udiv	r3, r2, r3
 800801c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	015a      	lsls	r2, r3, #5
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	4413      	add	r3, r2
 8008026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800802a:	691a      	ldr	r2, [r3, #16]
 800802c:	8afb      	ldrh	r3, [r7, #22]
 800802e:	04d9      	lsls	r1, r3, #19
 8008030:	4b39      	ldr	r3, [pc, #228]	; (8008118 <USB_EPStartXfer+0x484>)
 8008032:	400b      	ands	r3, r1
 8008034:	69b9      	ldr	r1, [r7, #24]
 8008036:	0148      	lsls	r0, r1, #5
 8008038:	69f9      	ldr	r1, [r7, #28]
 800803a:	4401      	add	r1, r0
 800803c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008040:	4313      	orrs	r3, r2
 8008042:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	015a      	lsls	r2, r3, #5
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	4413      	add	r3, r2
 800804c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008050:	691a      	ldr	r2, [r3, #16]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	8af9      	ldrh	r1, [r7, #22]
 8008058:	fb01 f303 	mul.w	r3, r1, r3
 800805c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008060:	69b9      	ldr	r1, [r7, #24]
 8008062:	0148      	lsls	r0, r1, #5
 8008064:	69f9      	ldr	r1, [r7, #28]
 8008066:	4401      	add	r1, r0
 8008068:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800806c:	4313      	orrs	r3, r2
 800806e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008070:	79fb      	ldrb	r3, [r7, #7]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d10d      	bne.n	8008092 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d009      	beq.n	8008092 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	68d9      	ldr	r1, [r3, #12]
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	015a      	lsls	r2, r3, #5
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	4413      	add	r3, r2
 800808a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800808e:	460a      	mov	r2, r1
 8008090:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	78db      	ldrb	r3, [r3, #3]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d128      	bne.n	80080ec <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d110      	bne.n	80080cc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	015a      	lsls	r2, r3, #5
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	4413      	add	r3, r2
 80080b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	69ba      	ldr	r2, [r7, #24]
 80080ba:	0151      	lsls	r1, r2, #5
 80080bc:	69fa      	ldr	r2, [r7, #28]
 80080be:	440a      	add	r2, r1
 80080c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080c8:	6013      	str	r3, [r2, #0]
 80080ca:	e00f      	b.n	80080ec <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	015a      	lsls	r2, r3, #5
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	4413      	add	r3, r2
 80080d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	69ba      	ldr	r2, [r7, #24]
 80080dc:	0151      	lsls	r1, r2, #5
 80080de:	69fa      	ldr	r2, [r7, #28]
 80080e0:	440a      	add	r2, r1
 80080e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	015a      	lsls	r2, r3, #5
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	4413      	add	r3, r2
 80080f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	0151      	lsls	r1, r2, #5
 80080fe:	69fa      	ldr	r2, [r7, #28]
 8008100:	440a      	add	r2, r1
 8008102:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008106:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800810a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3720      	adds	r7, #32
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	1ff80000 	.word	0x1ff80000

0800811c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800811c:	b480      	push	{r7}
 800811e:	b087      	sub	sp, #28
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	4613      	mov	r3, r2
 8008128:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	785b      	ldrb	r3, [r3, #1]
 8008138:	2b01      	cmp	r3, #1
 800813a:	f040 80cd 	bne.w	80082d8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d132      	bne.n	80081ac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	015a      	lsls	r2, r3, #5
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	4413      	add	r3, r2
 800814e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	693a      	ldr	r2, [r7, #16]
 8008156:	0151      	lsls	r1, r2, #5
 8008158:	697a      	ldr	r2, [r7, #20]
 800815a:	440a      	add	r2, r1
 800815c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008160:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008164:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008168:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	4413      	add	r3, r2
 8008172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	693a      	ldr	r2, [r7, #16]
 800817a:	0151      	lsls	r1, r2, #5
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	440a      	add	r2, r1
 8008180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008184:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008188:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	015a      	lsls	r2, r3, #5
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	4413      	add	r3, r2
 8008192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	693a      	ldr	r2, [r7, #16]
 800819a:	0151      	lsls	r1, r2, #5
 800819c:	697a      	ldr	r2, [r7, #20]
 800819e:	440a      	add	r2, r1
 80081a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081a4:	0cdb      	lsrs	r3, r3, #19
 80081a6:	04db      	lsls	r3, r3, #19
 80081a8:	6113      	str	r3, [r2, #16]
 80081aa:	e04e      	b.n	800824a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	015a      	lsls	r2, r3, #5
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	4413      	add	r3, r2
 80081b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	693a      	ldr	r2, [r7, #16]
 80081bc:	0151      	lsls	r1, r2, #5
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	440a      	add	r2, r1
 80081c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081c6:	0cdb      	lsrs	r3, r3, #19
 80081c8:	04db      	lsls	r3, r3, #19
 80081ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	015a      	lsls	r2, r3, #5
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	4413      	add	r3, r2
 80081d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	0151      	lsls	r1, r2, #5
 80081de:	697a      	ldr	r2, [r7, #20]
 80081e0:	440a      	add	r2, r1
 80081e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80081ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80081ee:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	695a      	ldr	r2, [r3, #20]
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d903      	bls.n	8008204 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	689a      	ldr	r2, [r3, #8]
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	015a      	lsls	r2, r3, #5
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	4413      	add	r3, r2
 800820c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	0151      	lsls	r1, r2, #5
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	440a      	add	r2, r1
 800821a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800821e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008222:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	015a      	lsls	r2, r3, #5
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	4413      	add	r3, r2
 800822c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008230:	691a      	ldr	r2, [r3, #16]
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	695b      	ldr	r3, [r3, #20]
 8008236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800823a:	6939      	ldr	r1, [r7, #16]
 800823c:	0148      	lsls	r0, r1, #5
 800823e:	6979      	ldr	r1, [r7, #20]
 8008240:	4401      	add	r1, r0
 8008242:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008246:	4313      	orrs	r3, r2
 8008248:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800824a:	79fb      	ldrb	r3, [r7, #7]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d11e      	bne.n	800828e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d009      	beq.n	800826c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	015a      	lsls	r2, r3, #5
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	4413      	add	r3, r2
 8008260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008264:	461a      	mov	r2, r3
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	4413      	add	r3, r2
 8008274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	693a      	ldr	r2, [r7, #16]
 800827c:	0151      	lsls	r1, r2, #5
 800827e:	697a      	ldr	r2, [r7, #20]
 8008280:	440a      	add	r2, r1
 8008282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008286:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800828a:	6013      	str	r3, [r2, #0]
 800828c:	e092      	b.n	80083b4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	015a      	lsls	r2, r3, #5
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	4413      	add	r3, r2
 8008296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	0151      	lsls	r1, r2, #5
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	440a      	add	r2, r1
 80082a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082ac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d07e      	beq.n	80083b4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	f003 030f 	and.w	r3, r3, #15
 80082c6:	2101      	movs	r1, #1
 80082c8:	fa01 f303 	lsl.w	r3, r1, r3
 80082cc:	6979      	ldr	r1, [r7, #20]
 80082ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082d2:	4313      	orrs	r3, r2
 80082d4:	634b      	str	r3, [r1, #52]	; 0x34
 80082d6:	e06d      	b.n	80083b4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	015a      	lsls	r2, r3, #5
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	4413      	add	r3, r2
 80082e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	693a      	ldr	r2, [r7, #16]
 80082e8:	0151      	lsls	r1, r2, #5
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	440a      	add	r2, r1
 80082ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082f2:	0cdb      	lsrs	r3, r3, #19
 80082f4:	04db      	lsls	r3, r3, #19
 80082f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	015a      	lsls	r2, r3, #5
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	4413      	add	r3, r2
 8008300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	0151      	lsls	r1, r2, #5
 800830a:	697a      	ldr	r2, [r7, #20]
 800830c:	440a      	add	r2, r1
 800830e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008312:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008316:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800831a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	695b      	ldr	r3, [r3, #20]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d003      	beq.n	800832c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	689a      	ldr	r2, [r3, #8]
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	015a      	lsls	r2, r3, #5
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	4413      	add	r3, r2
 8008334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	0151      	lsls	r1, r2, #5
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	440a      	add	r2, r1
 8008342:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008346:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800834a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	015a      	lsls	r2, r3, #5
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	4413      	add	r3, r2
 8008354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008358:	691a      	ldr	r2, [r3, #16]
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008362:	6939      	ldr	r1, [r7, #16]
 8008364:	0148      	lsls	r0, r1, #5
 8008366:	6979      	ldr	r1, [r7, #20]
 8008368:	4401      	add	r1, r0
 800836a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800836e:	4313      	orrs	r3, r2
 8008370:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008372:	79fb      	ldrb	r3, [r7, #7]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d10d      	bne.n	8008394 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d009      	beq.n	8008394 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	68d9      	ldr	r1, [r3, #12]
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	015a      	lsls	r2, r3, #5
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	4413      	add	r3, r2
 800838c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008390:	460a      	mov	r2, r1
 8008392:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	015a      	lsls	r2, r3, #5
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	4413      	add	r3, r2
 800839c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	693a      	ldr	r2, [r7, #16]
 80083a4:	0151      	lsls	r1, r2, #5
 80083a6:	697a      	ldr	r2, [r7, #20]
 80083a8:	440a      	add	r2, r1
 80083aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80083b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	371c      	adds	r7, #28
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b089      	sub	sp, #36	; 0x24
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	60f8      	str	r0, [r7, #12]
 80083ca:	60b9      	str	r1, [r7, #8]
 80083cc:	4611      	mov	r1, r2
 80083ce:	461a      	mov	r2, r3
 80083d0:	460b      	mov	r3, r1
 80083d2:	71fb      	strb	r3, [r7, #7]
 80083d4:	4613      	mov	r3, r2
 80083d6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80083e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d11a      	bne.n	800841e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80083e8:	88bb      	ldrh	r3, [r7, #4]
 80083ea:	3303      	adds	r3, #3
 80083ec:	089b      	lsrs	r3, r3, #2
 80083ee:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80083f0:	2300      	movs	r3, #0
 80083f2:	61bb      	str	r3, [r7, #24]
 80083f4:	e00f      	b.n	8008416 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80083f6:	79fb      	ldrb	r3, [r7, #7]
 80083f8:	031a      	lsls	r2, r3, #12
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	4413      	add	r3, r2
 80083fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008402:	461a      	mov	r2, r3
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6013      	str	r3, [r2, #0]
      pSrc++;
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	3304      	adds	r3, #4
 800840e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	3301      	adds	r3, #1
 8008414:	61bb      	str	r3, [r7, #24]
 8008416:	69ba      	ldr	r2, [r7, #24]
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	429a      	cmp	r2, r3
 800841c:	d3eb      	bcc.n	80083f6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	3724      	adds	r7, #36	; 0x24
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800842c:	b480      	push	{r7}
 800842e:	b089      	sub	sp, #36	; 0x24
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	4613      	mov	r3, r2
 8008438:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008442:	88fb      	ldrh	r3, [r7, #6]
 8008444:	3303      	adds	r3, #3
 8008446:	089b      	lsrs	r3, r3, #2
 8008448:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800844a:	2300      	movs	r3, #0
 800844c:	61bb      	str	r3, [r7, #24]
 800844e:	e00b      	b.n	8008468 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	601a      	str	r2, [r3, #0]
    pDest++;
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	3304      	adds	r3, #4
 8008460:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	3301      	adds	r3, #1
 8008466:	61bb      	str	r3, [r7, #24]
 8008468:	69ba      	ldr	r2, [r7, #24]
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	429a      	cmp	r2, r3
 800846e:	d3ef      	bcc.n	8008450 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008470:	69fb      	ldr	r3, [r7, #28]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3724      	adds	r7, #36	; 0x24
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800847e:	b480      	push	{r7}
 8008480:	b085      	sub	sp, #20
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
 8008486:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	785b      	ldrb	r3, [r3, #1]
 8008496:	2b01      	cmp	r3, #1
 8008498:	d12c      	bne.n	80084f4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	015a      	lsls	r2, r3, #5
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	4413      	add	r3, r2
 80084a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	db12      	blt.n	80084d2 <USB_EPSetStall+0x54>
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00f      	beq.n	80084d2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	015a      	lsls	r2, r3, #5
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	4413      	add	r3, r2
 80084ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	0151      	lsls	r1, r2, #5
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	440a      	add	r2, r1
 80084c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80084d0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	015a      	lsls	r2, r3, #5
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	4413      	add	r3, r2
 80084da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68ba      	ldr	r2, [r7, #8]
 80084e2:	0151      	lsls	r1, r2, #5
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	440a      	add	r2, r1
 80084e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084f0:	6013      	str	r3, [r2, #0]
 80084f2:	e02b      	b.n	800854c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	015a      	lsls	r2, r3, #5
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	db12      	blt.n	800852c <USB_EPSetStall+0xae>
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00f      	beq.n	800852c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	015a      	lsls	r2, r3, #5
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	4413      	add	r3, r2
 8008514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68ba      	ldr	r2, [r7, #8]
 800851c:	0151      	lsls	r1, r2, #5
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	440a      	add	r2, r1
 8008522:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008526:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800852a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	015a      	lsls	r2, r3, #5
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	4413      	add	r3, r2
 8008534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	0151      	lsls	r1, r2, #5
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	440a      	add	r2, r1
 8008542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008546:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800854a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3714      	adds	r7, #20
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr

0800855a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800855a:	b480      	push	{r7}
 800855c:	b085      	sub	sp, #20
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
 8008562:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	785b      	ldrb	r3, [r3, #1]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d128      	bne.n	80085c8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	015a      	lsls	r2, r3, #5
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	4413      	add	r3, r2
 800857e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68ba      	ldr	r2, [r7, #8]
 8008586:	0151      	lsls	r1, r2, #5
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	440a      	add	r2, r1
 800858c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008590:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008594:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	78db      	ldrb	r3, [r3, #3]
 800859a:	2b03      	cmp	r3, #3
 800859c:	d003      	beq.n	80085a6 <USB_EPClearStall+0x4c>
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	78db      	ldrb	r3, [r3, #3]
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d138      	bne.n	8008618 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	015a      	lsls	r2, r3, #5
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	4413      	add	r3, r2
 80085ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68ba      	ldr	r2, [r7, #8]
 80085b6:	0151      	lsls	r1, r2, #5
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	440a      	add	r2, r1
 80085bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085c4:	6013      	str	r3, [r2, #0]
 80085c6:	e027      	b.n	8008618 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	015a      	lsls	r2, r3, #5
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	4413      	add	r3, r2
 80085d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	0151      	lsls	r1, r2, #5
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	440a      	add	r2, r1
 80085de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80085e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	78db      	ldrb	r3, [r3, #3]
 80085ec:	2b03      	cmp	r3, #3
 80085ee:	d003      	beq.n	80085f8 <USB_EPClearStall+0x9e>
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	78db      	ldrb	r3, [r3, #3]
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d10f      	bne.n	8008618 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	015a      	lsls	r2, r3, #5
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	4413      	add	r3, r2
 8008600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	0151      	lsls	r1, r2, #5
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	440a      	add	r2, r1
 800860e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008616:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3714      	adds	r7, #20
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr

08008626 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008626:	b480      	push	{r7}
 8008628:	b085      	sub	sp, #20
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	460b      	mov	r3, r1
 8008630:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008644:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008648:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	78fb      	ldrb	r3, [r7, #3]
 8008654:	011b      	lsls	r3, r3, #4
 8008656:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800865a:	68f9      	ldr	r1, [r7, #12]
 800865c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008660:	4313      	orrs	r3, r2
 8008662:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3714      	adds	r7, #20
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008672:	b480      	push	{r7}
 8008674:	b085      	sub	sp, #20
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800868c:	f023 0303 	bic.w	r3, r3, #3
 8008690:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086a0:	f023 0302 	bic.w	r3, r3, #2
 80086a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3714      	adds	r7, #20
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80086ce:	f023 0303 	bic.w	r3, r3, #3
 80086d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086e2:	f043 0302 	orr.w	r3, r3, #2
 80086e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80086f6:	b480      	push	{r7}
 80086f8:	b085      	sub	sp, #20
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	4013      	ands	r3, r2
 800870c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800870e:	68fb      	ldr	r3, [r7, #12]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800872e:	699b      	ldr	r3, [r3, #24]
 8008730:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	4013      	ands	r3, r2
 800873e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	0c1b      	lsrs	r3, r3, #16
}
 8008744:	4618      	mov	r0, r3
 8008746:	3714      	adds	r7, #20
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008762:	699b      	ldr	r3, [r3, #24]
 8008764:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800876c:	69db      	ldr	r3, [r3, #28]
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	4013      	ands	r3, r2
 8008772:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	b29b      	uxth	r3, r3
}
 8008778:	4618      	mov	r0, r3
 800877a:	3714      	adds	r7, #20
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	460b      	mov	r3, r1
 800878e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008794:	78fb      	ldrb	r3, [r7, #3]
 8008796:	015a      	lsls	r2, r3, #5
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	4413      	add	r3, r2
 800879c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087aa:	695b      	ldr	r3, [r3, #20]
 80087ac:	68ba      	ldr	r2, [r7, #8]
 80087ae:	4013      	ands	r3, r2
 80087b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80087b2:	68bb      	ldr	r3, [r7, #8]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3714      	adds	r7, #20
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b087      	sub	sp, #28
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	460b      	mov	r3, r1
 80087ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80087e4:	78fb      	ldrb	r3, [r7, #3]
 80087e6:	f003 030f 	and.w	r3, r3, #15
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	fa22 f303 	lsr.w	r3, r2, r3
 80087f0:	01db      	lsls	r3, r3, #7
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	693a      	ldr	r2, [r7, #16]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80087fa:	78fb      	ldrb	r3, [r7, #3]
 80087fc:	015a      	lsls	r2, r3, #5
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	4413      	add	r3, r2
 8008802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	4013      	ands	r3, r2
 800880c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800880e:	68bb      	ldr	r3, [r7, #8]
}
 8008810:	4618      	mov	r0, r3
 8008812:	371c      	adds	r7, #28
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	695b      	ldr	r3, [r3, #20]
 8008828:	f003 0301 	and.w	r3, r3, #1
}
 800882c:	4618      	mov	r0, r3
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008852:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008856:	f023 0307 	bic.w	r3, r3, #7
 800885a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800886a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800886e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3714      	adds	r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
	...

08008880 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008880:	b480      	push	{r7}
 8008882:	b087      	sub	sp, #28
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	460b      	mov	r3, r1
 800888a:	607a      	str	r2, [r7, #4]
 800888c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	333c      	adds	r3, #60	; 0x3c
 8008896:	3304      	adds	r3, #4
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	4a26      	ldr	r2, [pc, #152]	; (8008938 <USB_EP0_OutStart+0xb8>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d90a      	bls.n	80088ba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088b4:	d101      	bne.n	80088ba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	e037      	b.n	800892a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088c0:	461a      	mov	r2, r3
 80088c2:	2300      	movs	r3, #0
 80088c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	697a      	ldr	r2, [r7, #20]
 80088e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088e8:	f043 0318 	orr.w	r3, r3, #24
 80088ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088fc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008900:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008902:	7afb      	ldrb	r3, [r7, #11]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d10f      	bne.n	8008928 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800890e:	461a      	mov	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008922:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008926:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	371c      	adds	r7, #28
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	4f54300a 	.word	0x4f54300a

0800893c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008944:	2300      	movs	r3, #0
 8008946:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	3301      	adds	r3, #1
 800894c:	60fb      	str	r3, [r7, #12]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	4a13      	ldr	r2, [pc, #76]	; (80089a0 <USB_CoreReset+0x64>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d901      	bls.n	800895a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008956:	2303      	movs	r3, #3
 8008958:	e01b      	b.n	8008992 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	2b00      	cmp	r3, #0
 8008960:	daf2      	bge.n	8008948 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008962:	2300      	movs	r3, #0
 8008964:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	f043 0201 	orr.w	r2, r3, #1
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	3301      	adds	r3, #1
 8008976:	60fb      	str	r3, [r7, #12]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	4a09      	ldr	r2, [pc, #36]	; (80089a0 <USB_CoreReset+0x64>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d901      	bls.n	8008984 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008980:	2303      	movs	r3, #3
 8008982:	e006      	b.n	8008992 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	2b01      	cmp	r3, #1
 800898e:	d0f0      	beq.n	8008972 <USB_CoreReset+0x36>

  return HAL_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3714      	adds	r7, #20
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	00030d40 	.word	0x00030d40

080089a4 <USBD_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */

static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	460b      	mov	r3, r1
 80089ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80089b0:	2010      	movs	r0, #16
 80089b2:	f004 fd77 	bl	800d4a4 <USBD_static_malloc>
 80089b6:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d105      	bne.n	80089ca <USBD_HID_Init+0x26>
  {
	  //usb_failed = 1;
    pdev->pClassData = NULL;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80089c6:	2302      	movs	r3, #2
 80089c8:	e02b      	b.n	8008a22 <USBD_HID_Init+0x7e>
  }

  pdev->pClassData = (void *)hhid;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	7c1b      	ldrb	r3, [r3, #16]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d103      	bne.n	80089e2 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2207      	movs	r2, #7
 80089de:	875a      	strh	r2, [r3, #58]	; 0x3a
 80089e0:	e002      	b.n	80089e8 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2204      	movs	r2, #4
 80089e6:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80089e8:	2320      	movs	r3, #32
 80089ea:	2203      	movs	r2, #3
 80089ec:	2181      	movs	r1, #129	; 0x81
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f004 fbf9 	bl	800d1e6 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	871a      	strh	r2, [r3, #56]	; 0x38
//  pdev->ep_out[HID_EPOUT_ADDR & 0xFU].is_used = 1U;
//  USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, rx_buf, 6);


  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, HID_EPOUT_SIZE);
 80089fa:	2306      	movs	r3, #6
 80089fc:	2203      	movs	r2, #3
 80089fe:	2102      	movs	r1, #2
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f004 fbf0 	bl	800d1e6 <USBD_LL_OpenEP>
  pdev->ep_out[HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
  (void)USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, rx_buf, 6);
 8008a0e:	2306      	movs	r3, #6
 8008a10:	4a06      	ldr	r2, [pc, #24]	; (8008a2c <USBD_HID_Init+0x88>)
 8008a12:	2102      	movs	r1, #2
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f004 fcd5 	bl	800d3c4 <USBD_LL_PrepareReceive>

  hhid->state = HID_IDLE;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	731a      	strb	r2, [r3, #12]
  /* Prepare Out endpoint to receive 1st packet */




  return (uint8_t)USBD_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	20000ab4 	.word	0x20000ab4

08008a30 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	460b      	mov	r3, r1
 8008a3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8008a3c:	2181      	movs	r1, #129	; 0x81
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f004 fbf7 	bl	800d232 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d009      	beq.n	8008a6e <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a60:	4618      	mov	r0, r3
 8008a62:	f004 fd2d 	bl	800d4c0 <USBD_static_free>
    pdev->pClassData = NULL;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b088      	sub	sp, #32
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]


  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a88:	61bb      	str	r3, [r7, #24]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	77fb      	strb	r3, [r7, #31]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	81fb      	strh	r3, [r7, #14]

  if (hhid == NULL)
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d104      	bne.n	8008aa2 <USBD_HID_Setup+0x2a>
  {
	  usb_failed = 1;
 8008a98:	4b95      	ldr	r3, [pc, #596]	; (8008cf0 <USBD_HID_Setup+0x278>)
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	701a      	strb	r2, [r3, #0]
    return (uint8_t)USBD_FAIL;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	e122      	b.n	8008ce8 <USBD_HID_Setup+0x270>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008aaa:	2b40      	cmp	r3, #64	; 0x40
 8008aac:	f000 80cd 	beq.w	8008c4a <USBD_HID_Setup+0x1d2>
 8008ab0:	2b40      	cmp	r3, #64	; 0x40
 8008ab2:	f200 8110 	bhi.w	8008cd6 <USBD_HID_Setup+0x25e>
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d045      	beq.n	8008b46 <USBD_HID_Setup+0xce>
 8008aba:	2b20      	cmp	r3, #32
 8008abc:	f040 810b 	bne.w	8008cd6 <USBD_HID_Setup+0x25e>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	785b      	ldrb	r3, [r3, #1]
 8008ac4:	3b02      	subs	r3, #2
 8008ac6:	2b09      	cmp	r3, #9
 8008ac8:	d835      	bhi.n	8008b36 <USBD_HID_Setup+0xbe>
 8008aca:	a201      	add	r2, pc, #4	; (adr r2, 8008ad0 <USBD_HID_Setup+0x58>)
 8008acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad0:	08008b27 	.word	0x08008b27
 8008ad4:	08008b07 	.word	0x08008b07
 8008ad8:	08008b37 	.word	0x08008b37
 8008adc:	08008b37 	.word	0x08008b37
 8008ae0:	08008b37 	.word	0x08008b37
 8008ae4:	08008b37 	.word	0x08008b37
 8008ae8:	08008b37 	.word	0x08008b37
 8008aec:	08008b37 	.word	0x08008b37
 8008af0:	08008b15 	.word	0x08008b15
 8008af4:	08008af9 	.word	0x08008af9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	885b      	ldrh	r3, [r3, #2]
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	461a      	mov	r2, r3
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	601a      	str	r2, [r3, #0]
          break;
 8008b04:	e01e      	b.n	8008b44 <USBD_HID_Setup+0xcc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f001 fa86 	bl	800a01e <USBD_CtlSendData>
          break;
 8008b12:	e017      	b.n	8008b44 <USBD_HID_Setup+0xcc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	885b      	ldrh	r3, [r3, #2]
 8008b18:	0a1b      	lsrs	r3, r3, #8
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	461a      	mov	r2, r3
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	605a      	str	r2, [r3, #4]
          break;
 8008b24:	e00e      	b.n	8008b44 <USBD_HID_Setup+0xcc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	3304      	adds	r3, #4
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f001 fa75 	bl	800a01e <USBD_CtlSendData>
          break;
 8008b34:	e006      	b.n	8008b44 <USBD_HID_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008b36:	6839      	ldr	r1, [r7, #0]
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f001 f9ff 	bl	8009f3c <USBD_CtlError>
          ret = USBD_FAIL;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	77fb      	strb	r3, [r7, #31]
          break;
 8008b42:	bf00      	nop
      }
      break;
 8008b44:	e0cf      	b.n	8008ce6 <USBD_HID_Setup+0x26e>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	785b      	ldrb	r3, [r3, #1]
 8008b4a:	2b0b      	cmp	r3, #11
 8008b4c:	d874      	bhi.n	8008c38 <USBD_HID_Setup+0x1c0>
 8008b4e:	a201      	add	r2, pc, #4	; (adr r2, 8008b54 <USBD_HID_Setup+0xdc>)
 8008b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b54:	08008b85 	.word	0x08008b85
 8008b58:	08008c47 	.word	0x08008c47
 8008b5c:	08008c39 	.word	0x08008c39
 8008b60:	08008c39 	.word	0x08008c39
 8008b64:	08008c39 	.word	0x08008c39
 8008b68:	08008c39 	.word	0x08008c39
 8008b6c:	08008baf 	.word	0x08008baf
 8008b70:	08008c39 	.word	0x08008c39
 8008b74:	08008c39 	.word	0x08008c39
 8008b78:	08008c39 	.word	0x08008c39
 8008b7c:	08008be7 	.word	0x08008be7
 8008b80:	08008c11 	.word	0x08008c11
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	2b03      	cmp	r3, #3
 8008b8e:	d107      	bne.n	8008ba0 <USBD_HID_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008b90:	f107 030e 	add.w	r3, r7, #14
 8008b94:	2202      	movs	r2, #2
 8008b96:	4619      	mov	r1, r3
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f001 fa40 	bl	800a01e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b9e:	e053      	b.n	8008c48 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 8008ba0:	6839      	ldr	r1, [r7, #0]
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f001 f9ca 	bl	8009f3c <USBD_CtlError>
            ret = USBD_FAIL;
 8008ba8:	2303      	movs	r3, #3
 8008baa:	77fb      	strb	r3, [r7, #31]
          break;
 8008bac:	e04c      	b.n	8008c48 <USBD_HID_Setup+0x1d0>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
            pbuf = HID_MOUSE_ReportDesc;
          }
#endif
           if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	885b      	ldrh	r3, [r3, #2]
 8008bb2:	0a1b      	lsrs	r3, r3, #8
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	2b21      	cmp	r3, #33	; 0x21
 8008bb8:	d10e      	bne.n	8008bd8 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8008bba:	4b4e      	ldr	r3, [pc, #312]	; (8008cf4 <USBD_HID_Setup+0x27c>)
 8008bbc:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	88db      	ldrh	r3, [r3, #6]
 8008bc2:	2b12      	cmp	r3, #18
 8008bc4:	bf28      	it	cs
 8008bc6:	2312      	movcs	r3, #18
 8008bc8:	82fb      	strh	r3, [r7, #22]
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
            break;
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008bca:	8afb      	ldrh	r3, [r7, #22]
 8008bcc:	461a      	mov	r2, r3
 8008bce:	6939      	ldr	r1, [r7, #16]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f001 fa24 	bl	800a01e <USBD_CtlSendData>
          break;
 8008bd6:	e037      	b.n	8008c48 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 8008bd8:	6839      	ldr	r1, [r7, #0]
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f001 f9ae 	bl	8009f3c <USBD_CtlError>
            ret = USBD_FAIL;
 8008be0:	2303      	movs	r3, #3
 8008be2:	77fb      	strb	r3, [r7, #31]
            break;
 8008be4:	e030      	b.n	8008c48 <USBD_HID_Setup+0x1d0>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	2b03      	cmp	r3, #3
 8008bf0:	d107      	bne.n	8008c02 <USBD_HID_Setup+0x18a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	3308      	adds	r3, #8
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f001 fa0f 	bl	800a01e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c00:	e022      	b.n	8008c48 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 8008c02:	6839      	ldr	r1, [r7, #0]
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f001 f999 	bl	8009f3c <USBD_CtlError>
            ret = USBD_FAIL;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	77fb      	strb	r3, [r7, #31]
          break;
 8008c0e:	e01b      	b.n	8008c48 <USBD_HID_Setup+0x1d0>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	2b03      	cmp	r3, #3
 8008c1a:	d106      	bne.n	8008c2a <USBD_HID_Setup+0x1b2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	885b      	ldrh	r3, [r3, #2]
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	461a      	mov	r2, r3
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c28:	e00e      	b.n	8008c48 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 8008c2a:	6839      	ldr	r1, [r7, #0]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f001 f985 	bl	8009f3c <USBD_CtlError>
            ret = USBD_FAIL;
 8008c32:	2303      	movs	r3, #3
 8008c34:	77fb      	strb	r3, [r7, #31]
          break;
 8008c36:	e007      	b.n	8008c48 <USBD_HID_Setup+0x1d0>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008c38:	6839      	ldr	r1, [r7, #0]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f001 f97e 	bl	8009f3c <USBD_CtlError>
          ret = USBD_FAIL;
 8008c40:	2303      	movs	r3, #3
 8008c42:	77fb      	strb	r3, [r7, #31]
          break;
 8008c44:	e000      	b.n	8008c48 <USBD_HID_Setup+0x1d0>
          break;
 8008c46:	bf00      	nop
      }
      break;
 8008c48:	e04d      	b.n	8008ce6 <USBD_HID_Setup+0x26e>
    /*This is for the og xbox, this is the custom vendor request */
    case (0xC1 & USB_REQ_TYPE_MASK):
    	 hid_setup_ran++;
 8008c4a:	4b2b      	ldr	r3, [pc, #172]	; (8008cf8 <USBD_HID_Setup+0x280>)
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	b2da      	uxtb	r2, r3
 8008c52:	4b29      	ldr	r3, [pc, #164]	; (8008cf8 <USBD_HID_Setup+0x280>)
 8008c54:	701a      	strb	r2, [r3, #0]
    	if(req->bRequest == 0x06 && req->wValue == 0x4200) {
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	785b      	ldrb	r3, [r3, #1]
 8008c5a:	2b06      	cmp	r3, #6
 8008c5c:	d10f      	bne.n	8008c7e <USBD_HID_Setup+0x206>
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	885b      	ldrh	r3, [r3, #2]
 8008c62:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 8008c66:	d10a      	bne.n	8008c7e <USBD_HID_Setup+0x206>
    		len = 16;
 8008c68:	2310      	movs	r3, #16
 8008c6a:	82fb      	strh	r3, [r7, #22]
    		pbuf = USBD_HID_Desc;
 8008c6c:	4b21      	ldr	r3, [pc, #132]	; (8008cf4 <USBD_HID_Setup+0x27c>)
 8008c6e:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8008c70:	8afb      	ldrh	r3, [r7, #22]
 8008c72:	461a      	mov	r2, r3
 8008c74:	6939      	ldr	r1, [r7, #16]
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f001 f9d1 	bl	800a01e <USBD_CtlSendData>
 8008c7c:	e02a      	b.n	8008cd4 <USBD_HID_Setup+0x25c>
    	}
    	else if(req->bRequest == 0x01 && req->wValue == 0x0100) {
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	785b      	ldrb	r3, [r3, #1]
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d10f      	bne.n	8008ca6 <USBD_HID_Setup+0x22e>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	885b      	ldrh	r3, [r3, #2]
 8008c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c8e:	d10a      	bne.n	8008ca6 <USBD_HID_Setup+0x22e>
    		len = 20;
 8008c90:	2314      	movs	r3, #20
 8008c92:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_IN;
 8008c94:	4b19      	ldr	r3, [pc, #100]	; (8008cfc <USBD_HID_Setup+0x284>)
 8008c96:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8008c98:	8afb      	ldrh	r3, [r7, #22]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	6939      	ldr	r1, [r7, #16]
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f001 f9bd 	bl	800a01e <USBD_CtlSendData>
 8008ca4:	e016      	b.n	8008cd4 <USBD_HID_Setup+0x25c>
    	}
    	else if (req->bRequest == 0x01 && req->wValue == 0x0200) {
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	785b      	ldrb	r3, [r3, #1]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d11a      	bne.n	8008ce4 <USBD_HID_Setup+0x26c>
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	885b      	ldrh	r3, [r3, #2]
 8008cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cb6:	d115      	bne.n	8008ce4 <USBD_HID_Setup+0x26c>
    		rumble_brequest_sent = 1;
 8008cb8:	4b11      	ldr	r3, [pc, #68]	; (8008d00 <USBD_HID_Setup+0x288>)
 8008cba:	2201      	movs	r2, #1
 8008cbc:	701a      	strb	r2, [r3, #0]
    		len = 6;
 8008cbe:	2306      	movs	r3, #6
 8008cc0:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_OUT;
 8008cc2:	4b10      	ldr	r3, [pc, #64]	; (8008d04 <USBD_HID_Setup+0x28c>)
 8008cc4:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8008cc6:	8afb      	ldrh	r3, [r7, #22]
 8008cc8:	461a      	mov	r2, r3
 8008cca:	6939      	ldr	r1, [r7, #16]
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f001 f9a6 	bl	800a01e <USBD_CtlSendData>
    	}
    break;
 8008cd2:	e007      	b.n	8008ce4 <USBD_HID_Setup+0x26c>
 8008cd4:	e006      	b.n	8008ce4 <USBD_HID_Setup+0x26c>


    default:
      USBD_CtlError(pdev, req);
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f001 f92f 	bl	8009f3c <USBD_CtlError>
      ret = USBD_FAIL;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	77fb      	strb	r3, [r7, #31]
      break;
 8008ce2:	e000      	b.n	8008ce6 <USBD_HID_Setup+0x26e>
    break;
 8008ce4:	bf00      	nop
  }

  return (uint8_t)ret;
 8008ce6:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3720      	adds	r7, #32
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	20000abc 	.word	0x20000abc
 8008cf4:	20000090 	.word	0x20000090
 8008cf8:	20000aba 	.word	0x20000aba
 8008cfc:	200000ac 	.word	0x200000ac
 8008d00:	20000abd 	.word	0x20000abd
 8008d04:	200000c0 	.word	0x200000c0

08008d08 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b086      	sub	sp, #24
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	4613      	mov	r3, r2
 8008d14:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d1c:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d101      	bne.n	8008d28 <USBD_HID_SendReport+0x20>
  {
	  //usb_failed = 1;
    return (uint8_t)USBD_FAIL;
 8008d24:	2303      	movs	r3, #3
 8008d26:	e013      	b.n	8008d50 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	2b03      	cmp	r3, #3
 8008d32:	d10c      	bne.n	8008d4e <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	7b1b      	ldrb	r3, [r3, #12]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d108      	bne.n	8008d4e <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8008d42:	88fb      	ldrh	r3, [r7, #6]
 8008d44:	68ba      	ldr	r2, [r7, #8]
 8008d46:	2181      	movs	r1, #129	; 0x81
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	f004 fb1a 	bl	800d382 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3718      	adds	r7, #24
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2220      	movs	r2, #32
 8008d64:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8008d66:	4b03      	ldr	r3, [pc, #12]	; (8008d74 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr
 8008d74:	20000050 	.word	0x20000050

08008d78 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
#if PC_SETUP
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);

  return USBD_HID_CfgHSDesc;
#endif
}
 8008d80:	bf00      	nop
 8008d82:	4618      	mov	r0, r3
 8008d84:	370c      	adds	r7, #12
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
	...

08008d90 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */

static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2220      	movs	r2, #32
 8008d9c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8008d9e:	4b03      	ldr	r3, [pc, #12]	; (8008dac <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr
 8008dac:	20000070 	.word	0x20000070

08008db0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	460b      	mov	r3, r1
 8008dba:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <USBD_HID_DataOut>:

static uint8_t USBD_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	70fb      	strb	r3, [r7, #3]
	dataout_ran = 1;
 8008de0:	4b08      	ldr	r3, [pc, #32]	; (8008e04 <USBD_HID_DataOut+0x30>)
 8008de2:	2201      	movs	r2, #1
 8008de4:	701a      	strb	r2, [r3, #0]
	rx_buf[3]=5;
 8008de6:	4b08      	ldr	r3, [pc, #32]	; (8008e08 <USBD_HID_DataOut+0x34>)
 8008de8:	2205      	movs	r2, #5
 8008dea:	70da      	strb	r2, [r3, #3]
    HAL_PCD_EP_Receive(&hUsbDeviceFS.pData, HID_EPOUT_ADDR, rx_buf, 6);
 8008dec:	2306      	movs	r3, #6
 8008dee:	4a06      	ldr	r2, [pc, #24]	; (8008e08 <USBD_HID_DataOut+0x34>)
 8008df0:	2102      	movs	r1, #2
 8008df2:	4806      	ldr	r0, [pc, #24]	; (8008e0c <USBD_HID_DataOut+0x38>)
 8008df4:	f7fb fa66 	bl	80042c4 <HAL_PCD_EP_Receive>

	return USBD_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	20000abb 	.word	0x20000abb
 8008e08:	20000ab4 	.word	0x20000ab4
 8008e0c:	20005740 	.word	0x20005740

08008e10 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]

  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	220a      	movs	r2, #10
 8008e1c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8008e1e:	4b03      	ldr	r3, [pc, #12]	; (8008e2c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr
 8008e2c:	200000a0 	.word	0x200000a0

08008e30 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b086      	sub	sp, #24
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d101      	bne.n	8008e48 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008e44:	2303      	movs	r3, #3
 8008e46:	e01f      	b.n	8008e88 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d003      	beq.n	8008e6e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2201      	movs	r2, #1
 8008e72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	79fa      	ldrb	r2, [r7, #7]
 8008e7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f004 f94b 	bl	800d118 <USBD_LL_Init>
 8008e82:	4603      	mov	r3, r0
 8008e84:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3718      	adds	r7, #24
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d101      	bne.n	8008ea8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	e016      	b.n	8008ed6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	683a      	ldr	r2, [r7, #0]
 8008eac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00b      	beq.n	8008ed4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec4:	f107 020e 	add.w	r2, r7, #14
 8008ec8:	4610      	mov	r0, r2
 8008eca:	4798      	blx	r3
 8008ecc:	4602      	mov	r2, r0
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b082      	sub	sp, #8
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f004 f962 	bl	800d1b0 <USBD_LL_Start>
 8008eec:	4603      	mov	r3, r0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008ef6:	b480      	push	{r7}
 8008ef8:	b083      	sub	sp, #12
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	460b      	mov	r3, r1
 8008f16:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008f18:	2303      	movs	r3, #3
 8008f1a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d009      	beq.n	8008f3a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	78fa      	ldrb	r2, [r7, #3]
 8008f30:	4611      	mov	r1, r2
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	4798      	blx	r3
 8008f36:	4603      	mov	r3, r0
 8008f38:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3710      	adds	r7, #16
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d007      	beq.n	8008f6a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	78fa      	ldrb	r2, [r7, #3]
 8008f64:	4611      	mov	r1, r2
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	4798      	blx	r3
  }

  return USBD_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008f84:	6839      	ldr	r1, [r7, #0]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 ff9e 	bl	8009ec8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008fa8:	f003 031f 	and.w	r3, r3, #31
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d01a      	beq.n	8008fe6 <USBD_LL_SetupStage+0x72>
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d822      	bhi.n	8008ffa <USBD_LL_SetupStage+0x86>
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d002      	beq.n	8008fbe <USBD_LL_SetupStage+0x4a>
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d00a      	beq.n	8008fd2 <USBD_LL_SetupStage+0x5e>
 8008fbc:	e01d      	b.n	8008ffa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fa62 	bl	8009490 <USBD_StdDevReq>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	73fb      	strb	r3, [r7, #15]
      break;
 8008fd0:	e020      	b.n	8009014 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fd8:	4619      	mov	r1, r3
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 fad4 	bl	8009588 <USBD_StdItfReq>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8008fe4:	e016      	b.n	8009014 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fec:	4619      	mov	r1, r3
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 fb13 	bl	800961a <USBD_StdEPReq>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ff8:	e00c      	b.n	8009014 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009000:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009004:	b2db      	uxtb	r3, r3
 8009006:	4619      	mov	r1, r3
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f004 f931 	bl	800d270 <USBD_LL_StallEP>
 800900e:	4603      	mov	r3, r0
 8009010:	73fb      	strb	r3, [r7, #15]
      break;
 8009012:	bf00      	nop
  }

  return ret;
 8009014:	7bfb      	ldrb	r3, [r7, #15]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b086      	sub	sp, #24
 8009022:	af00      	add	r7, sp, #0
 8009024:	60f8      	str	r0, [r7, #12]
 8009026:	460b      	mov	r3, r1
 8009028:	607a      	str	r2, [r7, #4]
 800902a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800902c:	7afb      	ldrb	r3, [r7, #11]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d138      	bne.n	80090a4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009038:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009040:	2b03      	cmp	r3, #3
 8009042:	d14a      	bne.n	80090da <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	689a      	ldr	r2, [r3, #8]
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	429a      	cmp	r2, r3
 800904e:	d913      	bls.n	8009078 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	689a      	ldr	r2, [r3, #8]
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	1ad2      	subs	r2, r2, r3
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	68da      	ldr	r2, [r3, #12]
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	4293      	cmp	r3, r2
 8009068:	bf28      	it	cs
 800906a:	4613      	movcs	r3, r2
 800906c:	461a      	mov	r2, r3
 800906e:	6879      	ldr	r1, [r7, #4]
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f001 f800 	bl	800a076 <USBD_CtlContinueRx>
 8009076:	e030      	b.n	80090da <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800907e:	b2db      	uxtb	r3, r3
 8009080:	2b03      	cmp	r3, #3
 8009082:	d10b      	bne.n	800909c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800908a:	691b      	ldr	r3, [r3, #16]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d005      	beq.n	800909c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009096:	691b      	ldr	r3, [r3, #16]
 8009098:	68f8      	ldr	r0, [r7, #12]
 800909a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f000 fffb 	bl	800a098 <USBD_CtlSendStatus>
 80090a2:	e01a      	b.n	80090da <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	2b03      	cmp	r3, #3
 80090ae:	d114      	bne.n	80090da <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00e      	beq.n	80090da <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	7afa      	ldrb	r2, [r7, #11]
 80090c6:	4611      	mov	r1, r2
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	4798      	blx	r3
 80090cc:	4603      	mov	r3, r0
 80090ce:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80090d0:	7dfb      	ldrb	r3, [r7, #23]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d001      	beq.n	80090da <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80090d6:	7dfb      	ldrb	r3, [r7, #23]
 80090d8:	e000      	b.n	80090dc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3718      	adds	r7, #24
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b086      	sub	sp, #24
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	460b      	mov	r3, r1
 80090ee:	607a      	str	r2, [r7, #4]
 80090f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80090f2:	7afb      	ldrb	r3, [r7, #11]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d16b      	bne.n	80091d0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	3314      	adds	r3, #20
 80090fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009104:	2b02      	cmp	r3, #2
 8009106:	d156      	bne.n	80091b6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	689a      	ldr	r2, [r3, #8]
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	429a      	cmp	r2, r3
 8009112:	d914      	bls.n	800913e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	689a      	ldr	r2, [r3, #8]
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	1ad2      	subs	r2, r2, r3
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	461a      	mov	r2, r3
 8009128:	6879      	ldr	r1, [r7, #4]
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f000 ff92 	bl	800a054 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009130:	2300      	movs	r3, #0
 8009132:	2200      	movs	r2, #0
 8009134:	2100      	movs	r1, #0
 8009136:	68f8      	ldr	r0, [r7, #12]
 8009138:	f004 f944 	bl	800d3c4 <USBD_LL_PrepareReceive>
 800913c:	e03b      	b.n	80091b6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	68da      	ldr	r2, [r3, #12]
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	429a      	cmp	r2, r3
 8009148:	d11c      	bne.n	8009184 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	685a      	ldr	r2, [r3, #4]
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009152:	429a      	cmp	r2, r3
 8009154:	d316      	bcc.n	8009184 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	685a      	ldr	r2, [r3, #4]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009160:	429a      	cmp	r2, r3
 8009162:	d20f      	bcs.n	8009184 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009164:	2200      	movs	r2, #0
 8009166:	2100      	movs	r1, #0
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f000 ff73 	bl	800a054 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2200      	movs	r2, #0
 8009172:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009176:	2300      	movs	r3, #0
 8009178:	2200      	movs	r2, #0
 800917a:	2100      	movs	r1, #0
 800917c:	68f8      	ldr	r0, [r7, #12]
 800917e:	f004 f921 	bl	800d3c4 <USBD_LL_PrepareReceive>
 8009182:	e018      	b.n	80091b6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800918a:	b2db      	uxtb	r3, r3
 800918c:	2b03      	cmp	r3, #3
 800918e:	d10b      	bne.n	80091a8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d005      	beq.n	80091a8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80091a8:	2180      	movs	r1, #128	; 0x80
 80091aa:	68f8      	ldr	r0, [r7, #12]
 80091ac:	f004 f860 	bl	800d270 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f000 ff84 	bl	800a0be <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d122      	bne.n	8009206 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f7ff fe98 	bl	8008ef6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80091ce:	e01a      	b.n	8009206 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	2b03      	cmp	r3, #3
 80091da:	d114      	bne.n	8009206 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091e2:	695b      	ldr	r3, [r3, #20]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00e      	beq.n	8009206 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ee:	695b      	ldr	r3, [r3, #20]
 80091f0:	7afa      	ldrb	r2, [r7, #11]
 80091f2:	4611      	mov	r1, r2
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	4798      	blx	r3
 80091f8:	4603      	mov	r3, r0
 80091fa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80091fc:	7dfb      	ldrb	r3, [r7, #23]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d001      	beq.n	8009206 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009202:	7dfb      	ldrb	r3, [r7, #23]
 8009204:	e000      	b.n	8009208 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009206:	2300      	movs	r3, #0
}
 8009208:	4618      	mov	r0, r3
 800920a:	3718      	adds	r7, #24
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800923c:	2b00      	cmp	r3, #0
 800923e:	d101      	bne.n	8009244 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009240:	2303      	movs	r3, #3
 8009242:	e02f      	b.n	80092a4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00f      	beq.n	800926e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d009      	beq.n	800926e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	6852      	ldr	r2, [r2, #4]
 8009266:	b2d2      	uxtb	r2, r2
 8009268:	4611      	mov	r1, r2
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800926e:	2340      	movs	r3, #64	; 0x40
 8009270:	2200      	movs	r2, #0
 8009272:	2100      	movs	r1, #0
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f003 ffb6 	bl	800d1e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2201      	movs	r2, #1
 800927e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2240      	movs	r2, #64	; 0x40
 8009286:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800928a:	2340      	movs	r3, #64	; 0x40
 800928c:	2200      	movs	r2, #0
 800928e:	2180      	movs	r1, #128	; 0x80
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f003 ffa8 	bl	800d1e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2201      	movs	r2, #1
 800929a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2240      	movs	r2, #64	; 0x40
 80092a0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3708      	adds	r7, #8
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	460b      	mov	r3, r1
 80092b6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	78fa      	ldrb	r2, [r7, #3]
 80092bc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092da:	b2da      	uxtb	r2, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2204      	movs	r2, #4
 80092e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009306:	b2db      	uxtb	r3, r3
 8009308:	2b04      	cmp	r3, #4
 800930a:	d106      	bne.n	800931a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009312:	b2da      	uxtb	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009336:	2b00      	cmp	r3, #0
 8009338:	d101      	bne.n	800933e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800933a:	2303      	movs	r3, #3
 800933c:	e012      	b.n	8009364 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009344:	b2db      	uxtb	r3, r3
 8009346:	2b03      	cmp	r3, #3
 8009348:	d10b      	bne.n	8009362 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009350:	69db      	ldr	r3, [r3, #28]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d005      	beq.n	8009362 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800935c:	69db      	ldr	r3, [r3, #28]
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009362:	2300      	movs	r3, #0
}
 8009364:	4618      	mov	r0, r3
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	460b      	mov	r3, r1
 8009376:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800937e:	2b00      	cmp	r3, #0
 8009380:	d101      	bne.n	8009386 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009382:	2303      	movs	r3, #3
 8009384:	e014      	b.n	80093b0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800938c:	b2db      	uxtb	r3, r3
 800938e:	2b03      	cmp	r3, #3
 8009390:	d10d      	bne.n	80093ae <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009398:	6a1b      	ldr	r3, [r3, #32]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d007      	beq.n	80093ae <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093a4:	6a1b      	ldr	r3, [r3, #32]
 80093a6:	78fa      	ldrb	r2, [r7, #3]
 80093a8:	4611      	mov	r1, r2
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3708      	adds	r7, #8
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	460b      	mov	r3, r1
 80093c2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d101      	bne.n	80093d2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80093ce:	2303      	movs	r3, #3
 80093d0:	e014      	b.n	80093fc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	2b03      	cmp	r3, #3
 80093dc:	d10d      	bne.n	80093fa <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d007      	beq.n	80093fa <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f2:	78fa      	ldrb	r2, [r7, #3]
 80093f4:	4611      	mov	r1, r2
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	370c      	adds	r7, #12
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr

0800941a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b082      	sub	sp, #8
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2201      	movs	r2, #1
 8009426:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009430:	2b00      	cmp	r3, #0
 8009432:	d009      	beq.n	8009448 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	6852      	ldr	r2, [r2, #4]
 8009440:	b2d2      	uxtb	r2, r2
 8009442:	4611      	mov	r1, r2
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	4798      	blx	r3
  }

  return USBD_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3708      	adds	r7, #8
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009452:	b480      	push	{r7}
 8009454:	b087      	sub	sp, #28
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	3301      	adds	r3, #1
 8009468:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009470:	8a3b      	ldrh	r3, [r7, #16]
 8009472:	021b      	lsls	r3, r3, #8
 8009474:	b21a      	sxth	r2, r3
 8009476:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800947a:	4313      	orrs	r3, r2
 800947c:	b21b      	sxth	r3, r3
 800947e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009480:	89fb      	ldrh	r3, [r7, #14]
}
 8009482:	4618      	mov	r0, r3
 8009484:	371c      	adds	r7, #28
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
	...

08009490 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800949a:	2300      	movs	r3, #0
 800949c:	73fb      	strb	r3, [r7, #15]

	  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	6839      	ldr	r1, [r7, #0]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	4798      	blx	r3
 80094ac:	4603      	mov	r3, r0
 80094ae:	73fb      	strb	r3, [r7, #15]


	  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094b8:	2b40      	cmp	r3, #64	; 0x40
 80094ba:	d005      	beq.n	80094c8 <USBD_StdDevReq+0x38>
 80094bc:	2b40      	cmp	r3, #64	; 0x40
 80094be:	d854      	bhi.n	800956a <USBD_StdDevReq+0xda>
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00b      	beq.n	80094dc <USBD_StdDevReq+0x4c>
 80094c4:	2b20      	cmp	r3, #32
 80094c6:	d150      	bne.n	800956a <USBD_StdDevReq+0xda>
	  {
		case USB_REQ_TYPE_CLASS:
		case USB_REQ_TYPE_VENDOR:
		  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	6839      	ldr	r1, [r7, #0]
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	4798      	blx	r3
 80094d6:	4603      	mov	r3, r0
 80094d8:	73fb      	strb	r3, [r7, #15]
		  break;
 80094da:	e04e      	b.n	800957a <USBD_StdDevReq+0xea>

		case USB_REQ_TYPE_STANDARD:
		  switch (req->bRequest)
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	785b      	ldrb	r3, [r3, #1]
 80094e0:	2b09      	cmp	r3, #9
 80094e2:	d83c      	bhi.n	800955e <USBD_StdDevReq+0xce>
 80094e4:	a201      	add	r2, pc, #4	; (adr r2, 80094ec <USBD_StdDevReq+0x5c>)
 80094e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ea:	bf00      	nop
 80094ec:	08009541 	.word	0x08009541
 80094f0:	08009555 	.word	0x08009555
 80094f4:	0800955f 	.word	0x0800955f
 80094f8:	0800954b 	.word	0x0800954b
 80094fc:	0800955f 	.word	0x0800955f
 8009500:	0800951f 	.word	0x0800951f
 8009504:	08009515 	.word	0x08009515
 8009508:	0800955f 	.word	0x0800955f
 800950c:	08009537 	.word	0x08009537
 8009510:	08009529 	.word	0x08009529
		  {
			case USB_REQ_GET_DESCRIPTOR:
			  USBD_GetDescriptor(pdev, req);
 8009514:	6839      	ldr	r1, [r7, #0]
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f9e2 	bl	80098e0 <USBD_GetDescriptor>
			  break;
 800951c:	e024      	b.n	8009568 <USBD_StdDevReq+0xd8>

			case USB_REQ_SET_ADDRESS:
			  USBD_SetAddress(pdev, req);
 800951e:	6839      	ldr	r1, [r7, #0]
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 fb47 	bl	8009bb4 <USBD_SetAddress>
			  break;
 8009526:	e01f      	b.n	8009568 <USBD_StdDevReq+0xd8>

			case USB_REQ_SET_CONFIGURATION:
			  ret = USBD_SetConfig(pdev, req);
 8009528:	6839      	ldr	r1, [r7, #0]
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 fb86 	bl	8009c3c <USBD_SetConfig>
 8009530:	4603      	mov	r3, r0
 8009532:	73fb      	strb	r3, [r7, #15]
			  break;
 8009534:	e018      	b.n	8009568 <USBD_StdDevReq+0xd8>

			case USB_REQ_GET_CONFIGURATION:
			  USBD_GetConfig(pdev, req);
 8009536:	6839      	ldr	r1, [r7, #0]
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fc25 	bl	8009d88 <USBD_GetConfig>
			  break;
 800953e:	e013      	b.n	8009568 <USBD_StdDevReq+0xd8>

			case USB_REQ_GET_STATUS:
			  USBD_GetStatus(pdev, req);
 8009540:	6839      	ldr	r1, [r7, #0]
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 fc56 	bl	8009df4 <USBD_GetStatus>
			  break;
 8009548:	e00e      	b.n	8009568 <USBD_StdDevReq+0xd8>

			case USB_REQ_SET_FEATURE:
			  USBD_SetFeature(pdev, req);
 800954a:	6839      	ldr	r1, [r7, #0]
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 fc85 	bl	8009e5c <USBD_SetFeature>
			  break;
 8009552:	e009      	b.n	8009568 <USBD_StdDevReq+0xd8>

			case USB_REQ_CLEAR_FEATURE:
			  USBD_ClrFeature(pdev, req);
 8009554:	6839      	ldr	r1, [r7, #0]
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fc94 	bl	8009e84 <USBD_ClrFeature>
			  break;
 800955c:	e004      	b.n	8009568 <USBD_StdDevReq+0xd8>

			default:
			  USBD_CtlError(pdev, req);
 800955e:	6839      	ldr	r1, [r7, #0]
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 fceb 	bl	8009f3c <USBD_CtlError>
			  break;
 8009566:	bf00      	nop
		  }
		  break;
 8009568:	e007      	b.n	800957a <USBD_StdDevReq+0xea>

		default:
		  unknown_bmrequest = 1;
 800956a:	4b06      	ldr	r3, [pc, #24]	; (8009584 <USBD_StdDevReq+0xf4>)
 800956c:	2201      	movs	r2, #1
 800956e:	701a      	strb	r2, [r3, #0]
		  USBD_CtlError(pdev, req);
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fce2 	bl	8009f3c <USBD_CtlError>
		  break;
 8009578:	bf00      	nop
	  }

  return ret;
 800957a:	7bfb      	ldrb	r3, [r7, #15]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	20000abe 	.word	0x20000abe

08009588 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800959e:	2b40      	cmp	r3, #64	; 0x40
 80095a0:	d005      	beq.n	80095ae <USBD_StdItfReq+0x26>
 80095a2:	2b40      	cmp	r3, #64	; 0x40
 80095a4:	d82f      	bhi.n	8009606 <USBD_StdItfReq+0x7e>
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <USBD_StdItfReq+0x26>
 80095aa:	2b20      	cmp	r3, #32
 80095ac:	d12b      	bne.n	8009606 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	3b01      	subs	r3, #1
 80095b8:	2b02      	cmp	r3, #2
 80095ba:	d81d      	bhi.n	80095f8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	889b      	ldrh	r3, [r3, #4]
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d813      	bhi.n	80095ee <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	6839      	ldr	r1, [r7, #0]
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	4798      	blx	r3
 80095d4:	4603      	mov	r3, r0
 80095d6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	88db      	ldrh	r3, [r3, #6]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d110      	bne.n	8009602 <USBD_StdItfReq+0x7a>
 80095e0:	7bfb      	ldrb	r3, [r7, #15]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d10d      	bne.n	8009602 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 fd56 	bl	800a098 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80095ec:	e009      	b.n	8009602 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80095ee:	6839      	ldr	r1, [r7, #0]
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 fca3 	bl	8009f3c <USBD_CtlError>
          break;
 80095f6:	e004      	b.n	8009602 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80095f8:	6839      	ldr	r1, [r7, #0]
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 fc9e 	bl	8009f3c <USBD_CtlError>
          break;
 8009600:	e000      	b.n	8009604 <USBD_StdItfReq+0x7c>
          break;
 8009602:	bf00      	nop
      }
      break;
 8009604:	e004      	b.n	8009610 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009606:	6839      	ldr	r1, [r7, #0]
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 fc97 	bl	8009f3c <USBD_CtlError>
      break;
 800960e:	bf00      	nop
  }

  return ret;
 8009610:	7bfb      	ldrb	r3, [r7, #15]
}
 8009612:	4618      	mov	r0, r3
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b084      	sub	sp, #16
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
 8009622:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009624:	2300      	movs	r3, #0
 8009626:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	889b      	ldrh	r3, [r3, #4]
 800962c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009636:	2b40      	cmp	r3, #64	; 0x40
 8009638:	d007      	beq.n	800964a <USBD_StdEPReq+0x30>
 800963a:	2b40      	cmp	r3, #64	; 0x40
 800963c:	f200 8145 	bhi.w	80098ca <USBD_StdEPReq+0x2b0>
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00c      	beq.n	800965e <USBD_StdEPReq+0x44>
 8009644:	2b20      	cmp	r3, #32
 8009646:	f040 8140 	bne.w	80098ca <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	6839      	ldr	r1, [r7, #0]
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	4798      	blx	r3
 8009658:	4603      	mov	r3, r0
 800965a:	73fb      	strb	r3, [r7, #15]
      break;
 800965c:	e13a      	b.n	80098d4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	785b      	ldrb	r3, [r3, #1]
 8009662:	2b03      	cmp	r3, #3
 8009664:	d007      	beq.n	8009676 <USBD_StdEPReq+0x5c>
 8009666:	2b03      	cmp	r3, #3
 8009668:	f300 8129 	bgt.w	80098be <USBD_StdEPReq+0x2a4>
 800966c:	2b00      	cmp	r3, #0
 800966e:	d07f      	beq.n	8009770 <USBD_StdEPReq+0x156>
 8009670:	2b01      	cmp	r3, #1
 8009672:	d03c      	beq.n	80096ee <USBD_StdEPReq+0xd4>
 8009674:	e123      	b.n	80098be <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800967c:	b2db      	uxtb	r3, r3
 800967e:	2b02      	cmp	r3, #2
 8009680:	d002      	beq.n	8009688 <USBD_StdEPReq+0x6e>
 8009682:	2b03      	cmp	r3, #3
 8009684:	d016      	beq.n	80096b4 <USBD_StdEPReq+0x9a>
 8009686:	e02c      	b.n	80096e2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009688:	7bbb      	ldrb	r3, [r7, #14]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00d      	beq.n	80096aa <USBD_StdEPReq+0x90>
 800968e:	7bbb      	ldrb	r3, [r7, #14]
 8009690:	2b80      	cmp	r3, #128	; 0x80
 8009692:	d00a      	beq.n	80096aa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009694:	7bbb      	ldrb	r3, [r7, #14]
 8009696:	4619      	mov	r1, r3
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f003 fde9 	bl	800d270 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800969e:	2180      	movs	r1, #128	; 0x80
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f003 fde5 	bl	800d270 <USBD_LL_StallEP>
 80096a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096a8:	e020      	b.n	80096ec <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80096aa:	6839      	ldr	r1, [r7, #0]
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 fc45 	bl	8009f3c <USBD_CtlError>
              break;
 80096b2:	e01b      	b.n	80096ec <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	885b      	ldrh	r3, [r3, #2]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10e      	bne.n	80096da <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80096bc:	7bbb      	ldrb	r3, [r7, #14]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00b      	beq.n	80096da <USBD_StdEPReq+0xc0>
 80096c2:	7bbb      	ldrb	r3, [r7, #14]
 80096c4:	2b80      	cmp	r3, #128	; 0x80
 80096c6:	d008      	beq.n	80096da <USBD_StdEPReq+0xc0>
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	88db      	ldrh	r3, [r3, #6]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d104      	bne.n	80096da <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80096d0:	7bbb      	ldrb	r3, [r7, #14]
 80096d2:	4619      	mov	r1, r3
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f003 fdcb 	bl	800d270 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 fcdc 	bl	800a098 <USBD_CtlSendStatus>

              break;
 80096e0:	e004      	b.n	80096ec <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80096e2:	6839      	ldr	r1, [r7, #0]
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 fc29 	bl	8009f3c <USBD_CtlError>
              break;
 80096ea:	bf00      	nop
          }
          break;
 80096ec:	e0ec      	b.n	80098c8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d002      	beq.n	8009700 <USBD_StdEPReq+0xe6>
 80096fa:	2b03      	cmp	r3, #3
 80096fc:	d016      	beq.n	800972c <USBD_StdEPReq+0x112>
 80096fe:	e030      	b.n	8009762 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009700:	7bbb      	ldrb	r3, [r7, #14]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00d      	beq.n	8009722 <USBD_StdEPReq+0x108>
 8009706:	7bbb      	ldrb	r3, [r7, #14]
 8009708:	2b80      	cmp	r3, #128	; 0x80
 800970a:	d00a      	beq.n	8009722 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800970c:	7bbb      	ldrb	r3, [r7, #14]
 800970e:	4619      	mov	r1, r3
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f003 fdad 	bl	800d270 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009716:	2180      	movs	r1, #128	; 0x80
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f003 fda9 	bl	800d270 <USBD_LL_StallEP>
 800971e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009720:	e025      	b.n	800976e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009722:	6839      	ldr	r1, [r7, #0]
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 fc09 	bl	8009f3c <USBD_CtlError>
              break;
 800972a:	e020      	b.n	800976e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	885b      	ldrh	r3, [r3, #2]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d11b      	bne.n	800976c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009734:	7bbb      	ldrb	r3, [r7, #14]
 8009736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800973a:	2b00      	cmp	r3, #0
 800973c:	d004      	beq.n	8009748 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800973e:	7bbb      	ldrb	r3, [r7, #14]
 8009740:	4619      	mov	r1, r3
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f003 fdb3 	bl	800d2ae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 fca5 	bl	800a098 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	6839      	ldr	r1, [r7, #0]
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	4798      	blx	r3
 800975c:	4603      	mov	r3, r0
 800975e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009760:	e004      	b.n	800976c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009762:	6839      	ldr	r1, [r7, #0]
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 fbe9 	bl	8009f3c <USBD_CtlError>
              break;
 800976a:	e000      	b.n	800976e <USBD_StdEPReq+0x154>
              break;
 800976c:	bf00      	nop
          }
          break;
 800976e:	e0ab      	b.n	80098c8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009776:	b2db      	uxtb	r3, r3
 8009778:	2b02      	cmp	r3, #2
 800977a:	d002      	beq.n	8009782 <USBD_StdEPReq+0x168>
 800977c:	2b03      	cmp	r3, #3
 800977e:	d032      	beq.n	80097e6 <USBD_StdEPReq+0x1cc>
 8009780:	e097      	b.n	80098b2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009782:	7bbb      	ldrb	r3, [r7, #14]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d007      	beq.n	8009798 <USBD_StdEPReq+0x17e>
 8009788:	7bbb      	ldrb	r3, [r7, #14]
 800978a:	2b80      	cmp	r3, #128	; 0x80
 800978c:	d004      	beq.n	8009798 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800978e:	6839      	ldr	r1, [r7, #0]
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 fbd3 	bl	8009f3c <USBD_CtlError>
                break;
 8009796:	e091      	b.n	80098bc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009798:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800979c:	2b00      	cmp	r3, #0
 800979e:	da0b      	bge.n	80097b8 <USBD_StdEPReq+0x19e>
 80097a0:	7bbb      	ldrb	r3, [r7, #14]
 80097a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097a6:	4613      	mov	r3, r2
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	4413      	add	r3, r2
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	3310      	adds	r3, #16
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	4413      	add	r3, r2
 80097b4:	3304      	adds	r3, #4
 80097b6:	e00b      	b.n	80097d0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80097b8:	7bbb      	ldrb	r3, [r7, #14]
 80097ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097be:	4613      	mov	r3, r2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	4413      	add	r3, r2
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	4413      	add	r3, r2
 80097ce:	3304      	adds	r3, #4
 80097d0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	2200      	movs	r2, #0
 80097d6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	2202      	movs	r2, #2
 80097dc:	4619      	mov	r1, r3
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fc1d 	bl	800a01e <USBD_CtlSendData>
              break;
 80097e4:	e06a      	b.n	80098bc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80097e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	da11      	bge.n	8009812 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80097ee:	7bbb      	ldrb	r3, [r7, #14]
 80097f0:	f003 020f 	and.w	r2, r3, #15
 80097f4:	6879      	ldr	r1, [r7, #4]
 80097f6:	4613      	mov	r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	4413      	add	r3, r2
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	440b      	add	r3, r1
 8009800:	3324      	adds	r3, #36	; 0x24
 8009802:	881b      	ldrh	r3, [r3, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d117      	bne.n	8009838 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009808:	6839      	ldr	r1, [r7, #0]
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 fb96 	bl	8009f3c <USBD_CtlError>
                  break;
 8009810:	e054      	b.n	80098bc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009812:	7bbb      	ldrb	r3, [r7, #14]
 8009814:	f003 020f 	and.w	r2, r3, #15
 8009818:	6879      	ldr	r1, [r7, #4]
 800981a:	4613      	mov	r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4413      	add	r3, r2
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	440b      	add	r3, r1
 8009824:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009828:	881b      	ldrh	r3, [r3, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d104      	bne.n	8009838 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800982e:	6839      	ldr	r1, [r7, #0]
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 fb83 	bl	8009f3c <USBD_CtlError>
                  break;
 8009836:	e041      	b.n	80098bc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009838:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800983c:	2b00      	cmp	r3, #0
 800983e:	da0b      	bge.n	8009858 <USBD_StdEPReq+0x23e>
 8009840:	7bbb      	ldrb	r3, [r7, #14]
 8009842:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009846:	4613      	mov	r3, r2
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	4413      	add	r3, r2
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	3310      	adds	r3, #16
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	4413      	add	r3, r2
 8009854:	3304      	adds	r3, #4
 8009856:	e00b      	b.n	8009870 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009858:	7bbb      	ldrb	r3, [r7, #14]
 800985a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800985e:	4613      	mov	r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	4413      	add	r3, r2
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	4413      	add	r3, r2
 800986e:	3304      	adds	r3, #4
 8009870:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009872:	7bbb      	ldrb	r3, [r7, #14]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d002      	beq.n	800987e <USBD_StdEPReq+0x264>
 8009878:	7bbb      	ldrb	r3, [r7, #14]
 800987a:	2b80      	cmp	r3, #128	; 0x80
 800987c:	d103      	bne.n	8009886 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	2200      	movs	r2, #0
 8009882:	601a      	str	r2, [r3, #0]
 8009884:	e00e      	b.n	80098a4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009886:	7bbb      	ldrb	r3, [r7, #14]
 8009888:	4619      	mov	r1, r3
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f003 fd2e 	bl	800d2ec <USBD_LL_IsStallEP>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d003      	beq.n	800989e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	2201      	movs	r2, #1
 800989a:	601a      	str	r2, [r3, #0]
 800989c:	e002      	b.n	80098a4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	2200      	movs	r2, #0
 80098a2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	2202      	movs	r2, #2
 80098a8:	4619      	mov	r1, r3
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 fbb7 	bl	800a01e <USBD_CtlSendData>
              break;
 80098b0:	e004      	b.n	80098bc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80098b2:	6839      	ldr	r1, [r7, #0]
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 fb41 	bl	8009f3c <USBD_CtlError>
              break;
 80098ba:	bf00      	nop
          }
          break;
 80098bc:	e004      	b.n	80098c8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80098be:	6839      	ldr	r1, [r7, #0]
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 fb3b 	bl	8009f3c <USBD_CtlError>
          break;
 80098c6:	bf00      	nop
      }
      break;
 80098c8:	e004      	b.n	80098d4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80098ca:	6839      	ldr	r1, [r7, #0]
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 fb35 	bl	8009f3c <USBD_CtlError>
      break;
 80098d2:	bf00      	nop
  }

  return ret;
 80098d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
	...

080098e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80098ea:	2300      	movs	r3, #0
 80098ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80098ee:	2300      	movs	r3, #0
 80098f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80098f2:	2300      	movs	r3, #0
 80098f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	885b      	ldrh	r3, [r3, #2]
 80098fa:	0a1b      	lsrs	r3, r3, #8
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	3b01      	subs	r3, #1
 8009900:	2b06      	cmp	r3, #6
 8009902:	f200 8128 	bhi.w	8009b56 <USBD_GetDescriptor+0x276>
 8009906:	a201      	add	r2, pc, #4	; (adr r2, 800990c <USBD_GetDescriptor+0x2c>)
 8009908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800990c:	08009929 	.word	0x08009929
 8009910:	08009941 	.word	0x08009941
 8009914:	08009981 	.word	0x08009981
 8009918:	08009b57 	.word	0x08009b57
 800991c:	08009b57 	.word	0x08009b57
 8009920:	08009af7 	.word	0x08009af7
 8009924:	08009b23 	.word	0x08009b23
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	7c12      	ldrb	r2, [r2, #16]
 8009934:	f107 0108 	add.w	r1, r7, #8
 8009938:	4610      	mov	r0, r2
 800993a:	4798      	blx	r3
 800993c:	60f8      	str	r0, [r7, #12]
      break;
 800993e:	e112      	b.n	8009b66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	7c1b      	ldrb	r3, [r3, #16]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d10d      	bne.n	8009964 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800994e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009950:	f107 0208 	add.w	r2, r7, #8
 8009954:	4610      	mov	r0, r2
 8009956:	4798      	blx	r3
 8009958:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	3301      	adds	r3, #1
 800995e:	2202      	movs	r2, #2
 8009960:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009962:	e100      	b.n	8009b66 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800996a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800996c:	f107 0208 	add.w	r2, r7, #8
 8009970:	4610      	mov	r0, r2
 8009972:	4798      	blx	r3
 8009974:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	3301      	adds	r3, #1
 800997a:	2202      	movs	r2, #2
 800997c:	701a      	strb	r2, [r3, #0]
      break;
 800997e:	e0f2      	b.n	8009b66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	885b      	ldrh	r3, [r3, #2]
 8009984:	b2db      	uxtb	r3, r3
 8009986:	2b05      	cmp	r3, #5
 8009988:	f200 80ac 	bhi.w	8009ae4 <USBD_GetDescriptor+0x204>
 800998c:	a201      	add	r2, pc, #4	; (adr r2, 8009994 <USBD_GetDescriptor+0xb4>)
 800998e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009992:	bf00      	nop
 8009994:	080099ad 	.word	0x080099ad
 8009998:	080099e1 	.word	0x080099e1
 800999c:	08009a15 	.word	0x08009a15
 80099a0:	08009a49 	.word	0x08009a49
 80099a4:	08009a7d 	.word	0x08009a7d
 80099a8:	08009ab1 	.word	0x08009ab1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d00b      	beq.n	80099d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	7c12      	ldrb	r2, [r2, #16]
 80099c4:	f107 0108 	add.w	r1, r7, #8
 80099c8:	4610      	mov	r0, r2
 80099ca:	4798      	blx	r3
 80099cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099ce:	e091      	b.n	8009af4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099d0:	6839      	ldr	r1, [r7, #0]
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 fab2 	bl	8009f3c <USBD_CtlError>
            err++;
 80099d8:	7afb      	ldrb	r3, [r7, #11]
 80099da:	3301      	adds	r3, #1
 80099dc:	72fb      	strb	r3, [r7, #11]
          break;
 80099de:	e089      	b.n	8009af4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00b      	beq.n	8009a04 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	7c12      	ldrb	r2, [r2, #16]
 80099f8:	f107 0108 	add.w	r1, r7, #8
 80099fc:	4610      	mov	r0, r2
 80099fe:	4798      	blx	r3
 8009a00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a02:	e077      	b.n	8009af4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a04:	6839      	ldr	r1, [r7, #0]
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 fa98 	bl	8009f3c <USBD_CtlError>
            err++;
 8009a0c:	7afb      	ldrb	r3, [r7, #11]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	72fb      	strb	r3, [r7, #11]
          break;
 8009a12:	e06f      	b.n	8009af4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a1a:	68db      	ldr	r3, [r3, #12]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00b      	beq.n	8009a38 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	7c12      	ldrb	r2, [r2, #16]
 8009a2c:	f107 0108 	add.w	r1, r7, #8
 8009a30:	4610      	mov	r0, r2
 8009a32:	4798      	blx	r3
 8009a34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a36:	e05d      	b.n	8009af4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fa7e 	bl	8009f3c <USBD_CtlError>
            err++;
 8009a40:	7afb      	ldrb	r3, [r7, #11]
 8009a42:	3301      	adds	r3, #1
 8009a44:	72fb      	strb	r3, [r7, #11]
          break;
 8009a46:	e055      	b.n	8009af4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d00b      	beq.n	8009a6c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a5a:	691b      	ldr	r3, [r3, #16]
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	7c12      	ldrb	r2, [r2, #16]
 8009a60:	f107 0108 	add.w	r1, r7, #8
 8009a64:	4610      	mov	r0, r2
 8009a66:	4798      	blx	r3
 8009a68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a6a:	e043      	b.n	8009af4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a6c:	6839      	ldr	r1, [r7, #0]
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 fa64 	bl	8009f3c <USBD_CtlError>
            err++;
 8009a74:	7afb      	ldrb	r3, [r7, #11]
 8009a76:	3301      	adds	r3, #1
 8009a78:	72fb      	strb	r3, [r7, #11]
          break;
 8009a7a:	e03b      	b.n	8009af4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a82:	695b      	ldr	r3, [r3, #20]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d00b      	beq.n	8009aa0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a8e:	695b      	ldr	r3, [r3, #20]
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	7c12      	ldrb	r2, [r2, #16]
 8009a94:	f107 0108 	add.w	r1, r7, #8
 8009a98:	4610      	mov	r0, r2
 8009a9a:	4798      	blx	r3
 8009a9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a9e:	e029      	b.n	8009af4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009aa0:	6839      	ldr	r1, [r7, #0]
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 fa4a 	bl	8009f3c <USBD_CtlError>
            err++;
 8009aa8:	7afb      	ldrb	r3, [r7, #11]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	72fb      	strb	r3, [r7, #11]
          break;
 8009aae:	e021      	b.n	8009af4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ab6:	699b      	ldr	r3, [r3, #24]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00b      	beq.n	8009ad4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ac2:	699b      	ldr	r3, [r3, #24]
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	7c12      	ldrb	r2, [r2, #16]
 8009ac8:	f107 0108 	add.w	r1, r7, #8
 8009acc:	4610      	mov	r0, r2
 8009ace:	4798      	blx	r3
 8009ad0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ad2:	e00f      	b.n	8009af4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ad4:	6839      	ldr	r1, [r7, #0]
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 fa30 	bl	8009f3c <USBD_CtlError>
            err++;
 8009adc:	7afb      	ldrb	r3, [r7, #11]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ae2:	e007      	b.n	8009af4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009ae4:	6839      	ldr	r1, [r7, #0]
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fa28 	bl	8009f3c <USBD_CtlError>
          err++;
 8009aec:	7afb      	ldrb	r3, [r7, #11]
 8009aee:	3301      	adds	r3, #1
 8009af0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009af2:	bf00      	nop
      }
      break;
 8009af4:	e037      	b.n	8009b66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	7c1b      	ldrb	r3, [r3, #16]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d109      	bne.n	8009b12 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b06:	f107 0208 	add.w	r2, r7, #8
 8009b0a:	4610      	mov	r0, r2
 8009b0c:	4798      	blx	r3
 8009b0e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b10:	e029      	b.n	8009b66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b12:	6839      	ldr	r1, [r7, #0]
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 fa11 	bl	8009f3c <USBD_CtlError>
        err++;
 8009b1a:	7afb      	ldrb	r3, [r7, #11]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	72fb      	strb	r3, [r7, #11]
      break;
 8009b20:	e021      	b.n	8009b66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	7c1b      	ldrb	r3, [r3, #16]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d10d      	bne.n	8009b46 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b32:	f107 0208 	add.w	r2, r7, #8
 8009b36:	4610      	mov	r0, r2
 8009b38:	4798      	blx	r3
 8009b3a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	2207      	movs	r2, #7
 8009b42:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b44:	e00f      	b.n	8009b66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b46:	6839      	ldr	r1, [r7, #0]
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 f9f7 	bl	8009f3c <USBD_CtlError>
        err++;
 8009b4e:	7afb      	ldrb	r3, [r7, #11]
 8009b50:	3301      	adds	r3, #1
 8009b52:	72fb      	strb	r3, [r7, #11]
      break;
 8009b54:	e007      	b.n	8009b66 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009b56:	6839      	ldr	r1, [r7, #0]
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f9ef 	bl	8009f3c <USBD_CtlError>
      err++;
 8009b5e:	7afb      	ldrb	r3, [r7, #11]
 8009b60:	3301      	adds	r3, #1
 8009b62:	72fb      	strb	r3, [r7, #11]
      break;
 8009b64:	bf00      	nop
  }

  if (err != 0U)
 8009b66:	7afb      	ldrb	r3, [r7, #11]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d11e      	bne.n	8009baa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	88db      	ldrh	r3, [r3, #6]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d016      	beq.n	8009ba2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009b74:	893b      	ldrh	r3, [r7, #8]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00e      	beq.n	8009b98 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	88da      	ldrh	r2, [r3, #6]
 8009b7e:	893b      	ldrh	r3, [r7, #8]
 8009b80:	4293      	cmp	r3, r2
 8009b82:	bf28      	it	cs
 8009b84:	4613      	movcs	r3, r2
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009b8a:	893b      	ldrh	r3, [r7, #8]
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	68f9      	ldr	r1, [r7, #12]
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 fa44 	bl	800a01e <USBD_CtlSendData>
 8009b96:	e009      	b.n	8009bac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009b98:	6839      	ldr	r1, [r7, #0]
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 f9ce 	bl	8009f3c <USBD_CtlError>
 8009ba0:	e004      	b.n	8009bac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 fa78 	bl	800a098 <USBD_CtlSendStatus>
 8009ba8:	e000      	b.n	8009bac <USBD_GetDescriptor+0x2cc>
    return;
 8009baa:	bf00      	nop
  }
}
 8009bac:	3710      	adds	r7, #16
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop

08009bb4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	889b      	ldrh	r3, [r3, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d131      	bne.n	8009c2a <USBD_SetAddress+0x76>
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	88db      	ldrh	r3, [r3, #6]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d12d      	bne.n	8009c2a <USBD_SetAddress+0x76>
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	885b      	ldrh	r3, [r3, #2]
 8009bd2:	2b7f      	cmp	r3, #127	; 0x7f
 8009bd4:	d829      	bhi.n	8009c2a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	885b      	ldrh	r3, [r3, #2]
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009be0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	2b03      	cmp	r3, #3
 8009bec:	d104      	bne.n	8009bf8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009bee:	6839      	ldr	r1, [r7, #0]
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 f9a3 	bl	8009f3c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bf6:	e01d      	b.n	8009c34 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	7bfa      	ldrb	r2, [r7, #15]
 8009bfc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c00:	7bfb      	ldrb	r3, [r7, #15]
 8009c02:	4619      	mov	r1, r3
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f003 fb9d 	bl	800d344 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 fa44 	bl	800a098 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c10:	7bfb      	ldrb	r3, [r7, #15]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d004      	beq.n	8009c20 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2202      	movs	r2, #2
 8009c1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c1e:	e009      	b.n	8009c34 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2201      	movs	r2, #1
 8009c24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c28:	e004      	b.n	8009c34 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c2a:	6839      	ldr	r1, [r7, #0]
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 f985 	bl	8009f3c <USBD_CtlError>
  }
}
 8009c32:	bf00      	nop
 8009c34:	bf00      	nop
 8009c36:	3710      	adds	r7, #16
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c46:	2300      	movs	r3, #0
 8009c48:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	885b      	ldrh	r3, [r3, #2]
 8009c4e:	b2da      	uxtb	r2, r3
 8009c50:	4b4c      	ldr	r3, [pc, #304]	; (8009d84 <USBD_SetConfig+0x148>)
 8009c52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009c54:	4b4b      	ldr	r3, [pc, #300]	; (8009d84 <USBD_SetConfig+0x148>)
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d905      	bls.n	8009c68 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009c5c:	6839      	ldr	r1, [r7, #0]
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 f96c 	bl	8009f3c <USBD_CtlError>
    return USBD_FAIL;
 8009c64:	2303      	movs	r3, #3
 8009c66:	e088      	b.n	8009d7a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	2b02      	cmp	r3, #2
 8009c72:	d002      	beq.n	8009c7a <USBD_SetConfig+0x3e>
 8009c74:	2b03      	cmp	r3, #3
 8009c76:	d025      	beq.n	8009cc4 <USBD_SetConfig+0x88>
 8009c78:	e071      	b.n	8009d5e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009c7a:	4b42      	ldr	r3, [pc, #264]	; (8009d84 <USBD_SetConfig+0x148>)
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d01c      	beq.n	8009cbc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009c82:	4b40      	ldr	r3, [pc, #256]	; (8009d84 <USBD_SetConfig+0x148>)
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	461a      	mov	r2, r3
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c8c:	4b3d      	ldr	r3, [pc, #244]	; (8009d84 <USBD_SetConfig+0x148>)
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	4619      	mov	r1, r3
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f7ff f93a 	bl	8008f0c <USBD_SetClassConfig>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009c9c:	7bfb      	ldrb	r3, [r7, #15]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d004      	beq.n	8009cac <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009ca2:	6839      	ldr	r1, [r7, #0]
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 f949 	bl	8009f3c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009caa:	e065      	b.n	8009d78 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 f9f3 	bl	800a098 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2203      	movs	r2, #3
 8009cb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009cba:	e05d      	b.n	8009d78 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 f9eb 	bl	800a098 <USBD_CtlSendStatus>
      break;
 8009cc2:	e059      	b.n	8009d78 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009cc4:	4b2f      	ldr	r3, [pc, #188]	; (8009d84 <USBD_SetConfig+0x148>)
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d112      	bne.n	8009cf2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2202      	movs	r2, #2
 8009cd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009cd4:	4b2b      	ldr	r3, [pc, #172]	; (8009d84 <USBD_SetConfig+0x148>)
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	461a      	mov	r2, r3
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009cde:	4b29      	ldr	r3, [pc, #164]	; (8009d84 <USBD_SetConfig+0x148>)
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f7ff f92d 	bl	8008f44 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 f9d4 	bl	800a098 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009cf0:	e042      	b.n	8009d78 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009cf2:	4b24      	ldr	r3, [pc, #144]	; (8009d84 <USBD_SetConfig+0x148>)
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d02a      	beq.n	8009d56 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	4619      	mov	r1, r3
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f7ff f91b 	bl	8008f44 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009d0e:	4b1d      	ldr	r3, [pc, #116]	; (8009d84 <USBD_SetConfig+0x148>)
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	461a      	mov	r2, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d18:	4b1a      	ldr	r3, [pc, #104]	; (8009d84 <USBD_SetConfig+0x148>)
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f7ff f8f4 	bl	8008f0c <USBD_SetClassConfig>
 8009d24:	4603      	mov	r3, r0
 8009d26:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009d28:	7bfb      	ldrb	r3, [r7, #15]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d00f      	beq.n	8009d4e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009d2e:	6839      	ldr	r1, [r7, #0]
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 f903 	bl	8009f3c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f7ff f900 	bl	8008f44 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2202      	movs	r2, #2
 8009d48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009d4c:	e014      	b.n	8009d78 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 f9a2 	bl	800a098 <USBD_CtlSendStatus>
      break;
 8009d54:	e010      	b.n	8009d78 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 f99e 	bl	800a098 <USBD_CtlSendStatus>
      break;
 8009d5c:	e00c      	b.n	8009d78 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009d5e:	6839      	ldr	r1, [r7, #0]
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 f8eb 	bl	8009f3c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d66:	4b07      	ldr	r3, [pc, #28]	; (8009d84 <USBD_SetConfig+0x148>)
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f7ff f8e9 	bl	8008f44 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009d72:	2303      	movs	r3, #3
 8009d74:	73fb      	strb	r3, [r7, #15]
      break;
 8009d76:	bf00      	nop
  }

  return ret;
 8009d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3710      	adds	r7, #16
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	20000abf 	.word	0x20000abf

08009d88 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	88db      	ldrh	r3, [r3, #6]
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d004      	beq.n	8009da4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009d9a:	6839      	ldr	r1, [r7, #0]
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 f8cd 	bl	8009f3c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009da2:	e023      	b.n	8009dec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	2b02      	cmp	r3, #2
 8009dae:	dc02      	bgt.n	8009db6 <USBD_GetConfig+0x2e>
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	dc03      	bgt.n	8009dbc <USBD_GetConfig+0x34>
 8009db4:	e015      	b.n	8009de2 <USBD_GetConfig+0x5a>
 8009db6:	2b03      	cmp	r3, #3
 8009db8:	d00b      	beq.n	8009dd2 <USBD_GetConfig+0x4a>
 8009dba:	e012      	b.n	8009de2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	3308      	adds	r3, #8
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	4619      	mov	r1, r3
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 f927 	bl	800a01e <USBD_CtlSendData>
        break;
 8009dd0:	e00c      	b.n	8009dec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	3304      	adds	r3, #4
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	4619      	mov	r1, r3
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f91f 	bl	800a01e <USBD_CtlSendData>
        break;
 8009de0:	e004      	b.n	8009dec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009de2:	6839      	ldr	r1, [r7, #0]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 f8a9 	bl	8009f3c <USBD_CtlError>
        break;
 8009dea:	bf00      	nop
}
 8009dec:	bf00      	nop
 8009dee:	3708      	adds	r7, #8
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	3b01      	subs	r3, #1
 8009e08:	2b02      	cmp	r3, #2
 8009e0a:	d81e      	bhi.n	8009e4a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	88db      	ldrh	r3, [r3, #6]
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d004      	beq.n	8009e1e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009e14:	6839      	ldr	r1, [r7, #0]
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 f890 	bl	8009f3c <USBD_CtlError>
        break;
 8009e1c:	e01a      	b.n	8009e54 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2201      	movs	r2, #1
 8009e22:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d005      	beq.n	8009e3a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	f043 0202 	orr.w	r2, r3, #2
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	330c      	adds	r3, #12
 8009e3e:	2202      	movs	r2, #2
 8009e40:	4619      	mov	r1, r3
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 f8eb 	bl	800a01e <USBD_CtlSendData>
      break;
 8009e48:	e004      	b.n	8009e54 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009e4a:	6839      	ldr	r1, [r7, #0]
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 f875 	bl	8009f3c <USBD_CtlError>
      break;
 8009e52:	bf00      	nop
  }
}
 8009e54:	bf00      	nop
 8009e56:	3708      	adds	r7, #8
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	885b      	ldrh	r3, [r3, #2]
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d106      	bne.n	8009e7c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2201      	movs	r2, #1
 8009e72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 f90e 	bl	800a098 <USBD_CtlSendStatus>
  }
}
 8009e7c:	bf00      	nop
 8009e7e:	3708      	adds	r7, #8
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	3b01      	subs	r3, #1
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d80b      	bhi.n	8009eb4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	885b      	ldrh	r3, [r3, #2]
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d10c      	bne.n	8009ebe <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 f8f3 	bl	800a098 <USBD_CtlSendStatus>
      }
      break;
 8009eb2:	e004      	b.n	8009ebe <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009eb4:	6839      	ldr	r1, [r7, #0]
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 f840 	bl	8009f3c <USBD_CtlError>
      break;
 8009ebc:	e000      	b.n	8009ec0 <USBD_ClrFeature+0x3c>
      break;
 8009ebe:	bf00      	nop
  }
}
 8009ec0:	bf00      	nop
 8009ec2:	3708      	adds	r7, #8
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	781a      	ldrb	r2, [r3, #0]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	3301      	adds	r3, #1
 8009ee2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	781a      	ldrb	r2, [r3, #0]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	3301      	adds	r3, #1
 8009ef0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009ef2:	68f8      	ldr	r0, [r7, #12]
 8009ef4:	f7ff faad 	bl	8009452 <SWAPBYTE>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	461a      	mov	r2, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	3301      	adds	r3, #1
 8009f04:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	3301      	adds	r3, #1
 8009f0a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009f0c:	68f8      	ldr	r0, [r7, #12]
 8009f0e:	f7ff faa0 	bl	8009452 <SWAPBYTE>
 8009f12:	4603      	mov	r3, r0
 8009f14:	461a      	mov	r2, r3
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	3301      	adds	r3, #1
 8009f24:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009f26:	68f8      	ldr	r0, [r7, #12]
 8009f28:	f7ff fa93 	bl	8009452 <SWAPBYTE>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	461a      	mov	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	80da      	strh	r2, [r3, #6]
}
 8009f34:	bf00      	nop
 8009f36:	3710      	adds	r7, #16
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b082      	sub	sp, #8
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f46:	2180      	movs	r1, #128	; 0x80
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f003 f991 	bl	800d270 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009f4e:	2100      	movs	r1, #0
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f003 f98d 	bl	800d270 <USBD_LL_StallEP>
}
 8009f56:	bf00      	nop
 8009f58:	3708      	adds	r7, #8
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b086      	sub	sp, #24
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	60f8      	str	r0, [r7, #12]
 8009f66:	60b9      	str	r1, [r7, #8]
 8009f68:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d036      	beq.n	8009fe2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009f78:	6938      	ldr	r0, [r7, #16]
 8009f7a:	f000 f836 	bl	8009fea <USBD_GetLen>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	3301      	adds	r3, #1
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	005b      	lsls	r3, r3, #1
 8009f86:	b29a      	uxth	r2, r3
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009f8c:	7dfb      	ldrb	r3, [r7, #23]
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	4413      	add	r3, r2
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	7812      	ldrb	r2, [r2, #0]
 8009f96:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f98:	7dfb      	ldrb	r3, [r7, #23]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009f9e:	7dfb      	ldrb	r3, [r7, #23]
 8009fa0:	68ba      	ldr	r2, [r7, #8]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	2203      	movs	r2, #3
 8009fa6:	701a      	strb	r2, [r3, #0]
  idx++;
 8009fa8:	7dfb      	ldrb	r3, [r7, #23]
 8009faa:	3301      	adds	r3, #1
 8009fac:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009fae:	e013      	b.n	8009fd8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009fb0:	7dfb      	ldrb	r3, [r7, #23]
 8009fb2:	68ba      	ldr	r2, [r7, #8]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	693a      	ldr	r2, [r7, #16]
 8009fb8:	7812      	ldrb	r2, [r2, #0]
 8009fba:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	613b      	str	r3, [r7, #16]
    idx++;
 8009fc2:	7dfb      	ldrb	r3, [r7, #23]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009fc8:	7dfb      	ldrb	r3, [r7, #23]
 8009fca:	68ba      	ldr	r2, [r7, #8]
 8009fcc:	4413      	add	r3, r2
 8009fce:	2200      	movs	r2, #0
 8009fd0:	701a      	strb	r2, [r3, #0]
    idx++;
 8009fd2:	7dfb      	ldrb	r3, [r7, #23]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d1e7      	bne.n	8009fb0 <USBD_GetString+0x52>
 8009fe0:	e000      	b.n	8009fe4 <USBD_GetString+0x86>
    return;
 8009fe2:	bf00      	nop
  }
}
 8009fe4:	3718      	adds	r7, #24
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009fea:	b480      	push	{r7}
 8009fec:	b085      	sub	sp, #20
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009ffa:	e005      	b.n	800a008 <USBD_GetLen+0x1e>
  {
    len++;
 8009ffc:	7bfb      	ldrb	r3, [r7, #15]
 8009ffe:	3301      	adds	r3, #1
 800a000:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	3301      	adds	r3, #1
 800a006:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d1f5      	bne.n	8009ffc <USBD_GetLen+0x12>
  }

  return len;
 800a010:	7bfb      	ldrb	r3, [r7, #15]
}
 800a012:	4618      	mov	r0, r3
 800a014:	3714      	adds	r7, #20
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr

0800a01e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b084      	sub	sp, #16
 800a022:	af00      	add	r7, sp, #0
 800a024:	60f8      	str	r0, [r7, #12]
 800a026:	60b9      	str	r1, [r7, #8]
 800a028:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2202      	movs	r2, #2
 800a02e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	68ba      	ldr	r2, [r7, #8]
 800a042:	2100      	movs	r1, #0
 800a044:	68f8      	ldr	r0, [r7, #12]
 800a046:	f003 f99c 	bl	800d382 <USBD_LL_Transmit>

  return USBD_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3710      	adds	r7, #16
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	68ba      	ldr	r2, [r7, #8]
 800a064:	2100      	movs	r1, #0
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f003 f98b 	bl	800d382 <USBD_LL_Transmit>

  return USBD_OK;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b084      	sub	sp, #16
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	60f8      	str	r0, [r7, #12]
 800a07e:	60b9      	str	r1, [r7, #8]
 800a080:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	68ba      	ldr	r2, [r7, #8]
 800a086:	2100      	movs	r1, #0
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f003 f99b 	bl	800d3c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a08e:	2300      	movs	r3, #0
}
 800a090:	4618      	mov	r0, r3
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2204      	movs	r2, #4
 800a0a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f003 f967 	bl	800d382 <USBD_LL_Transmit>

  return USBD_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b082      	sub	sp, #8
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2205      	movs	r2, #5
 800a0ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f003 f975 	bl	800d3c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3708      	adds	r7, #8
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <__NVIC_SetPriority>:
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	6039      	str	r1, [r7, #0]
 800a0ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a0f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	db0a      	blt.n	800a10e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	b2da      	uxtb	r2, r3
 800a0fc:	490c      	ldr	r1, [pc, #48]	; (800a130 <__NVIC_SetPriority+0x4c>)
 800a0fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a102:	0112      	lsls	r2, r2, #4
 800a104:	b2d2      	uxtb	r2, r2
 800a106:	440b      	add	r3, r1
 800a108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a10c:	e00a      	b.n	800a124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	b2da      	uxtb	r2, r3
 800a112:	4908      	ldr	r1, [pc, #32]	; (800a134 <__NVIC_SetPriority+0x50>)
 800a114:	79fb      	ldrb	r3, [r7, #7]
 800a116:	f003 030f 	and.w	r3, r3, #15
 800a11a:	3b04      	subs	r3, #4
 800a11c:	0112      	lsls	r2, r2, #4
 800a11e:	b2d2      	uxtb	r2, r2
 800a120:	440b      	add	r3, r1
 800a122:	761a      	strb	r2, [r3, #24]
}
 800a124:	bf00      	nop
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr
 800a130:	e000e100 	.word	0xe000e100
 800a134:	e000ed00 	.word	0xe000ed00

0800a138 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a138:	b580      	push	{r7, lr}
 800a13a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a13c:	4b05      	ldr	r3, [pc, #20]	; (800a154 <SysTick_Handler+0x1c>)
 800a13e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a140:	f001 fcfe 	bl	800bb40 <xTaskGetSchedulerState>
 800a144:	4603      	mov	r3, r0
 800a146:	2b01      	cmp	r3, #1
 800a148:	d001      	beq.n	800a14e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a14a:	f002 fae5 	bl	800c718 <xPortSysTickHandler>
  }
}
 800a14e:	bf00      	nop
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	e000e010 	.word	0xe000e010

0800a158 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a158:	b580      	push	{r7, lr}
 800a15a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a15c:	2100      	movs	r1, #0
 800a15e:	f06f 0004 	mvn.w	r0, #4
 800a162:	f7ff ffbf 	bl	800a0e4 <__NVIC_SetPriority>
#endif
}
 800a166:	bf00      	nop
 800a168:	bd80      	pop	{r7, pc}
	...

0800a16c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a172:	f3ef 8305 	mrs	r3, IPSR
 800a176:	603b      	str	r3, [r7, #0]
  return(result);
 800a178:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d003      	beq.n	800a186 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a17e:	f06f 0305 	mvn.w	r3, #5
 800a182:	607b      	str	r3, [r7, #4]
 800a184:	e00c      	b.n	800a1a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a186:	4b0a      	ldr	r3, [pc, #40]	; (800a1b0 <osKernelInitialize+0x44>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d105      	bne.n	800a19a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a18e:	4b08      	ldr	r3, [pc, #32]	; (800a1b0 <osKernelInitialize+0x44>)
 800a190:	2201      	movs	r2, #1
 800a192:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a194:	2300      	movs	r3, #0
 800a196:	607b      	str	r3, [r7, #4]
 800a198:	e002      	b.n	800a1a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a19a:	f04f 33ff 	mov.w	r3, #4294967295
 800a19e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a1a0:	687b      	ldr	r3, [r7, #4]
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	370c      	adds	r7, #12
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr
 800a1ae:	bf00      	nop
 800a1b0:	20000ac0 	.word	0x20000ac0

0800a1b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1ba:	f3ef 8305 	mrs	r3, IPSR
 800a1be:	603b      	str	r3, [r7, #0]
  return(result);
 800a1c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d003      	beq.n	800a1ce <osKernelStart+0x1a>
    stat = osErrorISR;
 800a1c6:	f06f 0305 	mvn.w	r3, #5
 800a1ca:	607b      	str	r3, [r7, #4]
 800a1cc:	e010      	b.n	800a1f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a1ce:	4b0b      	ldr	r3, [pc, #44]	; (800a1fc <osKernelStart+0x48>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d109      	bne.n	800a1ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a1d6:	f7ff ffbf 	bl	800a158 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a1da:	4b08      	ldr	r3, [pc, #32]	; (800a1fc <osKernelStart+0x48>)
 800a1dc:	2202      	movs	r2, #2
 800a1de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a1e0:	f001 f866 	bl	800b2b0 <vTaskStartScheduler>
      stat = osOK;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	607b      	str	r3, [r7, #4]
 800a1e8:	e002      	b.n	800a1f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a1ea:	f04f 33ff 	mov.w	r3, #4294967295
 800a1ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a1f0:	687b      	ldr	r3, [r7, #4]
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3708      	adds	r7, #8
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	20000ac0 	.word	0x20000ac0

0800a200 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a200:	b580      	push	{r7, lr}
 800a202:	b08e      	sub	sp, #56	; 0x38
 800a204:	af04      	add	r7, sp, #16
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a20c:	2300      	movs	r3, #0
 800a20e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a210:	f3ef 8305 	mrs	r3, IPSR
 800a214:	617b      	str	r3, [r7, #20]
  return(result);
 800a216:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d17e      	bne.n	800a31a <osThreadNew+0x11a>
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d07b      	beq.n	800a31a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a222:	2380      	movs	r3, #128	; 0x80
 800a224:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a226:	2318      	movs	r3, #24
 800a228:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a22a:	2300      	movs	r3, #0
 800a22c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a22e:	f04f 33ff 	mov.w	r3, #4294967295
 800a232:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d045      	beq.n	800a2c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d002      	beq.n	800a248 <osThreadNew+0x48>
        name = attr->name;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	699b      	ldr	r3, [r3, #24]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d002      	beq.n	800a256 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	699b      	ldr	r3, [r3, #24]
 800a254:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d008      	beq.n	800a26e <osThreadNew+0x6e>
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	2b38      	cmp	r3, #56	; 0x38
 800a260:	d805      	bhi.n	800a26e <osThreadNew+0x6e>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	f003 0301 	and.w	r3, r3, #1
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d001      	beq.n	800a272 <osThreadNew+0x72>
        return (NULL);
 800a26e:	2300      	movs	r3, #0
 800a270:	e054      	b.n	800a31c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	695b      	ldr	r3, [r3, #20]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d003      	beq.n	800a282 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	695b      	ldr	r3, [r3, #20]
 800a27e:	089b      	lsrs	r3, r3, #2
 800a280:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	689b      	ldr	r3, [r3, #8]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00e      	beq.n	800a2a8 <osThreadNew+0xa8>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	2b5b      	cmp	r3, #91	; 0x5b
 800a290:	d90a      	bls.n	800a2a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a296:	2b00      	cmp	r3, #0
 800a298:	d006      	beq.n	800a2a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	695b      	ldr	r3, [r3, #20]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d002      	beq.n	800a2a8 <osThreadNew+0xa8>
        mem = 1;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	61bb      	str	r3, [r7, #24]
 800a2a6:	e010      	b.n	800a2ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d10c      	bne.n	800a2ca <osThreadNew+0xca>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d108      	bne.n	800a2ca <osThreadNew+0xca>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	691b      	ldr	r3, [r3, #16]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d104      	bne.n	800a2ca <osThreadNew+0xca>
          mem = 0;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	61bb      	str	r3, [r7, #24]
 800a2c4:	e001      	b.n	800a2ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d110      	bne.n	800a2f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a2d8:	9202      	str	r2, [sp, #8]
 800a2da:	9301      	str	r3, [sp, #4]
 800a2dc:	69fb      	ldr	r3, [r7, #28]
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	6a3a      	ldr	r2, [r7, #32]
 800a2e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a2e6:	68f8      	ldr	r0, [r7, #12]
 800a2e8:	f000 fe0c 	bl	800af04 <xTaskCreateStatic>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	613b      	str	r3, [r7, #16]
 800a2f0:	e013      	b.n	800a31a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d110      	bne.n	800a31a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a2f8:	6a3b      	ldr	r3, [r7, #32]
 800a2fa:	b29a      	uxth	r2, r3
 800a2fc:	f107 0310 	add.w	r3, r7, #16
 800a300:	9301      	str	r3, [sp, #4]
 800a302:	69fb      	ldr	r3, [r7, #28]
 800a304:	9300      	str	r3, [sp, #0]
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f000 fe57 	bl	800afbe <xTaskCreate>
 800a310:	4603      	mov	r3, r0
 800a312:	2b01      	cmp	r3, #1
 800a314:	d001      	beq.n	800a31a <osThreadNew+0x11a>
            hTask = NULL;
 800a316:	2300      	movs	r3, #0
 800a318:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a31a:	693b      	ldr	r3, [r7, #16]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3728      	adds	r7, #40	; 0x28
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a32c:	f3ef 8305 	mrs	r3, IPSR
 800a330:	60bb      	str	r3, [r7, #8]
  return(result);
 800a332:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a334:	2b00      	cmp	r3, #0
 800a336:	d003      	beq.n	800a340 <osDelay+0x1c>
    stat = osErrorISR;
 800a338:	f06f 0305 	mvn.w	r3, #5
 800a33c:	60fb      	str	r3, [r7, #12]
 800a33e:	e007      	b.n	800a350 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a340:	2300      	movs	r3, #0
 800a342:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d002      	beq.n	800a350 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 ff7c 	bl	800b248 <vTaskDelay>
    }
  }

  return (stat);
 800a350:	68fb      	ldr	r3, [r7, #12]
}
 800a352:	4618      	mov	r0, r3
 800a354:	3710      	adds	r7, #16
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
	...

0800a35c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a35c:	b480      	push	{r7}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	4a07      	ldr	r2, [pc, #28]	; (800a388 <vApplicationGetIdleTaskMemory+0x2c>)
 800a36c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	4a06      	ldr	r2, [pc, #24]	; (800a38c <vApplicationGetIdleTaskMemory+0x30>)
 800a372:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2280      	movs	r2, #128	; 0x80
 800a378:	601a      	str	r2, [r3, #0]
}
 800a37a:	bf00      	nop
 800a37c:	3714      	adds	r7, #20
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr
 800a386:	bf00      	nop
 800a388:	20000ac4 	.word	0x20000ac4
 800a38c:	20000b20 	.word	0x20000b20

0800a390 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a390:	b480      	push	{r7}
 800a392:	b085      	sub	sp, #20
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	4a07      	ldr	r2, [pc, #28]	; (800a3bc <vApplicationGetTimerTaskMemory+0x2c>)
 800a3a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	4a06      	ldr	r2, [pc, #24]	; (800a3c0 <vApplicationGetTimerTaskMemory+0x30>)
 800a3a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a3ae:	601a      	str	r2, [r3, #0]
}
 800a3b0:	bf00      	nop
 800a3b2:	3714      	adds	r7, #20
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr
 800a3bc:	20000d20 	.word	0x20000d20
 800a3c0:	20000d7c 	.word	0x20000d7c

0800a3c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f103 0208 	add.w	r2, r3, #8
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a3dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f103 0208 	add.w	r2, r3, #8
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f103 0208 	add.w	r2, r3, #8
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a3f8:	bf00      	nop
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a412:	bf00      	nop
 800a414:	370c      	adds	r7, #12
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr

0800a41e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a41e:	b480      	push	{r7}
 800a420:	b085      	sub	sp, #20
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
 800a426:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	689a      	ldr	r2, [r3, #8]
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	683a      	ldr	r2, [r7, #0]
 800a442:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	683a      	ldr	r2, [r7, #0]
 800a448:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	1c5a      	adds	r2, r3, #1
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	601a      	str	r2, [r3, #0]
}
 800a45a:	bf00      	nop
 800a45c:	3714      	adds	r7, #20
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr

0800a466 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a466:	b480      	push	{r7}
 800a468:	b085      	sub	sp, #20
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
 800a46e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a47c:	d103      	bne.n	800a486 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	691b      	ldr	r3, [r3, #16]
 800a482:	60fb      	str	r3, [r7, #12]
 800a484:	e00c      	b.n	800a4a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	3308      	adds	r3, #8
 800a48a:	60fb      	str	r3, [r7, #12]
 800a48c:	e002      	b.n	800a494 <vListInsert+0x2e>
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	60fb      	str	r3, [r7, #12]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	68ba      	ldr	r2, [r7, #8]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d2f6      	bcs.n	800a48e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	685a      	ldr	r2, [r3, #4]
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	683a      	ldr	r2, [r7, #0]
 800a4ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	683a      	ldr	r2, [r7, #0]
 800a4ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	1c5a      	adds	r2, r3, #1
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	601a      	str	r2, [r3, #0]
}
 800a4cc:	bf00      	nop
 800a4ce:	3714      	adds	r7, #20
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	691b      	ldr	r3, [r3, #16]
 800a4e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	6892      	ldr	r2, [r2, #8]
 800a4ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	6852      	ldr	r2, [r2, #4]
 800a4f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	429a      	cmp	r2, r3
 800a502:	d103      	bne.n	800a50c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	689a      	ldr	r2, [r3, #8]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2200      	movs	r2, #0
 800a510:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	1e5a      	subs	r2, r3, #1
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
}
 800a520:	4618      	mov	r0, r3
 800a522:	3714      	adds	r7, #20
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d10a      	bne.n	800a556 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a544:	f383 8811 	msr	BASEPRI, r3
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	f3bf 8f4f 	dsb	sy
 800a550:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a552:	bf00      	nop
 800a554:	e7fe      	b.n	800a554 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a556:	f002 f84d 	bl	800c5f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a562:	68f9      	ldr	r1, [r7, #12]
 800a564:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a566:	fb01 f303 	mul.w	r3, r1, r3
 800a56a:	441a      	add	r2, r3
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2200      	movs	r2, #0
 800a574:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a586:	3b01      	subs	r3, #1
 800a588:	68f9      	ldr	r1, [r7, #12]
 800a58a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a58c:	fb01 f303 	mul.w	r3, r1, r3
 800a590:	441a      	add	r2, r3
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	22ff      	movs	r2, #255	; 0xff
 800a59a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	22ff      	movs	r2, #255	; 0xff
 800a5a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d114      	bne.n	800a5d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	691b      	ldr	r3, [r3, #16]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d01a      	beq.n	800a5ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	3310      	adds	r3, #16
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f001 f903 	bl	800b7c4 <xTaskRemoveFromEventList>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d012      	beq.n	800a5ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a5c4:	4b0c      	ldr	r3, [pc, #48]	; (800a5f8 <xQueueGenericReset+0xcc>)
 800a5c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5ca:	601a      	str	r2, [r3, #0]
 800a5cc:	f3bf 8f4f 	dsb	sy
 800a5d0:	f3bf 8f6f 	isb	sy
 800a5d4:	e009      	b.n	800a5ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	3310      	adds	r3, #16
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7ff fef2 	bl	800a3c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	3324      	adds	r3, #36	; 0x24
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f7ff feed 	bl	800a3c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a5ea:	f002 f833 	bl	800c654 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a5ee:	2301      	movs	r3, #1
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3710      	adds	r7, #16
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	e000ed04 	.word	0xe000ed04

0800a5fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b08e      	sub	sp, #56	; 0x38
 800a600:	af02      	add	r7, sp, #8
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]
 800a608:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d10a      	bne.n	800a626 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a614:	f383 8811 	msr	BASEPRI, r3
 800a618:	f3bf 8f6f 	isb	sy
 800a61c:	f3bf 8f4f 	dsb	sy
 800a620:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a622:	bf00      	nop
 800a624:	e7fe      	b.n	800a624 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d10a      	bne.n	800a642 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a630:	f383 8811 	msr	BASEPRI, r3
 800a634:	f3bf 8f6f 	isb	sy
 800a638:	f3bf 8f4f 	dsb	sy
 800a63c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a63e:	bf00      	nop
 800a640:	e7fe      	b.n	800a640 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d002      	beq.n	800a64e <xQueueGenericCreateStatic+0x52>
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d001      	beq.n	800a652 <xQueueGenericCreateStatic+0x56>
 800a64e:	2301      	movs	r3, #1
 800a650:	e000      	b.n	800a654 <xQueueGenericCreateStatic+0x58>
 800a652:	2300      	movs	r3, #0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d10a      	bne.n	800a66e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65c:	f383 8811 	msr	BASEPRI, r3
 800a660:	f3bf 8f6f 	isb	sy
 800a664:	f3bf 8f4f 	dsb	sy
 800a668:	623b      	str	r3, [r7, #32]
}
 800a66a:	bf00      	nop
 800a66c:	e7fe      	b.n	800a66c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d102      	bne.n	800a67a <xQueueGenericCreateStatic+0x7e>
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d101      	bne.n	800a67e <xQueueGenericCreateStatic+0x82>
 800a67a:	2301      	movs	r3, #1
 800a67c:	e000      	b.n	800a680 <xQueueGenericCreateStatic+0x84>
 800a67e:	2300      	movs	r3, #0
 800a680:	2b00      	cmp	r3, #0
 800a682:	d10a      	bne.n	800a69a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a688:	f383 8811 	msr	BASEPRI, r3
 800a68c:	f3bf 8f6f 	isb	sy
 800a690:	f3bf 8f4f 	dsb	sy
 800a694:	61fb      	str	r3, [r7, #28]
}
 800a696:	bf00      	nop
 800a698:	e7fe      	b.n	800a698 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a69a:	2350      	movs	r3, #80	; 0x50
 800a69c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	2b50      	cmp	r3, #80	; 0x50
 800a6a2:	d00a      	beq.n	800a6ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a8:	f383 8811 	msr	BASEPRI, r3
 800a6ac:	f3bf 8f6f 	isb	sy
 800a6b0:	f3bf 8f4f 	dsb	sy
 800a6b4:	61bb      	str	r3, [r7, #24]
}
 800a6b6:	bf00      	nop
 800a6b8:	e7fe      	b.n	800a6b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a6ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00d      	beq.n	800a6e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a6ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d4:	9300      	str	r3, [sp, #0]
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	68b9      	ldr	r1, [r7, #8]
 800a6dc:	68f8      	ldr	r0, [r7, #12]
 800a6de:	f000 f805 	bl	800a6ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3730      	adds	r7, #48	; 0x30
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	607a      	str	r2, [r7, #4]
 800a6f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d103      	bne.n	800a708 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a700:	69bb      	ldr	r3, [r7, #24]
 800a702:	69ba      	ldr	r2, [r7, #24]
 800a704:	601a      	str	r2, [r3, #0]
 800a706:	e002      	b.n	800a70e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a708:	69bb      	ldr	r3, [r7, #24]
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a70e:	69bb      	ldr	r3, [r7, #24]
 800a710:	68fa      	ldr	r2, [r7, #12]
 800a712:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a714:	69bb      	ldr	r3, [r7, #24]
 800a716:	68ba      	ldr	r2, [r7, #8]
 800a718:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a71a:	2101      	movs	r1, #1
 800a71c:	69b8      	ldr	r0, [r7, #24]
 800a71e:	f7ff ff05 	bl	800a52c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a722:	69bb      	ldr	r3, [r7, #24]
 800a724:	78fa      	ldrb	r2, [r7, #3]
 800a726:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a72a:	bf00      	nop
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
	...

0800a734 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b08e      	sub	sp, #56	; 0x38
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	607a      	str	r2, [r7, #4]
 800a740:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a742:	2300      	movs	r3, #0
 800a744:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d10a      	bne.n	800a766 <xQueueGenericSend+0x32>
	__asm volatile
 800a750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a754:	f383 8811 	msr	BASEPRI, r3
 800a758:	f3bf 8f6f 	isb	sy
 800a75c:	f3bf 8f4f 	dsb	sy
 800a760:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a762:	bf00      	nop
 800a764:	e7fe      	b.n	800a764 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d103      	bne.n	800a774 <xQueueGenericSend+0x40>
 800a76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a770:	2b00      	cmp	r3, #0
 800a772:	d101      	bne.n	800a778 <xQueueGenericSend+0x44>
 800a774:	2301      	movs	r3, #1
 800a776:	e000      	b.n	800a77a <xQueueGenericSend+0x46>
 800a778:	2300      	movs	r3, #0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d10a      	bne.n	800a794 <xQueueGenericSend+0x60>
	__asm volatile
 800a77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a782:	f383 8811 	msr	BASEPRI, r3
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	f3bf 8f4f 	dsb	sy
 800a78e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a790:	bf00      	nop
 800a792:	e7fe      	b.n	800a792 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	2b02      	cmp	r3, #2
 800a798:	d103      	bne.n	800a7a2 <xQueueGenericSend+0x6e>
 800a79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d101      	bne.n	800a7a6 <xQueueGenericSend+0x72>
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e000      	b.n	800a7a8 <xQueueGenericSend+0x74>
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d10a      	bne.n	800a7c2 <xQueueGenericSend+0x8e>
	__asm volatile
 800a7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b0:	f383 8811 	msr	BASEPRI, r3
 800a7b4:	f3bf 8f6f 	isb	sy
 800a7b8:	f3bf 8f4f 	dsb	sy
 800a7bc:	623b      	str	r3, [r7, #32]
}
 800a7be:	bf00      	nop
 800a7c0:	e7fe      	b.n	800a7c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7c2:	f001 f9bd 	bl	800bb40 <xTaskGetSchedulerState>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d102      	bne.n	800a7d2 <xQueueGenericSend+0x9e>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d101      	bne.n	800a7d6 <xQueueGenericSend+0xa2>
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	e000      	b.n	800a7d8 <xQueueGenericSend+0xa4>
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d10a      	bne.n	800a7f2 <xQueueGenericSend+0xbe>
	__asm volatile
 800a7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e0:	f383 8811 	msr	BASEPRI, r3
 800a7e4:	f3bf 8f6f 	isb	sy
 800a7e8:	f3bf 8f4f 	dsb	sy
 800a7ec:	61fb      	str	r3, [r7, #28]
}
 800a7ee:	bf00      	nop
 800a7f0:	e7fe      	b.n	800a7f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7f2:	f001 feff 	bl	800c5f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d302      	bcc.n	800a808 <xQueueGenericSend+0xd4>
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	2b02      	cmp	r3, #2
 800a806:	d129      	bne.n	800a85c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a808:	683a      	ldr	r2, [r7, #0]
 800a80a:	68b9      	ldr	r1, [r7, #8]
 800a80c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a80e:	f000 fa0b 	bl	800ac28 <prvCopyDataToQueue>
 800a812:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d010      	beq.n	800a83e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81e:	3324      	adds	r3, #36	; 0x24
 800a820:	4618      	mov	r0, r3
 800a822:	f000 ffcf 	bl	800b7c4 <xTaskRemoveFromEventList>
 800a826:	4603      	mov	r3, r0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d013      	beq.n	800a854 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a82c:	4b3f      	ldr	r3, [pc, #252]	; (800a92c <xQueueGenericSend+0x1f8>)
 800a82e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a832:	601a      	str	r2, [r3, #0]
 800a834:	f3bf 8f4f 	dsb	sy
 800a838:	f3bf 8f6f 	isb	sy
 800a83c:	e00a      	b.n	800a854 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a840:	2b00      	cmp	r3, #0
 800a842:	d007      	beq.n	800a854 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a844:	4b39      	ldr	r3, [pc, #228]	; (800a92c <xQueueGenericSend+0x1f8>)
 800a846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a84a:	601a      	str	r2, [r3, #0]
 800a84c:	f3bf 8f4f 	dsb	sy
 800a850:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a854:	f001 fefe 	bl	800c654 <vPortExitCritical>
				return pdPASS;
 800a858:	2301      	movs	r3, #1
 800a85a:	e063      	b.n	800a924 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d103      	bne.n	800a86a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a862:	f001 fef7 	bl	800c654 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a866:	2300      	movs	r3, #0
 800a868:	e05c      	b.n	800a924 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a86a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d106      	bne.n	800a87e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a870:	f107 0314 	add.w	r3, r7, #20
 800a874:	4618      	mov	r0, r3
 800a876:	f001 f809 	bl	800b88c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a87a:	2301      	movs	r3, #1
 800a87c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a87e:	f001 fee9 	bl	800c654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a882:	f000 fd7b 	bl	800b37c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a886:	f001 feb5 	bl	800c5f4 <vPortEnterCritical>
 800a88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a890:	b25b      	sxtb	r3, r3
 800a892:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a896:	d103      	bne.n	800a8a0 <xQueueGenericSend+0x16c>
 800a898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a89a:	2200      	movs	r2, #0
 800a89c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8a6:	b25b      	sxtb	r3, r3
 800a8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ac:	d103      	bne.n	800a8b6 <xQueueGenericSend+0x182>
 800a8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8b6:	f001 fecd 	bl	800c654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8ba:	1d3a      	adds	r2, r7, #4
 800a8bc:	f107 0314 	add.w	r3, r7, #20
 800a8c0:	4611      	mov	r1, r2
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f000 fff8 	bl	800b8b8 <xTaskCheckForTimeOut>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d124      	bne.n	800a918 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a8ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8d0:	f000 faa2 	bl	800ae18 <prvIsQueueFull>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d018      	beq.n	800a90c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8dc:	3310      	adds	r3, #16
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	4611      	mov	r1, r2
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f000 ff1e 	bl	800b724 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a8e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8ea:	f000 fa2d 	bl	800ad48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a8ee:	f000 fd53 	bl	800b398 <xTaskResumeAll>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	f47f af7c 	bne.w	800a7f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a8fa:	4b0c      	ldr	r3, [pc, #48]	; (800a92c <xQueueGenericSend+0x1f8>)
 800a8fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a900:	601a      	str	r2, [r3, #0]
 800a902:	f3bf 8f4f 	dsb	sy
 800a906:	f3bf 8f6f 	isb	sy
 800a90a:	e772      	b.n	800a7f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a90c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a90e:	f000 fa1b 	bl	800ad48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a912:	f000 fd41 	bl	800b398 <xTaskResumeAll>
 800a916:	e76c      	b.n	800a7f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a91a:	f000 fa15 	bl	800ad48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a91e:	f000 fd3b 	bl	800b398 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a922:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a924:	4618      	mov	r0, r3
 800a926:	3738      	adds	r7, #56	; 0x38
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	e000ed04 	.word	0xe000ed04

0800a930 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b090      	sub	sp, #64	; 0x40
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	607a      	str	r2, [r7, #4]
 800a93c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a944:	2b00      	cmp	r3, #0
 800a946:	d10a      	bne.n	800a95e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94c:	f383 8811 	msr	BASEPRI, r3
 800a950:	f3bf 8f6f 	isb	sy
 800a954:	f3bf 8f4f 	dsb	sy
 800a958:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a95a:	bf00      	nop
 800a95c:	e7fe      	b.n	800a95c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d103      	bne.n	800a96c <xQueueGenericSendFromISR+0x3c>
 800a964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d101      	bne.n	800a970 <xQueueGenericSendFromISR+0x40>
 800a96c:	2301      	movs	r3, #1
 800a96e:	e000      	b.n	800a972 <xQueueGenericSendFromISR+0x42>
 800a970:	2300      	movs	r3, #0
 800a972:	2b00      	cmp	r3, #0
 800a974:	d10a      	bne.n	800a98c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97a:	f383 8811 	msr	BASEPRI, r3
 800a97e:	f3bf 8f6f 	isb	sy
 800a982:	f3bf 8f4f 	dsb	sy
 800a986:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a988:	bf00      	nop
 800a98a:	e7fe      	b.n	800a98a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	2b02      	cmp	r3, #2
 800a990:	d103      	bne.n	800a99a <xQueueGenericSendFromISR+0x6a>
 800a992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a996:	2b01      	cmp	r3, #1
 800a998:	d101      	bne.n	800a99e <xQueueGenericSendFromISR+0x6e>
 800a99a:	2301      	movs	r3, #1
 800a99c:	e000      	b.n	800a9a0 <xQueueGenericSendFromISR+0x70>
 800a99e:	2300      	movs	r3, #0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d10a      	bne.n	800a9ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a8:	f383 8811 	msr	BASEPRI, r3
 800a9ac:	f3bf 8f6f 	isb	sy
 800a9b0:	f3bf 8f4f 	dsb	sy
 800a9b4:	623b      	str	r3, [r7, #32]
}
 800a9b6:	bf00      	nop
 800a9b8:	e7fe      	b.n	800a9b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9ba:	f001 fefd 	bl	800c7b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a9be:	f3ef 8211 	mrs	r2, BASEPRI
 800a9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c6:	f383 8811 	msr	BASEPRI, r3
 800a9ca:	f3bf 8f6f 	isb	sy
 800a9ce:	f3bf 8f4f 	dsb	sy
 800a9d2:	61fa      	str	r2, [r7, #28]
 800a9d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a9d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a9d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d302      	bcc.n	800a9ec <xQueueGenericSendFromISR+0xbc>
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	2b02      	cmp	r3, #2
 800a9ea:	d12f      	bne.n	800aa4c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a9fc:	683a      	ldr	r2, [r7, #0]
 800a9fe:	68b9      	ldr	r1, [r7, #8]
 800aa00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aa02:	f000 f911 	bl	800ac28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aa06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800aa0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa0e:	d112      	bne.n	800aa36 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d016      	beq.n	800aa46 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa1a:	3324      	adds	r3, #36	; 0x24
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f000 fed1 	bl	800b7c4 <xTaskRemoveFromEventList>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d00e      	beq.n	800aa46 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d00b      	beq.n	800aa46 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2201      	movs	r2, #1
 800aa32:	601a      	str	r2, [r3, #0]
 800aa34:	e007      	b.n	800aa46 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	b25a      	sxtb	r2, r3
 800aa40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aa46:	2301      	movs	r3, #1
 800aa48:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800aa4a:	e001      	b.n	800aa50 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa52:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aa5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3740      	adds	r7, #64	; 0x40
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
	...

0800aa68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b08c      	sub	sp, #48	; 0x30
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa74:	2300      	movs	r3, #0
 800aa76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10a      	bne.n	800aa98 <xQueueReceive+0x30>
	__asm volatile
 800aa82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa86:	f383 8811 	msr	BASEPRI, r3
 800aa8a:	f3bf 8f6f 	isb	sy
 800aa8e:	f3bf 8f4f 	dsb	sy
 800aa92:	623b      	str	r3, [r7, #32]
}
 800aa94:	bf00      	nop
 800aa96:	e7fe      	b.n	800aa96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d103      	bne.n	800aaa6 <xQueueReceive+0x3e>
 800aa9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d101      	bne.n	800aaaa <xQueueReceive+0x42>
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	e000      	b.n	800aaac <xQueueReceive+0x44>
 800aaaa:	2300      	movs	r3, #0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d10a      	bne.n	800aac6 <xQueueReceive+0x5e>
	__asm volatile
 800aab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab4:	f383 8811 	msr	BASEPRI, r3
 800aab8:	f3bf 8f6f 	isb	sy
 800aabc:	f3bf 8f4f 	dsb	sy
 800aac0:	61fb      	str	r3, [r7, #28]
}
 800aac2:	bf00      	nop
 800aac4:	e7fe      	b.n	800aac4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aac6:	f001 f83b 	bl	800bb40 <xTaskGetSchedulerState>
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d102      	bne.n	800aad6 <xQueueReceive+0x6e>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d101      	bne.n	800aada <xQueueReceive+0x72>
 800aad6:	2301      	movs	r3, #1
 800aad8:	e000      	b.n	800aadc <xQueueReceive+0x74>
 800aada:	2300      	movs	r3, #0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d10a      	bne.n	800aaf6 <xQueueReceive+0x8e>
	__asm volatile
 800aae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae4:	f383 8811 	msr	BASEPRI, r3
 800aae8:	f3bf 8f6f 	isb	sy
 800aaec:	f3bf 8f4f 	dsb	sy
 800aaf0:	61bb      	str	r3, [r7, #24]
}
 800aaf2:	bf00      	nop
 800aaf4:	e7fe      	b.n	800aaf4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aaf6:	f001 fd7d 	bl	800c5f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aafe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d01f      	beq.n	800ab46 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab06:	68b9      	ldr	r1, [r7, #8]
 800ab08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab0a:	f000 f8f7 	bl	800acfc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab10:	1e5a      	subs	r2, r3, #1
 800ab12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d00f      	beq.n	800ab3e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab20:	3310      	adds	r3, #16
 800ab22:	4618      	mov	r0, r3
 800ab24:	f000 fe4e 	bl	800b7c4 <xTaskRemoveFromEventList>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d007      	beq.n	800ab3e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab2e:	4b3d      	ldr	r3, [pc, #244]	; (800ac24 <xQueueReceive+0x1bc>)
 800ab30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab34:	601a      	str	r2, [r3, #0]
 800ab36:	f3bf 8f4f 	dsb	sy
 800ab3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab3e:	f001 fd89 	bl	800c654 <vPortExitCritical>
				return pdPASS;
 800ab42:	2301      	movs	r3, #1
 800ab44:	e069      	b.n	800ac1a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d103      	bne.n	800ab54 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab4c:	f001 fd82 	bl	800c654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab50:	2300      	movs	r3, #0
 800ab52:	e062      	b.n	800ac1a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d106      	bne.n	800ab68 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab5a:	f107 0310 	add.w	r3, r7, #16
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f000 fe94 	bl	800b88c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab64:	2301      	movs	r3, #1
 800ab66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab68:	f001 fd74 	bl	800c654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab6c:	f000 fc06 	bl	800b37c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab70:	f001 fd40 	bl	800c5f4 <vPortEnterCritical>
 800ab74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab7a:	b25b      	sxtb	r3, r3
 800ab7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab80:	d103      	bne.n	800ab8a <xQueueReceive+0x122>
 800ab82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab84:	2200      	movs	r2, #0
 800ab86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab90:	b25b      	sxtb	r3, r3
 800ab92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab96:	d103      	bne.n	800aba0 <xQueueReceive+0x138>
 800ab98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aba0:	f001 fd58 	bl	800c654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aba4:	1d3a      	adds	r2, r7, #4
 800aba6:	f107 0310 	add.w	r3, r7, #16
 800abaa:	4611      	mov	r1, r2
 800abac:	4618      	mov	r0, r3
 800abae:	f000 fe83 	bl	800b8b8 <xTaskCheckForTimeOut>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d123      	bne.n	800ac00 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abba:	f000 f917 	bl	800adec <prvIsQueueEmpty>
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d017      	beq.n	800abf4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800abc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc6:	3324      	adds	r3, #36	; 0x24
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	4611      	mov	r1, r2
 800abcc:	4618      	mov	r0, r3
 800abce:	f000 fda9 	bl	800b724 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800abd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abd4:	f000 f8b8 	bl	800ad48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800abd8:	f000 fbde 	bl	800b398 <xTaskResumeAll>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d189      	bne.n	800aaf6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800abe2:	4b10      	ldr	r3, [pc, #64]	; (800ac24 <xQueueReceive+0x1bc>)
 800abe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abe8:	601a      	str	r2, [r3, #0]
 800abea:	f3bf 8f4f 	dsb	sy
 800abee:	f3bf 8f6f 	isb	sy
 800abf2:	e780      	b.n	800aaf6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800abf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abf6:	f000 f8a7 	bl	800ad48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800abfa:	f000 fbcd 	bl	800b398 <xTaskResumeAll>
 800abfe:	e77a      	b.n	800aaf6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ac00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac02:	f000 f8a1 	bl	800ad48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac06:	f000 fbc7 	bl	800b398 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac0c:	f000 f8ee 	bl	800adec <prvIsQueueEmpty>
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	f43f af6f 	beq.w	800aaf6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3730      	adds	r7, #48	; 0x30
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	e000ed04 	.word	0xe000ed04

0800ac28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b086      	sub	sp, #24
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	60b9      	str	r1, [r7, #8]
 800ac32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ac34:	2300      	movs	r3, #0
 800ac36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d10d      	bne.n	800ac62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d14d      	bne.n	800acea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	4618      	mov	r0, r3
 800ac54:	f000 ff92 	bl	800bb7c <xTaskPriorityDisinherit>
 800ac58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	609a      	str	r2, [r3, #8]
 800ac60:	e043      	b.n	800acea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d119      	bne.n	800ac9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	6858      	ldr	r0, [r3, #4]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac70:	461a      	mov	r2, r3
 800ac72:	68b9      	ldr	r1, [r7, #8]
 800ac74:	f008 fd78 	bl	8013768 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	685a      	ldr	r2, [r3, #4]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac80:	441a      	add	r2, r3
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	685a      	ldr	r2, [r3, #4]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	689b      	ldr	r3, [r3, #8]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d32b      	bcc.n	800acea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681a      	ldr	r2, [r3, #0]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	605a      	str	r2, [r3, #4]
 800ac9a:	e026      	b.n	800acea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	68d8      	ldr	r0, [r3, #12]
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca4:	461a      	mov	r2, r3
 800aca6:	68b9      	ldr	r1, [r7, #8]
 800aca8:	f008 fd5e 	bl	8013768 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	68da      	ldr	r2, [r3, #12]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb4:	425b      	negs	r3, r3
 800acb6:	441a      	add	r2, r3
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	68da      	ldr	r2, [r3, #12]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d207      	bcs.n	800acd8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	689a      	ldr	r2, [r3, #8]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd0:	425b      	negs	r3, r3
 800acd2:	441a      	add	r2, r3
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2b02      	cmp	r3, #2
 800acdc:	d105      	bne.n	800acea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d002      	beq.n	800acea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	3b01      	subs	r3, #1
 800ace8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	1c5a      	adds	r2, r3, #1
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800acf2:	697b      	ldr	r3, [r7, #20]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3718      	adds	r7, #24
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d018      	beq.n	800ad40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	68da      	ldr	r2, [r3, #12]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad16:	441a      	add	r2, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	68da      	ldr	r2, [r3, #12]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	689b      	ldr	r3, [r3, #8]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d303      	bcc.n	800ad30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	68d9      	ldr	r1, [r3, #12]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad38:	461a      	mov	r2, r3
 800ad3a:	6838      	ldr	r0, [r7, #0]
 800ad3c:	f008 fd14 	bl	8013768 <memcpy>
	}
}
 800ad40:	bf00      	nop
 800ad42:	3708      	adds	r7, #8
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ad50:	f001 fc50 	bl	800c5f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad5c:	e011      	b.n	800ad82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d012      	beq.n	800ad8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	3324      	adds	r3, #36	; 0x24
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f000 fd2a 	bl	800b7c4 <xTaskRemoveFromEventList>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d001      	beq.n	800ad7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ad76:	f000 fe01 	bl	800b97c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ad7a:	7bfb      	ldrb	r3, [r7, #15]
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	b2db      	uxtb	r3, r3
 800ad80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	dce9      	bgt.n	800ad5e <prvUnlockQueue+0x16>
 800ad8a:	e000      	b.n	800ad8e <prvUnlockQueue+0x46>
					break;
 800ad8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	22ff      	movs	r2, #255	; 0xff
 800ad92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ad96:	f001 fc5d 	bl	800c654 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ad9a:	f001 fc2b 	bl	800c5f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ada4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ada6:	e011      	b.n	800adcc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	691b      	ldr	r3, [r3, #16]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d012      	beq.n	800add6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	3310      	adds	r3, #16
 800adb4:	4618      	mov	r0, r3
 800adb6:	f000 fd05 	bl	800b7c4 <xTaskRemoveFromEventList>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d001      	beq.n	800adc4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800adc0:	f000 fddc 	bl	800b97c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800adc4:	7bbb      	ldrb	r3, [r7, #14]
 800adc6:	3b01      	subs	r3, #1
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800adcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800add0:	2b00      	cmp	r3, #0
 800add2:	dce9      	bgt.n	800ada8 <prvUnlockQueue+0x60>
 800add4:	e000      	b.n	800add8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800add6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	22ff      	movs	r2, #255	; 0xff
 800addc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ade0:	f001 fc38 	bl	800c654 <vPortExitCritical>
}
 800ade4:	bf00      	nop
 800ade6:	3710      	adds	r7, #16
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800adf4:	f001 fbfe 	bl	800c5f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d102      	bne.n	800ae06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ae00:	2301      	movs	r3, #1
 800ae02:	60fb      	str	r3, [r7, #12]
 800ae04:	e001      	b.n	800ae0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ae06:	2300      	movs	r3, #0
 800ae08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae0a:	f001 fc23 	bl	800c654 <vPortExitCritical>

	return xReturn;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3710      	adds	r7, #16
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae20:	f001 fbe8 	bl	800c5f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d102      	bne.n	800ae36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ae30:	2301      	movs	r3, #1
 800ae32:	60fb      	str	r3, [r7, #12]
 800ae34:	e001      	b.n	800ae3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ae36:	2300      	movs	r3, #0
 800ae38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae3a:	f001 fc0b 	bl	800c654 <vPortExitCritical>

	return xReturn;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ae48:	b480      	push	{r7}
 800ae4a:	b085      	sub	sp, #20
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae52:	2300      	movs	r3, #0
 800ae54:	60fb      	str	r3, [r7, #12]
 800ae56:	e014      	b.n	800ae82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ae58:	4a0f      	ldr	r2, [pc, #60]	; (800ae98 <vQueueAddToRegistry+0x50>)
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d10b      	bne.n	800ae7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ae64:	490c      	ldr	r1, [pc, #48]	; (800ae98 <vQueueAddToRegistry+0x50>)
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	683a      	ldr	r2, [r7, #0]
 800ae6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ae6e:	4a0a      	ldr	r2, [pc, #40]	; (800ae98 <vQueueAddToRegistry+0x50>)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	00db      	lsls	r3, r3, #3
 800ae74:	4413      	add	r3, r2
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ae7a:	e006      	b.n	800ae8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	3301      	adds	r3, #1
 800ae80:	60fb      	str	r3, [r7, #12]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2b07      	cmp	r3, #7
 800ae86:	d9e7      	bls.n	800ae58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ae88:	bf00      	nop
 800ae8a:	bf00      	nop
 800ae8c:	3714      	adds	r7, #20
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr
 800ae96:	bf00      	nop
 800ae98:	2000543c 	.word	0x2000543c

0800ae9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b086      	sub	sp, #24
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aeac:	f001 fba2 	bl	800c5f4 <vPortEnterCritical>
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aeb6:	b25b      	sxtb	r3, r3
 800aeb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aebc:	d103      	bne.n	800aec6 <vQueueWaitForMessageRestricted+0x2a>
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	2200      	movs	r2, #0
 800aec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aecc:	b25b      	sxtb	r3, r3
 800aece:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aed2:	d103      	bne.n	800aedc <vQueueWaitForMessageRestricted+0x40>
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	2200      	movs	r2, #0
 800aed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aedc:	f001 fbba 	bl	800c654 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d106      	bne.n	800aef6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	3324      	adds	r3, #36	; 0x24
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	68b9      	ldr	r1, [r7, #8]
 800aef0:	4618      	mov	r0, r3
 800aef2:	f000 fc3b 	bl	800b76c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aef6:	6978      	ldr	r0, [r7, #20]
 800aef8:	f7ff ff26 	bl	800ad48 <prvUnlockQueue>
	}
 800aefc:	bf00      	nop
 800aefe:	3718      	adds	r7, #24
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800af04:	b580      	push	{r7, lr}
 800af06:	b08e      	sub	sp, #56	; 0x38
 800af08:	af04      	add	r7, sp, #16
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	607a      	str	r2, [r7, #4]
 800af10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800af12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af14:	2b00      	cmp	r3, #0
 800af16:	d10a      	bne.n	800af2e <xTaskCreateStatic+0x2a>
	__asm volatile
 800af18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1c:	f383 8811 	msr	BASEPRI, r3
 800af20:	f3bf 8f6f 	isb	sy
 800af24:	f3bf 8f4f 	dsb	sy
 800af28:	623b      	str	r3, [r7, #32]
}
 800af2a:	bf00      	nop
 800af2c:	e7fe      	b.n	800af2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800af2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af30:	2b00      	cmp	r3, #0
 800af32:	d10a      	bne.n	800af4a <xTaskCreateStatic+0x46>
	__asm volatile
 800af34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af38:	f383 8811 	msr	BASEPRI, r3
 800af3c:	f3bf 8f6f 	isb	sy
 800af40:	f3bf 8f4f 	dsb	sy
 800af44:	61fb      	str	r3, [r7, #28]
}
 800af46:	bf00      	nop
 800af48:	e7fe      	b.n	800af48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800af4a:	235c      	movs	r3, #92	; 0x5c
 800af4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	2b5c      	cmp	r3, #92	; 0x5c
 800af52:	d00a      	beq.n	800af6a <xTaskCreateStatic+0x66>
	__asm volatile
 800af54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af58:	f383 8811 	msr	BASEPRI, r3
 800af5c:	f3bf 8f6f 	isb	sy
 800af60:	f3bf 8f4f 	dsb	sy
 800af64:	61bb      	str	r3, [r7, #24]
}
 800af66:	bf00      	nop
 800af68:	e7fe      	b.n	800af68 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800af6a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800af6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d01e      	beq.n	800afb0 <xTaskCreateStatic+0xac>
 800af72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af74:	2b00      	cmp	r3, #0
 800af76:	d01b      	beq.n	800afb0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800af78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af7a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800af7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af80:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800af82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af84:	2202      	movs	r2, #2
 800af86:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800af8a:	2300      	movs	r3, #0
 800af8c:	9303      	str	r3, [sp, #12]
 800af8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af90:	9302      	str	r3, [sp, #8]
 800af92:	f107 0314 	add.w	r3, r7, #20
 800af96:	9301      	str	r3, [sp, #4]
 800af98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9a:	9300      	str	r3, [sp, #0]
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	68b9      	ldr	r1, [r7, #8]
 800afa2:	68f8      	ldr	r0, [r7, #12]
 800afa4:	f000 f850 	bl	800b048 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800afa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afaa:	f000 f8dd 	bl	800b168 <prvAddNewTaskToReadyList>
 800afae:	e001      	b.n	800afb4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800afb0:	2300      	movs	r3, #0
 800afb2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800afb4:	697b      	ldr	r3, [r7, #20]
	}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3728      	adds	r7, #40	; 0x28
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b08c      	sub	sp, #48	; 0x30
 800afc2:	af04      	add	r7, sp, #16
 800afc4:	60f8      	str	r0, [r7, #12]
 800afc6:	60b9      	str	r1, [r7, #8]
 800afc8:	603b      	str	r3, [r7, #0]
 800afca:	4613      	mov	r3, r2
 800afcc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800afce:	88fb      	ldrh	r3, [r7, #6]
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	4618      	mov	r0, r3
 800afd4:	f001 fc30 	bl	800c838 <pvPortMalloc>
 800afd8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d00e      	beq.n	800affe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800afe0:	205c      	movs	r0, #92	; 0x5c
 800afe2:	f001 fc29 	bl	800c838 <pvPortMalloc>
 800afe6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800afe8:	69fb      	ldr	r3, [r7, #28]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d003      	beq.n	800aff6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800afee:	69fb      	ldr	r3, [r7, #28]
 800aff0:	697a      	ldr	r2, [r7, #20]
 800aff2:	631a      	str	r2, [r3, #48]	; 0x30
 800aff4:	e005      	b.n	800b002 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aff6:	6978      	ldr	r0, [r7, #20]
 800aff8:	f001 fcea 	bl	800c9d0 <vPortFree>
 800affc:	e001      	b.n	800b002 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800affe:	2300      	movs	r3, #0
 800b000:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b002:	69fb      	ldr	r3, [r7, #28]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d017      	beq.n	800b038 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b008:	69fb      	ldr	r3, [r7, #28]
 800b00a:	2200      	movs	r2, #0
 800b00c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b010:	88fa      	ldrh	r2, [r7, #6]
 800b012:	2300      	movs	r3, #0
 800b014:	9303      	str	r3, [sp, #12]
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	9302      	str	r3, [sp, #8]
 800b01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b01c:	9301      	str	r3, [sp, #4]
 800b01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b020:	9300      	str	r3, [sp, #0]
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	68b9      	ldr	r1, [r7, #8]
 800b026:	68f8      	ldr	r0, [r7, #12]
 800b028:	f000 f80e 	bl	800b048 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b02c:	69f8      	ldr	r0, [r7, #28]
 800b02e:	f000 f89b 	bl	800b168 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b032:	2301      	movs	r3, #1
 800b034:	61bb      	str	r3, [r7, #24]
 800b036:	e002      	b.n	800b03e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b038:	f04f 33ff 	mov.w	r3, #4294967295
 800b03c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b03e:	69bb      	ldr	r3, [r7, #24]
	}
 800b040:	4618      	mov	r0, r3
 800b042:	3720      	adds	r7, #32
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b088      	sub	sp, #32
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	607a      	str	r2, [r7, #4]
 800b054:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b058:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	009b      	lsls	r3, r3, #2
 800b05e:	461a      	mov	r2, r3
 800b060:	21a5      	movs	r1, #165	; 0xa5
 800b062:	f008 fb8f 	bl	8013784 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b070:	3b01      	subs	r3, #1
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	4413      	add	r3, r2
 800b076:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b078:	69bb      	ldr	r3, [r7, #24]
 800b07a:	f023 0307 	bic.w	r3, r3, #7
 800b07e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b080:	69bb      	ldr	r3, [r7, #24]
 800b082:	f003 0307 	and.w	r3, r3, #7
 800b086:	2b00      	cmp	r3, #0
 800b088:	d00a      	beq.n	800b0a0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08e:	f383 8811 	msr	BASEPRI, r3
 800b092:	f3bf 8f6f 	isb	sy
 800b096:	f3bf 8f4f 	dsb	sy
 800b09a:	617b      	str	r3, [r7, #20]
}
 800b09c:	bf00      	nop
 800b09e:	e7fe      	b.n	800b09e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d01f      	beq.n	800b0e6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	61fb      	str	r3, [r7, #28]
 800b0aa:	e012      	b.n	800b0d2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b0ac:	68ba      	ldr	r2, [r7, #8]
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	7819      	ldrb	r1, [r3, #0]
 800b0b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	3334      	adds	r3, #52	; 0x34
 800b0bc:	460a      	mov	r2, r1
 800b0be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b0c0:	68ba      	ldr	r2, [r7, #8]
 800b0c2:	69fb      	ldr	r3, [r7, #28]
 800b0c4:	4413      	add	r3, r2
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d006      	beq.n	800b0da <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	61fb      	str	r3, [r7, #28]
 800b0d2:	69fb      	ldr	r3, [r7, #28]
 800b0d4:	2b0f      	cmp	r3, #15
 800b0d6:	d9e9      	bls.n	800b0ac <prvInitialiseNewTask+0x64>
 800b0d8:	e000      	b.n	800b0dc <prvInitialiseNewTask+0x94>
			{
				break;
 800b0da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0de:	2200      	movs	r2, #0
 800b0e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b0e4:	e003      	b.n	800b0ee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f0:	2b37      	cmp	r3, #55	; 0x37
 800b0f2:	d901      	bls.n	800b0f8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b0f4:	2337      	movs	r3, #55	; 0x37
 800b0f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b102:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b106:	2200      	movs	r2, #0
 800b108:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b10c:	3304      	adds	r3, #4
 800b10e:	4618      	mov	r0, r3
 800b110:	f7ff f978 	bl	800a404 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b116:	3318      	adds	r3, #24
 800b118:	4618      	mov	r0, r3
 800b11a:	f7ff f973 	bl	800a404 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b122:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b126:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b132:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b136:	2200      	movs	r2, #0
 800b138:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13c:	2200      	movs	r2, #0
 800b13e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b142:	683a      	ldr	r2, [r7, #0]
 800b144:	68f9      	ldr	r1, [r7, #12]
 800b146:	69b8      	ldr	r0, [r7, #24]
 800b148:	f001 f928 	bl	800c39c <pxPortInitialiseStack>
 800b14c:	4602      	mov	r2, r0
 800b14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b150:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b154:	2b00      	cmp	r3, #0
 800b156:	d002      	beq.n	800b15e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b15a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b15c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b15e:	bf00      	nop
 800b160:	3720      	adds	r7, #32
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
	...

0800b168 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b170:	f001 fa40 	bl	800c5f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b174:	4b2d      	ldr	r3, [pc, #180]	; (800b22c <prvAddNewTaskToReadyList+0xc4>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	3301      	adds	r3, #1
 800b17a:	4a2c      	ldr	r2, [pc, #176]	; (800b22c <prvAddNewTaskToReadyList+0xc4>)
 800b17c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b17e:	4b2c      	ldr	r3, [pc, #176]	; (800b230 <prvAddNewTaskToReadyList+0xc8>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d109      	bne.n	800b19a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b186:	4a2a      	ldr	r2, [pc, #168]	; (800b230 <prvAddNewTaskToReadyList+0xc8>)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b18c:	4b27      	ldr	r3, [pc, #156]	; (800b22c <prvAddNewTaskToReadyList+0xc4>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2b01      	cmp	r3, #1
 800b192:	d110      	bne.n	800b1b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b194:	f000 fc16 	bl	800b9c4 <prvInitialiseTaskLists>
 800b198:	e00d      	b.n	800b1b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b19a:	4b26      	ldr	r3, [pc, #152]	; (800b234 <prvAddNewTaskToReadyList+0xcc>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d109      	bne.n	800b1b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b1a2:	4b23      	ldr	r3, [pc, #140]	; (800b230 <prvAddNewTaskToReadyList+0xc8>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d802      	bhi.n	800b1b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b1b0:	4a1f      	ldr	r2, [pc, #124]	; (800b230 <prvAddNewTaskToReadyList+0xc8>)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b1b6:	4b20      	ldr	r3, [pc, #128]	; (800b238 <prvAddNewTaskToReadyList+0xd0>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	3301      	adds	r3, #1
 800b1bc:	4a1e      	ldr	r2, [pc, #120]	; (800b238 <prvAddNewTaskToReadyList+0xd0>)
 800b1be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b1c0:	4b1d      	ldr	r3, [pc, #116]	; (800b238 <prvAddNewTaskToReadyList+0xd0>)
 800b1c2:	681a      	ldr	r2, [r3, #0]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1cc:	4b1b      	ldr	r3, [pc, #108]	; (800b23c <prvAddNewTaskToReadyList+0xd4>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d903      	bls.n	800b1dc <prvAddNewTaskToReadyList+0x74>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d8:	4a18      	ldr	r2, [pc, #96]	; (800b23c <prvAddNewTaskToReadyList+0xd4>)
 800b1da:	6013      	str	r3, [r2, #0]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	4413      	add	r3, r2
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	4a15      	ldr	r2, [pc, #84]	; (800b240 <prvAddNewTaskToReadyList+0xd8>)
 800b1ea:	441a      	add	r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	3304      	adds	r3, #4
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	4610      	mov	r0, r2
 800b1f4:	f7ff f913 	bl	800a41e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b1f8:	f001 fa2c 	bl	800c654 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b1fc:	4b0d      	ldr	r3, [pc, #52]	; (800b234 <prvAddNewTaskToReadyList+0xcc>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d00e      	beq.n	800b222 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b204:	4b0a      	ldr	r3, [pc, #40]	; (800b230 <prvAddNewTaskToReadyList+0xc8>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b20e:	429a      	cmp	r2, r3
 800b210:	d207      	bcs.n	800b222 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b212:	4b0c      	ldr	r3, [pc, #48]	; (800b244 <prvAddNewTaskToReadyList+0xdc>)
 800b214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b218:	601a      	str	r2, [r3, #0]
 800b21a:	f3bf 8f4f 	dsb	sy
 800b21e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b222:	bf00      	nop
 800b224:	3708      	adds	r7, #8
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	20001650 	.word	0x20001650
 800b230:	2000117c 	.word	0x2000117c
 800b234:	2000165c 	.word	0x2000165c
 800b238:	2000166c 	.word	0x2000166c
 800b23c:	20001658 	.word	0x20001658
 800b240:	20001180 	.word	0x20001180
 800b244:	e000ed04 	.word	0xe000ed04

0800b248 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b250:	2300      	movs	r3, #0
 800b252:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d017      	beq.n	800b28a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b25a:	4b13      	ldr	r3, [pc, #76]	; (800b2a8 <vTaskDelay+0x60>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d00a      	beq.n	800b278 <vTaskDelay+0x30>
	__asm volatile
 800b262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b266:	f383 8811 	msr	BASEPRI, r3
 800b26a:	f3bf 8f6f 	isb	sy
 800b26e:	f3bf 8f4f 	dsb	sy
 800b272:	60bb      	str	r3, [r7, #8]
}
 800b274:	bf00      	nop
 800b276:	e7fe      	b.n	800b276 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b278:	f000 f880 	bl	800b37c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b27c:	2100      	movs	r1, #0
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 fcea 	bl	800bc58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b284:	f000 f888 	bl	800b398 <xTaskResumeAll>
 800b288:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d107      	bne.n	800b2a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b290:	4b06      	ldr	r3, [pc, #24]	; (800b2ac <vTaskDelay+0x64>)
 800b292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b296:	601a      	str	r2, [r3, #0]
 800b298:	f3bf 8f4f 	dsb	sy
 800b29c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b2a0:	bf00      	nop
 800b2a2:	3710      	adds	r7, #16
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}
 800b2a8:	20001678 	.word	0x20001678
 800b2ac:	e000ed04 	.word	0xe000ed04

0800b2b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b08a      	sub	sp, #40	; 0x28
 800b2b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b2be:	463a      	mov	r2, r7
 800b2c0:	1d39      	adds	r1, r7, #4
 800b2c2:	f107 0308 	add.w	r3, r7, #8
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7ff f848 	bl	800a35c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b2cc:	6839      	ldr	r1, [r7, #0]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	68ba      	ldr	r2, [r7, #8]
 800b2d2:	9202      	str	r2, [sp, #8]
 800b2d4:	9301      	str	r3, [sp, #4]
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	9300      	str	r3, [sp, #0]
 800b2da:	2300      	movs	r3, #0
 800b2dc:	460a      	mov	r2, r1
 800b2de:	4921      	ldr	r1, [pc, #132]	; (800b364 <vTaskStartScheduler+0xb4>)
 800b2e0:	4821      	ldr	r0, [pc, #132]	; (800b368 <vTaskStartScheduler+0xb8>)
 800b2e2:	f7ff fe0f 	bl	800af04 <xTaskCreateStatic>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	4a20      	ldr	r2, [pc, #128]	; (800b36c <vTaskStartScheduler+0xbc>)
 800b2ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b2ec:	4b1f      	ldr	r3, [pc, #124]	; (800b36c <vTaskStartScheduler+0xbc>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d002      	beq.n	800b2fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	617b      	str	r3, [r7, #20]
 800b2f8:	e001      	b.n	800b2fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	2b01      	cmp	r3, #1
 800b302:	d102      	bne.n	800b30a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b304:	f000 fcfc 	bl	800bd00 <xTimerCreateTimerTask>
 800b308:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d116      	bne.n	800b33e <vTaskStartScheduler+0x8e>
	__asm volatile
 800b310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b314:	f383 8811 	msr	BASEPRI, r3
 800b318:	f3bf 8f6f 	isb	sy
 800b31c:	f3bf 8f4f 	dsb	sy
 800b320:	613b      	str	r3, [r7, #16]
}
 800b322:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b324:	4b12      	ldr	r3, [pc, #72]	; (800b370 <vTaskStartScheduler+0xc0>)
 800b326:	f04f 32ff 	mov.w	r2, #4294967295
 800b32a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b32c:	4b11      	ldr	r3, [pc, #68]	; (800b374 <vTaskStartScheduler+0xc4>)
 800b32e:	2201      	movs	r2, #1
 800b330:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b332:	4b11      	ldr	r3, [pc, #68]	; (800b378 <vTaskStartScheduler+0xc8>)
 800b334:	2200      	movs	r2, #0
 800b336:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b338:	f001 f8ba 	bl	800c4b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b33c:	e00e      	b.n	800b35c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b344:	d10a      	bne.n	800b35c <vTaskStartScheduler+0xac>
	__asm volatile
 800b346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34a:	f383 8811 	msr	BASEPRI, r3
 800b34e:	f3bf 8f6f 	isb	sy
 800b352:	f3bf 8f4f 	dsb	sy
 800b356:	60fb      	str	r3, [r7, #12]
}
 800b358:	bf00      	nop
 800b35a:	e7fe      	b.n	800b35a <vTaskStartScheduler+0xaa>
}
 800b35c:	bf00      	nop
 800b35e:	3718      	adds	r7, #24
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}
 800b364:	080139f8 	.word	0x080139f8
 800b368:	0800b995 	.word	0x0800b995
 800b36c:	20001674 	.word	0x20001674
 800b370:	20001670 	.word	0x20001670
 800b374:	2000165c 	.word	0x2000165c
 800b378:	20001654 	.word	0x20001654

0800b37c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b37c:	b480      	push	{r7}
 800b37e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b380:	4b04      	ldr	r3, [pc, #16]	; (800b394 <vTaskSuspendAll+0x18>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	3301      	adds	r3, #1
 800b386:	4a03      	ldr	r2, [pc, #12]	; (800b394 <vTaskSuspendAll+0x18>)
 800b388:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b38a:	bf00      	nop
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr
 800b394:	20001678 	.word	0x20001678

0800b398 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b084      	sub	sp, #16
 800b39c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b3a6:	4b42      	ldr	r3, [pc, #264]	; (800b4b0 <xTaskResumeAll+0x118>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d10a      	bne.n	800b3c4 <xTaskResumeAll+0x2c>
	__asm volatile
 800b3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b2:	f383 8811 	msr	BASEPRI, r3
 800b3b6:	f3bf 8f6f 	isb	sy
 800b3ba:	f3bf 8f4f 	dsb	sy
 800b3be:	603b      	str	r3, [r7, #0]
}
 800b3c0:	bf00      	nop
 800b3c2:	e7fe      	b.n	800b3c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b3c4:	f001 f916 	bl	800c5f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b3c8:	4b39      	ldr	r3, [pc, #228]	; (800b4b0 <xTaskResumeAll+0x118>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	4a38      	ldr	r2, [pc, #224]	; (800b4b0 <xTaskResumeAll+0x118>)
 800b3d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3d2:	4b37      	ldr	r3, [pc, #220]	; (800b4b0 <xTaskResumeAll+0x118>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d162      	bne.n	800b4a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b3da:	4b36      	ldr	r3, [pc, #216]	; (800b4b4 <xTaskResumeAll+0x11c>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d05e      	beq.n	800b4a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3e2:	e02f      	b.n	800b444 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3e4:	4b34      	ldr	r3, [pc, #208]	; (800b4b8 <xTaskResumeAll+0x120>)
 800b3e6:	68db      	ldr	r3, [r3, #12]
 800b3e8:	68db      	ldr	r3, [r3, #12]
 800b3ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	3318      	adds	r3, #24
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f7ff f871 	bl	800a4d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	3304      	adds	r3, #4
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7ff f86c 	bl	800a4d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b404:	4b2d      	ldr	r3, [pc, #180]	; (800b4bc <xTaskResumeAll+0x124>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	429a      	cmp	r2, r3
 800b40a:	d903      	bls.n	800b414 <xTaskResumeAll+0x7c>
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b410:	4a2a      	ldr	r2, [pc, #168]	; (800b4bc <xTaskResumeAll+0x124>)
 800b412:	6013      	str	r3, [r2, #0]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b418:	4613      	mov	r3, r2
 800b41a:	009b      	lsls	r3, r3, #2
 800b41c:	4413      	add	r3, r2
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	4a27      	ldr	r2, [pc, #156]	; (800b4c0 <xTaskResumeAll+0x128>)
 800b422:	441a      	add	r2, r3
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	3304      	adds	r3, #4
 800b428:	4619      	mov	r1, r3
 800b42a:	4610      	mov	r0, r2
 800b42c:	f7fe fff7 	bl	800a41e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b434:	4b23      	ldr	r3, [pc, #140]	; (800b4c4 <xTaskResumeAll+0x12c>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d302      	bcc.n	800b444 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b43e:	4b22      	ldr	r3, [pc, #136]	; (800b4c8 <xTaskResumeAll+0x130>)
 800b440:	2201      	movs	r2, #1
 800b442:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b444:	4b1c      	ldr	r3, [pc, #112]	; (800b4b8 <xTaskResumeAll+0x120>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d1cb      	bne.n	800b3e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d001      	beq.n	800b456 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b452:	f000 fb55 	bl	800bb00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b456:	4b1d      	ldr	r3, [pc, #116]	; (800b4cc <xTaskResumeAll+0x134>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d010      	beq.n	800b484 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b462:	f000 f847 	bl	800b4f4 <xTaskIncrementTick>
 800b466:	4603      	mov	r3, r0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d002      	beq.n	800b472 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b46c:	4b16      	ldr	r3, [pc, #88]	; (800b4c8 <xTaskResumeAll+0x130>)
 800b46e:	2201      	movs	r2, #1
 800b470:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	3b01      	subs	r3, #1
 800b476:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d1f1      	bne.n	800b462 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b47e:	4b13      	ldr	r3, [pc, #76]	; (800b4cc <xTaskResumeAll+0x134>)
 800b480:	2200      	movs	r2, #0
 800b482:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b484:	4b10      	ldr	r3, [pc, #64]	; (800b4c8 <xTaskResumeAll+0x130>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d009      	beq.n	800b4a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b48c:	2301      	movs	r3, #1
 800b48e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b490:	4b0f      	ldr	r3, [pc, #60]	; (800b4d0 <xTaskResumeAll+0x138>)
 800b492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b496:	601a      	str	r2, [r3, #0]
 800b498:	f3bf 8f4f 	dsb	sy
 800b49c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b4a0:	f001 f8d8 	bl	800c654 <vPortExitCritical>

	return xAlreadyYielded;
 800b4a4:	68bb      	ldr	r3, [r7, #8]
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	20001678 	.word	0x20001678
 800b4b4:	20001650 	.word	0x20001650
 800b4b8:	20001610 	.word	0x20001610
 800b4bc:	20001658 	.word	0x20001658
 800b4c0:	20001180 	.word	0x20001180
 800b4c4:	2000117c 	.word	0x2000117c
 800b4c8:	20001664 	.word	0x20001664
 800b4cc:	20001660 	.word	0x20001660
 800b4d0:	e000ed04 	.word	0xe000ed04

0800b4d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b083      	sub	sp, #12
 800b4d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b4da:	4b05      	ldr	r3, [pc, #20]	; (800b4f0 <xTaskGetTickCount+0x1c>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b4e0:	687b      	ldr	r3, [r7, #4]
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	370c      	adds	r7, #12
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr
 800b4ee:	bf00      	nop
 800b4f0:	20001654 	.word	0x20001654

0800b4f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b086      	sub	sp, #24
 800b4f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4fe:	4b4f      	ldr	r3, [pc, #316]	; (800b63c <xTaskIncrementTick+0x148>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	f040 808f 	bne.w	800b626 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b508:	4b4d      	ldr	r3, [pc, #308]	; (800b640 <xTaskIncrementTick+0x14c>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	3301      	adds	r3, #1
 800b50e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b510:	4a4b      	ldr	r2, [pc, #300]	; (800b640 <xTaskIncrementTick+0x14c>)
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d120      	bne.n	800b55e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b51c:	4b49      	ldr	r3, [pc, #292]	; (800b644 <xTaskIncrementTick+0x150>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d00a      	beq.n	800b53c <xTaskIncrementTick+0x48>
	__asm volatile
 800b526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b52a:	f383 8811 	msr	BASEPRI, r3
 800b52e:	f3bf 8f6f 	isb	sy
 800b532:	f3bf 8f4f 	dsb	sy
 800b536:	603b      	str	r3, [r7, #0]
}
 800b538:	bf00      	nop
 800b53a:	e7fe      	b.n	800b53a <xTaskIncrementTick+0x46>
 800b53c:	4b41      	ldr	r3, [pc, #260]	; (800b644 <xTaskIncrementTick+0x150>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	60fb      	str	r3, [r7, #12]
 800b542:	4b41      	ldr	r3, [pc, #260]	; (800b648 <xTaskIncrementTick+0x154>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4a3f      	ldr	r2, [pc, #252]	; (800b644 <xTaskIncrementTick+0x150>)
 800b548:	6013      	str	r3, [r2, #0]
 800b54a:	4a3f      	ldr	r2, [pc, #252]	; (800b648 <xTaskIncrementTick+0x154>)
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	6013      	str	r3, [r2, #0]
 800b550:	4b3e      	ldr	r3, [pc, #248]	; (800b64c <xTaskIncrementTick+0x158>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	3301      	adds	r3, #1
 800b556:	4a3d      	ldr	r2, [pc, #244]	; (800b64c <xTaskIncrementTick+0x158>)
 800b558:	6013      	str	r3, [r2, #0]
 800b55a:	f000 fad1 	bl	800bb00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b55e:	4b3c      	ldr	r3, [pc, #240]	; (800b650 <xTaskIncrementTick+0x15c>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	693a      	ldr	r2, [r7, #16]
 800b564:	429a      	cmp	r2, r3
 800b566:	d349      	bcc.n	800b5fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b568:	4b36      	ldr	r3, [pc, #216]	; (800b644 <xTaskIncrementTick+0x150>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d104      	bne.n	800b57c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b572:	4b37      	ldr	r3, [pc, #220]	; (800b650 <xTaskIncrementTick+0x15c>)
 800b574:	f04f 32ff 	mov.w	r2, #4294967295
 800b578:	601a      	str	r2, [r3, #0]
					break;
 800b57a:	e03f      	b.n	800b5fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b57c:	4b31      	ldr	r3, [pc, #196]	; (800b644 <xTaskIncrementTick+0x150>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	68db      	ldr	r3, [r3, #12]
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b58c:	693a      	ldr	r2, [r7, #16]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	429a      	cmp	r2, r3
 800b592:	d203      	bcs.n	800b59c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b594:	4a2e      	ldr	r2, [pc, #184]	; (800b650 <xTaskIncrementTick+0x15c>)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b59a:	e02f      	b.n	800b5fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	3304      	adds	r3, #4
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f7fe ff99 	bl	800a4d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d004      	beq.n	800b5b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	3318      	adds	r3, #24
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7fe ff90 	bl	800a4d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5bc:	4b25      	ldr	r3, [pc, #148]	; (800b654 <xTaskIncrementTick+0x160>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d903      	bls.n	800b5cc <xTaskIncrementTick+0xd8>
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c8:	4a22      	ldr	r2, [pc, #136]	; (800b654 <xTaskIncrementTick+0x160>)
 800b5ca:	6013      	str	r3, [r2, #0]
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5d0:	4613      	mov	r3, r2
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	4413      	add	r3, r2
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	4a1f      	ldr	r2, [pc, #124]	; (800b658 <xTaskIncrementTick+0x164>)
 800b5da:	441a      	add	r2, r3
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	3304      	adds	r3, #4
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	4610      	mov	r0, r2
 800b5e4:	f7fe ff1b 	bl	800a41e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ec:	4b1b      	ldr	r3, [pc, #108]	; (800b65c <xTaskIncrementTick+0x168>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d3b8      	bcc.n	800b568 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5fa:	e7b5      	b.n	800b568 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b5fc:	4b17      	ldr	r3, [pc, #92]	; (800b65c <xTaskIncrementTick+0x168>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b602:	4915      	ldr	r1, [pc, #84]	; (800b658 <xTaskIncrementTick+0x164>)
 800b604:	4613      	mov	r3, r2
 800b606:	009b      	lsls	r3, r3, #2
 800b608:	4413      	add	r3, r2
 800b60a:	009b      	lsls	r3, r3, #2
 800b60c:	440b      	add	r3, r1
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	2b01      	cmp	r3, #1
 800b612:	d901      	bls.n	800b618 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b614:	2301      	movs	r3, #1
 800b616:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b618:	4b11      	ldr	r3, [pc, #68]	; (800b660 <xTaskIncrementTick+0x16c>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d007      	beq.n	800b630 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b620:	2301      	movs	r3, #1
 800b622:	617b      	str	r3, [r7, #20]
 800b624:	e004      	b.n	800b630 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b626:	4b0f      	ldr	r3, [pc, #60]	; (800b664 <xTaskIncrementTick+0x170>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	3301      	adds	r3, #1
 800b62c:	4a0d      	ldr	r2, [pc, #52]	; (800b664 <xTaskIncrementTick+0x170>)
 800b62e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b630:	697b      	ldr	r3, [r7, #20]
}
 800b632:	4618      	mov	r0, r3
 800b634:	3718      	adds	r7, #24
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	20001678 	.word	0x20001678
 800b640:	20001654 	.word	0x20001654
 800b644:	20001608 	.word	0x20001608
 800b648:	2000160c 	.word	0x2000160c
 800b64c:	20001668 	.word	0x20001668
 800b650:	20001670 	.word	0x20001670
 800b654:	20001658 	.word	0x20001658
 800b658:	20001180 	.word	0x20001180
 800b65c:	2000117c 	.word	0x2000117c
 800b660:	20001664 	.word	0x20001664
 800b664:	20001660 	.word	0x20001660

0800b668 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b66e:	4b28      	ldr	r3, [pc, #160]	; (800b710 <vTaskSwitchContext+0xa8>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d003      	beq.n	800b67e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b676:	4b27      	ldr	r3, [pc, #156]	; (800b714 <vTaskSwitchContext+0xac>)
 800b678:	2201      	movs	r2, #1
 800b67a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b67c:	e041      	b.n	800b702 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b67e:	4b25      	ldr	r3, [pc, #148]	; (800b714 <vTaskSwitchContext+0xac>)
 800b680:	2200      	movs	r2, #0
 800b682:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b684:	4b24      	ldr	r3, [pc, #144]	; (800b718 <vTaskSwitchContext+0xb0>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	60fb      	str	r3, [r7, #12]
 800b68a:	e010      	b.n	800b6ae <vTaskSwitchContext+0x46>
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d10a      	bne.n	800b6a8 <vTaskSwitchContext+0x40>
	__asm volatile
 800b692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b696:	f383 8811 	msr	BASEPRI, r3
 800b69a:	f3bf 8f6f 	isb	sy
 800b69e:	f3bf 8f4f 	dsb	sy
 800b6a2:	607b      	str	r3, [r7, #4]
}
 800b6a4:	bf00      	nop
 800b6a6:	e7fe      	b.n	800b6a6 <vTaskSwitchContext+0x3e>
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	3b01      	subs	r3, #1
 800b6ac:	60fb      	str	r3, [r7, #12]
 800b6ae:	491b      	ldr	r1, [pc, #108]	; (800b71c <vTaskSwitchContext+0xb4>)
 800b6b0:	68fa      	ldr	r2, [r7, #12]
 800b6b2:	4613      	mov	r3, r2
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	4413      	add	r3, r2
 800b6b8:	009b      	lsls	r3, r3, #2
 800b6ba:	440b      	add	r3, r1
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d0e4      	beq.n	800b68c <vTaskSwitchContext+0x24>
 800b6c2:	68fa      	ldr	r2, [r7, #12]
 800b6c4:	4613      	mov	r3, r2
 800b6c6:	009b      	lsls	r3, r3, #2
 800b6c8:	4413      	add	r3, r2
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	4a13      	ldr	r2, [pc, #76]	; (800b71c <vTaskSwitchContext+0xb4>)
 800b6ce:	4413      	add	r3, r2
 800b6d0:	60bb      	str	r3, [r7, #8]
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	685a      	ldr	r2, [r3, #4]
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	605a      	str	r2, [r3, #4]
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	685a      	ldr	r2, [r3, #4]
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	3308      	adds	r3, #8
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d104      	bne.n	800b6f2 <vTaskSwitchContext+0x8a>
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	685a      	ldr	r2, [r3, #4]
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	605a      	str	r2, [r3, #4]
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	68db      	ldr	r3, [r3, #12]
 800b6f8:	4a09      	ldr	r2, [pc, #36]	; (800b720 <vTaskSwitchContext+0xb8>)
 800b6fa:	6013      	str	r3, [r2, #0]
 800b6fc:	4a06      	ldr	r2, [pc, #24]	; (800b718 <vTaskSwitchContext+0xb0>)
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	6013      	str	r3, [r2, #0]
}
 800b702:	bf00      	nop
 800b704:	3714      	adds	r7, #20
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr
 800b70e:	bf00      	nop
 800b710:	20001678 	.word	0x20001678
 800b714:	20001664 	.word	0x20001664
 800b718:	20001658 	.word	0x20001658
 800b71c:	20001180 	.word	0x20001180
 800b720:	2000117c 	.word	0x2000117c

0800b724 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d10a      	bne.n	800b74a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b738:	f383 8811 	msr	BASEPRI, r3
 800b73c:	f3bf 8f6f 	isb	sy
 800b740:	f3bf 8f4f 	dsb	sy
 800b744:	60fb      	str	r3, [r7, #12]
}
 800b746:	bf00      	nop
 800b748:	e7fe      	b.n	800b748 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b74a:	4b07      	ldr	r3, [pc, #28]	; (800b768 <vTaskPlaceOnEventList+0x44>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	3318      	adds	r3, #24
 800b750:	4619      	mov	r1, r3
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f7fe fe87 	bl	800a466 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b758:	2101      	movs	r1, #1
 800b75a:	6838      	ldr	r0, [r7, #0]
 800b75c:	f000 fa7c 	bl	800bc58 <prvAddCurrentTaskToDelayedList>
}
 800b760:	bf00      	nop
 800b762:	3710      	adds	r7, #16
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}
 800b768:	2000117c 	.word	0x2000117c

0800b76c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b086      	sub	sp, #24
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d10a      	bne.n	800b794 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b782:	f383 8811 	msr	BASEPRI, r3
 800b786:	f3bf 8f6f 	isb	sy
 800b78a:	f3bf 8f4f 	dsb	sy
 800b78e:	617b      	str	r3, [r7, #20]
}
 800b790:	bf00      	nop
 800b792:	e7fe      	b.n	800b792 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b794:	4b0a      	ldr	r3, [pc, #40]	; (800b7c0 <vTaskPlaceOnEventListRestricted+0x54>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	3318      	adds	r3, #24
 800b79a:	4619      	mov	r1, r3
 800b79c:	68f8      	ldr	r0, [r7, #12]
 800b79e:	f7fe fe3e 	bl	800a41e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d002      	beq.n	800b7ae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b7a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b7ae:	6879      	ldr	r1, [r7, #4]
 800b7b0:	68b8      	ldr	r0, [r7, #8]
 800b7b2:	f000 fa51 	bl	800bc58 <prvAddCurrentTaskToDelayedList>
	}
 800b7b6:	bf00      	nop
 800b7b8:	3718      	adds	r7, #24
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	2000117c 	.word	0x2000117c

0800b7c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b086      	sub	sp, #24
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	68db      	ldr	r3, [r3, #12]
 800b7d0:	68db      	ldr	r3, [r3, #12]
 800b7d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d10a      	bne.n	800b7f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7de:	f383 8811 	msr	BASEPRI, r3
 800b7e2:	f3bf 8f6f 	isb	sy
 800b7e6:	f3bf 8f4f 	dsb	sy
 800b7ea:	60fb      	str	r3, [r7, #12]
}
 800b7ec:	bf00      	nop
 800b7ee:	e7fe      	b.n	800b7ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	3318      	adds	r3, #24
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7fe fe6f 	bl	800a4d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7fa:	4b1e      	ldr	r3, [pc, #120]	; (800b874 <xTaskRemoveFromEventList+0xb0>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d11d      	bne.n	800b83e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	3304      	adds	r3, #4
 800b806:	4618      	mov	r0, r3
 800b808:	f7fe fe66 	bl	800a4d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b810:	4b19      	ldr	r3, [pc, #100]	; (800b878 <xTaskRemoveFromEventList+0xb4>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	429a      	cmp	r2, r3
 800b816:	d903      	bls.n	800b820 <xTaskRemoveFromEventList+0x5c>
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b81c:	4a16      	ldr	r2, [pc, #88]	; (800b878 <xTaskRemoveFromEventList+0xb4>)
 800b81e:	6013      	str	r3, [r2, #0]
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b824:	4613      	mov	r3, r2
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	4413      	add	r3, r2
 800b82a:	009b      	lsls	r3, r3, #2
 800b82c:	4a13      	ldr	r2, [pc, #76]	; (800b87c <xTaskRemoveFromEventList+0xb8>)
 800b82e:	441a      	add	r2, r3
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	3304      	adds	r3, #4
 800b834:	4619      	mov	r1, r3
 800b836:	4610      	mov	r0, r2
 800b838:	f7fe fdf1 	bl	800a41e <vListInsertEnd>
 800b83c:	e005      	b.n	800b84a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	3318      	adds	r3, #24
 800b842:	4619      	mov	r1, r3
 800b844:	480e      	ldr	r0, [pc, #56]	; (800b880 <xTaskRemoveFromEventList+0xbc>)
 800b846:	f7fe fdea 	bl	800a41e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b84e:	4b0d      	ldr	r3, [pc, #52]	; (800b884 <xTaskRemoveFromEventList+0xc0>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b854:	429a      	cmp	r2, r3
 800b856:	d905      	bls.n	800b864 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b858:	2301      	movs	r3, #1
 800b85a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b85c:	4b0a      	ldr	r3, [pc, #40]	; (800b888 <xTaskRemoveFromEventList+0xc4>)
 800b85e:	2201      	movs	r2, #1
 800b860:	601a      	str	r2, [r3, #0]
 800b862:	e001      	b.n	800b868 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b864:	2300      	movs	r3, #0
 800b866:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b868:	697b      	ldr	r3, [r7, #20]
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3718      	adds	r7, #24
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	20001678 	.word	0x20001678
 800b878:	20001658 	.word	0x20001658
 800b87c:	20001180 	.word	0x20001180
 800b880:	20001610 	.word	0x20001610
 800b884:	2000117c 	.word	0x2000117c
 800b888:	20001664 	.word	0x20001664

0800b88c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b894:	4b06      	ldr	r3, [pc, #24]	; (800b8b0 <vTaskInternalSetTimeOutState+0x24>)
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b89c:	4b05      	ldr	r3, [pc, #20]	; (800b8b4 <vTaskInternalSetTimeOutState+0x28>)
 800b89e:	681a      	ldr	r2, [r3, #0]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	605a      	str	r2, [r3, #4]
}
 800b8a4:	bf00      	nop
 800b8a6:	370c      	adds	r7, #12
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr
 800b8b0:	20001668 	.word	0x20001668
 800b8b4:	20001654 	.word	0x20001654

0800b8b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b088      	sub	sp, #32
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d10a      	bne.n	800b8de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8cc:	f383 8811 	msr	BASEPRI, r3
 800b8d0:	f3bf 8f6f 	isb	sy
 800b8d4:	f3bf 8f4f 	dsb	sy
 800b8d8:	613b      	str	r3, [r7, #16]
}
 800b8da:	bf00      	nop
 800b8dc:	e7fe      	b.n	800b8dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d10a      	bne.n	800b8fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e8:	f383 8811 	msr	BASEPRI, r3
 800b8ec:	f3bf 8f6f 	isb	sy
 800b8f0:	f3bf 8f4f 	dsb	sy
 800b8f4:	60fb      	str	r3, [r7, #12]
}
 800b8f6:	bf00      	nop
 800b8f8:	e7fe      	b.n	800b8f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b8fa:	f000 fe7b 	bl	800c5f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b8fe:	4b1d      	ldr	r3, [pc, #116]	; (800b974 <xTaskCheckForTimeOut+0xbc>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	69ba      	ldr	r2, [r7, #24]
 800b90a:	1ad3      	subs	r3, r2, r3
 800b90c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b916:	d102      	bne.n	800b91e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b918:	2300      	movs	r3, #0
 800b91a:	61fb      	str	r3, [r7, #28]
 800b91c:	e023      	b.n	800b966 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681a      	ldr	r2, [r3, #0]
 800b922:	4b15      	ldr	r3, [pc, #84]	; (800b978 <xTaskCheckForTimeOut+0xc0>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	429a      	cmp	r2, r3
 800b928:	d007      	beq.n	800b93a <xTaskCheckForTimeOut+0x82>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	69ba      	ldr	r2, [r7, #24]
 800b930:	429a      	cmp	r2, r3
 800b932:	d302      	bcc.n	800b93a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b934:	2301      	movs	r3, #1
 800b936:	61fb      	str	r3, [r7, #28]
 800b938:	e015      	b.n	800b966 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	697a      	ldr	r2, [r7, #20]
 800b940:	429a      	cmp	r2, r3
 800b942:	d20b      	bcs.n	800b95c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	1ad2      	subs	r2, r2, r3
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f7ff ff9b 	bl	800b88c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b956:	2300      	movs	r3, #0
 800b958:	61fb      	str	r3, [r7, #28]
 800b95a:	e004      	b.n	800b966 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	2200      	movs	r2, #0
 800b960:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b962:	2301      	movs	r3, #1
 800b964:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b966:	f000 fe75 	bl	800c654 <vPortExitCritical>

	return xReturn;
 800b96a:	69fb      	ldr	r3, [r7, #28]
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3720      	adds	r7, #32
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}
 800b974:	20001654 	.word	0x20001654
 800b978:	20001668 	.word	0x20001668

0800b97c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b97c:	b480      	push	{r7}
 800b97e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b980:	4b03      	ldr	r3, [pc, #12]	; (800b990 <vTaskMissedYield+0x14>)
 800b982:	2201      	movs	r2, #1
 800b984:	601a      	str	r2, [r3, #0]
}
 800b986:	bf00      	nop
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr
 800b990:	20001664 	.word	0x20001664

0800b994 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b082      	sub	sp, #8
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b99c:	f000 f852 	bl	800ba44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b9a0:	4b06      	ldr	r3, [pc, #24]	; (800b9bc <prvIdleTask+0x28>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d9f9      	bls.n	800b99c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b9a8:	4b05      	ldr	r3, [pc, #20]	; (800b9c0 <prvIdleTask+0x2c>)
 800b9aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9ae:	601a      	str	r2, [r3, #0]
 800b9b0:	f3bf 8f4f 	dsb	sy
 800b9b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b9b8:	e7f0      	b.n	800b99c <prvIdleTask+0x8>
 800b9ba:	bf00      	nop
 800b9bc:	20001180 	.word	0x20001180
 800b9c0:	e000ed04 	.word	0xe000ed04

0800b9c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	607b      	str	r3, [r7, #4]
 800b9ce:	e00c      	b.n	800b9ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	4613      	mov	r3, r2
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	4413      	add	r3, r2
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	4a12      	ldr	r2, [pc, #72]	; (800ba24 <prvInitialiseTaskLists+0x60>)
 800b9dc:	4413      	add	r3, r2
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f7fe fcf0 	bl	800a3c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	607b      	str	r3, [r7, #4]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2b37      	cmp	r3, #55	; 0x37
 800b9ee:	d9ef      	bls.n	800b9d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b9f0:	480d      	ldr	r0, [pc, #52]	; (800ba28 <prvInitialiseTaskLists+0x64>)
 800b9f2:	f7fe fce7 	bl	800a3c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b9f6:	480d      	ldr	r0, [pc, #52]	; (800ba2c <prvInitialiseTaskLists+0x68>)
 800b9f8:	f7fe fce4 	bl	800a3c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b9fc:	480c      	ldr	r0, [pc, #48]	; (800ba30 <prvInitialiseTaskLists+0x6c>)
 800b9fe:	f7fe fce1 	bl	800a3c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ba02:	480c      	ldr	r0, [pc, #48]	; (800ba34 <prvInitialiseTaskLists+0x70>)
 800ba04:	f7fe fcde 	bl	800a3c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba08:	480b      	ldr	r0, [pc, #44]	; (800ba38 <prvInitialiseTaskLists+0x74>)
 800ba0a:	f7fe fcdb 	bl	800a3c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba0e:	4b0b      	ldr	r3, [pc, #44]	; (800ba3c <prvInitialiseTaskLists+0x78>)
 800ba10:	4a05      	ldr	r2, [pc, #20]	; (800ba28 <prvInitialiseTaskLists+0x64>)
 800ba12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba14:	4b0a      	ldr	r3, [pc, #40]	; (800ba40 <prvInitialiseTaskLists+0x7c>)
 800ba16:	4a05      	ldr	r2, [pc, #20]	; (800ba2c <prvInitialiseTaskLists+0x68>)
 800ba18:	601a      	str	r2, [r3, #0]
}
 800ba1a:	bf00      	nop
 800ba1c:	3708      	adds	r7, #8
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop
 800ba24:	20001180 	.word	0x20001180
 800ba28:	200015e0 	.word	0x200015e0
 800ba2c:	200015f4 	.word	0x200015f4
 800ba30:	20001610 	.word	0x20001610
 800ba34:	20001624 	.word	0x20001624
 800ba38:	2000163c 	.word	0x2000163c
 800ba3c:	20001608 	.word	0x20001608
 800ba40:	2000160c 	.word	0x2000160c

0800ba44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba4a:	e019      	b.n	800ba80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ba4c:	f000 fdd2 	bl	800c5f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba50:	4b10      	ldr	r3, [pc, #64]	; (800ba94 <prvCheckTasksWaitingTermination+0x50>)
 800ba52:	68db      	ldr	r3, [r3, #12]
 800ba54:	68db      	ldr	r3, [r3, #12]
 800ba56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	3304      	adds	r3, #4
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7fe fd3b 	bl	800a4d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ba62:	4b0d      	ldr	r3, [pc, #52]	; (800ba98 <prvCheckTasksWaitingTermination+0x54>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	3b01      	subs	r3, #1
 800ba68:	4a0b      	ldr	r2, [pc, #44]	; (800ba98 <prvCheckTasksWaitingTermination+0x54>)
 800ba6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ba6c:	4b0b      	ldr	r3, [pc, #44]	; (800ba9c <prvCheckTasksWaitingTermination+0x58>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	3b01      	subs	r3, #1
 800ba72:	4a0a      	ldr	r2, [pc, #40]	; (800ba9c <prvCheckTasksWaitingTermination+0x58>)
 800ba74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ba76:	f000 fded 	bl	800c654 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 f810 	bl	800baa0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba80:	4b06      	ldr	r3, [pc, #24]	; (800ba9c <prvCheckTasksWaitingTermination+0x58>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d1e1      	bne.n	800ba4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ba88:	bf00      	nop
 800ba8a:	bf00      	nop
 800ba8c:	3708      	adds	r7, #8
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
 800ba92:	bf00      	nop
 800ba94:	20001624 	.word	0x20001624
 800ba98:	20001650 	.word	0x20001650
 800ba9c:	20001638 	.word	0x20001638

0800baa0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d108      	bne.n	800bac4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab6:	4618      	mov	r0, r3
 800bab8:	f000 ff8a 	bl	800c9d0 <vPortFree>
				vPortFree( pxTCB );
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 ff87 	bl	800c9d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bac2:	e018      	b.n	800baf6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d103      	bne.n	800bad6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 ff7e 	bl	800c9d0 <vPortFree>
	}
 800bad4:	e00f      	b.n	800baf6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800badc:	2b02      	cmp	r3, #2
 800bade:	d00a      	beq.n	800baf6 <prvDeleteTCB+0x56>
	__asm volatile
 800bae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae4:	f383 8811 	msr	BASEPRI, r3
 800bae8:	f3bf 8f6f 	isb	sy
 800baec:	f3bf 8f4f 	dsb	sy
 800baf0:	60fb      	str	r3, [r7, #12]
}
 800baf2:	bf00      	nop
 800baf4:	e7fe      	b.n	800baf4 <prvDeleteTCB+0x54>
	}
 800baf6:	bf00      	nop
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
	...

0800bb00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bb00:	b480      	push	{r7}
 800bb02:	b083      	sub	sp, #12
 800bb04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb06:	4b0c      	ldr	r3, [pc, #48]	; (800bb38 <prvResetNextTaskUnblockTime+0x38>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d104      	bne.n	800bb1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bb10:	4b0a      	ldr	r3, [pc, #40]	; (800bb3c <prvResetNextTaskUnblockTime+0x3c>)
 800bb12:	f04f 32ff 	mov.w	r2, #4294967295
 800bb16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb18:	e008      	b.n	800bb2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb1a:	4b07      	ldr	r3, [pc, #28]	; (800bb38 <prvResetNextTaskUnblockTime+0x38>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	4a04      	ldr	r2, [pc, #16]	; (800bb3c <prvResetNextTaskUnblockTime+0x3c>)
 800bb2a:	6013      	str	r3, [r2, #0]
}
 800bb2c:	bf00      	nop
 800bb2e:	370c      	adds	r7, #12
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr
 800bb38:	20001608 	.word	0x20001608
 800bb3c:	20001670 	.word	0x20001670

0800bb40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bb40:	b480      	push	{r7}
 800bb42:	b083      	sub	sp, #12
 800bb44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bb46:	4b0b      	ldr	r3, [pc, #44]	; (800bb74 <xTaskGetSchedulerState+0x34>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d102      	bne.n	800bb54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	607b      	str	r3, [r7, #4]
 800bb52:	e008      	b.n	800bb66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb54:	4b08      	ldr	r3, [pc, #32]	; (800bb78 <xTaskGetSchedulerState+0x38>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d102      	bne.n	800bb62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bb5c:	2302      	movs	r3, #2
 800bb5e:	607b      	str	r3, [r7, #4]
 800bb60:	e001      	b.n	800bb66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bb62:	2300      	movs	r3, #0
 800bb64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bb66:	687b      	ldr	r3, [r7, #4]
	}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	370c      	adds	r7, #12
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr
 800bb74:	2000165c 	.word	0x2000165c
 800bb78:	20001678 	.word	0x20001678

0800bb7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b086      	sub	sp, #24
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d056      	beq.n	800bc40 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb92:	4b2e      	ldr	r3, [pc, #184]	; (800bc4c <xTaskPriorityDisinherit+0xd0>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	693a      	ldr	r2, [r7, #16]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d00a      	beq.n	800bbb2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba0:	f383 8811 	msr	BASEPRI, r3
 800bba4:	f3bf 8f6f 	isb	sy
 800bba8:	f3bf 8f4f 	dsb	sy
 800bbac:	60fb      	str	r3, [r7, #12]
}
 800bbae:	bf00      	nop
 800bbb0:	e7fe      	b.n	800bbb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d10a      	bne.n	800bbd0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bbba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbbe:	f383 8811 	msr	BASEPRI, r3
 800bbc2:	f3bf 8f6f 	isb	sy
 800bbc6:	f3bf 8f4f 	dsb	sy
 800bbca:	60bb      	str	r3, [r7, #8]
}
 800bbcc:	bf00      	nop
 800bbce:	e7fe      	b.n	800bbce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbd4:	1e5a      	subs	r2, r3, #1
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d02c      	beq.n	800bc40 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d128      	bne.n	800bc40 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	3304      	adds	r3, #4
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7fe fc70 	bl	800a4d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc04:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc10:	4b0f      	ldr	r3, [pc, #60]	; (800bc50 <xTaskPriorityDisinherit+0xd4>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d903      	bls.n	800bc20 <xTaskPriorityDisinherit+0xa4>
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc1c:	4a0c      	ldr	r2, [pc, #48]	; (800bc50 <xTaskPriorityDisinherit+0xd4>)
 800bc1e:	6013      	str	r3, [r2, #0]
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc24:	4613      	mov	r3, r2
 800bc26:	009b      	lsls	r3, r3, #2
 800bc28:	4413      	add	r3, r2
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	4a09      	ldr	r2, [pc, #36]	; (800bc54 <xTaskPriorityDisinherit+0xd8>)
 800bc2e:	441a      	add	r2, r3
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	3304      	adds	r3, #4
 800bc34:	4619      	mov	r1, r3
 800bc36:	4610      	mov	r0, r2
 800bc38:	f7fe fbf1 	bl	800a41e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc40:	697b      	ldr	r3, [r7, #20]
	}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3718      	adds	r7, #24
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	2000117c 	.word	0x2000117c
 800bc50:	20001658 	.word	0x20001658
 800bc54:	20001180 	.word	0x20001180

0800bc58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bc62:	4b21      	ldr	r3, [pc, #132]	; (800bce8 <prvAddCurrentTaskToDelayedList+0x90>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc68:	4b20      	ldr	r3, [pc, #128]	; (800bcec <prvAddCurrentTaskToDelayedList+0x94>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	3304      	adds	r3, #4
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7fe fc32 	bl	800a4d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc7a:	d10a      	bne.n	800bc92 <prvAddCurrentTaskToDelayedList+0x3a>
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d007      	beq.n	800bc92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc82:	4b1a      	ldr	r3, [pc, #104]	; (800bcec <prvAddCurrentTaskToDelayedList+0x94>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	3304      	adds	r3, #4
 800bc88:	4619      	mov	r1, r3
 800bc8a:	4819      	ldr	r0, [pc, #100]	; (800bcf0 <prvAddCurrentTaskToDelayedList+0x98>)
 800bc8c:	f7fe fbc7 	bl	800a41e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bc90:	e026      	b.n	800bce0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bc92:	68fa      	ldr	r2, [r7, #12]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	4413      	add	r3, r2
 800bc98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc9a:	4b14      	ldr	r3, [pc, #80]	; (800bcec <prvAddCurrentTaskToDelayedList+0x94>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	68ba      	ldr	r2, [r7, #8]
 800bca0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bca2:	68ba      	ldr	r2, [r7, #8]
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d209      	bcs.n	800bcbe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcaa:	4b12      	ldr	r3, [pc, #72]	; (800bcf4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bcac:	681a      	ldr	r2, [r3, #0]
 800bcae:	4b0f      	ldr	r3, [pc, #60]	; (800bcec <prvAddCurrentTaskToDelayedList+0x94>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	3304      	adds	r3, #4
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	4610      	mov	r0, r2
 800bcb8:	f7fe fbd5 	bl	800a466 <vListInsert>
}
 800bcbc:	e010      	b.n	800bce0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcbe:	4b0e      	ldr	r3, [pc, #56]	; (800bcf8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	4b0a      	ldr	r3, [pc, #40]	; (800bcec <prvAddCurrentTaskToDelayedList+0x94>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	3304      	adds	r3, #4
 800bcc8:	4619      	mov	r1, r3
 800bcca:	4610      	mov	r0, r2
 800bccc:	f7fe fbcb 	bl	800a466 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bcd0:	4b0a      	ldr	r3, [pc, #40]	; (800bcfc <prvAddCurrentTaskToDelayedList+0xa4>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	68ba      	ldr	r2, [r7, #8]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d202      	bcs.n	800bce0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bcda:	4a08      	ldr	r2, [pc, #32]	; (800bcfc <prvAddCurrentTaskToDelayedList+0xa4>)
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	6013      	str	r3, [r2, #0]
}
 800bce0:	bf00      	nop
 800bce2:	3710      	adds	r7, #16
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	20001654 	.word	0x20001654
 800bcec:	2000117c 	.word	0x2000117c
 800bcf0:	2000163c 	.word	0x2000163c
 800bcf4:	2000160c 	.word	0x2000160c
 800bcf8:	20001608 	.word	0x20001608
 800bcfc:	20001670 	.word	0x20001670

0800bd00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b08a      	sub	sp, #40	; 0x28
 800bd04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bd06:	2300      	movs	r3, #0
 800bd08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bd0a:	f000 fb07 	bl	800c31c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bd0e:	4b1c      	ldr	r3, [pc, #112]	; (800bd80 <xTimerCreateTimerTask+0x80>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d021      	beq.n	800bd5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bd16:	2300      	movs	r3, #0
 800bd18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bd1e:	1d3a      	adds	r2, r7, #4
 800bd20:	f107 0108 	add.w	r1, r7, #8
 800bd24:	f107 030c 	add.w	r3, r7, #12
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7fe fb31 	bl	800a390 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bd2e:	6879      	ldr	r1, [r7, #4]
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	68fa      	ldr	r2, [r7, #12]
 800bd34:	9202      	str	r2, [sp, #8]
 800bd36:	9301      	str	r3, [sp, #4]
 800bd38:	2302      	movs	r3, #2
 800bd3a:	9300      	str	r3, [sp, #0]
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	460a      	mov	r2, r1
 800bd40:	4910      	ldr	r1, [pc, #64]	; (800bd84 <xTimerCreateTimerTask+0x84>)
 800bd42:	4811      	ldr	r0, [pc, #68]	; (800bd88 <xTimerCreateTimerTask+0x88>)
 800bd44:	f7ff f8de 	bl	800af04 <xTaskCreateStatic>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	4a10      	ldr	r2, [pc, #64]	; (800bd8c <xTimerCreateTimerTask+0x8c>)
 800bd4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bd4e:	4b0f      	ldr	r3, [pc, #60]	; (800bd8c <xTimerCreateTimerTask+0x8c>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d001      	beq.n	800bd5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bd56:	2301      	movs	r3, #1
 800bd58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d10a      	bne.n	800bd76 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd64:	f383 8811 	msr	BASEPRI, r3
 800bd68:	f3bf 8f6f 	isb	sy
 800bd6c:	f3bf 8f4f 	dsb	sy
 800bd70:	613b      	str	r3, [r7, #16]
}
 800bd72:	bf00      	nop
 800bd74:	e7fe      	b.n	800bd74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bd76:	697b      	ldr	r3, [r7, #20]
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3718      	adds	r7, #24
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}
 800bd80:	200016ac 	.word	0x200016ac
 800bd84:	08013a00 	.word	0x08013a00
 800bd88:	0800bec5 	.word	0x0800bec5
 800bd8c:	200016b0 	.word	0x200016b0

0800bd90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b08a      	sub	sp, #40	; 0x28
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	607a      	str	r2, [r7, #4]
 800bd9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d10a      	bne.n	800bdbe <xTimerGenericCommand+0x2e>
	__asm volatile
 800bda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdac:	f383 8811 	msr	BASEPRI, r3
 800bdb0:	f3bf 8f6f 	isb	sy
 800bdb4:	f3bf 8f4f 	dsb	sy
 800bdb8:	623b      	str	r3, [r7, #32]
}
 800bdba:	bf00      	nop
 800bdbc:	e7fe      	b.n	800bdbc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bdbe:	4b1a      	ldr	r3, [pc, #104]	; (800be28 <xTimerGenericCommand+0x98>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d02a      	beq.n	800be1c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	2b05      	cmp	r3, #5
 800bdd6:	dc18      	bgt.n	800be0a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bdd8:	f7ff feb2 	bl	800bb40 <xTaskGetSchedulerState>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b02      	cmp	r3, #2
 800bde0:	d109      	bne.n	800bdf6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bde2:	4b11      	ldr	r3, [pc, #68]	; (800be28 <xTimerGenericCommand+0x98>)
 800bde4:	6818      	ldr	r0, [r3, #0]
 800bde6:	f107 0110 	add.w	r1, r7, #16
 800bdea:	2300      	movs	r3, #0
 800bdec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdee:	f7fe fca1 	bl	800a734 <xQueueGenericSend>
 800bdf2:	6278      	str	r0, [r7, #36]	; 0x24
 800bdf4:	e012      	b.n	800be1c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bdf6:	4b0c      	ldr	r3, [pc, #48]	; (800be28 <xTimerGenericCommand+0x98>)
 800bdf8:	6818      	ldr	r0, [r3, #0]
 800bdfa:	f107 0110 	add.w	r1, r7, #16
 800bdfe:	2300      	movs	r3, #0
 800be00:	2200      	movs	r2, #0
 800be02:	f7fe fc97 	bl	800a734 <xQueueGenericSend>
 800be06:	6278      	str	r0, [r7, #36]	; 0x24
 800be08:	e008      	b.n	800be1c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800be0a:	4b07      	ldr	r3, [pc, #28]	; (800be28 <xTimerGenericCommand+0x98>)
 800be0c:	6818      	ldr	r0, [r3, #0]
 800be0e:	f107 0110 	add.w	r1, r7, #16
 800be12:	2300      	movs	r3, #0
 800be14:	683a      	ldr	r2, [r7, #0]
 800be16:	f7fe fd8b 	bl	800a930 <xQueueGenericSendFromISR>
 800be1a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800be1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3728      	adds	r7, #40	; 0x28
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	200016ac 	.word	0x200016ac

0800be2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b088      	sub	sp, #32
 800be30:	af02      	add	r7, sp, #8
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be36:	4b22      	ldr	r3, [pc, #136]	; (800bec0 <prvProcessExpiredTimer+0x94>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	68db      	ldr	r3, [r3, #12]
 800be3c:	68db      	ldr	r3, [r3, #12]
 800be3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	3304      	adds	r3, #4
 800be44:	4618      	mov	r0, r3
 800be46:	f7fe fb47 	bl	800a4d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be50:	f003 0304 	and.w	r3, r3, #4
 800be54:	2b00      	cmp	r3, #0
 800be56:	d022      	beq.n	800be9e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	699a      	ldr	r2, [r3, #24]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	18d1      	adds	r1, r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	683a      	ldr	r2, [r7, #0]
 800be64:	6978      	ldr	r0, [r7, #20]
 800be66:	f000 f8d1 	bl	800c00c <prvInsertTimerInActiveList>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d01f      	beq.n	800beb0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be70:	2300      	movs	r3, #0
 800be72:	9300      	str	r3, [sp, #0]
 800be74:	2300      	movs	r3, #0
 800be76:	687a      	ldr	r2, [r7, #4]
 800be78:	2100      	movs	r1, #0
 800be7a:	6978      	ldr	r0, [r7, #20]
 800be7c:	f7ff ff88 	bl	800bd90 <xTimerGenericCommand>
 800be80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d113      	bne.n	800beb0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800be88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8c:	f383 8811 	msr	BASEPRI, r3
 800be90:	f3bf 8f6f 	isb	sy
 800be94:	f3bf 8f4f 	dsb	sy
 800be98:	60fb      	str	r3, [r7, #12]
}
 800be9a:	bf00      	nop
 800be9c:	e7fe      	b.n	800be9c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bea4:	f023 0301 	bic.w	r3, r3, #1
 800bea8:	b2da      	uxtb	r2, r3
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	6a1b      	ldr	r3, [r3, #32]
 800beb4:	6978      	ldr	r0, [r7, #20]
 800beb6:	4798      	blx	r3
}
 800beb8:	bf00      	nop
 800beba:	3718      	adds	r7, #24
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}
 800bec0:	200016a4 	.word	0x200016a4

0800bec4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b084      	sub	sp, #16
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800becc:	f107 0308 	add.w	r3, r7, #8
 800bed0:	4618      	mov	r0, r3
 800bed2:	f000 f857 	bl	800bf84 <prvGetNextExpireTime>
 800bed6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	4619      	mov	r1, r3
 800bedc:	68f8      	ldr	r0, [r7, #12]
 800bede:	f000 f803 	bl	800bee8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bee2:	f000 f8d5 	bl	800c090 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bee6:	e7f1      	b.n	800becc <prvTimerTask+0x8>

0800bee8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bef2:	f7ff fa43 	bl	800b37c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bef6:	f107 0308 	add.w	r3, r7, #8
 800befa:	4618      	mov	r0, r3
 800befc:	f000 f866 	bl	800bfcc <prvSampleTimeNow>
 800bf00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d130      	bne.n	800bf6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d10a      	bne.n	800bf24 <prvProcessTimerOrBlockTask+0x3c>
 800bf0e:	687a      	ldr	r2, [r7, #4]
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d806      	bhi.n	800bf24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bf16:	f7ff fa3f 	bl	800b398 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bf1a:	68f9      	ldr	r1, [r7, #12]
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f7ff ff85 	bl	800be2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bf22:	e024      	b.n	800bf6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d008      	beq.n	800bf3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bf2a:	4b13      	ldr	r3, [pc, #76]	; (800bf78 <prvProcessTimerOrBlockTask+0x90>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d101      	bne.n	800bf38 <prvProcessTimerOrBlockTask+0x50>
 800bf34:	2301      	movs	r3, #1
 800bf36:	e000      	b.n	800bf3a <prvProcessTimerOrBlockTask+0x52>
 800bf38:	2300      	movs	r3, #0
 800bf3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bf3c:	4b0f      	ldr	r3, [pc, #60]	; (800bf7c <prvProcessTimerOrBlockTask+0x94>)
 800bf3e:	6818      	ldr	r0, [r3, #0]
 800bf40:	687a      	ldr	r2, [r7, #4]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	1ad3      	subs	r3, r2, r3
 800bf46:	683a      	ldr	r2, [r7, #0]
 800bf48:	4619      	mov	r1, r3
 800bf4a:	f7fe ffa7 	bl	800ae9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bf4e:	f7ff fa23 	bl	800b398 <xTaskResumeAll>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d10a      	bne.n	800bf6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bf58:	4b09      	ldr	r3, [pc, #36]	; (800bf80 <prvProcessTimerOrBlockTask+0x98>)
 800bf5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf5e:	601a      	str	r2, [r3, #0]
 800bf60:	f3bf 8f4f 	dsb	sy
 800bf64:	f3bf 8f6f 	isb	sy
}
 800bf68:	e001      	b.n	800bf6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bf6a:	f7ff fa15 	bl	800b398 <xTaskResumeAll>
}
 800bf6e:	bf00      	nop
 800bf70:	3710      	adds	r7, #16
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop
 800bf78:	200016a8 	.word	0x200016a8
 800bf7c:	200016ac 	.word	0x200016ac
 800bf80:	e000ed04 	.word	0xe000ed04

0800bf84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bf84:	b480      	push	{r7}
 800bf86:	b085      	sub	sp, #20
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bf8c:	4b0e      	ldr	r3, [pc, #56]	; (800bfc8 <prvGetNextExpireTime+0x44>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d101      	bne.n	800bf9a <prvGetNextExpireTime+0x16>
 800bf96:	2201      	movs	r2, #1
 800bf98:	e000      	b.n	800bf9c <prvGetNextExpireTime+0x18>
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d105      	bne.n	800bfb4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bfa8:	4b07      	ldr	r3, [pc, #28]	; (800bfc8 <prvGetNextExpireTime+0x44>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	68db      	ldr	r3, [r3, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	60fb      	str	r3, [r7, #12]
 800bfb2:	e001      	b.n	800bfb8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3714      	adds	r7, #20
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc4:	4770      	bx	lr
 800bfc6:	bf00      	nop
 800bfc8:	200016a4 	.word	0x200016a4

0800bfcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bfd4:	f7ff fa7e 	bl	800b4d4 <xTaskGetTickCount>
 800bfd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bfda:	4b0b      	ldr	r3, [pc, #44]	; (800c008 <prvSampleTimeNow+0x3c>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	68fa      	ldr	r2, [r7, #12]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d205      	bcs.n	800bff0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bfe4:	f000 f936 	bl	800c254 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2201      	movs	r2, #1
 800bfec:	601a      	str	r2, [r3, #0]
 800bfee:	e002      	b.n	800bff6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2200      	movs	r2, #0
 800bff4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bff6:	4a04      	ldr	r2, [pc, #16]	; (800c008 <prvSampleTimeNow+0x3c>)
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bffc:	68fb      	ldr	r3, [r7, #12]
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3710      	adds	r7, #16
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	200016b4 	.word	0x200016b4

0800c00c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b086      	sub	sp, #24
 800c010:	af00      	add	r7, sp, #0
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	607a      	str	r2, [r7, #4]
 800c018:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c01a:	2300      	movs	r3, #0
 800c01c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	68ba      	ldr	r2, [r7, #8]
 800c022:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	68fa      	ldr	r2, [r7, #12]
 800c028:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c02a:	68ba      	ldr	r2, [r7, #8]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d812      	bhi.n	800c058 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	1ad2      	subs	r2, r2, r3
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	699b      	ldr	r3, [r3, #24]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d302      	bcc.n	800c046 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c040:	2301      	movs	r3, #1
 800c042:	617b      	str	r3, [r7, #20]
 800c044:	e01b      	b.n	800c07e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c046:	4b10      	ldr	r3, [pc, #64]	; (800c088 <prvInsertTimerInActiveList+0x7c>)
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	3304      	adds	r3, #4
 800c04e:	4619      	mov	r1, r3
 800c050:	4610      	mov	r0, r2
 800c052:	f7fe fa08 	bl	800a466 <vListInsert>
 800c056:	e012      	b.n	800c07e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d206      	bcs.n	800c06e <prvInsertTimerInActiveList+0x62>
 800c060:	68ba      	ldr	r2, [r7, #8]
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	429a      	cmp	r2, r3
 800c066:	d302      	bcc.n	800c06e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c068:	2301      	movs	r3, #1
 800c06a:	617b      	str	r3, [r7, #20]
 800c06c:	e007      	b.n	800c07e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c06e:	4b07      	ldr	r3, [pc, #28]	; (800c08c <prvInsertTimerInActiveList+0x80>)
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	3304      	adds	r3, #4
 800c076:	4619      	mov	r1, r3
 800c078:	4610      	mov	r0, r2
 800c07a:	f7fe f9f4 	bl	800a466 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c07e:	697b      	ldr	r3, [r7, #20]
}
 800c080:	4618      	mov	r0, r3
 800c082:	3718      	adds	r7, #24
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}
 800c088:	200016a8 	.word	0x200016a8
 800c08c:	200016a4 	.word	0x200016a4

0800c090 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b08e      	sub	sp, #56	; 0x38
 800c094:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c096:	e0ca      	b.n	800c22e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	da18      	bge.n	800c0d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c09e:	1d3b      	adds	r3, r7, #4
 800c0a0:	3304      	adds	r3, #4
 800c0a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d10a      	bne.n	800c0c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ae:	f383 8811 	msr	BASEPRI, r3
 800c0b2:	f3bf 8f6f 	isb	sy
 800c0b6:	f3bf 8f4f 	dsb	sy
 800c0ba:	61fb      	str	r3, [r7, #28]
}
 800c0bc:	bf00      	nop
 800c0be:	e7fe      	b.n	800c0be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0c6:	6850      	ldr	r0, [r2, #4]
 800c0c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0ca:	6892      	ldr	r2, [r2, #8]
 800c0cc:	4611      	mov	r1, r2
 800c0ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	f2c0 80aa 	blt.w	800c22c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0de:	695b      	ldr	r3, [r3, #20]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d004      	beq.n	800c0ee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e6:	3304      	adds	r3, #4
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f7fe f9f5 	bl	800a4d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c0ee:	463b      	mov	r3, r7
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7ff ff6b 	bl	800bfcc <prvSampleTimeNow>
 800c0f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2b09      	cmp	r3, #9
 800c0fc:	f200 8097 	bhi.w	800c22e <prvProcessReceivedCommands+0x19e>
 800c100:	a201      	add	r2, pc, #4	; (adr r2, 800c108 <prvProcessReceivedCommands+0x78>)
 800c102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c106:	bf00      	nop
 800c108:	0800c131 	.word	0x0800c131
 800c10c:	0800c131 	.word	0x0800c131
 800c110:	0800c131 	.word	0x0800c131
 800c114:	0800c1a5 	.word	0x0800c1a5
 800c118:	0800c1b9 	.word	0x0800c1b9
 800c11c:	0800c203 	.word	0x0800c203
 800c120:	0800c131 	.word	0x0800c131
 800c124:	0800c131 	.word	0x0800c131
 800c128:	0800c1a5 	.word	0x0800c1a5
 800c12c:	0800c1b9 	.word	0x0800c1b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c132:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c136:	f043 0301 	orr.w	r3, r3, #1
 800c13a:	b2da      	uxtb	r2, r3
 800c13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c13e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c142:	68ba      	ldr	r2, [r7, #8]
 800c144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c146:	699b      	ldr	r3, [r3, #24]
 800c148:	18d1      	adds	r1, r2, r3
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c14e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c150:	f7ff ff5c 	bl	800c00c <prvInsertTimerInActiveList>
 800c154:	4603      	mov	r3, r0
 800c156:	2b00      	cmp	r3, #0
 800c158:	d069      	beq.n	800c22e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c15c:	6a1b      	ldr	r3, [r3, #32]
 800c15e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c160:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c164:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c168:	f003 0304 	and.w	r3, r3, #4
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d05e      	beq.n	800c22e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c170:	68ba      	ldr	r2, [r7, #8]
 800c172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c174:	699b      	ldr	r3, [r3, #24]
 800c176:	441a      	add	r2, r3
 800c178:	2300      	movs	r3, #0
 800c17a:	9300      	str	r3, [sp, #0]
 800c17c:	2300      	movs	r3, #0
 800c17e:	2100      	movs	r1, #0
 800c180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c182:	f7ff fe05 	bl	800bd90 <xTimerGenericCommand>
 800c186:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c188:	6a3b      	ldr	r3, [r7, #32]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d14f      	bne.n	800c22e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c192:	f383 8811 	msr	BASEPRI, r3
 800c196:	f3bf 8f6f 	isb	sy
 800c19a:	f3bf 8f4f 	dsb	sy
 800c19e:	61bb      	str	r3, [r7, #24]
}
 800c1a0:	bf00      	nop
 800c1a2:	e7fe      	b.n	800c1a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1aa:	f023 0301 	bic.w	r3, r3, #1
 800c1ae:	b2da      	uxtb	r2, r3
 800c1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c1b6:	e03a      	b.n	800c22e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1be:	f043 0301 	orr.w	r3, r3, #1
 800c1c2:	b2da      	uxtb	r2, r3
 800c1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c1ca:	68ba      	ldr	r2, [r7, #8]
 800c1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d2:	699b      	ldr	r3, [r3, #24]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d10a      	bne.n	800c1ee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1dc:	f383 8811 	msr	BASEPRI, r3
 800c1e0:	f3bf 8f6f 	isb	sy
 800c1e4:	f3bf 8f4f 	dsb	sy
 800c1e8:	617b      	str	r3, [r7, #20]
}
 800c1ea:	bf00      	nop
 800c1ec:	e7fe      	b.n	800c1ec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f0:	699a      	ldr	r2, [r3, #24]
 800c1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f4:	18d1      	adds	r1, r2, r3
 800c1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1fc:	f7ff ff06 	bl	800c00c <prvInsertTimerInActiveList>
					break;
 800c200:	e015      	b.n	800c22e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c208:	f003 0302 	and.w	r3, r3, #2
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d103      	bne.n	800c218 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c212:	f000 fbdd 	bl	800c9d0 <vPortFree>
 800c216:	e00a      	b.n	800c22e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c21a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c21e:	f023 0301 	bic.w	r3, r3, #1
 800c222:	b2da      	uxtb	r2, r3
 800c224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c226:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c22a:	e000      	b.n	800c22e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c22c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c22e:	4b08      	ldr	r3, [pc, #32]	; (800c250 <prvProcessReceivedCommands+0x1c0>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	1d39      	adds	r1, r7, #4
 800c234:	2200      	movs	r2, #0
 800c236:	4618      	mov	r0, r3
 800c238:	f7fe fc16 	bl	800aa68 <xQueueReceive>
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b00      	cmp	r3, #0
 800c240:	f47f af2a 	bne.w	800c098 <prvProcessReceivedCommands+0x8>
	}
}
 800c244:	bf00      	nop
 800c246:	bf00      	nop
 800c248:	3730      	adds	r7, #48	; 0x30
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	200016ac 	.word	0x200016ac

0800c254 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b088      	sub	sp, #32
 800c258:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c25a:	e048      	b.n	800c2ee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c25c:	4b2d      	ldr	r3, [pc, #180]	; (800c314 <prvSwitchTimerLists+0xc0>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	68db      	ldr	r3, [r3, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c266:	4b2b      	ldr	r3, [pc, #172]	; (800c314 <prvSwitchTimerLists+0xc0>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	68db      	ldr	r3, [r3, #12]
 800c26c:	68db      	ldr	r3, [r3, #12]
 800c26e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	3304      	adds	r3, #4
 800c274:	4618      	mov	r0, r3
 800c276:	f7fe f92f 	bl	800a4d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	6a1b      	ldr	r3, [r3, #32]
 800c27e:	68f8      	ldr	r0, [r7, #12]
 800c280:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c288:	f003 0304 	and.w	r3, r3, #4
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d02e      	beq.n	800c2ee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	699b      	ldr	r3, [r3, #24]
 800c294:	693a      	ldr	r2, [r7, #16]
 800c296:	4413      	add	r3, r2
 800c298:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c29a:	68ba      	ldr	r2, [r7, #8]
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d90e      	bls.n	800c2c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	68ba      	ldr	r2, [r7, #8]
 800c2a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	68fa      	ldr	r2, [r7, #12]
 800c2ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c2ae:	4b19      	ldr	r3, [pc, #100]	; (800c314 <prvSwitchTimerLists+0xc0>)
 800c2b0:	681a      	ldr	r2, [r3, #0]
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	3304      	adds	r3, #4
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	4610      	mov	r0, r2
 800c2ba:	f7fe f8d4 	bl	800a466 <vListInsert>
 800c2be:	e016      	b.n	800c2ee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	9300      	str	r3, [sp, #0]
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	693a      	ldr	r2, [r7, #16]
 800c2c8:	2100      	movs	r1, #0
 800c2ca:	68f8      	ldr	r0, [r7, #12]
 800c2cc:	f7ff fd60 	bl	800bd90 <xTimerGenericCommand>
 800c2d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d10a      	bne.n	800c2ee <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2dc:	f383 8811 	msr	BASEPRI, r3
 800c2e0:	f3bf 8f6f 	isb	sy
 800c2e4:	f3bf 8f4f 	dsb	sy
 800c2e8:	603b      	str	r3, [r7, #0]
}
 800c2ea:	bf00      	nop
 800c2ec:	e7fe      	b.n	800c2ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c2ee:	4b09      	ldr	r3, [pc, #36]	; (800c314 <prvSwitchTimerLists+0xc0>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d1b1      	bne.n	800c25c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c2f8:	4b06      	ldr	r3, [pc, #24]	; (800c314 <prvSwitchTimerLists+0xc0>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c2fe:	4b06      	ldr	r3, [pc, #24]	; (800c318 <prvSwitchTimerLists+0xc4>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	4a04      	ldr	r2, [pc, #16]	; (800c314 <prvSwitchTimerLists+0xc0>)
 800c304:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c306:	4a04      	ldr	r2, [pc, #16]	; (800c318 <prvSwitchTimerLists+0xc4>)
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	6013      	str	r3, [r2, #0]
}
 800c30c:	bf00      	nop
 800c30e:	3718      	adds	r7, #24
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}
 800c314:	200016a4 	.word	0x200016a4
 800c318:	200016a8 	.word	0x200016a8

0800c31c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b082      	sub	sp, #8
 800c320:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c322:	f000 f967 	bl	800c5f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c326:	4b15      	ldr	r3, [pc, #84]	; (800c37c <prvCheckForValidListAndQueue+0x60>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d120      	bne.n	800c370 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c32e:	4814      	ldr	r0, [pc, #80]	; (800c380 <prvCheckForValidListAndQueue+0x64>)
 800c330:	f7fe f848 	bl	800a3c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c334:	4813      	ldr	r0, [pc, #76]	; (800c384 <prvCheckForValidListAndQueue+0x68>)
 800c336:	f7fe f845 	bl	800a3c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c33a:	4b13      	ldr	r3, [pc, #76]	; (800c388 <prvCheckForValidListAndQueue+0x6c>)
 800c33c:	4a10      	ldr	r2, [pc, #64]	; (800c380 <prvCheckForValidListAndQueue+0x64>)
 800c33e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c340:	4b12      	ldr	r3, [pc, #72]	; (800c38c <prvCheckForValidListAndQueue+0x70>)
 800c342:	4a10      	ldr	r2, [pc, #64]	; (800c384 <prvCheckForValidListAndQueue+0x68>)
 800c344:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c346:	2300      	movs	r3, #0
 800c348:	9300      	str	r3, [sp, #0]
 800c34a:	4b11      	ldr	r3, [pc, #68]	; (800c390 <prvCheckForValidListAndQueue+0x74>)
 800c34c:	4a11      	ldr	r2, [pc, #68]	; (800c394 <prvCheckForValidListAndQueue+0x78>)
 800c34e:	2110      	movs	r1, #16
 800c350:	200a      	movs	r0, #10
 800c352:	f7fe f953 	bl	800a5fc <xQueueGenericCreateStatic>
 800c356:	4603      	mov	r3, r0
 800c358:	4a08      	ldr	r2, [pc, #32]	; (800c37c <prvCheckForValidListAndQueue+0x60>)
 800c35a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c35c:	4b07      	ldr	r3, [pc, #28]	; (800c37c <prvCheckForValidListAndQueue+0x60>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d005      	beq.n	800c370 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c364:	4b05      	ldr	r3, [pc, #20]	; (800c37c <prvCheckForValidListAndQueue+0x60>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	490b      	ldr	r1, [pc, #44]	; (800c398 <prvCheckForValidListAndQueue+0x7c>)
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7fe fd6c 	bl	800ae48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c370:	f000 f970 	bl	800c654 <vPortExitCritical>
}
 800c374:	bf00      	nop
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	200016ac 	.word	0x200016ac
 800c380:	2000167c 	.word	0x2000167c
 800c384:	20001690 	.word	0x20001690
 800c388:	200016a4 	.word	0x200016a4
 800c38c:	200016a8 	.word	0x200016a8
 800c390:	20001758 	.word	0x20001758
 800c394:	200016b8 	.word	0x200016b8
 800c398:	08013a08 	.word	0x08013a08

0800c39c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c39c:	b480      	push	{r7}
 800c39e:	b085      	sub	sp, #20
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	3b04      	subs	r3, #4
 800c3ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c3b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	3b04      	subs	r3, #4
 800c3ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	f023 0201 	bic.w	r2, r3, #1
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	3b04      	subs	r3, #4
 800c3ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c3cc:	4a0c      	ldr	r2, [pc, #48]	; (800c400 <pxPortInitialiseStack+0x64>)
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	3b14      	subs	r3, #20
 800c3d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c3d8:	687a      	ldr	r2, [r7, #4]
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	3b04      	subs	r3, #4
 800c3e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f06f 0202 	mvn.w	r2, #2
 800c3ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	3b20      	subs	r3, #32
 800c3f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3714      	adds	r7, #20
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr
 800c400:	0800c405 	.word	0x0800c405

0800c404 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c404:	b480      	push	{r7}
 800c406:	b085      	sub	sp, #20
 800c408:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c40a:	2300      	movs	r3, #0
 800c40c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c40e:	4b12      	ldr	r3, [pc, #72]	; (800c458 <prvTaskExitError+0x54>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c416:	d00a      	beq.n	800c42e <prvTaskExitError+0x2a>
	__asm volatile
 800c418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c41c:	f383 8811 	msr	BASEPRI, r3
 800c420:	f3bf 8f6f 	isb	sy
 800c424:	f3bf 8f4f 	dsb	sy
 800c428:	60fb      	str	r3, [r7, #12]
}
 800c42a:	bf00      	nop
 800c42c:	e7fe      	b.n	800c42c <prvTaskExitError+0x28>
	__asm volatile
 800c42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c432:	f383 8811 	msr	BASEPRI, r3
 800c436:	f3bf 8f6f 	isb	sy
 800c43a:	f3bf 8f4f 	dsb	sy
 800c43e:	60bb      	str	r3, [r7, #8]
}
 800c440:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c442:	bf00      	nop
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d0fc      	beq.n	800c444 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c44a:	bf00      	nop
 800c44c:	bf00      	nop
 800c44e:	3714      	adds	r7, #20
 800c450:	46bd      	mov	sp, r7
 800c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c456:	4770      	bx	lr
 800c458:	200000c8 	.word	0x200000c8
 800c45c:	00000000 	.word	0x00000000

0800c460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c460:	4b07      	ldr	r3, [pc, #28]	; (800c480 <pxCurrentTCBConst2>)
 800c462:	6819      	ldr	r1, [r3, #0]
 800c464:	6808      	ldr	r0, [r1, #0]
 800c466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c46a:	f380 8809 	msr	PSP, r0
 800c46e:	f3bf 8f6f 	isb	sy
 800c472:	f04f 0000 	mov.w	r0, #0
 800c476:	f380 8811 	msr	BASEPRI, r0
 800c47a:	4770      	bx	lr
 800c47c:	f3af 8000 	nop.w

0800c480 <pxCurrentTCBConst2>:
 800c480:	2000117c 	.word	0x2000117c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c484:	bf00      	nop
 800c486:	bf00      	nop

0800c488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c488:	4808      	ldr	r0, [pc, #32]	; (800c4ac <prvPortStartFirstTask+0x24>)
 800c48a:	6800      	ldr	r0, [r0, #0]
 800c48c:	6800      	ldr	r0, [r0, #0]
 800c48e:	f380 8808 	msr	MSP, r0
 800c492:	f04f 0000 	mov.w	r0, #0
 800c496:	f380 8814 	msr	CONTROL, r0
 800c49a:	b662      	cpsie	i
 800c49c:	b661      	cpsie	f
 800c49e:	f3bf 8f4f 	dsb	sy
 800c4a2:	f3bf 8f6f 	isb	sy
 800c4a6:	df00      	svc	0
 800c4a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c4aa:	bf00      	nop
 800c4ac:	e000ed08 	.word	0xe000ed08

0800c4b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b086      	sub	sp, #24
 800c4b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c4b6:	4b46      	ldr	r3, [pc, #280]	; (800c5d0 <xPortStartScheduler+0x120>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4a46      	ldr	r2, [pc, #280]	; (800c5d4 <xPortStartScheduler+0x124>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d10a      	bne.n	800c4d6 <xPortStartScheduler+0x26>
	__asm volatile
 800c4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c4:	f383 8811 	msr	BASEPRI, r3
 800c4c8:	f3bf 8f6f 	isb	sy
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	613b      	str	r3, [r7, #16]
}
 800c4d2:	bf00      	nop
 800c4d4:	e7fe      	b.n	800c4d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c4d6:	4b3e      	ldr	r3, [pc, #248]	; (800c5d0 <xPortStartScheduler+0x120>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4a3f      	ldr	r2, [pc, #252]	; (800c5d8 <xPortStartScheduler+0x128>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d10a      	bne.n	800c4f6 <xPortStartScheduler+0x46>
	__asm volatile
 800c4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e4:	f383 8811 	msr	BASEPRI, r3
 800c4e8:	f3bf 8f6f 	isb	sy
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	60fb      	str	r3, [r7, #12]
}
 800c4f2:	bf00      	nop
 800c4f4:	e7fe      	b.n	800c4f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c4f6:	4b39      	ldr	r3, [pc, #228]	; (800c5dc <xPortStartScheduler+0x12c>)
 800c4f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	22ff      	movs	r2, #255	; 0xff
 800c506:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c510:	78fb      	ldrb	r3, [r7, #3]
 800c512:	b2db      	uxtb	r3, r3
 800c514:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c518:	b2da      	uxtb	r2, r3
 800c51a:	4b31      	ldr	r3, [pc, #196]	; (800c5e0 <xPortStartScheduler+0x130>)
 800c51c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c51e:	4b31      	ldr	r3, [pc, #196]	; (800c5e4 <xPortStartScheduler+0x134>)
 800c520:	2207      	movs	r2, #7
 800c522:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c524:	e009      	b.n	800c53a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c526:	4b2f      	ldr	r3, [pc, #188]	; (800c5e4 <xPortStartScheduler+0x134>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	3b01      	subs	r3, #1
 800c52c:	4a2d      	ldr	r2, [pc, #180]	; (800c5e4 <xPortStartScheduler+0x134>)
 800c52e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c530:	78fb      	ldrb	r3, [r7, #3]
 800c532:	b2db      	uxtb	r3, r3
 800c534:	005b      	lsls	r3, r3, #1
 800c536:	b2db      	uxtb	r3, r3
 800c538:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c53a:	78fb      	ldrb	r3, [r7, #3]
 800c53c:	b2db      	uxtb	r3, r3
 800c53e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c542:	2b80      	cmp	r3, #128	; 0x80
 800c544:	d0ef      	beq.n	800c526 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c546:	4b27      	ldr	r3, [pc, #156]	; (800c5e4 <xPortStartScheduler+0x134>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f1c3 0307 	rsb	r3, r3, #7
 800c54e:	2b04      	cmp	r3, #4
 800c550:	d00a      	beq.n	800c568 <xPortStartScheduler+0xb8>
	__asm volatile
 800c552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c556:	f383 8811 	msr	BASEPRI, r3
 800c55a:	f3bf 8f6f 	isb	sy
 800c55e:	f3bf 8f4f 	dsb	sy
 800c562:	60bb      	str	r3, [r7, #8]
}
 800c564:	bf00      	nop
 800c566:	e7fe      	b.n	800c566 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c568:	4b1e      	ldr	r3, [pc, #120]	; (800c5e4 <xPortStartScheduler+0x134>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	021b      	lsls	r3, r3, #8
 800c56e:	4a1d      	ldr	r2, [pc, #116]	; (800c5e4 <xPortStartScheduler+0x134>)
 800c570:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c572:	4b1c      	ldr	r3, [pc, #112]	; (800c5e4 <xPortStartScheduler+0x134>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c57a:	4a1a      	ldr	r2, [pc, #104]	; (800c5e4 <xPortStartScheduler+0x134>)
 800c57c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	b2da      	uxtb	r2, r3
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c586:	4b18      	ldr	r3, [pc, #96]	; (800c5e8 <xPortStartScheduler+0x138>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4a17      	ldr	r2, [pc, #92]	; (800c5e8 <xPortStartScheduler+0x138>)
 800c58c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c590:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c592:	4b15      	ldr	r3, [pc, #84]	; (800c5e8 <xPortStartScheduler+0x138>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4a14      	ldr	r2, [pc, #80]	; (800c5e8 <xPortStartScheduler+0x138>)
 800c598:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c59c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c59e:	f000 f8dd 	bl	800c75c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c5a2:	4b12      	ldr	r3, [pc, #72]	; (800c5ec <xPortStartScheduler+0x13c>)
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c5a8:	f000 f8fc 	bl	800c7a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c5ac:	4b10      	ldr	r3, [pc, #64]	; (800c5f0 <xPortStartScheduler+0x140>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4a0f      	ldr	r2, [pc, #60]	; (800c5f0 <xPortStartScheduler+0x140>)
 800c5b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c5b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c5b8:	f7ff ff66 	bl	800c488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c5bc:	f7ff f854 	bl	800b668 <vTaskSwitchContext>
	prvTaskExitError();
 800c5c0:	f7ff ff20 	bl	800c404 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c5c4:	2300      	movs	r3, #0
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3718      	adds	r7, #24
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}
 800c5ce:	bf00      	nop
 800c5d0:	e000ed00 	.word	0xe000ed00
 800c5d4:	410fc271 	.word	0x410fc271
 800c5d8:	410fc270 	.word	0x410fc270
 800c5dc:	e000e400 	.word	0xe000e400
 800c5e0:	200017a8 	.word	0x200017a8
 800c5e4:	200017ac 	.word	0x200017ac
 800c5e8:	e000ed20 	.word	0xe000ed20
 800c5ec:	200000c8 	.word	0x200000c8
 800c5f0:	e000ef34 	.word	0xe000ef34

0800c5f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
	__asm volatile
 800c5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fe:	f383 8811 	msr	BASEPRI, r3
 800c602:	f3bf 8f6f 	isb	sy
 800c606:	f3bf 8f4f 	dsb	sy
 800c60a:	607b      	str	r3, [r7, #4]
}
 800c60c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c60e:	4b0f      	ldr	r3, [pc, #60]	; (800c64c <vPortEnterCritical+0x58>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	3301      	adds	r3, #1
 800c614:	4a0d      	ldr	r2, [pc, #52]	; (800c64c <vPortEnterCritical+0x58>)
 800c616:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c618:	4b0c      	ldr	r3, [pc, #48]	; (800c64c <vPortEnterCritical+0x58>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d10f      	bne.n	800c640 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c620:	4b0b      	ldr	r3, [pc, #44]	; (800c650 <vPortEnterCritical+0x5c>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	b2db      	uxtb	r3, r3
 800c626:	2b00      	cmp	r3, #0
 800c628:	d00a      	beq.n	800c640 <vPortEnterCritical+0x4c>
	__asm volatile
 800c62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c62e:	f383 8811 	msr	BASEPRI, r3
 800c632:	f3bf 8f6f 	isb	sy
 800c636:	f3bf 8f4f 	dsb	sy
 800c63a:	603b      	str	r3, [r7, #0]
}
 800c63c:	bf00      	nop
 800c63e:	e7fe      	b.n	800c63e <vPortEnterCritical+0x4a>
	}
}
 800c640:	bf00      	nop
 800c642:	370c      	adds	r7, #12
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr
 800c64c:	200000c8 	.word	0x200000c8
 800c650:	e000ed04 	.word	0xe000ed04

0800c654 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c654:	b480      	push	{r7}
 800c656:	b083      	sub	sp, #12
 800c658:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c65a:	4b12      	ldr	r3, [pc, #72]	; (800c6a4 <vPortExitCritical+0x50>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d10a      	bne.n	800c678 <vPortExitCritical+0x24>
	__asm volatile
 800c662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c666:	f383 8811 	msr	BASEPRI, r3
 800c66a:	f3bf 8f6f 	isb	sy
 800c66e:	f3bf 8f4f 	dsb	sy
 800c672:	607b      	str	r3, [r7, #4]
}
 800c674:	bf00      	nop
 800c676:	e7fe      	b.n	800c676 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c678:	4b0a      	ldr	r3, [pc, #40]	; (800c6a4 <vPortExitCritical+0x50>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	3b01      	subs	r3, #1
 800c67e:	4a09      	ldr	r2, [pc, #36]	; (800c6a4 <vPortExitCritical+0x50>)
 800c680:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c682:	4b08      	ldr	r3, [pc, #32]	; (800c6a4 <vPortExitCritical+0x50>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d105      	bne.n	800c696 <vPortExitCritical+0x42>
 800c68a:	2300      	movs	r3, #0
 800c68c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	f383 8811 	msr	BASEPRI, r3
}
 800c694:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c696:	bf00      	nop
 800c698:	370c      	adds	r7, #12
 800c69a:	46bd      	mov	sp, r7
 800c69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a0:	4770      	bx	lr
 800c6a2:	bf00      	nop
 800c6a4:	200000c8 	.word	0x200000c8
	...

0800c6b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c6b0:	f3ef 8009 	mrs	r0, PSP
 800c6b4:	f3bf 8f6f 	isb	sy
 800c6b8:	4b15      	ldr	r3, [pc, #84]	; (800c710 <pxCurrentTCBConst>)
 800c6ba:	681a      	ldr	r2, [r3, #0]
 800c6bc:	f01e 0f10 	tst.w	lr, #16
 800c6c0:	bf08      	it	eq
 800c6c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c6c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ca:	6010      	str	r0, [r2, #0]
 800c6cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c6d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c6d4:	f380 8811 	msr	BASEPRI, r0
 800c6d8:	f3bf 8f4f 	dsb	sy
 800c6dc:	f3bf 8f6f 	isb	sy
 800c6e0:	f7fe ffc2 	bl	800b668 <vTaskSwitchContext>
 800c6e4:	f04f 0000 	mov.w	r0, #0
 800c6e8:	f380 8811 	msr	BASEPRI, r0
 800c6ec:	bc09      	pop	{r0, r3}
 800c6ee:	6819      	ldr	r1, [r3, #0]
 800c6f0:	6808      	ldr	r0, [r1, #0]
 800c6f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f6:	f01e 0f10 	tst.w	lr, #16
 800c6fa:	bf08      	it	eq
 800c6fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c700:	f380 8809 	msr	PSP, r0
 800c704:	f3bf 8f6f 	isb	sy
 800c708:	4770      	bx	lr
 800c70a:	bf00      	nop
 800c70c:	f3af 8000 	nop.w

0800c710 <pxCurrentTCBConst>:
 800c710:	2000117c 	.word	0x2000117c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c714:	bf00      	nop
 800c716:	bf00      	nop

0800c718 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
	__asm volatile
 800c71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c722:	f383 8811 	msr	BASEPRI, r3
 800c726:	f3bf 8f6f 	isb	sy
 800c72a:	f3bf 8f4f 	dsb	sy
 800c72e:	607b      	str	r3, [r7, #4]
}
 800c730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c732:	f7fe fedf 	bl	800b4f4 <xTaskIncrementTick>
 800c736:	4603      	mov	r3, r0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d003      	beq.n	800c744 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c73c:	4b06      	ldr	r3, [pc, #24]	; (800c758 <xPortSysTickHandler+0x40>)
 800c73e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c742:	601a      	str	r2, [r3, #0]
 800c744:	2300      	movs	r3, #0
 800c746:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	f383 8811 	msr	BASEPRI, r3
}
 800c74e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c750:	bf00      	nop
 800c752:	3708      	adds	r7, #8
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}
 800c758:	e000ed04 	.word	0xe000ed04

0800c75c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c75c:	b480      	push	{r7}
 800c75e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c760:	4b0b      	ldr	r3, [pc, #44]	; (800c790 <vPortSetupTimerInterrupt+0x34>)
 800c762:	2200      	movs	r2, #0
 800c764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c766:	4b0b      	ldr	r3, [pc, #44]	; (800c794 <vPortSetupTimerInterrupt+0x38>)
 800c768:	2200      	movs	r2, #0
 800c76a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c76c:	4b0a      	ldr	r3, [pc, #40]	; (800c798 <vPortSetupTimerInterrupt+0x3c>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4a0a      	ldr	r2, [pc, #40]	; (800c79c <vPortSetupTimerInterrupt+0x40>)
 800c772:	fba2 2303 	umull	r2, r3, r2, r3
 800c776:	099b      	lsrs	r3, r3, #6
 800c778:	4a09      	ldr	r2, [pc, #36]	; (800c7a0 <vPortSetupTimerInterrupt+0x44>)
 800c77a:	3b01      	subs	r3, #1
 800c77c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c77e:	4b04      	ldr	r3, [pc, #16]	; (800c790 <vPortSetupTimerInterrupt+0x34>)
 800c780:	2207      	movs	r2, #7
 800c782:	601a      	str	r2, [r3, #0]
}
 800c784:	bf00      	nop
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr
 800c78e:	bf00      	nop
 800c790:	e000e010 	.word	0xe000e010
 800c794:	e000e018 	.word	0xe000e018
 800c798:	20000004 	.word	0x20000004
 800c79c:	10624dd3 	.word	0x10624dd3
 800c7a0:	e000e014 	.word	0xe000e014

0800c7a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c7a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c7b4 <vPortEnableVFP+0x10>
 800c7a8:	6801      	ldr	r1, [r0, #0]
 800c7aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c7ae:	6001      	str	r1, [r0, #0]
 800c7b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c7b2:	bf00      	nop
 800c7b4:	e000ed88 	.word	0xe000ed88

0800c7b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b085      	sub	sp, #20
 800c7bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c7be:	f3ef 8305 	mrs	r3, IPSR
 800c7c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2b0f      	cmp	r3, #15
 800c7c8:	d914      	bls.n	800c7f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c7ca:	4a17      	ldr	r2, [pc, #92]	; (800c828 <vPortValidateInterruptPriority+0x70>)
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	4413      	add	r3, r2
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c7d4:	4b15      	ldr	r3, [pc, #84]	; (800c82c <vPortValidateInterruptPriority+0x74>)
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	7afa      	ldrb	r2, [r7, #11]
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d20a      	bcs.n	800c7f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e2:	f383 8811 	msr	BASEPRI, r3
 800c7e6:	f3bf 8f6f 	isb	sy
 800c7ea:	f3bf 8f4f 	dsb	sy
 800c7ee:	607b      	str	r3, [r7, #4]
}
 800c7f0:	bf00      	nop
 800c7f2:	e7fe      	b.n	800c7f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c7f4:	4b0e      	ldr	r3, [pc, #56]	; (800c830 <vPortValidateInterruptPriority+0x78>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c7fc:	4b0d      	ldr	r3, [pc, #52]	; (800c834 <vPortValidateInterruptPriority+0x7c>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	429a      	cmp	r2, r3
 800c802:	d90a      	bls.n	800c81a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c808:	f383 8811 	msr	BASEPRI, r3
 800c80c:	f3bf 8f6f 	isb	sy
 800c810:	f3bf 8f4f 	dsb	sy
 800c814:	603b      	str	r3, [r7, #0]
}
 800c816:	bf00      	nop
 800c818:	e7fe      	b.n	800c818 <vPortValidateInterruptPriority+0x60>
	}
 800c81a:	bf00      	nop
 800c81c:	3714      	adds	r7, #20
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr
 800c826:	bf00      	nop
 800c828:	e000e3f0 	.word	0xe000e3f0
 800c82c:	200017a8 	.word	0x200017a8
 800c830:	e000ed0c 	.word	0xe000ed0c
 800c834:	200017ac 	.word	0x200017ac

0800c838 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b08a      	sub	sp, #40	; 0x28
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c840:	2300      	movs	r3, #0
 800c842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c844:	f7fe fd9a 	bl	800b37c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c848:	4b5b      	ldr	r3, [pc, #364]	; (800c9b8 <pvPortMalloc+0x180>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d101      	bne.n	800c854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c850:	f000 f920 	bl	800ca94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c854:	4b59      	ldr	r3, [pc, #356]	; (800c9bc <pvPortMalloc+0x184>)
 800c856:	681a      	ldr	r2, [r3, #0]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	4013      	ands	r3, r2
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	f040 8093 	bne.w	800c988 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d01d      	beq.n	800c8a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c868:	2208      	movs	r2, #8
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	4413      	add	r3, r2
 800c86e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f003 0307 	and.w	r3, r3, #7
 800c876:	2b00      	cmp	r3, #0
 800c878:	d014      	beq.n	800c8a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f023 0307 	bic.w	r3, r3, #7
 800c880:	3308      	adds	r3, #8
 800c882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f003 0307 	and.w	r3, r3, #7
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d00a      	beq.n	800c8a4 <pvPortMalloc+0x6c>
	__asm volatile
 800c88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c892:	f383 8811 	msr	BASEPRI, r3
 800c896:	f3bf 8f6f 	isb	sy
 800c89a:	f3bf 8f4f 	dsb	sy
 800c89e:	617b      	str	r3, [r7, #20]
}
 800c8a0:	bf00      	nop
 800c8a2:	e7fe      	b.n	800c8a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d06e      	beq.n	800c988 <pvPortMalloc+0x150>
 800c8aa:	4b45      	ldr	r3, [pc, #276]	; (800c9c0 <pvPortMalloc+0x188>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d869      	bhi.n	800c988 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c8b4:	4b43      	ldr	r3, [pc, #268]	; (800c9c4 <pvPortMalloc+0x18c>)
 800c8b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c8b8:	4b42      	ldr	r3, [pc, #264]	; (800c9c4 <pvPortMalloc+0x18c>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8be:	e004      	b.n	800c8ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d903      	bls.n	800c8dc <pvPortMalloc+0xa4>
 800c8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d1f1      	bne.n	800c8c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c8dc:	4b36      	ldr	r3, [pc, #216]	; (800c9b8 <pvPortMalloc+0x180>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d050      	beq.n	800c988 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c8e6:	6a3b      	ldr	r3, [r7, #32]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	2208      	movs	r2, #8
 800c8ec:	4413      	add	r3, r2
 800c8ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f2:	681a      	ldr	r2, [r3, #0]
 800c8f4:	6a3b      	ldr	r3, [r7, #32]
 800c8f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fa:	685a      	ldr	r2, [r3, #4]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	1ad2      	subs	r2, r2, r3
 800c900:	2308      	movs	r3, #8
 800c902:	005b      	lsls	r3, r3, #1
 800c904:	429a      	cmp	r2, r3
 800c906:	d91f      	bls.n	800c948 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	4413      	add	r3, r2
 800c90e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c910:	69bb      	ldr	r3, [r7, #24]
 800c912:	f003 0307 	and.w	r3, r3, #7
 800c916:	2b00      	cmp	r3, #0
 800c918:	d00a      	beq.n	800c930 <pvPortMalloc+0xf8>
	__asm volatile
 800c91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c91e:	f383 8811 	msr	BASEPRI, r3
 800c922:	f3bf 8f6f 	isb	sy
 800c926:	f3bf 8f4f 	dsb	sy
 800c92a:	613b      	str	r3, [r7, #16]
}
 800c92c:	bf00      	nop
 800c92e:	e7fe      	b.n	800c92e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c932:	685a      	ldr	r2, [r3, #4]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	1ad2      	subs	r2, r2, r3
 800c938:	69bb      	ldr	r3, [r7, #24]
 800c93a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93e:	687a      	ldr	r2, [r7, #4]
 800c940:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c942:	69b8      	ldr	r0, [r7, #24]
 800c944:	f000 f908 	bl	800cb58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c948:	4b1d      	ldr	r3, [pc, #116]	; (800c9c0 <pvPortMalloc+0x188>)
 800c94a:	681a      	ldr	r2, [r3, #0]
 800c94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	1ad3      	subs	r3, r2, r3
 800c952:	4a1b      	ldr	r2, [pc, #108]	; (800c9c0 <pvPortMalloc+0x188>)
 800c954:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c956:	4b1a      	ldr	r3, [pc, #104]	; (800c9c0 <pvPortMalloc+0x188>)
 800c958:	681a      	ldr	r2, [r3, #0]
 800c95a:	4b1b      	ldr	r3, [pc, #108]	; (800c9c8 <pvPortMalloc+0x190>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	429a      	cmp	r2, r3
 800c960:	d203      	bcs.n	800c96a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c962:	4b17      	ldr	r3, [pc, #92]	; (800c9c0 <pvPortMalloc+0x188>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	4a18      	ldr	r2, [pc, #96]	; (800c9c8 <pvPortMalloc+0x190>)
 800c968:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96c:	685a      	ldr	r2, [r3, #4]
 800c96e:	4b13      	ldr	r3, [pc, #76]	; (800c9bc <pvPortMalloc+0x184>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	431a      	orrs	r2, r3
 800c974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c976:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97a:	2200      	movs	r2, #0
 800c97c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c97e:	4b13      	ldr	r3, [pc, #76]	; (800c9cc <pvPortMalloc+0x194>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	3301      	adds	r3, #1
 800c984:	4a11      	ldr	r2, [pc, #68]	; (800c9cc <pvPortMalloc+0x194>)
 800c986:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c988:	f7fe fd06 	bl	800b398 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c98c:	69fb      	ldr	r3, [r7, #28]
 800c98e:	f003 0307 	and.w	r3, r3, #7
 800c992:	2b00      	cmp	r3, #0
 800c994:	d00a      	beq.n	800c9ac <pvPortMalloc+0x174>
	__asm volatile
 800c996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99a:	f383 8811 	msr	BASEPRI, r3
 800c99e:	f3bf 8f6f 	isb	sy
 800c9a2:	f3bf 8f4f 	dsb	sy
 800c9a6:	60fb      	str	r3, [r7, #12]
}
 800c9a8:	bf00      	nop
 800c9aa:	e7fe      	b.n	800c9aa <pvPortMalloc+0x172>
	return pvReturn;
 800c9ac:	69fb      	ldr	r3, [r7, #28]
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3728      	adds	r7, #40	; 0x28
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
 800c9b6:	bf00      	nop
 800c9b8:	200053b8 	.word	0x200053b8
 800c9bc:	200053cc 	.word	0x200053cc
 800c9c0:	200053bc 	.word	0x200053bc
 800c9c4:	200053b0 	.word	0x200053b0
 800c9c8:	200053c0 	.word	0x200053c0
 800c9cc:	200053c4 	.word	0x200053c4

0800c9d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b086      	sub	sp, #24
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d04d      	beq.n	800ca7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c9e2:	2308      	movs	r3, #8
 800c9e4:	425b      	negs	r3, r3
 800c9e6:	697a      	ldr	r2, [r7, #20]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	685a      	ldr	r2, [r3, #4]
 800c9f4:	4b24      	ldr	r3, [pc, #144]	; (800ca88 <vPortFree+0xb8>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4013      	ands	r3, r2
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d10a      	bne.n	800ca14 <vPortFree+0x44>
	__asm volatile
 800c9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca02:	f383 8811 	msr	BASEPRI, r3
 800ca06:	f3bf 8f6f 	isb	sy
 800ca0a:	f3bf 8f4f 	dsb	sy
 800ca0e:	60fb      	str	r3, [r7, #12]
}
 800ca10:	bf00      	nop
 800ca12:	e7fe      	b.n	800ca12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d00a      	beq.n	800ca32 <vPortFree+0x62>
	__asm volatile
 800ca1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca20:	f383 8811 	msr	BASEPRI, r3
 800ca24:	f3bf 8f6f 	isb	sy
 800ca28:	f3bf 8f4f 	dsb	sy
 800ca2c:	60bb      	str	r3, [r7, #8]
}
 800ca2e:	bf00      	nop
 800ca30:	e7fe      	b.n	800ca30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	685a      	ldr	r2, [r3, #4]
 800ca36:	4b14      	ldr	r3, [pc, #80]	; (800ca88 <vPortFree+0xb8>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	4013      	ands	r3, r2
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d01e      	beq.n	800ca7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d11a      	bne.n	800ca7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	685a      	ldr	r2, [r3, #4]
 800ca4c:	4b0e      	ldr	r3, [pc, #56]	; (800ca88 <vPortFree+0xb8>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	43db      	mvns	r3, r3
 800ca52:	401a      	ands	r2, r3
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ca58:	f7fe fc90 	bl	800b37c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	685a      	ldr	r2, [r3, #4]
 800ca60:	4b0a      	ldr	r3, [pc, #40]	; (800ca8c <vPortFree+0xbc>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4413      	add	r3, r2
 800ca66:	4a09      	ldr	r2, [pc, #36]	; (800ca8c <vPortFree+0xbc>)
 800ca68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca6a:	6938      	ldr	r0, [r7, #16]
 800ca6c:	f000 f874 	bl	800cb58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ca70:	4b07      	ldr	r3, [pc, #28]	; (800ca90 <vPortFree+0xc0>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	3301      	adds	r3, #1
 800ca76:	4a06      	ldr	r2, [pc, #24]	; (800ca90 <vPortFree+0xc0>)
 800ca78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ca7a:	f7fe fc8d 	bl	800b398 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ca7e:	bf00      	nop
 800ca80:	3718      	adds	r7, #24
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
 800ca86:	bf00      	nop
 800ca88:	200053cc 	.word	0x200053cc
 800ca8c:	200053bc 	.word	0x200053bc
 800ca90:	200053c8 	.word	0x200053c8

0800ca94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ca94:	b480      	push	{r7}
 800ca96:	b085      	sub	sp, #20
 800ca98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ca9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800caa0:	4b27      	ldr	r3, [pc, #156]	; (800cb40 <prvHeapInit+0xac>)
 800caa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f003 0307 	and.w	r3, r3, #7
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d00c      	beq.n	800cac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	3307      	adds	r3, #7
 800cab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f023 0307 	bic.w	r3, r3, #7
 800caba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cabc:	68ba      	ldr	r2, [r7, #8]
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	1ad3      	subs	r3, r2, r3
 800cac2:	4a1f      	ldr	r2, [pc, #124]	; (800cb40 <prvHeapInit+0xac>)
 800cac4:	4413      	add	r3, r2
 800cac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cacc:	4a1d      	ldr	r2, [pc, #116]	; (800cb44 <prvHeapInit+0xb0>)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cad2:	4b1c      	ldr	r3, [pc, #112]	; (800cb44 <prvHeapInit+0xb0>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	68ba      	ldr	r2, [r7, #8]
 800cadc:	4413      	add	r3, r2
 800cade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cae0:	2208      	movs	r2, #8
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	1a9b      	subs	r3, r3, r2
 800cae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f023 0307 	bic.w	r3, r3, #7
 800caee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	4a15      	ldr	r2, [pc, #84]	; (800cb48 <prvHeapInit+0xb4>)
 800caf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800caf6:	4b14      	ldr	r3, [pc, #80]	; (800cb48 <prvHeapInit+0xb4>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	2200      	movs	r2, #0
 800cafc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cafe:	4b12      	ldr	r3, [pc, #72]	; (800cb48 <prvHeapInit+0xb4>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	2200      	movs	r2, #0
 800cb04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	68fa      	ldr	r2, [r7, #12]
 800cb0e:	1ad2      	subs	r2, r2, r3
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cb14:	4b0c      	ldr	r3, [pc, #48]	; (800cb48 <prvHeapInit+0xb4>)
 800cb16:	681a      	ldr	r2, [r3, #0]
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	4a0a      	ldr	r2, [pc, #40]	; (800cb4c <prvHeapInit+0xb8>)
 800cb22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	4a09      	ldr	r2, [pc, #36]	; (800cb50 <prvHeapInit+0xbc>)
 800cb2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cb2c:	4b09      	ldr	r3, [pc, #36]	; (800cb54 <prvHeapInit+0xc0>)
 800cb2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb32:	601a      	str	r2, [r3, #0]
}
 800cb34:	bf00      	nop
 800cb36:	3714      	adds	r7, #20
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr
 800cb40:	200017b0 	.word	0x200017b0
 800cb44:	200053b0 	.word	0x200053b0
 800cb48:	200053b8 	.word	0x200053b8
 800cb4c:	200053c0 	.word	0x200053c0
 800cb50:	200053bc 	.word	0x200053bc
 800cb54:	200053cc 	.word	0x200053cc

0800cb58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b085      	sub	sp, #20
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb60:	4b28      	ldr	r3, [pc, #160]	; (800cc04 <prvInsertBlockIntoFreeList+0xac>)
 800cb62:	60fb      	str	r3, [r7, #12]
 800cb64:	e002      	b.n	800cb6c <prvInsertBlockIntoFreeList+0x14>
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	60fb      	str	r3, [r7, #12]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	687a      	ldr	r2, [r7, #4]
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d8f7      	bhi.n	800cb66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	68ba      	ldr	r2, [r7, #8]
 800cb80:	4413      	add	r3, r2
 800cb82:	687a      	ldr	r2, [r7, #4]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d108      	bne.n	800cb9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	685a      	ldr	r2, [r3, #4]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	441a      	add	r2, r3
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	68ba      	ldr	r2, [r7, #8]
 800cba4:	441a      	add	r2, r3
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d118      	bne.n	800cbe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681a      	ldr	r2, [r3, #0]
 800cbb2:	4b15      	ldr	r3, [pc, #84]	; (800cc08 <prvInsertBlockIntoFreeList+0xb0>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d00d      	beq.n	800cbd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	685a      	ldr	r2, [r3, #4]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	441a      	add	r2, r3
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	681a      	ldr	r2, [r3, #0]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	601a      	str	r2, [r3, #0]
 800cbd4:	e008      	b.n	800cbe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cbd6:	4b0c      	ldr	r3, [pc, #48]	; (800cc08 <prvInsertBlockIntoFreeList+0xb0>)
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	601a      	str	r2, [r3, #0]
 800cbde:	e003      	b.n	800cbe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cbe8:	68fa      	ldr	r2, [r7, #12]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d002      	beq.n	800cbf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbf6:	bf00      	nop
 800cbf8:	3714      	adds	r7, #20
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr
 800cc02:	bf00      	nop
 800cc04:	200053b0 	.word	0x200053b0
 800cc08:	200053b8 	.word	0x200053b8

0800cc0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cc10:	2201      	movs	r2, #1
 800cc12:	4912      	ldr	r1, [pc, #72]	; (800cc5c <MX_USB_DEVICE_Init+0x50>)
 800cc14:	4812      	ldr	r0, [pc, #72]	; (800cc60 <MX_USB_DEVICE_Init+0x54>)
 800cc16:	f7fc f90b 	bl	8008e30 <USBD_Init>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d004      	beq.n	800cc2a <MX_USB_DEVICE_Init+0x1e>
  {
	usb_failed2 = 1;
 800cc20:	4b10      	ldr	r3, [pc, #64]	; (800cc64 <MX_USB_DEVICE_Init+0x58>)
 800cc22:	2201      	movs	r2, #1
 800cc24:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800cc26:	f7f5 f899 	bl	8001d5c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800cc2a:	490f      	ldr	r1, [pc, #60]	; (800cc68 <MX_USB_DEVICE_Init+0x5c>)
 800cc2c:	480c      	ldr	r0, [pc, #48]	; (800cc60 <MX_USB_DEVICE_Init+0x54>)
 800cc2e:	f7fc f92f 	bl	8008e90 <USBD_RegisterClass>
 800cc32:	4603      	mov	r3, r0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d004      	beq.n	800cc42 <MX_USB_DEVICE_Init+0x36>
  {
	  usb_failed2 = 1;
 800cc38:	4b0a      	ldr	r3, [pc, #40]	; (800cc64 <MX_USB_DEVICE_Init+0x58>)
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800cc3e:	f7f5 f88d 	bl	8001d5c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cc42:	4807      	ldr	r0, [pc, #28]	; (800cc60 <MX_USB_DEVICE_Init+0x54>)
 800cc44:	f7fc f94b 	bl	8008ede <USBD_Start>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d004      	beq.n	800cc58 <MX_USB_DEVICE_Init+0x4c>
  {
	  usb_failed2 = 1;
 800cc4e:	4b05      	ldr	r3, [pc, #20]	; (800cc64 <MX_USB_DEVICE_Init+0x58>)
 800cc50:	2201      	movs	r2, #1
 800cc52:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800cc54:	f7f5 f882 	bl	8001d5c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cc58:	bf00      	nop
 800cc5a:	bd80      	pop	{r7, pc}
 800cc5c:	200000cc 	.word	0x200000cc
 800cc60:	2000547c 	.word	0x2000547c
 800cc64:	200053d0 	.word	0x200053d0
 800cc68:	20000018 	.word	0x20000018

0800cc6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b083      	sub	sp, #12
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	4603      	mov	r3, r0
 800cc74:	6039      	str	r1, [r7, #0]
 800cc76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	2212      	movs	r2, #18
 800cc7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cc7e:	4b03      	ldr	r3, [pc, #12]	; (800cc8c <USBD_FS_DeviceDescriptor+0x20>)
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	370c      	adds	r7, #12
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr
 800cc8c:	200000e8 	.word	0x200000e8

0800cc90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b083      	sub	sp, #12
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	4603      	mov	r3, r0
 800cc98:	6039      	str	r1, [r7, #0]
 800cc9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	2204      	movs	r2, #4
 800cca0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cca2:	4b03      	ldr	r3, [pc, #12]	; (800ccb0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	370c      	adds	r7, #12
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccae:	4770      	bx	lr
 800ccb0:	200000fc 	.word	0x200000fc

0800ccb4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	4603      	mov	r3, r0
 800ccbc:	6039      	str	r1, [r7, #0]
 800ccbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ccc0:	79fb      	ldrb	r3, [r7, #7]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d105      	bne.n	800ccd2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ccc6:	683a      	ldr	r2, [r7, #0]
 800ccc8:	4907      	ldr	r1, [pc, #28]	; (800cce8 <USBD_FS_ProductStrDescriptor+0x34>)
 800ccca:	4808      	ldr	r0, [pc, #32]	; (800ccec <USBD_FS_ProductStrDescriptor+0x38>)
 800cccc:	f7fd f947 	bl	8009f5e <USBD_GetString>
 800ccd0:	e004      	b.n	800ccdc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ccd2:	683a      	ldr	r2, [r7, #0]
 800ccd4:	4904      	ldr	r1, [pc, #16]	; (800cce8 <USBD_FS_ProductStrDescriptor+0x34>)
 800ccd6:	4805      	ldr	r0, [pc, #20]	; (800ccec <USBD_FS_ProductStrDescriptor+0x38>)
 800ccd8:	f7fd f941 	bl	8009f5e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ccdc:	4b02      	ldr	r3, [pc, #8]	; (800cce8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3708      	adds	r7, #8
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}
 800cce6:	bf00      	nop
 800cce8:	2000574c 	.word	0x2000574c
 800ccec:	08013a10 	.word	0x08013a10

0800ccf0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b082      	sub	sp, #8
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	6039      	str	r1, [r7, #0]
 800ccfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ccfc:	683a      	ldr	r2, [r7, #0]
 800ccfe:	4904      	ldr	r1, [pc, #16]	; (800cd10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cd00:	4804      	ldr	r0, [pc, #16]	; (800cd14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cd02:	f7fd f92c 	bl	8009f5e <USBD_GetString>
  return USBD_StrDesc;
 800cd06:	4b02      	ldr	r3, [pc, #8]	; (800cd10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	2000574c 	.word	0x2000574c
 800cd14:	08013a28 	.word	0x08013a28

0800cd18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	4603      	mov	r3, r0
 800cd20:	6039      	str	r1, [r7, #0]
 800cd22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	221a      	movs	r2, #26
 800cd28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cd2a:	f000 f843 	bl	800cdb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cd2e:	4b02      	ldr	r3, [pc, #8]	; (800cd38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3708      	adds	r7, #8
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	20000100 	.word	0x20000100

0800cd3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b082      	sub	sp, #8
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	4603      	mov	r3, r0
 800cd44:	6039      	str	r1, [r7, #0]
 800cd46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cd48:	79fb      	ldrb	r3, [r7, #7]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d105      	bne.n	800cd5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cd4e:	683a      	ldr	r2, [r7, #0]
 800cd50:	4907      	ldr	r1, [pc, #28]	; (800cd70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cd52:	4808      	ldr	r0, [pc, #32]	; (800cd74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cd54:	f7fd f903 	bl	8009f5e <USBD_GetString>
 800cd58:	e004      	b.n	800cd64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cd5a:	683a      	ldr	r2, [r7, #0]
 800cd5c:	4904      	ldr	r1, [pc, #16]	; (800cd70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cd5e:	4805      	ldr	r0, [pc, #20]	; (800cd74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cd60:	f7fd f8fd 	bl	8009f5e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd64:	4b02      	ldr	r3, [pc, #8]	; (800cd70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3708      	adds	r7, #8
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	2000574c 	.word	0x2000574c
 800cd74:	08013a3c 	.word	0x08013a3c

0800cd78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	4603      	mov	r3, r0
 800cd80:	6039      	str	r1, [r7, #0]
 800cd82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd84:	79fb      	ldrb	r3, [r7, #7]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d105      	bne.n	800cd96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cd8a:	683a      	ldr	r2, [r7, #0]
 800cd8c:	4907      	ldr	r1, [pc, #28]	; (800cdac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cd8e:	4808      	ldr	r0, [pc, #32]	; (800cdb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cd90:	f7fd f8e5 	bl	8009f5e <USBD_GetString>
 800cd94:	e004      	b.n	800cda0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cd96:	683a      	ldr	r2, [r7, #0]
 800cd98:	4904      	ldr	r1, [pc, #16]	; (800cdac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cd9a:	4805      	ldr	r0, [pc, #20]	; (800cdb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cd9c:	f7fd f8df 	bl	8009f5e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cda0:	4b02      	ldr	r3, [pc, #8]	; (800cdac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3708      	adds	r7, #8
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}
 800cdaa:	bf00      	nop
 800cdac:	2000574c 	.word	0x2000574c
 800cdb0:	08013a48 	.word	0x08013a48

0800cdb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b084      	sub	sp, #16
 800cdb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cdba:	4b0f      	ldr	r3, [pc, #60]	; (800cdf8 <Get_SerialNum+0x44>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cdc0:	4b0e      	ldr	r3, [pc, #56]	; (800cdfc <Get_SerialNum+0x48>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cdc6:	4b0e      	ldr	r3, [pc, #56]	; (800ce00 <Get_SerialNum+0x4c>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cdcc:	68fa      	ldr	r2, [r7, #12]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	4413      	add	r3, r2
 800cdd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d009      	beq.n	800cdee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cdda:	2208      	movs	r2, #8
 800cddc:	4909      	ldr	r1, [pc, #36]	; (800ce04 <Get_SerialNum+0x50>)
 800cdde:	68f8      	ldr	r0, [r7, #12]
 800cde0:	f000 f814 	bl	800ce0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cde4:	2204      	movs	r2, #4
 800cde6:	4908      	ldr	r1, [pc, #32]	; (800ce08 <Get_SerialNum+0x54>)
 800cde8:	68b8      	ldr	r0, [r7, #8]
 800cdea:	f000 f80f 	bl	800ce0c <IntToUnicode>
  }
}
 800cdee:	bf00      	nop
 800cdf0:	3710      	adds	r7, #16
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	1fff7a10 	.word	0x1fff7a10
 800cdfc:	1fff7a14 	.word	0x1fff7a14
 800ce00:	1fff7a18 	.word	0x1fff7a18
 800ce04:	20000102 	.word	0x20000102
 800ce08:	20000112 	.word	0x20000112

0800ce0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b087      	sub	sp, #28
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	60f8      	str	r0, [r7, #12]
 800ce14:	60b9      	str	r1, [r7, #8]
 800ce16:	4613      	mov	r3, r2
 800ce18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ce1e:	2300      	movs	r3, #0
 800ce20:	75fb      	strb	r3, [r7, #23]
 800ce22:	e027      	b.n	800ce74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	0f1b      	lsrs	r3, r3, #28
 800ce28:	2b09      	cmp	r3, #9
 800ce2a:	d80b      	bhi.n	800ce44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	0f1b      	lsrs	r3, r3, #28
 800ce30:	b2da      	uxtb	r2, r3
 800ce32:	7dfb      	ldrb	r3, [r7, #23]
 800ce34:	005b      	lsls	r3, r3, #1
 800ce36:	4619      	mov	r1, r3
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	440b      	add	r3, r1
 800ce3c:	3230      	adds	r2, #48	; 0x30
 800ce3e:	b2d2      	uxtb	r2, r2
 800ce40:	701a      	strb	r2, [r3, #0]
 800ce42:	e00a      	b.n	800ce5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	0f1b      	lsrs	r3, r3, #28
 800ce48:	b2da      	uxtb	r2, r3
 800ce4a:	7dfb      	ldrb	r3, [r7, #23]
 800ce4c:	005b      	lsls	r3, r3, #1
 800ce4e:	4619      	mov	r1, r3
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	440b      	add	r3, r1
 800ce54:	3237      	adds	r2, #55	; 0x37
 800ce56:	b2d2      	uxtb	r2, r2
 800ce58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	011b      	lsls	r3, r3, #4
 800ce5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ce60:	7dfb      	ldrb	r3, [r7, #23]
 800ce62:	005b      	lsls	r3, r3, #1
 800ce64:	3301      	adds	r3, #1
 800ce66:	68ba      	ldr	r2, [r7, #8]
 800ce68:	4413      	add	r3, r2
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ce6e:	7dfb      	ldrb	r3, [r7, #23]
 800ce70:	3301      	adds	r3, #1
 800ce72:	75fb      	strb	r3, [r7, #23]
 800ce74:	7dfa      	ldrb	r2, [r7, #23]
 800ce76:	79fb      	ldrb	r3, [r7, #7]
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d3d3      	bcc.n	800ce24 <IntToUnicode+0x18>
  }
}
 800ce7c:	bf00      	nop
 800ce7e:	bf00      	nop
 800ce80:	371c      	adds	r7, #28
 800ce82:	46bd      	mov	sp, r7
 800ce84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce88:	4770      	bx	lr
	...

0800ce8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b08a      	sub	sp, #40	; 0x28
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce94:	f107 0314 	add.w	r3, r7, #20
 800ce98:	2200      	movs	r2, #0
 800ce9a:	601a      	str	r2, [r3, #0]
 800ce9c:	605a      	str	r2, [r3, #4]
 800ce9e:	609a      	str	r2, [r3, #8]
 800cea0:	60da      	str	r2, [r3, #12]
 800cea2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ceac:	d13a      	bne.n	800cf24 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ceae:	2300      	movs	r3, #0
 800ceb0:	613b      	str	r3, [r7, #16]
 800ceb2:	4b1e      	ldr	r3, [pc, #120]	; (800cf2c <HAL_PCD_MspInit+0xa0>)
 800ceb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceb6:	4a1d      	ldr	r2, [pc, #116]	; (800cf2c <HAL_PCD_MspInit+0xa0>)
 800ceb8:	f043 0301 	orr.w	r3, r3, #1
 800cebc:	6313      	str	r3, [r2, #48]	; 0x30
 800cebe:	4b1b      	ldr	r3, [pc, #108]	; (800cf2c <HAL_PCD_MspInit+0xa0>)
 800cec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cec2:	f003 0301 	and.w	r3, r3, #1
 800cec6:	613b      	str	r3, [r7, #16]
 800cec8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ceca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ced0:	2302      	movs	r3, #2
 800ced2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ced4:	2300      	movs	r3, #0
 800ced6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ced8:	2303      	movs	r3, #3
 800ceda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cedc:	230a      	movs	r3, #10
 800cede:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cee0:	f107 0314 	add.w	r3, r7, #20
 800cee4:	4619      	mov	r1, r3
 800cee6:	4812      	ldr	r0, [pc, #72]	; (800cf30 <HAL_PCD_MspInit+0xa4>)
 800cee8:	f7f5 fdbe 	bl	8002a68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ceec:	4b0f      	ldr	r3, [pc, #60]	; (800cf2c <HAL_PCD_MspInit+0xa0>)
 800ceee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cef0:	4a0e      	ldr	r2, [pc, #56]	; (800cf2c <HAL_PCD_MspInit+0xa0>)
 800cef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cef6:	6353      	str	r3, [r2, #52]	; 0x34
 800cef8:	2300      	movs	r3, #0
 800cefa:	60fb      	str	r3, [r7, #12]
 800cefc:	4b0b      	ldr	r3, [pc, #44]	; (800cf2c <HAL_PCD_MspInit+0xa0>)
 800cefe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf00:	4a0a      	ldr	r2, [pc, #40]	; (800cf2c <HAL_PCD_MspInit+0xa0>)
 800cf02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cf06:	6453      	str	r3, [r2, #68]	; 0x44
 800cf08:	4b08      	ldr	r3, [pc, #32]	; (800cf2c <HAL_PCD_MspInit+0xa0>)
 800cf0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf10:	60fb      	str	r3, [r7, #12]
 800cf12:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800cf14:	2200      	movs	r2, #0
 800cf16:	2105      	movs	r1, #5
 800cf18:	2043      	movs	r0, #67	; 0x43
 800cf1a:	f7f5 fd7b 	bl	8002a14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cf1e:	2043      	movs	r0, #67	; 0x43
 800cf20:	f7f5 fd94 	bl	8002a4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cf24:	bf00      	nop
 800cf26:	3728      	adds	r7, #40	; 0x28
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}
 800cf2c:	40023800 	.word	0x40023800
 800cf30:	40020000 	.word	0x40020000

0800cf34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cf48:	4619      	mov	r1, r3
 800cf4a:	4610      	mov	r0, r2
 800cf4c:	f7fc f812 	bl	8008f74 <USBD_LL_SetupStage>
}
 800cf50:	bf00      	nop
 800cf52:	3708      	adds	r7, #8
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}

0800cf58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b082      	sub	sp, #8
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	460b      	mov	r3, r1
 800cf62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800cf6a:	78fa      	ldrb	r2, [r7, #3]
 800cf6c:	6879      	ldr	r1, [r7, #4]
 800cf6e:	4613      	mov	r3, r2
 800cf70:	00db      	lsls	r3, r3, #3
 800cf72:	1a9b      	subs	r3, r3, r2
 800cf74:	009b      	lsls	r3, r3, #2
 800cf76:	440b      	add	r3, r1
 800cf78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cf7c:	681a      	ldr	r2, [r3, #0]
 800cf7e:	78fb      	ldrb	r3, [r7, #3]
 800cf80:	4619      	mov	r1, r3
 800cf82:	f7fc f84c 	bl	800901e <USBD_LL_DataOutStage>
}
 800cf86:	bf00      	nop
 800cf88:	3708      	adds	r7, #8
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}

0800cf8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf8e:	b580      	push	{r7, lr}
 800cf90:	b082      	sub	sp, #8
 800cf92:	af00      	add	r7, sp, #0
 800cf94:	6078      	str	r0, [r7, #4]
 800cf96:	460b      	mov	r3, r1
 800cf98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800cfa0:	78fa      	ldrb	r2, [r7, #3]
 800cfa2:	6879      	ldr	r1, [r7, #4]
 800cfa4:	4613      	mov	r3, r2
 800cfa6:	00db      	lsls	r3, r3, #3
 800cfa8:	1a9b      	subs	r3, r3, r2
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	440b      	add	r3, r1
 800cfae:	3348      	adds	r3, #72	; 0x48
 800cfb0:	681a      	ldr	r2, [r3, #0]
 800cfb2:	78fb      	ldrb	r3, [r7, #3]
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	f7fc f895 	bl	80090e4 <USBD_LL_DataInStage>
}
 800cfba:	bf00      	nop
 800cfbc:	3708      	adds	r7, #8
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}

0800cfc2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfc2:	b580      	push	{r7, lr}
 800cfc4:	b082      	sub	sp, #8
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7fc f9a9 	bl	8009328 <USBD_LL_SOF>
}
 800cfd6:	bf00      	nop
 800cfd8:	3708      	adds	r7, #8
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}

0800cfde <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfde:	b580      	push	{r7, lr}
 800cfe0:	b084      	sub	sp, #16
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	68db      	ldr	r3, [r3, #12]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d102      	bne.n	800cff8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cff2:	2300      	movs	r3, #0
 800cff4:	73fb      	strb	r3, [r7, #15]
 800cff6:	e008      	b.n	800d00a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	68db      	ldr	r3, [r3, #12]
 800cffc:	2b02      	cmp	r3, #2
 800cffe:	d102      	bne.n	800d006 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d000:	2301      	movs	r3, #1
 800d002:	73fb      	strb	r3, [r7, #15]
 800d004:	e001      	b.n	800d00a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d006:	f7f4 fea9 	bl	8001d5c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d010:	7bfa      	ldrb	r2, [r7, #15]
 800d012:	4611      	mov	r1, r2
 800d014:	4618      	mov	r0, r3
 800d016:	f7fc f949 	bl	80092ac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d020:	4618      	mov	r0, r3
 800d022:	f7fc f8f5 	bl	8009210 <USBD_LL_Reset>
}
 800d026:	bf00      	nop
 800d028:	3710      	adds	r7, #16
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
	...

0800d030 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d03e:	4618      	mov	r0, r3
 800d040:	f7fc f944 	bl	80092cc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	687a      	ldr	r2, [r7, #4]
 800d050:	6812      	ldr	r2, [r2, #0]
 800d052:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d056:	f043 0301 	orr.w	r3, r3, #1
 800d05a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6a1b      	ldr	r3, [r3, #32]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d005      	beq.n	800d070 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d064:	4b04      	ldr	r3, [pc, #16]	; (800d078 <HAL_PCD_SuspendCallback+0x48>)
 800d066:	691b      	ldr	r3, [r3, #16]
 800d068:	4a03      	ldr	r2, [pc, #12]	; (800d078 <HAL_PCD_SuspendCallback+0x48>)
 800d06a:	f043 0306 	orr.w	r3, r3, #6
 800d06e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d070:	bf00      	nop
 800d072:	3708      	adds	r7, #8
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}
 800d078:	e000ed00 	.word	0xe000ed00

0800d07c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d08a:	4618      	mov	r0, r3
 800d08c:	f7fc f934 	bl	80092f8 <USBD_LL_Resume>
}
 800d090:	bf00      	nop
 800d092:	3708      	adds	r7, #8
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}

0800d098 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b082      	sub	sp, #8
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
 800d0a0:	460b      	mov	r3, r1
 800d0a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d0aa:	78fa      	ldrb	r2, [r7, #3]
 800d0ac:	4611      	mov	r1, r2
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7fc f982 	bl	80093b8 <USBD_LL_IsoOUTIncomplete>
}
 800d0b4:	bf00      	nop
 800d0b6:	3708      	adds	r7, #8
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}

0800d0bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b082      	sub	sp, #8
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	460b      	mov	r3, r1
 800d0c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d0ce:	78fa      	ldrb	r2, [r7, #3]
 800d0d0:	4611      	mov	r1, r2
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f7fc f94a 	bl	800936c <USBD_LL_IsoINIncomplete>
}
 800d0d8:	bf00      	nop
 800d0da:	3708      	adds	r7, #8
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}

0800d0e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b082      	sub	sp, #8
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7fc f988 	bl	8009404 <USBD_LL_DevConnected>
}
 800d0f4:	bf00      	nop
 800d0f6:	3708      	adds	r7, #8
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b082      	sub	sp, #8
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7fc f985 	bl	800941a <USBD_LL_DevDisconnected>
}
 800d110:	bf00      	nop
 800d112:	3708      	adds	r7, #8
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}

0800d118 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b082      	sub	sp, #8
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	781b      	ldrb	r3, [r3, #0]
 800d124:	2b01      	cmp	r3, #1
 800d126:	d13c      	bne.n	800d1a2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d128:	4a20      	ldr	r2, [pc, #128]	; (800d1ac <USBD_LL_Init+0x94>)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	4a1e      	ldr	r2, [pc, #120]	; (800d1ac <USBD_LL_Init+0x94>)
 800d134:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d138:	4b1c      	ldr	r3, [pc, #112]	; (800d1ac <USBD_LL_Init+0x94>)
 800d13a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d13e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d140:	4b1a      	ldr	r3, [pc, #104]	; (800d1ac <USBD_LL_Init+0x94>)
 800d142:	2206      	movs	r2, #6
 800d144:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d146:	4b19      	ldr	r3, [pc, #100]	; (800d1ac <USBD_LL_Init+0x94>)
 800d148:	2202      	movs	r2, #2
 800d14a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d14c:	4b17      	ldr	r3, [pc, #92]	; (800d1ac <USBD_LL_Init+0x94>)
 800d14e:	2200      	movs	r2, #0
 800d150:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d152:	4b16      	ldr	r3, [pc, #88]	; (800d1ac <USBD_LL_Init+0x94>)
 800d154:	2202      	movs	r2, #2
 800d156:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d158:	4b14      	ldr	r3, [pc, #80]	; (800d1ac <USBD_LL_Init+0x94>)
 800d15a:	2200      	movs	r2, #0
 800d15c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d15e:	4b13      	ldr	r3, [pc, #76]	; (800d1ac <USBD_LL_Init+0x94>)
 800d160:	2200      	movs	r2, #0
 800d162:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d164:	4b11      	ldr	r3, [pc, #68]	; (800d1ac <USBD_LL_Init+0x94>)
 800d166:	2200      	movs	r2, #0
 800d168:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d16a:	4b10      	ldr	r3, [pc, #64]	; (800d1ac <USBD_LL_Init+0x94>)
 800d16c:	2200      	movs	r2, #0
 800d16e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d170:	4b0e      	ldr	r3, [pc, #56]	; (800d1ac <USBD_LL_Init+0x94>)
 800d172:	2200      	movs	r2, #0
 800d174:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d176:	480d      	ldr	r0, [pc, #52]	; (800d1ac <USBD_LL_Init+0x94>)
 800d178:	f7f6 fa97 	bl	80036aa <HAL_PCD_Init>
 800d17c:	4603      	mov	r3, r0
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d001      	beq.n	800d186 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d182:	f7f4 fdeb 	bl	8001d5c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d186:	2180      	movs	r1, #128	; 0x80
 800d188:	4808      	ldr	r0, [pc, #32]	; (800d1ac <USBD_LL_Init+0x94>)
 800d18a:	f7f7 fc10 	bl	80049ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d18e:	2240      	movs	r2, #64	; 0x40
 800d190:	2100      	movs	r1, #0
 800d192:	4806      	ldr	r0, [pc, #24]	; (800d1ac <USBD_LL_Init+0x94>)
 800d194:	f7f7 fbc4 	bl	8004920 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d198:	2280      	movs	r2, #128	; 0x80
 800d19a:	2101      	movs	r1, #1
 800d19c:	4803      	ldr	r0, [pc, #12]	; (800d1ac <USBD_LL_Init+0x94>)
 800d19e:	f7f7 fbbf 	bl	8004920 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d1a2:	2300      	movs	r3, #0
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3708      	adds	r7, #8
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	2000594c 	.word	0x2000594c

0800d1b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b084      	sub	sp, #16
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7f6 fb93 	bl	80038f2 <HAL_PCD_Start>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1d0:	7bfb      	ldrb	r3, [r7, #15]
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f000 f97e 	bl	800d4d4 <USBD_Get_USB_Status>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3710      	adds	r7, #16
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}

0800d1e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d1e6:	b580      	push	{r7, lr}
 800d1e8:	b084      	sub	sp, #16
 800d1ea:	af00      	add	r7, sp, #0
 800d1ec:	6078      	str	r0, [r7, #4]
 800d1ee:	4608      	mov	r0, r1
 800d1f0:	4611      	mov	r1, r2
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	70fb      	strb	r3, [r7, #3]
 800d1f8:	460b      	mov	r3, r1
 800d1fa:	70bb      	strb	r3, [r7, #2]
 800d1fc:	4613      	mov	r3, r2
 800d1fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d200:	2300      	movs	r3, #0
 800d202:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d204:	2300      	movs	r3, #0
 800d206:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d20e:	78bb      	ldrb	r3, [r7, #2]
 800d210:	883a      	ldrh	r2, [r7, #0]
 800d212:	78f9      	ldrb	r1, [r7, #3]
 800d214:	f7f6 ffa4 	bl	8004160 <HAL_PCD_EP_Open>
 800d218:	4603      	mov	r3, r0
 800d21a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d21c:	7bfb      	ldrb	r3, [r7, #15]
 800d21e:	4618      	mov	r0, r3
 800d220:	f000 f958 	bl	800d4d4 <USBD_Get_USB_Status>
 800d224:	4603      	mov	r3, r0
 800d226:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d228:	7bbb      	ldrb	r3, [r7, #14]
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}

0800d232 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d232:	b580      	push	{r7, lr}
 800d234:	b084      	sub	sp, #16
 800d236:	af00      	add	r7, sp, #0
 800d238:	6078      	str	r0, [r7, #4]
 800d23a:	460b      	mov	r3, r1
 800d23c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d23e:	2300      	movs	r3, #0
 800d240:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d242:	2300      	movs	r3, #0
 800d244:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d24c:	78fa      	ldrb	r2, [r7, #3]
 800d24e:	4611      	mov	r1, r2
 800d250:	4618      	mov	r0, r3
 800d252:	f7f6 ffed 	bl	8004230 <HAL_PCD_EP_Close>
 800d256:	4603      	mov	r3, r0
 800d258:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d25a:	7bfb      	ldrb	r3, [r7, #15]
 800d25c:	4618      	mov	r0, r3
 800d25e:	f000 f939 	bl	800d4d4 <USBD_Get_USB_Status>
 800d262:	4603      	mov	r3, r0
 800d264:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d266:	7bbb      	ldrb	r3, [r7, #14]
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3710      	adds	r7, #16
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b084      	sub	sp, #16
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	460b      	mov	r3, r1
 800d27a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d27c:	2300      	movs	r3, #0
 800d27e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d280:	2300      	movs	r3, #0
 800d282:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d28a:	78fa      	ldrb	r2, [r7, #3]
 800d28c:	4611      	mov	r1, r2
 800d28e:	4618      	mov	r0, r3
 800d290:	f7f7 f8ad 	bl	80043ee <HAL_PCD_EP_SetStall>
 800d294:	4603      	mov	r3, r0
 800d296:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d298:	7bfb      	ldrb	r3, [r7, #15]
 800d29a:	4618      	mov	r0, r3
 800d29c:	f000 f91a 	bl	800d4d4 <USBD_Get_USB_Status>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3710      	adds	r7, #16
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}

0800d2ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2ae:	b580      	push	{r7, lr}
 800d2b0:	b084      	sub	sp, #16
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	6078      	str	r0, [r7, #4]
 800d2b6:	460b      	mov	r3, r1
 800d2b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d2c8:	78fa      	ldrb	r2, [r7, #3]
 800d2ca:	4611      	mov	r1, r2
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f7f7 f8f2 	bl	80044b6 <HAL_PCD_EP_ClrStall>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2d6:	7bfb      	ldrb	r3, [r7, #15]
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f000 f8fb 	bl	800d4d4 <USBD_Get_USB_Status>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3710      	adds	r7, #16
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b085      	sub	sp, #20
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d2fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d300:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d304:	2b00      	cmp	r3, #0
 800d306:	da0b      	bge.n	800d320 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d308:	78fb      	ldrb	r3, [r7, #3]
 800d30a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d30e:	68f9      	ldr	r1, [r7, #12]
 800d310:	4613      	mov	r3, r2
 800d312:	00db      	lsls	r3, r3, #3
 800d314:	1a9b      	subs	r3, r3, r2
 800d316:	009b      	lsls	r3, r3, #2
 800d318:	440b      	add	r3, r1
 800d31a:	333e      	adds	r3, #62	; 0x3e
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	e00b      	b.n	800d338 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d320:	78fb      	ldrb	r3, [r7, #3]
 800d322:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d326:	68f9      	ldr	r1, [r7, #12]
 800d328:	4613      	mov	r3, r2
 800d32a:	00db      	lsls	r3, r3, #3
 800d32c:	1a9b      	subs	r3, r3, r2
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	440b      	add	r3, r1
 800d332:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d336:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3714      	adds	r7, #20
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr

0800d344 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b084      	sub	sp, #16
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	460b      	mov	r3, r1
 800d34e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d350:	2300      	movs	r3, #0
 800d352:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d354:	2300      	movs	r3, #0
 800d356:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d35e:	78fa      	ldrb	r2, [r7, #3]
 800d360:	4611      	mov	r1, r2
 800d362:	4618      	mov	r0, r3
 800d364:	f7f6 fed7 	bl	8004116 <HAL_PCD_SetAddress>
 800d368:	4603      	mov	r3, r0
 800d36a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d36c:	7bfb      	ldrb	r3, [r7, #15]
 800d36e:	4618      	mov	r0, r3
 800d370:	f000 f8b0 	bl	800d4d4 <USBD_Get_USB_Status>
 800d374:	4603      	mov	r3, r0
 800d376:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d378:	7bbb      	ldrb	r3, [r7, #14]
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3710      	adds	r7, #16
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}

0800d382 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d382:	b580      	push	{r7, lr}
 800d384:	b086      	sub	sp, #24
 800d386:	af00      	add	r7, sp, #0
 800d388:	60f8      	str	r0, [r7, #12]
 800d38a:	607a      	str	r2, [r7, #4]
 800d38c:	603b      	str	r3, [r7, #0]
 800d38e:	460b      	mov	r3, r1
 800d390:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d392:	2300      	movs	r3, #0
 800d394:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d396:	2300      	movs	r3, #0
 800d398:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d3a0:	7af9      	ldrb	r1, [r7, #11]
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	687a      	ldr	r2, [r7, #4]
 800d3a6:	f7f6 ffd8 	bl	800435a <HAL_PCD_EP_Transmit>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3ae:	7dfb      	ldrb	r3, [r7, #23]
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f000 f88f 	bl	800d4d4 <USBD_Get_USB_Status>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d3ba:	7dbb      	ldrb	r3, [r7, #22]
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3718      	adds	r7, #24
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}

0800d3c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b086      	sub	sp, #24
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	60f8      	str	r0, [r7, #12]
 800d3cc:	607a      	str	r2, [r7, #4]
 800d3ce:	603b      	str	r3, [r7, #0]
 800d3d0:	460b      	mov	r3, r1
 800d3d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d3e2:	7af9      	ldrb	r1, [r7, #11]
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	687a      	ldr	r2, [r7, #4]
 800d3e8:	f7f6 ff6c 	bl	80042c4 <HAL_PCD_EP_Receive>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3f0:	7dfb      	ldrb	r3, [r7, #23]
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f000 f86e 	bl	800d4d4 <USBD_Get_USB_Status>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d3fc:	7dbb      	ldrb	r3, [r7, #22]
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	3718      	adds	r7, #24
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}
	...

0800d408 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b082      	sub	sp, #8
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	460b      	mov	r3, r1
 800d412:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d414:	78fb      	ldrb	r3, [r7, #3]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d002      	beq.n	800d420 <HAL_PCDEx_LPM_Callback+0x18>
 800d41a:	2b01      	cmp	r3, #1
 800d41c:	d01f      	beq.n	800d45e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d41e:	e03b      	b.n	800d498 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6a1b      	ldr	r3, [r3, #32]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d007      	beq.n	800d438 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800d428:	f7f3 fd1e 	bl	8000e68 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d42c:	4b1c      	ldr	r3, [pc, #112]	; (800d4a0 <HAL_PCDEx_LPM_Callback+0x98>)
 800d42e:	691b      	ldr	r3, [r3, #16]
 800d430:	4a1b      	ldr	r2, [pc, #108]	; (800d4a0 <HAL_PCDEx_LPM_Callback+0x98>)
 800d432:	f023 0306 	bic.w	r3, r3, #6
 800d436:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	687a      	ldr	r2, [r7, #4]
 800d444:	6812      	ldr	r2, [r2, #0]
 800d446:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d44a:	f023 0301 	bic.w	r3, r3, #1
 800d44e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d456:	4618      	mov	r0, r3
 800d458:	f7fb ff4e 	bl	80092f8 <USBD_LL_Resume>
    break;
 800d45c:	e01c      	b.n	800d498 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	687a      	ldr	r2, [r7, #4]
 800d46a:	6812      	ldr	r2, [r2, #0]
 800d46c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d470:	f043 0301 	orr.w	r3, r3, #1
 800d474:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d47c:	4618      	mov	r0, r3
 800d47e:	f7fb ff25 	bl	80092cc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6a1b      	ldr	r3, [r3, #32]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d005      	beq.n	800d496 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d48a:	4b05      	ldr	r3, [pc, #20]	; (800d4a0 <HAL_PCDEx_LPM_Callback+0x98>)
 800d48c:	691b      	ldr	r3, [r3, #16]
 800d48e:	4a04      	ldr	r2, [pc, #16]	; (800d4a0 <HAL_PCDEx_LPM_Callback+0x98>)
 800d490:	f043 0306 	orr.w	r3, r3, #6
 800d494:	6113      	str	r3, [r2, #16]
    break;
 800d496:	bf00      	nop
}
 800d498:	bf00      	nop
 800d49a:	3708      	adds	r7, #8
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}
 800d4a0:	e000ed00 	.word	0xe000ed00

0800d4a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d4ac:	4b03      	ldr	r3, [pc, #12]	; (800d4bc <USBD_static_malloc+0x18>)
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	370c      	adds	r7, #12
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b8:	4770      	bx	lr
 800d4ba:	bf00      	nop
 800d4bc:	200053d4 	.word	0x200053d4

0800d4c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]

}
 800d4c8:	bf00      	nop
 800d4ca:	370c      	adds	r7, #12
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d2:	4770      	bx	lr

0800d4d4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b085      	sub	sp, #20
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	4603      	mov	r3, r0
 800d4dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d4e2:	79fb      	ldrb	r3, [r7, #7]
 800d4e4:	2b03      	cmp	r3, #3
 800d4e6:	d817      	bhi.n	800d518 <USBD_Get_USB_Status+0x44>
 800d4e8:	a201      	add	r2, pc, #4	; (adr r2, 800d4f0 <USBD_Get_USB_Status+0x1c>)
 800d4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4ee:	bf00      	nop
 800d4f0:	0800d501 	.word	0x0800d501
 800d4f4:	0800d507 	.word	0x0800d507
 800d4f8:	0800d50d 	.word	0x0800d50d
 800d4fc:	0800d513 	.word	0x0800d513
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d500:	2300      	movs	r3, #0
 800d502:	73fb      	strb	r3, [r7, #15]
    break;
 800d504:	e00b      	b.n	800d51e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d506:	2303      	movs	r3, #3
 800d508:	73fb      	strb	r3, [r7, #15]
    break;
 800d50a:	e008      	b.n	800d51e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d50c:	2301      	movs	r3, #1
 800d50e:	73fb      	strb	r3, [r7, #15]
    break;
 800d510:	e005      	b.n	800d51e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d512:	2303      	movs	r3, #3
 800d514:	73fb      	strb	r3, [r7, #15]
    break;
 800d516:	e002      	b.n	800d51e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d518:	2303      	movs	r3, #3
 800d51a:	73fb      	strb	r3, [r7, #15]
    break;
 800d51c:	bf00      	nop
  }
  return usb_status;
 800d51e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d520:	4618      	mov	r0, r3
 800d522:	3714      	adds	r7, #20
 800d524:	46bd      	mov	sp, r7
 800d526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52a:	4770      	bx	lr

0800d52c <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800d52c:	b480      	push	{r7}
 800d52e:	b083      	sub	sp, #12
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	4608      	mov	r0, r1
 800d536:	4611      	mov	r1, r2
 800d538:	461a      	mov	r2, r3
 800d53a:	4603      	mov	r3, r0
 800d53c:	70fb      	strb	r3, [r7, #3]
 800d53e:	460b      	mov	r3, r1
 800d540:	70bb      	strb	r3, [r7, #2]
 800d542:	4613      	mov	r3, r2
 800d544:	707b      	strb	r3, [r7, #1]
                return 0;
 800d546:	2300      	movs	r3, #0
        }
 800d548:	4618      	mov	r0, r3
 800d54a:	370c      	adds	r7, #12
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr

0800d554 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800d554:	b480      	push	{r7}
 800d556:	b083      	sub	sp, #12
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	4608      	mov	r0, r1
 800d55e:	4611      	mov	r1, r2
 800d560:	461a      	mov	r2, r3
 800d562:	4603      	mov	r3, r0
 800d564:	70fb      	strb	r3, [r7, #3]
 800d566:	460b      	mov	r3, r1
 800d568:	70bb      	strb	r3, [r7, #2]
 800d56a:	4613      	mov	r3, r2
 800d56c:	707b      	strb	r3, [r7, #1]
                return 0;
 800d56e:	2300      	movs	r3, #0
        }
 800d570:	4618      	mov	r0, r3
 800d572:	370c      	adds	r7, #12
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr

0800d57c <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 800d57c:	b480      	push	{r7}
 800d57e:	b083      	sub	sp, #12
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
                return 0;
 800d584:	2300      	movs	r3, #0
        }
 800d586:	4618      	mov	r0, r3
 800d588:	370c      	adds	r7, #12
 800d58a:	46bd      	mov	sp, r7
 800d58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d590:	4770      	bx	lr

0800d592 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 800d592:	b480      	push	{r7}
 800d594:	b083      	sub	sp, #12
 800d596:	af00      	add	r7, sp, #0
 800d598:	6078      	str	r0, [r7, #4]
                return 0;
 800d59a:	2300      	movs	r3, #0
        }
 800d59c:	4618      	mov	r0, r3
 800d59e:	370c      	adds	r7, #12
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a6:	4770      	bx	lr

0800d5a8 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 800d5a8:	b480      	push	{r7}
 800d5aa:	b083      	sub	sp, #12
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
                return 0;
 800d5b0:	2300      	movs	r3, #0
        }
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	370c      	adds	r7, #12
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5bc:	4770      	bx	lr

0800d5be <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 800d5be:	b480      	push	{r7}
 800d5c0:	b083      	sub	sp, #12
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
 800d5c6:	460b      	mov	r3, r1
 800d5c8:	70fb      	strb	r3, [r7, #3]
                return;
 800d5ca:	bf00      	nop
        } // Note used for hubs only!
 800d5cc:	370c      	adds	r7, #12
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d4:	4770      	bx	lr

0800d5d6 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 800d5d6:	b480      	push	{r7}
 800d5d8:	b083      	sub	sp, #12
 800d5da:	af00      	add	r7, sp, #0
 800d5dc:	6078      	str	r0, [r7, #4]
 800d5de:	460b      	mov	r3, r1
 800d5e0:	807b      	strh	r3, [r7, #2]
 800d5e2:	4613      	mov	r3, r2
 800d5e4:	803b      	strh	r3, [r7, #0]
                return false;
 800d5e6:	2300      	movs	r3, #0
        }
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	370c      	adds	r7, #12
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f2:	4770      	bx	lr

0800d5f4 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 800d5f4:	b480      	push	{r7}
 800d5f6:	b083      	sub	sp, #12
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	70fb      	strb	r3, [r7, #3]
                return false;
 800d600:	2300      	movs	r3, #0
        }
 800d602:	4618      	mov	r0, r3
 800d604:	370c      	adds	r7, #12
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr

0800d60e <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 800d60e:	b480      	push	{r7}
 800d610:	b083      	sub	sp, #12
 800d612:	af00      	add	r7, sp, #0
 800d614:	6078      	str	r0, [r7, #4]
 800d616:	460b      	mov	r3, r1
 800d618:	70fb      	strb	r3, [r7, #3]
                return true;
 800d61a:	2301      	movs	r3, #1
        }
 800d61c:	4618      	mov	r0, r3
 800d61e:	370c      	adds	r7, #12
 800d620:	46bd      	mov	sp, r7
 800d622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d626:	4770      	bx	lr

0800d628 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 800d628:	b480      	push	{r7}
 800d62a:	b083      	sub	sp, #12
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
                return (AddressPool&)addrPool;
 800d630:	687b      	ldr	r3, [r7, #4]
        };
 800d632:	4618      	mov	r0, r3
 800d634:	370c      	adds	r7, #12
 800d636:	46bd      	mov	sp, r7
 800d638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63c:	4770      	bx	lr

0800d63e <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 800d63e:	b480      	push	{r7}
 800d640:	b085      	sub	sp, #20
 800d642:	af00      	add	r7, sp, #0
 800d644:	6078      	str	r0, [r7, #4]
 800d646:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800d648:	2300      	movs	r3, #0
 800d64a:	73fb      	strb	r3, [r7, #15]
 800d64c:	7bfb      	ldrb	r3, [r7, #15]
 800d64e:	2b0f      	cmp	r3, #15
 800d650:	d812      	bhi.n	800d678 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3a>
                        if(!devConfig[i]) {
 800d652:	7bfa      	ldrb	r2, [r7, #15]
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	321e      	adds	r2, #30
 800d658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d107      	bne.n	800d670 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x32>
                                devConfig[i] = pdev;
 800d660:	7bfa      	ldrb	r2, [r7, #15]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	321e      	adds	r2, #30
 800d666:	6839      	ldr	r1, [r7, #0]
 800d668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                return 0;
 800d66c:	2300      	movs	r3, #0
 800d66e:	e004      	b.n	800d67a <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3c>
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800d670:	7bfb      	ldrb	r3, [r7, #15]
 800d672:	3301      	adds	r3, #1
 800d674:	73fb      	strb	r3, [r7, #15]
 800d676:	e7e9      	b.n	800d64c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0xe>
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 800d678:	23d3      	movs	r3, #211	; 0xd3
        };
 800d67a:	4618      	mov	r0, r3
 800d67c:	3714      	adds	r7, #20
 800d67e:	46bd      	mov	sp, r7
 800d680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d684:	4770      	bx	lr

0800d686 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 800d686:	b480      	push	{r7}
 800d688:	b083      	sub	sp, #12
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	6078      	str	r0, [r7, #4]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2200      	movs	r2, #0
 800d692:	701a      	strb	r2, [r3, #0]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2200      	movs	r2, #0
 800d698:	705a      	strb	r2, [r3, #1]
 800d69a:	2200      	movs	r2, #0
 800d69c:	709a      	strb	r2, [r3, #2]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	70da      	strb	r2, [r3, #3]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	711a      	strb	r2, [r3, #4]
        };
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	370c      	adds	r7, #12
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b2:	4770      	bx	lr

0800d6b4 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 800d6b4:	b480      	push	{r7}
 800d6b6:	b083      	sub	sp, #12
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	601a      	str	r2, [r3, #0]
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	711a      	strb	r2, [r3, #4]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	715a      	strb	r2, [r3, #5]
        };
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	370c      	adds	r7, #12
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6da:	4770      	bx	lr

0800d6dc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 800d6dc:	b480      	push	{r7}
 800d6de:	b083      	sub	sp, #12
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	601a      	str	r2, [r3, #0]
                countDown = valueSize = pbuf->valueSize;
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	781a      	ldrb	r2, [r3, #0]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	715a      	strb	r2, [r3, #5]
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	795a      	ldrb	r2, [r3, #5]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	711a      	strb	r2, [r3, #4]
        };
 800d700:	bf00      	nop
 800d702:	370c      	adds	r7, #12
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr

0800d70c <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 800d70c:	b480      	push	{r7}
 800d70e:	b083      	sub	sp, #12
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2200      	movs	r2, #0
 800d718:	601a      	str	r2, [r3, #0]
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2200      	movs	r2, #0
 800d71e:	711a      	strb	r2, [r3, #4]
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2200      	movs	r2, #0
 800d724:	80da      	strh	r2, [r3, #6]
        };
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	4618      	mov	r0, r3
 800d72a:	370c      	adds	r7, #12
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr

0800d734 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 800d734:	b480      	push	{r7}
 800d736:	b083      	sub	sp, #12
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	601a      	str	r2, [r3, #0]
                countDown = 0;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2200      	movs	r2, #0
 800d74c:	80da      	strh	r2, [r3, #6]
        };
 800d74e:	bf00      	nop
 800d750:	370c      	adds	r7, #12
 800d752:	46bd      	mov	sp, r7
 800d754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d758:	4770      	bx	lr

0800d75a <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 800d75a:	b480      	push	{r7}
 800d75c:	b085      	sub	sp, #20
 800d75e:	af00      	add	r7, sp, #0
 800d760:	60f8      	str	r0, [r7, #12]
 800d762:	60b9      	str	r1, [r7, #8]
 800d764:	607a      	str	r2, [r7, #4]
 800d766:	807b      	strh	r3, [r7, #2]
                switch(nStage) {
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	791b      	ldrb	r3, [r3, #4]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d002      	beq.n	800d776 <_ZN11ByteSkipper4SkipEPPhPtt+0x1c>
 800d770:	2b01      	cmp	r3, #1
 800d772:	d009      	beq.n	800d788 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>
 800d774:	e029      	b.n	800d7ca <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                        case 0:
                                countDown = bytes_to_skip;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	887a      	ldrh	r2, [r7, #2]
 800d77a:	80da      	strh	r2, [r3, #6]
                                nStage++;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	791b      	ldrb	r3, [r3, #4]
 800d780:	3301      	adds	r3, #1
 800d782:	b2da      	uxtb	r2, r3
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	711a      	strb	r2, [r3, #4]
                                // fall through
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	88db      	ldrh	r3, [r3, #6]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d015      	beq.n	800d7bc <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	881b      	ldrh	r3, [r3, #0]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d011      	beq.n	800d7bc <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	88db      	ldrh	r3, [r3, #6]
 800d79c:	3b01      	subs	r3, #1
 800d79e:	b29a      	uxth	r2, r3
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	80da      	strh	r2, [r3, #6]
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	1c5a      	adds	r2, r3, #1
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	601a      	str	r2, [r3, #0]
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	881b      	ldrh	r3, [r3, #0]
 800d7b2:	3b01      	subs	r3, #1
 800d7b4:	b29a      	uxth	r2, r3
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	801a      	strh	r2, [r3, #0]
 800d7ba:	e7e5      	b.n	800d788 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>

                                if(!countDown)
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	88db      	ldrh	r3, [r3, #6]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d102      	bne.n	800d7ca <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                                        nStage = 0;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	711a      	strb	r2, [r3, #4]
                };
                return (!countDown);
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	88db      	ldrh	r3, [r3, #6]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	bf0c      	ite	eq
 800d7d2:	2301      	moveq	r3, #1
 800d7d4:	2300      	movne	r3, #0
 800d7d6:	b2db      	uxtb	r3, r3
        };
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3714      	adds	r7, #20
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e2:	4770      	bx	lr

0800d7e4 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 800d7e4:	b480      	push	{r7}
 800d7e6:	b083      	sub	sp, #12
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	4608      	mov	r0, r1
 800d7ee:	4611      	mov	r1, r2
 800d7f0:	461a      	mov	r2, r3
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	70fb      	strb	r3, [r7, #3]
 800d7f6:	460b      	mov	r3, r1
 800d7f8:	70bb      	strb	r3, [r7, #2]
 800d7fa:	4613      	mov	r3, r2
 800d7fc:	707b      	strb	r3, [r7, #1]
        };
 800d7fe:	bf00      	nop
 800d800:	370c      	adds	r7, #12
 800d802:	46bd      	mov	sp, r7
 800d804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d808:	4770      	bx	lr
	...

0800d80c <_ZN15USBDeviceConfigC1Ev>:
class USBDeviceConfig {
 800d80c:	b480      	push	{r7}
 800d80e:	b083      	sub	sp, #12
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	4a04      	ldr	r2, [pc, #16]	; (800d828 <_ZN15USBDeviceConfigC1Ev+0x1c>)
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	601a      	str	r2, [r3, #0]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	4618      	mov	r0, r3
 800d81e:	370c      	adds	r7, #12
 800d820:	46bd      	mov	sp, r7
 800d822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d826:	4770      	bx	lr
 800d828:	08014a18 	.word	0x08014a18

0800d82c <_ZN17UsbConfigXtracterC1Ev>:
class UsbConfigXtracter {
 800d82c:	b480      	push	{r7}
 800d82e:	b083      	sub	sp, #12
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	4a04      	ldr	r2, [pc, #16]	; (800d848 <_ZN17UsbConfigXtracterC1Ev+0x1c>)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	601a      	str	r2, [r3, #0]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	4618      	mov	r0, r3
 800d83e:	370c      	adds	r7, #12
 800d840:	46bd      	mov	sp, r7
 800d842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d846:	4770      	bx	lr
 800d848:	08014a00 	.word	0x08014a00

0800d84c <_ZN3BTD10GetAddressEv>:
        virtual uint8_t GetAddress() {
 800d84c:	b480      	push	{r7}
 800d84e:	b083      	sub	sp, #12
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
                return bAddress;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
        };
 800d85a:	4618      	mov	r0, r3
 800d85c:	370c      	adds	r7, #12
 800d85e:	46bd      	mov	sp, r7
 800d860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d864:	4770      	bx	lr

0800d866 <_ZN3BTD7isReadyEv>:
        virtual bool isReady() {
 800d866:	b480      	push	{r7}
 800d868:	b083      	sub	sp, #12
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
                return bPollEnable;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
        };
 800d874:	4618      	mov	r0, r3
 800d876:	370c      	adds	r7, #12
 800d878:	46bd      	mov	sp, r7
 800d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87e:	4770      	bx	lr

0800d880 <_ZN3BTD10DEVCLASSOKEh>:
        virtual bool DEVCLASSOK(uint8_t klass) {
 800d880:	b480      	push	{r7}
 800d882:	b083      	sub	sp, #12
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	460b      	mov	r3, r1
 800d88a:	70fb      	strb	r3, [r7, #3]
                return (klass == USB_CLASS_WIRELESS_CTRL);
 800d88c:	78fb      	ldrb	r3, [r7, #3]
 800d88e:	2be0      	cmp	r3, #224	; 0xe0
 800d890:	bf0c      	ite	eq
 800d892:	2301      	moveq	r3, #1
 800d894:	2300      	movne	r3, #0
 800d896:	b2db      	uxtb	r3, r3
        };
 800d898:	4618      	mov	r0, r3
 800d89a:	370c      	adds	r7, #12
 800d89c:	46bd      	mov	sp, r7
 800d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a2:	4770      	bx	lr

0800d8a4 <_ZN3BTD8VIDPIDOKEtt>:
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 800d8a4:	b480      	push	{r7}
 800d8a6:	b083      	sub	sp, #12
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	460b      	mov	r3, r1
 800d8ae:	807b      	strh	r3, [r7, #2]
 800d8b0:	4613      	mov	r3, r2
 800d8b2:	803b      	strh	r3, [r7, #0]
                if((vid == IOGEAR_GBU521_VID && pid == IOGEAR_GBU521_PID) || (vid == BELKIN_F8T065BF_VID && pid == BELKIN_F8T065BF_PID))
 800d8b4:	887b      	ldrh	r3, [r7, #2]
 800d8b6:	f640 225c 	movw	r2, #2652	; 0xa5c
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d104      	bne.n	800d8c8 <_ZN3BTD8VIDPIDOKEtt+0x24>
 800d8be:	883b      	ldrh	r3, [r7, #0]
 800d8c0:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	d009      	beq.n	800d8dc <_ZN3BTD8VIDPIDOKEtt+0x38>
 800d8c8:	887b      	ldrh	r3, [r7, #2]
 800d8ca:	f240 520d 	movw	r2, #1293	; 0x50d
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d106      	bne.n	800d8e0 <_ZN3BTD8VIDPIDOKEtt+0x3c>
 800d8d2:	883b      	ldrh	r3, [r7, #0]
 800d8d4:	f240 625a 	movw	r2, #1626	; 0x65a
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d101      	bne.n	800d8e0 <_ZN3BTD8VIDPIDOKEtt+0x3c>
                        return true;
 800d8dc:	2301      	movs	r3, #1
 800d8de:	e02d      	b.n	800d93c <_ZN3BTD8VIDPIDOKEtt+0x98>
                if(my_bdaddr[0] != 0x00 || my_bdaddr[1] != 0x00 || my_bdaddr[2] != 0x00 || my_bdaddr[3] != 0x00 || my_bdaddr[4] != 0x00 || my_bdaddr[5] != 0x00) { // Check if Bluetooth address is set
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	7d1b      	ldrb	r3, [r3, #20]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d113      	bne.n	800d910 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	7d5b      	ldrb	r3, [r3, #21]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d10f      	bne.n	800d910 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	7d9b      	ldrb	r3, [r3, #22]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d10b      	bne.n	800d910 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	7ddb      	ldrb	r3, [r3, #23]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d107      	bne.n	800d910 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	7e1b      	ldrb	r3, [r3, #24]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d103      	bne.n	800d910 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	7e5b      	ldrb	r3, [r3, #25]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d014      	beq.n	800d93a <_ZN3BTD8VIDPIDOKEtt+0x96>
                        if(vid == PS3_VID && (pid == PS3_PID || pid == PS3NAVIGATION_PID || pid == PS3MOVE_PID))
 800d910:	887b      	ldrh	r3, [r7, #2]
 800d912:	f240 524c 	movw	r2, #1356	; 0x54c
 800d916:	4293      	cmp	r3, r2
 800d918:	d10f      	bne.n	800d93a <_ZN3BTD8VIDPIDOKEtt+0x96>
 800d91a:	883b      	ldrh	r3, [r7, #0]
 800d91c:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800d920:	d009      	beq.n	800d936 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800d922:	883b      	ldrh	r3, [r7, #0]
 800d924:	f240 422f 	movw	r2, #1071	; 0x42f
 800d928:	4293      	cmp	r3, r2
 800d92a:	d004      	beq.n	800d936 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800d92c:	883b      	ldrh	r3, [r7, #0]
 800d92e:	f240 32d5 	movw	r2, #981	; 0x3d5
 800d932:	4293      	cmp	r3, r2
 800d934:	d101      	bne.n	800d93a <_ZN3BTD8VIDPIDOKEtt+0x96>
                                return true;
 800d936:	2301      	movs	r3, #1
 800d938:	e000      	b.n	800d93c <_ZN3BTD8VIDPIDOKEtt+0x98>
                return false;
 800d93a:	2300      	movs	r3, #0
        };
 800d93c:	4618      	mov	r0, r3
 800d93e:	370c      	adds	r7, #12
 800d940:	46bd      	mov	sp, r7
 800d942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d946:	4770      	bx	lr

0800d948 <_ZN3BTDC1EP3USB>:
const uint8_t BTD::BTD_CONTROL_PIPE = 0;
const uint8_t BTD::BTD_EVENT_PIPE = 1;
const uint8_t BTD::BTD_DATAIN_PIPE = 2;
const uint8_t BTD::BTD_DATAOUT_PIPE = 3;

BTD::BTD(USB *p) :
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6039      	str	r1, [r7, #0]
bAddress(0), // Device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
simple_pairing_supported(false),
bPollEnable(false) // Don't start polling before dongle is connected
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	4618      	mov	r0, r3
 800d956:	f7ff ff59 	bl	800d80c <_ZN15USBDeviceConfigC1Ev>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	3304      	adds	r3, #4
 800d95e:	4618      	mov	r0, r3
 800d960:	f7ff ff64 	bl	800d82c <_ZN17UsbConfigXtracterC1Ev>
 800d964:	4a2b      	ldr	r2, [pc, #172]	; (800da14 <_ZN3BTDC1EP3USB+0xcc>)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	601a      	str	r2, [r3, #0]
 800d96a:	4a2b      	ldr	r2, [pc, #172]	; (800da18 <_ZN3BTDC1EP3USB+0xd0>)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	605a      	str	r2, [r3, #4]
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2200      	movs	r2, #0
 800d974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2200      	movs	r2, #0
 800d97c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2200      	movs	r2, #0
 800d98c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2200      	movs	r2, #0
 800d994:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	683a      	ldr	r2, [r7, #0]
 800d99c:	64da      	str	r2, [r3, #76]	; 0x4c
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	661a      	str	r2, [r3, #96]	; 0x60
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
{
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	73fb      	strb	r3, [r7, #15]
 800d9d0:	7bfb      	ldrb	r3, [r7, #15]
 800d9d2:	2b03      	cmp	r3, #3
 800d9d4:	d80a      	bhi.n	800d9ec <_ZN3BTDC1EP3USB+0xa4>
                btService[i] = NULL;
 800d9d6:	7bfb      	ldrb	r3, [r7, #15]
 800d9d8:	687a      	ldr	r2, [r7, #4]
 800d9da:	3318      	adds	r3, #24
 800d9dc:	009b      	lsls	r3, r3, #2
 800d9de:	4413      	add	r3, r2
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	605a      	str	r2, [r3, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800d9e4:	7bfb      	ldrb	r3, [r7, #15]
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	73fb      	strb	r3, [r7, #15]
 800d9ea:	e7f1      	b.n	800d9d0 <_ZN3BTDC1EP3USB+0x88>

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f000 fa7d 	bl	800deec <_ZN3BTD10InitializeEv>

        if(pUsb) // Register in USB subsystem
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d006      	beq.n	800da08 <_ZN3BTDC1EP3USB+0xc0>
                pUsb->RegisterDeviceClass(this); // Set devConfig[] entry
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9fe:	687a      	ldr	r2, [r7, #4]
 800da00:	4611      	mov	r1, r2
 800da02:	4618      	mov	r0, r3
 800da04:	f7ff fe1b 	bl	800d63e <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	4618      	mov	r0, r3
 800da0c:	3710      	adds	r7, #16
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}
 800da12:	bf00      	nop
 800da14:	080149c0 	.word	0x080149c0
 800da18:	080149f4 	.word	0x080149f4

0800da1c <_ZN3BTD15ConfigureDeviceEhhb>:

uint8_t BTD::ConfigureDevice(uint8_t parent, uint8_t port, bool lowspeed) {
 800da1c:	b590      	push	{r4, r7, lr}
 800da1e:	b08f      	sub	sp, #60	; 0x3c
 800da20:	af02      	add	r7, sp, #8
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	4608      	mov	r0, r1
 800da26:	4611      	mov	r1, r2
 800da28:	461a      	mov	r2, r3
 800da2a:	4603      	mov	r3, r0
 800da2c:	70fb      	strb	r3, [r7, #3]
 800da2e:	460b      	mov	r3, r1
 800da30:	70bb      	strb	r3, [r7, #2]
 800da32:	4613      	mov	r3, r2
 800da34:	707b      	strb	r3, [r7, #1]
        const uint8_t constBufSize = sizeof (USB_DEVICE_DESCRIPTOR);
 800da36:	2312      	movs	r3, #18
 800da38:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        uint8_t buf[constBufSize];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 800da3c:	f107 0308 	add.w	r3, r7, #8
 800da40:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t rcode;
        UsbDevice *p = NULL;
 800da42:	2300      	movs	r3, #0
 800da44:	627b      	str	r3, [r7, #36]	; 0x24
        EpInfo *oldep_ptr = NULL;
 800da46:	2300      	movs	r3, #0
 800da48:	623b      	str	r3, [r7, #32]

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f000 fa4e 	bl	800deec <_ZN3BTD10InitializeEv>

        AddressPool &addrPool = pUsb->GetAddressPool(); // Get memory address of USB device address pool
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da54:	4618      	mov	r0, r3
 800da56:	f7ff fde7 	bl	800d628 <_ZN3USB14GetAddressPoolEv>
 800da5a:	61f8      	str	r0, [r7, #28]
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD ConfigureDevice"), 0x80);
#endif

        if(bAddress) { // Check if address has already been assigned to an instance
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800da62:	2b00      	cmp	r3, #0
 800da64:	d001      	beq.n	800da6a <_ZN3BTD15ConfigureDeviceEhhb+0x4e>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 800da66:	23d9      	movs	r3, #217	; 0xd9
 800da68:	e087      	b.n	800db7a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        p = addrPool.GetUsbDevicePtr(0); // Get pointer to pseudo device with address 0 assigned
 800da6a:	69fb      	ldr	r3, [r7, #28]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	2100      	movs	r1, #0
 800da72:	69f8      	ldr	r0, [r7, #28]
 800da74:	4798      	blx	r3
 800da76:	6278      	str	r0, [r7, #36]	; 0x24
        if(!p) {
 800da78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d101      	bne.n	800da82 <_ZN3BTD15ConfigureDeviceEhhb+0x66>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800da7e:	23d6      	movs	r3, #214	; 0xd6
 800da80:	e07b      	b.n	800db7a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if(!p->epinfo) {
 800da82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d101      	bne.n	800da8e <_ZN3BTD15ConfigureDeviceEhhb+0x72>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 800da8a:	23d7      	movs	r3, #215	; 0xd7
 800da8c:	e075      	b.n	800db7a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        oldep_ptr = p->epinfo; // Save old pointer to EP_RECORD of address 0
 800da8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	623b      	str	r3, [r7, #32]
        p->epinfo = epInfo; // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f103 0251 	add.w	r2, r3, #81	; 0x51
 800da9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9c:	601a      	str	r2, [r3, #0]
        p->lowspeed = lowspeed;
 800da9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa0:	787a      	ldrb	r2, [r7, #1]
 800daa2:	719a      	strb	r2, [r3, #6]
        rcode = pUsb->getDevDescr(0, 0, constBufSize, (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800daa8:	f107 0308 	add.w	r3, r7, #8
 800daac:	9300      	str	r3, [sp, #0]
 800daae:	2312      	movs	r3, #18
 800dab0:	2200      	movs	r2, #0
 800dab2:	2100      	movs	r1, #0
 800dab4:	f005 fa13 	bl	8012ede <_ZN3USB11getDevDescrEhhtPh>
 800dab8:	4603      	mov	r3, r0
 800daba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        p->epinfo = oldep_ptr; // Restore p->epinfo
 800dabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac0:	6a3a      	ldr	r2, [r7, #32]
 800dac2:	601a      	str	r2, [r3, #0]

        if(rcode)
 800dac4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d146      	bne.n	800db5a <_ZN3BTD15ConfigureDeviceEhhb+0x13e>
                goto FailGetDevDescr;

        bAddress = addrPool.AllocAddress(parent, false, port); // Allocate new address according to device class
 800dacc:	69fb      	ldr	r3, [r7, #28]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	3304      	adds	r3, #4
 800dad2:	681c      	ldr	r4, [r3, #0]
 800dad4:	78bb      	ldrb	r3, [r7, #2]
 800dad6:	78f9      	ldrb	r1, [r7, #3]
 800dad8:	2200      	movs	r2, #0
 800dada:	69f8      	ldr	r0, [r7, #28]
 800dadc:	47a0      	blx	r4
 800dade:	4603      	mov	r3, r0
 800dae0:	461a      	mov	r2, r3
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(!bAddress) {
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d101      	bne.n	800daf6 <_ZN3BTD15ConfigureDeviceEhhb+0xda>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nOut of address space"), 0x80);
#endif
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800daf2:	23d4      	movs	r3, #212	; 0xd4
 800daf4:	e041      	b.n	800db7a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if (udd->bDeviceClass == 0x09) // Some dongles have an USB hub inside
 800daf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf8:	791b      	ldrb	r3, [r3, #4]
 800dafa:	2b09      	cmp	r3, #9
 800dafc:	d017      	beq.n	800db2e <_ZN3BTD15ConfigureDeviceEhhb+0x112>
                goto FailHub;

        epInfo[0].maxPktSize = udd->bMaxPacketSize0; // Extract Max Packet Size from device descriptor
 800dafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db00:	79da      	ldrb	r2, [r3, #7]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        epInfo[1].epAddr = udd->bNumConfigurations; // Steal and abuse from epInfo structure to save memory
 800db08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db0a:	7c5a      	ldrb	r2, [r3, #17]
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        VID = udd->idVendor;
 800db12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db14:	891b      	ldrh	r3, [r3, #8]
 800db16:	b29a      	uxth	r2, r3
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        PID = udd->idProduct;
 800db1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db20:	895b      	ldrh	r3, [r3, #10]
 800db22:	b29a      	uxth	r2, r3
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

        return USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET;
 800db2a:	23e0      	movs	r3, #224	; 0xe0
 800db2c:	e025      	b.n	800db7a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailHub;
 800db2e:	bf00      	nop

FailHub:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nPlease create a hub instance in your code: \"USBHub Hub1(&Usb);\""), 0x80);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800db3a:	2300      	movs	r3, #0
 800db3c:	2200      	movs	r2, #0
 800db3e:	f005 fa6b 	bl	8013018 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800db42:	23d1      	movs	r3, #209	; 0xd1
 800db44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	3308      	adds	r3, #8
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	4798      	blx	r3
        return rcode;
 800db54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db58:	e00f      	b.n	800db7a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailGetDevDescr;
 800db5a:	bf00      	nop

FailGetDevDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetDevDescr(rcode);
#endif
        if(rcode != hrJERR)
 800db5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db60:	2b0d      	cmp	r3, #13
 800db62:	d002      	beq.n	800db6a <_ZN3BTD15ConfigureDeviceEhhb+0x14e>
                rcode = USB_ERROR_FailGetDevDescr;
 800db64:	23e1      	movs	r3, #225	; 0xe1
 800db66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	3308      	adds	r3, #8
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	4798      	blx	r3
        return rcode;
 800db76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
};
 800db7a:	4618      	mov	r0, r3
 800db7c:	3734      	adds	r7, #52	; 0x34
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd90      	pop	{r4, r7, pc}

0800db82 <_ZN3BTD4InitEhhb>:

uint8_t BTD::Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed) {
 800db82:	b580      	push	{r7, lr}
 800db84:	b096      	sub	sp, #88	; 0x58
 800db86:	af02      	add	r7, sp, #8
 800db88:	6078      	str	r0, [r7, #4]
 800db8a:	4608      	mov	r0, r1
 800db8c:	4611      	mov	r1, r2
 800db8e:	461a      	mov	r2, r3
 800db90:	4603      	mov	r3, r0
 800db92:	70fb      	strb	r3, [r7, #3]
 800db94:	460b      	mov	r3, r1
 800db96:	70bb      	strb	r3, [r7, #2]
 800db98:	4613      	mov	r3, r2
 800db9a:	707b      	strb	r3, [r7, #1]
        uint8_t rcode;
        uint8_t num_of_conf = epInfo[1].epAddr; // Number of configurations
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800dba2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        epInfo[1].epAddr = 0;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        AddressPool &addrPool = pUsb->GetAddressPool();
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7ff fd38 	bl	800d628 <_ZN3USB14GetAddressPoolEv>
 800dbb8:	64b8      	str	r0, [r7, #72]	; 0x48
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD Init"), 0x80);
#endif
        UsbDevice *p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800dbba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	687a      	ldr	r2, [r7, #4]
 800dbc2:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800dbc6:	4611      	mov	r1, r2
 800dbc8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800dbca:	4798      	blx	r3
 800dbcc:	6478      	str	r0, [r7, #68]	; 0x44

        if(!p) {
 800dbce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d101      	bne.n	800dbd8 <_ZN3BTD4InitEhhb+0x56>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800dbd4:	23d6      	movs	r3, #214	; 0xd6
 800dbd6:	e185      	b.n	800dee4 <_ZN3BTD4InitEhhb+0x362>
        }

        delay(300); // Assign new address to the device
 800dbd8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800dbdc:	f7f4 fe3e 	bl	800285c <HAL_Delay>

        rcode = pUsb->setAddr(0, 0, bAddress); // Assign new address to the device
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dbea:	2200      	movs	r2, #0
 800dbec:	2100      	movs	r1, #0
 800dbee:	f005 fa13 	bl	8013018 <_ZN3USB7setAddrEhhh>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode) {
 800dbf8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d003      	beq.n	800dc08 <_ZN3BTD4InitEhhb+0x86>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                p->lowspeed = false;
 800dc00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc02:	2200      	movs	r2, #0
 800dc04:	719a      	strb	r2, [r3, #6]
                goto Fail;
 800dc06:	e165      	b.n	800ded4 <_ZN3BTD4InitEhhb+0x352>
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif

        p->lowspeed = false;
 800dc08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	719a      	strb	r2, [r3, #6]

        p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800dc0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	687a      	ldr	r2, [r7, #4]
 800dc16:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800dc1a:	4611      	mov	r1, r2
 800dc1c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800dc1e:	4798      	blx	r3
 800dc20:	6478      	str	r0, [r7, #68]	; 0x44
        if(!p) {
 800dc22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d101      	bne.n	800dc2c <_ZN3BTD4InitEhhb+0xaa>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800dc28:	23d6      	movs	r3, #214	; 0xd6
 800dc2a:	e15b      	b.n	800dee4 <_ZN3BTD4InitEhhb+0x362>
        }

        p->lowspeed = lowspeed;
 800dc2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc2e:	787a      	ldrb	r2, [r7, #1]
 800dc30:	719a      	strb	r2, [r3, #6]

        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo); // Assign epInfo to epinfo pointer - only EP0 is known
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	3351      	adds	r3, #81	; 0x51
 800dc40:	2201      	movs	r2, #1
 800dc42:	f004 f8dc 	bl	8011dfe <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800dc46:	4603      	mov	r3, r0
 800dc48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode)
 800dc4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	f040 8128 	bne.w	800dea6 <_ZN3BTD4InitEhhb+0x324>
                goto FailSetDevTblEntry;

        if(VID == PS3_VID && (PID == PS3_PID || PID == PS3NAVIGATION_PID || PID == PS3MOVE_PID)) {
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800dc5c:	f240 524c 	movw	r2, #1356	; 0x54c
 800dc60:	4293      	cmp	r3, r2
 800dc62:	d177      	bne.n	800dd54 <_ZN3BTD4InitEhhb+0x1d2>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800dc6a:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800dc6e:	d00d      	beq.n	800dc8c <_ZN3BTD4InitEhhb+0x10a>
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800dc76:	f240 422f 	movw	r2, #1071	; 0x42f
 800dc7a:	4293      	cmp	r3, r2
 800dc7c:	d006      	beq.n	800dc8c <_ZN3BTD4InitEhhb+0x10a>
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800dc84:	f240 32d5 	movw	r2, #981	; 0x3d5
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	d163      	bne.n	800dd54 <_ZN3BTD4InitEhhb+0x1d2>
                delay(100);
 800dc8c:	2064      	movs	r0, #100	; 0x64
 800dc8e:	f7f4 fde5 	bl	800285c <HAL_Delay>
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 1); // We only need the Control endpoint, so we don't have to initialize the other endpoints of device
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800dca2:	2301      	movs	r3, #1
 800dca4:	f005 f9e6 	bl	8013074 <_ZN3USB7setConfEhhh>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800dcae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	f040 80f9 	bne.w	800deaa <_ZN3BTD4InitEhhb+0x328>
                                Notify(PSTR("\r\nNavigation Controller Connected"), 0x80);
                } else // It must be a Motion controller
                        Notify(PSTR("\r\nMotion Controller Connected"), 0x80);
#endif

                if(my_bdaddr[0] == 0x00 && my_bdaddr[1] == 0x00 && my_bdaddr[2] == 0x00 && my_bdaddr[3] == 0x00 && my_bdaddr[4] == 0x00 && my_bdaddr[5] == 0x00) {
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	7d1b      	ldrb	r3, [r3, #20]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d113      	bne.n	800dce8 <_ZN3BTD4InitEhhb+0x166>
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	7d5b      	ldrb	r3, [r3, #21]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d10f      	bne.n	800dce8 <_ZN3BTD4InitEhhb+0x166>
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	7d9b      	ldrb	r3, [r3, #22]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d10b      	bne.n	800dce8 <_ZN3BTD4InitEhhb+0x166>
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	7ddb      	ldrb	r3, [r3, #23]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d107      	bne.n	800dce8 <_ZN3BTD4InitEhhb+0x166>
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	7e1b      	ldrb	r3, [r3, #24]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d103      	bne.n	800dce8 <_ZN3BTD4InitEhhb+0x166>
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	7e5b      	ldrb	r3, [r3, #25]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d019      	beq.n	800dd1c <_ZN3BTD4InitEhhb+0x19a>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPlease plug in the dongle before trying to pair with the PS3 Controller\r\nor set the Bluetooth address in the constructor of the PS3BT class"), 0x80);
#endif
                } else {
                        if(PID == PS3_PID || PID == PS3NAVIGATION_PID)
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800dcee:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800dcf2:	d006      	beq.n	800dd02 <_ZN3BTD4InitEhhb+0x180>
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800dcfa:	f240 422f 	movw	r2, #1071	; 0x42f
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d106      	bne.n	800dd10 <_ZN3BTD4InitEhhb+0x18e>
                                setBdaddr(my_bdaddr); // Set internal Bluetooth address
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	3314      	adds	r3, #20
 800dd06:	4619      	mov	r1, r3
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	f002 f8b0 	bl	800fe6e <_ZN3BTD9setBdaddrEPh>
 800dd0e:	e005      	b.n	800dd1c <_ZN3BTD4InitEhhb+0x19a>
                        else
                                setMoveBdaddr(my_bdaddr); // Set internal Bluetooth address
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	3314      	adds	r3, #20
 800dd14:	4619      	mov	r1, r3
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	f002 f8e9 	bl	800feee <_ZN3BTD13setMoveBdaddrEPh>
                        }
                        D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                }

                pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 0); // Reset configuration value
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	f005 f9a1 	bl	8013074 <_ZN3USB7setConfEhhh>
                pUsb->setAddr(bAddress, 0, 0); // Reset address
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	2200      	movs	r2, #0
 800dd40:	f005 f96a 	bl	8013018 <_ZN3USB7setAddrEhhh>
                Release(); // Release device
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	3308      	adds	r3, #8
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	4798      	blx	r3
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED; // Return
 800dd50:	23d1      	movs	r3, #209	; 0xd1
 800dd52:	e0c7      	b.n	800dee4 <_ZN3BTD4InitEhhb+0x362>
        } else {
                // Check if attached device is a Bluetooth dongle and fill endpoint data structure
                // First interface in the configuration must have Bluetooth assigned Class/Subclass/Protocol
                // And 3 endpoints - interrupt-IN, bulk-IN, bulk-OUT, not necessarily in this order
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800dd54:	2300      	movs	r3, #0
 800dd56:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800dd5a:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800dd5e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d25e      	bcs.n	800de24 <_ZN3BTD4InitEhhb+0x2a2>
                        if((VID == IOGEAR_GBU521_VID && PID == IOGEAR_GBU521_PID) || (VID == BELKIN_F8T065BF_VID && PID == BELKIN_F8T065BF_PID)) {
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800dd6c:	f640 225c 	movw	r2, #2652	; 0xa5c
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d106      	bne.n	800dd82 <_ZN3BTD4InitEhhb+0x200>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800dd7a:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d00d      	beq.n	800dd9e <_ZN3BTD4InitEhhb+0x21c>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800dd88:	f240 520d 	movw	r2, #1293	; 0x50d
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d120      	bne.n	800ddd2 <_ZN3BTD4InitEhhb+0x250>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800dd96:	f240 625a 	movw	r2, #1626	; 0x65a
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d119      	bne.n	800ddd2 <_ZN3BTD4InitEhhb+0x250>
                                ConfigDescParser<USB_CLASS_VENDOR_SPECIFIC, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Workaround issue with some dongles
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	1d1a      	adds	r2, r3, #4
 800dda2:	f107 0308 	add.w	r3, r7, #8
 800dda6:	4611      	mov	r1, r2
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f002 f8f3 	bl	800ff94 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ddb8:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800ddbc:	f107 0308 	add.w	r3, r7, #8
 800ddc0:	9300      	str	r3, [sp, #0]
 800ddc2:	4613      	mov	r3, r2
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	f005 f8da 	bl	8012f7e <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ddd0:	e018      	b.n	800de04 <_ZN3BTD4InitEhhb+0x282>
                        } else {
                                ConfigDescParser<USB_CLASS_WIRELESS_CTRL, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Set class id according to the specification
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	1d1a      	adds	r2, r3, #4
 800ddd6:	f107 0308 	add.w	r3, r7, #8
 800ddda:	4611      	mov	r1, r2
 800dddc:	4618      	mov	r0, r3
 800ddde:	f002 f927 	bl	8010030 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ddec:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800ddf0:	f107 0308 	add.w	r3, r7, #8
 800ddf4:	9300      	str	r3, [sp, #0]
 800ddf6:	4613      	mov	r3, r2
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	f005 f8c0 	bl	8012f7e <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800ddfe:	4603      	mov	r3, r0
 800de00:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        }
                        if(rcode) // Check error code
 800de04:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d150      	bne.n	800deae <_ZN3BTD4InitEhhb+0x32c>
                                goto FailGetConfDescr;
                        if(bNumEP >= BTD_MAX_ENDPOINTS) // All endpoints extracted
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800de12:	2b03      	cmp	r3, #3
 800de14:	d805      	bhi.n	800de22 <_ZN3BTD4InitEhhb+0x2a0>
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800de16:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800de1a:	3301      	adds	r3, #1
 800de1c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800de20:	e79b      	b.n	800dd5a <_ZN3BTD4InitEhhb+0x1d8>
                                break;
 800de22:	bf00      	nop
                }

                if(bNumEP < BTD_MAX_ENDPOINTS)
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800de2a:	2b03      	cmp	r3, #3
 800de2c:	d945      	bls.n	800deba <_ZN3BTD4InitEhhb+0x338>
                        goto FailUnknownDevice;

                // Assign epInfo to epinfo pointer - this time all 3 endpoins
                rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	3351      	adds	r3, #81	; 0x51
 800de42:	f003 ffdc 	bl	8011dfe <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800de46:	4603      	mov	r3, r0
 800de48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800de4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800de50:	2b00      	cmp	r3, #0
 800de52:	d12e      	bne.n	800deb2 <_ZN3BTD4InitEhhb+0x330>
                        goto FailSetDevTblEntry;

                // Set Configuration Value
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bConfNum);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800de6a:	f005 f903 	bl	8013074 <_ZN3USB7setConfEhhh>
 800de6e:	4603      	mov	r3, r0
 800de70:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800de74:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d11c      	bne.n	800deb6 <_ZN3BTD4InitEhhb+0x334>
                        goto FailSetConfDescr;

                hci_num_reset_loops = 100; // only loop 100 times before trying to send the hci reset command
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2264      	movs	r2, #100	; 0x64
 800de80:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                hci_counter = 0;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2200      	movs	r2, #0
 800de88:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                hci_state = HCI_INIT_STATE;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2200      	movs	r2, #0
 800de90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                waitingForConnection = false;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2200      	movs	r2, #0
 800de98:	721a      	strb	r2, [r3, #8]
                bPollEnable = true;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2201      	movs	r2, #1
 800de9e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nBluetooth Dongle Initialized"), 0x80);
#endif
        }
        return 0; // Successful configuration
 800dea2:	2300      	movs	r3, #0
 800dea4:	e01e      	b.n	800dee4 <_ZN3BTD4InitEhhb+0x362>
                goto FailSetDevTblEntry;
 800dea6:	bf00      	nop
 800dea8:	e014      	b.n	800ded4 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 800deaa:	bf00      	nop
 800deac:	e012      	b.n	800ded4 <_ZN3BTD4InitEhhb+0x352>
                                goto FailGetConfDescr;
 800deae:	bf00      	nop
 800deb0:	e010      	b.n	800ded4 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetDevTblEntry;
 800deb2:	bf00      	nop
 800deb4:	e00e      	b.n	800ded4 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 800deb6:	bf00      	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 800deb8:	e00c      	b.n	800ded4 <_ZN3BTD4InitEhhb+0x352>
                        goto FailUnknownDevice;
 800deba:	bf00      	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dec6:	2300      	movs	r3, #0
 800dec8:	2200      	movs	r2, #0
 800deca:	f005 f8a5 	bl	8013018 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800dece:	23d1      	movs	r3, #209	; 0xd1
 800ded0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nBTD Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	3308      	adds	r3, #8
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	4798      	blx	r3
        return rcode;
 800dee0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3750      	adds	r7, #80	; 0x50
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}

0800deec <_ZN3BTD10InitializeEv>:

void BTD::Initialize() {
 800deec:	b580      	push	{r7, lr}
 800deee:	b084      	sub	sp, #16
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800def4:	2300      	movs	r3, #0
 800def6:	73fb      	strb	r3, [r7, #15]
 800def8:	7bfb      	ldrb	r3, [r7, #15]
 800defa:	2b03      	cmp	r3, #3
 800defc:	d845      	bhi.n	800df8a <_ZN3BTD10InitializeEv+0x9e>
                epInfo[i].epAddr = 0;
 800defe:	7bfa      	ldrb	r2, [r7, #15]
 800df00:	6879      	ldr	r1, [r7, #4]
 800df02:	4613      	mov	r3, r2
 800df04:	005b      	lsls	r3, r3, #1
 800df06:	4413      	add	r3, r2
 800df08:	440b      	add	r3, r1
 800df0a:	3351      	adds	r3, #81	; 0x51
 800df0c:	2200      	movs	r2, #0
 800df0e:	701a      	strb	r2, [r3, #0]
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 800df10:	7bfb      	ldrb	r3, [r7, #15]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d001      	beq.n	800df1a <_ZN3BTD10InitializeEv+0x2e>
 800df16:	2000      	movs	r0, #0
 800df18:	e000      	b.n	800df1c <_ZN3BTD10InitializeEv+0x30>
 800df1a:	2008      	movs	r0, #8
 800df1c:	7bfa      	ldrb	r2, [r7, #15]
 800df1e:	6879      	ldr	r1, [r7, #4]
 800df20:	4613      	mov	r3, r2
 800df22:	005b      	lsls	r3, r3, #1
 800df24:	4413      	add	r3, r2
 800df26:	440b      	add	r3, r1
 800df28:	3352      	adds	r3, #82	; 0x52
 800df2a:	4602      	mov	r2, r0
 800df2c:	701a      	strb	r2, [r3, #0]
                epInfo[i].bmSndToggle = 0;
 800df2e:	7bfa      	ldrb	r2, [r7, #15]
 800df30:	6879      	ldr	r1, [r7, #4]
 800df32:	4613      	mov	r3, r2
 800df34:	005b      	lsls	r3, r3, #1
 800df36:	4413      	add	r3, r2
 800df38:	440b      	add	r3, r1
 800df3a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800df3e:	78d3      	ldrb	r3, [r2, #3]
 800df40:	f36f 0300 	bfc	r3, #0, #1
 800df44:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmRcvToggle = 0;
 800df46:	7bfa      	ldrb	r2, [r7, #15]
 800df48:	6879      	ldr	r1, [r7, #4]
 800df4a:	4613      	mov	r3, r2
 800df4c:	005b      	lsls	r3, r3, #1
 800df4e:	4413      	add	r3, r2
 800df50:	440b      	add	r3, r1
 800df52:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800df56:	78d3      	ldrb	r3, [r2, #3]
 800df58:	f36f 0341 	bfc	r3, #1, #1
 800df5c:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 800df5e:	7bfb      	ldrb	r3, [r7, #15]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d001      	beq.n	800df68 <_ZN3BTD10InitializeEv+0x7c>
 800df64:	2101      	movs	r1, #1
 800df66:	e000      	b.n	800df6a <_ZN3BTD10InitializeEv+0x7e>
 800df68:	210f      	movs	r1, #15
 800df6a:	7bfa      	ldrb	r2, [r7, #15]
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	4613      	mov	r3, r2
 800df70:	005b      	lsls	r3, r3, #1
 800df72:	4413      	add	r3, r2
 800df74:	4403      	add	r3, r0
 800df76:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800df7a:	78d3      	ldrb	r3, [r2, #3]
 800df7c:	f361 0387 	bfi	r3, r1, #2, #6
 800df80:	70d3      	strb	r3, [r2, #3]
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800df82:	7bfb      	ldrb	r3, [r7, #15]
 800df84:	3301      	adds	r3, #1
 800df86:	73fb      	strb	r3, [r7, #15]
 800df88:	e7b6      	b.n	800def8 <_ZN3BTD10InitializeEv+0xc>
        }
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800df8a:	2300      	movs	r3, #0
 800df8c:	73fb      	strb	r3, [r7, #15]
 800df8e:	7bfb      	ldrb	r3, [r7, #15]
 800df90:	2b03      	cmp	r3, #3
 800df92:	d81c      	bhi.n	800dfce <_ZN3BTD10InitializeEv+0xe2>
                if(btService[i])
 800df94:	7bfb      	ldrb	r3, [r7, #15]
 800df96:	687a      	ldr	r2, [r7, #4]
 800df98:	3318      	adds	r3, #24
 800df9a:	009b      	lsls	r3, r3, #2
 800df9c:	4413      	add	r3, r2
 800df9e:	685b      	ldr	r3, [r3, #4]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d010      	beq.n	800dfc6 <_ZN3BTD10InitializeEv+0xda>
                        btService[i]->Reset(); // Reset all Bluetooth services
 800dfa4:	7bfb      	ldrb	r3, [r7, #15]
 800dfa6:	687a      	ldr	r2, [r7, #4]
 800dfa8:	3318      	adds	r3, #24
 800dfaa:	009b      	lsls	r3, r3, #2
 800dfac:	4413      	add	r3, r2
 800dfae:	6859      	ldr	r1, [r3, #4]
 800dfb0:	7bfb      	ldrb	r3, [r7, #15]
 800dfb2:	687a      	ldr	r2, [r7, #4]
 800dfb4:	3318      	adds	r3, #24
 800dfb6:	009b      	lsls	r3, r3, #2
 800dfb8:	4413      	add	r3, r2
 800dfba:	685b      	ldr	r3, [r3, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	3308      	adds	r3, #8
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	4608      	mov	r0, r1
 800dfc4:	4798      	blx	r3
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800dfc6:	7bfb      	ldrb	r3, [r7, #15]
 800dfc8:	3301      	adds	r3, #1
 800dfca:	73fb      	strb	r3, [r7, #15]
 800dfcc:	e7df      	b.n	800df8e <_ZN3BTD10InitializeEv+0xa2>
        }

        connectToWii = false;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        incomingWii = false;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        connectToHIDDevice = false;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        incomingHIDDevice = false;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2200      	movs	r2, #0
 800dfea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        incomingPSController = false;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2200      	movs	r2, #0
 800dff2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        bAddress = 0; // Clear device address
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2200      	movs	r2, #0
 800dffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        bNumEP = 1; // Must have to be reset to 1
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2201      	movs	r2, #1
 800e002:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        qNextPollTime = 0; // Reset next poll time
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2200      	movs	r2, #0
 800e00a:	661a      	str	r2, [r3, #96]	; 0x60
        pollInterval = 0;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2200      	movs	r2, #0
 800e010:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bPollEnable = false; // Don't start polling before dongle is connected
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2200      	movs	r2, #0
 800e018:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        simple_pairing_supported = false;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2200      	movs	r2, #0
 800e020:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
}
 800e024:	bf00      	nop
 800e026:	3710      	adds	r7, #16
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}

0800e02c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:

/* Extracts interrupt-IN, bulk-IN, bulk-OUT endpoint information from config descriptor */
void BTD::EndpointXtract(uint8_t conf, uint8_t iface __attribute__((unused)), uint8_t alt, uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *pep) {
 800e02c:	b480      	push	{r7}
 800e02e:	b085      	sub	sp, #20
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	4608      	mov	r0, r1
 800e036:	4611      	mov	r1, r2
 800e038:	461a      	mov	r2, r3
 800e03a:	4603      	mov	r3, r0
 800e03c:	70fb      	strb	r3, [r7, #3]
 800e03e:	460b      	mov	r3, r1
 800e040:	70bb      	strb	r3, [r7, #2]
 800e042:	4613      	mov	r3, r2
 800e044:	707b      	strb	r3, [r7, #1]
        //ErrorMessage<uint8_t>(PSTR("Conf.Val"),conf);
        //ErrorMessage<uint8_t>(PSTR("Iface Num"),iface);
        //ErrorMessage<uint8_t>(PSTR("Alt.Set"),alt);

        if(alt) // Wrong interface - by BT spec, no alt setting
 800e046:	787b      	ldrb	r3, [r7, #1]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d15d      	bne.n	800e108 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xdc>
                return;

        bConfNum = conf;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	78fa      	ldrb	r2, [r7, #3]
 800e050:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) { // Interrupt In endpoint found
 800e054:	69fb      	ldr	r3, [r7, #28]
 800e056:	78db      	ldrb	r3, [r3, #3]
 800e058:	f003 0303 	and.w	r3, r3, #3
 800e05c:	2b03      	cmp	r3, #3
 800e05e:	d114      	bne.n	800e08a <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
 800e060:	69fb      	ldr	r3, [r7, #28]
 800e062:	789b      	ldrb	r3, [r3, #2]
 800e064:	b25b      	sxtb	r3, r3
 800e066:	2b00      	cmp	r3, #0
 800e068:	da0f      	bge.n	800e08a <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
                index = BTD_EVENT_PIPE;
 800e06a:	2301      	movs	r3, #1
 800e06c:	73fb      	strb	r3, [r7, #15]
                epInfo[index].bmNakPower = USB_NAK_NOWAIT;
 800e06e:	7bfa      	ldrb	r2, [r7, #15]
 800e070:	6879      	ldr	r1, [r7, #4]
 800e072:	4613      	mov	r3, r2
 800e074:	005b      	lsls	r3, r3, #1
 800e076:	4413      	add	r3, r2
 800e078:	440b      	add	r3, r1
 800e07a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800e07e:	78d3      	ldrb	r3, [r2, #3]
 800e080:	2101      	movs	r1, #1
 800e082:	f361 0387 	bfi	r3, r1, #2, #6
 800e086:	70d3      	strb	r3, [r2, #3]
 800e088:	e00e      	b.n	800e0a8 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7c>
        } else if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_BULK) // Bulk endpoint found
 800e08a:	69fb      	ldr	r3, [r7, #28]
 800e08c:	78db      	ldrb	r3, [r3, #3]
 800e08e:	f003 0303 	and.w	r3, r3, #3
 800e092:	2b02      	cmp	r3, #2
 800e094:	d13a      	bne.n	800e10c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe0>
                index = ((pep->bEndpointAddress & 0x80) == 0x80) ? BTD_DATAIN_PIPE : BTD_DATAOUT_PIPE;
 800e096:	69fb      	ldr	r3, [r7, #28]
 800e098:	789b      	ldrb	r3, [r3, #2]
 800e09a:	b25b      	sxtb	r3, r3
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	da01      	bge.n	800e0a4 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x78>
 800e0a0:	2302      	movs	r3, #2
 800e0a2:	e000      	b.n	800e0a6 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7a>
 800e0a4:	2303      	movs	r3, #3
 800e0a6:	73fb      	strb	r3, [r7, #15]
        else
            return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 800e0a8:	69fb      	ldr	r3, [r7, #28]
 800e0aa:	789b      	ldrb	r3, [r3, #2]
 800e0ac:	7bfa      	ldrb	r2, [r7, #15]
 800e0ae:	f003 030f 	and.w	r3, r3, #15
 800e0b2:	b2d8      	uxtb	r0, r3
 800e0b4:	6879      	ldr	r1, [r7, #4]
 800e0b6:	4613      	mov	r3, r2
 800e0b8:	005b      	lsls	r3, r3, #1
 800e0ba:	4413      	add	r3, r2
 800e0bc:	440b      	add	r3, r1
 800e0be:	3351      	adds	r3, #81	; 0x51
 800e0c0:	4602      	mov	r2, r0
 800e0c2:	701a      	strb	r2, [r3, #0]
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 800e0c4:	69fb      	ldr	r3, [r7, #28]
 800e0c6:	889b      	ldrh	r3, [r3, #4]
 800e0c8:	b29b      	uxth	r3, r3
 800e0ca:	7bfa      	ldrb	r2, [r7, #15]
 800e0cc:	b2d8      	uxtb	r0, r3
 800e0ce:	6879      	ldr	r1, [r7, #4]
 800e0d0:	4613      	mov	r3, r2
 800e0d2:	005b      	lsls	r3, r3, #1
 800e0d4:	4413      	add	r3, r2
 800e0d6:	440b      	add	r3, r1
 800e0d8:	3352      	adds	r3, #82	; 0x52
 800e0da:	4602      	mov	r2, r0
 800e0dc:	701a      	strb	r2, [r3, #0]
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800e0e4:	69fb      	ldr	r3, [r7, #28]
 800e0e6:	799b      	ldrb	r3, [r3, #6]
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d204      	bcs.n	800e0f6 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xca>
                pollInterval = pep->bInterval;
 800e0ec:	69fb      	ldr	r3, [r7, #28]
 800e0ee:	799a      	ldrb	r2, [r3, #6]
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bNumEP++;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800e0fc:	3301      	adds	r3, #1
 800e0fe:	b2da      	uxtb	r2, r3
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800e106:	e002      	b.n	800e10e <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
                return;
 800e108:	bf00      	nop
 800e10a:	e000      	b.n	800e10e <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
            return;
 800e10c:	bf00      	nop
}
 800e10e:	3714      	adds	r7, #20
 800e110:	46bd      	mov	sp, r7
 800e112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e116:	4770      	bx	lr

0800e118 <_ZThn4_N3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 800e118:	f1a0 0004 	sub.w	r0, r0, #4
 800e11c:	f7ff bf86 	b.w	800e02c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

0800e120 <_ZN3BTD7ReleaseEv>:
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}

/* Performs a cleanup after failed Init() attempt */
uint8_t BTD::Release() {
 800e120:	b580      	push	{r7, lr}
 800e122:	b082      	sub	sp, #8
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
        Initialize(); // Set all variables, endpoint structs etc. to default values
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f7ff fedf 	bl	800deec <_ZN3BTD10InitializeEv>
        pUsb->GetAddressPool().FreeAddress(bAddress);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e132:	4618      	mov	r0, r3
 800e134:	f7ff fa78 	bl	800d628 <_ZN3USB14GetAddressPoolEv>
 800e138:	4603      	mov	r3, r0
 800e13a:	681a      	ldr	r2, [r3, #0]
 800e13c:	3208      	adds	r2, #8
 800e13e:	6812      	ldr	r2, [r2, #0]
 800e140:	6879      	ldr	r1, [r7, #4]
 800e142:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
 800e146:	4618      	mov	r0, r3
 800e148:	4790      	blx	r2
        return 0;
 800e14a:	2300      	movs	r3, #0
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3708      	adds	r7, #8
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <_ZN3BTD4PollEv>:

uint8_t BTD::Poll() {
 800e154:	b580      	push	{r7, lr}
 800e156:	b082      	sub	sp, #8
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
        if(!bPollEnable)
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800e162:	f083 0301 	eor.w	r3, r3, #1
 800e166:	b2db      	uxtb	r3, r3
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d001      	beq.n	800e170 <_ZN3BTD4PollEv+0x1c>
                return 0;
 800e16c:	2300      	movs	r3, #0
 800e16e:	e01d      	b.n	800e1ac <_ZN3BTD4PollEv+0x58>
        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Don't poll if shorter than polling interval
 800e170:	f7f4 fb68 	bl	8002844 <HAL_GetTick>
 800e174:	4602      	mov	r2, r0
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e17a:	1ad3      	subs	r3, r2, r3
 800e17c:	43db      	mvns	r3, r3
 800e17e:	0fdb      	lsrs	r3, r3, #31
 800e180:	b2db      	uxtb	r3, r3
 800e182:	2b00      	cmp	r3, #0
 800e184:	d011      	beq.n	800e1aa <_ZN3BTD4PollEv+0x56>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 800e186:	f7f4 fb5d 	bl	8002844 <HAL_GetTick>
 800e18a:	4602      	mov	r2, r0
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800e192:	441a      	add	r2, r3
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	661a      	str	r2, [r3, #96]	; 0x60
                HCI_event_task(); // Poll the HCI event pipe
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	f000 f80b 	bl	800e1b4 <_ZN3BTD14HCI_event_taskEv>
                HCI_task(); // HCI state machine
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	f000 fb22 	bl	800e7e8 <_ZN3BTD8HCI_taskEv>
                ACL_event_task(); // Poll the ACL input pipe too
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	f000 fe4b 	bl	800ee40 <_ZN3BTD14ACL_event_taskEv>
        }
        return 0;
 800e1aa:	2300      	movs	r3, #0
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3708      	adds	r7, #8
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}

0800e1b4 <_ZN3BTD14HCI_event_taskEv>:
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
                if(btService[i])
                        btService[i]->disconnect();
};

void BTD::HCI_event_task() {
 800e1b4:	b5b0      	push	{r4, r5, r7, lr}
 800e1b6:	b088      	sub	sp, #32
 800e1b8:	af02      	add	r7, sp, #8
 800e1ba:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE; // Request more than 16 bytes anyway, the inTransfer routine will take care of this
 800e1bc:	2340      	movs	r3, #64	; 0x40
 800e1be:	81bb      	strh	r3, [r7, #12]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_EVENT_PIPE ].epAddr, &length, hcibuf, pollInterval); // Input on endpoint 1
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	3389      	adds	r3, #137	; 0x89
 800e1d4:	687a      	ldr	r2, [r7, #4]
 800e1d6:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800e1da:	f107 050c 	add.w	r5, r7, #12
 800e1de:	9201      	str	r2, [sp, #4]
 800e1e0:	9300      	str	r3, [sp, #0]
 800e1e2:	462b      	mov	r3, r5
 800e1e4:	4622      	mov	r2, r4
 800e1e6:	f003 ff72 	bl	80120ce <_ZN3USB10inTransferEhhPtPhh>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	73fb      	strb	r3, [r7, #15]

        if(!rcode || rcode == hrNAK) { // Check for errors
 800e1ee:	7bfb      	ldrb	r3, [r7, #15]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d003      	beq.n	800e1fc <_ZN3BTD14HCI_event_taskEv+0x48>
 800e1f4:	7bfb      	ldrb	r3, [r7, #15]
 800e1f6:	2b04      	cmp	r3, #4
 800e1f8:	f040 82f1 	bne.w	800e7de <_ZN3BTD14HCI_event_taskEv+0x62a>
                switch(hcibuf[0]) { // Switch on event type
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800e202:	3b01      	subs	r3, #1
 800e204:	2b35      	cmp	r3, #53	; 0x35
 800e206:	f200 82ea 	bhi.w	800e7de <_ZN3BTD14HCI_event_taskEv+0x62a>
 800e20a:	a201      	add	r2, pc, #4	; (adr r2, 800e210 <_ZN3BTD14HCI_event_taskEv+0x5c>)
 800e20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e210:	0800e3f1 	.word	0x0800e3f1
 800e214:	0800e451 	.word	0x0800e451
 800e218:	0800e5a9 	.word	0x0800e5a9
 800e21c:	0800e693 	.word	0x0800e693
 800e220:	0800e605 	.word	0x0800e605
 800e224:	0800e751 	.word	0x0800e751
 800e228:	0800e637 	.word	0x0800e637
 800e22c:	0800e7c9 	.word	0x0800e7c9
 800e230:	0800e7c9 	.word	0x0800e7c9
 800e234:	0800e7df 	.word	0x0800e7df
 800e238:	0800e7df 	.word	0x0800e7df
 800e23c:	0800e7c9 	.word	0x0800e7c9
 800e240:	0800e7c9 	.word	0x0800e7c9
 800e244:	0800e2e9 	.word	0x0800e2e9
 800e248:	0800e7c9 	.word	0x0800e7c9
 800e24c:	0800e7df 	.word	0x0800e7df
 800e250:	0800e7df 	.word	0x0800e7df
 800e254:	0800e7c9 	.word	0x0800e7c9
 800e258:	0800e7c9 	.word	0x0800e7c9
 800e25c:	0800e7df 	.word	0x0800e7df
 800e260:	0800e7df 	.word	0x0800e7df
 800e264:	0800e71f 	.word	0x0800e71f
 800e268:	0800e749 	.word	0x0800e749
 800e26c:	0800e7c9 	.word	0x0800e7c9
 800e270:	0800e7c9 	.word	0x0800e7c9
 800e274:	0800e7c9 	.word	0x0800e7c9
 800e278:	0800e7c9 	.word	0x0800e7c9
 800e27c:	0800e7df 	.word	0x0800e7df
 800e280:	0800e7df 	.word	0x0800e7df
 800e284:	0800e7df 	.word	0x0800e7df
 800e288:	0800e7df 	.word	0x0800e7df
 800e28c:	0800e7c9 	.word	0x0800e7c9
 800e290:	0800e7df 	.word	0x0800e7df
 800e294:	0800e7df 	.word	0x0800e7df
 800e298:	0800e7df 	.word	0x0800e7df
 800e29c:	0800e7df 	.word	0x0800e7df
 800e2a0:	0800e7df 	.word	0x0800e7df
 800e2a4:	0800e7df 	.word	0x0800e7df
 800e2a8:	0800e7df 	.word	0x0800e7df
 800e2ac:	0800e7df 	.word	0x0800e7df
 800e2b0:	0800e7df 	.word	0x0800e7df
 800e2b4:	0800e7df 	.word	0x0800e7df
 800e2b8:	0800e7df 	.word	0x0800e7df
 800e2bc:	0800e7df 	.word	0x0800e7df
 800e2c0:	0800e7df 	.word	0x0800e7df
 800e2c4:	0800e7df 	.word	0x0800e7df
 800e2c8:	0800e7df 	.word	0x0800e7df
 800e2cc:	0800e7df 	.word	0x0800e7df
 800e2d0:	0800e7b9 	.word	0x0800e7b9
 800e2d4:	0800e7c9 	.word	0x0800e7c9
 800e2d8:	0800e7c1 	.word	0x0800e7c1
 800e2dc:	0800e7df 	.word	0x0800e7df
 800e2e0:	0800e7df 	.word	0x0800e7df
 800e2e4:	0800e7c9 	.word	0x0800e7c9
                        case EV_COMMAND_COMPLETE:
                                if(!hcibuf[5]) { // Check if command succeeded
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	f040 826c 	bne.w	800e7cc <_ZN3BTD14HCI_event_taskEv+0x618>
                                        hci_set_flag(HCI_FLAG_CMD_COMPLETE); // Set command complete flag
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e2fa:	f043 0301 	orr.w	r3, r3, #1
 800e2fe:	b29a      	uxth	r2, r3
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        if((hcibuf[3] == 0x01) && (hcibuf[4] == 0x10)) { // Parameters from read local version information
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e30c:	2b01      	cmp	r3, #1
 800e30e:	d114      	bne.n	800e33a <_ZN3BTD14HCI_event_taskEv+0x186>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800e316:	2b10      	cmp	r3, #16
 800e318:	d10f      	bne.n	800e33a <_ZN3BTD14HCI_event_taskEv+0x186>
                                                hci_version = hcibuf[6]; // Used to check if it supports 2.0+EDR - see http://www.bluetooth.org/Technical/AssignedNumbers/hci.htm
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f893 208f 	ldrb.w	r2, [r3, #143]	; 0x8f
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                                if(!hci_check_flag(HCI_FLAG_READ_VERSION)) {
                                                        Notify(PSTR("\r\nHCI version: "), 0x80);
                                                        D_PrintHex<uint8_t > (hci_version, 0x80);
                                                }
#endif
                                                hci_set_flag(HCI_FLAG_READ_VERSION);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e32c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e330:	b29a      	uxth	r2, r3
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800e338:	e059      	b.n	800e3ee <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x04) && (hcibuf[4] == 0x10)) { // Parameters from read local extended features
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e340:	2b04      	cmp	r3, #4
 800e342:	d12a      	bne.n	800e39a <_ZN3BTD14HCI_event_taskEv+0x1e6>
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800e34a:	2b10      	cmp	r3, #16
 800e34c:	d125      	bne.n	800e39a <_ZN3BTD14HCI_event_taskEv+0x1e6>
                                                if(!hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e354:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d114      	bne.n	800e386 <_ZN3BTD14HCI_event_taskEv+0x1d2>
                                                        for(uint8_t i = 0; i < 8; i++) {
                                                                Notify(PSTR(" "), 0x80);
                                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                                        }
#endif
                                                        if(hcibuf[6] == 0) { // Page 0
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800e362:	2b00      	cmp	r3, #0
 800e364:	d10f      	bne.n	800e386 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
#endif
                                                                if(hcibuf[8 + 6] & (1U << 3)) {
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800e36c:	f003 0308 	and.w	r3, r3, #8
 800e370:	2b00      	cmp	r3, #0
 800e372:	d004      	beq.n	800e37e <_ZN3BTD14HCI_event_taskEv+0x1ca>
                                                                        simple_pairing_supported = true;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2201      	movs	r2, #1
 800e378:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800e37c:	e003      	b.n	800e386 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("supports"), 0x80);
#endif
                                                                } else {
                                                                        simple_pairing_supported = false;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2200      	movs	r2, #0
 800e382:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
                                                                Notify(PSTR(" secure simple pairing (host support)"), 0x80);
#endif
                                                        }
                                                }

                                                hci_set_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e38c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e390:	b29a      	uxth	r2, r3
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800e398:	e029      	b.n	800e3ee <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x09) && (hcibuf[4] == 0x10)) { // Parameters from read local bluetooth address
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e3a0:	2b09      	cmp	r3, #9
 800e3a2:	f040 8213 	bne.w	800e7cc <_ZN3BTD14HCI_event_taskEv+0x618>
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800e3ac:	2b10      	cmp	r3, #16
 800e3ae:	f040 820d 	bne.w	800e7cc <_ZN3BTD14HCI_event_taskEv+0x618>
                                                for(uint8_t i = 0; i < 6; i++)
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	75fb      	strb	r3, [r7, #23]
 800e3b6:	7dfb      	ldrb	r3, [r7, #23]
 800e3b8:	2b05      	cmp	r3, #5
 800e3ba:	d80e      	bhi.n	800e3da <_ZN3BTD14HCI_event_taskEv+0x226>
                                                        my_bdaddr[i] = hcibuf[6 + i];
 800e3bc:	7dfb      	ldrb	r3, [r7, #23]
 800e3be:	1d9a      	adds	r2, r3, #6
 800e3c0:	7dfb      	ldrb	r3, [r7, #23]
 800e3c2:	6879      	ldr	r1, [r7, #4]
 800e3c4:	440a      	add	r2, r1
 800e3c6:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e3ca:	687a      	ldr	r2, [r7, #4]
 800e3cc:	4413      	add	r3, r2
 800e3ce:	460a      	mov	r2, r1
 800e3d0:	751a      	strb	r2, [r3, #20]
                                                for(uint8_t i = 0; i < 6; i++)
 800e3d2:	7dfb      	ldrb	r3, [r7, #23]
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	75fb      	strb	r3, [r7, #23]
 800e3d8:	e7ed      	b.n	800e3b6 <_ZN3BTD14HCI_event_taskEv+0x202>
                                                hci_set_flag(HCI_FLAG_READ_BDADDR);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e3e0:	f043 0320 	orr.w	r3, r3, #32
 800e3e4:	b29a      	uxth	r2, r3
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        }
                                }
                                break;
 800e3ec:	e1ee      	b.n	800e7cc <_ZN3BTD14HCI_event_taskEv+0x618>
 800e3ee:	e1ed      	b.n	800e7cc <_ZN3BTD14HCI_event_taskEv+0x618>
#endif
                                }
                                break;

                        case EV_INQUIRY_COMPLETE:
                                if(inquiry_counter >= 5 && (pairWithWii || pairWithHIDDevice)) {
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800e3f6:	2b04      	cmp	r3, #4
 800e3f8:	d921      	bls.n	800e43e <_ZN3BTD14HCI_event_taskEv+0x28a>
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e400:	2b00      	cmp	r3, #0
 800e402:	d104      	bne.n	800e40e <_ZN3BTD14HCI_event_taskEv+0x25a>
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d017      	beq.n	800e43e <_ZN3BTD14HCI_event_taskEv+0x28a>
                                        inquiry_counter = 0;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2200      	movs	r2, #0
 800e412:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nCouldn't find Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nCouldn't find HID device"), 0x80);
#endif
                                        connectToWii = false;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2200      	movs	r2, #0
 800e41a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        pairWithWii = false;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2200      	movs	r2, #0
 800e422:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                                        connectToHIDDevice = false;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2200      	movs	r2, #0
 800e42a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                        pairWithHIDDevice = false;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	2200      	movs	r2, #0
 800e432:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                        hci_state = HCI_SCANNING_STATE;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	220a      	movs	r2, #10
 800e43a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                }
                                inquiry_counter++;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800e444:	3301      	adds	r3, #1
 800e446:	b2da      	uxtb	r2, r3
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                break;
 800e44e:	e1c6      	b.n	800e7de <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_INQUIRY_RESULT:
                                if(hcibuf[2]) { // Check that there is more than zero responses
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e456:	2b00      	cmp	r3, #0
 800e458:	f000 81ba 	beq.w	800e7d0 <_ZN3BTD14HCI_event_taskEv+0x61c>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nNumber of responses: "), 0x80);
                                        Notify(hcibuf[2], 0x80);
#endif
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800e45c:	2300      	movs	r3, #0
 800e45e:	75bb      	strb	r3, [r7, #22]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e466:	7dba      	ldrb	r2, [r7, #22]
 800e468:	429a      	cmp	r2, r3
 800e46a:	f080 81b1 	bcs.w	800e7d0 <_ZN3BTD14HCI_event_taskEv+0x61c>
                                                uint8_t offset = 8 * hcibuf[2] + 3 * i;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e474:	00db      	lsls	r3, r3, #3
 800e476:	b2da      	uxtb	r2, r3
 800e478:	7dbb      	ldrb	r3, [r7, #22]
 800e47a:	4619      	mov	r1, r3
 800e47c:	0049      	lsls	r1, r1, #1
 800e47e:	440b      	add	r3, r1
 800e480:	b2db      	uxtb	r3, r3
 800e482:	4413      	add	r3, r2
 800e484:	73bb      	strb	r3, [r7, #14]

                                                for(uint8_t j = 0; j < 3; j++)
 800e486:	2300      	movs	r3, #0
 800e488:	757b      	strb	r3, [r7, #21]
 800e48a:	7d7b      	ldrb	r3, [r7, #21]
 800e48c:	2b02      	cmp	r3, #2
 800e48e:	d811      	bhi.n	800e4b4 <_ZN3BTD14HCI_event_taskEv+0x300>
                                                        classOfDevice[j] = hcibuf[j + 4 + offset];
 800e490:	7d7b      	ldrb	r3, [r7, #21]
 800e492:	1d1a      	adds	r2, r3, #4
 800e494:	7bbb      	ldrb	r3, [r7, #14]
 800e496:	441a      	add	r2, r3
 800e498:	7d7b      	ldrb	r3, [r7, #21]
 800e49a:	6879      	ldr	r1, [r7, #4]
 800e49c:	440a      	add	r2, r1
 800e49e:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e4a2:	687a      	ldr	r2, [r7, #4]
 800e4a4:	4413      	add	r3, r2
 800e4a6:	460a      	mov	r2, r1
 800e4a8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                                for(uint8_t j = 0; j < 3; j++)
 800e4ac:	7d7b      	ldrb	r3, [r7, #21]
 800e4ae:	3301      	adds	r3, #1
 800e4b0:	757b      	strb	r3, [r7, #21]
 800e4b2:	e7ea      	b.n	800e48a <_ZN3BTD14HCI_event_taskEv+0x2d6>
                                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                                Notify(PSTR(" "), 0x80);
                                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif

                                                if(pairWithWii && classOfDevice[2] == 0x00 && (classOfDevice[1] == 0x05) && (classOfDevice[0] & 0x0C)) { // See http://wiibrew.org/wiki/Wiimote#SDP_information
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d038      	beq.n	800e530 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d133      	bne.n	800e530 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800e4ce:	2b05      	cmp	r3, #5
 800e4d0:	d12e      	bne.n	800e530 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800e4d8:	f003 030c 	and.w	r3, r3, #12
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d027      	beq.n	800e530 <_ZN3BTD14HCI_event_taskEv+0x37c>
                                                        checkRemoteName = true; // Check remote name to distinguish between the different controllers
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2201      	movs	r2, #1
 800e4e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

                                                        for(uint8_t j = 0; j < 6; j++)
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	753b      	strb	r3, [r7, #20]
 800e4ec:	7d3b      	ldrb	r3, [r7, #20]
 800e4ee:	2b05      	cmp	r3, #5
 800e4f0:	d814      	bhi.n	800e51c <_ZN3BTD14HCI_event_taskEv+0x368>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800e4f2:	7d3b      	ldrb	r3, [r7, #20]
 800e4f4:	1cd9      	adds	r1, r3, #3
 800e4f6:	7dba      	ldrb	r2, [r7, #22]
 800e4f8:	4613      	mov	r3, r2
 800e4fa:	005b      	lsls	r3, r3, #1
 800e4fc:	4413      	add	r3, r2
 800e4fe:	005b      	lsls	r3, r3, #1
 800e500:	18ca      	adds	r2, r1, r3
 800e502:	7d3b      	ldrb	r3, [r7, #20]
 800e504:	6879      	ldr	r1, [r7, #4]
 800e506:	440a      	add	r2, r1
 800e508:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e50c:	687a      	ldr	r2, [r7, #4]
 800e50e:	4413      	add	r3, r2
 800e510:	460a      	mov	r2, r1
 800e512:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800e514:	7d3b      	ldrb	r3, [r7, #20]
 800e516:	3301      	adds	r3, #1
 800e518:	753b      	strb	r3, [r7, #20]
 800e51a:	e7e7      	b.n	800e4ec <_ZN3BTD14HCI_event_taskEv+0x338>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e526:	b29a      	uxth	r2, r3
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800e52e:	e03a      	b.n	800e5a6 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                                } else if(pairWithHIDDevice && (classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad - see: http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e536:	2b00      	cmp	r3, #0
 800e538:	d031      	beq.n	800e59e <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800e540:	f003 030f 	and.w	r3, r3, #15
 800e544:	2b05      	cmp	r3, #5
 800e546:	d12a      	bne.n	800e59e <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800e54e:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800e552:	2b00      	cmp	r3, #0
 800e554:	d023      	beq.n	800e59e <_ZN3BTD14HCI_event_taskEv+0x3ea>
                                                        if(classOfDevice[0] & 0x40)
                                                                Notify(PSTR("\r\nKeyboard found"), 0x80);
                                                        if(classOfDevice[0] & 0x08)
                                                                Notify(PSTR("\r\nGamepad found"), 0x80);
#endif
                                                        for(uint8_t j = 0; j < 6; j++)
 800e556:	2300      	movs	r3, #0
 800e558:	74fb      	strb	r3, [r7, #19]
 800e55a:	7cfb      	ldrb	r3, [r7, #19]
 800e55c:	2b05      	cmp	r3, #5
 800e55e:	d814      	bhi.n	800e58a <_ZN3BTD14HCI_event_taskEv+0x3d6>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800e560:	7cfb      	ldrb	r3, [r7, #19]
 800e562:	1cd9      	adds	r1, r3, #3
 800e564:	7dba      	ldrb	r2, [r7, #22]
 800e566:	4613      	mov	r3, r2
 800e568:	005b      	lsls	r3, r3, #1
 800e56a:	4413      	add	r3, r2
 800e56c:	005b      	lsls	r3, r3, #1
 800e56e:	18ca      	adds	r2, r1, r3
 800e570:	7cfb      	ldrb	r3, [r7, #19]
 800e572:	6879      	ldr	r1, [r7, #4]
 800e574:	440a      	add	r2, r1
 800e576:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e57a:	687a      	ldr	r2, [r7, #4]
 800e57c:	4413      	add	r3, r2
 800e57e:	460a      	mov	r2, r1
 800e580:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800e582:	7cfb      	ldrb	r3, [r7, #19]
 800e584:	3301      	adds	r3, #1
 800e586:	74fb      	strb	r3, [r7, #19]
 800e588:	e7e7      	b.n	800e55a <_ZN3BTD14HCI_event_taskEv+0x3a6>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e594:	b29a      	uxth	r2, r3
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800e59c:	e003      	b.n	800e5a6 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800e59e:	7dbb      	ldrb	r3, [r7, #22]
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	75bb      	strb	r3, [r7, #22]
 800e5a4:	e75c      	b.n	800e460 <_ZN3BTD14HCI_event_taskEv+0x2ac>
                                                }
                                        }
                                }
                                break;
 800e5a6:	e113      	b.n	800e7d0 <_ZN3BTD14HCI_event_taskEv+0x61c>

                        case EV_CONNECT_COMPLETE:
                                hci_set_flag(HCI_FLAG_CONNECT_EVENT);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e5ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e5b2:	b29a      	uxth	r2, r3
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                if(!hcibuf[2]) { // Check if connected OK
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d11a      	bne.n	800e5fa <_ZN3BTD14HCI_event_taskEv+0x446>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nConnection established"), 0x80);
#endif
                                        hci_handle = hcibuf[3] | ((hcibuf[4] & 0x0F) << 8); // Store the handle for the ACL connection
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e5ca:	b21a      	sxth	r2, r3
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800e5d2:	021b      	lsls	r3, r3, #8
 800e5d4:	b21b      	sxth	r3, r3
 800e5d6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800e5da:	b21b      	sxth	r3, r3
 800e5dc:	4313      	orrs	r3, r2
 800e5de:	b21b      	sxth	r3, r3
 800e5e0:	b29a      	uxth	r2, r3
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	835a      	strh	r2, [r3, #26]
                                        hci_set_flag(HCI_FLAG_CONNECT_COMPLETE); // Set connection complete flag
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e5ec:	f043 0302 	orr.w	r3, r3, #2
 800e5f0:	b29a      	uxth	r2, r3
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                }
                                break;
 800e5f8:	e0f1      	b.n	800e7de <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2206      	movs	r2, #6
 800e5fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800e602:	e0ec      	b.n	800e7de <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_DISCONNECT_COMPLETE:
                                if(!hcibuf[2]) { // Check if disconnected OK
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	f040 80e2 	bne.w	800e7d4 <_ZN3BTD14HCI_event_taskEv+0x620>
                                        hci_set_flag(HCI_FLAG_DISCONNECT_COMPLETE); // Set disconnect command complete flag
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e616:	f043 0304 	orr.w	r3, r3, #4
 800e61a:	b29a      	uxth	r2, r3
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE); // Clear connection complete flag
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e628:	f023 0302 	bic.w	r3, r3, #2
 800e62c:	b29a      	uxth	r2, r3
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800e634:	e0ce      	b.n	800e7d4 <_ZN3BTD14HCI_event_taskEv+0x620>

                        case EV_REMOTE_NAME_COMPLETE:
                                if(!hcibuf[2]) { // Check if reading is OK
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	f040 80cb 	bne.w	800e7d8 <_ZN3BTD14HCI_event_taskEv+0x624>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800e642:	2300      	movs	r3, #0
 800e644:	74bb      	strb	r3, [r7, #18]
 800e646:	7cbb      	ldrb	r3, [r7, #18]
 800e648:	2b1d      	cmp	r3, #29
 800e64a:	d818      	bhi.n	800e67e <_ZN3BTD14HCI_event_taskEv+0x4ca>
                                                remote_name[i] = hcibuf[9 + i];
 800e64c:	7cbb      	ldrb	r3, [r7, #18]
 800e64e:	f103 0209 	add.w	r2, r3, #9
 800e652:	7cbb      	ldrb	r3, [r7, #18]
 800e654:	6879      	ldr	r1, [r7, #4]
 800e656:	440a      	add	r2, r1
 800e658:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	4413      	add	r3, r2
 800e660:	460a      	mov	r2, r1
 800e662:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                                                if(remote_name[i] == '\0') // End of string
 800e666:	7cbb      	ldrb	r3, [r7, #18]
 800e668:	687a      	ldr	r2, [r7, #4]
 800e66a:	4413      	add	r3, r2
 800e66c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800e670:	2b00      	cmp	r3, #0
 800e672:	d003      	beq.n	800e67c <_ZN3BTD14HCI_event_taskEv+0x4c8>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800e674:	7cbb      	ldrb	r3, [r7, #18]
 800e676:	3301      	adds	r3, #1
 800e678:	74bb      	strb	r3, [r7, #18]
 800e67a:	e7e4      	b.n	800e646 <_ZN3BTD14HCI_event_taskEv+0x492>
                                                        break;
 800e67c:	bf00      	nop
                                        }
                                        // TODO: Always set '\0' in remote name!
                                        hci_set_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e684:	f043 0308 	orr.w	r3, r3, #8
 800e688:	b29a      	uxth	r2, r3
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800e690:	e0a2      	b.n	800e7d8 <_ZN3BTD14HCI_event_taskEv+0x624>

                        case EV_INCOMING_CONNECT:
                                for(uint8_t i = 0; i < 6; i++)
 800e692:	2300      	movs	r3, #0
 800e694:	747b      	strb	r3, [r7, #17]
 800e696:	7c7b      	ldrb	r3, [r7, #17]
 800e698:	2b05      	cmp	r3, #5
 800e69a:	d80e      	bhi.n	800e6ba <_ZN3BTD14HCI_event_taskEv+0x506>
                                        disc_bdaddr[i] = hcibuf[i + 2];
 800e69c:	7c7b      	ldrb	r3, [r7, #17]
 800e69e:	1c9a      	adds	r2, r3, #2
 800e6a0:	7c7b      	ldrb	r3, [r7, #17]
 800e6a2:	6879      	ldr	r1, [r7, #4]
 800e6a4:	440a      	add	r2, r1
 800e6a6:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e6aa:	687a      	ldr	r2, [r7, #4]
 800e6ac:	4413      	add	r3, r2
 800e6ae:	460a      	mov	r2, r1
 800e6b0:	771a      	strb	r2, [r3, #28]
                                for(uint8_t i = 0; i < 6; i++)
 800e6b2:	7c7b      	ldrb	r3, [r7, #17]
 800e6b4:	3301      	adds	r3, #1
 800e6b6:	747b      	strb	r3, [r7, #17]
 800e6b8:	e7ed      	b.n	800e696 <_ZN3BTD14HCI_event_taskEv+0x4e2>

                                for(uint8_t i = 0; i < 3; i++)
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	743b      	strb	r3, [r7, #16]
 800e6be:	7c3b      	ldrb	r3, [r7, #16]
 800e6c0:	2b02      	cmp	r3, #2
 800e6c2:	d810      	bhi.n	800e6e6 <_ZN3BTD14HCI_event_taskEv+0x532>
                                        classOfDevice[i] = hcibuf[i + 8];
 800e6c4:	7c3b      	ldrb	r3, [r7, #16]
 800e6c6:	f103 0208 	add.w	r2, r3, #8
 800e6ca:	7c3b      	ldrb	r3, [r7, #16]
 800e6cc:	6879      	ldr	r1, [r7, #4]
 800e6ce:	440a      	add	r2, r1
 800e6d0:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e6d4:	687a      	ldr	r2, [r7, #4]
 800e6d6:	4413      	add	r3, r2
 800e6d8:	460a      	mov	r2, r1
 800e6da:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                for(uint8_t i = 0; i < 3; i++)
 800e6de:	7c3b      	ldrb	r3, [r7, #16]
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	743b      	strb	r3, [r7, #16]
 800e6e4:	e7eb      	b.n	800e6be <_ZN3BTD14HCI_event_taskEv+0x50a>

                                if((classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800e6ec:	f003 030f 	and.w	r3, r3, #15
 800e6f0:	2b05      	cmp	r3, #5
 800e6f2:	d10a      	bne.n	800e70a <_ZN3BTD14HCI_event_taskEv+0x556>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800e6fa:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d003      	beq.n	800e70a <_ZN3BTD14HCI_event_taskEv+0x556>
                                        if(classOfDevice[0] & 0x40)
                                                Notify(PSTR("\r\nKeyboard is connecting"), 0x80);
                                        if(classOfDevice[0] & 0x08)
                                                Notify(PSTR("\r\nGamepad is connecting"), 0x80);
#endif
                                        incomingHIDDevice = true;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2201      	movs	r2, #1
 800e706:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif
                                hci_set_flag(HCI_FLAG_INCOMING_REQUEST);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e710:	f043 0310 	orr.w	r3, r3, #16
 800e714:	b29a      	uxth	r2, r3
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                break;
 800e71c:	e05f      	b.n	800e7de <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_PIN_CODE_REQUEST:
                                if(pairWithWii) {
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e724:	2b00      	cmp	r3, #0
 800e726:	d003      	beq.n	800e730 <_ZN3BTD14HCI_event_taskEv+0x57c>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPairing with Wiimote"), 0x80);
#endif
                                        hci_pin_code_request_reply();
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f000 feec 	bl	800f506 <_ZN3BTD26hci_pin_code_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
#endif
                                        hci_pin_code_negative_request_reply();
                                }
                                break;
 800e72e:	e056      	b.n	800e7de <_ZN3BTD14HCI_event_taskEv+0x62a>
                                } else if(btdPin != NULL) {
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	691b      	ldr	r3, [r3, #16]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d003      	beq.n	800e740 <_ZN3BTD14HCI_event_taskEv+0x58c>
                                        hci_pin_code_request_reply();
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	f000 fee4 	bl	800f506 <_ZN3BTD26hci_pin_code_request_replyEv>
                                break;
 800e73e:	e04e      	b.n	800e7de <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_pin_code_negative_request_reply();
 800e740:	6878      	ldr	r0, [r7, #4]
 800e742:	f000 ff93 	bl	800f66c <_ZN3BTD35hci_pin_code_negative_request_replyEv>
                                break;
 800e746:	e04a      	b.n	800e7de <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_LINK_KEY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived Key Request"), 0x80);
#endif
                                hci_link_key_request_negative_reply();
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f000 ffca 	bl	800f6e2 <_ZN3BTD35hci_link_key_request_negative_replyEv>
                                break;
 800e74e:	e046      	b.n	800e7de <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_AUTHENTICATION_COMPLETE:
                                if(!hcibuf[2]) { // Check if pairing was successful
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e756:	2b00      	cmp	r3, #0
 800e758:	d123      	bne.n	800e7a2 <_ZN3BTD14HCI_event_taskEv+0x5ee>
                                        if(pairWithWii && !connectToWii) {
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e760:	2b00      	cmp	r3, #0
 800e762:	d00c      	beq.n	800e77e <_ZN3BTD14HCI_event_taskEv+0x5ca>
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e76a:	f083 0301 	eor.w	r3, r3, #1
 800e76e:	b2db      	uxtb	r3, r3
 800e770:	2b00      	cmp	r3, #0
 800e772:	d004      	beq.n	800e77e <_ZN3BTD14HCI_event_taskEv+0x5ca>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nPairing successful with Wiimote"), 0x80);
#endif
                                                connectToWii = true; // Used to indicate to the Wii service, that it should connect to this device
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2201      	movs	r2, #1
 800e778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                        hci_disconnect(hci_handle);
                                        hci_state = HCI_DISCONNECT_STATE;
                                }
                                break;
 800e77c:	e02e      	b.n	800e7dc <_ZN3BTD14HCI_event_taskEv+0x628>
                                        } else if(pairWithHIDDevice && !connectToHIDDevice) {
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e784:	2b00      	cmp	r3, #0
 800e786:	d029      	beq.n	800e7dc <_ZN3BTD14HCI_event_taskEv+0x628>
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e78e:	f083 0301 	eor.w	r3, r3, #1
 800e792:	b2db      	uxtb	r3, r3
 800e794:	2b00      	cmp	r3, #0
 800e796:	d021      	beq.n	800e7dc <_ZN3BTD14HCI_event_taskEv+0x628>
                                                connectToHIDDevice = true; // Used to indicate to the BTHID service, that it should connect to this device
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2201      	movs	r2, #1
 800e79c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                break;
 800e7a0:	e01c      	b.n	800e7dc <_ZN3BTD14HCI_event_taskEv+0x628>
                                        hci_disconnect(hci_handle);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	8b5b      	ldrh	r3, [r3, #26]
 800e7a6:	4619      	mov	r1, r3
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f001 f882 	bl	800f8b2 <_ZN3BTD14hci_disconnectEt>
                                        hci_state = HCI_DISCONNECT_STATE;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2210      	movs	r2, #16
 800e7b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800e7b6:	e011      	b.n	800e7dc <_ZN3BTD14HCI_event_taskEv+0x628>

                        case EV_IO_CAPABILITY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived IO Capability Request"), 0x80);
#endif
                                hci_io_capability_request_reply();
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f000 ffcd 	bl	800f758 <_ZN3BTD31hci_io_capability_request_replyEv>
                                break;
 800e7be:	e00e      	b.n	800e7de <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                }
#endif
#endif
                                // Simply confirm the connection, as the host has no "NoInputNoOutput" capabilities
                                hci_user_confirmation_request_reply();
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f001 f810 	bl	800f7e6 <_ZN3BTD35hci_user_confirmation_request_replyEv>
                                break;
 800e7c6:	e00a      	b.n	800e7de <_ZN3BTD14HCI_event_taskEv+0x62a>
                                if(hcibuf[0] != 0x00) {
                                        Notify(PSTR("\r\nIgnore HCI Event: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[0], 0x80);
                                }
#endif
                                break;
 800e7c8:	bf00      	nop
 800e7ca:	e008      	b.n	800e7de <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800e7cc:	bf00      	nop
 800e7ce:	e006      	b.n	800e7de <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800e7d0:	bf00      	nop
 800e7d2:	e004      	b.n	800e7de <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800e7d4:	bf00      	nop
 800e7d6:	e002      	b.n	800e7de <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800e7d8:	bf00      	nop
 800e7da:	e000      	b.n	800e7de <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800e7dc:	bf00      	nop
        else {
                Notify(PSTR("\r\nHCI event error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
}
 800e7de:	bf00      	nop
 800e7e0:	3718      	adds	r7, #24
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bdb0      	pop	{r4, r5, r7, pc}
 800e7e6:	bf00      	nop

0800e7e8 <_ZN3BTD8HCI_taskEv>:

/* Poll Bluetooth and print result */
void BTD::HCI_task() {
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b082      	sub	sp, #8
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
        switch(hci_state) {
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e7f6:	2b13      	cmp	r3, #19
 800e7f8:	f200 82ef 	bhi.w	800edda <_ZN3BTD8HCI_taskEv+0x5f2>
 800e7fc:	a201      	add	r2, pc, #4	; (adr r2, 800e804 <_ZN3BTD8HCI_taskEv+0x1c>)
 800e7fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e802:	bf00      	nop
 800e804:	0800e855 	.word	0x0800e855
 800e808:	0800e88f 	.word	0x0800e88f
 800e80c:	0800e915 	.word	0x0800e915
 800e810:	0800e935 	.word	0x0800e935
 800e814:	0800e955 	.word	0x0800e955
 800e818:	0800e9a9 	.word	0x0800e9a9
 800e81c:	0800ea4f 	.word	0x0800ea4f
 800e820:	0800ea7d 	.word	0x0800ea7d
 800e824:	0800eab7 	.word	0x0800eab7
 800e828:	0800eadf 	.word	0x0800eadf
 800e82c:	0800eb15 	.word	0x0800eb15
 800e830:	0800eb73 	.word	0x0800eb73
 800e834:	0800ebb1 	.word	0x0800ebb1
 800e838:	0800ecd7 	.word	0x0800ecd7
 800e83c:	0800eddb 	.word	0x0800eddb
 800e840:	0800ed1d 	.word	0x0800ed1d
 800e844:	0800ed4b 	.word	0x0800ed4b
 800e848:	0800e9df 	.word	0x0800e9df
 800e84c:	0800ea15 	.word	0x0800ea15
 800e850:	0800ea35 	.word	0x0800ea35
                case HCI_INIT_STATE:
                        hci_counter++;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800e85a:	3301      	adds	r3, #1
 800e85c:	b29a      	uxth	r2, r3
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > hci_num_reset_loops) { // wait until we have looped x times to clear any old events
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800e870:	429a      	cmp	r2, r3
 800e872:	f240 82b4 	bls.w	800edde <_ZN3BTD8HCI_taskEv+0x5f6>
                                hci_reset();
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f000 fb7d 	bl	800ef76 <_ZN3BTD9hci_resetEv>
                                hci_state = HCI_RESET_STATE;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2201      	movs	r2, #1
 800e880:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2200      	movs	r2, #0
 800e888:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        }
                        break;
 800e88c:	e2a7      	b.n	800edde <_ZN3BTD8HCI_taskEv+0x5f6>

                case HCI_RESET_STATE:
                        hci_counter++;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800e894:	3301      	adds	r3, #1
 800e896:	b29a      	uxth	r2, r3
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e8a4:	f003 0301 	and.w	r3, r3, #1
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d00b      	beq.n	800e8c4 <_ZN3BTD8HCI_taskEv+0xdc>
                                hci_counter = 0;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Reset complete"), 0x80);
#endif
                                hci_state = HCI_CLASS_STATE;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2202      	movs	r2, #2
 800e8b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_write_class_of_device();
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f001 f830 	bl	800f922 <_ZN3BTD25hci_write_class_of_deviceEv>
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
#endif
                                hci_state = HCI_INIT_STATE;
                                hci_counter = 0;
                        }
                        break;
 800e8c2:	e28e      	b.n	800ede2 <_ZN3BTD8HCI_taskEv+0x5fa>
                        } else if(hci_counter > hci_num_reset_loops) {
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	f240 8286 	bls.w	800ede2 <_ZN3BTD8HCI_taskEv+0x5fa>
                                hci_num_reset_loops *= 10;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800e8dc:	461a      	mov	r2, r3
 800e8de:	0092      	lsls	r2, r2, #2
 800e8e0:	4413      	add	r3, r2
 800e8e2:	005b      	lsls	r3, r3, #1
 800e8e4:	b29a      	uxth	r2, r3
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                if(hci_num_reset_loops > 2000)
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800e8f2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800e8f6:	d904      	bls.n	800e902 <_ZN3BTD8HCI_taskEv+0x11a>
                                        hci_num_reset_loops = 2000;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e8fe:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                hci_state = HCI_INIT_STATE;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2200      	movs	r2, #0
 800e906:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2200      	movs	r2, #0
 800e90e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        break;
 800e912:	e266      	b.n	800ede2 <_ZN3BTD8HCI_taskEv+0x5fa>

                case HCI_CLASS_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e91a:	f003 0301 	and.w	r3, r3, #1
 800e91e:	2b00      	cmp	r3, #0
 800e920:	f000 8261 	beq.w	800ede6 <_ZN3BTD8HCI_taskEv+0x5fe>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWrite class of device"), 0x80);
#endif
                                hci_state = HCI_BDADDR_STATE;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2203      	movs	r2, #3
 800e928:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_read_bdaddr();
 800e92c:	6878      	ldr	r0, [r7, #4]
 800e92e:	f000 fb72 	bl	800f016 <_ZN3BTD15hci_read_bdaddrEv>
                        }
                        break;
 800e932:	e258      	b.n	800ede6 <_ZN3BTD8HCI_taskEv+0x5fe>

                case HCI_BDADDR_STATE:
                        if(hci_check_flag(HCI_FLAG_READ_BDADDR)) {
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e93a:	f003 0320 	and.w	r3, r3, #32
 800e93e:	2b00      	cmp	r3, #0
 800e940:	f000 8253 	beq.w	800edea <_ZN3BTD8HCI_taskEv+0x602>
                                        D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                                hci_read_local_version_information();
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f000 fb8a 	bl	800f05e <_ZN3BTD34hci_read_local_version_informationEv>
                                hci_state = HCI_LOCAL_VERSION_STATE;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	2204      	movs	r2, #4
 800e94e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800e952:	e24a      	b.n	800edea <_ZN3BTD8HCI_taskEv+0x602>

                case HCI_LOCAL_VERSION_STATE: // The local version is used by the PS3BT class
                        if(hci_check_flag(HCI_FLAG_READ_VERSION)) {
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e95a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e95e:	2b00      	cmp	r3, #0
 800e960:	f000 8245 	beq.w	800edee <_ZN3BTD8HCI_taskEv+0x606>
                                if(btdName != NULL) {
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	68db      	ldr	r3, [r3, #12]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d00a      	beq.n	800e982 <_ZN3BTD8HCI_taskEv+0x19a>
                                        hci_write_local_name(btdName);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	68db      	ldr	r3, [r3, #12]
 800e970:	4619      	mov	r1, r3
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f000 fc5d 	bl	800f232 <_ZN3BTD20hci_write_local_nameEPKc>
                                        hci_state = HCI_WRITE_NAME_STATE;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2205      	movs	r2, #5
 800e97c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800e980:	e235      	b.n	800edee <_ZN3BTD8HCI_taskEv+0x606>
                                } else if(useSimplePairing) {
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d008      	beq.n	800e99e <_ZN3BTD8HCI_taskEv+0x1b6>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800e98c:	2100      	movs	r1, #0
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f000 fb89 	bl	800f0a6 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2211      	movs	r2, #17
 800e998:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800e99c:	e227      	b.n	800edee <_ZN3BTD8HCI_taskEv+0x606>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2206      	movs	r2, #6
 800e9a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800e9a6:	e222      	b.n	800edee <_ZN3BTD8HCI_taskEv+0x606>

                case HCI_WRITE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e9ae:	f003 0301 	and.w	r3, r3, #1
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	f000 821d 	beq.w	800edf2 <_ZN3BTD8HCI_taskEv+0x60a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nThe name was set to: "), 0x80);
                                NotifyStr(btdName, 0x80);
#endif
                                if(useSimplePairing) {
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d008      	beq.n	800e9d4 <_ZN3BTD8HCI_taskEv+0x1ec>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800e9c2:	2100      	movs	r1, #0
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f000 fb6e 	bl	800f0a6 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2211      	movs	r2, #17
 800e9ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800e9d2:	e20e      	b.n	800edf2 <_ZN3BTD8HCI_taskEv+0x60a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2206      	movs	r2, #6
 800e9d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800e9dc:	e209      	b.n	800edf2 <_ZN3BTD8HCI_taskEv+0x60a>

                case HCI_LOCAL_EXTENDED_FEATURES_STATE:
                        if(hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e9e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	f000 8204 	beq.w	800edf6 <_ZN3BTD8HCI_taskEv+0x60e>
                                if(simple_pairing_supported) {
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d008      	beq.n	800ea0a <_ZN3BTD8HCI_taskEv+0x222>
                                        hci_write_simple_pairing_mode(true);
 800e9f8:	2101      	movs	r1, #1
 800e9fa:	6878      	ldr	r0, [r7, #4]
 800e9fc:	f000 fc9d 	bl	800f33a <_ZN3BTD29hci_write_simple_pairing_modeEb>
                                        hci_state = HCI_WRITE_SIMPLE_PAIRING_STATE;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2212      	movs	r2, #18
 800ea04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800ea08:	e1f5      	b.n	800edf6 <_ZN3BTD8HCI_taskEv+0x60e>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2206      	movs	r2, #6
 800ea0e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800ea12:	e1f0      	b.n	800edf6 <_ZN3BTD8HCI_taskEv+0x60e>

                case HCI_WRITE_SIMPLE_PAIRING_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ea1a:	f003 0301 	and.w	r3, r3, #1
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	f000 81eb 	beq.w	800edfa <_ZN3BTD8HCI_taskEv+0x612>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSimple pairing was enabled"), 0x80);
#endif
                                hci_set_event_mask();
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f000 fc4d 	bl	800f2c4 <_ZN3BTD18hci_set_event_maskEv>
                                hci_state = HCI_SET_EVENT_MASK_STATE;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2213      	movs	r2, #19
 800ea2e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ea32:	e1e2      	b.n	800edfa <_ZN3BTD8HCI_taskEv+0x612>

                case HCI_SET_EVENT_MASK_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ea3a:	f003 0301 	and.w	r3, r3, #1
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	f000 81dd 	beq.w	800edfe <_ZN3BTD8HCI_taskEv+0x616>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSet event mask completed"), 0x80);
#endif
                                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2206      	movs	r2, #6
 800ea48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ea4c:	e1d7      	b.n	800edfe <_ZN3BTD8HCI_taskEv+0x616>

                case HCI_CHECK_DEVICE_SERVICE:
                        if(pairWithHIDDevice || pairWithWii) { // Check if it should try to connect to a Wiimote
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d104      	bne.n	800ea62 <_ZN3BTD8HCI_taskEv+0x27a>
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d007      	beq.n	800ea72 <_ZN3BTD8HCI_taskEv+0x28a>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nStarting inquiry\r\nPress 1 & 2 on the Wiimote\r\nOr press the SYNC button if you are using a Wii U Pro Controller or a Wii Balance Board"), 0x80);
                                else
                                        Notify(PSTR("\r\nPlease enable discovery of your device"), 0x80);
#endif
                                hci_inquiry();
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f000 fc8f 	bl	800f386 <_ZN3BTD11hci_inquiryEv>
                                hci_state = HCI_INQUIRY_STATE;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	2207      	movs	r2, #7
 800ea6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
                        break;
 800ea70:	e1d8      	b.n	800ee24 <_ZN3BTD8HCI_taskEv+0x63c>
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	220a      	movs	r2, #10
 800ea76:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800ea7a:	e1d3      	b.n	800ee24 <_ZN3BTD8HCI_taskEv+0x63c>

                case HCI_INQUIRY_STATE:
                        if(hci_check_flag(HCI_FLAG_DEVICE_FOUND)) {
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ea82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	f000 81bb 	beq.w	800ee02 <_ZN3BTD8HCI_taskEv+0x61a>
                                hci_inquiry_cancel(); // Stop inquiry
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f000 fcb2 	bl	800f3f6 <_ZN3BTD18hci_inquiry_cancelEv>
                                if(pairWithWii)
                                        Notify(PSTR("Wiimote"), 0x80);
                                else
                                        Notify(PSTR("device"), 0x80);
#endif
                                if(checkRemoteName) {
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d007      	beq.n	800eaac <_ZN3BTD8HCI_taskEv+0x2c4>
                                        hci_remote_name(); // We need to know the name to distinguish between the Wiimote, the new Wiimote with Motion Plus inside, a Wii U Pro Controller and a Wii Balance Board
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f000 fb74 	bl	800f18a <_ZN3BTD15hci_remote_nameEv>
                                        hci_state = HCI_REMOTE_NAME_STATE;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	220c      	movs	r2, #12
 800eaa6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
                        }
                        break;
 800eaaa:	e1aa      	b.n	800ee02 <_ZN3BTD8HCI_taskEv+0x61a>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2208      	movs	r2, #8
 800eab0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800eab4:	e1a5      	b.n	800ee02 <_ZN3BTD8HCI_taskEv+0x61a>

                case HCI_CONNECT_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eabc:	f003 0301 	and.w	r3, r3, #1
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	f000 81a0 	beq.w	800ee06 <_ZN3BTD8HCI_taskEv+0x61e>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nConnecting to Wiimote"), 0x80);
                                else
                                        Notify(PSTR("\r\nConnecting to HID device"), 0x80);
#endif
                                checkRemoteName = false;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2200      	movs	r2, #0
 800eaca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                                hci_connect();
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f000 fcac 	bl	800f42c <_ZN3BTD11hci_connectEv>
                                hci_state = HCI_CONNECTED_DEVICE_STATE;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2209      	movs	r2, #9
 800ead8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800eadc:	e193      	b.n	800ee06 <_ZN3BTD8HCI_taskEv+0x61e>

                case HCI_CONNECTED_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_EVENT)) {
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	f000 818e 	beq.w	800ee0a <_ZN3BTD8HCI_taskEv+0x622>
                                if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eaf4:	f003 0302 	and.w	r3, r3, #2
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d007      	beq.n	800eb0c <_ZN3BTD8HCI_taskEv+0x324>
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nConnected to Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nConnected to HID device"), 0x80);
#endif
                                        hci_authentication_request(); // This will start the pairing with the device
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f000 fead 	bl	800f85c <_ZN3BTD26hci_authentication_requestEv>
                                        hci_state = HCI_SCANNING_STATE;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	220a      	movs	r2, #10
 800eb06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
#endif
                                        hci_connect(); // Try to connect one more time
                                }
                        }
                        break;
 800eb0a:	e17e      	b.n	800ee0a <_ZN3BTD8HCI_taskEv+0x622>
                                        hci_connect(); // Try to connect one more time
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f000 fc8d 	bl	800f42c <_ZN3BTD11hci_connectEv>
                        break;
 800eb12:	e17a      	b.n	800ee0a <_ZN3BTD8HCI_taskEv+0x622>

                case HCI_SCANNING_STATE:
                        if(!connectToWii && !pairWithWii && !connectToHIDDevice && !pairWithHIDDevice) {
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eb1a:	f083 0301 	eor.w	r3, r3, #1
 800eb1e:	b2db      	uxtb	r3, r3
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	f000 8174 	beq.w	800ee0e <_ZN3BTD8HCI_taskEv+0x626>
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eb2c:	f083 0301 	eor.w	r3, r3, #1
 800eb30:	b2db      	uxtb	r3, r3
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	f000 816b 	beq.w	800ee0e <_ZN3BTD8HCI_taskEv+0x626>
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800eb3e:	f083 0301 	eor.w	r3, r3, #1
 800eb42:	b2db      	uxtb	r3, r3
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	f000 8162 	beq.w	800ee0e <_ZN3BTD8HCI_taskEv+0x626>
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800eb50:	f083 0301 	eor.w	r3, r3, #1
 800eb54:	b2db      	uxtb	r3, r3
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	f000 8159 	beq.w	800ee0e <_ZN3BTD8HCI_taskEv+0x626>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWait For Incoming Connection Request"), 0x80);
#endif
                                hci_write_scan_enable();
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f000 fa29 	bl	800efb4 <_ZN3BTD21hci_write_scan_enableEv>
                                waitingForConnection = true;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2201      	movs	r2, #1
 800eb66:	721a      	strb	r2, [r3, #8]
                                hci_state = HCI_CONNECT_IN_STATE;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	220b      	movs	r2, #11
 800eb6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800eb70:	e14d      	b.n	800ee0e <_ZN3BTD8HCI_taskEv+0x626>

                case HCI_CONNECT_IN_STATE:
                        if(hci_check_flag(HCI_FLAG_INCOMING_REQUEST)) {
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eb78:	f003 0310 	and.w	r3, r3, #16
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d00a      	beq.n	800eb96 <_ZN3BTD8HCI_taskEv+0x3ae>
                                waitingForConnection = false;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2200      	movs	r2, #0
 800eb84:	721a      	strb	r2, [r3, #8]
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nIncoming Connection Request"), 0x80);
#endif
                                hci_remote_name();
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f000 faff 	bl	800f18a <_ZN3BTD15hci_remote_nameEv>
                                hci_state = HCI_REMOTE_NAME_STATE;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	220c      	movs	r2, #12
 800eb90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
                                hci_state = HCI_DISCONNECT_STATE;
                        break;
 800eb94:	e13d      	b.n	800ee12 <_ZN3BTD8HCI_taskEv+0x62a>
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eb9c:	f003 0304 	and.w	r3, r3, #4
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	f000 8136 	beq.w	800ee12 <_ZN3BTD8HCI_taskEv+0x62a>
                                hci_state = HCI_DISCONNECT_STATE;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2210      	movs	r2, #16
 800ebaa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800ebae:	e130      	b.n	800ee12 <_ZN3BTD8HCI_taskEv+0x62a>

                case HCI_REMOTE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_REMOTE_NAME_COMPLETE)) {
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ebb6:	f003 0308 	and.w	r3, r3, #8
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	f000 812b 	beq.w	800ee16 <_ZN3BTD8HCI_taskEv+0x62e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nRemote Name: "), 0x80);
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
                                        Notifyc(remote_name[i], 0x80);
#endif
                                if(strncmp((const char*)remote_name, "Nintendo", 8) == 0) {
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	3322      	adds	r3, #34	; 0x22
 800ebc4:	2208      	movs	r2, #8
 800ebc6:	4999      	ldr	r1, [pc, #612]	; (800ee2c <_ZN3BTD8HCI_taskEv+0x644>)
 800ebc8:	4618      	mov	r0, r3
 800ebca:	f004 fe27 	bl	801381c <strncmp>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d147      	bne.n	800ec64 <_ZN3BTD8HCI_taskEv+0x47c>
                                        incomingWii = true;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2201      	movs	r2, #1
 800ebd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                                        motionPlusInside = false;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2200      	movs	r2, #0
 800ebe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                                        wiiUProController = false;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                                        pairWiiUsingSync = false;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2200      	movs	r2, #0
 800ebf0:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nWiimote is connecting"), 0x80);
#endif
                                        if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-TR", 22) == 0) {
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	3322      	adds	r3, #34	; 0x22
 800ebf8:	2216      	movs	r2, #22
 800ebfa:	498d      	ldr	r1, [pc, #564]	; (800ee30 <_ZN3BTD8HCI_taskEv+0x648>)
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f004 fe0d 	bl	801381c <strncmp>
 800ec02:	4603      	mov	r3, r0
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d104      	bne.n	800ec12 <_ZN3BTD8HCI_taskEv+0x42a>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" with Motion Plus Inside"), 0x80);
#endif
                                                motionPlusInside = true;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2201      	movs	r2, #1
 800ec0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec10:	e028      	b.n	800ec64 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-UC", 22) == 0) {
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	3322      	adds	r3, #34	; 0x22
 800ec16:	2216      	movs	r2, #22
 800ec18:	4986      	ldr	r1, [pc, #536]	; (800ee34 <_ZN3BTD8HCI_taskEv+0x64c>)
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f004 fdfe 	bl	801381c <strncmp>
 800ec20:	4603      	mov	r3, r0
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d110      	bne.n	800ec48 <_ZN3BTD8HCI_taskEv+0x460>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii U Pro Controller"), 0x80);
#endif
                                                wiiUProController = motionPlusInside = pairWiiUsingSync = true;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2201      	movs	r2, #1
 800ec2a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec46:	e00d      	b.n	800ec64 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-WBC-01", 19) == 0) {
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	3322      	adds	r3, #34	; 0x22
 800ec4c:	2213      	movs	r2, #19
 800ec4e:	497a      	ldr	r1, [pc, #488]	; (800ee38 <_ZN3BTD8HCI_taskEv+0x650>)
 800ec50:	4618      	mov	r0, r3
 800ec52:	f004 fde3 	bl	801381c <strncmp>
 800ec56:	4603      	mov	r3, r0
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d103      	bne.n	800ec64 <_ZN3BTD8HCI_taskEv+0x47c>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii Balance Board"), 0x80);
#endif
                                                pairWiiUsingSync = true;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2201      	movs	r2, #1
 800ec60:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
                                        }
                                }
                                if(classOfDevice[2] == 0 && classOfDevice[1] == 0x25 && classOfDevice[0] == 0x08 && strncmp((const char*)remote_name, "Wireless Controller", 19) == 0) {
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d117      	bne.n	800ec9e <_ZN3BTD8HCI_taskEv+0x4b6>
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800ec74:	2b25      	cmp	r3, #37	; 0x25
 800ec76:	d112      	bne.n	800ec9e <_ZN3BTD8HCI_taskEv+0x4b6>
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800ec7e:	2b08      	cmp	r3, #8
 800ec80:	d10d      	bne.n	800ec9e <_ZN3BTD8HCI_taskEv+0x4b6>
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	3322      	adds	r3, #34	; 0x22
 800ec86:	2213      	movs	r2, #19
 800ec88:	496c      	ldr	r1, [pc, #432]	; (800ee3c <_ZN3BTD8HCI_taskEv+0x654>)
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f004 fdc6 	bl	801381c <strncmp>
 800ec90:	4603      	mov	r3, r0
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d103      	bne.n	800ec9e <_ZN3BTD8HCI_taskEv+0x4b6>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPS4/PS5 controller is connecting"), 0x80);
#endif
                                        incomingPSController = true;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2201      	movs	r2, #1
 800ec9a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                                }
                                if((pairWithWii || pairWithHIDDevice) && checkRemoteName)
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d104      	bne.n	800ecb2 <_ZN3BTD8HCI_taskEv+0x4ca>
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d009      	beq.n	800ecc6 <_ZN3BTD8HCI_taskEv+0x4de>
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d004      	beq.n	800ecc6 <_ZN3BTD8HCI_taskEv+0x4de>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2208      	movs	r2, #8
 800ecc0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                else {
                                        hci_accept_connection();
                                        hci_state = HCI_CONNECTED_STATE;
                                }
                        }
                        break;
 800ecc4:	e0a7      	b.n	800ee16 <_ZN3BTD8HCI_taskEv+0x62e>
                                        hci_accept_connection();
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f000 fa17 	bl	800f0fa <_ZN3BTD21hci_accept_connectionEv>
                                        hci_state = HCI_CONNECTED_STATE;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	220d      	movs	r2, #13
 800ecd0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800ecd4:	e09f      	b.n	800ee16 <_ZN3BTD8HCI_taskEv+0x62e>

                case HCI_CONNECTED_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ecdc:	f003 0302 	and.w	r3, r3, #2
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	f000 809a 	beq.w	800ee1a <_ZN3BTD8HCI_taskEv+0x632>
                                        D_PrintHex<uint8_t > (disc_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (disc_bdaddr[0], 0x80);
#endif
                                if(incomingPSController)
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d003      	beq.n	800ecf8 <_ZN3BTD8HCI_taskEv+0x510>
                                        connectToHIDDevice = true; // We should always connect to the PS4/PS5 controller
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2201      	movs	r2, #1
 800ecf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

                                // Clear these flags for a new connection
                                l2capConnectionClaimed = false;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	725a      	strb	r2, [r3, #9]
                                sdpConnectionClaimed = false;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2200      	movs	r2, #0
 800ed02:	729a      	strb	r2, [r3, #10]
                                rfcommConnectionClaimed = false;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2200      	movs	r2, #0
 800ed08:	72da      	strb	r2, [r3, #11]

                                hci_event_flag = 0;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                hci_state = HCI_DONE_STATE;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	220f      	movs	r2, #15
 800ed16:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ed1a:	e07e      	b.n	800ee1a <_ZN3BTD8HCI_taskEv+0x632>

                case HCI_DONE_STATE:
                        hci_counter++;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ed22:	3301      	adds	r3, #1
 800ed24:	b29a      	uxth	r2, r3
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > 1000) { // Wait until we have looped 1000 times to make sure that the L2CAP connection has been started
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ed32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ed36:	d972      	bls.n	800ee1e <_ZN3BTD8HCI_taskEv+0x636>
                                hci_counter = 0;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                                hci_state = HCI_SCANNING_STATE;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	220a      	movs	r2, #10
 800ed44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ed48:	e069      	b.n	800ee1e <_ZN3BTD8HCI_taskEv+0x636>

                case HCI_DISCONNECT_STATE:
                        if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE)) {
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ed50:	f003 0304 	and.w	r3, r3, #4
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d064      	beq.n	800ee22 <_ZN3BTD8HCI_taskEv+0x63a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Disconnected from Device"), 0x80);
#endif
                                hci_event_flag = 0; // Clear all flags
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

                                // Reset all buffers
                                memset(hcibuf, 0, BULK_MAXPKTSIZE);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	3389      	adds	r3, #137	; 0x89
 800ed64:	2240      	movs	r2, #64	; 0x40
 800ed66:	2100      	movs	r1, #0
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f004 fd0b 	bl	8013784 <memset>
                                memset(l2capinbuf, 0, BULK_MAXPKTSIZE);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	33c9      	adds	r3, #201	; 0xc9
 800ed72:	2240      	movs	r2, #64	; 0x40
 800ed74:	2100      	movs	r1, #0
 800ed76:	4618      	mov	r0, r3
 800ed78:	f004 fd04 	bl	8013784 <memset>

                                connectToWii = incomingWii = pairWithWii = false;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2200      	movs	r2, #0
 800ed80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                connectToHIDDevice = incomingHIDDevice = pairWithHIDDevice = checkRemoteName = false;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                incomingPSController = false;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2200      	movs	r2, #0
 800edcc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

                                hci_state = HCI_SCANNING_STATE;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	220a      	movs	r2, #10
 800edd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800edd8:	e023      	b.n	800ee22 <_ZN3BTD8HCI_taskEv+0x63a>
                default:
                        break;
 800edda:	bf00      	nop
 800eddc:	e022      	b.n	800ee24 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800edde:	bf00      	nop
 800ede0:	e020      	b.n	800ee24 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ede2:	bf00      	nop
 800ede4:	e01e      	b.n	800ee24 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ede6:	bf00      	nop
 800ede8:	e01c      	b.n	800ee24 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800edea:	bf00      	nop
 800edec:	e01a      	b.n	800ee24 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800edee:	bf00      	nop
 800edf0:	e018      	b.n	800ee24 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800edf2:	bf00      	nop
 800edf4:	e016      	b.n	800ee24 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800edf6:	bf00      	nop
 800edf8:	e014      	b.n	800ee24 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800edfa:	bf00      	nop
 800edfc:	e012      	b.n	800ee24 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800edfe:	bf00      	nop
 800ee00:	e010      	b.n	800ee24 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ee02:	bf00      	nop
 800ee04:	e00e      	b.n	800ee24 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ee06:	bf00      	nop
 800ee08:	e00c      	b.n	800ee24 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ee0a:	bf00      	nop
 800ee0c:	e00a      	b.n	800ee24 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ee0e:	bf00      	nop
 800ee10:	e008      	b.n	800ee24 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ee12:	bf00      	nop
 800ee14:	e006      	b.n	800ee24 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ee16:	bf00      	nop
 800ee18:	e004      	b.n	800ee24 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ee1a:	bf00      	nop
 800ee1c:	e002      	b.n	800ee24 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ee1e:	bf00      	nop
 800ee20:	e000      	b.n	800ee24 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ee22:	bf00      	nop
        }
}
 800ee24:	bf00      	nop
 800ee26:	3708      	adds	r7, #8
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}
 800ee2c:	08013a58 	.word	0x08013a58
 800ee30:	08013a64 	.word	0x08013a64
 800ee34:	08013a7c 	.word	0x08013a7c
 800ee38:	08013a94 	.word	0x08013a94
 800ee3c:	08013aa8 	.word	0x08013aa8

0800ee40 <_ZN3BTD14ACL_event_taskEv>:

void BTD::ACL_event_task() {
 800ee40:	b5b0      	push	{r4, r5, r7, lr}
 800ee42:	b086      	sub	sp, #24
 800ee44:	af02      	add	r7, sp, #8
 800ee46:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE;
 800ee48:	2340      	movs	r3, #64	; 0x40
 800ee4a:	817b      	strh	r3, [r7, #10]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_DATAIN_PIPE ].epAddr, &length, l2capinbuf, pollInterval); // Input on endpoint 2
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f893 4057 	ldrb.w	r4, [r3, #87]	; 0x57
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	33c9      	adds	r3, #201	; 0xc9
 800ee60:	687a      	ldr	r2, [r7, #4]
 800ee62:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800ee66:	f107 050a 	add.w	r5, r7, #10
 800ee6a:	9201      	str	r2, [sp, #4]
 800ee6c:	9300      	str	r3, [sp, #0]
 800ee6e:	462b      	mov	r3, r5
 800ee70:	4622      	mov	r2, r4
 800ee72:	f003 f92c 	bl	80120ce <_ZN3USB10inTransferEhhPtPhh>
 800ee76:	4603      	mov	r3, r0
 800ee78:	737b      	strb	r3, [r7, #13]

        if(!rcode) { // Check for errors
 800ee7a:	7b7b      	ldrb	r3, [r7, #13]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d125      	bne.n	800eecc <_ZN3BTD14ACL_event_taskEv+0x8c>
                if(length > 0) { // Check if any data was read
 800ee80:	897b      	ldrh	r3, [r7, #10]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d022      	beq.n	800eecc <_ZN3BTD14ACL_event_taskEv+0x8c>
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800ee86:	2300      	movs	r3, #0
 800ee88:	73fb      	strb	r3, [r7, #15]
 800ee8a:	7bfb      	ldrb	r3, [r7, #15]
 800ee8c:	2b03      	cmp	r3, #3
 800ee8e:	d81d      	bhi.n	800eecc <_ZN3BTD14ACL_event_taskEv+0x8c>
                                if(btService[i])
 800ee90:	7bfb      	ldrb	r3, [r7, #15]
 800ee92:	687a      	ldr	r2, [r7, #4]
 800ee94:	3318      	adds	r3, #24
 800ee96:	009b      	lsls	r3, r3, #2
 800ee98:	4413      	add	r3, r2
 800ee9a:	685b      	ldr	r3, [r3, #4]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d011      	beq.n	800eec4 <_ZN3BTD14ACL_event_taskEv+0x84>
                                        btService[i]->ACLData(l2capinbuf);
 800eea0:	7bfb      	ldrb	r3, [r7, #15]
 800eea2:	687a      	ldr	r2, [r7, #4]
 800eea4:	3318      	adds	r3, #24
 800eea6:	009b      	lsls	r3, r3, #2
 800eea8:	4413      	add	r3, r2
 800eeaa:	6858      	ldr	r0, [r3, #4]
 800eeac:	7bfb      	ldrb	r3, [r7, #15]
 800eeae:	687a      	ldr	r2, [r7, #4]
 800eeb0:	3318      	adds	r3, #24
 800eeb2:	009b      	lsls	r3, r3, #2
 800eeb4:	4413      	add	r3, r2
 800eeb6:	685b      	ldr	r3, [r3, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	687a      	ldr	r2, [r7, #4]
 800eebe:	32c9      	adds	r2, #201	; 0xc9
 800eec0:	4611      	mov	r1, r2
 800eec2:	4798      	blx	r3
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800eec4:	7bfb      	ldrb	r3, [r7, #15]
 800eec6:	3301      	adds	r3, #1
 800eec8:	73fb      	strb	r3, [r7, #15]
 800eeca:	e7de      	b.n	800ee8a <_ZN3BTD14ACL_event_taskEv+0x4a>
        else if(rcode != hrNAK) {
                Notify(PSTR("\r\nACL data in error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800eecc:	2300      	movs	r3, #0
 800eece:	73bb      	strb	r3, [r7, #14]
 800eed0:	7bbb      	ldrb	r3, [r7, #14]
 800eed2:	2b03      	cmp	r3, #3
 800eed4:	d81c      	bhi.n	800ef10 <_ZN3BTD14ACL_event_taskEv+0xd0>
                if(btService[i])
 800eed6:	7bbb      	ldrb	r3, [r7, #14]
 800eed8:	687a      	ldr	r2, [r7, #4]
 800eeda:	3318      	adds	r3, #24
 800eedc:	009b      	lsls	r3, r3, #2
 800eede:	4413      	add	r3, r2
 800eee0:	685b      	ldr	r3, [r3, #4]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d010      	beq.n	800ef08 <_ZN3BTD14ACL_event_taskEv+0xc8>
                        btService[i]->Run();
 800eee6:	7bbb      	ldrb	r3, [r7, #14]
 800eee8:	687a      	ldr	r2, [r7, #4]
 800eeea:	3318      	adds	r3, #24
 800eeec:	009b      	lsls	r3, r3, #2
 800eeee:	4413      	add	r3, r2
 800eef0:	6859      	ldr	r1, [r3, #4]
 800eef2:	7bbb      	ldrb	r3, [r7, #14]
 800eef4:	687a      	ldr	r2, [r7, #4]
 800eef6:	3318      	adds	r3, #24
 800eef8:	009b      	lsls	r3, r3, #2
 800eefa:	4413      	add	r3, r2
 800eefc:	685b      	ldr	r3, [r3, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	3304      	adds	r3, #4
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4608      	mov	r0, r1
 800ef06:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800ef08:	7bbb      	ldrb	r3, [r7, #14]
 800ef0a:	3301      	adds	r3, #1
 800ef0c:	73bb      	strb	r3, [r7, #14]
 800ef0e:	e7df      	b.n	800eed0 <_ZN3BTD14ACL_event_taskEv+0x90>
}
 800ef10:	bf00      	nop
 800ef12:	3710      	adds	r7, #16
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bdb0      	pop	{r4, r5, r7, pc}

0800ef18 <_ZN3BTD11HCI_CommandEPht>:

/************************************************************/
/*                    HCI Commands                        */

/************************************************************/
void BTD::HCI_Command(uint8_t* data, uint16_t nbytes) {
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b08c      	sub	sp, #48	; 0x30
 800ef1c:	af08      	add	r7, sp, #32
 800ef1e:	60f8      	str	r0, [r7, #12]
 800ef20:	60b9      	str	r1, [r7, #8]
 800ef22:	4613      	mov	r3, r2
 800ef24:	80fb      	strh	r3, [r7, #6]
        hci_clear_flag(HCI_FLAG_CMD_COMPLETE);
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ef2c:	f023 0301 	bic.w	r3, r3, #1
 800ef30:	b29a      	uxth	r2, r3
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        pUsb->ctrlReq(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bmREQ_HCI_OUT, 0x00, 0x00, 0x00, 0x00, nbytes, nbytes, data, NULL);
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ef48:	2300      	movs	r3, #0
 800ef4a:	9307      	str	r3, [sp, #28]
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	9306      	str	r3, [sp, #24]
 800ef50:	88fb      	ldrh	r3, [r7, #6]
 800ef52:	9305      	str	r3, [sp, #20]
 800ef54:	88fb      	ldrh	r3, [r7, #6]
 800ef56:	9304      	str	r3, [sp, #16]
 800ef58:	2300      	movs	r3, #0
 800ef5a:	9303      	str	r3, [sp, #12]
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	9302      	str	r3, [sp, #8]
 800ef60:	2300      	movs	r3, #0
 800ef62:	9301      	str	r3, [sp, #4]
 800ef64:	2300      	movs	r3, #0
 800ef66:	9300      	str	r3, [sp, #0]
 800ef68:	2320      	movs	r3, #32
 800ef6a:	f002 ffd8 	bl	8011f1e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800ef6e:	bf00      	nop
 800ef70:	3710      	adds	r7, #16
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}

0800ef76 <_ZN3BTD9hci_resetEv>:

void BTD::hci_reset() {
 800ef76:	b580      	push	{r7, lr}
 800ef78:	b082      	sub	sp, #8
 800ef7a:	af00      	add	r7, sp, #0
 800ef7c:	6078      	str	r0, [r7, #4]
        hci_event_flag = 0; // Clear all the flags
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2200      	movs	r2, #0
 800ef82:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x03; // HCI OCF = 3
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2203      	movs	r2, #3
 800ef8a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	220c      	movs	r2, #12
 800ef92:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	2200      	movs	r2, #0
 800ef9a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	3389      	adds	r3, #137	; 0x89
 800efa2:	2203      	movs	r2, #3
 800efa4:	4619      	mov	r1, r3
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f7ff ffb6 	bl	800ef18 <_ZN3BTD11HCI_CommandEPht>
}
 800efac:	bf00      	nop
 800efae:	3708      	adds	r7, #8
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}

0800efb4 <_ZN3BTD21hci_write_scan_enableEv>:

void BTD::hci_write_scan_enable() {
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b082      	sub	sp, #8
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_INCOMING_REQUEST);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800efc2:	f023 0310 	bic.w	r3, r3, #16
 800efc6:	b29a      	uxth	r2, r3
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x1A; // HCI OCF = 1A
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	221a      	movs	r2, #26
 800efd2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	220c      	movs	r2, #12
 800efda:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2201      	movs	r2, #1
 800efe2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        if(btdName != NULL)
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	68db      	ldr	r3, [r3, #12]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d004      	beq.n	800eff8 <_ZN3BTD21hci_write_scan_enableEv+0x44>
                hcibuf[3] = 0x03; // Inquiry Scan enabled. Page Scan enabled.
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2203      	movs	r2, #3
 800eff2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800eff6:	e003      	b.n	800f000 <_ZN3BTD21hci_write_scan_enableEv+0x4c>
        else
                hcibuf[3] = 0x02; // Inquiry Scan disabled. Page Scan enabled.
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	2202      	movs	r2, #2
 800effc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	3389      	adds	r3, #137	; 0x89
 800f004:	2204      	movs	r2, #4
 800f006:	4619      	mov	r1, r3
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	f7ff ff85 	bl	800ef18 <_ZN3BTD11HCI_CommandEPht>
}
 800f00e:	bf00      	nop
 800f010:	3708      	adds	r7, #8
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}

0800f016 <_ZN3BTD15hci_read_bdaddrEv>:
        hcibuf[3] = 0x00; // Inquiry Scan disabled. Page Scan disabled.

        HCI_Command(hcibuf, 4);
}

void BTD::hci_read_bdaddr() {
 800f016:	b580      	push	{r7, lr}
 800f018:	b082      	sub	sp, #8
 800f01a:	af00      	add	r7, sp, #0
 800f01c:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_BDADDR);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f024:	f023 0320 	bic.w	r3, r3, #32
 800f028:	b29a      	uxth	r2, r3
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2209      	movs	r2, #9
 800f034:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2210      	movs	r2, #16
 800f03c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2200      	movs	r2, #0
 800f044:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	3389      	adds	r3, #137	; 0x89
 800f04c:	2203      	movs	r2, #3
 800f04e:	4619      	mov	r1, r3
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f7ff ff61 	bl	800ef18 <_ZN3BTD11HCI_CommandEPht>
}
 800f056:	bf00      	nop
 800f058:	3708      	adds	r7, #8
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}

0800f05e <_ZN3BTD34hci_read_local_version_informationEv>:

void BTD::hci_read_local_version_information() {
 800f05e:	b580      	push	{r7, lr}
 800f060:	b082      	sub	sp, #8
 800f062:	af00      	add	r7, sp, #0
 800f064:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_VERSION);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f06c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f070:	b29a      	uxth	r2, r3
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01; // HCI OCF = 1
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2201      	movs	r2, #1
 800f07c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2210      	movs	r2, #16
 800f084:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2200      	movs	r2, #0
 800f08c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	3389      	adds	r3, #137	; 0x89
 800f094:	2203      	movs	r2, #3
 800f096:	4619      	mov	r1, r3
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f7ff ff3d 	bl	800ef18 <_ZN3BTD11HCI_CommandEPht>
}
 800f09e:	bf00      	nop
 800f0a0:	3708      	adds	r7, #8
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}

0800f0a6 <_ZN3BTD32hci_read_local_extended_featuresEh>:

void BTD::hci_read_local_extended_features(uint8_t page_number) {
 800f0a6:	b580      	push	{r7, lr}
 800f0a8:	b082      	sub	sp, #8
 800f0aa:	af00      	add	r7, sp, #0
 800f0ac:	6078      	str	r0, [r7, #4]
 800f0ae:	460b      	mov	r3, r1
 800f0b0:	70fb      	strb	r3, [r7, #3]
        hci_clear_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f0b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f0bc:	b29a      	uxth	r2, r3
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x04; // HCI OCF = 4
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2204      	movs	r2, #4
 800f0c8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2210      	movs	r2, #16
 800f0d0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2201      	movs	r2, #1
 800f0d8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = page_number;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	78fa      	ldrb	r2, [r7, #3]
 800f0e0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	3389      	adds	r3, #137	; 0x89
 800f0e8:	2204      	movs	r2, #4
 800f0ea:	4619      	mov	r1, r3
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f7ff ff13 	bl	800ef18 <_ZN3BTD11HCI_CommandEPht>
}
 800f0f2:	bf00      	nop
 800f0f4:	3708      	adds	r7, #8
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}

0800f0fa <_ZN3BTD21hci_accept_connectionEv>:

void BTD::hci_accept_connection() {
 800f0fa:	b580      	push	{r7, lr}
 800f0fc:	b082      	sub	sp, #8
 800f0fe:	af00      	add	r7, sp, #0
 800f100:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE);
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f108:	f023 0302 	bic.w	r3, r3, #2
 800f10c:	b29a      	uxth	r2, r3
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2209      	movs	r2, #9
 800f118:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2204      	movs	r2, #4
 800f120:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x07; // parameter length 7
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2207      	movs	r2, #7
 800f128:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	7f1a      	ldrb	r2, [r3, #28]
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	7f5a      	ldrb	r2, [r3, #29]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	7f9a      	ldrb	r2, [r3, #30]
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	7fda      	ldrb	r2, [r3, #31]
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x00; // Switch role to master
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2200      	movs	r2, #0
 800f170:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

        HCI_Command(hcibuf, 10);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	3389      	adds	r3, #137	; 0x89
 800f178:	220a      	movs	r2, #10
 800f17a:	4619      	mov	r1, r3
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f7ff fecb 	bl	800ef18 <_ZN3BTD11HCI_CommandEPht>
}
 800f182:	bf00      	nop
 800f184:	3708      	adds	r7, #8
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}

0800f18a <_ZN3BTD15hci_remote_nameEv>:

void BTD::hci_remote_name() {
 800f18a:	b580      	push	{r7, lr}
 800f18c:	b082      	sub	sp, #8
 800f18e:	af00      	add	r7, sp, #0
 800f190:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f198:	f023 0308 	bic.w	r3, r3, #8
 800f19c:	b29a      	uxth	r2, r3
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x19; // HCI OCF = 19
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2219      	movs	r2, #25
 800f1a8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2204      	movs	r2, #4
 800f1b0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0A; // parameter length = 10
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	220a      	movs	r2, #10
 800f1b8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	7f1a      	ldrb	r2, [r3, #28]
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	7f5a      	ldrb	r2, [r3, #29]
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	7f9a      	ldrb	r2, [r3, #30]
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	7fda      	ldrb	r2, [r3, #31]
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x01; // Page Scan Repetition Mode
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2201      	movs	r2, #1
 800f200:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // Reserved
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2200      	movs	r2, #0
 800f208:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // Clock offset - low byte
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2200      	movs	r2, #0
 800f210:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Clock offset - high byte
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2200      	movs	r2, #0
 800f218:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

        HCI_Command(hcibuf, 13);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	3389      	adds	r3, #137	; 0x89
 800f220:	220d      	movs	r2, #13
 800f222:	4619      	mov	r1, r3
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	f7ff fe77 	bl	800ef18 <_ZN3BTD11HCI_CommandEPht>
}
 800f22a:	bf00      	nop
 800f22c:	3708      	adds	r7, #8
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}

0800f232 <_ZN3BTD20hci_write_local_nameEPKc>:

void BTD::hci_write_local_name(const char* name) {
 800f232:	b590      	push	{r4, r7, lr}
 800f234:	b085      	sub	sp, #20
 800f236:	af00      	add	r7, sp, #0
 800f238:	6078      	str	r0, [r7, #4]
 800f23a:	6039      	str	r1, [r7, #0]
        hcibuf[0] = 0x13; // HCI OCF = 13
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2213      	movs	r2, #19
 800f240:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	220c      	movs	r2, #12
 800f248:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = strlen(name) + 1; // parameter length = the length of the string + end byte
 800f24c:	6838      	ldr	r0, [r7, #0]
 800f24e:	f7f0 ffdf 	bl	8000210 <strlen>
 800f252:	4603      	mov	r3, r0
 800f254:	b2db      	uxtb	r3, r3
 800f256:	3301      	adds	r3, #1
 800f258:	b2da      	uxtb	r2, r3
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        uint8_t i;
        for(i = 0; i < strlen(name); i++)
 800f260:	2300      	movs	r3, #0
 800f262:	73fb      	strb	r3, [r7, #15]
 800f264:	7bfc      	ldrb	r4, [r7, #15]
 800f266:	6838      	ldr	r0, [r7, #0]
 800f268:	f7f0 ffd2 	bl	8000210 <strlen>
 800f26c:	4603      	mov	r3, r0
 800f26e:	429c      	cmp	r4, r3
 800f270:	d20e      	bcs.n	800f290 <_ZN3BTD20hci_write_local_nameEPKc+0x5e>
                hcibuf[i + 3] = name[i];
 800f272:	7bfb      	ldrb	r3, [r7, #15]
 800f274:	683a      	ldr	r2, [r7, #0]
 800f276:	441a      	add	r2, r3
 800f278:	7bfb      	ldrb	r3, [r7, #15]
 800f27a:	3303      	adds	r3, #3
 800f27c:	7811      	ldrb	r1, [r2, #0]
 800f27e:	687a      	ldr	r2, [r7, #4]
 800f280:	4413      	add	r3, r2
 800f282:	460a      	mov	r2, r1
 800f284:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        for(i = 0; i < strlen(name); i++)
 800f288:	7bfb      	ldrb	r3, [r7, #15]
 800f28a:	3301      	adds	r3, #1
 800f28c:	73fb      	strb	r3, [r7, #15]
 800f28e:	e7e9      	b.n	800f264 <_ZN3BTD20hci_write_local_nameEPKc+0x32>
        hcibuf[i + 3] = 0x00; // End of string
 800f290:	7bfb      	ldrb	r3, [r7, #15]
 800f292:	3303      	adds	r3, #3
 800f294:	687a      	ldr	r2, [r7, #4]
 800f296:	4413      	add	r3, r2
 800f298:	2200      	movs	r2, #0
 800f29a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

        HCI_Command(hcibuf, 4 + strlen(name));
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	f103 0489 	add.w	r4, r3, #137	; 0x89
 800f2a4:	6838      	ldr	r0, [r7, #0]
 800f2a6:	f7f0 ffb3 	bl	8000210 <strlen>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	b29b      	uxth	r3, r3
 800f2ae:	3304      	adds	r3, #4
 800f2b0:	b29b      	uxth	r3, r3
 800f2b2:	461a      	mov	r2, r3
 800f2b4:	4621      	mov	r1, r4
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f7ff fe2e 	bl	800ef18 <_ZN3BTD11HCI_CommandEPht>
}
 800f2bc:	bf00      	nop
 800f2be:	3714      	adds	r7, #20
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd90      	pop	{r4, r7, pc}

0800f2c4 <_ZN3BTD18hci_set_event_maskEv>:

void BTD::hci_set_event_mask() {
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b082      	sub	sp, #8
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x01; // HCI OCF = 01
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2201      	movs	r2, #1
 800f2d0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	220c      	movs	r2, #12
 800f2d8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x08;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2208      	movs	r2, #8
 800f2e0:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        // The first 6 bytes are the default of 1FFF FFFF FFFF
        // However we need to set bits 48-55 for simple pairing to work
        hcibuf[3] = 0xFF;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	22ff      	movs	r2, #255	; 0xff
 800f2e8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0xFF;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	22ff      	movs	r2, #255	; 0xff
 800f2f0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0xFF;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	22ff      	movs	r2, #255	; 0xff
 800f2f8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0xFF;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	22ff      	movs	r2, #255	; 0xff
 800f300:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0xFF;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	22ff      	movs	r2, #255	; 0xff
 800f308:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = 0x1F;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	221f      	movs	r2, #31
 800f310:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0xFF; // Enable bits 48-55 used for simple pairing
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	22ff      	movs	r2, #255	; 0xff
 800f318:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2200      	movs	r2, #0
 800f320:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

        HCI_Command(hcibuf, 11);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	3389      	adds	r3, #137	; 0x89
 800f328:	220b      	movs	r2, #11
 800f32a:	4619      	mov	r1, r3
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f7ff fdf3 	bl	800ef18 <_ZN3BTD11HCI_CommandEPht>
}
 800f332:	bf00      	nop
 800f334:	3708      	adds	r7, #8
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}

0800f33a <_ZN3BTD29hci_write_simple_pairing_modeEb>:

void BTD::hci_write_simple_pairing_mode(bool enable) {
 800f33a:	b580      	push	{r7, lr}
 800f33c:	b082      	sub	sp, #8
 800f33e:	af00      	add	r7, sp, #0
 800f340:	6078      	str	r0, [r7, #4]
 800f342:	460b      	mov	r3, r1
 800f344:	70fb      	strb	r3, [r7, #3]
        hcibuf[0] = 0x56; // HCI OCF = 56
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2256      	movs	r2, #86	; 0x56
 800f34a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	220c      	movs	r2, #12
 800f352:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 1; // parameter length = 1
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2201      	movs	r2, #1
 800f35a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = enable ? 1 : 0;
 800f35e:	78fb      	ldrb	r3, [r7, #3]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d001      	beq.n	800f368 <_ZN3BTD29hci_write_simple_pairing_modeEb+0x2e>
 800f364:	2201      	movs	r2, #1
 800f366:	e000      	b.n	800f36a <_ZN3BTD29hci_write_simple_pairing_modeEb+0x30>
 800f368:	2200      	movs	r2, #0
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	3389      	adds	r3, #137	; 0x89
 800f374:	2204      	movs	r2, #4
 800f376:	4619      	mov	r1, r3
 800f378:	6878      	ldr	r0, [r7, #4]
 800f37a:	f7ff fdcd 	bl	800ef18 <_ZN3BTD11HCI_CommandEPht>
}
 800f37e:	bf00      	nop
 800f380:	3708      	adds	r7, #8
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}

0800f386 <_ZN3BTD11hci_inquiryEv>:

void BTD::hci_inquiry() {
 800f386:	b580      	push	{r7, lr}
 800f388:	b082      	sub	sp, #8
 800f38a:	af00      	add	r7, sp, #0
 800f38c:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_DEVICE_FOUND);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f394:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f398:	b29a      	uxth	r2, r3
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2201      	movs	r2, #1
 800f3a4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2204      	movs	r2, #4
 800f3ac:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x05; // Parameter Total Length = 5
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2205      	movs	r2, #5
 800f3b4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x33; // LAP: Genera/Unlimited Inquiry Access Code (GIAC = 0x9E8B33) - see https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	2233      	movs	r2, #51	; 0x33
 800f3bc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x8B;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	228b      	movs	r2, #139	; 0x8b
 800f3c4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x9E;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	229e      	movs	r2, #158	; 0x9e
 800f3cc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0x30; // Inquiry time = 61.44 sec (maximum)
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2230      	movs	r2, #48	; 0x30
 800f3d4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0x0A; // 10 number of responses
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	220a      	movs	r2, #10
 800f3dc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        HCI_Command(hcibuf, 8);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	3389      	adds	r3, #137	; 0x89
 800f3e4:	2208      	movs	r2, #8
 800f3e6:	4619      	mov	r1, r3
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f7ff fd95 	bl	800ef18 <_ZN3BTD11HCI_CommandEPht>
}
 800f3ee:	bf00      	nop
 800f3f0:	3708      	adds	r7, #8
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}

0800f3f6 <_ZN3BTD18hci_inquiry_cancelEv>:

void BTD::hci_inquiry_cancel() {
 800f3f6:	b580      	push	{r7, lr}
 800f3f8:	b082      	sub	sp, #8
 800f3fa:	af00      	add	r7, sp, #0
 800f3fc:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x02;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2202      	movs	r2, #2
 800f402:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	2204      	movs	r2, #4
 800f40a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00; // Parameter Total Length = 0
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2200      	movs	r2, #0
 800f412:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	3389      	adds	r3, #137	; 0x89
 800f41a:	2203      	movs	r2, #3
 800f41c:	4619      	mov	r1, r3
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f7ff fd7a 	bl	800ef18 <_ZN3BTD11HCI_CommandEPht>
}
 800f424:	bf00      	nop
 800f426:	3708      	adds	r7, #8
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}

0800f42c <_ZN3BTD11hci_connectEv>:

void BTD::hci_connect() {
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b082      	sub	sp, #8
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
        hci_connect(disc_bdaddr); // Use last discovered device
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	331c      	adds	r3, #28
 800f438:	4619      	mov	r1, r3
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f000 f804 	bl	800f448 <_ZN3BTD11hci_connectEPh>
}
 800f440:	bf00      	nop
 800f442:	3708      	adds	r7, #8
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}

0800f448 <_ZN3BTD11hci_connectEPh>:

void BTD::hci_connect(uint8_t *bdaddr) {
 800f448:	b580      	push	{r7, lr}
 800f44a:	b082      	sub	sp, #8
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	6039      	str	r1, [r7, #0]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE | HCI_FLAG_CONNECT_EVENT);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f458:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800f45c:	b29a      	uxth	r2, r3
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x05; // HCI OCF = 5
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2205      	movs	r2, #5
 800f468:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2204      	movs	r2, #4
 800f470:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0D; // parameter Total Length = 13
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	220d      	movs	r2, #13
 800f478:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = bdaddr[0]; // 6 octet bdaddr (LSB)
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	781a      	ldrb	r2, [r3, #0]
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = bdaddr[1];
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	785a      	ldrb	r2, [r3, #1]
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = bdaddr[2];
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	789a      	ldrb	r2, [r3, #2]
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = bdaddr[3];
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	78da      	ldrb	r2, [r3, #3]
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = bdaddr[4];
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	791a      	ldrb	r2, [r3, #4]
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = bdaddr[5];
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	795a      	ldrb	r2, [r3, #5]
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x18; // DM1 or DH1 may be used
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	2218      	movs	r2, #24
 800f4bc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0xCC; // DM3, DH3, DM5, DH5 may be used
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	22cc      	movs	r2, #204	; 0xcc
 800f4c4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x01; // Page repetition mode R1
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2201      	movs	r2, #1
 800f4cc:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Reserved
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
        hcibuf[13] = 0x00; // Clock offset
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
        hcibuf[14] = 0x00; // Invalid clock offset
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
        hcibuf[15] = 0x00; // Do not allow role switch
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        HCI_Command(hcibuf, 16);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	3389      	adds	r3, #137	; 0x89
 800f4f4:	2210      	movs	r2, #16
 800f4f6:	4619      	mov	r1, r3
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f7ff fd0d 	bl	800ef18 <_ZN3BTD11HCI_CommandEPht>
}
 800f4fe:	bf00      	nop
 800f500:	3708      	adds	r7, #8
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}

0800f506 <_ZN3BTD26hci_pin_code_request_replyEv>:

void BTD::hci_pin_code_request_reply() {
 800f506:	b590      	push	{r4, r7, lr}
 800f508:	b085      	sub	sp, #20
 800f50a:	af00      	add	r7, sp, #0
 800f50c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0D; // HCI OCF = 0D
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	220d      	movs	r2, #13
 800f512:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	2204      	movs	r2, #4
 800f51a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x17; // parameter length 23
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	2217      	movs	r2, #23
 800f522:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	7f1a      	ldrb	r2, [r3, #28]
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	7f5a      	ldrb	r2, [r3, #29]
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	7f9a      	ldrb	r2, [r3, #30]
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	7fda      	ldrb	r2, [r3, #31]
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        if(pairWithWii) {
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d03f      	beq.n	800f5f0 <_ZN3BTD26hci_pin_code_request_replyEv+0xea>
                hcibuf[9] = 6; // Pin length is the length of the Bluetooth address
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2206      	movs	r2, #6
 800f574:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                if(pairWiiUsingSync) {
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d013      	beq.n	800f5aa <_ZN3BTD26hci_pin_code_request_replyEv+0xa4>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPairing with Wii controller via SYNC"), 0x80);
#endif
                        for(uint8_t i = 0; i < 6; i++)
 800f582:	2300      	movs	r3, #0
 800f584:	73fb      	strb	r3, [r7, #15]
 800f586:	7bfb      	ldrb	r3, [r7, #15]
 800f588:	2b05      	cmp	r3, #5
 800f58a:	d822      	bhi.n	800f5d2 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = my_bdaddr[i]; // The pin is the Bluetooth dongles Bluetooth address backwards
 800f58c:	7bfa      	ldrb	r2, [r7, #15]
 800f58e:	7bfb      	ldrb	r3, [r7, #15]
 800f590:	330a      	adds	r3, #10
 800f592:	6879      	ldr	r1, [r7, #4]
 800f594:	440a      	add	r2, r1
 800f596:	7d11      	ldrb	r1, [r2, #20]
 800f598:	687a      	ldr	r2, [r7, #4]
 800f59a:	4413      	add	r3, r2
 800f59c:	460a      	mov	r2, r1
 800f59e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800f5a2:	7bfb      	ldrb	r3, [r7, #15]
 800f5a4:	3301      	adds	r3, #1
 800f5a6:	73fb      	strb	r3, [r7, #15]
 800f5a8:	e7ed      	b.n	800f586 <_ZN3BTD26hci_pin_code_request_replyEv+0x80>
                } else {
                        for(uint8_t i = 0; i < 6; i++)
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	73bb      	strb	r3, [r7, #14]
 800f5ae:	7bbb      	ldrb	r3, [r7, #14]
 800f5b0:	2b05      	cmp	r3, #5
 800f5b2:	d80e      	bhi.n	800f5d2 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = disc_bdaddr[i]; // The pin is the Wiimote's Bluetooth address backwards
 800f5b4:	7bba      	ldrb	r2, [r7, #14]
 800f5b6:	7bbb      	ldrb	r3, [r7, #14]
 800f5b8:	330a      	adds	r3, #10
 800f5ba:	6879      	ldr	r1, [r7, #4]
 800f5bc:	440a      	add	r2, r1
 800f5be:	7f11      	ldrb	r1, [r2, #28]
 800f5c0:	687a      	ldr	r2, [r7, #4]
 800f5c2:	4413      	add	r3, r2
 800f5c4:	460a      	mov	r2, r1
 800f5c6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800f5ca:	7bbb      	ldrb	r3, [r7, #14]
 800f5cc:	3301      	adds	r3, #1
 800f5ce:	73bb      	strb	r3, [r7, #14]
 800f5d0:	e7ed      	b.n	800f5ae <_ZN3BTD26hci_pin_code_request_replyEv+0xa8>
                }
                for(uint8_t i = 16; i < 26; i++)
 800f5d2:	2310      	movs	r3, #16
 800f5d4:	737b      	strb	r3, [r7, #13]
 800f5d6:	7b7b      	ldrb	r3, [r7, #13]
 800f5d8:	2b19      	cmp	r3, #25
 800f5da:	d83c      	bhi.n	800f656 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i] = 0x00; // The rest should be 0
 800f5dc:	7b7b      	ldrb	r3, [r7, #13]
 800f5de:	687a      	ldr	r2, [r7, #4]
 800f5e0:	4413      	add	r3, r2
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(uint8_t i = 16; i < 26; i++)
 800f5e8:	7b7b      	ldrb	r3, [r7, #13]
 800f5ea:	3301      	adds	r3, #1
 800f5ec:	737b      	strb	r3, [r7, #13]
 800f5ee:	e7f2      	b.n	800f5d6 <_ZN3BTD26hci_pin_code_request_replyEv+0xd0>
        } else {
                hcibuf[9] = strlen(btdPin); // Length of pin
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	691b      	ldr	r3, [r3, #16]
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f7f0 fe0b 	bl	8000210 <strlen>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	b2da      	uxtb	r2, r3
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                uint8_t i;
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800f604:	2300      	movs	r3, #0
 800f606:	733b      	strb	r3, [r7, #12]
 800f608:	7b3c      	ldrb	r4, [r7, #12]
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	691b      	ldr	r3, [r3, #16]
 800f60e:	4618      	mov	r0, r3
 800f610:	f7f0 fdfe 	bl	8000210 <strlen>
 800f614:	4603      	mov	r3, r0
 800f616:	429c      	cmp	r4, r3
 800f618:	d20f      	bcs.n	800f63a <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
                        hcibuf[i + 10] = btdPin[i];
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	691a      	ldr	r2, [r3, #16]
 800f61e:	7b3b      	ldrb	r3, [r7, #12]
 800f620:	441a      	add	r2, r3
 800f622:	7b3b      	ldrb	r3, [r7, #12]
 800f624:	330a      	adds	r3, #10
 800f626:	7811      	ldrb	r1, [r2, #0]
 800f628:	687a      	ldr	r2, [r7, #4]
 800f62a:	4413      	add	r3, r2
 800f62c:	460a      	mov	r2, r1
 800f62e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800f632:	7b3b      	ldrb	r3, [r7, #12]
 800f634:	3301      	adds	r3, #1
 800f636:	733b      	strb	r3, [r7, #12]
 800f638:	e7e6      	b.n	800f608 <_ZN3BTD26hci_pin_code_request_replyEv+0x102>
                for(; i < 16; i++)
 800f63a:	7b3b      	ldrb	r3, [r7, #12]
 800f63c:	2b0f      	cmp	r3, #15
 800f63e:	d80a      	bhi.n	800f656 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i + 10] = 0x00; // The rest should be 0
 800f640:	7b3b      	ldrb	r3, [r7, #12]
 800f642:	330a      	adds	r3, #10
 800f644:	687a      	ldr	r2, [r7, #4]
 800f646:	4413      	add	r3, r2
 800f648:	2200      	movs	r2, #0
 800f64a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(; i < 16; i++)
 800f64e:	7b3b      	ldrb	r3, [r7, #12]
 800f650:	3301      	adds	r3, #1
 800f652:	733b      	strb	r3, [r7, #12]
 800f654:	e7f1      	b.n	800f63a <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
        }

        HCI_Command(hcibuf, 26);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	3389      	adds	r3, #137	; 0x89
 800f65a:	221a      	movs	r2, #26
 800f65c:	4619      	mov	r1, r3
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	f7ff fc5a 	bl	800ef18 <_ZN3BTD11HCI_CommandEPht>
}
 800f664:	bf00      	nop
 800f666:	3714      	adds	r7, #20
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd90      	pop	{r4, r7, pc}

0800f66c <_ZN3BTD35hci_pin_code_negative_request_replyEv>:

void BTD::hci_pin_code_negative_request_reply() {
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b082      	sub	sp, #8
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0E; // HCI OCF = 0E
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	220e      	movs	r2, #14
 800f678:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2204      	movs	r2, #4
 800f680:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2206      	movs	r2, #6
 800f688:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	7f1a      	ldrb	r2, [r3, #28]
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	7f5a      	ldrb	r2, [r3, #29]
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	7f9a      	ldrb	r2, [r3, #30]
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	7fda      	ldrb	r2, [r3, #31]
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	3389      	adds	r3, #137	; 0x89
 800f6d0:	2209      	movs	r2, #9
 800f6d2:	4619      	mov	r1, r3
 800f6d4:	6878      	ldr	r0, [r7, #4]
 800f6d6:	f7ff fc1f 	bl	800ef18 <_ZN3BTD11HCI_CommandEPht>
}
 800f6da:	bf00      	nop
 800f6dc:	3708      	adds	r7, #8
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	bd80      	pop	{r7, pc}

0800f6e2 <_ZN3BTD35hci_link_key_request_negative_replyEv>:

void BTD::hci_link_key_request_negative_reply() {
 800f6e2:	b580      	push	{r7, lr}
 800f6e4:	b082      	sub	sp, #8
 800f6e6:	af00      	add	r7, sp, #0
 800f6e8:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0C; // HCI OCF = 0C
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	220c      	movs	r2, #12
 800f6ee:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	2204      	movs	r2, #4
 800f6f6:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2206      	movs	r2, #6
 800f6fe:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	7f1a      	ldrb	r2, [r3, #28]
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	7f5a      	ldrb	r2, [r3, #29]
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	7f9a      	ldrb	r2, [r3, #30]
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	7fda      	ldrb	r2, [r3, #31]
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	3389      	adds	r3, #137	; 0x89
 800f746:	2209      	movs	r2, #9
 800f748:	4619      	mov	r1, r3
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f7ff fbe4 	bl	800ef18 <_ZN3BTD11HCI_CommandEPht>
}
 800f750:	bf00      	nop
 800f752:	3708      	adds	r7, #8
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}

0800f758 <_ZN3BTD31hci_io_capability_request_replyEv>:

void BTD::hci_io_capability_request_reply() {
 800f758:	b580      	push	{r7, lr}
 800f75a:	b082      	sub	sp, #8
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2B; // HCI OCF = 2B
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	222b      	movs	r2, #43	; 0x2b
 800f764:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2204      	movs	r2, #4
 800f76c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x09;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2209      	movs	r2, #9
 800f774:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	7f1a      	ldrb	r2, [r3, #28]
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	7f5a      	ldrb	r2, [r3, #29]
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	7f9a      	ldrb	r2, [r3, #30]
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	7fda      	ldrb	r2, [r3, #31]
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x03; // NoInputNoOutput
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2203      	movs	r2, #3
 800f7bc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // OOB authentication data not present
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // MITM Protection Not Required – No Bonding. Numeric comparison with automatic accept allowed
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

        HCI_Command(hcibuf, 12);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	3389      	adds	r3, #137	; 0x89
 800f7d4:	220c      	movs	r2, #12
 800f7d6:	4619      	mov	r1, r3
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f7ff fb9d 	bl	800ef18 <_ZN3BTD11HCI_CommandEPht>
}
 800f7de:	bf00      	nop
 800f7e0:	3708      	adds	r7, #8
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}

0800f7e6 <_ZN3BTD35hci_user_confirmation_request_replyEv>:

void BTD::hci_user_confirmation_request_reply() {
 800f7e6:	b580      	push	{r7, lr}
 800f7e8:	b082      	sub	sp, #8
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2C; // HCI OCF = 2C
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	222c      	movs	r2, #44	; 0x2c
 800f7f2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	2204      	movs	r2, #4
 800f7fa:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2206      	movs	r2, #6
 800f802:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	7f1a      	ldrb	r2, [r3, #28]
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	7f5a      	ldrb	r2, [r3, #29]
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	7f9a      	ldrb	r2, [r3, #30]
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	7fda      	ldrb	r2, [r3, #31]
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	3389      	adds	r3, #137	; 0x89
 800f84a:	2209      	movs	r2, #9
 800f84c:	4619      	mov	r1, r3
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f7ff fb62 	bl	800ef18 <_ZN3BTD11HCI_CommandEPht>
}
 800f854:	bf00      	nop
 800f856:	3708      	adds	r7, #8
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}

0800f85c <_ZN3BTD26hci_authentication_requestEv>:

void BTD::hci_authentication_request() {
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b082      	sub	sp, #8
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x11; // HCI OCF = 11
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2211      	movs	r2, #17
 800f868:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2204      	movs	r2, #4
 800f870:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x02; // parameter length = 2
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2202      	movs	r2, #2
 800f878:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(hci_handle & 0xFF); //connection handle - low byte
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	8b5b      	ldrh	r3, [r3, #26]
 800f880:	b2da      	uxtb	r2, r3
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((hci_handle >> 8) & 0x0F); //connection handle - high byte
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	8b5b      	ldrh	r3, [r3, #26]
 800f88c:	121b      	asrs	r3, r3, #8
 800f88e:	b2db      	uxtb	r3, r3
 800f890:	f003 030f 	and.w	r3, r3, #15
 800f894:	b2da      	uxtb	r2, r3
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

        HCI_Command(hcibuf, 5);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	3389      	adds	r3, #137	; 0x89
 800f8a0:	2205      	movs	r2, #5
 800f8a2:	4619      	mov	r1, r3
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f7ff fb37 	bl	800ef18 <_ZN3BTD11HCI_CommandEPht>
}
 800f8aa:	bf00      	nop
 800f8ac:	3708      	adds	r7, #8
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd80      	pop	{r7, pc}

0800f8b2 <_ZN3BTD14hci_disconnectEt>:

void BTD::hci_disconnect(uint16_t handle) { // This is called by the different services
 800f8b2:	b580      	push	{r7, lr}
 800f8b4:	b082      	sub	sp, #8
 800f8b6:	af00      	add	r7, sp, #0
 800f8b8:	6078      	str	r0, [r7, #4]
 800f8ba:	460b      	mov	r3, r1
 800f8bc:	807b      	strh	r3, [r7, #2]
        hci_clear_flag(HCI_FLAG_DISCONNECT_COMPLETE);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f8c4:	f023 0304 	bic.w	r3, r3, #4
 800f8c8:	b29a      	uxth	r2, r3
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x06; // HCI OCF = 6
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2206      	movs	r2, #6
 800f8d4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2204      	movs	r2, #4
 800f8dc:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2203      	movs	r2, #3
 800f8e4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(handle & 0xFF); //connection handle - low byte
 800f8e8:	887b      	ldrh	r3, [r7, #2]
 800f8ea:	b2da      	uxtb	r2, r3
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((handle >> 8) & 0x0F); //connection handle - high byte
 800f8f2:	887b      	ldrh	r3, [r7, #2]
 800f8f4:	121b      	asrs	r3, r3, #8
 800f8f6:	b2db      	uxtb	r3, r3
 800f8f8:	f003 030f 	and.w	r3, r3, #15
 800f8fc:	b2da      	uxtb	r2, r3
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x13; // reason
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2213      	movs	r2, #19
 800f908:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	3389      	adds	r3, #137	; 0x89
 800f910:	2206      	movs	r2, #6
 800f912:	4619      	mov	r1, r3
 800f914:	6878      	ldr	r0, [r7, #4]
 800f916:	f7ff faff 	bl	800ef18 <_ZN3BTD11HCI_CommandEPht>
}
 800f91a:	bf00      	nop
 800f91c:	3708      	adds	r7, #8
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}

0800f922 <_ZN3BTD25hci_write_class_of_deviceEv>:

void BTD::hci_write_class_of_device() { // See http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800f922:	b580      	push	{r7, lr}
 800f924:	b082      	sub	sp, #8
 800f926:	af00      	add	r7, sp, #0
 800f928:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x24; // HCI OCF = 24
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	2224      	movs	r2, #36	; 0x24
 800f92e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	220c      	movs	r2, #12
 800f936:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2203      	movs	r2, #3
 800f93e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x04; // Robot
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2204      	movs	r2, #4
 800f946:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x08; // Toy
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	2208      	movs	r2, #8
 800f94e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x00;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	2200      	movs	r2, #0
 800f956:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	3389      	adds	r3, #137	; 0x89
 800f95e:	2206      	movs	r2, #6
 800f960:	4619      	mov	r1, r3
 800f962:	6878      	ldr	r0, [r7, #4]
 800f964:	f7ff fad8 	bl	800ef18 <_ZN3BTD11HCI_CommandEPht>
}
 800f968:	bf00      	nop
 800f96a:	3708      	adds	r7, #8
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}

0800f970 <_ZN3BTD13L2CAP_CommandEtPhhhh>:
 */
/************************************************************/
/*                    L2CAP Commands                        */

/************************************************************/
void BTD::L2CAP_Command(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh) {
 800f970:	b5b0      	push	{r4, r5, r7, lr}
 800f972:	b08a      	sub	sp, #40	; 0x28
 800f974:	af02      	add	r7, sp, #8
 800f976:	60f8      	str	r0, [r7, #12]
 800f978:	607a      	str	r2, [r7, #4]
 800f97a:	461a      	mov	r2, r3
 800f97c:	460b      	mov	r3, r1
 800f97e:	817b      	strh	r3, [r7, #10]
 800f980:	4613      	mov	r3, r2
 800f982:	727b      	strb	r3, [r7, #9]
                Notify(PSTR(" - Channel ID: "), 0x80);
                D_PrintHex<uint8_t > (channelHigh, 0x80);
                Notify(PSTR(" "), 0x80);
                D_PrintHex<uint8_t > (channelLow, 0x80);
#endif
        }
 800f984:	466b      	mov	r3, sp
 800f986:	461d      	mov	r5, r3
        uint8_t buf[8 + nbytes];
 800f988:	7a7b      	ldrb	r3, [r7, #9]
 800f98a:	1ddc      	adds	r4, r3, #7
 800f98c:	61bc      	str	r4, [r7, #24]
 800f98e:	4623      	mov	r3, r4
 800f990:	3301      	adds	r3, #1
 800f992:	4618      	mov	r0, r3
 800f994:	f04f 0100 	mov.w	r1, #0
 800f998:	f04f 0200 	mov.w	r2, #0
 800f99c:	f04f 0300 	mov.w	r3, #0
 800f9a0:	00cb      	lsls	r3, r1, #3
 800f9a2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800f9a6:	00c2      	lsls	r2, r0, #3
 800f9a8:	4623      	mov	r3, r4
 800f9aa:	3301      	adds	r3, #1
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f04f 0100 	mov.w	r1, #0
 800f9b2:	f04f 0200 	mov.w	r2, #0
 800f9b6:	f04f 0300 	mov.w	r3, #0
 800f9ba:	00cb      	lsls	r3, r1, #3
 800f9bc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800f9c0:	00c2      	lsls	r2, r0, #3
 800f9c2:	4623      	mov	r3, r4
 800f9c4:	3301      	adds	r3, #1
 800f9c6:	3307      	adds	r3, #7
 800f9c8:	08db      	lsrs	r3, r3, #3
 800f9ca:	00db      	lsls	r3, r3, #3
 800f9cc:	ebad 0d03 	sub.w	sp, sp, r3
 800f9d0:	ab02      	add	r3, sp, #8
 800f9d2:	3300      	adds	r3, #0
 800f9d4:	617b      	str	r3, [r7, #20]
        buf[0] = (uint8_t)(handle & 0xff); // HCI handle with PB,BC flag
 800f9d6:	897b      	ldrh	r3, [r7, #10]
 800f9d8:	b2da      	uxtb	r2, r3
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	701a      	strb	r2, [r3, #0]
        buf[1] = (uint8_t)(((handle >> 8) & 0x0f) | 0x20);
 800f9de:	897b      	ldrh	r3, [r7, #10]
 800f9e0:	121b      	asrs	r3, r3, #8
 800f9e2:	b25b      	sxtb	r3, r3
 800f9e4:	f003 030f 	and.w	r3, r3, #15
 800f9e8:	b25b      	sxtb	r3, r3
 800f9ea:	f043 0320 	orr.w	r3, r3, #32
 800f9ee:	b25b      	sxtb	r3, r3
 800f9f0:	b2da      	uxtb	r2, r3
 800f9f2:	697b      	ldr	r3, [r7, #20]
 800f9f4:	705a      	strb	r2, [r3, #1]
        buf[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
 800f9f6:	7a7b      	ldrb	r3, [r7, #9]
 800f9f8:	3304      	adds	r3, #4
 800f9fa:	b2da      	uxtb	r2, r3
 800f9fc:	697b      	ldr	r3, [r7, #20]
 800f9fe:	709a      	strb	r2, [r3, #2]
        buf[3] = (uint8_t)((4 + nbytes) >> 8);
 800fa00:	7a7b      	ldrb	r3, [r7, #9]
 800fa02:	3304      	adds	r3, #4
 800fa04:	121b      	asrs	r3, r3, #8
 800fa06:	b2da      	uxtb	r2, r3
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	70da      	strb	r2, [r3, #3]
        buf[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
 800fa0c:	697b      	ldr	r3, [r7, #20]
 800fa0e:	7a7a      	ldrb	r2, [r7, #9]
 800fa10:	711a      	strb	r2, [r3, #4]
        buf[5] = (uint8_t)(nbytes >> 8);
 800fa12:	7a7b      	ldrb	r3, [r7, #9]
 800fa14:	121b      	asrs	r3, r3, #8
 800fa16:	b2da      	uxtb	r2, r3
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	715a      	strb	r2, [r3, #5]
        buf[6] = channelLow;
 800fa1c:	697b      	ldr	r3, [r7, #20]
 800fa1e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800fa22:	719a      	strb	r2, [r3, #6]
        buf[7] = channelHigh;
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800fa2a:	71da      	strb	r2, [r3, #7]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	83fb      	strh	r3, [r7, #30]
 800fa30:	7a7b      	ldrb	r3, [r7, #9]
 800fa32:	b29b      	uxth	r3, r3
 800fa34:	8bfa      	ldrh	r2, [r7, #30]
 800fa36:	429a      	cmp	r2, r3
 800fa38:	d20b      	bcs.n	800fa52 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xe2>
                buf[8 + i] = data[i];
 800fa3a:	8bfb      	ldrh	r3, [r7, #30]
 800fa3c:	687a      	ldr	r2, [r7, #4]
 800fa3e:	441a      	add	r2, r3
 800fa40:	8bfb      	ldrh	r3, [r7, #30]
 800fa42:	3308      	adds	r3, #8
 800fa44:	7811      	ldrb	r1, [r2, #0]
 800fa46:	697a      	ldr	r2, [r7, #20]
 800fa48:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800fa4a:	8bfb      	ldrh	r3, [r7, #30]
 800fa4c:	3301      	adds	r3, #1
 800fa4e:	83fb      	strh	r3, [r7, #30]
 800fa50:	e7ee      	b.n	800fa30 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xc0>
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ BTD_DATAOUT_PIPE ].epAddr, (8 + nbytes), buf);
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800fa62:	7a7b      	ldrb	r3, [r7, #9]
 800fa64:	b29b      	uxth	r3, r3
 800fa66:	3308      	adds	r3, #8
 800fa68:	b29c      	uxth	r4, r3
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	9300      	str	r3, [sp, #0]
 800fa6e:	4623      	mov	r3, r4
 800fa70:	f002 fc34 	bl	80122dc <_ZN3USB11outTransferEhhtPh>
 800fa74:	4603      	mov	r3, r0
 800fa76:	74fb      	strb	r3, [r7, #19]
        if(rcode) {
 800fa78:	7cfb      	ldrb	r3, [r7, #19]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d002      	beq.n	800fa84 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x114>
                delay(100); // This small delay prevents it from overflowing if it fails
 800fa7e:	2064      	movs	r0, #100	; 0x64
 800fa80:	f7f2 feec 	bl	800285c <HAL_Delay>
 800fa84:	46ad      	mov	sp, r5
}
 800fa86:	bf00      	nop
 800fa88:	3720      	adds	r7, #32
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bdb0      	pop	{r4, r5, r7, pc}

0800fa8e <_ZN3BTD24l2cap_connection_requestEthPht>:

void BTD::l2cap_connection_request(uint16_t handle, uint8_t rxid, uint8_t* scid, uint16_t psm) {
 800fa8e:	b580      	push	{r7, lr}
 800fa90:	b086      	sub	sp, #24
 800fa92:	af02      	add	r7, sp, #8
 800fa94:	60f8      	str	r0, [r7, #12]
 800fa96:	607b      	str	r3, [r7, #4]
 800fa98:	460b      	mov	r3, r1
 800fa9a:	817b      	strh	r3, [r7, #10]
 800fa9c:	4613      	mov	r3, r2
 800fa9e:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_REQUEST; // Code
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	2202      	movs	r2, #2
 800faa4:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	7a7a      	ldrb	r2, [r7, #9]
 800faac:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	2204      	movs	r2, #4
 800fab4:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	2200      	movs	r2, #0
 800fabc:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = (uint8_t)(psm & 0xff); // PSM
 800fac0:	8b3b      	ldrh	r3, [r7, #24]
 800fac2:	b2da      	uxtb	r2, r3
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = (uint8_t)(psm >> 8);
 800faca:	8b3b      	ldrh	r3, [r7, #24]
 800facc:	121b      	asrs	r3, r3, #8
 800face:	b2da      	uxtb	r2, r3
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	781a      	ldrb	r2, [r3, #0]
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	785a      	ldrb	r2, [r3, #1]
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	f203 1209 	addw	r2, r3, #265	; 0x109
 800faf0:	8979      	ldrh	r1, [r7, #10]
 800faf2:	2300      	movs	r3, #0
 800faf4:	9301      	str	r3, [sp, #4]
 800faf6:	2301      	movs	r3, #1
 800faf8:	9300      	str	r3, [sp, #0]
 800fafa:	2308      	movs	r3, #8
 800fafc:	68f8      	ldr	r0, [r7, #12]
 800fafe:	f7ff ff37 	bl	800f970 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800fb02:	bf00      	nop
 800fb04:	3710      	adds	r7, #16
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}

0800fb0a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>:

void BTD::l2cap_connection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid, uint8_t result) {
 800fb0a:	b580      	push	{r7, lr}
 800fb0c:	b086      	sub	sp, #24
 800fb0e:	af02      	add	r7, sp, #8
 800fb10:	60f8      	str	r0, [r7, #12]
 800fb12:	607b      	str	r3, [r7, #4]
 800fb14:	460b      	mov	r3, r1
 800fb16:	817b      	strh	r3, [r7, #10]
 800fb18:	4613      	mov	r3, r2
 800fb1a:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_RESPONSE; // Code
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	2203      	movs	r2, #3
 800fb20:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	7a7a      	ldrb	r2, [r7, #9]
 800fb28:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	2208      	movs	r2, #8
 800fb30:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	2200      	movs	r2, #0
 800fb38:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	781a      	ldrb	r2, [r3, #0]
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	785a      	ldrb	r2, [r3, #1]
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800fb50:	69bb      	ldr	r3, [r7, #24]
 800fb52:	781a      	ldrb	r2, [r3, #0]
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800fb5a:	69bb      	ldr	r3, [r7, #24]
 800fb5c:	785a      	ldrb	r2, [r3, #1]
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = result; // Result: Pending or Success
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	7f3a      	ldrb	r2, [r7, #28]
 800fb68:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00; // No further information
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	2200      	movs	r2, #0
 800fb78:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	2200      	movs	r2, #0
 800fb80:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	f203 1209 	addw	r2, r3, #265	; 0x109
 800fb8a:	8979      	ldrh	r1, [r7, #10]
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	9301      	str	r3, [sp, #4]
 800fb90:	2301      	movs	r3, #1
 800fb92:	9300      	str	r3, [sp, #0]
 800fb94:	230c      	movs	r3, #12
 800fb96:	68f8      	ldr	r0, [r7, #12]
 800fb98:	f7ff feea 	bl	800f970 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800fb9c:	bf00      	nop
 800fb9e:	3710      	adds	r7, #16
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}

0800fba4 <_ZN3BTD20l2cap_config_requestEthPh>:

void BTD::l2cap_config_request(uint16_t handle, uint8_t rxid, uint8_t* dcid) {
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b086      	sub	sp, #24
 800fba8:	af02      	add	r7, sp, #8
 800fbaa:	60f8      	str	r0, [r7, #12]
 800fbac:	607b      	str	r3, [r7, #4]
 800fbae:	460b      	mov	r3, r1
 800fbb0:	817b      	strh	r3, [r7, #10]
 800fbb2:	4613      	mov	r3, r2
 800fbb4:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_REQUEST; // Code
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	2204      	movs	r2, #4
 800fbba:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	7a7a      	ldrb	r2, [r7, #9]
 800fbc2:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	2208      	movs	r2, #8
 800fbca:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	781a      	ldrb	r2, [r3, #0]
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	785a      	ldrb	r2, [r3, #1]
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flags
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	2200      	movs	r2, #0
 800fbee:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x01; // Config Opt: type = MTU (Maximum Transmission Unit) - Hint
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	2201      	movs	r2, #1
 800fbfe:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x02; // Config Opt: length
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	2202      	movs	r2, #2
 800fc06:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0xFF; // MTU
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	22ff      	movs	r2, #255	; 0xff
 800fc0e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0xFF;
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	22ff      	movs	r2, #255	; 0xff
 800fc16:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	f203 1209 	addw	r2, r3, #265	; 0x109
 800fc20:	8979      	ldrh	r1, [r7, #10]
 800fc22:	2300      	movs	r3, #0
 800fc24:	9301      	str	r3, [sp, #4]
 800fc26:	2301      	movs	r3, #1
 800fc28:	9300      	str	r3, [sp, #0]
 800fc2a:	230c      	movs	r3, #12
 800fc2c:	68f8      	ldr	r0, [r7, #12]
 800fc2e:	f7ff fe9f 	bl	800f970 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800fc32:	bf00      	nop
 800fc34:	3710      	adds	r7, #16
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}

0800fc3a <_ZN3BTD21l2cap_config_responseEthPh>:

void BTD::l2cap_config_response(uint16_t handle, uint8_t rxid, uint8_t* scid) {
 800fc3a:	b580      	push	{r7, lr}
 800fc3c:	b086      	sub	sp, #24
 800fc3e:	af02      	add	r7, sp, #8
 800fc40:	60f8      	str	r0, [r7, #12]
 800fc42:	607b      	str	r3, [r7, #4]
 800fc44:	460b      	mov	r3, r1
 800fc46:	817b      	strh	r3, [r7, #10]
 800fc48:	4613      	mov	r3, r2
 800fc4a:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_RESPONSE; // Code
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	2205      	movs	r2, #5
 800fc50:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	7a7a      	ldrb	r2, [r7, #9]
 800fc58:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x0A; // Length
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	220a      	movs	r2, #10
 800fc60:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	2200      	movs	r2, #0
 800fc68:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = scid[0]; // Source CID
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	781a      	ldrb	r2, [r3, #0]
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = scid[1];
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	785a      	ldrb	r2, [r3, #1]
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flag
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	2200      	movs	r2, #0
 800fc84:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00; // Result
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	2200      	movs	r2, #0
 800fc94:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x01; // Config
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	2201      	movs	r2, #1
 800fca4:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x02;
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	2202      	movs	r2, #2
 800fcac:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
        l2capoutbuf[12] = 0xA0;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	22a0      	movs	r2, #160	; 0xa0
 800fcb4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
        l2capoutbuf[13] = 0x02;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	2202      	movs	r2, #2
 800fcbc:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

        L2CAP_Command(handle, l2capoutbuf, 14);
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	f203 1209 	addw	r2, r3, #265	; 0x109
 800fcc6:	8979      	ldrh	r1, [r7, #10]
 800fcc8:	2300      	movs	r3, #0
 800fcca:	9301      	str	r3, [sp, #4]
 800fccc:	2301      	movs	r3, #1
 800fcce:	9300      	str	r3, [sp, #0]
 800fcd0:	230e      	movs	r3, #14
 800fcd2:	68f8      	ldr	r0, [r7, #12]
 800fcd4:	f7ff fe4c 	bl	800f970 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800fcd8:	bf00      	nop
 800fcda:	3710      	adds	r7, #16
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bd80      	pop	{r7, pc}

0800fce0 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>:

void BTD::l2cap_disconnection_request(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b086      	sub	sp, #24
 800fce4:	af02      	add	r7, sp, #8
 800fce6:	60f8      	str	r0, [r7, #12]
 800fce8:	607b      	str	r3, [r7, #4]
 800fcea:	460b      	mov	r3, r1
 800fcec:	817b      	strh	r3, [r7, #10]
 800fcee:	4613      	mov	r3, r2
 800fcf0:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_REQUEST; // Code
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	2206      	movs	r2, #6
 800fcf6:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	7a7a      	ldrb	r2, [r7, #9]
 800fcfe:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	2204      	movs	r2, #4
 800fd06:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	781a      	ldrb	r2, [r3, #0]
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	785a      	ldrb	r2, [r3, #1]
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800fd26:	69bb      	ldr	r3, [r7, #24]
 800fd28:	781a      	ldrb	r2, [r3, #0]
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800fd30:	69bb      	ldr	r3, [r7, #24]
 800fd32:	785a      	ldrb	r2, [r3, #1]
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	f203 1209 	addw	r2, r3, #265	; 0x109
 800fd40:	8979      	ldrh	r1, [r7, #10]
 800fd42:	2300      	movs	r3, #0
 800fd44:	9301      	str	r3, [sp, #4]
 800fd46:	2301      	movs	r3, #1
 800fd48:	9300      	str	r3, [sp, #0]
 800fd4a:	2308      	movs	r3, #8
 800fd4c:	68f8      	ldr	r0, [r7, #12]
 800fd4e:	f7ff fe0f 	bl	800f970 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800fd52:	bf00      	nop
 800fd54:	3710      	adds	r7, #16
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}

0800fd5a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>:

void BTD::l2cap_disconnection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800fd5a:	b580      	push	{r7, lr}
 800fd5c:	b086      	sub	sp, #24
 800fd5e:	af02      	add	r7, sp, #8
 800fd60:	60f8      	str	r0, [r7, #12]
 800fd62:	607b      	str	r3, [r7, #4]
 800fd64:	460b      	mov	r3, r1
 800fd66:	817b      	strh	r3, [r7, #10]
 800fd68:	4613      	mov	r3, r2
 800fd6a:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_RESPONSE; // Code
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	2207      	movs	r2, #7
 800fd70:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	7a7a      	ldrb	r2, [r7, #9]
 800fd78:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	2204      	movs	r2, #4
 800fd80:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	2200      	movs	r2, #0
 800fd88:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	781a      	ldrb	r2, [r3, #0]
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	785a      	ldrb	r2, [r3, #1]
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800fda0:	69bb      	ldr	r3, [r7, #24]
 800fda2:	781a      	ldrb	r2, [r3, #0]
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800fdaa:	69bb      	ldr	r3, [r7, #24]
 800fdac:	785a      	ldrb	r2, [r3, #1]
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	f203 1209 	addw	r2, r3, #265	; 0x109
 800fdba:	8979      	ldrh	r1, [r7, #10]
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	9301      	str	r3, [sp, #4]
 800fdc0:	2301      	movs	r3, #1
 800fdc2:	9300      	str	r3, [sp, #0]
 800fdc4:	2308      	movs	r3, #8
 800fdc6:	68f8      	ldr	r0, [r7, #12]
 800fdc8:	f7ff fdd2 	bl	800f970 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800fdcc:	bf00      	nop
 800fdce:	3710      	adds	r7, #16
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bd80      	pop	{r7, pc}

0800fdd4 <_ZN3BTD26l2cap_information_responseEthhh>:

void BTD::l2cap_information_response(uint16_t handle, uint8_t rxid, uint8_t infoTypeLow, uint8_t infoTypeHigh) {
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b084      	sub	sp, #16
 800fdd8:	af02      	add	r7, sp, #8
 800fdda:	6078      	str	r0, [r7, #4]
 800fddc:	4608      	mov	r0, r1
 800fdde:	4611      	mov	r1, r2
 800fde0:	461a      	mov	r2, r3
 800fde2:	4603      	mov	r3, r0
 800fde4:	807b      	strh	r3, [r7, #2]
 800fde6:	460b      	mov	r3, r1
 800fde8:	707b      	strb	r3, [r7, #1]
 800fdea:	4613      	mov	r3, r2
 800fdec:	703b      	strb	r3, [r7, #0]
        l2capoutbuf[0] = L2CAP_CMD_INFORMATION_RESPONSE; // Code
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	220b      	movs	r2, #11
 800fdf2:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	787a      	ldrb	r2, [r7, #1]
 800fdfa:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2208      	movs	r2, #8
 800fe02:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = infoTypeLow;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	783a      	ldrb	r2, [r7, #0]
 800fe12:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = infoTypeHigh;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	7c3a      	ldrb	r2, [r7, #16]
 800fe1a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Result = success
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	2200      	movs	r2, #0
 800fe22:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00; // Result = success
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	2200      	movs	r2, #0
 800fe32:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	2200      	movs	r2, #0
 800fe3a:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2200      	movs	r2, #0
 800fe42:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2200      	movs	r2, #0
 800fe4a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	f203 1209 	addw	r2, r3, #265	; 0x109
 800fe54:	8879      	ldrh	r1, [r7, #2]
 800fe56:	2300      	movs	r3, #0
 800fe58:	9301      	str	r3, [sp, #4]
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	9300      	str	r3, [sp, #0]
 800fe5e:	230c      	movs	r3, #12
 800fe60:	6878      	ldr	r0, [r7, #4]
 800fe62:	f7ff fd85 	bl	800f970 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800fe66:	bf00      	nop
 800fe68:	3708      	adds	r7, #8
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}

0800fe6e <_ZN3BTD9setBdaddrEPh>:

/* PS3 Commands - only set Bluetooth address is implemented in this library */
void BTD::setBdaddr(uint8_t* bdaddr) {
 800fe6e:	b580      	push	{r7, lr}
 800fe70:	b08e      	sub	sp, #56	; 0x38
 800fe72:	af08      	add	r7, sp, #32
 800fe74:	6078      	str	r0, [r7, #4]
 800fe76:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[8];
        buf[0] = 0x01;
 800fe78:	2301      	movs	r3, #1
 800fe7a:	733b      	strb	r3, [r7, #12]
        buf[1] = 0x00;
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	737b      	strb	r3, [r7, #13]

        for(uint8_t i = 0; i < 6; i++)
 800fe80:	2300      	movs	r3, #0
 800fe82:	75fb      	strb	r3, [r7, #23]
 800fe84:	7dfb      	ldrb	r3, [r7, #23]
 800fe86:	2b05      	cmp	r3, #5
 800fe88:	d811      	bhi.n	800feae <_ZN3BTD9setBdaddrEPh+0x40>
                buf[i + 2] = bdaddr[5 - i]; // Copy into buffer, has to be written reversed, so it is MSB first
 800fe8a:	7dfb      	ldrb	r3, [r7, #23]
 800fe8c:	f1c3 0305 	rsb	r3, r3, #5
 800fe90:	461a      	mov	r2, r3
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	441a      	add	r2, r3
 800fe96:	7dfb      	ldrb	r3, [r7, #23]
 800fe98:	3302      	adds	r3, #2
 800fe9a:	7812      	ldrb	r2, [r2, #0]
 800fe9c:	f107 0118 	add.w	r1, r7, #24
 800fea0:	440b      	add	r3, r1
 800fea2:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800fea6:	7dfb      	ldrb	r3, [r7, #23]
 800fea8:	3301      	adds	r3, #1
 800feaa:	75fb      	strb	r3, [r7, #23]
 800feac:	e7ea      	b.n	800fe84 <_ZN3BTD9setBdaddrEPh+0x16>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0xF5, 0x03, 0x00, 8, 8, buf, NULL);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800febe:	2300      	movs	r3, #0
 800fec0:	9307      	str	r3, [sp, #28]
 800fec2:	f107 030c 	add.w	r3, r7, #12
 800fec6:	9306      	str	r3, [sp, #24]
 800fec8:	2308      	movs	r3, #8
 800feca:	9305      	str	r3, [sp, #20]
 800fecc:	2308      	movs	r3, #8
 800fece:	9304      	str	r3, [sp, #16]
 800fed0:	2300      	movs	r3, #0
 800fed2:	9303      	str	r3, [sp, #12]
 800fed4:	2303      	movs	r3, #3
 800fed6:	9302      	str	r3, [sp, #8]
 800fed8:	23f5      	movs	r3, #245	; 0xf5
 800feda:	9301      	str	r3, [sp, #4]
 800fedc:	2309      	movs	r3, #9
 800fede:	9300      	str	r3, [sp, #0]
 800fee0:	2321      	movs	r3, #33	; 0x21
 800fee2:	f002 f81c 	bl	8011f1e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800fee6:	bf00      	nop
 800fee8:	3718      	adds	r7, #24
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}

0800feee <_ZN3BTD13setMoveBdaddrEPh>:

void BTD::setMoveBdaddr(uint8_t* bdaddr) {
 800feee:	b580      	push	{r7, lr}
 800fef0:	b08e      	sub	sp, #56	; 0x38
 800fef2:	af08      	add	r7, sp, #32
 800fef4:	6078      	str	r0, [r7, #4]
 800fef6:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[11];
        buf[0] = 0x05;
 800fef8:	2305      	movs	r3, #5
 800fefa:	733b      	strb	r3, [r7, #12]
        buf[7] = 0x10;
 800fefc:	2310      	movs	r3, #16
 800fefe:	74fb      	strb	r3, [r7, #19]
        buf[8] = 0x01;
 800ff00:	2301      	movs	r3, #1
 800ff02:	753b      	strb	r3, [r7, #20]
        buf[9] = 0x02;
 800ff04:	2302      	movs	r3, #2
 800ff06:	757b      	strb	r3, [r7, #21]
        buf[10] = 0x12;
 800ff08:	2312      	movs	r3, #18
 800ff0a:	75bb      	strb	r3, [r7, #22]

        for(uint8_t i = 0; i < 6; i++)
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	75fb      	strb	r3, [r7, #23]
 800ff10:	7dfb      	ldrb	r3, [r7, #23]
 800ff12:	2b05      	cmp	r3, #5
 800ff14:	d80e      	bhi.n	800ff34 <_ZN3BTD13setMoveBdaddrEPh+0x46>
                buf[i + 1] = bdaddr[i];
 800ff16:	7dfb      	ldrb	r3, [r7, #23]
 800ff18:	683a      	ldr	r2, [r7, #0]
 800ff1a:	441a      	add	r2, r3
 800ff1c:	7dfb      	ldrb	r3, [r7, #23]
 800ff1e:	3301      	adds	r3, #1
 800ff20:	7812      	ldrb	r2, [r2, #0]
 800ff22:	f107 0118 	add.w	r1, r7, #24
 800ff26:	440b      	add	r3, r1
 800ff28:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800ff2c:	7dfb      	ldrb	r3, [r7, #23]
 800ff2e:	3301      	adds	r3, #1
 800ff30:	75fb      	strb	r3, [r7, #23]
 800ff32:	e7ed      	b.n	800ff10 <_ZN3BTD13setMoveBdaddrEPh+0x22>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0x05), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0x05, 0x03, 0x00, 11, 11, buf, NULL);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ff44:	2300      	movs	r3, #0
 800ff46:	9307      	str	r3, [sp, #28]
 800ff48:	f107 030c 	add.w	r3, r7, #12
 800ff4c:	9306      	str	r3, [sp, #24]
 800ff4e:	230b      	movs	r3, #11
 800ff50:	9305      	str	r3, [sp, #20]
 800ff52:	230b      	movs	r3, #11
 800ff54:	9304      	str	r3, [sp, #16]
 800ff56:	2300      	movs	r3, #0
 800ff58:	9303      	str	r3, [sp, #12]
 800ff5a:	2303      	movs	r3, #3
 800ff5c:	9302      	str	r3, [sp, #8]
 800ff5e:	2305      	movs	r3, #5
 800ff60:	9301      	str	r3, [sp, #4]
 800ff62:	2309      	movs	r3, #9
 800ff64:	9300      	str	r3, [sp, #0]
 800ff66:	2321      	movs	r3, #33	; 0x21
 800ff68:	f001 ffd9 	bl	8011f1e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800ff6c:	bf00      	nop
 800ff6e:	3718      	adds	r7, #24
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}

0800ff74 <_ZN13USBReadParserC1Ev>:
class USBReadParser {
 800ff74:	b480      	push	{r7}
 800ff76:	b083      	sub	sp, #12
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
 800ff7c:	4a04      	ldr	r2, [pc, #16]	; (800ff90 <_ZN13USBReadParserC1Ev+0x1c>)
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	601a      	str	r2, [r3, #0]
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	4618      	mov	r0, r3
 800ff86:	370c      	adds	r7, #12
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8e:	4770      	bx	lr
 800ff90:	08014a0c 	.word	0x08014a0c

0800ff94 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b082      	sub	sp, #8
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
 800ff9c:	6039      	str	r1, [r7, #0]
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	f7ff ffe7 	bl	800ff74 <_ZN13USBReadParserC1Ev>
 800ffa6:	4a21      	ldr	r2, [pc, #132]	; (801002c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	601a      	str	r2, [r3, #0]
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	683a      	ldr	r2, [r7, #0]
 800ffb0:	605a      	str	r2, [r3, #4]
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	3308      	adds	r3, #8
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f7fd fb65 	bl	800d686 <_ZN16MultiValueBufferC1Ev>
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	3310      	adds	r3, #16
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	f7fd fb77 	bl	800d6b4 <_ZN20MultiByteValueParserC1Ev>
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	3318      	adds	r3, #24
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f7fd fb9e 	bl	800d70c <_ZN11ByteSkipperC1Ev>
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2200      	movs	r2, #0
 800ffdc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	2200      	movs	r2, #0
 800ffec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f103 0220 	add.w	r2, r3, #32
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	f103 0210 	add.w	r2, r3, #16
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	3308      	adds	r3, #8
 8010006:	4619      	mov	r1, r3
 8010008:	4610      	mov	r0, r2
 801000a:	f7fd fb67 	bl	800d6dc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	f103 0218 	add.w	r2, r3, #24
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	3308      	adds	r3, #8
 8010018:	4619      	mov	r1, r3
 801001a:	4610      	mov	r0, r2
 801001c:	f7fd fb8a 	bl	800d734 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	4618      	mov	r0, r3
 8010024:	3708      	adds	r7, #8
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}
 801002a:	bf00      	nop
 801002c:	080149b4 	.word	0x080149b4

08010030 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 8010030:	b580      	push	{r7, lr}
 8010032:	b082      	sub	sp, #8
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
 8010038:	6039      	str	r1, [r7, #0]
UseOr(false) {
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	4618      	mov	r0, r3
 801003e:	f7ff ff99 	bl	800ff74 <_ZN13USBReadParserC1Ev>
 8010042:	4a21      	ldr	r2, [pc, #132]	; (80100c8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	601a      	str	r2, [r3, #0]
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	683a      	ldr	r2, [r7, #0]
 801004c:	605a      	str	r2, [r3, #4]
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	3308      	adds	r3, #8
 8010052:	4618      	mov	r0, r3
 8010054:	f7fd fb17 	bl	800d686 <_ZN16MultiValueBufferC1Ev>
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	3310      	adds	r3, #16
 801005c:	4618      	mov	r0, r3
 801005e:	f7fd fb29 	bl	800d6b4 <_ZN20MultiByteValueParserC1Ev>
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	3318      	adds	r3, #24
 8010066:	4618      	mov	r0, r3
 8010068:	f7fd fb50 	bl	800d70c <_ZN11ByteSkipperC1Ev>
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2200      	movs	r2, #0
 8010070:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2200      	movs	r2, #0
 8010078:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2200      	movs	r2, #0
 8010080:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	2200      	movs	r2, #0
 8010088:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	f103 0220 	add.w	r2, r3, #32
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f103 0210 	add.w	r2, r3, #16
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	3308      	adds	r3, #8
 80100a2:	4619      	mov	r1, r3
 80100a4:	4610      	mov	r0, r2
 80100a6:	f7fd fb19 	bl	800d6dc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	f103 0218 	add.w	r2, r3, #24
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	3308      	adds	r3, #8
 80100b4:	4619      	mov	r1, r3
 80100b6:	4610      	mov	r0, r2
 80100b8:	f7fd fb3c 	bl	800d734 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	4618      	mov	r0, r3
 80100c0:	3708      	adds	r7, #8
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd80      	pop	{r7, pc}
 80100c6:	bf00      	nop
 80100c8:	080149a8 	.word	0x080149a8

080100cc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b086      	sub	sp, #24
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	60f8      	str	r0, [r7, #12]
 80100d4:	607a      	str	r2, [r7, #4]
 80100d6:	603b      	str	r3, [r7, #0]
 80100d8:	460b      	mov	r3, r1
 80100da:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 80100dc:	897b      	ldrh	r3, [r7, #10]
 80100de:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	613b      	str	r3, [r7, #16]

        while(cntdn)
 80100e4:	8afb      	ldrh	r3, [r7, #22]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d00f      	beq.n	801010a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 80100ea:	f107 0216 	add.w	r2, r7, #22
 80100ee:	f107 0310 	add.w	r3, r7, #16
 80100f2:	4619      	mov	r1, r3
 80100f4:	68f8      	ldr	r0, [r7, #12]
 80100f6:	f000 f82d 	bl	8010154 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 80100fa:	4603      	mov	r3, r0
 80100fc:	f083 0301 	eor.w	r3, r3, #1
 8010100:	b2db      	uxtb	r3, r3
 8010102:	2b00      	cmp	r3, #0
 8010104:	d100      	bne.n	8010108 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 8010106:	e7ed      	b.n	80100e4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 8010108:	bf00      	nop
}
 801010a:	3718      	adds	r7, #24
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}

08010110 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt>:
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 8010110:	b580      	push	{r7, lr}
 8010112:	b086      	sub	sp, #24
 8010114:	af00      	add	r7, sp, #0
 8010116:	60f8      	str	r0, [r7, #12]
 8010118:	607a      	str	r2, [r7, #4]
 801011a:	603b      	str	r3, [r7, #0]
 801011c:	460b      	mov	r3, r1
 801011e:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 8010120:	897b      	ldrh	r3, [r7, #10]
 8010122:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	613b      	str	r3, [r7, #16]
        while(cntdn)
 8010128:	8afb      	ldrh	r3, [r7, #22]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d00f      	beq.n	801014e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 801012e:	f107 0216 	add.w	r2, r7, #22
 8010132:	f107 0310 	add.w	r3, r7, #16
 8010136:	4619      	mov	r1, r3
 8010138:	68f8      	ldr	r0, [r7, #12]
 801013a:	f000 f981 	bl	8010440 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 801013e:	4603      	mov	r3, r0
 8010140:	f083 0301 	eor.w	r3, r3, #1
 8010144:	b2db      	uxtb	r3, r3
 8010146:	2b00      	cmp	r3, #0
 8010148:	d100      	bne.n	801014c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 801014a:	e7ed      	b.n	8010128 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 801014c:	bf00      	nop
}
 801014e:	3718      	adds	r7, #24
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}

08010154 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 8010154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010156:	b089      	sub	sp, #36	; 0x24
 8010158:	af02      	add	r7, sp, #8
 801015a:	60f8      	str	r0, [r7, #12]
 801015c:	60b9      	str	r1, [r7, #8]
 801015e:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	3320      	adds	r3, #32
 8010164:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	3320      	adds	r3, #32
 801016a:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010172:	2b04      	cmp	r3, #4
 8010174:	f200 815e 	bhi.w	8010434 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 8010178:	a201      	add	r2, pc, #4	; (adr r2, 8010180 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 801017a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801017e:	bf00      	nop
 8010180:	08010195 	.word	0x08010195
 8010184:	080101b5 	.word	0x080101b5
 8010188:	080101f7 	.word	0x080101f7
 801018c:	0801020b 	.word	0x0801020b
 8010190:	080102cf 	.word	0x080102cf
                case 0:
                        theBuffer.valueSize = 2;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	2202      	movs	r2, #2
 8010198:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	f103 0210 	add.w	r2, r3, #16
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	3308      	adds	r3, #8
 80101a4:	4619      	mov	r1, r3
 80101a6:	4610      	mov	r0, r2
 80101a8:	f7fd fa98 	bl	800d6dc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	2201      	movs	r2, #1
 80101b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	3310      	adds	r3, #16
 80101b8:	687a      	ldr	r2, [r7, #4]
 80101ba:	68b9      	ldr	r1, [r7, #8]
 80101bc:	4618      	mov	r0, r3
 80101be:	f003 fa49 	bl	8013654 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80101c2:	4603      	mov	r3, r0
 80101c4:	f083 0301 	eor.w	r3, r3, #1
 80101c8:	b2db      	uxtb	r3, r3
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d001      	beq.n	80101d2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 80101ce:	2300      	movs	r3, #0
 80101d0:	e131      	b.n	8010436 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	f8d3 3009 	ldr.w	r3, [r3, #9]
 80101d8:	781a      	ldrb	r2, [r3, #0]
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	f8d3 3009 	ldr.w	r3, [r3, #9]
 80101e6:	785a      	ldrb	r2, [r3, #1]
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	2202      	movs	r2, #2
 80101f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	3320      	adds	r3, #32
 80101fa:	1c9a      	adds	r2, r3, #2
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	2203      	movs	r2, #3
 8010206:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 3:
                        switch(dscrType) {
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010210:	3b02      	subs	r3, #2
 8010212:	2b1f      	cmp	r3, #31
 8010214:	d847      	bhi.n	80102a6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 8010216:	a201      	add	r2, pc, #4	; (adr r2, 801021c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 8010218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801021c:	080102a7 	.word	0x080102a7
 8010220:	080102a7 	.word	0x080102a7
 8010224:	0801029d 	.word	0x0801029d
 8010228:	080102a7 	.word	0x080102a7
 801022c:	080102a7 	.word	0x080102a7
 8010230:	080102a7 	.word	0x080102a7
 8010234:	080102a7 	.word	0x080102a7
 8010238:	080102a7 	.word	0x080102a7
 801023c:	080102a7 	.word	0x080102a7
 8010240:	080102a7 	.word	0x080102a7
 8010244:	080102a7 	.word	0x080102a7
 8010248:	080102a7 	.word	0x080102a7
 801024c:	080102a7 	.word	0x080102a7
 8010250:	080102a7 	.word	0x080102a7
 8010254:	080102a7 	.word	0x080102a7
 8010258:	080102a7 	.word	0x080102a7
 801025c:	080102a7 	.word	0x080102a7
 8010260:	080102a7 	.word	0x080102a7
 8010264:	080102a7 	.word	0x080102a7
 8010268:	080102a7 	.word	0x080102a7
 801026c:	080102a7 	.word	0x080102a7
 8010270:	080102a7 	.word	0x080102a7
 8010274:	080102a7 	.word	0x080102a7
 8010278:	080102a7 	.word	0x080102a7
 801027c:	080102a7 	.word	0x080102a7
 8010280:	080102a7 	.word	0x080102a7
 8010284:	080102a7 	.word	0x080102a7
 8010288:	080102a7 	.word	0x080102a7
 801028c:	080102a7 	.word	0x080102a7
 8010290:	080102a7 	.word	0x080102a7
 8010294:	080102a7 	.word	0x080102a7
 8010298:	080102a7 	.word	0x080102a7
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	2200      	movs	r2, #0
 80102a0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 80102a4:	bf00      	nop
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
                        }
                        theBuffer.valueSize = dscrLen - 2;
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80102ac:	3b02      	subs	r3, #2
 80102ae:	b2da      	uxtb	r2, r3
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	f103 0210 	add.w	r2, r3, #16
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	3308      	adds	r3, #8
 80102be:	4619      	mov	r1, r3
 80102c0:	4610      	mov	r0, r2
 80102c2:	f7fd fa0b 	bl	800d6dc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	2204      	movs	r2, #4
 80102ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 4:
                        switch(dscrType) {
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80102d4:	2b05      	cmp	r3, #5
 80102d6:	d055      	beq.n	8010384 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 80102d8:	2b05      	cmp	r3, #5
 80102da:	f300 8085 	bgt.w	80103e8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 80102de:	2b02      	cmp	r3, #2
 80102e0:	d002      	beq.n	80102e8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 80102e2:	2b04      	cmp	r3, #4
 80102e4:	d015      	beq.n	8010312 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 80102e6:	e07f      	b.n	80103e8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	3310      	adds	r3, #16
 80102ec:	687a      	ldr	r2, [r7, #4]
 80102ee:	68b9      	ldr	r1, [r7, #8]
 80102f0:	4618      	mov	r0, r3
 80102f2:	f003 f9af 	bl	8013654 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80102f6:	4603      	mov	r3, r0
 80102f8:	f083 0301 	eor.w	r3, r3, #1
 80102fc:	b2db      	uxtb	r3, r3
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d001      	beq.n	8010306 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 8010302:	2300      	movs	r3, #0
 8010304:	e097      	b.n	8010436 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	795a      	ldrb	r2, [r3, #5]
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 8010310:	e086      	b.n	8010420 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	3310      	adds	r3, #16
 8010316:	687a      	ldr	r2, [r7, #4]
 8010318:	68b9      	ldr	r1, [r7, #8]
 801031a:	4618      	mov	r0, r3
 801031c:	f003 f99a 	bl	8013654 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8010320:	4603      	mov	r3, r0
 8010322:	f083 0301 	eor.w	r3, r3, #1
 8010326:	b2db      	uxtb	r3, r3
 8010328:	2b00      	cmp	r3, #0
 801032a:	d001      	beq.n	8010330 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 801032c:	2300      	movs	r3, #0
 801032e:	e082      	b.n	8010436 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 8010330:	693b      	ldr	r3, [r7, #16]
 8010332:	795b      	ldrb	r3, [r3, #5]
 8010334:	2be0      	cmp	r3, #224	; 0xe0
 8010336:	d16c      	bne.n	8010412 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 8010338:	693b      	ldr	r3, [r7, #16]
 801033a:	799b      	ldrb	r3, [r3, #6]
 801033c:	2b01      	cmp	r3, #1
 801033e:	d16a      	bne.n	8010416 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                                break;
                                        if(UseOr) {
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010346:	2b00      	cmp	r3, #0
 8010348:	d004      	beq.n	8010354 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 801034a:	693b      	ldr	r3, [r7, #16]
 801034c:	79db      	ldrb	r3, [r3, #7]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d104      	bne.n	801035c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 8010352:	e065      	b.n	8010420 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 8010354:	693b      	ldr	r3, [r7, #16]
 8010356:	79db      	ldrb	r3, [r3, #7]
 8010358:	2b01      	cmp	r3, #1
 801035a:	d15e      	bne.n	801041a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                                        break;
                                        }
                                        isGoodInterface = true;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	2201      	movs	r2, #1
 8010360:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 8010364:	693b      	ldr	r3, [r7, #16]
 8010366:	789a      	ldrb	r2, [r3, #2]
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 801036e:	693b      	ldr	r3, [r7, #16]
 8010370:	78da      	ldrb	r2, [r3, #3]
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 8010378:	693b      	ldr	r3, [r7, #16]
 801037a:	79da      	ldrb	r2, [r3, #7]
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 8010382:	e04d      	b.n	8010420 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	3310      	adds	r3, #16
 8010388:	687a      	ldr	r2, [r7, #4]
 801038a:	68b9      	ldr	r1, [r7, #8]
 801038c:	4618      	mov	r0, r3
 801038e:	f003 f961 	bl	8013654 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8010392:	4603      	mov	r3, r0
 8010394:	f083 0301 	eor.w	r3, r3, #1
 8010398:	b2db      	uxtb	r3, r3
 801039a:	2b00      	cmp	r3, #0
 801039c:	d001      	beq.n	80103a2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 801039e:	2300      	movs	r3, #0
 80103a0:	e049      	b.n	8010436 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d038      	beq.n	801041e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	685b      	ldr	r3, [r3, #4]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d034      	beq.n	801041e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	6858      	ldr	r0, [r3, #4]
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	685b      	ldr	r3, [r3, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	681c      	ldr	r4, [r3, #0]
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80103d8:	68fa      	ldr	r2, [r7, #12]
 80103da:	3220      	adds	r2, #32
 80103dc:	9201      	str	r2, [sp, #4]
 80103de:	9300      	str	r3, [sp, #0]
 80103e0:	4633      	mov	r3, r6
 80103e2:	462a      	mov	r2, r5
 80103e4:	47a0      	blx	r4
                                        break;
 80103e6:	e01a      	b.n	801041e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	f103 0018 	add.w	r0, r3, #24
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80103f4:	b29b      	uxth	r3, r3
 80103f6:	3b02      	subs	r3, #2
 80103f8:	b29b      	uxth	r3, r3
 80103fa:	687a      	ldr	r2, [r7, #4]
 80103fc:	68b9      	ldr	r1, [r7, #8]
 80103fe:	f7fd f9ac 	bl	800d75a <_ZN11ByteSkipper4SkipEPPhPtt>
 8010402:	4603      	mov	r3, r0
 8010404:	f083 0301 	eor.w	r3, r3, #1
 8010408:	b2db      	uxtb	r3, r3
 801040a:	2b00      	cmp	r3, #0
 801040c:	d008      	beq.n	8010420 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 801040e:	2300      	movs	r3, #0
 8010410:	e011      	b.n	8010436 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 8010412:	bf00      	nop
 8010414:	e004      	b.n	8010420 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 8010416:	bf00      	nop
 8010418:	e002      	b.n	8010420 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 801041a:	bf00      	nop
 801041c:	e000      	b.n	8010420 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 801041e:	bf00      	nop
                        }
                        theBuffer.pValue = varBuffer;
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	f103 0220 	add.w	r2, r3, #32
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	2200      	movs	r2, #0
 8010430:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
        return true;
 8010434:	2301      	movs	r3, #1
}
 8010436:	4618      	mov	r0, r3
 8010438:	371c      	adds	r7, #28
 801043a:	46bd      	mov	sp, r7
 801043c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801043e:	bf00      	nop

08010440 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 8010440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010442:	b089      	sub	sp, #36	; 0x24
 8010444:	af02      	add	r7, sp, #8
 8010446:	60f8      	str	r0, [r7, #12]
 8010448:	60b9      	str	r1, [r7, #8]
 801044a:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	3320      	adds	r3, #32
 8010450:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	3320      	adds	r3, #32
 8010456:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801045e:	2b04      	cmp	r3, #4
 8010460:	f200 815e 	bhi.w	8010720 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 8010464:	a201      	add	r2, pc, #4	; (adr r2, 801046c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 8010466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801046a:	bf00      	nop
 801046c:	08010481 	.word	0x08010481
 8010470:	080104a1 	.word	0x080104a1
 8010474:	080104e3 	.word	0x080104e3
 8010478:	080104f7 	.word	0x080104f7
 801047c:	080105bb 	.word	0x080105bb
                        theBuffer.valueSize = 2;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	2202      	movs	r2, #2
 8010484:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	f103 0210 	add.w	r2, r3, #16
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	3308      	adds	r3, #8
 8010490:	4619      	mov	r1, r3
 8010492:	4610      	mov	r0, r2
 8010494:	f7fd f922 	bl	800d6dc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	2201      	movs	r2, #1
 801049c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        if(!valParser.Parse(pp, pcntdn))
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	3310      	adds	r3, #16
 80104a4:	687a      	ldr	r2, [r7, #4]
 80104a6:	68b9      	ldr	r1, [r7, #8]
 80104a8:	4618      	mov	r0, r3
 80104aa:	f003 f8d3 	bl	8013654 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80104ae:	4603      	mov	r3, r0
 80104b0:	f083 0301 	eor.w	r3, r3, #1
 80104b4:	b2db      	uxtb	r3, r3
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d001      	beq.n	80104be <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 80104ba:	2300      	movs	r3, #0
 80104bc:	e131      	b.n	8010722 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	f8d3 3009 	ldr.w	r3, [r3, #9]
 80104c4:	781a      	ldrb	r2, [r3, #0]
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	f8d3 3009 	ldr.w	r3, [r3, #9]
 80104d2:	785a      	ldrb	r2, [r3, #1]
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	2202      	movs	r2, #2
 80104de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        theBuffer.pValue = varBuffer + 2;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	3320      	adds	r3, #32
 80104e6:	1c9a      	adds	r2, r3, #2
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	2203      	movs	r2, #3
 80104f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80104fc:	3b02      	subs	r3, #2
 80104fe:	2b1f      	cmp	r3, #31
 8010500:	d847      	bhi.n	8010592 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 8010502:	a201      	add	r2, pc, #4	; (adr r2, 8010508 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 8010504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010508:	08010593 	.word	0x08010593
 801050c:	08010593 	.word	0x08010593
 8010510:	08010589 	.word	0x08010589
 8010514:	08010593 	.word	0x08010593
 8010518:	08010593 	.word	0x08010593
 801051c:	08010593 	.word	0x08010593
 8010520:	08010593 	.word	0x08010593
 8010524:	08010593 	.word	0x08010593
 8010528:	08010593 	.word	0x08010593
 801052c:	08010593 	.word	0x08010593
 8010530:	08010593 	.word	0x08010593
 8010534:	08010593 	.word	0x08010593
 8010538:	08010593 	.word	0x08010593
 801053c:	08010593 	.word	0x08010593
 8010540:	08010593 	.word	0x08010593
 8010544:	08010593 	.word	0x08010593
 8010548:	08010593 	.word	0x08010593
 801054c:	08010593 	.word	0x08010593
 8010550:	08010593 	.word	0x08010593
 8010554:	08010593 	.word	0x08010593
 8010558:	08010593 	.word	0x08010593
 801055c:	08010593 	.word	0x08010593
 8010560:	08010593 	.word	0x08010593
 8010564:	08010593 	.word	0x08010593
 8010568:	08010593 	.word	0x08010593
 801056c:	08010593 	.word	0x08010593
 8010570:	08010593 	.word	0x08010593
 8010574:	08010593 	.word	0x08010593
 8010578:	08010593 	.word	0x08010593
 801057c:	08010593 	.word	0x08010593
 8010580:	08010593 	.word	0x08010593
 8010584:	08010593 	.word	0x08010593
                                        isGoodInterface = false;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	2200      	movs	r2, #0
 801058c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 8010590:	bf00      	nop
                        theBuffer.valueSize = dscrLen - 2;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010598:	3b02      	subs	r3, #2
 801059a:	b2da      	uxtb	r2, r3
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	f103 0210 	add.w	r2, r3, #16
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	3308      	adds	r3, #8
 80105aa:	4619      	mov	r1, r3
 80105ac:	4610      	mov	r0, r2
 80105ae:	f7fd f895 	bl	800d6dc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	2204      	movs	r2, #4
 80105b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80105c0:	2b05      	cmp	r3, #5
 80105c2:	d055      	beq.n	8010670 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 80105c4:	2b05      	cmp	r3, #5
 80105c6:	f300 8085 	bgt.w	80106d4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 80105ca:	2b02      	cmp	r3, #2
 80105cc:	d002      	beq.n	80105d4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 80105ce:	2b04      	cmp	r3, #4
 80105d0:	d015      	beq.n	80105fe <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 80105d2:	e07f      	b.n	80106d4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                        if(!valParser.Parse(pp, pcntdn))
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	3310      	adds	r3, #16
 80105d8:	687a      	ldr	r2, [r7, #4]
 80105da:	68b9      	ldr	r1, [r7, #8]
 80105dc:	4618      	mov	r0, r3
 80105de:	f003 f839 	bl	8013654 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80105e2:	4603      	mov	r3, r0
 80105e4:	f083 0301 	eor.w	r3, r3, #1
 80105e8:	b2db      	uxtb	r3, r3
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d001      	beq.n	80105f2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 80105ee:	2300      	movs	r3, #0
 80105f0:	e097      	b.n	8010722 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	795a      	ldrb	r2, [r3, #5]
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 80105fc:	e086      	b.n	801070c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	3310      	adds	r3, #16
 8010602:	687a      	ldr	r2, [r7, #4]
 8010604:	68b9      	ldr	r1, [r7, #8]
 8010606:	4618      	mov	r0, r3
 8010608:	f003 f824 	bl	8013654 <_ZN20MultiByteValueParser5ParseEPPhPt>
 801060c:	4603      	mov	r3, r0
 801060e:	f083 0301 	eor.w	r3, r3, #1
 8010612:	b2db      	uxtb	r3, r3
 8010614:	2b00      	cmp	r3, #0
 8010616:	d001      	beq.n	801061c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 8010618:	2300      	movs	r3, #0
 801061a:	e082      	b.n	8010722 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 801061c:	693b      	ldr	r3, [r7, #16]
 801061e:	795b      	ldrb	r3, [r3, #5]
 8010620:	2bff      	cmp	r3, #255	; 0xff
 8010622:	d16c      	bne.n	80106fe <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 8010624:	693b      	ldr	r3, [r7, #16]
 8010626:	799b      	ldrb	r3, [r3, #6]
 8010628:	2b01      	cmp	r3, #1
 801062a:	d16a      	bne.n	8010702 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                        if(UseOr) {
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010632:	2b00      	cmp	r3, #0
 8010634:	d004      	beq.n	8010640 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 8010636:	693b      	ldr	r3, [r7, #16]
 8010638:	79db      	ldrb	r3, [r3, #7]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d104      	bne.n	8010648 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 801063e:	e065      	b.n	801070c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 8010640:	693b      	ldr	r3, [r7, #16]
 8010642:	79db      	ldrb	r3, [r3, #7]
 8010644:	2b01      	cmp	r3, #1
 8010646:	d15e      	bne.n	8010706 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                        isGoodInterface = true;
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	2201      	movs	r2, #1
 801064c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 8010650:	693b      	ldr	r3, [r7, #16]
 8010652:	789a      	ldrb	r2, [r3, #2]
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 801065a:	693b      	ldr	r3, [r7, #16]
 801065c:	78da      	ldrb	r2, [r3, #3]
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 8010664:	693b      	ldr	r3, [r7, #16]
 8010666:	79da      	ldrb	r2, [r3, #7]
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 801066e:	e04d      	b.n	801070c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	3310      	adds	r3, #16
 8010674:	687a      	ldr	r2, [r7, #4]
 8010676:	68b9      	ldr	r1, [r7, #8]
 8010678:	4618      	mov	r0, r3
 801067a:	f002 ffeb 	bl	8013654 <_ZN20MultiByteValueParser5ParseEPPhPt>
 801067e:	4603      	mov	r3, r0
 8010680:	f083 0301 	eor.w	r3, r3, #1
 8010684:	b2db      	uxtb	r3, r3
 8010686:	2b00      	cmp	r3, #0
 8010688:	d001      	beq.n	801068e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 801068a:	2300      	movs	r3, #0
 801068c:	e049      	b.n	8010722 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010694:	2b00      	cmp	r3, #0
 8010696:	d038      	beq.n	801070a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	685b      	ldr	r3, [r3, #4]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d034      	beq.n	801070a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	6858      	ldr	r0, [r3, #4]
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	685b      	ldr	r3, [r3, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	681c      	ldr	r4, [r3, #0]
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80106c4:	68fa      	ldr	r2, [r7, #12]
 80106c6:	3220      	adds	r2, #32
 80106c8:	9201      	str	r2, [sp, #4]
 80106ca:	9300      	str	r3, [sp, #0]
 80106cc:	4633      	mov	r3, r6
 80106ce:	462a      	mov	r2, r5
 80106d0:	47a0      	blx	r4
                                        break;
 80106d2:	e01a      	b.n	801070a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	f103 0018 	add.w	r0, r3, #24
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80106e0:	b29b      	uxth	r3, r3
 80106e2:	3b02      	subs	r3, #2
 80106e4:	b29b      	uxth	r3, r3
 80106e6:	687a      	ldr	r2, [r7, #4]
 80106e8:	68b9      	ldr	r1, [r7, #8]
 80106ea:	f7fd f836 	bl	800d75a <_ZN11ByteSkipper4SkipEPPhPtt>
 80106ee:	4603      	mov	r3, r0
 80106f0:	f083 0301 	eor.w	r3, r3, #1
 80106f4:	b2db      	uxtb	r3, r3
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d008      	beq.n	801070c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 80106fa:	2300      	movs	r3, #0
 80106fc:	e011      	b.n	8010722 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 80106fe:	bf00      	nop
 8010700:	e004      	b.n	801070c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 8010702:	bf00      	nop
 8010704:	e002      	b.n	801070c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 8010706:	bf00      	nop
 8010708:	e000      	b.n	801070c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 801070a:	bf00      	nop
                        theBuffer.pValue = varBuffer;
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	f103 0220 	add.w	r2, r3, #32
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	2200      	movs	r2, #0
 801071c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return true;
 8010720:	2301      	movs	r3, #1
}
 8010722:	4618      	mov	r0, r3
 8010724:	371c      	adds	r7, #28
 8010726:	46bd      	mov	sp, r7
 8010728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801072a:	bf00      	nop

0801072c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>:
        int8_t registerBluetoothService(BluetoothService *pService) {
 801072c:	b480      	push	{r7}
 801072e:	b085      	sub	sp, #20
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
 8010734:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 8010736:	2300      	movs	r3, #0
 8010738:	73fb      	strb	r3, [r7, #15]
 801073a:	7bfb      	ldrb	r3, [r7, #15]
 801073c:	2b03      	cmp	r3, #3
 801073e:	d815      	bhi.n	801076c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x40>
                        if(!btService[i]) {
 8010740:	7bfb      	ldrb	r3, [r7, #15]
 8010742:	687a      	ldr	r2, [r7, #4]
 8010744:	3318      	adds	r3, #24
 8010746:	009b      	lsls	r3, r3, #2
 8010748:	4413      	add	r3, r2
 801074a:	685b      	ldr	r3, [r3, #4]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d109      	bne.n	8010764 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x38>
                                btService[i] = pService;
 8010750:	7bfb      	ldrb	r3, [r7, #15]
 8010752:	687a      	ldr	r2, [r7, #4]
 8010754:	3318      	adds	r3, #24
 8010756:	009b      	lsls	r3, r3, #2
 8010758:	4413      	add	r3, r2
 801075a:	683a      	ldr	r2, [r7, #0]
 801075c:	605a      	str	r2, [r3, #4]
                                return i; // Return ID
 801075e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010762:	e005      	b.n	8010770 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x44>
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 8010764:	7bfb      	ldrb	r3, [r7, #15]
 8010766:	3301      	adds	r3, #1
 8010768:	73fb      	strb	r3, [r7, #15]
 801076a:	e7e6      	b.n	801073a <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0xe>
                return -1; // Error registering BluetoothService
 801076c:	f04f 33ff 	mov.w	r3, #4294967295
        };
 8010770:	4618      	mov	r0, r3
 8010772:	3714      	adds	r7, #20
 8010774:	46bd      	mov	sp, r7
 8010776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077a:	4770      	bx	lr

0801077c <_ZN16BluetoothServiceC1EP3BTD>:
};

/** All Bluetooth services should inherit this class. */
class BluetoothService {
public:
        BluetoothService(BTD *p) : pBtd(p) {
 801077c:	b580      	push	{r7, lr}
 801077e:	b082      	sub	sp, #8
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
 8010784:	6039      	str	r1, [r7, #0]
 8010786:	4a0a      	ldr	r2, [pc, #40]	; (80107b0 <_ZN16BluetoothServiceC1EP3BTD+0x34>)
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	601a      	str	r2, [r3, #0]
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	683a      	ldr	r2, [r7, #0]
 8010790:	609a      	str	r2, [r3, #8]
                if(pBtd)
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	689b      	ldr	r3, [r3, #8]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d005      	beq.n	80107a6 <_ZN16BluetoothServiceC1EP3BTD+0x2a>
                        pBtd->registerBluetoothService(this); // Register it as a Bluetooth service
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	689b      	ldr	r3, [r3, #8]
 801079e:	6879      	ldr	r1, [r7, #4]
 80107a0:	4618      	mov	r0, r3
 80107a2:	f7ff ffc3 	bl	801072c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>
        };
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	4618      	mov	r0, r3
 80107aa:	3708      	adds	r7, #8
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bd80      	pop	{r7, pc}
 80107b0:	08014a70 	.word	0x08014a70

080107b4 <_ZN16BluetoothService14checkHciHandleEPht>:
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void onInit() = 0;

        /** Used to check if the incoming L2CAP data matches the HCI Handle */
        bool checkHciHandle(uint8_t *buf, uint16_t handle) {
 80107b4:	b480      	push	{r7}
 80107b6:	b085      	sub	sp, #20
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	60f8      	str	r0, [r7, #12]
 80107bc:	60b9      	str	r1, [r7, #8]
 80107be:	4613      	mov	r3, r2
 80107c0:	80fb      	strh	r3, [r7, #6]
                return (buf[0] == (handle & 0xFF)) && (buf[1] == ((handle >> 8) | 0x20));
 80107c2:	68bb      	ldr	r3, [r7, #8]
 80107c4:	781b      	ldrb	r3, [r3, #0]
 80107c6:	461a      	mov	r2, r3
 80107c8:	88fb      	ldrh	r3, [r7, #6]
 80107ca:	b2db      	uxtb	r3, r3
 80107cc:	429a      	cmp	r2, r3
 80107ce:	d10b      	bne.n	80107e8 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	3301      	adds	r3, #1
 80107d4:	781b      	ldrb	r3, [r3, #0]
 80107d6:	461a      	mov	r2, r3
 80107d8:	88fb      	ldrh	r3, [r7, #6]
 80107da:	121b      	asrs	r3, r3, #8
 80107dc:	f043 0320 	orr.w	r3, r3, #32
 80107e0:	429a      	cmp	r2, r3
 80107e2:	d101      	bne.n	80107e8 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 80107e4:	2301      	movs	r3, #1
 80107e6:	e000      	b.n	80107ea <_ZN16BluetoothService14checkHciHandleEPht+0x36>
 80107e8:	2300      	movs	r3, #0
        }
 80107ea:	4618      	mov	r0, r3
 80107ec:	3714      	adds	r7, #20
 80107ee:	46bd      	mov	sp, r7
 80107f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f4:	4770      	bx	lr

080107f6 <_ZN5BTHID14ParseBTHIDDataEhPh>:
        virtual void ParseBTHIDData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 80107f6:	b480      	push	{r7}
 80107f8:	b085      	sub	sp, #20
 80107fa:	af00      	add	r7, sp, #0
 80107fc:	60f8      	str	r0, [r7, #12]
 80107fe:	460b      	mov	r3, r1
 8010800:	607a      	str	r2, [r7, #4]
 8010802:	72fb      	strb	r3, [r7, #11]
                return;
 8010804:	bf00      	nop
        };
 8010806:	3714      	adds	r7, #20
 8010808:	46bd      	mov	sp, r7
 801080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080e:	4770      	bx	lr

08010810 <_ZN5BTHID11OnInitBTHIDEv>:
        /** Called when a device is connected */
        virtual void OnInitBTHID() {
 8010810:	b480      	push	{r7}
 8010812:	b083      	sub	sp, #12
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
                return;
 8010818:	bf00      	nop
        };
 801081a:	370c      	adds	r7, #12
 801081c:	46bd      	mov	sp, r7
 801081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010822:	4770      	bx	lr

08010824 <_ZN5BTHID10ResetBTHIDEv>:
        /** Used to reset any buffers in the class that inherits this */
        virtual void ResetBTHID() {
 8010824:	b480      	push	{r7}
 8010826:	b083      	sub	sp, #12
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
                return;
 801082c:	bf00      	nop
        }
 801082e:	370c      	adds	r7, #12
 8010830:	46bd      	mov	sp, r7
 8010832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010836:	4770      	bx	lr

08010838 <_ZN5BTHIDC1EP3BTDbPKc>:
#include "BTHID.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the HID device

BTHID::BTHID(BTD *p, bool pair, const char *pin) :
 8010838:	b580      	push	{r7, lr}
 801083a:	b086      	sub	sp, #24
 801083c:	af00      	add	r7, sp, #0
 801083e:	60f8      	str	r0, [r7, #12]
 8010840:	60b9      	str	r1, [r7, #8]
 8010842:	603b      	str	r3, [r7, #0]
 8010844:	4613      	mov	r3, r2
 8010846:	71fb      	strb	r3, [r7, #7]
BluetoothService(p), // Pointer to USB class instance - mandatory
protocolMode(USB_HID_BOOT_PROTOCOL) {
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	68b9      	ldr	r1, [r7, #8]
 801084c:	4618      	mov	r0, r3
 801084e:	f7ff ff95 	bl	801077c <_ZN16BluetoothServiceC1EP3BTD>
 8010852:	4a1f      	ldr	r2, [pc, #124]	; (80108d0 <_ZN5BTHIDC1EP3BTDbPKc+0x98>)
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	601a      	str	r2, [r3, #0]
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	2200      	movs	r2, #0
 801085c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 8010860:	2300      	movs	r3, #0
 8010862:	75fb      	strb	r3, [r7, #23]
 8010864:	7dfb      	ldrb	r3, [r7, #23]
 8010866:	2b01      	cmp	r3, #1
 8010868:	d809      	bhi.n	801087e <_ZN5BTHIDC1EP3BTDbPKc+0x46>
                pRptParser[i] = NULL;
 801086a:	7dfa      	ldrb	r2, [r7, #23]
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	3208      	adds	r2, #8
 8010870:	2100      	movs	r1, #0
 8010872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 8010876:	7dfb      	ldrb	r3, [r7, #23]
 8010878:	3301      	adds	r3, #1
 801087a:	75fb      	strb	r3, [r7, #23]
 801087c:	e7f2      	b.n	8010864 <_ZN5BTHIDC1EP3BTDbPKc+0x2c>

        pBtd->pairWithHIDDevice = pair;
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	689b      	ldr	r3, [r3, #8]
 8010882:	79fa      	ldrb	r2, [r7, #7]
 8010884:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        pBtd->btdPin = pin;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	689b      	ldr	r3, [r3, #8]
 801088c:	683a      	ldr	r2, [r7, #0]
 801088e:	611a      	str	r2, [r3, #16]

        /* Set device cid for the control and intterrupt channelse - LSB */
        sdp_dcid[0] = 0x50; // 0x0050
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	2250      	movs	r2, #80	; 0x50
 8010894:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        sdp_dcid[1] = 0x00;
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	2200      	movs	r2, #0
 801089c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        control_dcid[0] = 0x70; // 0x0070
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	2270      	movs	r2, #112	; 0x70
 80108a4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        control_dcid[1] = 0x00;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	2200      	movs	r2, #0
 80108ac:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        interrupt_dcid[0] = 0x71; // 0x0071
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	2271      	movs	r2, #113	; 0x71
 80108b4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        interrupt_dcid[1] = 0x00;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	2200      	movs	r2, #0
 80108bc:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

        Reset();
 80108c0:	68f8      	ldr	r0, [r7, #12]
 80108c2:	f000 f807 	bl	80108d4 <_ZN5BTHID5ResetEv>
}
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	4618      	mov	r0, r3
 80108ca:	3718      	adds	r7, #24
 80108cc:	46bd      	mov	sp, r7
 80108ce:	bd80      	pop	{r7, pc}
 80108d0:	08014a44 	.word	0x08014a44

080108d4 <_ZN5BTHID5ResetEv>:

void BTHID::Reset() {
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b082      	sub	sp, #8
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
        connected = false;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2200      	movs	r2, #0
 80108e0:	755a      	strb	r2, [r3, #21]
        activeConnection = false;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	2200      	movs	r2, #0
 80108e6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDPConnected = false;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2200      	movs	r2, #0
 80108ee:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        l2cap_event_flag = 0; // Reset flags
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	2200      	movs	r2, #0
 80108f6:	611a      	str	r2, [r3, #16]
        l2cap_sdp_state = L2CAP_SDP_WAIT;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	220a      	movs	r2, #10
 80108fc:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_WAIT;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	2200      	movs	r2, #0
 8010902:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ResetBTHID();
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	3320      	adds	r3, #32
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	4798      	blx	r3
}
 8010912:	bf00      	nop
 8010914:	3708      	adds	r7, #8
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}

0801091a <_ZN5BTHID10disconnectEv>:

void BTHID::disconnect() { // Use this void to disconnect the device
 801091a:	b590      	push	{r4, r7, lr}
 801091c:	b085      	sub	sp, #20
 801091e:	af02      	add	r7, sp, #8
 8010920:	6078      	str	r0, [r7, #4]
        if(SDPConnected)
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8010928:	2b00      	cmp	r3, #0
 801092a:	d014      	beq.n	8010956 <_ZN5BTHID10disconnectEv+0x3c>
                pBtd->l2cap_disconnection_request(hci_handle, ++identifier, sdp_scid, sdp_dcid);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	6898      	ldr	r0, [r3, #8]
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	8999      	ldrh	r1, [r3, #12]
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	7d1b      	ldrb	r3, [r3, #20]
 8010938:	3301      	adds	r3, #1
 801093a:	b2da      	uxtb	r2, r3
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	751a      	strb	r2, [r3, #20]
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	7d1a      	ldrb	r2, [r3, #20]
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f103 041b 	add.w	r4, r3, #27
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	336f      	adds	r3, #111	; 0x6f
 801094e:	9300      	str	r3, [sp, #0]
 8010950:	4623      	mov	r3, r4
 8010952:	f7ff f9c5 	bl	800fce0 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        // First the HID interrupt channel has to be disconnected, then the HID control channel and finally the HCI connection
        pBtd->l2cap_disconnection_request(hci_handle, ++identifier, interrupt_scid, interrupt_dcid);
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6898      	ldr	r0, [r3, #8]
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	8999      	ldrh	r1, [r3, #12]
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	7d1b      	ldrb	r3, [r3, #20]
 8010962:	3301      	adds	r3, #1
 8010964:	b2da      	uxtb	r2, r3
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	751a      	strb	r2, [r3, #20]
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	7d1a      	ldrb	r2, [r3, #20]
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	f103 0418 	add.w	r4, r3, #24
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	336d      	adds	r3, #109	; 0x6d
 8010978:	9300      	str	r3, [sp, #0]
 801097a:	4623      	mov	r3, r4
 801097c:	f7ff f9b0 	bl	800fce0 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        Reset();
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	3308      	adds	r3, #8
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	6878      	ldr	r0, [r7, #4]
 801098a:	4798      	blx	r3
        l2cap_sdp_state = L2CAP_DISCONNECT_RESPONSE;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	220e      	movs	r2, #14
 8010990:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_INTERRUPT_DISCONNECT;
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	2209      	movs	r2, #9
 8010996:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 801099a:	bf00      	nop
 801099c:	370c      	adds	r7, #12
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd90      	pop	{r4, r7, pc}

080109a2 <_ZN5BTHID7ACLDataEPh>:

void BTHID::ACLData(uint8_t* l2capinbuf) {
 80109a2:	b590      	push	{r4, r7, lr}
 80109a4:	b087      	sub	sp, #28
 80109a6:	af02      	add	r7, sp, #8
 80109a8:	6078      	str	r0, [r7, #4]
 80109aa:	6039      	str	r1, [r7, #0]
        if(!connected) {
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	7d5b      	ldrb	r3, [r3, #21]
 80109b0:	f083 0301 	eor.w	r3, r3, #1
 80109b4:	b2db      	uxtb	r3, r3
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d023      	beq.n	8010a02 <_ZN5BTHID7ACLDataEPh+0x60>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 80109ba:	683b      	ldr	r3, [r7, #0]
 80109bc:	3308      	adds	r3, #8
 80109be:	781b      	ldrb	r3, [r3, #0]
 80109c0:	2b02      	cmp	r3, #2
 80109c2:	d11e      	bne.n	8010a02 <_ZN5BTHID7ACLDataEPh+0x60>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM && !pBtd->sdpConnectionClaimed) {
 80109c4:	683b      	ldr	r3, [r7, #0]
 80109c6:	330c      	adds	r3, #12
 80109c8:	781b      	ldrb	r3, [r3, #0]
 80109ca:	461a      	mov	r2, r3
 80109cc:	683b      	ldr	r3, [r7, #0]
 80109ce:	330d      	adds	r3, #13
 80109d0:	781b      	ldrb	r3, [r3, #0]
 80109d2:	021b      	lsls	r3, r3, #8
 80109d4:	4313      	orrs	r3, r2
 80109d6:	2b01      	cmp	r3, #1
 80109d8:	d113      	bne.n	8010a02 <_ZN5BTHID7ACLDataEPh+0x60>
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	689b      	ldr	r3, [r3, #8]
 80109de:	7a9b      	ldrb	r3, [r3, #10]
 80109e0:	f083 0301 	eor.w	r3, r3, #1
 80109e4:	b2db      	uxtb	r3, r3
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d00b      	beq.n	8010a02 <_ZN5BTHID7ACLDataEPh+0x60>
                                pBtd->sdpConnectionClaimed = true;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	689b      	ldr	r3, [r3, #8]
 80109ee:	2201      	movs	r2, #1
 80109f0:	729a      	strb	r2, [r3, #10]
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	689b      	ldr	r3, [r3, #8]
 80109f6:	8b5a      	ldrh	r2, [r3, #26]
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	819a      	strh	r2, [r3, #12]
                                l2cap_sdp_state = L2CAP_SDP_WAIT; // Reset state
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	220a      	movs	r2, #10
 8010a00:	769a      	strb	r2, [r3, #26]
                        }
                }
        }

        if(!pBtd->l2capConnectionClaimed && pBtd->incomingHIDDevice && !connected && !activeConnection) {
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	689b      	ldr	r3, [r3, #8]
 8010a06:	7a5b      	ldrb	r3, [r3, #9]
 8010a08:	f083 0301 	eor.w	r3, r3, #1
 8010a0c:	b2db      	uxtb	r3, r3
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d03a      	beq.n	8010a88 <_ZN5BTHID7ACLDataEPh+0xe6>
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	689b      	ldr	r3, [r3, #8]
 8010a16:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d034      	beq.n	8010a88 <_ZN5BTHID7ACLDataEPh+0xe6>
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	7d5b      	ldrb	r3, [r3, #21]
 8010a22:	f083 0301 	eor.w	r3, r3, #1
 8010a26:	b2db      	uxtb	r3, r3
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d02d      	beq.n	8010a88 <_ZN5BTHID7ACLDataEPh+0xe6>
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8010a32:	f083 0301 	eor.w	r3, r3, #1
 8010a36:	b2db      	uxtb	r3, r3
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d025      	beq.n	8010a88 <_ZN5BTHID7ACLDataEPh+0xe6>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 8010a3c:	683b      	ldr	r3, [r7, #0]
 8010a3e:	3308      	adds	r3, #8
 8010a40:	781b      	ldrb	r3, [r3, #0]
 8010a42:	2b02      	cmp	r3, #2
 8010a44:	d120      	bne.n	8010a88 <_ZN5BTHID7ACLDataEPh+0xe6>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	330c      	adds	r3, #12
 8010a4a:	781b      	ldrb	r3, [r3, #0]
 8010a4c:	461a      	mov	r2, r3
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	330d      	adds	r3, #13
 8010a52:	781b      	ldrb	r3, [r3, #0]
 8010a54:	021b      	lsls	r3, r3, #8
 8010a56:	4313      	orrs	r3, r2
 8010a58:	2b11      	cmp	r3, #17
 8010a5a:	d115      	bne.n	8010a88 <_ZN5BTHID7ACLDataEPh+0xe6>
                                pBtd->incomingHIDDevice = false;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	689b      	ldr	r3, [r3, #8]
 8010a60:	2200      	movs	r2, #0
 8010a62:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                pBtd->l2capConnectionClaimed = true; // Claim that the incoming connection belongs to this service
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	689b      	ldr	r3, [r3, #8]
 8010a6a:	2201      	movs	r2, #1
 8010a6c:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	2201      	movs	r2, #1
 8010a72:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	689b      	ldr	r3, [r3, #8]
 8010a7a:	8b5a      	ldrh	r2, [r3, #26]
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	819a      	strh	r2, [r3, #12]
                                l2cap_state = L2CAP_WAIT;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	2200      	movs	r2, #0
 8010a84:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                }
        }

        if(checkHciHandle(l2capinbuf, hci_handle)) { // acl_handle_ok
 8010a88:	6878      	ldr	r0, [r7, #4]
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	899b      	ldrh	r3, [r3, #12]
 8010a8e:	461a      	mov	r2, r3
 8010a90:	6839      	ldr	r1, [r7, #0]
 8010a92:	f7ff fe8f 	bl	80107b4 <_ZN16BluetoothService14checkHciHandleEPht>
 8010a96:	4603      	mov	r3, r0
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	f000 83d9 	beq.w	8011250 <_ZN5BTHID7ACLDataEPh+0x8ae>
                if((l2capinbuf[6] | (l2capinbuf[7] << 8)) == 0x0001U) { // l2cap_control - Channel ID for ACL-U
 8010a9e:	683b      	ldr	r3, [r7, #0]
 8010aa0:	3306      	adds	r3, #6
 8010aa2:	781b      	ldrb	r3, [r3, #0]
 8010aa4:	461a      	mov	r2, r3
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	3307      	adds	r3, #7
 8010aaa:	781b      	ldrb	r3, [r3, #0]
 8010aac:	021b      	lsls	r3, r3, #8
 8010aae:	4313      	orrs	r3, r2
 8010ab0:	2b01      	cmp	r3, #1
 8010ab2:	f040 829b 	bne.w	8010fec <_ZN5BTHID7ACLDataEPh+0x64a>
                        if(l2capinbuf[8] == L2CAP_CMD_COMMAND_REJECT) {
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	3308      	adds	r3, #8
 8010aba:	781b      	ldrb	r3, [r3, #0]
 8010abc:	2b01      	cmp	r3, #1
 8010abe:	f000 83c1 	beq.w	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[15], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
#endif
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_RESPONSE) {
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	3308      	adds	r3, #8
 8010ac6:	781b      	ldrb	r3, [r3, #0]
 8010ac8:	2b03      	cmp	r3, #3
 8010aca:	f040 808d 	bne.w	8010be8 <_ZN5BTHID7ACLDataEPh+0x246>
                                if(((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) && ((l2capinbuf[18] | (l2capinbuf[19] << 8)) == SUCCESSFUL)) { // Success
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	3310      	adds	r3, #16
 8010ad2:	781b      	ldrb	r3, [r3, #0]
 8010ad4:	461a      	mov	r2, r3
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	3311      	adds	r3, #17
 8010ada:	781b      	ldrb	r3, [r3, #0]
 8010adc:	021b      	lsls	r3, r3, #8
 8010ade:	4313      	orrs	r3, r2
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	f040 83af 	bne.w	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	3312      	adds	r3, #18
 8010aea:	781b      	ldrb	r3, [r3, #0]
 8010aec:	461a      	mov	r2, r3
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	3313      	adds	r3, #19
 8010af2:	781b      	ldrb	r3, [r3, #0]
 8010af4:	021b      	lsls	r3, r3, #8
 8010af6:	4313      	orrs	r3, r2
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	f040 83a3 	bne.w	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[14] == sdp_dcid[0] && l2capinbuf[15] == sdp_dcid[1]) {
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	330e      	adds	r3, #14
 8010b02:	781a      	ldrb	r2, [r3, #0]
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d124      	bne.n	8010b58 <_ZN5BTHID7ACLDataEPh+0x1b6>
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	330f      	adds	r3, #15
 8010b12:	781a      	ldrb	r2, [r3, #0]
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8010b1a:	429a      	cmp	r2, r3
 8010b1c:	d11c      	bne.n	8010b58 <_ZN5BTHID7ACLDataEPh+0x1b6>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	7a5a      	ldrb	r2, [r3, #9]
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	751a      	strb	r2, [r3, #20]
                                                sdp_scid[0] = l2capinbuf[12];
 8010b26:	683b      	ldr	r3, [r7, #0]
 8010b28:	7b1a      	ldrb	r2, [r3, #12]
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	76da      	strb	r2, [r3, #27]
                                                sdp_scid[1] = l2capinbuf[13];
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	7b5a      	ldrb	r2, [r3, #13]
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	771a      	strb	r2, [r3, #28]
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nSend SDP Config Request"), 0x80);
#endif
                                                identifier++;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	7d1b      	ldrb	r3, [r3, #20]
 8010b3a:	3301      	adds	r3, #1
 8010b3c:	b2da      	uxtb	r2, r3
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	751a      	strb	r2, [r3, #20]
                                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	6898      	ldr	r0, [r3, #8]
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	8999      	ldrh	r1, [r3, #12]
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	7d1a      	ldrb	r2, [r3, #20]
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	331b      	adds	r3, #27
 8010b52:	f7ff f827 	bl	800fba4 <_ZN3BTD20l2cap_config_requestEthPh>
 8010b56:	e375      	b.n	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == control_dcid[0] && l2capinbuf[15] == control_dcid[1]) {
 8010b58:	683b      	ldr	r3, [r7, #0]
 8010b5a:	330e      	adds	r3, #14
 8010b5c:	781a      	ldrb	r2, [r3, #0]
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8010b64:	429a      	cmp	r2, r3
 8010b66:	d11a      	bne.n	8010b9e <_ZN5BTHID7ACLDataEPh+0x1fc>
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	330f      	adds	r3, #15
 8010b6c:	781a      	ldrb	r2, [r3, #0]
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8010b74:	429a      	cmp	r2, r3
 8010b76:	d112      	bne.n	8010b9e <_ZN5BTHID7ACLDataEPh+0x1fc>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010b78:	683b      	ldr	r3, [r7, #0]
 8010b7a:	7a5a      	ldrb	r2, [r3, #9]
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	751a      	strb	r2, [r3, #20]
                                                control_scid[0] = l2capinbuf[12];
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	7b1a      	ldrb	r2, [r3, #12]
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	759a      	strb	r2, [r3, #22]
                                                control_scid[1] = l2capinbuf[13];
 8010b88:	683b      	ldr	r3, [r7, #0]
 8010b8a:	7b5a      	ldrb	r2, [r3, #13]
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	75da      	strb	r2, [r3, #23]
                                                l2cap_set_flag(L2CAP_FLAG_CONTROL_CONNECTED);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	691b      	ldr	r3, [r3, #16]
 8010b94:	f043 0204 	orr.w	r2, r3, #4
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	611a      	str	r2, [r3, #16]
 8010b9c:	e352      	b.n	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == interrupt_dcid[0] && l2capinbuf[15] == interrupt_dcid[1]) {
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	330e      	adds	r3, #14
 8010ba2:	781a      	ldrb	r2, [r3, #0]
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8010baa:	429a      	cmp	r2, r3
 8010bac:	f040 834a 	bne.w	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	330f      	adds	r3, #15
 8010bb4:	781a      	ldrb	r2, [r3, #0]
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8010bbc:	429a      	cmp	r2, r3
 8010bbe:	f040 8341 	bne.w	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010bc2:	683b      	ldr	r3, [r7, #0]
 8010bc4:	7a5a      	ldrb	r2, [r3, #9]
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	751a      	strb	r2, [r3, #20]
                                                interrupt_scid[0] = l2capinbuf[12];
 8010bca:	683b      	ldr	r3, [r7, #0]
 8010bcc:	7b1a      	ldrb	r2, [r3, #12]
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	761a      	strb	r2, [r3, #24]
                                                interrupt_scid[1] = l2capinbuf[13];
 8010bd2:	683b      	ldr	r3, [r7, #0]
 8010bd4:	7b5a      	ldrb	r2, [r3, #13]
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	765a      	strb	r2, [r3, #25]
                                                l2cap_set_flag(L2CAP_FLAG_INTERRUPT_CONNECTED);
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	691b      	ldr	r3, [r3, #16]
 8010bde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	611a      	str	r2, [r3, #16]
 8010be6:	e32d      	b.n	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	3308      	adds	r3, #8
 8010bec:	781b      	ldrb	r3, [r3, #0]
 8010bee:	2b02      	cmp	r3, #2
 8010bf0:	d15a      	bne.n	8010ca8 <_ZN5BTHID7ACLDataEPh+0x306>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
                                Notify(PSTR(" Identifier: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[9], 0x80);
#endif
                                if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM) {
 8010bf2:	683b      	ldr	r3, [r7, #0]
 8010bf4:	330c      	adds	r3, #12
 8010bf6:	781b      	ldrb	r3, [r3, #0]
 8010bf8:	461a      	mov	r2, r3
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	330d      	adds	r3, #13
 8010bfe:	781b      	ldrb	r3, [r3, #0]
 8010c00:	021b      	lsls	r3, r3, #8
 8010c02:	4313      	orrs	r3, r2
 8010c04:	2b01      	cmp	r3, #1
 8010c06:	d112      	bne.n	8010c2e <_ZN5BTHID7ACLDataEPh+0x28c>
                                        identifier = l2capinbuf[9];
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	7a5a      	ldrb	r2, [r3, #9]
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	751a      	strb	r2, [r3, #20]
                                        sdp_scid[0] = l2capinbuf[14];
 8010c10:	683b      	ldr	r3, [r7, #0]
 8010c12:	7b9a      	ldrb	r2, [r3, #14]
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	76da      	strb	r2, [r3, #27]
                                        sdp_scid[1] = l2capinbuf[15];
 8010c18:	683b      	ldr	r3, [r7, #0]
 8010c1a:	7bda      	ldrb	r2, [r3, #15]
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	771a      	strb	r2, [r3, #28]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST);
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	691b      	ldr	r3, [r3, #16]
 8010c24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	611a      	str	r2, [r3, #16]
 8010c2c:	e30a      	b.n	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	330c      	adds	r3, #12
 8010c32:	781b      	ldrb	r3, [r3, #0]
 8010c34:	461a      	mov	r2, r3
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	330d      	adds	r3, #13
 8010c3a:	781b      	ldrb	r3, [r3, #0]
 8010c3c:	021b      	lsls	r3, r3, #8
 8010c3e:	4313      	orrs	r3, r2
 8010c40:	2b11      	cmp	r3, #17
 8010c42:	d112      	bne.n	8010c6a <_ZN5BTHID7ACLDataEPh+0x2c8>
                                        identifier = l2capinbuf[9];
 8010c44:	683b      	ldr	r3, [r7, #0]
 8010c46:	7a5a      	ldrb	r2, [r3, #9]
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	751a      	strb	r2, [r3, #20]
                                        control_scid[0] = l2capinbuf[14];
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	7b9a      	ldrb	r2, [r3, #14]
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	759a      	strb	r2, [r3, #22]
                                        control_scid[1] = l2capinbuf[15];
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	7bda      	ldrb	r2, [r3, #15]
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	75da      	strb	r2, [r3, #23]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	691b      	ldr	r3, [r3, #16]
 8010c60:	f043 0201 	orr.w	r2, r3, #1
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	611a      	str	r2, [r3, #16]
 8010c68:	e2ec      	b.n	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_INTR_PSM) {
 8010c6a:	683b      	ldr	r3, [r7, #0]
 8010c6c:	330c      	adds	r3, #12
 8010c6e:	781b      	ldrb	r3, [r3, #0]
 8010c70:	461a      	mov	r2, r3
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	330d      	adds	r3, #13
 8010c76:	781b      	ldrb	r3, [r3, #0]
 8010c78:	021b      	lsls	r3, r3, #8
 8010c7a:	4313      	orrs	r3, r2
 8010c7c:	2b13      	cmp	r3, #19
 8010c7e:	f040 82e1 	bne.w	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        identifier = l2capinbuf[9];
 8010c82:	683b      	ldr	r3, [r7, #0]
 8010c84:	7a5a      	ldrb	r2, [r3, #9]
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	751a      	strb	r2, [r3, #20]
                                        interrupt_scid[0] = l2capinbuf[14];
 8010c8a:	683b      	ldr	r3, [r7, #0]
 8010c8c:	7b9a      	ldrb	r2, [r3, #14]
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	761a      	strb	r2, [r3, #24]
                                        interrupt_scid[1] = l2capinbuf[15];
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	7bda      	ldrb	r2, [r3, #15]
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	765a      	strb	r2, [r3, #25]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST);
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	691b      	ldr	r3, [r3, #16]
 8010c9e:	f043 0210 	orr.w	r2, r3, #16
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	611a      	str	r2, [r3, #16]
 8010ca6:	e2cd      	b.n	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_RESPONSE) {
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	3308      	adds	r3, #8
 8010cac:	781b      	ldrb	r3, [r3, #0]
 8010cae:	2b05      	cmp	r3, #5
 8010cb0:	d15e      	bne.n	8010d70 <_ZN5BTHID7ACLDataEPh+0x3ce>
                                if((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) { // Success
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	3310      	adds	r3, #16
 8010cb6:	781b      	ldrb	r3, [r3, #0]
 8010cb8:	461a      	mov	r2, r3
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	3311      	adds	r3, #17
 8010cbe:	781b      	ldrb	r3, [r3, #0]
 8010cc0:	021b      	lsls	r3, r3, #8
 8010cc2:	4313      	orrs	r3, r2
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	f040 82bd 	bne.w	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 8010cca:	683b      	ldr	r3, [r7, #0]
 8010ccc:	330c      	adds	r3, #12
 8010cce:	781a      	ldrb	r2, [r3, #0]
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8010cd6:	429a      	cmp	r2, r3
 8010cd8:	d112      	bne.n	8010d00 <_ZN5BTHID7ACLDataEPh+0x35e>
 8010cda:	683b      	ldr	r3, [r7, #0]
 8010cdc:	330d      	adds	r3, #13
 8010cde:	781a      	ldrb	r2, [r3, #0]
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8010ce6:	429a      	cmp	r2, r3
 8010ce8:	d10a      	bne.n	8010d00 <_ZN5BTHID7ACLDataEPh+0x35e>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	7a5a      	ldrb	r2, [r3, #9]
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS);
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	691b      	ldr	r3, [r3, #16]
 8010cf6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	611a      	str	r2, [r3, #16]
 8010cfe:	e2a1      	b.n	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 8010d00:	683b      	ldr	r3, [r7, #0]
 8010d02:	330c      	adds	r3, #12
 8010d04:	781a      	ldrb	r2, [r3, #0]
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8010d0c:	429a      	cmp	r2, r3
 8010d0e:	d112      	bne.n	8010d36 <_ZN5BTHID7ACLDataEPh+0x394>
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	330d      	adds	r3, #13
 8010d14:	781a      	ldrb	r2, [r3, #0]
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8010d1c:	429a      	cmp	r2, r3
 8010d1e:	d10a      	bne.n	8010d36 <_ZN5BTHID7ACLDataEPh+0x394>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	7a5a      	ldrb	r2, [r3, #9]
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS);
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	691b      	ldr	r3, [r3, #16]
 8010d2c:	f043 0202 	orr.w	r2, r3, #2
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	611a      	str	r2, [r3, #16]
 8010d34:	e286      	b.n	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 8010d36:	683b      	ldr	r3, [r7, #0]
 8010d38:	330c      	adds	r3, #12
 8010d3a:	781a      	ldrb	r2, [r3, #0]
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8010d42:	429a      	cmp	r2, r3
 8010d44:	f040 827e 	bne.w	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	330d      	adds	r3, #13
 8010d4c:	781a      	ldrb	r2, [r3, #0]
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8010d54:	429a      	cmp	r2, r3
 8010d56:	f040 8275 	bne.w	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010d5a:	683b      	ldr	r3, [r7, #0]
 8010d5c:	7a5a      	ldrb	r2, [r3, #9]
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS);
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	691b      	ldr	r3, [r3, #16]
 8010d66:	f043 0220 	orr.w	r2, r3, #32
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	611a      	str	r2, [r3, #16]
 8010d6e:	e269      	b.n	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_REQUEST) {
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	3308      	adds	r3, #8
 8010d74:	781b      	ldrb	r3, [r3, #0]
 8010d76:	2b04      	cmp	r3, #4
 8010d78:	d155      	bne.n	8010e26 <_ZN5BTHID7ACLDataEPh+0x484>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 8010d7a:	683b      	ldr	r3, [r7, #0]
 8010d7c:	330c      	adds	r3, #12
 8010d7e:	781a      	ldrb	r2, [r3, #0]
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8010d86:	429a      	cmp	r2, r3
 8010d88:	d113      	bne.n	8010db2 <_ZN5BTHID7ACLDataEPh+0x410>
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	330d      	adds	r3, #13
 8010d8e:	781a      	ldrb	r2, [r3, #0]
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8010d96:	429a      	cmp	r2, r3
 8010d98:	d10b      	bne.n	8010db2 <_ZN5BTHID7ACLDataEPh+0x410>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nSDP Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], sdp_scid);
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	6898      	ldr	r0, [r3, #8]
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	8999      	ldrh	r1, [r3, #12]
 8010da2:	683b      	ldr	r3, [r7, #0]
 8010da4:	3309      	adds	r3, #9
 8010da6:	781a      	ldrb	r2, [r3, #0]
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	331b      	adds	r3, #27
 8010dac:	f7fe ff45 	bl	800fc3a <_ZN3BTD21l2cap_config_responseEthPh>
 8010db0:	e248      	b.n	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 8010db2:	683b      	ldr	r3, [r7, #0]
 8010db4:	330c      	adds	r3, #12
 8010db6:	781a      	ldrb	r2, [r3, #0]
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8010dbe:	429a      	cmp	r2, r3
 8010dc0:	d113      	bne.n	8010dea <_ZN5BTHID7ACLDataEPh+0x448>
 8010dc2:	683b      	ldr	r3, [r7, #0]
 8010dc4:	330d      	adds	r3, #13
 8010dc6:	781a      	ldrb	r2, [r3, #0]
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8010dce:	429a      	cmp	r2, r3
 8010dd0:	d10b      	bne.n	8010dea <_ZN5BTHID7ACLDataEPh+0x448>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Control Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], control_scid);
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	6898      	ldr	r0, [r3, #8]
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	8999      	ldrh	r1, [r3, #12]
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	3309      	adds	r3, #9
 8010dde:	781a      	ldrb	r2, [r3, #0]
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	3316      	adds	r3, #22
 8010de4:	f7fe ff29 	bl	800fc3a <_ZN3BTD21l2cap_config_responseEthPh>
 8010de8:	e22c      	b.n	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 8010dea:	683b      	ldr	r3, [r7, #0]
 8010dec:	330c      	adds	r3, #12
 8010dee:	781a      	ldrb	r2, [r3, #0]
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8010df6:	429a      	cmp	r2, r3
 8010df8:	f040 8224 	bne.w	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	330d      	adds	r3, #13
 8010e00:	781a      	ldrb	r2, [r3, #0]
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8010e08:	429a      	cmp	r2, r3
 8010e0a:	f040 821b 	bne.w	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Interrupt Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], interrupt_scid);
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	6898      	ldr	r0, [r3, #8]
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	8999      	ldrh	r1, [r3, #12]
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	3309      	adds	r3, #9
 8010e1a:	781a      	ldrb	r2, [r3, #0]
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	3318      	adds	r3, #24
 8010e20:	f7fe ff0b 	bl	800fc3a <_ZN3BTD21l2cap_config_responseEthPh>
 8010e24:	e20e      	b.n	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_REQUEST) {
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	3308      	adds	r3, #8
 8010e2a:	781b      	ldrb	r3, [r3, #0]
 8010e2c:	2b06      	cmp	r3, #6
 8010e2e:	d170      	bne.n	8010f12 <_ZN5BTHID7ACLDataEPh+0x570>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 8010e30:	683b      	ldr	r3, [r7, #0]
 8010e32:	330c      	adds	r3, #12
 8010e34:	781a      	ldrb	r2, [r3, #0]
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8010e3c:	429a      	cmp	r2, r3
 8010e3e:	d112      	bne.n	8010e66 <_ZN5BTHID7ACLDataEPh+0x4c4>
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	330d      	adds	r3, #13
 8010e44:	781a      	ldrb	r2, [r3, #0]
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8010e4c:	429a      	cmp	r2, r3
 8010e4e:	d10a      	bne.n	8010e66 <_ZN5BTHID7ACLDataEPh+0x4c4>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8010e50:	683b      	ldr	r3, [r7, #0]
 8010e52:	7a5a      	ldrb	r2, [r3, #9]
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	691b      	ldr	r3, [r3, #16]
 8010e5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	611a      	str	r2, [r3, #16]
 8010e64:	e1ee      	b.n	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 8010e66:	683b      	ldr	r3, [r7, #0]
 8010e68:	330c      	adds	r3, #12
 8010e6a:	781a      	ldrb	r2, [r3, #0]
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8010e72:	429a      	cmp	r2, r3
 8010e74:	d121      	bne.n	8010eba <_ZN5BTHID7ACLDataEPh+0x518>
 8010e76:	683b      	ldr	r3, [r7, #0]
 8010e78:	330d      	adds	r3, #13
 8010e7a:	781a      	ldrb	r2, [r3, #0]
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8010e82:	429a      	cmp	r2, r3
 8010e84:	d119      	bne.n	8010eba <_ZN5BTHID7ACLDataEPh+0x518>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8010e86:	683b      	ldr	r3, [r7, #0]
 8010e88:	7a5a      	ldrb	r2, [r3, #9]
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, control_dcid, control_scid);
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	6898      	ldr	r0, [r3, #8]
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	8999      	ldrh	r1, [r3, #12]
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	7d1a      	ldrb	r2, [r3, #20]
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	3316      	adds	r3, #22
 8010ea4:	9300      	str	r3, [sp, #0]
 8010ea6:	4623      	mov	r3, r4
 8010ea8:	f7fe ff57 	bl	800fd5a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	3308      	adds	r3, #8
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	6878      	ldr	r0, [r7, #4]
 8010eb6:	4798      	blx	r3
 8010eb8:	e1c4      	b.n	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 8010eba:	683b      	ldr	r3, [r7, #0]
 8010ebc:	330c      	adds	r3, #12
 8010ebe:	781a      	ldrb	r2, [r3, #0]
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8010ec6:	429a      	cmp	r2, r3
 8010ec8:	f040 81bc 	bne.w	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	330d      	adds	r3, #13
 8010ed0:	781a      	ldrb	r2, [r3, #0]
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8010ed8:	429a      	cmp	r2, r3
 8010eda:	f040 81b3 	bne.w	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8010ede:	683b      	ldr	r3, [r7, #0]
 8010ee0:	7a5a      	ldrb	r2, [r3, #9]
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid);
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	6898      	ldr	r0, [r3, #8]
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	8999      	ldrh	r1, [r3, #12]
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	7d1a      	ldrb	r2, [r3, #20]
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	3318      	adds	r3, #24
 8010efc:	9300      	str	r3, [sp, #0]
 8010efe:	4623      	mov	r3, r4
 8010f00:	f7fe ff2b 	bl	800fd5a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	3308      	adds	r3, #8
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	6878      	ldr	r0, [r7, #4]
 8010f0e:	4798      	blx	r3
 8010f10:	e198      	b.n	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_RESPONSE) {
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	3308      	adds	r3, #8
 8010f16:	781b      	ldrb	r3, [r3, #0]
 8010f18:	2b07      	cmp	r3, #7
 8010f1a:	d14c      	bne.n	8010fb6 <_ZN5BTHID7ACLDataEPh+0x614>
                                if(l2capinbuf[12] == sdp_scid[0] && l2capinbuf[13] == sdp_scid[1]) {
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	330c      	adds	r3, #12
 8010f20:	781a      	ldrb	r2, [r3, #0]
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	7edb      	ldrb	r3, [r3, #27]
 8010f26:	429a      	cmp	r2, r3
 8010f28:	d111      	bne.n	8010f4e <_ZN5BTHID7ACLDataEPh+0x5ac>
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	330d      	adds	r3, #13
 8010f2e:	781a      	ldrb	r2, [r3, #0]
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	7f1b      	ldrb	r3, [r3, #28]
 8010f34:	429a      	cmp	r2, r3
 8010f36:	d10a      	bne.n	8010f4e <_ZN5BTHID7ACLDataEPh+0x5ac>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8010f38:	683b      	ldr	r3, [r7, #0]
 8010f3a:	7a5a      	ldrb	r2, [r3, #9]
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_RESPONSE);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	691b      	ldr	r3, [r3, #16]
 8010f44:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	611a      	str	r2, [r3, #16]
 8010f4c:	e17a      	b.n	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_scid[0] && l2capinbuf[13] == control_scid[1]) {
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	330c      	adds	r3, #12
 8010f52:	781a      	ldrb	r2, [r3, #0]
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	7d9b      	ldrb	r3, [r3, #22]
 8010f58:	429a      	cmp	r2, r3
 8010f5a:	d111      	bne.n	8010f80 <_ZN5BTHID7ACLDataEPh+0x5de>
 8010f5c:	683b      	ldr	r3, [r7, #0]
 8010f5e:	330d      	adds	r3, #13
 8010f60:	781a      	ldrb	r2, [r3, #0]
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	7ddb      	ldrb	r3, [r3, #23]
 8010f66:	429a      	cmp	r2, r3
 8010f68:	d10a      	bne.n	8010f80 <_ZN5BTHID7ACLDataEPh+0x5de>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	7a5a      	ldrb	r2, [r3, #9]
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE);
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	691b      	ldr	r3, [r3, #16]
 8010f76:	f043 0208 	orr.w	r2, r3, #8
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	611a      	str	r2, [r3, #16]
 8010f7e:	e161      	b.n	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_scid[0] && l2capinbuf[13] == interrupt_scid[1]) {
 8010f80:	683b      	ldr	r3, [r7, #0]
 8010f82:	330c      	adds	r3, #12
 8010f84:	781a      	ldrb	r2, [r3, #0]
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	7e1b      	ldrb	r3, [r3, #24]
 8010f8a:	429a      	cmp	r2, r3
 8010f8c:	f040 815a 	bne.w	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	330d      	adds	r3, #13
 8010f94:	781a      	ldrb	r2, [r3, #0]
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	7e5b      	ldrb	r3, [r3, #25]
 8010f9a:	429a      	cmp	r2, r3
 8010f9c:	f040 8152 	bne.w	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	7a5a      	ldrb	r2, [r3, #9]
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE);
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	691b      	ldr	r3, [r3, #16]
 8010fac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	611a      	str	r2, [r3, #16]
 8010fb4:	e146      	b.n	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_INFORMATION_REQUEST) {
 8010fb6:	683b      	ldr	r3, [r7, #0]
 8010fb8:	3308      	adds	r3, #8
 8010fba:	781b      	ldrb	r3, [r3, #0]
 8010fbc:	2b0a      	cmp	r3, #10
 8010fbe:	f040 8141 	bne.w	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nInformation request"), 0x80);
#endif
                                identifier = l2capinbuf[9];
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	7a5a      	ldrb	r2, [r3, #9]
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_information_response(hci_handle, identifier, l2capinbuf[12], l2capinbuf[13]);
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	6898      	ldr	r0, [r3, #8]
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	8999      	ldrh	r1, [r3, #12]
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	7d1a      	ldrb	r2, [r3, #20]
 8010fd6:	683b      	ldr	r3, [r7, #0]
 8010fd8:	330c      	adds	r3, #12
 8010fda:	781c      	ldrb	r4, [r3, #0]
 8010fdc:	683b      	ldr	r3, [r7, #0]
 8010fde:	330d      	adds	r3, #13
 8010fe0:	781b      	ldrb	r3, [r3, #0]
 8010fe2:	9300      	str	r3, [sp, #0]
 8010fe4:	4623      	mov	r3, r4
 8010fe6:	f7fe fef5 	bl	800fdd4 <_ZN3BTD26l2cap_information_responseEthhh>
 8010fea:	e12b      	b.n	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                identifier = l2capinbuf[9];
                                Notify(PSTR("\r\nL2CAP Unknown Signaling Command: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == sdp_dcid[0] && l2capinbuf[7] == sdp_dcid[1]) { // SDP
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	3306      	adds	r3, #6
 8010ff0:	781a      	ldrb	r2, [r3, #0]
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	f040 8087 	bne.w	801110c <_ZN5BTHID7ACLDataEPh+0x76a>
 8010ffe:	683b      	ldr	r3, [r7, #0]
 8011000:	3307      	adds	r3, #7
 8011002:	781a      	ldrb	r2, [r3, #0]
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 801100a:	429a      	cmp	r2, r3
 801100c:	d17e      	bne.n	801110c <_ZN5BTHID7ACLDataEPh+0x76a>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 801100e:	683b      	ldr	r3, [r7, #0]
 8011010:	3308      	adds	r3, #8
 8011012:	781b      	ldrb	r3, [r3, #0]
 8011014:	2b02      	cmp	r3, #2
 8011016:	d131      	bne.n	801107c <_ZN5BTHID7ACLDataEPh+0x6da>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_SEARCH_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_SEARCH_RESPONSE;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	2203      	movs	r2, #3
 801101c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 8011020:	683b      	ldr	r3, [r7, #0]
 8011022:	7a5a      	ldrb	r2, [r3, #9]
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 801102a:	683b      	ldr	r3, [r7, #0]
 801102c:	7a9a      	ldrb	r2, [r3, #10]
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2200      	movs	r2, #0
 8011038:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2205      	movs	r2, #5
 8011040:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB TotalServiceRecordCount
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	2200      	movs	r2, #0
 8011048:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x00; // LSB TotalServiceRecordCount = 0
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2200      	movs	r2, #0
 8011050:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                l2capoutbuf[7] = 0x00; // MSB CurrentServiceRecordCount
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	2200      	movs	r2, #0
 8011058:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // LSB CurrentServiceRecordCount = 0
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	2200      	movs	r2, #0
 8011060:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	2200      	movs	r2, #0
 8011068:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	3328      	adds	r3, #40	; 0x28
 8011070:	220a      	movs	r2, #10
 8011072:	4619      	mov	r1, r3
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	f000 fb6d 	bl	8011754 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 801107a:	e0e0      	b.n	801123e <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_ATTRIBUTE_REQUEST) {
 801107c:	683b      	ldr	r3, [r7, #0]
 801107e:	3308      	adds	r3, #8
 8011080:	781b      	ldrb	r3, [r3, #0]
 8011082:	2b04      	cmp	r3, #4
 8011084:	d131      	bne.n	80110ea <_ZN5BTHID7ACLDataEPh+0x748>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_ATTRIBUTE_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_ATTRIBUTE_RESPONSE;
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	2205      	movs	r2, #5
 801108a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 801108e:	683b      	ldr	r3, [r7, #0]
 8011090:	7a5a      	ldrb	r2, [r3, #9]
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 8011098:	683b      	ldr	r3, [r7, #0]
 801109a:	7a9a      	ldrb	r2, [r3, #10]
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	2200      	movs	r2, #0
 80110a6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	2205      	movs	r2, #5
 80110ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB AttributeListByteCount
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2200      	movs	r2, #0
 80110b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x02; // LSB AttributeListByteCount = 2
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	2202      	movs	r2, #2
 80110be:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                // TODO: What to send?
                                l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	2235      	movs	r2, #53	; 0x35
 80110c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // Length = 0
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	2200      	movs	r2, #0
 80110ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2200      	movs	r2, #0
 80110d6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	3328      	adds	r3, #40	; 0x28
 80110de:	220a      	movs	r2, #10
 80110e0:	4619      	mov	r1, r3
 80110e2:	6878      	ldr	r0, [r7, #4]
 80110e4:	f000 fb36 	bl	8011754 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 80110e8:	e0a9      	b.n	801123e <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST) {
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	3308      	adds	r3, #8
 80110ee:	781b      	ldrb	r3, [r3, #0]
 80110f0:	2b06      	cmp	r3, #6
 80110f2:	f040 80a4 	bne.w	801123e <_ZN5BTHID7ACLDataEPh+0x89c>
                                for(uint8_t i = 0; i < length; i++) {
                                        D_PrintHex<uint8_t > (l2capinbuf[13 + i], 0x80);
                                        Notify(PSTR(" "), 0x80);
                                }
#endif
                                serviceNotSupported(l2capinbuf[9], l2capinbuf[10]); // The service is not supported
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	3309      	adds	r3, #9
 80110fa:	7819      	ldrb	r1, [r3, #0]
 80110fc:	683b      	ldr	r3, [r7, #0]
 80110fe:	330a      	adds	r3, #10
 8011100:	781b      	ldrb	r3, [r3, #0]
 8011102:	461a      	mov	r2, r3
 8011104:	6878      	ldr	r0, [r7, #4]
 8011106:	f000 fb3f 	bl	8011788 <_ZN5BTHID19serviceNotSupportedEhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 801110a:	e098      	b.n	801123e <_ZN5BTHID7ACLDataEPh+0x89c>
                        else {
                                Notify(PSTR("\r\nUnknown PDU: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == interrupt_dcid[0] && l2capinbuf[7] == interrupt_dcid[1]) { // l2cap_interrupt
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	3306      	adds	r3, #6
 8011110:	781a      	ldrb	r2, [r3, #0]
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8011118:	429a      	cmp	r2, r3
 801111a:	d162      	bne.n	80111e2 <_ZN5BTHID7ACLDataEPh+0x840>
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	3307      	adds	r3, #7
 8011120:	781a      	ldrb	r2, [r3, #0]
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8011128:	429a      	cmp	r2, r3
 801112a:	d15a      	bne.n	80111e2 <_ZN5BTHID7ACLDataEPh+0x840>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA1) { // HID BT DATA (0xA0) | Report Type (Input 0x01)
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	3308      	adds	r3, #8
 8011130:	781b      	ldrb	r3, [r3, #0]
 8011132:	2ba1      	cmp	r3, #161	; 0xa1
 8011134:	f040 8085 	bne.w	8011242 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                lastBtDataInputIntMillis = (uint32_t)millis(); // Store the timestamp of the report
 8011138:	f7f1 fb84 	bl	8002844 <HAL_GetTick>
 801113c:	4602      	mov	r2, r0
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	675a      	str	r2, [r3, #116]	; 0x74

                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	3305      	adds	r3, #5
 8011146:	781b      	ldrb	r3, [r3, #0]
 8011148:	021b      	lsls	r3, r3, #8
 801114a:	b21a      	sxth	r2, r3
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	3304      	adds	r3, #4
 8011150:	781b      	ldrb	r3, [r3, #0]
 8011152:	b21b      	sxth	r3, r3
 8011154:	4313      	orrs	r3, r2
 8011156:	b21b      	sxth	r3, r3
 8011158:	81fb      	strh	r3, [r7, #14]
                                ParseBTHIDData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	3314      	adds	r3, #20
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	89fa      	ldrh	r2, [r7, #14]
 8011164:	b2d2      	uxtb	r2, r2
 8011166:	3a01      	subs	r2, #1
 8011168:	b2d1      	uxtb	r1, r2
 801116a:	683a      	ldr	r2, [r7, #0]
 801116c:	3209      	adds	r2, #9
 801116e:	6878      	ldr	r0, [r7, #4]
 8011170:	4798      	blx	r3

                                switch(l2capinbuf[9]) { // Report ID
 8011172:	683b      	ldr	r3, [r7, #0]
 8011174:	3309      	adds	r3, #9
 8011176:	781b      	ldrb	r3, [r3, #0]
 8011178:	2b01      	cmp	r3, #1
 801117a:	d002      	beq.n	8011182 <_ZN5BTHID7ACLDataEPh+0x7e0>
 801117c:	2b02      	cmp	r3, #2
 801117e:	d016      	beq.n	80111ae <_ZN5BTHID7ACLDataEPh+0x80c>
                        } else {
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nUnhandled L2CAP interrupt report: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
#endif
                        }
 8011180:	e05f      	b.n	8011242 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                if(pRptParser[KEYBOARD_PARSER_ID])
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	6a1b      	ldr	r3, [r3, #32]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d027      	beq.n	80111da <_ZN5BTHID7ACLDataEPh+0x838>
                                                        pRptParser[KEYBOARD_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6a18      	ldr	r0, [r3, #32]
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	6a1b      	ldr	r3, [r3, #32]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	681c      	ldr	r4, [r3, #0]
 8011196:	89fb      	ldrh	r3, [r7, #14]
 8011198:	b2db      	uxtb	r3, r3
 801119a:	3b02      	subs	r3, #2
 801119c:	b2da      	uxtb	r2, r3
 801119e:	683b      	ldr	r3, [r7, #0]
 80111a0:	330a      	adds	r3, #10
 80111a2:	9300      	str	r3, [sp, #0]
 80111a4:	4613      	mov	r3, r2
 80111a6:	2200      	movs	r2, #0
 80111a8:	6879      	ldr	r1, [r7, #4]
 80111aa:	47a0      	blx	r4
                                                break;
 80111ac:	e015      	b.n	80111da <_ZN5BTHID7ACLDataEPh+0x838>
                                                if(pRptParser[MOUSE_PARSER_ID])
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d013      	beq.n	80111de <_ZN5BTHID7ACLDataEPh+0x83c>
                                                        pRptParser[MOUSE_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	681c      	ldr	r4, [r3, #0]
 80111c2:	89fb      	ldrh	r3, [r7, #14]
 80111c4:	b2db      	uxtb	r3, r3
 80111c6:	3b02      	subs	r3, #2
 80111c8:	b2da      	uxtb	r2, r3
 80111ca:	683b      	ldr	r3, [r7, #0]
 80111cc:	330a      	adds	r3, #10
 80111ce:	9300      	str	r3, [sp, #0]
 80111d0:	4613      	mov	r3, r2
 80111d2:	2200      	movs	r2, #0
 80111d4:	6879      	ldr	r1, [r7, #4]
 80111d6:	47a0      	blx	r4
                                                break;
 80111d8:	e001      	b.n	80111de <_ZN5BTHID7ACLDataEPh+0x83c>
                                                break;
 80111da:	bf00      	nop
 80111dc:	e031      	b.n	8011242 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                break;
 80111de:	bf00      	nop
                        }
 80111e0:	e02f      	b.n	8011242 <_ZN5BTHID7ACLDataEPh+0x8a0>
                } else if(l2capinbuf[6] == control_dcid[0] && l2capinbuf[7] == control_dcid[1]) { // l2cap_control
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	3306      	adds	r3, #6
 80111e6:	781a      	ldrb	r2, [r3, #0]
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80111ee:	429a      	cmp	r2, r3
 80111f0:	d128      	bne.n	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	3307      	adds	r3, #7
 80111f6:	781a      	ldrb	r2, [r3, #0]
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80111fe:	429a      	cmp	r2, r3
 8011200:	d120      	bne.n	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA3) { // HID BT DATA (0xA0) | Report Type (Feature 0x03)
 8011202:	683b      	ldr	r3, [r7, #0]
 8011204:	3308      	adds	r3, #8
 8011206:	781b      	ldrb	r3, [r3, #0]
 8011208:	2ba3      	cmp	r3, #163	; 0xa3
 801120a:	d11b      	bne.n	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 801120c:	683b      	ldr	r3, [r7, #0]
 801120e:	3305      	adds	r3, #5
 8011210:	781b      	ldrb	r3, [r3, #0]
 8011212:	021b      	lsls	r3, r3, #8
 8011214:	b21a      	sxth	r2, r3
 8011216:	683b      	ldr	r3, [r7, #0]
 8011218:	3304      	adds	r3, #4
 801121a:	781b      	ldrb	r3, [r3, #0]
 801121c:	b21b      	sxth	r3, r3
 801121e:	4313      	orrs	r3, r2
 8011220:	b21b      	sxth	r3, r3
 8011222:	81bb      	strh	r3, [r7, #12]
                                ParseBTHIDControlData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	3318      	adds	r3, #24
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	89ba      	ldrh	r2, [r7, #12]
 801122e:	b2d2      	uxtb	r2, r2
 8011230:	3a01      	subs	r2, #1
 8011232:	b2d1      	uxtb	r1, r2
 8011234:	683a      	ldr	r2, [r7, #0]
 8011236:	3209      	adds	r2, #9
 8011238:	6878      	ldr	r0, [r7, #4]
 801123a:	4798      	blx	r3
 801123c:	e002      	b.n	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 801123e:	bf00      	nop
 8011240:	e000      	b.n	8011244 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        }
 8011242:	bf00      	nop
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
                }
#endif
                SDP_task();
 8011244:	6878      	ldr	r0, [r7, #4]
 8011246:	f000 f807 	bl	8011258 <_ZN5BTHID8SDP_taskEv>
                L2CAP_task();
 801124a:	6878      	ldr	r0, [r7, #4]
 801124c:	f000 f8b4 	bl	80113b8 <_ZN5BTHID10L2CAP_taskEv>
        }
}
 8011250:	bf00      	nop
 8011252:	3714      	adds	r7, #20
 8011254:	46bd      	mov	sp, r7
 8011256:	bd90      	pop	{r4, r7, pc}

08011258 <_ZN5BTHID8SDP_taskEv>:

void BTHID::SDP_task() {
 8011258:	b5b0      	push	{r4, r5, r7, lr}
 801125a:	b084      	sub	sp, #16
 801125c:	af02      	add	r7, sp, #8
 801125e:	6078      	str	r0, [r7, #4]
        switch(l2cap_sdp_state) {
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	7e9b      	ldrb	r3, [r3, #26]
 8011264:	2b0e      	cmp	r3, #14
 8011266:	f000 8084 	beq.w	8011372 <_ZN5BTHID8SDP_taskEv+0x11a>
 801126a:	2b0e      	cmp	r3, #14
 801126c:	f300 809f 	bgt.w	80113ae <_ZN5BTHID8SDP_taskEv+0x156>
 8011270:	2b0a      	cmp	r3, #10
 8011272:	d002      	beq.n	801127a <_ZN5BTHID8SDP_taskEv+0x22>
 8011274:	2b0b      	cmp	r3, #11
 8011276:	d068      	beq.n	801134a <_ZN5BTHID8SDP_taskEv+0xf2>
                                hci_handle = -1; // Reset handle
                                Reset();
                        }
                        break;
        }
}
 8011278:	e099      	b.n	80113ae <_ZN5BTHID8SDP_taskEv+0x156>
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST)) {
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	691b      	ldr	r3, [r3, #16]
 801127e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011282:	2b00      	cmp	r3, #0
 8011284:	d041      	beq.n	801130a <_ZN5BTHID8SDP_taskEv+0xb2>
                                l2cap_clear_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST); // Clear flag
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	691b      	ldr	r3, [r3, #16]
 801128a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	611a      	str	r2, [r3, #16]
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, PENDING);
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	6898      	ldr	r0, [r3, #8]
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	8999      	ldrh	r1, [r3, #12]
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	7d1a      	ldrb	r2, [r3, #20]
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	331b      	adds	r3, #27
 80112a8:	2501      	movs	r5, #1
 80112aa:	9501      	str	r5, [sp, #4]
 80112ac:	9300      	str	r3, [sp, #0]
 80112ae:	4623      	mov	r3, r4
 80112b0:	f7fe fc2b 	bl	800fb0a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 80112b4:	2001      	movs	r0, #1
 80112b6:	f7f1 fad1 	bl	800285c <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, SUCCESSFUL);
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	6898      	ldr	r0, [r3, #8]
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	8999      	ldrh	r1, [r3, #12]
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	7d1a      	ldrb	r2, [r3, #20]
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	331b      	adds	r3, #27
 80112d0:	2500      	movs	r5, #0
 80112d2:	9501      	str	r5, [sp, #4]
 80112d4:	9300      	str	r3, [sp, #0]
 80112d6:	4623      	mov	r3, r4
 80112d8:	f7fe fc17 	bl	800fb0a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	7d1b      	ldrb	r3, [r3, #20]
 80112e0:	3301      	adds	r3, #1
 80112e2:	b2da      	uxtb	r2, r3
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	751a      	strb	r2, [r3, #20]
                                delay(1);
 80112e8:	2001      	movs	r0, #1
 80112ea:	f7f1 fab7 	bl	800285c <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	6898      	ldr	r0, [r3, #8]
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	8999      	ldrh	r1, [r3, #12]
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	7d1a      	ldrb	r2, [r3, #20]
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	331b      	adds	r3, #27
 80112fe:	f7fe fc51 	bl	800fba4 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_sdp_state = L2CAP_SDP_SUCCESS;
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	220b      	movs	r2, #11
 8011306:	769a      	strb	r2, [r3, #26]
                        break;
 8011308:	e04c      	b.n	80113a4 <_ZN5BTHID8SDP_taskEv+0x14c>
                        } else if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST)) {
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	691b      	ldr	r3, [r3, #16]
 801130e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011312:	2b00      	cmp	r3, #0
 8011314:	d046      	beq.n	80113a4 <_ZN5BTHID8SDP_taskEv+0x14c>
                                l2cap_clear_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST); // Clear flag
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	691b      	ldr	r3, [r3, #16]
 801131a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	611a      	str	r2, [r3, #16]
                                SDPConnected = false;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2200      	movs	r2, #0
 8011326:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                pBtd->l2cap_disconnection_response(hci_handle, identifier, sdp_dcid, sdp_scid);
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	6898      	ldr	r0, [r3, #8]
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	8999      	ldrh	r1, [r3, #12]
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	7d1a      	ldrb	r2, [r3, #20]
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	331b      	adds	r3, #27
 8011340:	9300      	str	r3, [sp, #0]
 8011342:	4623      	mov	r3, r4
 8011344:	f7fe fd09 	bl	800fd5a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                        break;
 8011348:	e02c      	b.n	80113a4 <_ZN5BTHID8SDP_taskEv+0x14c>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS)) {
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	691b      	ldr	r3, [r3, #16]
 801134e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011352:	2b00      	cmp	r3, #0
 8011354:	d028      	beq.n	80113a8 <_ZN5BTHID8SDP_taskEv+0x150>
                                l2cap_clear_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS); // Clear flag
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	691b      	ldr	r3, [r3, #16]
 801135a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	611a      	str	r2, [r3, #16]
                                SDPConnected = true;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	2201      	movs	r2, #1
 8011366:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                l2cap_sdp_state = L2CAP_SDP_WAIT;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	220a      	movs	r2, #10
 801136e:	769a      	strb	r2, [r3, #26]
                        break;
 8011370:	e01a      	b.n	80113a8 <_ZN5BTHID8SDP_taskEv+0x150>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_RESPONSE)) {
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	691b      	ldr	r3, [r3, #16]
 8011376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801137a:	2b00      	cmp	r3, #0
 801137c:	d016      	beq.n	80113ac <_ZN5BTHID8SDP_taskEv+0x154>
                                pBtd->hci_disconnect(hci_handle);
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	689a      	ldr	r2, [r3, #8]
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	899b      	ldrh	r3, [r3, #12]
 8011386:	4619      	mov	r1, r3
 8011388:	4610      	mov	r0, r2
 801138a:	f7fe fa92 	bl	800f8b2 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011394:	819a      	strh	r2, [r3, #12]
                                Reset();
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	3308      	adds	r3, #8
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	6878      	ldr	r0, [r7, #4]
 80113a0:	4798      	blx	r3
                        break;
 80113a2:	e003      	b.n	80113ac <_ZN5BTHID8SDP_taskEv+0x154>
                        break;
 80113a4:	bf00      	nop
 80113a6:	e002      	b.n	80113ae <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 80113a8:	bf00      	nop
 80113aa:	e000      	b.n	80113ae <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 80113ac:	bf00      	nop
}
 80113ae:	bf00      	nop
 80113b0:	3708      	adds	r7, #8
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080113b8 <_ZN5BTHID10L2CAP_taskEv>:

void BTHID::L2CAP_task() {
 80113b8:	b5b0      	push	{r4, r5, r7, lr}
 80113ba:	b084      	sub	sp, #16
 80113bc:	af02      	add	r7, sp, #8
 80113be:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80113c6:	3b01      	subs	r3, #1
 80113c8:	2b08      	cmp	r3, #8
 80113ca:	f200 812c 	bhi.w	8011626 <_ZN5BTHID10L2CAP_taskEv+0x26e>
 80113ce:	a201      	add	r2, pc, #4	; (adr r2, 80113d4 <_ZN5BTHID10L2CAP_taskEv+0x1c>)
 80113d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113d4:	08011605 	.word	0x08011605
 80113d8:	0801149f 	.word	0x0801149f
 80113dc:	080114d7 	.word	0x080114d7
 80113e0:	080113f9 	.word	0x080113f9
 80113e4:	080115d1 	.word	0x080115d1
 80113e8:	08011417 	.word	0x08011417
 80113ec:	0801151f 	.word	0x0801151f
 80113f0:	08011555 	.word	0x08011555
 80113f4:	08011591 	.word	0x08011591
                        /* These states are used if the HID device is the host */
                case L2CAP_CONTROL_SUCCESS:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	691b      	ldr	r3, [r3, #16]
 80113fc:	f003 0302 	and.w	r3, r3, #2
 8011400:	2b00      	cmp	r3, #0
 8011402:	f000 8101 	beq.w	8011608 <_ZN5BTHID10L2CAP_taskEv+0x250>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Control Successfully Configured"), 0x80);
#endif
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 8011406:	6878      	ldr	r0, [r7, #4]
 8011408:	f000 f9f9 	bl	80117fe <_ZN5BTHID11setProtocolEv>
                                l2cap_state = L2CAP_INTERRUPT_SETUP;
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2206      	movs	r2, #6
 8011410:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8011414:	e0f8      	b.n	8011608 <_ZN5BTHID10L2CAP_taskEv+0x250>

                case L2CAP_INTERRUPT_SETUP:
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST)) {
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	691b      	ldr	r3, [r3, #16]
 801141a:	f003 0310 	and.w	r3, r3, #16
 801141e:	2b00      	cmp	r3, #0
 8011420:	f000 80f4 	beq.w	801160c <_ZN5BTHID10L2CAP_taskEv+0x254>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Interrupt Incoming Connection Request"), 0x80);
#endif
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, PENDING);
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	6898      	ldr	r0, [r3, #8]
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	8999      	ldrh	r1, [r3, #12]
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	7d1a      	ldrb	r2, [r3, #20]
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	3318      	adds	r3, #24
 801143a:	2501      	movs	r5, #1
 801143c:	9501      	str	r5, [sp, #4]
 801143e:	9300      	str	r3, [sp, #0]
 8011440:	4623      	mov	r3, r4
 8011442:	f7fe fb62 	bl	800fb0a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8011446:	2001      	movs	r0, #1
 8011448:	f7f1 fa08 	bl	800285c <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, SUCCESSFUL);
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	6898      	ldr	r0, [r3, #8]
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	8999      	ldrh	r1, [r3, #12]
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	7d1a      	ldrb	r2, [r3, #20]
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	3318      	adds	r3, #24
 8011462:	2500      	movs	r5, #0
 8011464:	9501      	str	r5, [sp, #4]
 8011466:	9300      	str	r3, [sp, #0]
 8011468:	4623      	mov	r3, r4
 801146a:	f7fe fb4e 	bl	800fb0a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	7d1b      	ldrb	r3, [r3, #20]
 8011472:	3301      	adds	r3, #1
 8011474:	b2da      	uxtb	r2, r3
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	751a      	strb	r2, [r3, #20]
                                delay(1);
 801147a:	2001      	movs	r0, #1
 801147c:	f7f1 f9ee 	bl	800285c <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	6898      	ldr	r0, [r3, #8]
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	8999      	ldrh	r1, [r3, #12]
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	7d1a      	ldrb	r2, [r3, #20]
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	3318      	adds	r3, #24
 8011490:	f7fe fb88 	bl	800fba4 <_ZN3BTD20l2cap_config_requestEthPh>

                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	2208      	movs	r2, #8
 8011498:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801149c:	e0b6      	b.n	801160c <_ZN5BTHID10L2CAP_taskEv+0x254>

                        /* These states are used if the Arduino is the host */
                case L2CAP_CONTROL_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONTROL_CONNECTED)) {
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	691b      	ldr	r3, [r3, #16]
 80114a2:	f003 0304 	and.w	r3, r3, #4
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	f000 80b2 	beq.w	8011610 <_ZN5BTHID10L2CAP_taskEv+0x258>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Config Request"), 0x80);
#endif
                                identifier++;
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	7d1b      	ldrb	r3, [r3, #20]
 80114b0:	3301      	adds	r3, #1
 80114b2:	b2da      	uxtb	r2, r3
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	6898      	ldr	r0, [r3, #8]
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	8999      	ldrh	r1, [r3, #12]
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	7d1a      	ldrb	r2, [r3, #20]
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	3316      	adds	r3, #22
 80114c8:	f7fe fb6c 	bl	800fba4 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_CONFIG_REQUEST;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2203      	movs	r2, #3
 80114d0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80114d4:	e09c      	b.n	8011610 <_ZN5BTHID10L2CAP_taskEv+0x258>

                case L2CAP_CONTROL_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	691b      	ldr	r3, [r3, #16]
 80114da:	f003 0302 	and.w	r3, r3, #2
 80114de:	2b00      	cmp	r3, #0
 80114e0:	f000 8098 	beq.w	8011614 <_ZN5BTHID10L2CAP_taskEv+0x25c>
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 80114e4:	6878      	ldr	r0, [r7, #4]
 80114e6:	f000 f98a 	bl	80117fe <_ZN5BTHID11setProtocolEv>
                                delay(1); // Short delay between commands - just to be sure
 80114ea:	2001      	movs	r0, #1
 80114ec:	f7f1 f9b6 	bl	800285c <HAL_Delay>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Connection Request"), 0x80);
#endif
                                identifier++;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	7d1b      	ldrb	r3, [r3, #20]
 80114f4:	3301      	adds	r3, #1
 80114f6:	b2da      	uxtb	r2, r3
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, interrupt_dcid, HID_INTR_PSM);
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	6898      	ldr	r0, [r3, #8]
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	8999      	ldrh	r1, [r3, #12]
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	7d1a      	ldrb	r2, [r3, #20]
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	336d      	adds	r3, #109	; 0x6d
 801150c:	2413      	movs	r4, #19
 801150e:	9400      	str	r4, [sp, #0]
 8011510:	f7fe fabd 	bl	800fa8e <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_INTERRUPT_CONNECT_REQUEST;
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	2207      	movs	r2, #7
 8011518:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801151c:	e07a      	b.n	8011614 <_ZN5BTHID10L2CAP_taskEv+0x25c>

                case L2CAP_INTERRUPT_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_INTERRUPT_CONNECTED)) {
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	691b      	ldr	r3, [r3, #16]
 8011522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011526:	2b00      	cmp	r3, #0
 8011528:	d076      	beq.n	8011618 <_ZN5BTHID10L2CAP_taskEv+0x260>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Config Request"), 0x80);
#endif
                                identifier++;
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	7d1b      	ldrb	r3, [r3, #20]
 801152e:	3301      	adds	r3, #1
 8011530:	b2da      	uxtb	r2, r3
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	6898      	ldr	r0, [r3, #8]
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	8999      	ldrh	r1, [r3, #12]
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	7d1a      	ldrb	r2, [r3, #20]
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	3318      	adds	r3, #24
 8011546:	f7fe fb2d 	bl	800fba4 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	2208      	movs	r2, #8
 801154e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8011552:	e061      	b.n	8011618 <_ZN5BTHID10L2CAP_taskEv+0x260>

                case L2CAP_INTERRUPT_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS)) { // Now the HID channels is established
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	691b      	ldr	r3, [r3, #16]
 8011558:	f003 0320 	and.w	r3, r3, #32
 801155c:	2b00      	cmp	r3, #0
 801155e:	d05d      	beq.n	801161c <_ZN5BTHID10L2CAP_taskEv+0x264>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Channels Established"), 0x80);
#endif
                                pBtd->connectToHIDDevice = false;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	689b      	ldr	r3, [r3, #8]
 8011564:	2200      	movs	r2, #0
 8011566:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                pBtd->pairWithHIDDevice = false;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	689b      	ldr	r3, [r3, #8]
 801156e:	2200      	movs	r2, #0
 8011570:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                connected = true;
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	2201      	movs	r2, #1
 8011578:	755a      	strb	r2, [r3, #21]
                                onInit();
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	3310      	adds	r3, #16
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	6878      	ldr	r0, [r7, #4]
 8011584:	4798      	blx	r3
                                l2cap_state = L2CAP_DONE;
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	2201      	movs	r2, #1
 801158a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801158e:	e045      	b.n	801161c <_ZN5BTHID10L2CAP_taskEv+0x264>

                case L2CAP_DONE:
                        break;

                case L2CAP_INTERRUPT_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE)) {
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	691b      	ldr	r3, [r3, #16]
 8011594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011598:	2b00      	cmp	r3, #0
 801159a:	d041      	beq.n	8011620 <_ZN5BTHID10L2CAP_taskEv+0x268>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Interrupt Channel"), 0x80);
#endif
                                identifier++;
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	7d1b      	ldrb	r3, [r3, #20]
 80115a0:	3301      	adds	r3, #1
 80115a2:	b2da      	uxtb	r2, r3
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_disconnection_request(hci_handle, identifier, control_scid, control_dcid);
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	6898      	ldr	r0, [r3, #8]
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	8999      	ldrh	r1, [r3, #12]
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	7d1a      	ldrb	r2, [r3, #20]
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	f103 0416 	add.w	r4, r3, #22
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	336b      	adds	r3, #107	; 0x6b
 80115be:	9300      	str	r3, [sp, #0]
 80115c0:	4623      	mov	r3, r4
 80115c2:	f7fe fb8d 	bl	800fce0 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
                                l2cap_state = L2CAP_CONTROL_DISCONNECT;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	2205      	movs	r2, #5
 80115ca:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80115ce:	e027      	b.n	8011620 <_ZN5BTHID10L2CAP_taskEv+0x268>

                case L2CAP_CONTROL_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE)) {
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	691b      	ldr	r3, [r3, #16]
 80115d4:	f003 0308 	and.w	r3, r3, #8
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d023      	beq.n	8011624 <_ZN5BTHID10L2CAP_taskEv+0x26c>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Control Channel"), 0x80);
#endif
                                pBtd->hci_disconnect(hci_handle);
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	689a      	ldr	r2, [r3, #8]
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	899b      	ldrh	r3, [r3, #12]
 80115e4:	4619      	mov	r1, r3
 80115e6:	4610      	mov	r0, r2
 80115e8:	f7fe f963 	bl	800f8b2 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80115f2:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	2200      	movs	r2, #0
 80115f8:	611a      	str	r2, [r3, #16]
                                l2cap_state = L2CAP_WAIT;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	2200      	movs	r2, #0
 80115fe:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8011602:	e00f      	b.n	8011624 <_ZN5BTHID10L2CAP_taskEv+0x26c>
                        break;
 8011604:	bf00      	nop
 8011606:	e00e      	b.n	8011626 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8011608:	bf00      	nop
 801160a:	e00c      	b.n	8011626 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 801160c:	bf00      	nop
 801160e:	e00a      	b.n	8011626 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8011610:	bf00      	nop
 8011612:	e008      	b.n	8011626 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8011614:	bf00      	nop
 8011616:	e006      	b.n	8011626 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8011618:	bf00      	nop
 801161a:	e004      	b.n	8011626 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 801161c:	bf00      	nop
 801161e:	e002      	b.n	8011626 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8011620:	bf00      	nop
 8011622:	e000      	b.n	8011626 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8011624:	bf00      	nop
        }
}
 8011626:	bf00      	nop
 8011628:	3708      	adds	r7, #8
 801162a:	46bd      	mov	sp, r7
 801162c:	bdb0      	pop	{r4, r5, r7, pc}
 801162e:	bf00      	nop

08011630 <_ZN5BTHID3RunEv>:

void BTHID::Run() {
 8011630:	b5b0      	push	{r4, r5, r7, lr}
 8011632:	b084      	sub	sp, #16
 8011634:	af02      	add	r7, sp, #8
 8011636:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 801163e:	2b00      	cmp	r3, #0
 8011640:	f040 8084 	bne.w	801174c <_ZN5BTHID3RunEv+0x11c>
                case L2CAP_WAIT:
                        if(pBtd->connectToHIDDevice && !pBtd->l2capConnectionClaimed && !connected && !activeConnection) {
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	689b      	ldr	r3, [r3, #8]
 8011648:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801164c:	2b00      	cmp	r3, #0
 801164e:	d03a      	beq.n	80116c6 <_ZN5BTHID3RunEv+0x96>
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	689b      	ldr	r3, [r3, #8]
 8011654:	7a5b      	ldrb	r3, [r3, #9]
 8011656:	f083 0301 	eor.w	r3, r3, #1
 801165a:	b2db      	uxtb	r3, r3
 801165c:	2b00      	cmp	r3, #0
 801165e:	d032      	beq.n	80116c6 <_ZN5BTHID3RunEv+0x96>
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	7d5b      	ldrb	r3, [r3, #21]
 8011664:	f083 0301 	eor.w	r3, r3, #1
 8011668:	b2db      	uxtb	r3, r3
 801166a:	2b00      	cmp	r3, #0
 801166c:	d02b      	beq.n	80116c6 <_ZN5BTHID3RunEv+0x96>
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8011674:	f083 0301 	eor.w	r3, r3, #1
 8011678:	b2db      	uxtb	r3, r3
 801167a:	2b00      	cmp	r3, #0
 801167c:	d023      	beq.n	80116c6 <_ZN5BTHID3RunEv+0x96>
                                pBtd->l2capConnectionClaimed = true;
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	689b      	ldr	r3, [r3, #8]
 8011682:	2201      	movs	r2, #1
 8011684:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	2201      	movs	r2, #1
 801168a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Connection Request"), 0x80);
#endif
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	689b      	ldr	r3, [r3, #8]
 8011692:	8b5a      	ldrh	r2, [r3, #26]
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	2200      	movs	r2, #0
 801169c:	611a      	str	r2, [r3, #16]
                                identifier = 0;
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	2200      	movs	r2, #0
 80116a2:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, control_dcid, HID_CTRL_PSM);
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	6898      	ldr	r0, [r3, #8]
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	8999      	ldrh	r1, [r3, #12]
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	7d1a      	ldrb	r2, [r3, #20]
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	336b      	adds	r3, #107	; 0x6b
 80116b4:	2411      	movs	r4, #17
 80116b6:	9400      	str	r4, [sp, #0]
 80116b8:	f7fe f9e9 	bl	800fa8e <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_CONTROL_CONNECT_REQUEST;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	2202      	movs	r2, #2
 80116c0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                                identifier++;
                                delay(1);
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
                        }
                        break;
 80116c4:	e041      	b.n	801174a <_ZN5BTHID3RunEv+0x11a>
                        } else if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST)) {
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	691b      	ldr	r3, [r3, #16]
 80116ca:	f003 0301 	and.w	r3, r3, #1
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d03b      	beq.n	801174a <_ZN5BTHID3RunEv+0x11a>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, PENDING);
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	6898      	ldr	r0, [r3, #8]
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	8999      	ldrh	r1, [r3, #12]
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	7d1a      	ldrb	r2, [r3, #20]
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	3316      	adds	r3, #22
 80116e8:	2501      	movs	r5, #1
 80116ea:	9501      	str	r5, [sp, #4]
 80116ec:	9300      	str	r3, [sp, #0]
 80116ee:	4623      	mov	r3, r4
 80116f0:	f7fe fa0b 	bl	800fb0a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 80116f4:	2001      	movs	r0, #1
 80116f6:	f7f1 f8b1 	bl	800285c <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, SUCCESSFUL);
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	6898      	ldr	r0, [r3, #8]
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	8999      	ldrh	r1, [r3, #12]
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	7d1a      	ldrb	r2, [r3, #20]
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	3316      	adds	r3, #22
 8011710:	2500      	movs	r5, #0
 8011712:	9501      	str	r5, [sp, #4]
 8011714:	9300      	str	r3, [sp, #0]
 8011716:	4623      	mov	r3, r4
 8011718:	f7fe f9f7 	bl	800fb0a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	7d1b      	ldrb	r3, [r3, #20]
 8011720:	3301      	adds	r3, #1
 8011722:	b2da      	uxtb	r2, r3
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	751a      	strb	r2, [r3, #20]
                                delay(1);
 8011728:	2001      	movs	r0, #1
 801172a:	f7f1 f897 	bl	800285c <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	6898      	ldr	r0, [r3, #8]
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	8999      	ldrh	r1, [r3, #12]
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	7d1a      	ldrb	r2, [r3, #20]
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	3316      	adds	r3, #22
 801173e:	f7fe fa31 	bl	800fba4 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	2204      	movs	r2, #4
 8011746:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        break;
 801174a:	bf00      	nop
        }
}
 801174c:	bf00      	nop
 801174e:	3708      	adds	r7, #8
 8011750:	46bd      	mov	sp, r7
 8011752:	bdb0      	pop	{r4, r5, r7, pc}

08011754 <_ZN5BTHID11SDP_CommandEPhh>:

void BTHID::SDP_Command(uint8_t* data, uint8_t nbytes) { // See page 223 in the Bluetooth specs
 8011754:	b590      	push	{r4, r7, lr}
 8011756:	b087      	sub	sp, #28
 8011758:	af02      	add	r7, sp, #8
 801175a:	60f8      	str	r0, [r7, #12]
 801175c:	60b9      	str	r1, [r7, #8]
 801175e:	4613      	mov	r3, r2
 8011760:	71fb      	strb	r3, [r7, #7]
        pBtd->L2CAP_Command(hci_handle, data, nbytes, sdp_scid[0], sdp_scid[1]);
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	6898      	ldr	r0, [r3, #8]
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	8999      	ldrh	r1, [r3, #12]
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	7edb      	ldrb	r3, [r3, #27]
 801176e:	68fa      	ldr	r2, [r7, #12]
 8011770:	7f12      	ldrb	r2, [r2, #28]
 8011772:	79fc      	ldrb	r4, [r7, #7]
 8011774:	9201      	str	r2, [sp, #4]
 8011776:	9300      	str	r3, [sp, #0]
 8011778:	4623      	mov	r3, r4
 801177a:	68ba      	ldr	r2, [r7, #8]
 801177c:	f7fe f8f8 	bl	800f970 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8011780:	bf00      	nop
 8011782:	3714      	adds	r7, #20
 8011784:	46bd      	mov	sp, r7
 8011786:	bd90      	pop	{r4, r7, pc}

08011788 <_ZN5BTHID19serviceNotSupportedEhh>:

void BTHID::serviceNotSupported(uint8_t transactionIDHigh, uint8_t transactionIDLow) { // See page 235 in the Bluetooth specs
 8011788:	b580      	push	{r7, lr}
 801178a:	b082      	sub	sp, #8
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
 8011790:	460b      	mov	r3, r1
 8011792:	70fb      	strb	r3, [r7, #3]
 8011794:	4613      	mov	r3, r2
 8011796:	70bb      	strb	r3, [r7, #2]
        l2capoutbuf[0] = SDP_SERVICE_SEARCH_ATTRIBUTE_RESPONSE;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	2207      	movs	r2, #7
 801179c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        l2capoutbuf[1] = transactionIDHigh;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	78fa      	ldrb	r2, [r7, #3]
 80117a4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        l2capoutbuf[2] = transactionIDLow;
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	78ba      	ldrb	r2, [r7, #2]
 80117ac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        l2capoutbuf[3] = 0x00; // MSB Parameter Length
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	2200      	movs	r2, #0
 80117b4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	2205      	movs	r2, #5
 80117bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        l2capoutbuf[5] = 0x00; // MSB AttributeListsByteCount
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	2200      	movs	r2, #0
 80117c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        l2capoutbuf[6] = 0x02; // LSB AttributeListsByteCount = 2
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	2202      	movs	r2, #2
 80117cc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

        /* Attribute ID/Value Sequence: */
        l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	2235      	movs	r2, #53	; 0x35
 80117d4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        l2capoutbuf[8] = 0x00; // Length = 0
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	2200      	movs	r2, #0
 80117dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        l2capoutbuf[9] = 0x00; // No continuation state
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2200      	movs	r2, #0
 80117e4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        SDP_Command(l2capoutbuf, 10);
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	3328      	adds	r3, #40	; 0x28
 80117ec:	220a      	movs	r2, #10
 80117ee:	4619      	mov	r1, r3
 80117f0:	6878      	ldr	r0, [r7, #4]
 80117f2:	f7ff ffaf 	bl	8011754 <_ZN5BTHID11SDP_CommandEPhh>
}
 80117f6:	bf00      	nop
 80117f8:	3708      	adds	r7, #8
 80117fa:	46bd      	mov	sp, r7
 80117fc:	bd80      	pop	{r7, pc}

080117fe <_ZN5BTHID11setProtocolEv>:

/************************************************************/
/*                    HID Commands                          */

/************************************************************/
void BTHID::setProtocol() {
 80117fe:	b590      	push	{r4, r7, lr}
 8011800:	b087      	sub	sp, #28
 8011802:	af02      	add	r7, sp, #8
 8011804:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nSet protocol mode: "), 0x80);
        D_PrintHex<uint8_t > (protocolMode, 0x80);
#endif
        if (protocolMode != USB_HID_BOOT_PROTOCOL && protocolMode != HID_RPT_PROTOCOL) {
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801180c:	2b00      	cmp	r3, #0
 801180e:	d008      	beq.n	8011822 <_ZN5BTHID11setProtocolEv+0x24>
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8011816:	2b01      	cmp	r3, #1
 8011818:	d003      	beq.n	8011822 <_ZN5BTHID11setProtocolEv+0x24>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nNot a valid protocol mode. Using Boot protocol instead."), 0x80);
#endif
                protocolMode = USB_HID_BOOT_PROTOCOL; // Use Boot Protocol by default
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	2200      	movs	r2, #0
 801181e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        }
        uint8_t command = 0x70 | protocolMode; // Set Protocol, see Bluetooth HID specs page 33
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8011828:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 801182c:	b2db      	uxtb	r3, r3
 801182e:	73fb      	strb	r3, [r7, #15]
        pBtd->L2CAP_Command(hci_handle, &command, 1, control_scid[0], control_scid[1]);
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	6898      	ldr	r0, [r3, #8]
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	8999      	ldrh	r1, [r3, #12]
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	7d9b      	ldrb	r3, [r3, #22]
 801183c:	687a      	ldr	r2, [r7, #4]
 801183e:	7dd2      	ldrb	r2, [r2, #23]
 8011840:	f107 040f 	add.w	r4, r7, #15
 8011844:	9201      	str	r2, [sp, #4]
 8011846:	9300      	str	r3, [sp, #0]
 8011848:	2301      	movs	r3, #1
 801184a:	4622      	mov	r2, r4
 801184c:	f7fe f890 	bl	800f970 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8011850:	bf00      	nop
 8011852:	3714      	adds	r7, #20
 8011854:	46bd      	mov	sp, r7
 8011856:	bd90      	pop	{r4, r7, pc}

08011858 <_ZN9PS4Parser9checkDpadE10ButtonEnum>:
};

// To enable serial debugging see "settings.h"
//#define PRINTREPORT // Uncomment to print the report send by the PS4 Controller

bool PS4Parser::checkDpad(ButtonEnum b) {
 8011858:	b480      	push	{r7}
 801185a:	b083      	sub	sp, #12
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
 8011860:	460b      	mov	r3, r1
 8011862:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 8011864:	78fb      	ldrb	r3, [r7, #3]
 8011866:	2b03      	cmp	r3, #3
 8011868:	d86e      	bhi.n	8011948 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf0>
 801186a:	a201      	add	r2, pc, #4	; (adr r2, 8011870 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x18>)
 801186c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011870:	08011881 	.word	0x08011881
 8011874:	080118b3 	.word	0x080118b3
 8011878:	080118e5 	.word	0x080118e5
 801187c:	08011917 	.word	0x08011917
                case UP:
                        return ps4Data.btn.dpad == DPAD_LEFT_UP || ps4Data.btn.dpad == DPAD_UP || ps4Data.btn.dpad == DPAD_UP_RIGHT;
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	7a1b      	ldrb	r3, [r3, #8]
 8011884:	f003 030f 	and.w	r3, r3, #15
 8011888:	b2db      	uxtb	r3, r3
 801188a:	2b07      	cmp	r3, #7
 801188c:	d00d      	beq.n	80118aa <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	7a1b      	ldrb	r3, [r3, #8]
 8011892:	f003 030f 	and.w	r3, r3, #15
 8011896:	b2db      	uxtb	r3, r3
 8011898:	2b00      	cmp	r3, #0
 801189a:	d006      	beq.n	80118aa <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	7a1b      	ldrb	r3, [r3, #8]
 80118a0:	f003 030f 	and.w	r3, r3, #15
 80118a4:	b2db      	uxtb	r3, r3
 80118a6:	2b01      	cmp	r3, #1
 80118a8:	d101      	bne.n	80118ae <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x56>
 80118aa:	2301      	movs	r3, #1
 80118ac:	e04d      	b.n	801194a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 80118ae:	2300      	movs	r3, #0
 80118b0:	e04b      	b.n	801194a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return ps4Data.btn.dpad == DPAD_UP_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT_DOWN;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	7a1b      	ldrb	r3, [r3, #8]
 80118b6:	f003 030f 	and.w	r3, r3, #15
 80118ba:	b2db      	uxtb	r3, r3
 80118bc:	2b01      	cmp	r3, #1
 80118be:	d00d      	beq.n	80118dc <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	7a1b      	ldrb	r3, [r3, #8]
 80118c4:	f003 030f 	and.w	r3, r3, #15
 80118c8:	b2db      	uxtb	r3, r3
 80118ca:	2b02      	cmp	r3, #2
 80118cc:	d006      	beq.n	80118dc <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	7a1b      	ldrb	r3, [r3, #8]
 80118d2:	f003 030f 	and.w	r3, r3, #15
 80118d6:	b2db      	uxtb	r3, r3
 80118d8:	2b03      	cmp	r3, #3
 80118da:	d101      	bne.n	80118e0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x88>
 80118dc:	2301      	movs	r3, #1
 80118de:	e034      	b.n	801194a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 80118e0:	2300      	movs	r3, #0
 80118e2:	e032      	b.n	801194a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return ps4Data.btn.dpad == DPAD_RIGHT_DOWN || ps4Data.btn.dpad == DPAD_DOWN || ps4Data.btn.dpad == DPAD_DOWN_LEFT;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	7a1b      	ldrb	r3, [r3, #8]
 80118e8:	f003 030f 	and.w	r3, r3, #15
 80118ec:	b2db      	uxtb	r3, r3
 80118ee:	2b03      	cmp	r3, #3
 80118f0:	d00d      	beq.n	801190e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	7a1b      	ldrb	r3, [r3, #8]
 80118f6:	f003 030f 	and.w	r3, r3, #15
 80118fa:	b2db      	uxtb	r3, r3
 80118fc:	2b04      	cmp	r3, #4
 80118fe:	d006      	beq.n	801190e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	7a1b      	ldrb	r3, [r3, #8]
 8011904:	f003 030f 	and.w	r3, r3, #15
 8011908:	b2db      	uxtb	r3, r3
 801190a:	2b05      	cmp	r3, #5
 801190c:	d101      	bne.n	8011912 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xba>
 801190e:	2301      	movs	r3, #1
 8011910:	e01b      	b.n	801194a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8011912:	2300      	movs	r3, #0
 8011914:	e019      	b.n	801194a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return ps4Data.btn.dpad == DPAD_DOWN_LEFT || ps4Data.btn.dpad == DPAD_LEFT || ps4Data.btn.dpad == DPAD_LEFT_UP;
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	7a1b      	ldrb	r3, [r3, #8]
 801191a:	f003 030f 	and.w	r3, r3, #15
 801191e:	b2db      	uxtb	r3, r3
 8011920:	2b05      	cmp	r3, #5
 8011922:	d00d      	beq.n	8011940 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	7a1b      	ldrb	r3, [r3, #8]
 8011928:	f003 030f 	and.w	r3, r3, #15
 801192c:	b2db      	uxtb	r3, r3
 801192e:	2b06      	cmp	r3, #6
 8011930:	d006      	beq.n	8011940 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	7a1b      	ldrb	r3, [r3, #8]
 8011936:	f003 030f 	and.w	r3, r3, #15
 801193a:	b2db      	uxtb	r3, r3
 801193c:	2b07      	cmp	r3, #7
 801193e:	d101      	bne.n	8011944 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xec>
 8011940:	2301      	movs	r3, #1
 8011942:	e002      	b.n	801194a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8011944:	2300      	movs	r3, #0
 8011946:	e000      	b.n	801194a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 8011948:	2300      	movs	r3, #0
        }
}
 801194a:	4618      	mov	r0, r3
 801194c:	370c      	adds	r7, #12
 801194e:	46bd      	mov	sp, r7
 8011950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011954:	4770      	bx	lr
 8011956:	bf00      	nop

08011958 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>:

bool PS4Parser::getButtonPress(ButtonEnum b) {
 8011958:	b580      	push	{r7, lr}
 801195a:	b082      	sub	sp, #8
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
 8011960:	460b      	mov	r3, r1
 8011962:	70fb      	strb	r3, [r7, #3]
        if (b <= LEFT) // Dpad
 8011964:	78fb      	ldrb	r3, [r7, #3]
 8011966:	2b03      	cmp	r3, #3
 8011968:	d806      	bhi.n	8011978 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x20>
                return checkDpad(b);
 801196a:	78fb      	ldrb	r3, [r7, #3]
 801196c:	4619      	mov	r1, r3
 801196e:	6878      	ldr	r0, [r7, #4]
 8011970:	f7ff ff72 	bl	8011858 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8011974:	4603      	mov	r3, r0
 8011976:	e011      	b.n	801199c <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x44>
        else
                return ps4Data.btn.val & (1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]));
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	689b      	ldr	r3, [r3, #8]
 801197c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8011980:	4619      	mov	r1, r3
 8011982:	78fb      	ldrb	r3, [r7, #3]
 8011984:	4a07      	ldr	r2, [pc, #28]	; (80119a4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x4c>)
 8011986:	4413      	add	r3, r2
 8011988:	781b      	ldrb	r3, [r3, #0]
 801198a:	fa21 f303 	lsr.w	r3, r1, r3
 801198e:	f003 0301 	and.w	r3, r3, #1
 8011992:	2b00      	cmp	r3, #0
 8011994:	bf14      	ite	ne
 8011996:	2301      	movne	r3, #1
 8011998:	2300      	moveq	r3, #0
 801199a:	b2db      	uxtb	r3, r3
}
 801199c:	4618      	mov	r0, r3
 801199e:	3708      	adds	r7, #8
 80119a0:	46bd      	mov	sp, r7
 80119a2:	bd80      	pop	{r7, pc}
 80119a4:	08014a84 	.word	0x08014a84

080119a8 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>:

bool PS4Parser::getButtonClick(ButtonEnum b) {
 80119a8:	b480      	push	{r7}
 80119aa:	b085      	sub	sp, #20
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
 80119b0:	460b      	mov	r3, r1
 80119b2:	70fb      	strb	r3, [r7, #3]
        uint32_t mask = 1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]);
 80119b4:	78fb      	ldrb	r3, [r7, #3]
 80119b6:	4a1b      	ldr	r2, [pc, #108]	; (8011a24 <_ZN9PS4Parser14getButtonClickE10ButtonEnum+0x7c>)
 80119b8:	4413      	add	r3, r2
 80119ba:	781b      	ldrb	r3, [r3, #0]
 80119bc:	461a      	mov	r2, r3
 80119be:	2301      	movs	r3, #1
 80119c0:	4093      	lsls	r3, r2
 80119c2:	60fb      	str	r3, [r7, #12]
        bool click = buttonClickState.val & mask;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80119ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80119ce:	021b      	lsls	r3, r3, #8
 80119d0:	4313      	orrs	r3, r2
 80119d2:	461a      	mov	r2, r3
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	4013      	ands	r3, r2
 80119d8:	2b00      	cmp	r3, #0
 80119da:	bf14      	ite	ne
 80119dc:	2301      	movne	r3, #1
 80119de:	2300      	moveq	r3, #0
 80119e0:	72fb      	strb	r3, [r7, #11]
        buttonClickState.val &= ~mask; // Clear "click" event
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80119e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80119ec:	021b      	lsls	r3, r3, #8
 80119ee:	4313      	orrs	r3, r2
 80119f0:	461a      	mov	r2, r3
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	43db      	mvns	r3, r3
 80119f6:	4013      	ands	r3, r2
 80119f8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	b2d1      	uxtb	r1, r2
 8011a00:	2000      	movs	r0, #0
 8011a02:	4301      	orrs	r1, r0
 8011a04:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 8011a08:	0a12      	lsrs	r2, r2, #8
 8011a0a:	b292      	uxth	r2, r2
 8011a0c:	2100      	movs	r1, #0
 8011a0e:	430a      	orrs	r2, r1
 8011a10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        return click;
 8011a14:	7afb      	ldrb	r3, [r7, #11]
}
 8011a16:	4618      	mov	r0, r3
 8011a18:	3714      	adds	r7, #20
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a20:	4770      	bx	lr
 8011a22:	bf00      	nop
 8011a24:	08014a84 	.word	0x08014a84

08011a28 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>:

uint8_t PS4Parser::getAnalogButton(ButtonEnum b) {
 8011a28:	b480      	push	{r7}
 8011a2a:	b083      	sub	sp, #12
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
 8011a30:	460b      	mov	r3, r1
 8011a32:	70fb      	strb	r3, [r7, #3]
        if (b == L2) // These are the only analog buttons on the controller
 8011a34:	78fb      	ldrb	r3, [r7, #3]
 8011a36:	2b08      	cmp	r3, #8
 8011a38:	d102      	bne.n	8011a40 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x18>
                return ps4Data.trigger[0];
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	7adb      	ldrb	r3, [r3, #11]
 8011a3e:	e006      	b.n	8011a4e <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        else if (b == R2)
 8011a40:	78fb      	ldrb	r3, [r7, #3]
 8011a42:	2b09      	cmp	r3, #9
 8011a44:	d102      	bne.n	8011a4c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x24>
                return ps4Data.trigger[1];
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	7b1b      	ldrb	r3, [r3, #12]
 8011a4a:	e000      	b.n	8011a4e <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        return 0;
 8011a4c:	2300      	movs	r3, #0
}
 8011a4e:	4618      	mov	r0, r3
 8011a50:	370c      	adds	r7, #12
 8011a52:	46bd      	mov	sp, r7
 8011a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a58:	4770      	bx	lr

08011a5a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>:

uint8_t PS4Parser::getAnalogHat(AnalogHatEnum a) {
 8011a5a:	b480      	push	{r7}
 8011a5c:	b083      	sub	sp, #12
 8011a5e:	af00      	add	r7, sp, #0
 8011a60:	6078      	str	r0, [r7, #4]
 8011a62:	460b      	mov	r3, r1
 8011a64:	70fb      	strb	r3, [r7, #3]
        return ps4Data.hatValue[(uint8_t)a];
 8011a66:	78fb      	ldrb	r3, [r7, #3]
 8011a68:	687a      	ldr	r2, [r7, #4]
 8011a6a:	4413      	add	r3, r2
 8011a6c:	791b      	ldrb	r3, [r3, #4]
}
 8011a6e:	4618      	mov	r0, r3
 8011a70:	370c      	adds	r7, #12
 8011a72:	46bd      	mov	sp, r7
 8011a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a78:	4770      	bx	lr

08011a7a <_ZN9PS4Parser5ParseEhPh>:

void PS4Parser::Parse(uint8_t len, uint8_t *buf) {
 8011a7a:	b580      	push	{r7, lr}
 8011a7c:	b086      	sub	sp, #24
 8011a7e:	af00      	add	r7, sp, #0
 8011a80:	60f8      	str	r0, [r7, #12]
 8011a82:	460b      	mov	r3, r1
 8011a84:	607a      	str	r2, [r7, #4]
 8011a86:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 8011a88:	7afb      	ldrb	r3, [r7, #11]
 8011a8a:	2b01      	cmp	r3, #1
 8011a8c:	f240 80a6 	bls.w	8011bdc <_ZN9PS4Parser5ParseEhPh+0x162>
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	f000 80a2 	beq.w	8011bdc <_ZN9PS4Parser5ParseEhPh+0x162>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	781b      	ldrb	r3, [r3, #0]
 8011a9c:	2b01      	cmp	r3, #1
 8011a9e:	d10e      	bne.n	8011abe <_ZN9PS4Parser5ParseEhPh+0x44>
                        memcpy(&ps4Data, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(ps4Data)));
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	1d18      	adds	r0, r3, #4
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	1c59      	adds	r1, r3, #1
 8011aa8:	7afb      	ldrb	r3, [r7, #11]
 8011aaa:	3b01      	subs	r3, #1
 8011aac:	b2db      	uxtb	r3, r3
 8011aae:	2b3c      	cmp	r3, #60	; 0x3c
 8011ab0:	bf28      	it	cs
 8011ab2:	233c      	movcs	r3, #60	; 0x3c
 8011ab4:	b2db      	uxtb	r3, r3
 8011ab6:	461a      	mov	r2, r3
 8011ab8:	f001 fe56 	bl	8013768 <memcpy>
 8011abc:	e016      	b.n	8011aec <_ZN9PS4Parser5ParseEhPh+0x72>
                else if (buf[0] == 0x11) { // This report is send via Bluetooth, it has an offset of 2 compared to the USB data
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	781b      	ldrb	r3, [r3, #0]
 8011ac2:	2b11      	cmp	r3, #17
 8011ac4:	f040 8098 	bne.w	8011bf8 <_ZN9PS4Parser5ParseEhPh+0x17e>
                        if (len < 4) {
 8011ac8:	7afb      	ldrb	r3, [r7, #11]
 8011aca:	2b03      	cmp	r3, #3
 8011acc:	f240 8096 	bls.w	8011bfc <_ZN9PS4Parser5ParseEhPh+0x182>
                                Notify(PSTR("\r\nReport is too short: "), 0x80);
                                D_PrintHex<uint8_t > (len, 0x80);
#endif
                                return;
                        }
                        memcpy(&ps4Data, buf + 3, min((uint8_t)(len - 3), MFK_CASTUINT8T sizeof(ps4Data)));
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	1d18      	adds	r0, r3, #4
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	1cd9      	adds	r1, r3, #3
 8011ad8:	7afb      	ldrb	r3, [r7, #11]
 8011ada:	3b03      	subs	r3, #3
 8011adc:	b2db      	uxtb	r3, r3
 8011ade:	2b3c      	cmp	r3, #60	; 0x3c
 8011ae0:	bf28      	it	cs
 8011ae2:	233c      	movcs	r3, #60	; 0x3c
 8011ae4:	b2db      	uxtb	r3, r3
 8011ae6:	461a      	mov	r2, r3
 8011ae8:	f001 fe3e 	bl	8013768 <memcpy>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
#endif
                        return;
                }

                if (ps4Data.btn.val != oldButtonState.val) { // Check if anything has changed
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	689b      	ldr	r3, [r3, #8]
 8011af0:	f3c3 0217 	ubfx	r2, r3, #0, #24
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011af8:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8011afc:	429a      	cmp	r2, r3
 8011afe:	d06d      	beq.n	8011bdc <_ZN9PS4Parser5ParseEhPh+0x162>
                        buttonClickState.val = ps4Data.btn.val & ~oldButtonState.val; // Update click state variable
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	689b      	ldr	r3, [r3, #8]
 8011b04:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8011b08:	461a      	mov	r2, r3
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b0e:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8011b12:	43db      	mvns	r3, r3
 8011b14:	4013      	ands	r3, r2
 8011b16:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	b2d1      	uxtb	r1, r2
 8011b1e:	2000      	movs	r0, #0
 8011b20:	4301      	orrs	r1, r0
 8011b22:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 8011b26:	0a12      	lsrs	r2, r2, #8
 8011b28:	b292      	uxth	r2, r2
 8011b2a:	2100      	movs	r1, #0
 8011b2c:	430a      	orrs	r2, r1
 8011b2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                        oldButtonState.val = ps4Data.btn.val;
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	689b      	ldr	r3, [r3, #8]
 8011b36:	f3c3 0117 	ubfx	r1, r3, #0, #24
 8011b3a:	68fa      	ldr	r2, [r7, #12]
 8011b3c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011b3e:	f361 0317 	bfi	r3, r1, #0, #24
 8011b42:	6413      	str	r3, [r2, #64]	; 0x40

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 8011b44:	2300      	movs	r3, #0
 8011b46:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 8011b48:	2100      	movs	r1, #0
 8011b4a:	68f8      	ldr	r0, [r7, #12]
 8011b4c:	f7ff fe84 	bl	8011858 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8011b50:	4603      	mov	r3, r0
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d003      	beq.n	8011b5e <_ZN9PS4Parser5ParseEhPh+0xe4>
                                newDpad |= 1 << UP;
 8011b56:	7dfb      	ldrb	r3, [r7, #23]
 8011b58:	f043 0301 	orr.w	r3, r3, #1
 8011b5c:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 8011b5e:	2101      	movs	r1, #1
 8011b60:	68f8      	ldr	r0, [r7, #12]
 8011b62:	f7ff fe79 	bl	8011858 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8011b66:	4603      	mov	r3, r0
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d003      	beq.n	8011b74 <_ZN9PS4Parser5ParseEhPh+0xfa>
                                newDpad |= 1 << RIGHT;
 8011b6c:	7dfb      	ldrb	r3, [r7, #23]
 8011b6e:	f043 0302 	orr.w	r3, r3, #2
 8011b72:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 8011b74:	2102      	movs	r1, #2
 8011b76:	68f8      	ldr	r0, [r7, #12]
 8011b78:	f7ff fe6e 	bl	8011858 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8011b7c:	4603      	mov	r3, r0
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d003      	beq.n	8011b8a <_ZN9PS4Parser5ParseEhPh+0x110>
                                newDpad |= 1 << DOWN;
 8011b82:	7dfb      	ldrb	r3, [r7, #23]
 8011b84:	f043 0304 	orr.w	r3, r3, #4
 8011b88:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 8011b8a:	2103      	movs	r1, #3
 8011b8c:	68f8      	ldr	r0, [r7, #12]
 8011b8e:	f7ff fe63 	bl	8011858 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8011b92:	4603      	mov	r3, r0
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d003      	beq.n	8011ba0 <_ZN9PS4Parser5ParseEhPh+0x126>
                                newDpad |= 1 << LEFT;
 8011b98:	7dfb      	ldrb	r3, [r7, #23]
 8011b9a:	f043 0308 	orr.w	r3, r3, #8
 8011b9e:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011ba6:	7dfa      	ldrb	r2, [r7, #23]
 8011ba8:	429a      	cmp	r2, r3
 8011baa:	d017      	beq.n	8011bdc <_ZN9PS4Parser5ParseEhPh+0x162>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011bb2:	b25b      	sxtb	r3, r3
 8011bb4:	43db      	mvns	r3, r3
 8011bb6:	b25a      	sxtb	r2, r3
 8011bb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011bbc:	4013      	ands	r3, r2
 8011bbe:	b25b      	sxtb	r3, r3
 8011bc0:	f003 030f 	and.w	r3, r3, #15
 8011bc4:	b2d9      	uxtb	r1, r3
 8011bc6:	68fa      	ldr	r2, [r7, #12]
 8011bc8:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8011bcc:	f361 0303 	bfi	r3, r1, #0, #4
 8011bd0:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
                                oldDpad = newDpad;
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	7dfa      	ldrb	r2, [r7, #23]
 8011bd8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                        }
                }
        }

        if (ps4Output.reportChanged)
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d00b      	beq.n	8011bfe <_ZN9PS4Parser5ParseEhPh+0x184>
                sendOutputReport(&ps4Output); // Send output report
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	68fa      	ldr	r2, [r7, #12]
 8011bee:	3246      	adds	r2, #70	; 0x46
 8011bf0:	4611      	mov	r1, r2
 8011bf2:	68f8      	ldr	r0, [r7, #12]
 8011bf4:	4798      	blx	r3
 8011bf6:	e002      	b.n	8011bfe <_ZN9PS4Parser5ParseEhPh+0x184>
                        return;
 8011bf8:	bf00      	nop
 8011bfa:	e000      	b.n	8011bfe <_ZN9PS4Parser5ParseEhPh+0x184>
                                return;
 8011bfc:	bf00      	nop
}
 8011bfe:	3718      	adds	r7, #24
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}

08011c04 <_ZN9PS4Parser5ResetEv>:

void PS4Parser::Reset() {
 8011c04:	b480      	push	{r7}
 8011c06:	b085      	sub	sp, #20
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	73fb      	strb	r3, [r7, #15]
 8011c10:	7bfb      	ldrb	r3, [r7, #15]
 8011c12:	2b03      	cmp	r3, #3
 8011c14:	d808      	bhi.n	8011c28 <_ZN9PS4Parser5ResetEv+0x24>
                ps4Data.hatValue[i] = 127; // Center value
 8011c16:	7bfb      	ldrb	r3, [r7, #15]
 8011c18:	687a      	ldr	r2, [r7, #4]
 8011c1a:	4413      	add	r3, r2
 8011c1c:	227f      	movs	r2, #127	; 0x7f
 8011c1e:	711a      	strb	r2, [r3, #4]
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 8011c20:	7bfb      	ldrb	r3, [r7, #15]
 8011c22:	3301      	adds	r3, #1
 8011c24:	73fb      	strb	r3, [r7, #15]
 8011c26:	e7f3      	b.n	8011c10 <_ZN9PS4Parser5ResetEv+0xc>
        ps4Data.btn.val = 0;
 8011c28:	687a      	ldr	r2, [r7, #4]
 8011c2a:	6893      	ldr	r3, [r2, #8]
 8011c2c:	f36f 0317 	bfc	r3, #0, #24
 8011c30:	6093      	str	r3, [r2, #8]
        oldButtonState.val = 0;
 8011c32:	687a      	ldr	r2, [r7, #4]
 8011c34:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011c36:	f36f 0317 	bfc	r3, #0, #24
 8011c3a:	6413      	str	r3, [r2, #64]	; 0x40
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	73fb      	strb	r3, [r7, #15]
 8011c40:	7bfb      	ldrb	r3, [r7, #15]
 8011c42:	2b01      	cmp	r3, #1
 8011c44:	d808      	bhi.n	8011c58 <_ZN9PS4Parser5ResetEv+0x54>
                ps4Data.trigger[i] = 0;
 8011c46:	7bfb      	ldrb	r3, [r7, #15]
 8011c48:	687a      	ldr	r2, [r7, #4]
 8011c4a:	4413      	add	r3, r2
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	72da      	strb	r2, [r3, #11]
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 8011c50:	7bfb      	ldrb	r3, [r7, #15]
 8011c52:	3301      	adds	r3, #1
 8011c54:	73fb      	strb	r3, [r7, #15]
 8011c56:	e7f3      	b.n	8011c40 <_ZN9PS4Parser5ResetEv+0x3c>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 8011c58:	2300      	movs	r3, #0
 8011c5a:	73fb      	strb	r3, [r7, #15]
 8011c5c:	7bfb      	ldrb	r3, [r7, #15]
 8011c5e:	2b02      	cmp	r3, #2
 8011c60:	d81b      	bhi.n	8011c9a <_ZN9PS4Parser5ResetEv+0x96>
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 8011c62:	2300      	movs	r3, #0
 8011c64:	73bb      	strb	r3, [r7, #14]
 8011c66:	7bbb      	ldrb	r3, [r7, #14]
 8011c68:	2b01      	cmp	r3, #1
 8011c6a:	d812      	bhi.n	8011c92 <_ZN9PS4Parser5ResetEv+0x8e>
                        ps4Data.xy[i].finger[j].touching = 1; // The bit is cleared if the finger is touching the touchpad
 8011c6c:	7bfa      	ldrb	r2, [r7, #15]
 8011c6e:	7bbb      	ldrb	r3, [r7, #14]
 8011c70:	6879      	ldr	r1, [r7, #4]
 8011c72:	0098      	lsls	r0, r3, #2
 8011c74:	4613      	mov	r3, r2
 8011c76:	00db      	lsls	r3, r3, #3
 8011c78:	4413      	add	r3, r2
 8011c7a:	4403      	add	r3, r0
 8011c7c:	440b      	add	r3, r1
 8011c7e:	f103 0220 	add.w	r2, r3, #32
 8011c82:	7993      	ldrb	r3, [r2, #6]
 8011c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c88:	7193      	strb	r3, [r2, #6]
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 8011c8a:	7bbb      	ldrb	r3, [r7, #14]
 8011c8c:	3301      	adds	r3, #1
 8011c8e:	73bb      	strb	r3, [r7, #14]
 8011c90:	e7e9      	b.n	8011c66 <_ZN9PS4Parser5ResetEv+0x62>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 8011c92:	7bfb      	ldrb	r3, [r7, #15]
 8011c94:	3301      	adds	r3, #1
 8011c96:	73fb      	strb	r3, [r7, #15]
 8011c98:	e7e0      	b.n	8011c5c <_ZN9PS4Parser5ResetEv+0x58>
        }

        ps4Data.btn.dpad = DPAD_OFF;
 8011c9a:	687a      	ldr	r2, [r7, #4]
 8011c9c:	7a13      	ldrb	r3, [r2, #8]
 8011c9e:	2108      	movs	r1, #8
 8011ca0:	f361 0303 	bfi	r3, r1, #0, #4
 8011ca4:	7213      	strb	r3, [r2, #8]
        oldButtonState.dpad = DPAD_OFF;
 8011ca6:	687a      	ldr	r2, [r7, #4]
 8011ca8:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 8011cac:	2108      	movs	r1, #8
 8011cae:	f361 0303 	bfi	r3, r1, #0, #4
 8011cb2:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
        buttonClickState.dpad = 0;
 8011cb6:	687a      	ldr	r2, [r7, #4]
 8011cb8:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8011cbc:	f36f 0303 	bfc	r3, #0, #4
 8011cc0:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
        oldDpad = 0;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

        ps4Output.bigRumble = ps4Output.smallRumble = 0;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	2200      	movs	r2, #0
 8011cd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        ps4Output.r = ps4Output.g = ps4Output.b = 0;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        ps4Output.flashOn = ps4Output.flashOff = 0;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	2200      	movs	r2, #0
 8011d04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        ps4Output.reportChanged = false;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	2200      	movs	r2, #0
 8011d18:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
};
 8011d1c:	bf00      	nop
 8011d1e:	3714      	adds	r7, #20
 8011d20:	46bd      	mov	sp, r7
 8011d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d26:	4770      	bx	lr

08011d28 <_ZN2P95IsSetEv>:
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	af00      	add	r7, sp, #0
 8011d2c:	2180      	movs	r1, #128	; 0x80
 8011d2e:	4803      	ldr	r0, [pc, #12]	; (8011d3c <_ZN2P95IsSetEv+0x14>)
 8011d30:	f7f1 f82e 	bl	8002d90 <HAL_GPIO_ReadPin>
 8011d34:	4603      	mov	r3, r0
 8011d36:	4618      	mov	r0, r3
 8011d38:	bd80      	pop	{r7, pc}
 8011d3a:	bf00      	nop
 8011d3c:	40020800 	.word	0x40020800

08011d40 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b082      	sub	sp, #8
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
 8011d48:	6878      	ldr	r0, [r7, #4]
 8011d4a:	f001 f9bb 	bl	80130c4 <_ZN8MAX3421eI3P102P9EC1Ev>
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	4618      	mov	r0, r3
 8011d52:	f001 f9d3 	bl	80130fc <_ZN15AddressPoolImplILh16EEC1Ev>
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	2200      	movs	r2, #0
 8011d5a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 8011d5e:	4b05      	ldr	r3, [pc, #20]	; (8011d74 <_ZN3USBC1Ev+0x34>)
 8011d60:	2211      	movs	r2, #17
 8011d62:	701a      	strb	r2, [r3, #0]
        init();
 8011d64:	6878      	ldr	r0, [r7, #4]
 8011d66:	f000 f807 	bl	8011d78 <_ZN3USB4initEv>
}
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	3708      	adds	r7, #8
 8011d70:	46bd      	mov	sp, r7
 8011d72:	bd80      	pop	{r7, pc}
 8011d74:	200053e9 	.word	0x200053e9

08011d78 <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 8011d78:	b480      	push	{r7}
 8011d7a:	b083      	sub	sp, #12
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
        //devConfigIndex = 0;
        bmHubPre = 0;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	2200      	movs	r2, #0
 8011d84:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 8011d88:	bf00      	nop
 8011d8a:	370c      	adds	r7, #12
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d92:	4770      	bx	lr

08011d94 <_ZN3USB14getEpInfoEntryEhh>:

void USB::setUsbTaskState(uint8_t state) {
        usb_task_state = state;
}

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b086      	sub	sp, #24
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
 8011d9c:	460b      	mov	r3, r1
 8011d9e:	70fb      	strb	r3, [r7, #3]
 8011da0:	4613      	mov	r3, r2
 8011da2:	70bb      	strb	r3, [r7, #2]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	78fa      	ldrb	r2, [r7, #3]
 8011da8:	4611      	mov	r1, r2
 8011daa:	4618      	mov	r0, r3
 8011dac:	f001 f9e0 	bl	8013170 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8011db0:	60f8      	str	r0, [r7, #12]

        if(!p || !p->epinfo)
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d003      	beq.n	8011dc0 <_ZN3USB14getEpInfoEntryEhh+0x2c>
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d101      	bne.n	8011dc4 <_ZN3USB14getEpInfoEntryEhh+0x30>
                return NULL;
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	e018      	b.n	8011df6 <_ZN3USB14getEpInfoEntryEhh+0x62>

        EpInfo *pep = p->epinfo;
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	617b      	str	r3, [r7, #20]

        for(uint8_t i = 0; i < p->epcount; i++) {
 8011dca:	2300      	movs	r3, #0
 8011dcc:	74fb      	strb	r3, [r7, #19]
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	795b      	ldrb	r3, [r3, #5]
 8011dd2:	7cfa      	ldrb	r2, [r7, #19]
 8011dd4:	429a      	cmp	r2, r3
 8011dd6:	d20d      	bcs.n	8011df4 <_ZN3USB14getEpInfoEntryEhh+0x60>
                if((pep)->epAddr == ep)
 8011dd8:	697b      	ldr	r3, [r7, #20]
 8011dda:	781b      	ldrb	r3, [r3, #0]
 8011ddc:	78ba      	ldrb	r2, [r7, #2]
 8011dde:	429a      	cmp	r2, r3
 8011de0:	d101      	bne.n	8011de6 <_ZN3USB14getEpInfoEntryEhh+0x52>
                        return pep;
 8011de2:	697b      	ldr	r3, [r7, #20]
 8011de4:	e007      	b.n	8011df6 <_ZN3USB14getEpInfoEntryEhh+0x62>

                pep++;
 8011de6:	697b      	ldr	r3, [r7, #20]
 8011de8:	3303      	adds	r3, #3
 8011dea:	617b      	str	r3, [r7, #20]
        for(uint8_t i = 0; i < p->epcount; i++) {
 8011dec:	7cfb      	ldrb	r3, [r7, #19]
 8011dee:	3301      	adds	r3, #1
 8011df0:	74fb      	strb	r3, [r7, #19]
 8011df2:	e7ec      	b.n	8011dce <_ZN3USB14getEpInfoEntryEhh+0x3a>
        }
        return NULL;
 8011df4:	2300      	movs	r3, #0
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	3718      	adds	r7, #24
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}

08011dfe <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 8011dfe:	b580      	push	{r7, lr}
 8011e00:	b086      	sub	sp, #24
 8011e02:	af00      	add	r7, sp, #0
 8011e04:	60f8      	str	r0, [r7, #12]
 8011e06:	607b      	str	r3, [r7, #4]
 8011e08:	460b      	mov	r3, r1
 8011e0a:	72fb      	strb	r3, [r7, #11]
 8011e0c:	4613      	mov	r3, r2
 8011e0e:	72bb      	strb	r3, [r7, #10]
        if(!eprecord_ptr)
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d101      	bne.n	8011e1a <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x1c>
                return USB_ERROR_INVALID_ARGUMENT;
 8011e16:	23d8      	movs	r3, #216	; 0xd8
 8011e18:	e015      	b.n	8011e46 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	7afa      	ldrb	r2, [r7, #11]
 8011e1e:	4611      	mov	r1, r2
 8011e20:	4618      	mov	r0, r3
 8011e22:	f001 f9a5 	bl	8013170 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8011e26:	6178      	str	r0, [r7, #20]

        if(!p)
 8011e28:	697b      	ldr	r3, [r7, #20]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d101      	bne.n	8011e32 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x34>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8011e2e:	23d6      	movs	r3, #214	; 0xd6
 8011e30:	e009      	b.n	8011e46 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        p->address.devAddress = addr;
 8011e32:	697b      	ldr	r3, [r7, #20]
 8011e34:	7afa      	ldrb	r2, [r7, #11]
 8011e36:	711a      	strb	r2, [r3, #4]
        p->epinfo = eprecord_ptr;
 8011e38:	697b      	ldr	r3, [r7, #20]
 8011e3a:	687a      	ldr	r2, [r7, #4]
 8011e3c:	601a      	str	r2, [r3, #0]
        p->epcount = epcount;
 8011e3e:	697b      	ldr	r3, [r7, #20]
 8011e40:	7aba      	ldrb	r2, [r7, #10]
 8011e42:	715a      	strb	r2, [r3, #5]

        return 0;
 8011e44:	2300      	movs	r3, #0
}
 8011e46:	4618      	mov	r0, r3
 8011e48:	3718      	adds	r7, #24
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	bd80      	pop	{r7, pc}

08011e4e <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 8011e4e:	b580      	push	{r7, lr}
 8011e50:	b086      	sub	sp, #24
 8011e52:	af00      	add	r7, sp, #0
 8011e54:	60f8      	str	r0, [r7, #12]
 8011e56:	607b      	str	r3, [r7, #4]
 8011e58:	460b      	mov	r3, r1
 8011e5a:	72fb      	strb	r3, [r7, #11]
 8011e5c:	4613      	mov	r3, r2
 8011e5e:	72bb      	strb	r3, [r7, #10]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	7afa      	ldrb	r2, [r7, #11]
 8011e64:	4611      	mov	r1, r2
 8011e66:	4618      	mov	r0, r3
 8011e68:	f001 f982 	bl	8013170 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8011e6c:	6178      	str	r0, [r7, #20]

        if(!p)
 8011e6e:	697b      	ldr	r3, [r7, #20]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d101      	bne.n	8011e78 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x2a>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8011e74:	23d6      	movs	r3, #214	; 0xd6
 8011e76:	e04e      	b.n	8011f16 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        if(!p->epinfo)
 8011e78:	697b      	ldr	r3, [r7, #20]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d101      	bne.n	8011e84 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x36>
                return USB_ERROR_EPINFO_IS_NULL;
 8011e80:	23d7      	movs	r3, #215	; 0xd7
 8011e82:	e048      	b.n	8011f16 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *ppep = getEpInfoEntry(addr, ep);
 8011e84:	7aba      	ldrb	r2, [r7, #10]
 8011e86:	7afb      	ldrb	r3, [r7, #11]
 8011e88:	4619      	mov	r1, r3
 8011e8a:	68f8      	ldr	r0, [r7, #12]
 8011e8c:	f7ff ff82 	bl	8011d94 <_ZN3USB14getEpInfoEntryEhh>
 8011e90:	4602      	mov	r2, r0
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	601a      	str	r2, [r3, #0]

        if(!*ppep)
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d101      	bne.n	8011ea2 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x54>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 8011e9e:	23db      	movs	r3, #219	; 0xdb
 8011ea0:	e039      	b.n	8011f16 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	789b      	ldrb	r3, [r3, #2]
 8011ea8:	f3c3 0385 	ubfx	r3, r3, #2, #6
 8011eac:	b2db      	uxtb	r3, r3
 8011eae:	2b0f      	cmp	r3, #15
 8011eb0:	bf28      	it	cs
 8011eb2:	230f      	movcs	r3, #15
 8011eb4:	b2db      	uxtb	r3, r3
 8011eb6:	461a      	mov	r2, r3
 8011eb8:	2301      	movs	r3, #1
 8011eba:	4093      	lsls	r3, r2
 8011ebc:	b29a      	uxth	r2, r3
 8011ebe:	6a3b      	ldr	r3, [r7, #32]
 8011ec0:	801a      	strh	r2, [r3, #0]
        (*nak_limit)--;
 8011ec2:	6a3b      	ldr	r3, [r7, #32]
 8011ec4:	881b      	ldrh	r3, [r3, #0]
 8011ec6:	3b01      	subs	r3, #1
 8011ec8:	b29a      	uxth	r2, r3
 8011eca:	6a3b      	ldr	r3, [r7, #32]
 8011ecc:	801a      	strh	r2, [r3, #0]
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 8011ece:	7afb      	ldrb	r3, [r7, #11]
 8011ed0:	461a      	mov	r2, r3
 8011ed2:	21e0      	movs	r1, #224	; 0xe0
 8011ed4:	68f8      	ldr	r0, [r7, #12]
 8011ed6:	f7ef ffa5 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        uint8_t mode = regRd(rMODE);
 8011eda:	21d8      	movs	r1, #216	; 0xd8
 8011edc:	68f8      	ldr	r0, [r7, #12]
 8011ede:	f7ef fff3 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	74fb      	strb	r3, [r7, #19]
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 8011ee6:	697b      	ldr	r3, [r7, #20]
 8011ee8:	799b      	ldrb	r3, [r3, #6]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d009      	beq.n	8011f02 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xb4>
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8011ef4:	7cfb      	ldrb	r3, [r7, #19]
 8011ef6:	4313      	orrs	r3, r2
 8011ef8:	b2db      	uxtb	r3, r3
 8011efa:	f043 0302 	orr.w	r3, r3, #2
 8011efe:	b2db      	uxtb	r3, r3
 8011f00:	e003      	b.n	8011f0a <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xbc>
 8011f02:	7cfb      	ldrb	r3, [r7, #19]
 8011f04:	f023 0306 	bic.w	r3, r3, #6
 8011f08:	b2db      	uxtb	r3, r3
 8011f0a:	461a      	mov	r2, r3
 8011f0c:	21d8      	movs	r1, #216	; 0xd8
 8011f0e:	68f8      	ldr	r0, [r7, #12]
 8011f10:	f7ef ff88 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return 0;
 8011f14:	2300      	movs	r3, #0
}
 8011f16:	4618      	mov	r0, r3
 8011f18:	3718      	adds	r7, #24
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bd80      	pop	{r7, pc}

08011f1e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 8011f1e:	b590      	push	{r4, r7, lr}
 8011f20:	b08b      	sub	sp, #44	; 0x2c
 8011f22:	af02      	add	r7, sp, #8
 8011f24:	6078      	str	r0, [r7, #4]
 8011f26:	4608      	mov	r0, r1
 8011f28:	4611      	mov	r1, r2
 8011f2a:	461a      	mov	r2, r3
 8011f2c:	4603      	mov	r3, r0
 8011f2e:	70fb      	strb	r3, [r7, #3]
 8011f30:	460b      	mov	r3, r1
 8011f32:	70bb      	strb	r3, [r7, #2]
 8011f34:	4613      	mov	r3, r2
 8011f36:	707b      	strb	r3, [r7, #1]
        bool direction = false; //request direction, IN or OUT
 8011f38:	2300      	movs	r3, #0
 8011f3a:	76fb      	strb	r3, [r7, #27]
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	60fb      	str	r3, [r7, #12]
        uint16_t nak_limit = 0;
 8011f40:	2300      	movs	r3, #0
 8011f42:	817b      	strh	r3, [r7, #10]

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8011f44:	f107 000c 	add.w	r0, r7, #12
 8011f48:	78ba      	ldrb	r2, [r7, #2]
 8011f4a:	78f9      	ldrb	r1, [r7, #3]
 8011f4c:	f107 030a 	add.w	r3, r7, #10
 8011f50:	9300      	str	r3, [sp, #0]
 8011f52:	4603      	mov	r3, r0
 8011f54:	6878      	ldr	r0, [r7, #4]
 8011f56:	f7ff ff7a 	bl	8011e4e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	77fb      	strb	r3, [r7, #31]

        if(rcode)
 8011f5e:	7ffb      	ldrb	r3, [r7, #31]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d001      	beq.n	8011f68 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x4a>
                return rcode;
 8011f64:	7ffb      	ldrb	r3, [r7, #31]
 8011f66:	e0ae      	b.n	80120c6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        direction = ((bmReqType & 0x80) > 0);
 8011f68:	787b      	ldrb	r3, [r7, #1]
 8011f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	bfcc      	ite	gt
 8011f72:	2301      	movgt	r3, #1
 8011f74:	2300      	movle	r3, #0
 8011f76:	76fb      	strb	r3, [r7, #27]

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 8011f78:	787b      	ldrb	r3, [r7, #1]
 8011f7a:	743b      	strb	r3, [r7, #16]
        setup_pkt.bRequest = bRequest;
 8011f7c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8011f80:	747b      	strb	r3, [r7, #17]
        setup_pkt.wVal_u.wValueLo = wValLo;
 8011f82:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8011f86:	74bb      	strb	r3, [r7, #18]
        setup_pkt.wVal_u.wValueHi = wValHi;
 8011f88:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8011f8c:	74fb      	strb	r3, [r7, #19]
        setup_pkt.wIndex = wInd;
 8011f8e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011f90:	82bb      	strh	r3, [r7, #20]
        setup_pkt.wLength = total;
 8011f92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011f96:	82fb      	strh	r3, [r7, #22]

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 8011f98:	f107 0310 	add.w	r3, r7, #16
 8011f9c:	2208      	movs	r2, #8
 8011f9e:	2120      	movs	r1, #32
 8011fa0:	6878      	ldr	r0, [r7, #4]
 8011fa2:	f001 f90b 	bl	80131bc <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 8011fa6:	897b      	ldrh	r3, [r7, #10]
 8011fa8:	78ba      	ldrb	r2, [r7, #2]
 8011faa:	2110      	movs	r1, #16
 8011fac:	6878      	ldr	r0, [r7, #4]
 8011fae:	f000 faf2 	bl	8012596 <_ZN3USB11dispatchPktEhht>
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	77fb      	strb	r3, [r7, #31]

        if(rcode) //return HRSLT if not zero
 8011fb6:	7ffb      	ldrb	r3, [r7, #31]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d001      	beq.n	8011fc0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa2>
                return ( rcode);
 8011fbc:	7ffb      	ldrb	r3, [r7, #31]
 8011fbe:	e082      	b.n	80120c6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        if(dataptr != NULL) //data stage, if present
 8011fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d072      	beq.n	80120ac <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
        {
                if(direction) //IN transfer
 8011fc6:	7efb      	ldrb	r3, [r7, #27]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d057      	beq.n	801207c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x15e>
                {
                        uint16_t left = total;
 8011fcc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011fd0:	83bb      	strh	r3, [r7, #28]

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 8011fd2:	68fa      	ldr	r2, [r7, #12]
 8011fd4:	7893      	ldrb	r3, [r2, #2]
 8011fd6:	f043 0302 	orr.w	r3, r3, #2
 8011fda:	7093      	strb	r3, [r2, #2]

                        while(left) {
 8011fdc:	8bbb      	ldrh	r3, [r7, #28]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d05f      	beq.n	80120a2 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 8011fe2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011fe6:	813b      	strh	r3, [r7, #8]
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 8011fe8:	68f9      	ldr	r1, [r7, #12]
 8011fea:	897a      	ldrh	r2, [r7, #10]
 8011fec:	f107 0008 	add.w	r0, r7, #8
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	9301      	str	r3, [sp, #4]
 8011ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ff6:	9300      	str	r3, [sp, #0]
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	6878      	ldr	r0, [r7, #4]
 8011ffc:	f000 f8a6 	bl	801214c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8012000:	4603      	mov	r3, r0
 8012002:	77fb      	strb	r3, [r7, #31]
                                if(rcode == hrTOGERR) {
 8012004:	7ffb      	ldrb	r3, [r7, #31]
 8012006:	2b06      	cmp	r3, #6
 8012008:	d114      	bne.n	8012034 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x116>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 801200a:	21f8      	movs	r1, #248	; 0xf8
 801200c:	6878      	ldr	r0, [r7, #4]
 801200e:	f7ef ff5b 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012012:	4603      	mov	r3, r0
 8012014:	f003 0320 	and.w	r3, r3, #32
 8012018:	2b00      	cmp	r3, #0
 801201a:	bf0c      	ite	eq
 801201c:	2301      	moveq	r3, #1
 801201e:	2300      	movne	r3, #0
 8012020:	b2db      	uxtb	r3, r3
 8012022:	68fa      	ldr	r2, [r7, #12]
 8012024:	f003 0301 	and.w	r3, r3, #1
 8012028:	b2d9      	uxtb	r1, r3
 801202a:	7893      	ldrb	r3, [r2, #2]
 801202c:	f361 0341 	bfi	r3, r1, #1, #1
 8012030:	7093      	strb	r3, [r2, #2]
 8012032:	e7d3      	b.n	8011fdc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        continue;
                                }

                                if(rcode)
 8012034:	7ffb      	ldrb	r3, [r7, #31]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d001      	beq.n	801203e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x120>
                                        return rcode;
 801203a:	7ffb      	ldrb	r3, [r7, #31]
 801203c:	e043      	b.n	80120c6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 801203e:	7ffb      	ldrb	r3, [r7, #31]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d111      	bne.n	8012068 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
 8012044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012046:	2b00      	cmp	r3, #0
 8012048:	d00e      	beq.n	8012068 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 801204a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	681c      	ldr	r4, [r3, #0]
 8012050:	8939      	ldrh	r1, [r7, #8]
 8012052:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012056:	8bbb      	ldrh	r3, [r7, #28]
 8012058:	1ad3      	subs	r3, r2, r3
 801205a:	b29b      	uxth	r3, r3
 801205c:	833b      	strh	r3, [r7, #24]
 801205e:	f107 0318 	add.w	r3, r7, #24
 8012062:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012064:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8012066:	47a0      	blx	r4

                                left -= read;
 8012068:	893b      	ldrh	r3, [r7, #8]
 801206a:	8bba      	ldrh	r2, [r7, #28]
 801206c:	1ad3      	subs	r3, r2, r3
 801206e:	83bb      	strh	r3, [r7, #28]

                                if(read < nbytes)
 8012070:	893b      	ldrh	r3, [r7, #8]
 8012072:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012076:	429a      	cmp	r2, r3
 8012078:	d812      	bhi.n	80120a0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x182>
                        while(left) {
 801207a:	e7af      	b.n	8011fdc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 801207c:	68fa      	ldr	r2, [r7, #12]
 801207e:	7893      	ldrb	r3, [r2, #2]
 8012080:	f043 0301 	orr.w	r3, r3, #1
 8012084:	7093      	strb	r3, [r2, #2]
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 8012086:	68f9      	ldr	r1, [r7, #12]
 8012088:	897a      	ldrh	r2, [r7, #10]
 801208a:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 801208e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012090:	9300      	str	r3, [sp, #0]
 8012092:	4603      	mov	r3, r0
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f000 f953 	bl	8012340 <_ZN3USB11OutTransferEP6EpInfottPh>
 801209a:	4603      	mov	r3, r0
 801209c:	77fb      	strb	r3, [r7, #31]
 801209e:	e000      	b.n	80120a2 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                        break;
 80120a0:	bf00      	nop
                }
                if(rcode) //return error
 80120a2:	7ffb      	ldrb	r3, [r7, #31]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d001      	beq.n	80120ac <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
                        return ( rcode);
 80120a8:	7ffb      	ldrb	r3, [r7, #31]
 80120aa:	e00c      	b.n	80120c6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 80120ac:	7efb      	ldrb	r3, [r7, #27]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d001      	beq.n	80120b6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x198>
 80120b2:	21a0      	movs	r1, #160	; 0xa0
 80120b4:	e000      	b.n	80120b8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x19a>
 80120b6:	2180      	movs	r1, #128	; 0x80
 80120b8:	897b      	ldrh	r3, [r7, #10]
 80120ba:	78ba      	ldrb	r2, [r7, #2]
 80120bc:	6878      	ldr	r0, [r7, #4]
 80120be:	f000 fa6a 	bl	8012596 <_ZN3USB11dispatchPktEhht>
 80120c2:	4603      	mov	r3, r0
 80120c4:	bf00      	nop
}
 80120c6:	4618      	mov	r0, r3
 80120c8:	3724      	adds	r7, #36	; 0x24
 80120ca:	46bd      	mov	sp, r7
 80120cc:	bd90      	pop	{r4, r7, pc}

080120ce <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 80120ce:	b580      	push	{r7, lr}
 80120d0:	b08a      	sub	sp, #40	; 0x28
 80120d2:	af02      	add	r7, sp, #8
 80120d4:	60f8      	str	r0, [r7, #12]
 80120d6:	607b      	str	r3, [r7, #4]
 80120d8:	460b      	mov	r3, r1
 80120da:	72fb      	strb	r3, [r7, #11]
 80120dc:	4613      	mov	r3, r2
 80120de:	72bb      	strb	r3, [r7, #10]
        EpInfo *pep = NULL;
 80120e0:	2300      	movs	r3, #0
 80120e2:	61bb      	str	r3, [r7, #24]
        uint16_t nak_limit = 0;
 80120e4:	2300      	movs	r3, #0
 80120e6:	82fb      	strh	r3, [r7, #22]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 80120e8:	f107 0018 	add.w	r0, r7, #24
 80120ec:	7aba      	ldrb	r2, [r7, #10]
 80120ee:	7af9      	ldrb	r1, [r7, #11]
 80120f0:	f107 0316 	add.w	r3, r7, #22
 80120f4:	9300      	str	r3, [sp, #0]
 80120f6:	4603      	mov	r3, r0
 80120f8:	68f8      	ldr	r0, [r7, #12]
 80120fa:	f7ff fea8 	bl	8011e4e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 80120fe:	4603      	mov	r3, r0
 8012100:	77fb      	strb	r3, [r7, #31]

        if(rcode) {
 8012102:	7ffb      	ldrb	r3, [r7, #31]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d010      	beq.n	801212a <_ZN3USB10inTransferEhhPtPhh+0x5c>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 8012108:	7ffb      	ldrb	r3, [r7, #31]
 801210a:	2181      	movs	r1, #129	; 0x81
 801210c:	4618      	mov	r0, r3
 801210e:	f001 f883 	bl	8013218 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 8012112:	7afb      	ldrb	r3, [r7, #11]
 8012114:	2181      	movs	r1, #129	; 0x81
 8012116:	4618      	mov	r0, r3
 8012118:	f001 f87e 	bl	8013218 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 801211c:	7abb      	ldrb	r3, [r7, #10]
 801211e:	2181      	movs	r1, #129	; 0x81
 8012120:	4618      	mov	r0, r3
 8012122:	f001 f879 	bl	8013218 <_Z10D_PrintHexIhEvT_i>
                return rcode;
 8012126:	7ffb      	ldrb	r3, [r7, #31]
 8012128:	e00c      	b.n	8012144 <_ZN3USB10inTransferEhhPtPhh+0x76>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 801212a:	69b9      	ldr	r1, [r7, #24]
 801212c:	8afa      	ldrh	r2, [r7, #22]
 801212e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012132:	9301      	str	r3, [sp, #4]
 8012134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012136:	9300      	str	r3, [sp, #0]
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	68f8      	ldr	r0, [r7, #12]
 801213c:	f000 f806 	bl	801214c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8012140:	4603      	mov	r3, r0
 8012142:	bf00      	nop
}
 8012144:	4618      	mov	r0, r3
 8012146:	3720      	adds	r7, #32
 8012148:	46bd      	mov	sp, r7
 801214a:	bd80      	pop	{r7, pc}

0801214c <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 801214c:	b580      	push	{r7, lr}
 801214e:	b086      	sub	sp, #24
 8012150:	af00      	add	r7, sp, #0
 8012152:	60f8      	str	r0, [r7, #12]
 8012154:	60b9      	str	r1, [r7, #8]
 8012156:	603b      	str	r3, [r7, #0]
 8012158:	4613      	mov	r3, r2
 801215a:	80fb      	strh	r3, [r7, #6]
        uint8_t rcode = 0;
 801215c:	2300      	movs	r3, #0
 801215e:	75fb      	strb	r3, [r7, #23]
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 8012160:	683b      	ldr	r3, [r7, #0]
 8012162:	881b      	ldrh	r3, [r3, #0]
 8012164:	827b      	strh	r3, [r7, #18]
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	785b      	ldrb	r3, [r3, #1]
 801216a:	747b      	strb	r3, [r7, #17]

        *nbytesptr = 0;
 801216c:	683b      	ldr	r3, [r7, #0]
 801216e:	2200      	movs	r2, #0
 8012170:	801a      	strh	r2, [r3, #0]
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 8012172:	68bb      	ldr	r3, [r7, #8]
 8012174:	789b      	ldrb	r3, [r3, #2]
 8012176:	f003 0302 	and.w	r3, r3, #2
 801217a:	b2db      	uxtb	r3, r3
 801217c:	2b00      	cmp	r3, #0
 801217e:	d001      	beq.n	8012184 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x38>
 8012180:	2320      	movs	r3, #32
 8012182:	e000      	b.n	8012186 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x3a>
 8012184:	2310      	movs	r3, #16
 8012186:	461a      	mov	r2, r3
 8012188:	21e8      	movs	r1, #232	; 0xe8
 801218a:	68f8      	ldr	r0, [r7, #12]
 801218c:	f7ef fe4a 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 8012190:	68bb      	ldr	r3, [r7, #8]
 8012192:	781a      	ldrb	r2, [r3, #0]
 8012194:	88fb      	ldrh	r3, [r7, #6]
 8012196:	2100      	movs	r1, #0
 8012198:	68f8      	ldr	r0, [r7, #12]
 801219a:	f000 f9fc 	bl	8012596 <_ZN3USB11dispatchPktEhht>
 801219e:	4603      	mov	r3, r0
 80121a0:	75fb      	strb	r3, [r7, #23]
                if(rcode == hrTOGERR) {
 80121a2:	7dfb      	ldrb	r3, [r7, #23]
 80121a4:	2b06      	cmp	r3, #6
 80121a6:	d123      	bne.n	80121f0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xa4>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 80121a8:	21f8      	movs	r1, #248	; 0xf8
 80121aa:	68f8      	ldr	r0, [r7, #12]
 80121ac:	f7ef fe8c 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80121b0:	4603      	mov	r3, r0
 80121b2:	f003 0310 	and.w	r3, r3, #16
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	bf0c      	ite	eq
 80121ba:	2301      	moveq	r3, #1
 80121bc:	2300      	movne	r3, #0
 80121be:	b2db      	uxtb	r3, r3
 80121c0:	f003 0301 	and.w	r3, r3, #1
 80121c4:	b2d9      	uxtb	r1, r3
 80121c6:	68ba      	ldr	r2, [r7, #8]
 80121c8:	7893      	ldrb	r3, [r2, #2]
 80121ca:	f361 0341 	bfi	r3, r1, #1, #1
 80121ce:	7093      	strb	r3, [r2, #2]
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	789b      	ldrb	r3, [r3, #2]
 80121d4:	f003 0302 	and.w	r3, r3, #2
 80121d8:	b2db      	uxtb	r3, r3
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d001      	beq.n	80121e2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x96>
 80121de:	2320      	movs	r3, #32
 80121e0:	e000      	b.n	80121e4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x98>
 80121e2:	2310      	movs	r3, #16
 80121e4:	461a      	mov	r2, r3
 80121e6:	21e8      	movs	r1, #232	; 0xe8
 80121e8:	68f8      	ldr	r0, [r7, #12]
 80121ea:	f7ef fe1b 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        continue;
 80121ee:	e06e      	b.n	80122ce <_ZN3USB10InTransferEP6EpInfotPtPhh+0x182>
                }
                if(rcode) {
 80121f0:	7dfb      	ldrb	r3, [r7, #23]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d16c      	bne.n	80122d0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x184>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 80121f6:	21c8      	movs	r1, #200	; 0xc8
 80121f8:	68f8      	ldr	r0, [r7, #12]
 80121fa:	f7ef fe65 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80121fe:	4603      	mov	r3, r0
 8012200:	f003 0304 	and.w	r3, r3, #4
 8012204:	2b00      	cmp	r3, #0
 8012206:	bf0c      	ite	eq
 8012208:	2301      	moveq	r3, #1
 801220a:	2300      	movne	r3, #0
 801220c:	b2db      	uxtb	r3, r3
 801220e:	2b00      	cmp	r3, #0
 8012210:	d002      	beq.n	8012218 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xcc>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 8012212:	23f0      	movs	r3, #240	; 0xf0
 8012214:	75fb      	strb	r3, [r7, #23]
                        break;
 8012216:	e05c      	b.n	80122d2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 8012218:	2130      	movs	r1, #48	; 0x30
 801221a:	68f8      	ldr	r0, [r7, #12]
 801221c:	f7ef fe54 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012220:	4603      	mov	r3, r0
 8012222:	75bb      	strb	r3, [r7, #22]
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 8012224:	7dba      	ldrb	r2, [r7, #22]
 8012226:	8a7b      	ldrh	r3, [r7, #18]
 8012228:	429a      	cmp	r2, r3
 801222a:	dd01      	ble.n	8012230 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xe4>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 801222c:	8a7b      	ldrh	r3, [r7, #18]
 801222e:	75bb      	strb	r3, [r7, #22]
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 8012230:	683b      	ldr	r3, [r7, #0]
 8012232:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012236:	b29b      	uxth	r3, r3
 8012238:	8a7a      	ldrh	r2, [r7, #18]
 801223a:	1ad3      	subs	r3, r2, r3
 801223c:	b29b      	uxth	r3, r3
 801223e:	82bb      	strh	r3, [r7, #20]

                if(mem_left < 0)
 8012240:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012244:	2b00      	cmp	r3, #0
 8012246:	da01      	bge.n	801224c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x100>
                        mem_left = 0;
 8012248:	2300      	movs	r3, #0
 801224a:	82bb      	strh	r3, [r7, #20]

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 801224c:	7dba      	ldrb	r2, [r7, #22]
 801224e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012252:	4293      	cmp	r3, r2
 8012254:	bfa8      	it	ge
 8012256:	4613      	movge	r3, r2
 8012258:	b2da      	uxtb	r2, r3
 801225a:	6a3b      	ldr	r3, [r7, #32]
 801225c:	2108      	movs	r1, #8
 801225e:	68f8      	ldr	r0, [r7, #12]
 8012260:	f000 ffe6 	bl	8013230 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>
 8012264:	6238      	str	r0, [r7, #32]

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 8012266:	2204      	movs	r2, #4
 8012268:	21c8      	movs	r1, #200	; 0xc8
 801226a:	68f8      	ldr	r0, [r7, #12]
 801226c:	f7ef fdda 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	881a      	ldrh	r2, [r3, #0]
 8012274:	7dbb      	ldrb	r3, [r7, #22]
 8012276:	b29b      	uxth	r3, r3
 8012278:	4413      	add	r3, r2
 801227a:	b29a      	uxth	r2, r3
 801227c:	683b      	ldr	r3, [r7, #0]
 801227e:	801a      	strh	r2, [r3, #0]

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 8012280:	7dba      	ldrb	r2, [r7, #22]
 8012282:	7c7b      	ldrb	r3, [r7, #17]
 8012284:	429a      	cmp	r2, r3
 8012286:	d304      	bcc.n	8012292 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x146>
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	881b      	ldrh	r3, [r3, #0]
 801228c:	8a7a      	ldrh	r2, [r7, #18]
 801228e:	429a      	cmp	r2, r3
 8012290:	d813      	bhi.n	80122ba <_ZN3USB10InTransferEP6EpInfotPtPhh+0x16e>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 8012292:	21f8      	movs	r1, #248	; 0xf8
 8012294:	68f8      	ldr	r0, [r7, #12]
 8012296:	f7ef fe17 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801229a:	4603      	mov	r3, r0
 801229c:	f003 0310 	and.w	r3, r3, #16
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d001      	beq.n	80122a8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15c>
 80122a4:	2101      	movs	r1, #1
 80122a6:	e000      	b.n	80122aa <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15e>
 80122a8:	2100      	movs	r1, #0
 80122aa:	68ba      	ldr	r2, [r7, #8]
 80122ac:	7893      	ldrb	r3, [r2, #2]
 80122ae:	f361 0341 	bfi	r3, r1, #1, #1
 80122b2:	7093      	strb	r3, [r2, #2]
                        //printf("\r\n");
                        rcode = 0;
 80122b4:	2300      	movs	r3, #0
 80122b6:	75fb      	strb	r3, [r7, #23]
                        break;
 80122b8:	e00b      	b.n	80122d2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                } else if(bInterval > 0)
 80122ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80122be:	2b00      	cmp	r3, #0
 80122c0:	f43f af66 	beq.w	8012190 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        delay(bInterval); // Delay according to polling interval
 80122c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80122c8:	4618      	mov	r0, r3
 80122ca:	f7f0 fac7 	bl	800285c <HAL_Delay>
        } //while( 1 )
 80122ce:	e75f      	b.n	8012190 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        break; //should be 0, indicating ACK. Else return error code.
 80122d0:	bf00      	nop
        return ( rcode);
 80122d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80122d4:	4618      	mov	r0, r3
 80122d6:	3718      	adds	r7, #24
 80122d8:	46bd      	mov	sp, r7
 80122da:	bd80      	pop	{r7, pc}

080122dc <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 80122dc:	b580      	push	{r7, lr}
 80122de:	b088      	sub	sp, #32
 80122e0:	af02      	add	r7, sp, #8
 80122e2:	6078      	str	r0, [r7, #4]
 80122e4:	4608      	mov	r0, r1
 80122e6:	4611      	mov	r1, r2
 80122e8:	461a      	mov	r2, r3
 80122ea:	4603      	mov	r3, r0
 80122ec:	70fb      	strb	r3, [r7, #3]
 80122ee:	460b      	mov	r3, r1
 80122f0:	70bb      	strb	r3, [r7, #2]
 80122f2:	4613      	mov	r3, r2
 80122f4:	803b      	strh	r3, [r7, #0]
        EpInfo *pep = NULL;
 80122f6:	2300      	movs	r3, #0
 80122f8:	613b      	str	r3, [r7, #16]
        uint16_t nak_limit = 0;
 80122fa:	2300      	movs	r3, #0
 80122fc:	81fb      	strh	r3, [r7, #14]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 80122fe:	f107 0010 	add.w	r0, r7, #16
 8012302:	78ba      	ldrb	r2, [r7, #2]
 8012304:	78f9      	ldrb	r1, [r7, #3]
 8012306:	f107 030e 	add.w	r3, r7, #14
 801230a:	9300      	str	r3, [sp, #0]
 801230c:	4603      	mov	r3, r0
 801230e:	6878      	ldr	r0, [r7, #4]
 8012310:	f7ff fd9d 	bl	8011e4e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8012314:	4603      	mov	r3, r0
 8012316:	75fb      	strb	r3, [r7, #23]

        if(rcode)
 8012318:	7dfb      	ldrb	r3, [r7, #23]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d001      	beq.n	8012322 <_ZN3USB11outTransferEhhtPh+0x46>
                return rcode;
 801231e:	7dfb      	ldrb	r3, [r7, #23]
 8012320:	e00a      	b.n	8012338 <_ZN3USB11outTransferEhhtPh+0x5c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 8012322:	6939      	ldr	r1, [r7, #16]
 8012324:	89fa      	ldrh	r2, [r7, #14]
 8012326:	8838      	ldrh	r0, [r7, #0]
 8012328:	6a3b      	ldr	r3, [r7, #32]
 801232a:	9300      	str	r3, [sp, #0]
 801232c:	4603      	mov	r3, r0
 801232e:	6878      	ldr	r0, [r7, #4]
 8012330:	f000 f806 	bl	8012340 <_ZN3USB11OutTransferEP6EpInfottPh>
 8012334:	4603      	mov	r3, r0
 8012336:	bf00      	nop
}
 8012338:	4618      	mov	r0, r3
 801233a:	3718      	adds	r7, #24
 801233c:	46bd      	mov	sp, r7
 801233e:	bd80      	pop	{r7, pc}

08012340 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 8012340:	b580      	push	{r7, lr}
 8012342:	b08a      	sub	sp, #40	; 0x28
 8012344:	af00      	add	r7, sp, #0
 8012346:	60f8      	str	r0, [r7, #12]
 8012348:	60b9      	str	r1, [r7, #8]
 801234a:	4611      	mov	r1, r2
 801234c:	461a      	mov	r2, r3
 801234e:	460b      	mov	r3, r1
 8012350:	80fb      	strh	r3, [r7, #6]
 8012352:	4613      	mov	r3, r2
 8012354:	80bb      	strh	r3, [r7, #4]
        uint8_t rcode = hrSUCCESS, retry_count;
 8012356:	2300      	movs	r3, #0
 8012358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uint8_t *data_p = data; //local copy of the data pointer
 801235c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801235e:	623b      	str	r3, [r7, #32]
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 8012360:	88bb      	ldrh	r3, [r7, #4]
 8012362:	83bb      	strh	r3, [r7, #28]

        uint8_t maxpktsize = pep->maxPktSize;
 8012364:	68bb      	ldr	r3, [r7, #8]
 8012366:	785b      	ldrb	r3, [r3, #1]
 8012368:	76fb      	strb	r3, [r7, #27]

        if(maxpktsize < 1 || maxpktsize > 64)
 801236a:	7efb      	ldrb	r3, [r7, #27]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d002      	beq.n	8012376 <_ZN3USB11OutTransferEP6EpInfottPh+0x36>
 8012370:	7efb      	ldrb	r3, [r7, #27]
 8012372:	2b40      	cmp	r3, #64	; 0x40
 8012374:	d901      	bls.n	801237a <_ZN3USB11OutTransferEP6EpInfottPh+0x3a>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 8012376:	23da      	movs	r3, #218	; 0xda
 8012378:	e109      	b.n	801258e <_ZN3USB11OutTransferEP6EpInfottPh+0x24e>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 801237a:	f7f0 fa63 	bl	8002844 <HAL_GetTick>
 801237e:	4603      	mov	r3, r0
 8012380:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8012384:	3308      	adds	r3, #8
 8012386:	617b      	str	r3, [r7, #20]

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 8012388:	68bb      	ldr	r3, [r7, #8]
 801238a:	789b      	ldrb	r3, [r3, #2]
 801238c:	f003 0301 	and.w	r3, r3, #1
 8012390:	b2db      	uxtb	r3, r3
 8012392:	2b00      	cmp	r3, #0
 8012394:	d001      	beq.n	801239a <_ZN3USB11OutTransferEP6EpInfottPh+0x5a>
 8012396:	2380      	movs	r3, #128	; 0x80
 8012398:	e000      	b.n	801239c <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
 801239a:	2340      	movs	r3, #64	; 0x40
 801239c:	461a      	mov	r2, r3
 801239e:	21e8      	movs	r1, #232	; 0xe8
 80123a0:	68f8      	ldr	r0, [r7, #12]
 80123a2:	f7ef fd3f 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        while(bytes_left) {
 80123a6:	8bbb      	ldrh	r3, [r7, #28]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	f000 80da 	beq.w	8012562 <_ZN3USB11OutTransferEP6EpInfottPh+0x222>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 80123ae:	2300      	movs	r3, #0
 80123b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                nak_count = 0;
 80123b4:	2300      	movs	r3, #0
 80123b6:	83fb      	strh	r3, [r7, #30]
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 80123b8:	7efb      	ldrb	r3, [r7, #27]
 80123ba:	b29b      	uxth	r3, r3
 80123bc:	8bba      	ldrh	r2, [r7, #28]
 80123be:	4293      	cmp	r3, r2
 80123c0:	bf28      	it	cs
 80123c2:	4613      	movcs	r3, r2
 80123c4:	827b      	strh	r3, [r7, #18]
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 80123c6:	8a7b      	ldrh	r3, [r7, #18]
 80123c8:	b2da      	uxtb	r2, r3
 80123ca:	6a3b      	ldr	r3, [r7, #32]
 80123cc:	2110      	movs	r1, #16
 80123ce:	68f8      	ldr	r0, [r7, #12]
 80123d0:	f000 fef4 	bl	80131bc <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 80123d4:	8a7b      	ldrh	r3, [r7, #18]
 80123d6:	b2db      	uxtb	r3, r3
 80123d8:	461a      	mov	r2, r3
 80123da:	2138      	movs	r1, #56	; 0x38
 80123dc:	68f8      	ldr	r0, [r7, #12]
 80123de:	f7ef fd21 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 80123e2:	68bb      	ldr	r3, [r7, #8]
 80123e4:	781b      	ldrb	r3, [r3, #0]
 80123e6:	f043 0320 	orr.w	r3, r3, #32
 80123ea:	b2db      	uxtb	r3, r3
 80123ec:	461a      	mov	r2, r3
 80123ee:	21f0      	movs	r1, #240	; 0xf0
 80123f0:	68f8      	ldr	r0, [r7, #12]
 80123f2:	f7ef fd17 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 80123f6:	21c8      	movs	r1, #200	; 0xc8
 80123f8:	68f8      	ldr	r0, [r7, #12]
 80123fa:	f7ef fd65 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80123fe:	4603      	mov	r3, r0
 8012400:	b25b      	sxtb	r3, r3
 8012402:	43db      	mvns	r3, r3
 8012404:	b2db      	uxtb	r3, r3
 8012406:	09db      	lsrs	r3, r3, #7
 8012408:	b2db      	uxtb	r3, r3
 801240a:	2b00      	cmp	r3, #0
 801240c:	d000      	beq.n	8012410 <_ZN3USB11OutTransferEP6EpInfottPh+0xd0>
 801240e:	e7f2      	b.n	80123f6 <_ZN3USB11OutTransferEP6EpInfottPh+0xb6>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 8012410:	2280      	movs	r2, #128	; 0x80
 8012412:	21c8      	movs	r1, #200	; 0xc8
 8012414:	68f8      	ldr	r0, [r7, #12]
 8012416:	f7ef fd05 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 801241a:	21f8      	movs	r1, #248	; 0xf8
 801241c:	68f8      	ldr	r0, [r7, #12]
 801241e:	f7ef fd53 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012422:	4603      	mov	r3, r0
 8012424:	f003 030f 	and.w	r3, r3, #15
 8012428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 801242c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012430:	2b00      	cmp	r3, #0
 8012432:	d008      	beq.n	8012446 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 8012434:	f7f0 fa06 	bl	8002844 <HAL_GetTick>
 8012438:	4602      	mov	r2, r0
 801243a:	697b      	ldr	r3, [r7, #20]
 801243c:	1ad3      	subs	r3, r2, r3
 801243e:	2b00      	cmp	r3, #0
 8012440:	da01      	bge.n	8012446 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 8012442:	2301      	movs	r3, #1
 8012444:	e000      	b.n	8012448 <_ZN3USB11OutTransferEP6EpInfottPh+0x108>
 8012446:	2300      	movs	r3, #0
 8012448:	2b00      	cmp	r3, #0
 801244a:	f000 8081 	beq.w	8012550 <_ZN3USB11OutTransferEP6EpInfottPh+0x210>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 801244e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012452:	2b0e      	cmp	r3, #14
 8012454:	d012      	beq.n	801247c <_ZN3USB11OutTransferEP6EpInfottPh+0x13c>
 8012456:	2b0e      	cmp	r3, #14
 8012458:	f300 8085 	bgt.w	8012566 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
 801245c:	2b04      	cmp	r3, #4
 801245e:	d002      	beq.n	8012466 <_ZN3USB11OutTransferEP6EpInfottPh+0x126>
 8012460:	2b06      	cmp	r3, #6
 8012462:	d015      	beq.n	8012490 <_ZN3USB11OutTransferEP6EpInfottPh+0x150>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 8012464:	e07f      	b.n	8012566 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
                                        nak_count++;
 8012466:	8bfb      	ldrh	r3, [r7, #30]
 8012468:	3301      	adds	r3, #1
 801246a:	83fb      	strh	r3, [r7, #30]
                                        if(nak_limit && (nak_count == nak_limit))
 801246c:	88fb      	ldrh	r3, [r7, #6]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d032      	beq.n	80124d8 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
 8012472:	8bfa      	ldrh	r2, [r7, #30]
 8012474:	88fb      	ldrh	r3, [r7, #6]
 8012476:	429a      	cmp	r2, r3
 8012478:	d12e      	bne.n	80124d8 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
                                                goto breakout;
 801247a:	e075      	b.n	8012568 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        retry_count++;
 801247c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012480:	3301      	adds	r3, #1
 8012482:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        if(retry_count == USB_RETRY_LIMIT)
 8012486:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801248a:	2b03      	cmp	r3, #3
 801248c:	d126      	bne.n	80124dc <_ZN3USB11OutTransferEP6EpInfottPh+0x19c>
                                                goto breakout;
 801248e:	e06b      	b.n	8012568 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 8012490:	21f8      	movs	r1, #248	; 0xf8
 8012492:	68f8      	ldr	r0, [r7, #12]
 8012494:	f7ef fd18 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012498:	4603      	mov	r3, r0
 801249a:	f003 0320 	and.w	r3, r3, #32
 801249e:	2b00      	cmp	r3, #0
 80124a0:	bf0c      	ite	eq
 80124a2:	2301      	moveq	r3, #1
 80124a4:	2300      	movne	r3, #0
 80124a6:	b2db      	uxtb	r3, r3
 80124a8:	f003 0301 	and.w	r3, r3, #1
 80124ac:	b2d9      	uxtb	r1, r3
 80124ae:	68ba      	ldr	r2, [r7, #8]
 80124b0:	7893      	ldrb	r3, [r2, #2]
 80124b2:	f361 0300 	bfi	r3, r1, #0, #1
 80124b6:	7093      	strb	r3, [r2, #2]
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 80124b8:	68bb      	ldr	r3, [r7, #8]
 80124ba:	789b      	ldrb	r3, [r3, #2]
 80124bc:	f003 0301 	and.w	r3, r3, #1
 80124c0:	b2db      	uxtb	r3, r3
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d001      	beq.n	80124ca <_ZN3USB11OutTransferEP6EpInfottPh+0x18a>
 80124c6:	2380      	movs	r3, #128	; 0x80
 80124c8:	e000      	b.n	80124cc <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 80124ca:	2340      	movs	r3, #64	; 0x40
 80124cc:	461a      	mov	r2, r3
 80124ce:	21e8      	movs	r1, #232	; 0xe8
 80124d0:	68f8      	ldr	r0, [r7, #12]
 80124d2:	f7ef fca7 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                        break;
 80124d6:	e002      	b.n	80124de <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 80124d8:	bf00      	nop
 80124da:	e000      	b.n	80124de <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 80124dc:	bf00      	nop
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 80124de:	2200      	movs	r2, #0
 80124e0:	2138      	movs	r1, #56	; 0x38
 80124e2:	68f8      	ldr	r0, [r7, #12]
 80124e4:	f7ef fc9e 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 80124e8:	6a3b      	ldr	r3, [r7, #32]
 80124ea:	781b      	ldrb	r3, [r3, #0]
 80124ec:	461a      	mov	r2, r3
 80124ee:	2110      	movs	r1, #16
 80124f0:	68f8      	ldr	r0, [r7, #12]
 80124f2:	f7ef fc97 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 80124f6:	8a7b      	ldrh	r3, [r7, #18]
 80124f8:	b2db      	uxtb	r3, r3
 80124fa:	461a      	mov	r2, r3
 80124fc:	2138      	movs	r1, #56	; 0x38
 80124fe:	68f8      	ldr	r0, [r7, #12]
 8012500:	f7ef fc90 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 8012504:	68bb      	ldr	r3, [r7, #8]
 8012506:	781b      	ldrb	r3, [r3, #0]
 8012508:	f043 0320 	orr.w	r3, r3, #32
 801250c:	b2db      	uxtb	r3, r3
 801250e:	461a      	mov	r2, r3
 8012510:	21f0      	movs	r1, #240	; 0xf0
 8012512:	68f8      	ldr	r0, [r7, #12]
 8012514:	f7ef fc86 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 8012518:	21c8      	movs	r1, #200	; 0xc8
 801251a:	68f8      	ldr	r0, [r7, #12]
 801251c:	f7ef fcd4 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012520:	4603      	mov	r3, r0
 8012522:	b25b      	sxtb	r3, r3
 8012524:	43db      	mvns	r3, r3
 8012526:	b2db      	uxtb	r3, r3
 8012528:	09db      	lsrs	r3, r3, #7
 801252a:	b2db      	uxtb	r3, r3
 801252c:	2b00      	cmp	r3, #0
 801252e:	d000      	beq.n	8012532 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f2>
 8012530:	e7f2      	b.n	8012518 <_ZN3USB11OutTransferEP6EpInfottPh+0x1d8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 8012532:	2280      	movs	r2, #128	; 0x80
 8012534:	21c8      	movs	r1, #200	; 0xc8
 8012536:	68f8      	ldr	r0, [r7, #12]
 8012538:	f7ef fc74 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 801253c:	21f8      	movs	r1, #248	; 0xf8
 801253e:	68f8      	ldr	r0, [r7, #12]
 8012540:	f7ef fcc2 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012544:	4603      	mov	r3, r0
 8012546:	f003 030f 	and.w	r3, r3, #15
 801254a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 801254e:	e76d      	b.n	801242c <_ZN3USB11OutTransferEP6EpInfottPh+0xec>
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 8012550:	8bba      	ldrh	r2, [r7, #28]
 8012552:	8a7b      	ldrh	r3, [r7, #18]
 8012554:	1ad3      	subs	r3, r2, r3
 8012556:	83bb      	strh	r3, [r7, #28]
                data_p += bytes_tosend;
 8012558:	8a7b      	ldrh	r3, [r7, #18]
 801255a:	6a3a      	ldr	r2, [r7, #32]
 801255c:	4413      	add	r3, r2
 801255e:	623b      	str	r3, [r7, #32]
        while(bytes_left) {
 8012560:	e721      	b.n	80123a6 <_ZN3USB11OutTransferEP6EpInfottPh+0x66>
        }//while( bytes_left...
breakout:
 8012562:	bf00      	nop
 8012564:	e000      	b.n	8012568 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        goto breakout;
 8012566:	bf00      	nop

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 8012568:	21f8      	movs	r1, #248	; 0xf8
 801256a:	68f8      	ldr	r0, [r7, #12]
 801256c:	f7ef fcac 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012570:	4603      	mov	r3, r0
 8012572:	f003 0320 	and.w	r3, r3, #32
 8012576:	2b00      	cmp	r3, #0
 8012578:	d001      	beq.n	801257e <_ZN3USB11OutTransferEP6EpInfottPh+0x23e>
 801257a:	2101      	movs	r1, #1
 801257c:	e000      	b.n	8012580 <_ZN3USB11OutTransferEP6EpInfottPh+0x240>
 801257e:	2100      	movs	r1, #0
 8012580:	68ba      	ldr	r2, [r7, #8]
 8012582:	7893      	ldrb	r3, [r2, #2]
 8012584:	f361 0300 	bfi	r3, r1, #0, #1
 8012588:	7093      	strb	r3, [r2, #2]
        return ( rcode); //should be 0 in all cases
 801258a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801258e:	4618      	mov	r0, r3
 8012590:	3728      	adds	r7, #40	; 0x28
 8012592:	46bd      	mov	sp, r7
 8012594:	bd80      	pop	{r7, pc}

08012596 <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 8012596:	b580      	push	{r7, lr}
 8012598:	b086      	sub	sp, #24
 801259a:	af00      	add	r7, sp, #0
 801259c:	6078      	str	r0, [r7, #4]
 801259e:	4608      	mov	r0, r1
 80125a0:	4611      	mov	r1, r2
 80125a2:	461a      	mov	r2, r3
 80125a4:	4603      	mov	r3, r0
 80125a6:	70fb      	strb	r3, [r7, #3]
 80125a8:	460b      	mov	r3, r1
 80125aa:	70bb      	strb	r3, [r7, #2]
 80125ac:	4613      	mov	r3, r2
 80125ae:	803b      	strh	r3, [r7, #0]
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 80125b0:	f7f0 f948 	bl	8002844 <HAL_GetTick>
 80125b4:	4603      	mov	r3, r0
 80125b6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80125ba:	3308      	adds	r3, #8
 80125bc:	613b      	str	r3, [r7, #16]
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 80125be:	2300      	movs	r3, #0
 80125c0:	75fb      	strb	r3, [r7, #23]
        uint8_t retry_count = 0;
 80125c2:	2300      	movs	r3, #0
 80125c4:	75bb      	strb	r3, [r7, #22]
        uint16_t nak_count = 0;
 80125c6:	2300      	movs	r3, #0
 80125c8:	82bb      	strh	r3, [r7, #20]

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 80125ca:	f7f0 f93b 	bl	8002844 <HAL_GetTick>
 80125ce:	4602      	mov	r2, r0
 80125d0:	693b      	ldr	r3, [r7, #16]
 80125d2:	1ad3      	subs	r3, r2, r3
 80125d4:	0fdb      	lsrs	r3, r3, #31
 80125d6:	b2db      	uxtb	r3, r3
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d04c      	beq.n	8012676 <_ZN3USB11dispatchPktEhht+0xe0>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 80125dc:	78fa      	ldrb	r2, [r7, #3]
 80125de:	78bb      	ldrb	r3, [r7, #2]
 80125e0:	4313      	orrs	r3, r2
 80125e2:	b2db      	uxtb	r3, r3
 80125e4:	461a      	mov	r2, r3
 80125e6:	21f0      	movs	r1, #240	; 0xf0
 80125e8:	6878      	ldr	r0, [r7, #4]
 80125ea:	f7ef fc1b 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 80125ee:	23ff      	movs	r3, #255	; 0xff
 80125f0:	75fb      	strb	r3, [r7, #23]

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 80125f2:	f7f0 f927 	bl	8002844 <HAL_GetTick>
 80125f6:	4602      	mov	r2, r0
 80125f8:	693b      	ldr	r3, [r7, #16]
 80125fa:	1ad3      	subs	r3, r2, r3
 80125fc:	0fdb      	lsrs	r3, r3, #31
 80125fe:	b2db      	uxtb	r3, r3
 8012600:	2b00      	cmp	r3, #0
 8012602:	d010      	beq.n	8012626 <_ZN3USB11dispatchPktEhht+0x90>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 8012604:	21c8      	movs	r1, #200	; 0xc8
 8012606:	6878      	ldr	r0, [r7, #4]
 8012608:	f7ef fc5e 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801260c:	4603      	mov	r3, r0
 801260e:	73fb      	strb	r3, [r7, #15]

                        if(tmpdata & bmHXFRDNIRQ) {
 8012610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012614:	2b00      	cmp	r3, #0
 8012616:	daec      	bge.n	80125f2 <_ZN3USB11dispatchPktEhht+0x5c>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 8012618:	2280      	movs	r2, #128	; 0x80
 801261a:	21c8      	movs	r1, #200	; 0xc8
 801261c:	6878      	ldr	r0, [r7, #4]
 801261e:	f7ef fc01 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                rcode = 0x00;
 8012622:	2300      	movs	r3, #0
 8012624:	75fb      	strb	r3, [r7, #23]
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 8012626:	21f8      	movs	r1, #248	; 0xf8
 8012628:	6878      	ldr	r0, [r7, #4]
 801262a:	f7ef fc4d 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801262e:	4603      	mov	r3, r0
 8012630:	f003 030f 	and.w	r3, r3, #15
 8012634:	75fb      	strb	r3, [r7, #23]

                switch(rcode) {
 8012636:	7dfb      	ldrb	r3, [r7, #23]
 8012638:	2b04      	cmp	r3, #4
 801263a:	d002      	beq.n	8012642 <_ZN3USB11dispatchPktEhht+0xac>
 801263c:	2b0e      	cmp	r3, #14
 801263e:	d00c      	beq.n	801265a <_ZN3USB11dispatchPktEhht+0xc4>
 8012640:	e013      	b.n	801266a <_ZN3USB11dispatchPktEhht+0xd4>
                        case hrNAK:
                                nak_count++;
 8012642:	8abb      	ldrh	r3, [r7, #20]
 8012644:	3301      	adds	r3, #1
 8012646:	82bb      	strh	r3, [r7, #20]
                                if(nak_limit && (nak_count == nak_limit))
 8012648:	883b      	ldrh	r3, [r7, #0]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d00f      	beq.n	801266e <_ZN3USB11dispatchPktEhht+0xd8>
 801264e:	8aba      	ldrh	r2, [r7, #20]
 8012650:	883b      	ldrh	r3, [r7, #0]
 8012652:	429a      	cmp	r2, r3
 8012654:	d10b      	bne.n	801266e <_ZN3USB11dispatchPktEhht+0xd8>
                                        return (rcode);
 8012656:	7dfb      	ldrb	r3, [r7, #23]
 8012658:	e00e      	b.n	8012678 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 801265a:	7dbb      	ldrb	r3, [r7, #22]
 801265c:	3301      	adds	r3, #1
 801265e:	75bb      	strb	r3, [r7, #22]
                                if(retry_count == USB_RETRY_LIMIT)
 8012660:	7dbb      	ldrb	r3, [r7, #22]
 8012662:	2b03      	cmp	r3, #3
 8012664:	d105      	bne.n	8012672 <_ZN3USB11dispatchPktEhht+0xdc>
                                        return (rcode);
 8012666:	7dfb      	ldrb	r3, [r7, #23]
 8012668:	e006      	b.n	8012678 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        default:
                                return (rcode);
 801266a:	7dfb      	ldrb	r3, [r7, #23]
 801266c:	e004      	b.n	8012678 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
 801266e:	bf00      	nop
 8012670:	e7ab      	b.n	80125ca <_ZN3USB11dispatchPktEhht+0x34>
                                break;
 8012672:	bf00      	nop
        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 8012674:	e7a9      	b.n	80125ca <_ZN3USB11dispatchPktEhht+0x34>
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 8012676:	7dfb      	ldrb	r3, [r7, #23]
}
 8012678:	4618      	mov	r0, r3
 801267a:	3718      	adds	r7, #24
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}

08012680 <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 8012680:	b580      	push	{r7, lr}
 8012682:	b084      	sub	sp, #16
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 8012688:	2300      	movs	r3, #0
 801268a:	73fb      	strb	r3, [r7, #15]

        MAX3421E::Task();
 801268c:	6878      	ldr	r0, [r7, #4]
 801268e:	f000 fdfd 	bl	801328c <_ZN8MAX3421eI3P102P9E4TaskEv>

        tmpdata = getVbusState();
 8012692:	6878      	ldr	r0, [r7, #4]
 8012694:	f000 fe12 	bl	80132bc <_ZN8MAX3421eI3P102P9E12getVbusStateEv>
 8012698:	4603      	mov	r3, r0
 801269a:	733b      	strb	r3, [r7, #12]

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 801269c:	7b3b      	ldrb	r3, [r7, #12]
 801269e:	2b03      	cmp	r3, #3
 80126a0:	d82e      	bhi.n	8012700 <_ZN3USB4TaskEv+0x80>
 80126a2:	a201      	add	r2, pc, #4	; (adr r2, 80126a8 <_ZN3USB4TaskEv+0x28>)
 80126a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126a8:	080126c5 	.word	0x080126c5
 80126ac:	080126b9 	.word	0x080126b9
 80126b0:	080126e1 	.word	0x080126e1
 80126b4:	080126dd 	.word	0x080126dd
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 80126b8:	4bbf      	ldr	r3, [pc, #764]	; (80129b8 <_ZN3USB4TaskEv+0x338>)
 80126ba:	2213      	movs	r2, #19
 80126bc:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 80126be:	2300      	movs	r3, #0
 80126c0:	73fb      	strb	r3, [r7, #15]
                        break;
 80126c2:	e01d      	b.n	8012700 <_ZN3USB4TaskEv+0x80>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 80126c4:	4bbc      	ldr	r3, [pc, #752]	; (80129b8 <_ZN3USB4TaskEv+0x338>)
 80126c6:	781b      	ldrb	r3, [r3, #0]
 80126c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80126cc:	2b10      	cmp	r3, #16
 80126ce:	d002      	beq.n	80126d6 <_ZN3USB4TaskEv+0x56>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 80126d0:	4bb9      	ldr	r3, [pc, #740]	; (80129b8 <_ZN3USB4TaskEv+0x338>)
 80126d2:	2211      	movs	r2, #17
 80126d4:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 80126d6:	2300      	movs	r3, #0
 80126d8:	73fb      	strb	r3, [r7, #15]
                        break;
 80126da:	e011      	b.n	8012700 <_ZN3USB4TaskEv+0x80>
                case LSHOST:

                        lowspeed = true;
 80126dc:	2301      	movs	r3, #1
 80126de:	73fb      	strb	r3, [r7, #15]
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 80126e0:	4bb5      	ldr	r3, [pc, #724]	; (80129b8 <_ZN3USB4TaskEv+0x338>)
 80126e2:	781b      	ldrb	r3, [r3, #0]
 80126e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80126e8:	2b10      	cmp	r3, #16
 80126ea:	d108      	bne.n	80126fe <_ZN3USB4TaskEv+0x7e>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 80126ec:	f7f0 f8aa 	bl	8002844 <HAL_GetTick>
 80126f0:	4603      	mov	r3, r0
 80126f2:	33c8      	adds	r3, #200	; 0xc8
 80126f4:	4ab1      	ldr	r2, [pc, #708]	; (80129bc <_ZN3USB4TaskEv+0x33c>)
 80126f6:	6013      	str	r3, [r2, #0]
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 80126f8:	4baf      	ldr	r3, [pc, #700]	; (80129b8 <_ZN3USB4TaskEv+0x338>)
 80126fa:	2220      	movs	r2, #32
 80126fc:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 80126fe:	bf00      	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 8012700:	2300      	movs	r3, #0
 8012702:	73bb      	strb	r3, [r7, #14]
 8012704:	7bbb      	ldrb	r3, [r7, #14]
 8012706:	2b0f      	cmp	r3, #15
 8012708:	d81b      	bhi.n	8012742 <_ZN3USB4TaskEv+0xc2>
                if(devConfig[i])
 801270a:	7bba      	ldrb	r2, [r7, #14]
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	321e      	adds	r2, #30
 8012710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d010      	beq.n	801273a <_ZN3USB4TaskEv+0xba>
                        rcode = devConfig[i]->Poll();
 8012718:	7bba      	ldrb	r2, [r7, #14]
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	321e      	adds	r2, #30
 801271e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012722:	7bba      	ldrb	r2, [r7, #14]
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	321e      	adds	r2, #30
 8012728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	330c      	adds	r3, #12
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	4608      	mov	r0, r1
 8012734:	4798      	blx	r3
 8012736:	4603      	mov	r3, r0
 8012738:	72fb      	strb	r3, [r7, #11]
        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 801273a:	7bbb      	ldrb	r3, [r7, #14]
 801273c:	3301      	adds	r3, #1
 801273e:	73bb      	strb	r3, [r7, #14]
 8012740:	e7e0      	b.n	8012704 <_ZN3USB4TaskEv+0x84>

        switch(usb_task_state) {
 8012742:	4b9d      	ldr	r3, [pc, #628]	; (80129b8 <_ZN3USB4TaskEv+0x338>)
 8012744:	781b      	ldrb	r3, [r3, #0]
 8012746:	2ba0      	cmp	r3, #160	; 0xa0
 8012748:	f000 8123 	beq.w	8012992 <_ZN3USB4TaskEv+0x312>
 801274c:	2ba0      	cmp	r3, #160	; 0xa0
 801274e:	f300 812f 	bgt.w	80129b0 <_ZN3USB4TaskEv+0x330>
 8012752:	2b90      	cmp	r3, #144	; 0x90
 8012754:	f000 811f 	beq.w	8012996 <_ZN3USB4TaskEv+0x316>
 8012758:	2b90      	cmp	r3, #144	; 0x90
 801275a:	f300 8129 	bgt.w	80129b0 <_ZN3USB4TaskEv+0x330>
 801275e:	2b80      	cmp	r3, #128	; 0x80
 8012760:	f000 80fe 	beq.w	8012960 <_ZN3USB4TaskEv+0x2e0>
 8012764:	2b80      	cmp	r3, #128	; 0x80
 8012766:	f300 8123 	bgt.w	80129b0 <_ZN3USB4TaskEv+0x330>
 801276a:	2b51      	cmp	r3, #81	; 0x51
 801276c:	f000 80ea 	beq.w	8012944 <_ZN3USB4TaskEv+0x2c4>
 8012770:	2b51      	cmp	r3, #81	; 0x51
 8012772:	f300 811d 	bgt.w	80129b0 <_ZN3USB4TaskEv+0x330>
 8012776:	2b40      	cmp	r3, #64	; 0x40
 8012778:	dc6a      	bgt.n	8012850 <_ZN3USB4TaskEv+0x1d0>
 801277a:	2b11      	cmp	r3, #17
 801277c:	f2c0 8118 	blt.w	80129b0 <_ZN3USB4TaskEv+0x330>
 8012780:	3b11      	subs	r3, #17
 8012782:	2b2f      	cmp	r3, #47	; 0x2f
 8012784:	f200 8114 	bhi.w	80129b0 <_ZN3USB4TaskEv+0x330>
 8012788:	a201      	add	r2, pc, #4	; (adr r2, 8012790 <_ZN3USB4TaskEv+0x110>)
 801278a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801278e:	bf00      	nop
 8012790:	08012857 	.word	0x08012857
 8012794:	0801299b 	.word	0x0801299b
 8012798:	0801299b 	.word	0x0801299b
 801279c:	080129b1 	.word	0x080129b1
 80127a0:	080129b1 	.word	0x080129b1
 80127a4:	080129b1 	.word	0x080129b1
 80127a8:	080129b1 	.word	0x080129b1
 80127ac:	080129b1 	.word	0x080129b1
 80127b0:	080129b1 	.word	0x080129b1
 80127b4:	080129b1 	.word	0x080129b1
 80127b8:	080129b1 	.word	0x080129b1
 80127bc:	080129b1 	.word	0x080129b1
 80127c0:	080129b1 	.word	0x080129b1
 80127c4:	080129b1 	.word	0x080129b1
 80127c8:	080129b1 	.word	0x080129b1
 80127cc:	080128a7 	.word	0x080128a7
 80127d0:	080129b1 	.word	0x080129b1
 80127d4:	080129b1 	.word	0x080129b1
 80127d8:	080129b1 	.word	0x080129b1
 80127dc:	080129b1 	.word	0x080129b1
 80127e0:	080129b1 	.word	0x080129b1
 80127e4:	080129b1 	.word	0x080129b1
 80127e8:	080129b1 	.word	0x080129b1
 80127ec:	080129b1 	.word	0x080129b1
 80127f0:	080129b1 	.word	0x080129b1
 80127f4:	080129b1 	.word	0x080129b1
 80127f8:	080129b1 	.word	0x080129b1
 80127fc:	080129b1 	.word	0x080129b1
 8012800:	080129b1 	.word	0x080129b1
 8012804:	080129b1 	.word	0x080129b1
 8012808:	080129b1 	.word	0x080129b1
 801280c:	080128c3 	.word	0x080128c3
 8012810:	080129b1 	.word	0x080129b1
 8012814:	080129b1 	.word	0x080129b1
 8012818:	080129b1 	.word	0x080129b1
 801281c:	080129b1 	.word	0x080129b1
 8012820:	080129b1 	.word	0x080129b1
 8012824:	080129b1 	.word	0x080129b1
 8012828:	080129b1 	.word	0x080129b1
 801282c:	080129b1 	.word	0x080129b1
 8012830:	080129b1 	.word	0x080129b1
 8012834:	080129b1 	.word	0x080129b1
 8012838:	080129b1 	.word	0x080129b1
 801283c:	080129b1 	.word	0x080129b1
 8012840:	080129b1 	.word	0x080129b1
 8012844:	080129b1 	.word	0x080129b1
 8012848:	080129b1 	.word	0x080129b1
 801284c:	080128d5 	.word	0x080128d5
 8012850:	2b50      	cmp	r3, #80	; 0x50
 8012852:	d05f      	beq.n	8012914 <_ZN3USB4TaskEv+0x294>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 8012854:	e0ac      	b.n	80129b0 <_ZN3USB4TaskEv+0x330>
                        init();
 8012856:	6878      	ldr	r0, [r7, #4]
 8012858:	f7ff fa8e 	bl	8011d78 <_ZN3USB4initEv>
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 801285c:	2300      	movs	r3, #0
 801285e:	737b      	strb	r3, [r7, #13]
 8012860:	7b7b      	ldrb	r3, [r7, #13]
 8012862:	2b0f      	cmp	r3, #15
 8012864:	d81b      	bhi.n	801289e <_ZN3USB4TaskEv+0x21e>
                                if(devConfig[i])
 8012866:	7b7a      	ldrb	r2, [r7, #13]
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	321e      	adds	r2, #30
 801286c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d010      	beq.n	8012896 <_ZN3USB4TaskEv+0x216>
                                        rcode = devConfig[i]->Release();
 8012874:	7b7a      	ldrb	r2, [r7, #13]
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	321e      	adds	r2, #30
 801287a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801287e:	7b7a      	ldrb	r2, [r7, #13]
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	321e      	adds	r2, #30
 8012884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	3308      	adds	r3, #8
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	4608      	mov	r0, r1
 8012890:	4798      	blx	r3
 8012892:	4603      	mov	r3, r0
 8012894:	72fb      	strb	r3, [r7, #11]
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 8012896:	7b7b      	ldrb	r3, [r7, #13]
 8012898:	3301      	adds	r3, #1
 801289a:	737b      	strb	r3, [r7, #13]
 801289c:	e7e0      	b.n	8012860 <_ZN3USB4TaskEv+0x1e0>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 801289e:	4b46      	ldr	r3, [pc, #280]	; (80129b8 <_ZN3USB4TaskEv+0x338>)
 80128a0:	2212      	movs	r2, #18
 80128a2:	701a      	strb	r2, [r3, #0]
                        break;
 80128a4:	e084      	b.n	80129b0 <_ZN3USB4TaskEv+0x330>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 80128a6:	f7ef ffcd 	bl	8002844 <HAL_GetTick>
 80128aa:	4602      	mov	r2, r0
 80128ac:	4b43      	ldr	r3, [pc, #268]	; (80129bc <_ZN3USB4TaskEv+0x33c>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	1ad3      	subs	r3, r2, r3
 80128b2:	43db      	mvns	r3, r3
 80128b4:	0fdb      	lsrs	r3, r3, #31
 80128b6:	b2db      	uxtb	r3, r3
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d070      	beq.n	801299e <_ZN3USB4TaskEv+0x31e>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 80128bc:	4b3e      	ldr	r3, [pc, #248]	; (80129b8 <_ZN3USB4TaskEv+0x338>)
 80128be:	2230      	movs	r2, #48	; 0x30
 80128c0:	701a      	strb	r2, [r3, #0]
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 80128c2:	2201      	movs	r2, #1
 80128c4:	21e8      	movs	r1, #232	; 0xe8
 80128c6:	6878      	ldr	r0, [r7, #4]
 80128c8:	f7ef faac 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 80128cc:	4b3a      	ldr	r3, [pc, #232]	; (80129b8 <_ZN3USB4TaskEv+0x338>)
 80128ce:	2240      	movs	r2, #64	; 0x40
 80128d0:	701a      	strb	r2, [r3, #0]
                        break;
 80128d2:	e06d      	b.n	80129b0 <_ZN3USB4TaskEv+0x330>
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 80128d4:	21e8      	movs	r1, #232	; 0xe8
 80128d6:	6878      	ldr	r0, [r7, #4]
 80128d8:	f7ef faf6 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80128dc:	4603      	mov	r3, r0
 80128de:	f003 0301 	and.w	r3, r3, #1
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	bf0c      	ite	eq
 80128e6:	2301      	moveq	r3, #1
 80128e8:	2300      	movne	r3, #0
 80128ea:	b2db      	uxtb	r3, r3
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d058      	beq.n	80129a2 <_ZN3USB4TaskEv+0x322>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 80128f0:	21d8      	movs	r1, #216	; 0xd8
 80128f2:	6878      	ldr	r0, [r7, #4]
 80128f4:	f7ef fae8 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80128f8:	4603      	mov	r3, r0
 80128fa:	f043 0308 	orr.w	r3, r3, #8
 80128fe:	733b      	strb	r3, [r7, #12]
                                regWr(rMODE, tmpdata);
 8012900:	7b3b      	ldrb	r3, [r7, #12]
 8012902:	461a      	mov	r2, r3
 8012904:	21d8      	movs	r1, #216	; 0xd8
 8012906:	6878      	ldr	r0, [r7, #4]
 8012908:	f7ef fa8c 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 801290c:	4b2a      	ldr	r3, [pc, #168]	; (80129b8 <_ZN3USB4TaskEv+0x338>)
 801290e:	2250      	movs	r2, #80	; 0x50
 8012910:	701a      	strb	r2, [r3, #0]
                        break;
 8012912:	e046      	b.n	80129a2 <_ZN3USB4TaskEv+0x322>
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 8012914:	21c8      	movs	r1, #200	; 0xc8
 8012916:	6878      	ldr	r0, [r7, #4]
 8012918:	f7ef fad6 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801291c:	4603      	mov	r3, r0
 801291e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012922:	2b00      	cmp	r3, #0
 8012924:	bf14      	ite	ne
 8012926:	2301      	movne	r3, #1
 8012928:	2300      	moveq	r3, #0
 801292a:	b2db      	uxtb	r3, r3
 801292c:	2b00      	cmp	r3, #0
 801292e:	d03a      	beq.n	80129a6 <_ZN3USB4TaskEv+0x326>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 8012930:	4b21      	ldr	r3, [pc, #132]	; (80129b8 <_ZN3USB4TaskEv+0x338>)
 8012932:	2251      	movs	r2, #81	; 0x51
 8012934:	701a      	strb	r2, [r3, #0]
                                delay = (uint32_t)millis() + 20;
 8012936:	f7ef ff85 	bl	8002844 <HAL_GetTick>
 801293a:	4603      	mov	r3, r0
 801293c:	3314      	adds	r3, #20
 801293e:	4a1f      	ldr	r2, [pc, #124]	; (80129bc <_ZN3USB4TaskEv+0x33c>)
 8012940:	6013      	str	r3, [r2, #0]
                        break;
 8012942:	e030      	b.n	80129a6 <_ZN3USB4TaskEv+0x326>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 8012944:	f7ef ff7e 	bl	8002844 <HAL_GetTick>
 8012948:	4602      	mov	r2, r0
 801294a:	4b1c      	ldr	r3, [pc, #112]	; (80129bc <_ZN3USB4TaskEv+0x33c>)
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	1ad3      	subs	r3, r2, r3
 8012950:	43db      	mvns	r3, r3
 8012952:	0fdb      	lsrs	r3, r3, #31
 8012954:	b2db      	uxtb	r3, r3
 8012956:	2b00      	cmp	r3, #0
 8012958:	d027      	beq.n	80129aa <_ZN3USB4TaskEv+0x32a>
 801295a:	4b17      	ldr	r3, [pc, #92]	; (80129b8 <_ZN3USB4TaskEv+0x338>)
 801295c:	2280      	movs	r2, #128	; 0x80
 801295e:	701a      	strb	r2, [r3, #0]
                        rcode = Configuring(0, 0, lowspeed);
 8012960:	7bfb      	ldrb	r3, [r7, #15]
 8012962:	2200      	movs	r2, #0
 8012964:	2100      	movs	r1, #0
 8012966:	6878      	ldr	r0, [r7, #4]
 8012968:	f000 f920 	bl	8012bac <_ZN3USB11ConfiguringEhhb>
 801296c:	4603      	mov	r3, r0
 801296e:	72fb      	strb	r3, [r7, #11]
                        if(rcode) {
 8012970:	7afb      	ldrb	r3, [r7, #11]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d009      	beq.n	801298a <_ZN3USB4TaskEv+0x30a>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 8012976:	7afb      	ldrb	r3, [r7, #11]
 8012978:	2bd2      	cmp	r3, #210	; 0xd2
 801297a:	d018      	beq.n	80129ae <_ZN3USB4TaskEv+0x32e>
                                        usb_error = rcode;
 801297c:	4a10      	ldr	r2, [pc, #64]	; (80129c0 <_ZN3USB4TaskEv+0x340>)
 801297e:	7afb      	ldrb	r3, [r7, #11]
 8012980:	7013      	strb	r3, [r2, #0]
                                        usb_task_state = USB_STATE_ERROR;
 8012982:	4b0d      	ldr	r3, [pc, #52]	; (80129b8 <_ZN3USB4TaskEv+0x338>)
 8012984:	22a0      	movs	r2, #160	; 0xa0
 8012986:	701a      	strb	r2, [r3, #0]
                        break;
 8012988:	e011      	b.n	80129ae <_ZN3USB4TaskEv+0x32e>
                                usb_task_state = USB_STATE_RUNNING;
 801298a:	4b0b      	ldr	r3, [pc, #44]	; (80129b8 <_ZN3USB4TaskEv+0x338>)
 801298c:	2290      	movs	r2, #144	; 0x90
 801298e:	701a      	strb	r2, [r3, #0]
                        break;
 8012990:	e00d      	b.n	80129ae <_ZN3USB4TaskEv+0x32e>
                        break;
 8012992:	bf00      	nop
 8012994:	e00c      	b.n	80129b0 <_ZN3USB4TaskEv+0x330>
                        break;
 8012996:	bf00      	nop
 8012998:	e00a      	b.n	80129b0 <_ZN3USB4TaskEv+0x330>
                        break;
 801299a:	bf00      	nop
 801299c:	e008      	b.n	80129b0 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 801299e:	bf00      	nop
 80129a0:	e006      	b.n	80129b0 <_ZN3USB4TaskEv+0x330>
                        break;
 80129a2:	bf00      	nop
 80129a4:	e004      	b.n	80129b0 <_ZN3USB4TaskEv+0x330>
                        break;
 80129a6:	bf00      	nop
 80129a8:	e002      	b.n	80129b0 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 80129aa:	bf00      	nop
 80129ac:	e000      	b.n	80129b0 <_ZN3USB4TaskEv+0x330>
                        break;
 80129ae:	bf00      	nop
}
 80129b0:	bf00      	nop
 80129b2:	3710      	adds	r7, #16
 80129b4:	46bd      	mov	sp, r7
 80129b6:	bd80      	pop	{r7, pc}
 80129b8:	200053e9 	.word	0x200053e9
 80129bc:	200053ec 	.word	0x200053ec
 80129c0:	200053e8 	.word	0x200053e8

080129c4 <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b086      	sub	sp, #24
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
 80129cc:	4608      	mov	r0, r1
 80129ce:	4611      	mov	r1, r2
 80129d0:	461a      	mov	r2, r3
 80129d2:	4603      	mov	r3, r0
 80129d4:	70fb      	strb	r3, [r7, #3]
 80129d6:	460b      	mov	r3, r1
 80129d8:	70bb      	strb	r3, [r7, #2]
 80129da:	4613      	mov	r3, r2
 80129dc:	707b      	strb	r3, [r7, #1]
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 80129de:	2300      	movs	r3, #0
 80129e0:	617b      	str	r3, [r7, #20]
 80129e2:	2300      	movs	r3, #0
 80129e4:	613b      	str	r3, [r7, #16]

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	2100      	movs	r1, #0
 80129ea:	4618      	mov	r0, r3
 80129ec:	f000 fbc0 	bl	8013170 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 80129f0:	6178      	str	r0, [r7, #20]

        if(!p0)
 80129f2:	697b      	ldr	r3, [r7, #20]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d101      	bne.n	80129fc <_ZN3USB17DefaultAddressingEhhb+0x38>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 80129f8:	23d6      	movs	r3, #214	; 0xd6
 80129fa:	e03a      	b.n	8012a72 <_ZN3USB17DefaultAddressingEhhb+0xae>

        if(!p0->epinfo)
 80129fc:	697b      	ldr	r3, [r7, #20]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d101      	bne.n	8012a08 <_ZN3USB17DefaultAddressingEhhb+0x44>
                return USB_ERROR_EPINFO_IS_NULL;
 8012a04:	23d7      	movs	r3, #215	; 0xd7
 8012a06:	e034      	b.n	8012a72 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p0->lowspeed = (lowspeed) ? true : false;
 8012a08:	697b      	ldr	r3, [r7, #20]
 8012a0a:	787a      	ldrb	r2, [r7, #1]
 8012a0c:	719a      	strb	r2, [r3, #6]

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 8012a0e:	6878      	ldr	r0, [r7, #4]
 8012a10:	78bb      	ldrb	r3, [r7, #2]
 8012a12:	78f9      	ldrb	r1, [r7, #3]
 8012a14:	2200      	movs	r2, #0
 8012a16:	f000 fc5f 	bl	80132d8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	73fb      	strb	r3, [r7, #15]

        if(!bAddress)
 8012a1e:	7bfb      	ldrb	r3, [r7, #15]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d101      	bne.n	8012a28 <_ZN3USB17DefaultAddressingEhhb+0x64>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 8012a24:	23d4      	movs	r3, #212	; 0xd4
 8012a26:	e024      	b.n	8012a72 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p = addrPool.GetUsbDevicePtr(bAddress);
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	7bfa      	ldrb	r2, [r7, #15]
 8012a2c:	4611      	mov	r1, r2
 8012a2e:	4618      	mov	r0, r3
 8012a30:	f000 fb9e 	bl	8013170 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8012a34:	6138      	str	r0, [r7, #16]

        if(!p)
 8012a36:	693b      	ldr	r3, [r7, #16]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d101      	bne.n	8012a40 <_ZN3USB17DefaultAddressingEhhb+0x7c>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8012a3c:	23d6      	movs	r3, #214	; 0xd6
 8012a3e:	e018      	b.n	8012a72 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p->lowspeed = lowspeed;
 8012a40:	693b      	ldr	r3, [r7, #16]
 8012a42:	787a      	ldrb	r2, [r7, #1]
 8012a44:	719a      	strb	r2, [r3, #6]

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 8012a46:	7bfb      	ldrb	r3, [r7, #15]
 8012a48:	2200      	movs	r2, #0
 8012a4a:	2100      	movs	r1, #0
 8012a4c:	6878      	ldr	r0, [r7, #4]
 8012a4e:	f000 fae3 	bl	8013018 <_ZN3USB7setAddrEhhh>
 8012a52:	4603      	mov	r3, r0
 8012a54:	73bb      	strb	r3, [r7, #14]

        if(rcode) {
 8012a56:	7bbb      	ldrb	r3, [r7, #14]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d009      	beq.n	8012a70 <_ZN3USB17DefaultAddressingEhhb+0xac>
                addrPool.FreeAddress(bAddress);
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	7bfa      	ldrb	r2, [r7, #15]
 8012a60:	4611      	mov	r1, r2
 8012a62:	4618      	mov	r0, r3
 8012a64:	f000 fcd0 	bl	8013408 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 8012a68:	2300      	movs	r3, #0
 8012a6a:	73fb      	strb	r3, [r7, #15]
                return rcode;
 8012a6c:	7bbb      	ldrb	r3, [r7, #14]
 8012a6e:	e000      	b.n	8012a72 <_ZN3USB17DefaultAddressingEhhb+0xae>
        }
        return 0;
 8012a70:	2300      	movs	r3, #0
};
 8012a72:	4618      	mov	r0, r3
 8012a74:	3718      	adds	r7, #24
 8012a76:	46bd      	mov	sp, r7
 8012a78:	bd80      	pop	{r7, pc}

08012a7a <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 8012a7a:	b590      	push	{r4, r7, lr}
 8012a7c:	b085      	sub	sp, #20
 8012a7e:	af00      	add	r7, sp, #0
 8012a80:	6078      	str	r0, [r7, #4]
 8012a82:	4608      	mov	r0, r1
 8012a84:	4611      	mov	r1, r2
 8012a86:	461a      	mov	r2, r3
 8012a88:	4603      	mov	r3, r0
 8012a8a:	70fb      	strb	r3, [r7, #3]
 8012a8c:	460b      	mov	r3, r1
 8012a8e:	70bb      	strb	r3, [r7, #2]
 8012a90:	4613      	mov	r3, r2
 8012a92:	707b      	strb	r3, [r7, #1]
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 8012a94:	2300      	movs	r3, #0
 8012a96:	73fb      	strb	r3, [r7, #15]

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 8012a98:	78fa      	ldrb	r2, [r7, #3]
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	321e      	adds	r2, #30
 8012a9e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012aa2:	78fa      	ldrb	r2, [r7, #3]
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	321e      	adds	r2, #30
 8012aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	3304      	adds	r3, #4
 8012ab0:	681c      	ldr	r4, [r3, #0]
 8012ab2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012ab6:	787a      	ldrb	r2, [r7, #1]
 8012ab8:	78b9      	ldrb	r1, [r7, #2]
 8012aba:	47a0      	blx	r4
 8012abc:	4603      	mov	r3, r0
 8012abe:	73bb      	strb	r3, [r7, #14]
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 8012ac0:	7bbb      	ldrb	r3, [r7, #14]
 8012ac2:	2be0      	cmp	r3, #224	; 0xe0
 8012ac4:	d11c      	bne.n	8012b00 <_ZN3USB13AttemptConfigEhhhb+0x86>
                if(parent == 0) {
 8012ac6:	78bb      	ldrb	r3, [r7, #2]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d108      	bne.n	8012ade <_ZN3USB13AttemptConfigEhhhb+0x64>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8012acc:	2201      	movs	r2, #1
 8012ace:	21e8      	movs	r1, #232	; 0xe8
 8012ad0:	6878      	ldr	r0, [r7, #4]
 8012ad2:	f7ef f9a7 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 8012ad6:	2066      	movs	r0, #102	; 0x66
 8012ad8:	f7ef fec0 	bl	800285c <HAL_Delay>
 8012adc:	e022      	b.n	8012b24 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 8012ade:	78ba      	ldrb	r2, [r7, #2]
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	321e      	adds	r2, #30
 8012ae4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012ae8:	78ba      	ldrb	r2, [r7, #2]
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	321e      	adds	r2, #30
 8012aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	3314      	adds	r3, #20
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	787a      	ldrb	r2, [r7, #1]
 8012afa:	4611      	mov	r1, r2
 8012afc:	4798      	blx	r3
 8012afe:	e011      	b.n	8012b24 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 8012b00:	7bbb      	ldrb	r3, [r7, #14]
 8012b02:	2b0d      	cmp	r3, #13
 8012b04:	d109      	bne.n	8012b1a <_ZN3USB13AttemptConfigEhhhb+0xa0>
 8012b06:	7bfb      	ldrb	r3, [r7, #15]
 8012b08:	2b02      	cmp	r3, #2
 8012b0a:	d806      	bhi.n	8012b1a <_ZN3USB13AttemptConfigEhhhb+0xa0>
                delay(100);
 8012b0c:	2064      	movs	r0, #100	; 0x64
 8012b0e:	f7ef fea5 	bl	800285c <HAL_Delay>
                retries++;
 8012b12:	7bfb      	ldrb	r3, [r7, #15]
 8012b14:	3301      	adds	r3, #1
 8012b16:	73fb      	strb	r3, [r7, #15]
                goto again;
 8012b18:	e7be      	b.n	8012a98 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        } else if(rcode)
 8012b1a:	7bbb      	ldrb	r3, [r7, #14]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d001      	beq.n	8012b24 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                return rcode;
 8012b20:	7bbb      	ldrb	r3, [r7, #14]
 8012b22:	e03f      	b.n	8012ba4 <_ZN3USB13AttemptConfigEhhhb+0x12a>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 8012b24:	78fa      	ldrb	r2, [r7, #3]
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	321e      	adds	r2, #30
 8012b2a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012b2e:	78fa      	ldrb	r2, [r7, #3]
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	321e      	adds	r2, #30
 8012b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	681c      	ldr	r4, [r3, #0]
 8012b3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012b40:	787a      	ldrb	r2, [r7, #1]
 8012b42:	78b9      	ldrb	r1, [r7, #2]
 8012b44:	47a0      	blx	r4
 8012b46:	4603      	mov	r3, r0
 8012b48:	73bb      	strb	r3, [r7, #14]
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 8012b4a:	7bbb      	ldrb	r3, [r7, #14]
 8012b4c:	2b0d      	cmp	r3, #13
 8012b4e:	d109      	bne.n	8012b64 <_ZN3USB13AttemptConfigEhhhb+0xea>
 8012b50:	7bfb      	ldrb	r3, [r7, #15]
 8012b52:	2b02      	cmp	r3, #2
 8012b54:	d806      	bhi.n	8012b64 <_ZN3USB13AttemptConfigEhhhb+0xea>
                delay(100);
 8012b56:	2064      	movs	r0, #100	; 0x64
 8012b58:	f7ef fe80 	bl	800285c <HAL_Delay>
                retries++;
 8012b5c:	7bfb      	ldrb	r3, [r7, #15]
 8012b5e:	3301      	adds	r3, #1
 8012b60:	73fb      	strb	r3, [r7, #15]
                goto again;
 8012b62:	e799      	b.n	8012a98 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        }
        if(rcode) {
 8012b64:	7bbb      	ldrb	r3, [r7, #14]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d01b      	beq.n	8012ba2 <_ZN3USB13AttemptConfigEhhhb+0x128>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 8012b6a:	78bb      	ldrb	r3, [r7, #2]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d108      	bne.n	8012b82 <_ZN3USB13AttemptConfigEhhhb+0x108>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8012b70:	2201      	movs	r2, #1
 8012b72:	21e8      	movs	r1, #232	; 0xe8
 8012b74:	6878      	ldr	r0, [r7, #4]
 8012b76:	f7ef f955 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 8012b7a:	2066      	movs	r0, #102	; 0x66
 8012b7c:	f7ef fe6e 	bl	800285c <HAL_Delay>
 8012b80:	e00f      	b.n	8012ba2 <_ZN3USB13AttemptConfigEhhhb+0x128>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 8012b82:	78ba      	ldrb	r2, [r7, #2]
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	321e      	adds	r2, #30
 8012b88:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012b8c:	78ba      	ldrb	r2, [r7, #2]
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	321e      	adds	r2, #30
 8012b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	3314      	adds	r3, #20
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	787a      	ldrb	r2, [r7, #1]
 8012b9e:	4611      	mov	r1, r2
 8012ba0:	4798      	blx	r3
                }
        }
        return rcode;
 8012ba2:	7bbb      	ldrb	r3, [r7, #14]
}
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	3714      	adds	r7, #20
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	bd90      	pop	{r4, r7, pc}

08012bac <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b090      	sub	sp, #64	; 0x40
 8012bb0:	af02      	add	r7, sp, #8
 8012bb2:	6078      	str	r0, [r7, #4]
 8012bb4:	4608      	mov	r0, r1
 8012bb6:	4611      	mov	r1, r2
 8012bb8:	461a      	mov	r2, r3
 8012bba:	4603      	mov	r3, r0
 8012bbc:	70fb      	strb	r3, [r7, #3]
 8012bbe:	460b      	mov	r3, r1
 8012bc0:	70bb      	strb	r3, [r7, #2]
 8012bc2:	4613      	mov	r3, r2
 8012bc4:	707b      	strb	r3, [r7, #1]
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 8012bcc:	f107 030c 	add.w	r3, r7, #12
 8012bd0:	633b      	str	r3, [r7, #48]	; 0x30
        UsbDevice *p = NULL;
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        EpInfo *oldep_ptr = NULL;
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	62bb      	str	r3, [r7, #40]	; 0x28
        EpInfo epInfo;

        epInfo.epAddr = 0;
 8012bda:	2300      	movs	r3, #0
 8012bdc:	723b      	strb	r3, [r7, #8]
        epInfo.maxPktSize = 8;
 8012bde:	2308      	movs	r3, #8
 8012be0:	727b      	strb	r3, [r7, #9]
        epInfo.bmSndToggle = 0;
 8012be2:	7abb      	ldrb	r3, [r7, #10]
 8012be4:	f36f 0300 	bfc	r3, #0, #1
 8012be8:	72bb      	strb	r3, [r7, #10]
        epInfo.bmRcvToggle = 0;
 8012bea:	7abb      	ldrb	r3, [r7, #10]
 8012bec:	f36f 0341 	bfc	r3, #1, #1
 8012bf0:	72bb      	strb	r3, [r7, #10]
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 8012bf2:	7abb      	ldrb	r3, [r7, #10]
 8012bf4:	220f      	movs	r2, #15
 8012bf6:	f362 0387 	bfi	r3, r2, #2, #6
 8012bfa:	72bb      	strb	r3, [r7, #10]

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 8012bfc:	6878      	ldr	r0, [r7, #4]
 8012bfe:	f7fa fd13 	bl	800d628 <_ZN3USB14GetAddressPoolEv>
 8012c02:	6278      	str	r0, [r7, #36]	; 0x24
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 8012c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	2100      	movs	r1, #0
 8012c0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c0e:	4798      	blx	r3
 8012c10:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(!p) {
 8012c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d101      	bne.n	8012c1c <_ZN3USB11ConfiguringEhhb+0x70>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8012c18:	23d6      	movs	r3, #214	; 0xd6
 8012c1a:	e15c      	b.n	8012ed6 <_ZN3USB11ConfiguringEhhb+0x32a>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 8012c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	62bb      	str	r3, [r7, #40]	; 0x28

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 8012c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c24:	f107 0208 	add.w	r2, r7, #8
 8012c28:	601a      	str	r2, [r3, #0]

        p->lowspeed = lowspeed;
 8012c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c2c:	787a      	ldrb	r2, [r7, #1]
 8012c2e:	719a      	strb	r2, [r3, #6]
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 8012c30:	f107 030c 	add.w	r3, r7, #12
 8012c34:	9300      	str	r3, [sp, #0]
 8012c36:	2312      	movs	r3, #18
 8012c38:	2200      	movs	r2, #0
 8012c3a:	2100      	movs	r1, #0
 8012c3c:	6878      	ldr	r0, [r7, #4]
 8012c3e:	f000 f94e 	bl	8012ede <_ZN3USB11getDevDescrEhhtPh>
 8012c42:	4603      	mov	r3, r0
 8012c44:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 8012c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c4c:	601a      	str	r2, [r3, #0]

        if(rcode) {
 8012c4e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d002      	beq.n	8012c5c <_ZN3USB11ConfiguringEhhb+0xb0>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 8012c56:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012c5a:	e13c      	b.n	8012ed6 <_ZN3USB11ConfiguringEhhb+0x32a>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 8012c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c5e:	7a1a      	ldrb	r2, [r3, #8]
 8012c60:	7a5b      	ldrb	r3, [r3, #9]
 8012c62:	021b      	lsls	r3, r3, #8
 8012c64:	4313      	orrs	r3, r2
 8012c66:	847b      	strh	r3, [r7, #34]	; 0x22
        uint16_t pid = udd->idProduct;
 8012c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c6a:	7a9a      	ldrb	r2, [r3, #10]
 8012c6c:	7adb      	ldrb	r3, [r3, #11]
 8012c6e:	021b      	lsls	r3, r3, #8
 8012c70:	4313      	orrs	r3, r2
 8012c72:	843b      	strh	r3, [r7, #32]
        uint8_t klass = udd->bDeviceClass;
 8012c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c76:	791b      	ldrb	r3, [r3, #4]
 8012c78:	77fb      	strb	r3, [r7, #31]
        uint8_t subklass = udd->bDeviceSubClass;
 8012c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c7c:	795b      	ldrb	r3, [r3, #5]
 8012c7e:	77bb      	strb	r3, [r7, #30]
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8012c80:	2300      	movs	r3, #0
 8012c82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012c86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012c8a:	2b0f      	cmp	r3, #15
 8012c8c:	f200 8081 	bhi.w	8012d92 <_ZN3USB11ConfiguringEhhb+0x1e6>
                if(!devConfig[devConfigIndex]) continue; // no driver
 8012c90:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	321e      	adds	r2, #30
 8012c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d06e      	beq.n	8012d7e <_ZN3USB11ConfiguringEhhb+0x1d2>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8012ca0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	321e      	adds	r2, #30
 8012ca8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012cac:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	321e      	adds	r2, #30
 8012cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	3310      	adds	r3, #16
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	4608      	mov	r0, r1
 8012cc0:	4798      	blx	r3
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	bf14      	ite	ne
 8012cc8:	2301      	movne	r3, #1
 8012cca:	2300      	moveq	r3, #0
 8012ccc:	b2db      	uxtb	r3, r3
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d157      	bne.n	8012d82 <_ZN3USB11ConfiguringEhhb+0x1d6>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 8012cd2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	321e      	adds	r2, #30
 8012cda:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012cde:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	321e      	adds	r2, #30
 8012ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	3320      	adds	r3, #32
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	7fba      	ldrb	r2, [r7, #30]
 8012cf2:	4611      	mov	r1, r2
 8012cf4:	4798      	blx	r3
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d02b      	beq.n	8012d54 <_ZN3USB11ConfiguringEhhb+0x1a8>
 8012cfc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	321e      	adds	r2, #30
 8012d04:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012d08:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	321e      	adds	r2, #30
 8012d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	3318      	adds	r3, #24
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	8c3a      	ldrh	r2, [r7, #32]
 8012d1c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8012d1e:	4798      	blx	r3
 8012d20:	4603      	mov	r3, r0
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d114      	bne.n	8012d50 <_ZN3USB11ConfiguringEhhb+0x1a4>
 8012d26:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	321e      	adds	r2, #30
 8012d2e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012d32:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	321e      	adds	r2, #30
 8012d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	331c      	adds	r3, #28
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	7ffa      	ldrb	r2, [r7, #31]
 8012d46:	4611      	mov	r1, r2
 8012d48:	4798      	blx	r3
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d001      	beq.n	8012d54 <_ZN3USB11ConfiguringEhhb+0x1a8>
 8012d50:	2301      	movs	r3, #1
 8012d52:	e000      	b.n	8012d56 <_ZN3USB11ConfiguringEhhb+0x1aa>
 8012d54:	2300      	movs	r3, #0
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d014      	beq.n	8012d84 <_ZN3USB11ConfiguringEhhb+0x1d8>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8012d5a:	78b8      	ldrb	r0, [r7, #2]
 8012d5c:	78fa      	ldrb	r2, [r7, #3]
 8012d5e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8012d62:	787b      	ldrb	r3, [r7, #1]
 8012d64:	9300      	str	r3, [sp, #0]
 8012d66:	4603      	mov	r3, r0
 8012d68:	6878      	ldr	r0, [r7, #4]
 8012d6a:	f7ff fe86 	bl	8012a7a <_ZN3USB13AttemptConfigEhhhb>
 8012d6e:	4603      	mov	r3, r0
 8012d70:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 8012d74:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012d78:	2bd1      	cmp	r3, #209	; 0xd1
 8012d7a:	d109      	bne.n	8012d90 <_ZN3USB11ConfiguringEhhb+0x1e4>
 8012d7c:	e002      	b.n	8012d84 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(!devConfig[devConfigIndex]) continue; // no driver
 8012d7e:	bf00      	nop
 8012d80:	e000      	b.n	8012d84 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8012d82:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8012d84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d88:	3301      	adds	r3, #1
 8012d8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012d8e:	e77a      	b.n	8012c86 <_ZN3USB11ConfiguringEhhb+0xda>
                                break;
 8012d90:	bf00      	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 8012d92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d96:	2b0f      	cmp	r3, #15
 8012d98:	d802      	bhi.n	8012da0 <_ZN3USB11ConfiguringEhhb+0x1f4>
                return rcode;
 8012d9a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012d9e:	e09a      	b.n	8012ed6 <_ZN3USB11ConfiguringEhhb+0x32a>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8012da0:	2300      	movs	r3, #0
 8012da2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012da6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012daa:	2b0f      	cmp	r3, #15
 8012dac:	f200 8088 	bhi.w	8012ec0 <_ZN3USB11ConfiguringEhhb+0x314>
                if(!devConfig[devConfigIndex]) continue;
 8012db0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	321e      	adds	r2, #30
 8012db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d074      	beq.n	8012eaa <_ZN3USB11ConfiguringEhhb+0x2fe>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8012dc0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	321e      	adds	r2, #30
 8012dc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012dcc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	321e      	adds	r2, #30
 8012dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	3310      	adds	r3, #16
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	4608      	mov	r0, r1
 8012de0:	4798      	blx	r3
 8012de2:	4603      	mov	r3, r0
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	bf14      	ite	ne
 8012de8:	2301      	movne	r3, #1
 8012dea:	2300      	moveq	r3, #0
 8012dec:	b2db      	uxtb	r3, r3
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d15d      	bne.n	8012eae <_ZN3USB11ConfiguringEhhb+0x302>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8012df2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	321e      	adds	r2, #30
 8012dfa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012dfe:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	321e      	adds	r2, #30
 8012e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	3320      	adds	r3, #32
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	7fba      	ldrb	r2, [r7, #30]
 8012e12:	4611      	mov	r1, r2
 8012e14:	4798      	blx	r3
 8012e16:	4603      	mov	r3, r0
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d02b      	beq.n	8012e74 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8012e1c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	321e      	adds	r2, #30
 8012e24:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012e28:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	321e      	adds	r2, #30
 8012e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	3318      	adds	r3, #24
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	8c3a      	ldrh	r2, [r7, #32]
 8012e3c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8012e3e:	4798      	blx	r3
 8012e40:	4603      	mov	r3, r0
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d114      	bne.n	8012e70 <_ZN3USB11ConfiguringEhhb+0x2c4>
 8012e46:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	321e      	adds	r2, #30
 8012e4e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012e52:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	321e      	adds	r2, #30
 8012e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	331c      	adds	r3, #28
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	7ffa      	ldrb	r2, [r7, #31]
 8012e66:	4611      	mov	r1, r2
 8012e68:	4798      	blx	r3
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d001      	beq.n	8012e74 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8012e70:	2301      	movs	r3, #1
 8012e72:	e000      	b.n	8012e76 <_ZN3USB11ConfiguringEhhb+0x2ca>
 8012e74:	2300      	movs	r3, #0
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d11b      	bne.n	8012eb2 <_ZN3USB11ConfiguringEhhb+0x306>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8012e7a:	78b8      	ldrb	r0, [r7, #2]
 8012e7c:	78fa      	ldrb	r2, [r7, #3]
 8012e7e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8012e82:	787b      	ldrb	r3, [r7, #1]
 8012e84:	9300      	str	r3, [sp, #0]
 8012e86:	4603      	mov	r3, r0
 8012e88:	6878      	ldr	r0, [r7, #4]
 8012e8a:	f7ff fdf6 	bl	8012a7a <_ZN3USB13AttemptConfigEhhhb>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 8012e94:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012e98:	2bd1      	cmp	r3, #209	; 0xd1
 8012e9a:	d00b      	beq.n	8012eb4 <_ZN3USB11ConfiguringEhhb+0x308>
 8012e9c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012ea0:	2bd9      	cmp	r3, #217	; 0xd9
 8012ea2:	d007      	beq.n	8012eb4 <_ZN3USB11ConfiguringEhhb+0x308>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 8012ea4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012ea8:	e015      	b.n	8012ed6 <_ZN3USB11ConfiguringEhhb+0x32a>
                if(!devConfig[devConfigIndex]) continue;
 8012eaa:	bf00      	nop
 8012eac:	e002      	b.n	8012eb4 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8012eae:	bf00      	nop
 8012eb0:	e000      	b.n	8012eb4 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8012eb2:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8012eb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012eb8:	3301      	adds	r3, #1
 8012eba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012ebe:	e772      	b.n	8012da6 <_ZN3USB11ConfiguringEhhb+0x1fa>
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 8012ec0:	787b      	ldrb	r3, [r7, #1]
 8012ec2:	78ba      	ldrb	r2, [r7, #2]
 8012ec4:	78f9      	ldrb	r1, [r7, #3]
 8012ec6:	6878      	ldr	r0, [r7, #4]
 8012ec8:	f7ff fd7c 	bl	80129c4 <_ZN3USB17DefaultAddressingEhhb>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        return rcode;
 8012ed2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	3738      	adds	r7, #56	; 0x38
 8012eda:	46bd      	mov	sp, r7
 8012edc:	bd80      	pop	{r7, pc}

08012ede <_ZN3USB11getDevDescrEhhtPh>:
}

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 8012ede:	b580      	push	{r7, lr}
 8012ee0:	b08a      	sub	sp, #40	; 0x28
 8012ee2:	af08      	add	r7, sp, #32
 8012ee4:	6078      	str	r0, [r7, #4]
 8012ee6:	4608      	mov	r0, r1
 8012ee8:	4611      	mov	r1, r2
 8012eea:	461a      	mov	r2, r3
 8012eec:	4603      	mov	r3, r0
 8012eee:	70fb      	strb	r3, [r7, #3]
 8012ef0:	460b      	mov	r3, r1
 8012ef2:	70bb      	strb	r3, [r7, #2]
 8012ef4:	4613      	mov	r3, r2
 8012ef6:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 8012ef8:	78ba      	ldrb	r2, [r7, #2]
 8012efa:	78f9      	ldrb	r1, [r7, #3]
 8012efc:	2300      	movs	r3, #0
 8012efe:	9307      	str	r3, [sp, #28]
 8012f00:	693b      	ldr	r3, [r7, #16]
 8012f02:	9306      	str	r3, [sp, #24]
 8012f04:	883b      	ldrh	r3, [r7, #0]
 8012f06:	9305      	str	r3, [sp, #20]
 8012f08:	883b      	ldrh	r3, [r7, #0]
 8012f0a:	9304      	str	r3, [sp, #16]
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	9303      	str	r3, [sp, #12]
 8012f10:	2301      	movs	r3, #1
 8012f12:	9302      	str	r3, [sp, #8]
 8012f14:	2300      	movs	r3, #0
 8012f16:	9301      	str	r3, [sp, #4]
 8012f18:	2306      	movs	r3, #6
 8012f1a:	9300      	str	r3, [sp, #0]
 8012f1c:	2380      	movs	r3, #128	; 0x80
 8012f1e:	6878      	ldr	r0, [r7, #4]
 8012f20:	f7fe fffd 	bl	8011f1e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8012f24:	4603      	mov	r3, r0
}
 8012f26:	4618      	mov	r0, r3
 8012f28:	3708      	adds	r7, #8
 8012f2a:	46bd      	mov	sp, r7
 8012f2c:	bd80      	pop	{r7, pc}

08012f2e <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 8012f2e:	b580      	push	{r7, lr}
 8012f30:	b08a      	sub	sp, #40	; 0x28
 8012f32:	af08      	add	r7, sp, #32
 8012f34:	6078      	str	r0, [r7, #4]
 8012f36:	4608      	mov	r0, r1
 8012f38:	4611      	mov	r1, r2
 8012f3a:	461a      	mov	r2, r3
 8012f3c:	4603      	mov	r3, r0
 8012f3e:	70fb      	strb	r3, [r7, #3]
 8012f40:	460b      	mov	r3, r1
 8012f42:	70bb      	strb	r3, [r7, #2]
 8012f44:	4613      	mov	r3, r2
 8012f46:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 8012f48:	78ba      	ldrb	r2, [r7, #2]
 8012f4a:	78f9      	ldrb	r1, [r7, #3]
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	9307      	str	r3, [sp, #28]
 8012f50:	697b      	ldr	r3, [r7, #20]
 8012f52:	9306      	str	r3, [sp, #24]
 8012f54:	883b      	ldrh	r3, [r7, #0]
 8012f56:	9305      	str	r3, [sp, #20]
 8012f58:	883b      	ldrh	r3, [r7, #0]
 8012f5a:	9304      	str	r3, [sp, #16]
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	9303      	str	r3, [sp, #12]
 8012f60:	2302      	movs	r3, #2
 8012f62:	9302      	str	r3, [sp, #8]
 8012f64:	7c3b      	ldrb	r3, [r7, #16]
 8012f66:	9301      	str	r3, [sp, #4]
 8012f68:	2306      	movs	r3, #6
 8012f6a:	9300      	str	r3, [sp, #0]
 8012f6c:	2380      	movs	r3, #128	; 0x80
 8012f6e:	6878      	ldr	r0, [r7, #4]
 8012f70:	f7fe ffd5 	bl	8011f1e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8012f74:	4603      	mov	r3, r0
}
 8012f76:	4618      	mov	r0, r3
 8012f78:	3708      	adds	r7, #8
 8012f7a:	46bd      	mov	sp, r7
 8012f7c:	bd80      	pop	{r7, pc}

08012f7e <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 8012f7e:	b580      	push	{r7, lr}
 8012f80:	b09e      	sub	sp, #120	; 0x78
 8012f82:	af08      	add	r7, sp, #32
 8012f84:	6078      	str	r0, [r7, #4]
 8012f86:	4608      	mov	r0, r1
 8012f88:	4611      	mov	r1, r2
 8012f8a:	461a      	mov	r2, r3
 8012f8c:	4603      	mov	r3, r0
 8012f8e:	70fb      	strb	r3, [r7, #3]
 8012f90:	460b      	mov	r3, r1
 8012f92:	70bb      	strb	r3, [r7, #2]
 8012f94:	4613      	mov	r3, r2
 8012f96:	707b      	strb	r3, [r7, #1]
        const uint8_t bufSize = 64;
 8012f98:	2340      	movs	r3, #64	; 0x40
 8012f9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 8012f9e:	f107 030c 	add.w	r3, r7, #12
 8012fa2:	653b      	str	r3, [r7, #80]	; 0x50

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 8012fa4:	78ba      	ldrb	r2, [r7, #2]
 8012fa6:	78f9      	ldrb	r1, [r7, #3]
 8012fa8:	f107 030c 	add.w	r3, r7, #12
 8012fac:	9301      	str	r3, [sp, #4]
 8012fae:	787b      	ldrb	r3, [r7, #1]
 8012fb0:	9300      	str	r3, [sp, #0]
 8012fb2:	2309      	movs	r3, #9
 8012fb4:	6878      	ldr	r0, [r7, #4]
 8012fb6:	f7ff ffba 	bl	8012f2e <_ZN3USB12getConfDescrEhhthPh>
 8012fba:	4603      	mov	r3, r0
 8012fbc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if(ret)
 8012fc0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d002      	beq.n	8012fce <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x50>
                return ret;
 8012fc8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8012fcc:	e020      	b.n	8013010 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x92>

        uint16_t total = ucd->wTotalLength;
 8012fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fd0:	789a      	ldrb	r2, [r3, #2]
 8012fd2:	78db      	ldrb	r3, [r3, #3]
 8012fd4:	021b      	lsls	r3, r3, #8
 8012fd6:	4313      	orrs	r3, r2
 8012fd8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 8012fdc:	78ba      	ldrb	r2, [r7, #2]
 8012fde:	78f9      	ldrb	r1, [r7, #3]
 8012fe0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012fe2:	9307      	str	r3, [sp, #28]
 8012fe4:	f107 030c 	add.w	r3, r7, #12
 8012fe8:	9306      	str	r3, [sp, #24]
 8012fea:	2340      	movs	r3, #64	; 0x40
 8012fec:	9305      	str	r3, [sp, #20]
 8012fee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8012ff2:	9304      	str	r3, [sp, #16]
 8012ff4:	2300      	movs	r3, #0
 8012ff6:	9303      	str	r3, [sp, #12]
 8012ff8:	2302      	movs	r3, #2
 8012ffa:	9302      	str	r3, [sp, #8]
 8012ffc:	787b      	ldrb	r3, [r7, #1]
 8012ffe:	9301      	str	r3, [sp, #4]
 8013000:	2306      	movs	r3, #6
 8013002:	9300      	str	r3, [sp, #0]
 8013004:	2380      	movs	r3, #128	; 0x80
 8013006:	6878      	ldr	r0, [r7, #4]
 8013008:	f7fe ff89 	bl	8011f1e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 801300c:	4603      	mov	r3, r0
 801300e:	bf00      	nop
}
 8013010:	4618      	mov	r0, r3
 8013012:	3758      	adds	r7, #88	; 0x58
 8013014:	46bd      	mov	sp, r7
 8013016:	bd80      	pop	{r7, pc}

08013018 <_ZN3USB7setAddrEhhh>:
uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
}
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 8013018:	b580      	push	{r7, lr}
 801301a:	b08c      	sub	sp, #48	; 0x30
 801301c:	af08      	add	r7, sp, #32
 801301e:	6078      	str	r0, [r7, #4]
 8013020:	4608      	mov	r0, r1
 8013022:	4611      	mov	r1, r2
 8013024:	461a      	mov	r2, r3
 8013026:	4603      	mov	r3, r0
 8013028:	70fb      	strb	r3, [r7, #3]
 801302a:	460b      	mov	r3, r1
 801302c:	70bb      	strb	r3, [r7, #2]
 801302e:	4613      	mov	r3, r2
 8013030:	707b      	strb	r3, [r7, #1]
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 8013032:	78ba      	ldrb	r2, [r7, #2]
 8013034:	78f9      	ldrb	r1, [r7, #3]
 8013036:	2300      	movs	r3, #0
 8013038:	9307      	str	r3, [sp, #28]
 801303a:	2300      	movs	r3, #0
 801303c:	9306      	str	r3, [sp, #24]
 801303e:	2300      	movs	r3, #0
 8013040:	9305      	str	r3, [sp, #20]
 8013042:	2300      	movs	r3, #0
 8013044:	9304      	str	r3, [sp, #16]
 8013046:	2300      	movs	r3, #0
 8013048:	9303      	str	r3, [sp, #12]
 801304a:	2300      	movs	r3, #0
 801304c:	9302      	str	r3, [sp, #8]
 801304e:	787b      	ldrb	r3, [r7, #1]
 8013050:	9301      	str	r3, [sp, #4]
 8013052:	2305      	movs	r3, #5
 8013054:	9300      	str	r3, [sp, #0]
 8013056:	2300      	movs	r3, #0
 8013058:	6878      	ldr	r0, [r7, #4]
 801305a:	f7fe ff60 	bl	8011f1e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 801305e:	4603      	mov	r3, r0
 8013060:	73fb      	strb	r3, [r7, #15]
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 8013062:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8013066:	f7ef fbf9 	bl	800285c <HAL_Delay>
        return rcode;
 801306a:	7bfb      	ldrb	r3, [r7, #15]
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 801306c:	4618      	mov	r0, r3
 801306e:	3710      	adds	r7, #16
 8013070:	46bd      	mov	sp, r7
 8013072:	bd80      	pop	{r7, pc}

08013074 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 8013074:	b580      	push	{r7, lr}
 8013076:	b08a      	sub	sp, #40	; 0x28
 8013078:	af08      	add	r7, sp, #32
 801307a:	6078      	str	r0, [r7, #4]
 801307c:	4608      	mov	r0, r1
 801307e:	4611      	mov	r1, r2
 8013080:	461a      	mov	r2, r3
 8013082:	4603      	mov	r3, r0
 8013084:	70fb      	strb	r3, [r7, #3]
 8013086:	460b      	mov	r3, r1
 8013088:	70bb      	strb	r3, [r7, #2]
 801308a:	4613      	mov	r3, r2
 801308c:	707b      	strb	r3, [r7, #1]
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 801308e:	78ba      	ldrb	r2, [r7, #2]
 8013090:	78f9      	ldrb	r1, [r7, #3]
 8013092:	2300      	movs	r3, #0
 8013094:	9307      	str	r3, [sp, #28]
 8013096:	2300      	movs	r3, #0
 8013098:	9306      	str	r3, [sp, #24]
 801309a:	2300      	movs	r3, #0
 801309c:	9305      	str	r3, [sp, #20]
 801309e:	2300      	movs	r3, #0
 80130a0:	9304      	str	r3, [sp, #16]
 80130a2:	2300      	movs	r3, #0
 80130a4:	9303      	str	r3, [sp, #12]
 80130a6:	2300      	movs	r3, #0
 80130a8:	9302      	str	r3, [sp, #8]
 80130aa:	787b      	ldrb	r3, [r7, #1]
 80130ac:	9301      	str	r3, [sp, #4]
 80130ae:	2309      	movs	r3, #9
 80130b0:	9300      	str	r3, [sp, #0]
 80130b2:	2300      	movs	r3, #0
 80130b4:	6878      	ldr	r0, [r7, #4]
 80130b6:	f7fe ff32 	bl	8011f1e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 80130ba:	4603      	mov	r3, r0
}
 80130bc:	4618      	mov	r0, r3
 80130be:	3708      	adds	r7, #8
 80130c0:	46bd      	mov	sp, r7
 80130c2:	bd80      	pop	{r7, pc}

080130c4 <_ZN8MAX3421eI3P102P9EC1Ev>:
MAX3421e< SPI_SS, INTR >::MAX3421e() {
 80130c4:	b480      	push	{r7}
 80130c6:	b083      	sub	sp, #12
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
};
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	4618      	mov	r0, r3
 80130d0:	370c      	adds	r7, #12
 80130d2:	46bd      	mov	sp, r7
 80130d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d8:	4770      	bx	lr
	...

080130dc <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 80130dc:	b480      	push	{r7}
 80130de:	b083      	sub	sp, #12
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	6078      	str	r0, [r7, #4]
 80130e4:	4a04      	ldr	r2, [pc, #16]	; (80130f8 <_ZN11AddressPoolC1Ev+0x1c>)
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	601a      	str	r2, [r3, #0]
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	4618      	mov	r0, r3
 80130ee:	370c      	adds	r7, #12
 80130f0:	46bd      	mov	sp, r7
 80130f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f6:	4770      	bx	lr
 80130f8:	08014ab4 	.word	0x08014ab4

080130fc <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b082      	sub	sp, #8
 8013100:	af00      	add	r7, sp, #0
 8013102:	6078      	str	r0, [r7, #4]
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	4618      	mov	r0, r3
 8013108:	f7ff ffe8 	bl	80130dc <_ZN11AddressPoolC1Ev>
 801310c:	4a17      	ldr	r2, [pc, #92]	; (801316c <_ZN15AddressPoolImplILh16EEC1Ev+0x70>)
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	601a      	str	r2, [r3, #0]
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	2200      	movs	r2, #0
 8013116:	71da      	strb	r2, [r3, #7]
                // Zero address is reserved
                InitEntry(0);
 8013118:	2100      	movs	r1, #0
 801311a:	6878      	ldr	r0, [r7, #4]
 801311c:	f000 f990 	bl	8013440 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	2200      	movs	r2, #0
 8013124:	731a      	strb	r2, [r3, #12]
                thePool[0].epinfo = &dev0ep;
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	1d1a      	adds	r2, r3, #4
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	609a      	str	r2, [r3, #8]
                dev0ep.epAddr = 0;
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	2200      	movs	r2, #0
 8013132:	711a      	strb	r2, [r3, #4]
                dev0ep.maxPktSize = 8;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	2208      	movs	r2, #8
 8013138:	715a      	strb	r2, [r3, #5]
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 801313a:	687a      	ldr	r2, [r7, #4]
 801313c:	7993      	ldrb	r3, [r2, #6]
 801313e:	f36f 0300 	bfc	r3, #0, #1
 8013142:	7193      	strb	r3, [r2, #6]
                dev0ep.bmRcvToggle = 0;
 8013144:	687a      	ldr	r2, [r7, #4]
 8013146:	7993      	ldrb	r3, [r2, #6]
 8013148:	f36f 0341 	bfc	r3, #1, #1
 801314c:	7193      	strb	r3, [r2, #6]
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 801314e:	687a      	ldr	r2, [r7, #4]
 8013150:	7993      	ldrb	r3, [r2, #6]
 8013152:	210f      	movs	r1, #15
 8013154:	f361 0387 	bfi	r3, r1, #2, #6
 8013158:	7193      	strb	r3, [r2, #6]

                InitAllAddresses();
 801315a:	6878      	ldr	r0, [r7, #4]
 801315c:	f000 f9a1 	bl	80134a2 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	4618      	mov	r0, r3
 8013164:	3708      	adds	r7, #8
 8013166:	46bd      	mov	sp, r7
 8013168:	bd80      	pop	{r7, pc}
 801316a:	bf00      	nop
 801316c:	08014aa0 	.word	0x08014aa0

08013170 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 8013170:	b580      	push	{r7, lr}
 8013172:	b084      	sub	sp, #16
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
 8013178:	460b      	mov	r3, r1
 801317a:	70fb      	strb	r3, [r7, #3]
                if(!addr)
 801317c:	78fb      	ldrb	r3, [r7, #3]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d102      	bne.n	8013188 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x18>
                        return thePool;
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	3308      	adds	r3, #8
 8013186:	e014      	b.n	80131b2 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x42>

                uint8_t index = FindAddressIndex(addr);
 8013188:	78fb      	ldrb	r3, [r7, #3]
 801318a:	4619      	mov	r1, r3
 801318c:	6878      	ldr	r0, [r7, #4]
 801318e:	f000 f9a1 	bl	80134d4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8013192:	4603      	mov	r3, r0
 8013194:	73fb      	strb	r3, [r7, #15]

                return (!index) ? NULL : thePool + index;
 8013196:	7bfb      	ldrb	r3, [r7, #15]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d008      	beq.n	80131ae <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x3e>
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	f103 0108 	add.w	r1, r3, #8
 80131a2:	7bfa      	ldrb	r2, [r7, #15]
 80131a4:	4613      	mov	r3, r2
 80131a6:	00db      	lsls	r3, r3, #3
 80131a8:	1a9b      	subs	r3, r3, r2
 80131aa:	440b      	add	r3, r1
 80131ac:	e000      	b.n	80131b0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x40>
 80131ae:	2300      	movs	r3, #0
 80131b0:	bf00      	nop
        };
 80131b2:	4618      	mov	r0, r3
 80131b4:	3710      	adds	r7, #16
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bd80      	pop	{r7, pc}
	...

080131bc <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 80131bc:	b580      	push	{r7, lr}
 80131be:	b086      	sub	sp, #24
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	60f8      	str	r0, [r7, #12]
 80131c4:	607b      	str	r3, [r7, #4]
 80131c6:	460b      	mov	r3, r1
 80131c8:	72fb      	strb	r3, [r7, #11]
 80131ca:	4613      	mov	r3, r2
 80131cc:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 80131ce:	f7ed fb99 	bl	8000904 <_ZN3P105ClearEv>
        uint8_t data = reg | 0x02;
 80131d2:	7afb      	ldrb	r3, [r7, #11]
 80131d4:	f043 0302 	orr.w	r3, r3, #2
 80131d8:	b2db      	uxtb	r3, r3
 80131da:	75fb      	strb	r3, [r7, #23]
        HAL_SPI_Transmit(&SPI_Handle, &data, 1, HAL_MAX_DELAY);
 80131dc:	f107 0117 	add.w	r1, r7, #23
 80131e0:	f04f 33ff 	mov.w	r3, #4294967295
 80131e4:	2201      	movs	r2, #1
 80131e6:	480b      	ldr	r0, [pc, #44]	; (8013214 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 80131e8:	f7f2 fd65 	bl	8005cb6 <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 80131ec:	7abb      	ldrb	r3, [r7, #10]
 80131ee:	b29a      	uxth	r2, r3
 80131f0:	f04f 33ff 	mov.w	r3, #4294967295
 80131f4:	6879      	ldr	r1, [r7, #4]
 80131f6:	4807      	ldr	r0, [pc, #28]	; (8013214 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 80131f8:	f7f2 fd5d 	bl	8005cb6 <HAL_SPI_Transmit>
        data_p += nbytes;
 80131fc:	7abb      	ldrb	r3, [r7, #10]
 80131fe:	687a      	ldr	r2, [r7, #4]
 8013200:	4413      	add	r3, r2
 8013202:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 8013204:	f7ed fb72 	bl	80008ec <_ZN3P103SetEv>
        return ( data_p);
 8013208:	687b      	ldr	r3, [r7, #4]
}
 801320a:	4618      	mov	r0, r3
 801320c:	3718      	adds	r7, #24
 801320e:	46bd      	mov	sp, r7
 8013210:	bd80      	pop	{r7, pc}
 8013212:	bf00      	nop
 8013214:	20000320 	.word	0x20000320

08013218 <_Z10D_PrintHexIhEvT_i>:
                mask >>= 4;
        }
        prn->print((T)val, HEX);
}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 8013218:	b480      	push	{r7}
 801321a:	b083      	sub	sp, #12
 801321c:	af00      	add	r7, sp, #0
 801321e:	4603      	mov	r3, r0
 8013220:	6039      	str	r1, [r7, #0]
 8013222:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 8013224:	bf00      	nop
 8013226:	370c      	adds	r7, #12
 8013228:	46bd      	mov	sp, r7
 801322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801322e:	4770      	bx	lr

08013230 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 8013230:	b580      	push	{r7, lr}
 8013232:	b084      	sub	sp, #16
 8013234:	af00      	add	r7, sp, #0
 8013236:	60f8      	str	r0, [r7, #12]
 8013238:	607b      	str	r3, [r7, #4]
 801323a:	460b      	mov	r3, r1
 801323c:	72fb      	strb	r3, [r7, #11]
 801323e:	4613      	mov	r3, r2
 8013240:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 8013242:	f7ed fb5f 	bl	8000904 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8013246:	f107 010b 	add.w	r1, r7, #11
 801324a:	f04f 33ff 	mov.w	r3, #4294967295
 801324e:	2201      	movs	r2, #1
 8013250:	480d      	ldr	r0, [pc, #52]	; (8013288 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 8013252:	f7f2 fd30 	bl	8005cb6 <HAL_SPI_Transmit>
        memset(data_p, 0, nbytes); // Make sure we send out empty bytes
 8013256:	7abb      	ldrb	r3, [r7, #10]
 8013258:	461a      	mov	r2, r3
 801325a:	2100      	movs	r1, #0
 801325c:	6878      	ldr	r0, [r7, #4]
 801325e:	f000 fa91 	bl	8013784 <memset>
        HAL_SPI_Receive(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 8013262:	7abb      	ldrb	r3, [r7, #10]
 8013264:	b29a      	uxth	r2, r3
 8013266:	f04f 33ff 	mov.w	r3, #4294967295
 801326a:	6879      	ldr	r1, [r7, #4]
 801326c:	4806      	ldr	r0, [pc, #24]	; (8013288 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 801326e:	f7f2 fe5e 	bl	8005f2e <HAL_SPI_Receive>
        data_p += nbytes;
 8013272:	7abb      	ldrb	r3, [r7, #10]
 8013274:	687a      	ldr	r2, [r7, #4]
 8013276:	4413      	add	r3, r2
 8013278:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 801327a:	f7ed fb37 	bl	80008ec <_ZN3P103SetEv>
        return ( data_p);
 801327e:	687b      	ldr	r3, [r7, #4]
}
 8013280:	4618      	mov	r0, r3
 8013282:	3710      	adds	r7, #16
 8013284:	46bd      	mov	sp, r7
 8013286:	bd80      	pop	{r7, pc}
 8013288:	20000320 	.word	0x20000320

0801328c <_ZN8MAX3421eI3P102P9E4TaskEv>:

/* MAX3421 state change task and interrupt handler */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::Task(void) {
 801328c:	b580      	push	{r7, lr}
 801328e:	b084      	sub	sp, #16
 8013290:	af00      	add	r7, sp, #0
 8013292:	6078      	str	r0, [r7, #4]
        uint8_t rcode = 0;
 8013294:	2300      	movs	r3, #0
 8013296:	73fb      	strb	r3, [r7, #15]
        uint8_t pinvalue;
        //USB_HOST_SERIAL.print("Vbus state: ");
        //USB_HOST_SERIAL.println( vbusState, HEX );
        pinvalue = INTR::IsSet(); //Read();
 8013298:	f7fe fd46 	bl	8011d28 <_ZN2P95IsSetEv>
 801329c:	4603      	mov	r3, r0
 801329e:	73bb      	strb	r3, [r7, #14]
        //pinvalue = digitalRead( MAX_INT );
        if(pinvalue == 0) {
 80132a0:	7bbb      	ldrb	r3, [r7, #14]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d104      	bne.n	80132b0 <_ZN8MAX3421eI3P102P9E4TaskEv+0x24>
                rcode = IntHandler();
 80132a6:	6878      	ldr	r0, [r7, #4]
 80132a8:	f000 f937 	bl	801351a <_ZN8MAX3421eI3P102P9E10IntHandlerEv>
 80132ac:	4603      	mov	r3, r0
 80132ae:	73fb      	strb	r3, [r7, #15]
        //    pinvalue = digitalRead( MAX_GPX );
        //    if( pinvalue == LOW ) {
        //        GpxHandler();
        //    }
        //    usbSM();                                //USB state machine
        return ( rcode);
 80132b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80132b2:	4618      	mov	r0, r3
 80132b4:	3710      	adds	r7, #16
 80132b6:	46bd      	mov	sp, r7
 80132b8:	bd80      	pop	{r7, pc}
	...

080132bc <_ZN8MAX3421eI3P102P9E12getVbusStateEv>:
        uint8_t getVbusState(void) {
 80132bc:	b480      	push	{r7}
 80132be:	b083      	sub	sp, #12
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
                return vbusState;
 80132c4:	4b03      	ldr	r3, [pc, #12]	; (80132d4 <_ZN8MAX3421eI3P102P9E12getVbusStateEv+0x18>)
 80132c6:	781b      	ldrb	r3, [r3, #0]
        };
 80132c8:	4618      	mov	r0, r3
 80132ca:	370c      	adds	r7, #12
 80132cc:	46bd      	mov	sp, r7
 80132ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d2:	4770      	bx	lr
 80132d4:	200006a8 	.word	0x200006a8

080132d8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 80132d8:	b580      	push	{r7, lr}
 80132da:	b084      	sub	sp, #16
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
 80132e0:	4608      	mov	r0, r1
 80132e2:	4611      	mov	r1, r2
 80132e4:	461a      	mov	r2, r3
 80132e6:	4603      	mov	r3, r0
 80132e8:	70fb      	strb	r3, [r7, #3]
 80132ea:	460b      	mov	r3, r1
 80132ec:	70bb      	strb	r3, [r7, #2]
 80132ee:	4613      	mov	r3, r2
 80132f0:	707b      	strb	r3, [r7, #1]
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 80132f2:	78fb      	ldrb	r3, [r7, #3]
 80132f4:	733b      	strb	r3, [r7, #12]
                if(_parent.bmReserved || port > 7)
 80132f6:	7b3b      	ldrb	r3, [r7, #12]
 80132f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80132fc:	b2db      	uxtb	r3, r3
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d102      	bne.n	8013308 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x30>
 8013302:	787b      	ldrb	r3, [r7, #1]
 8013304:	2b07      	cmp	r3, #7
 8013306:	d901      	bls.n	801330c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x34>
                        //if(parent > 127 || port > 7)
                        return 0;
 8013308:	2300      	movs	r3, #0
 801330a:	e079      	b.n	8013400 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(is_hub && hubCounter == 7)
 801330c:	78bb      	ldrb	r3, [r7, #2]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d005      	beq.n	801331e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	79db      	ldrb	r3, [r3, #7]
 8013316:	2b07      	cmp	r3, #7
 8013318:	d101      	bne.n	801331e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
                        return 0;
 801331a:	2300      	movs	r3, #0
 801331c:	e070      	b.n	8013400 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 801331e:	2100      	movs	r1, #0
 8013320:	6878      	ldr	r0, [r7, #4]
 8013322:	f000 f8d7 	bl	80134d4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8013326:	4603      	mov	r3, r0
 8013328:	73fb      	strb	r3, [r7, #15]

                if(!index) // if empty entry is not found
 801332a:	7bfb      	ldrb	r3, [r7, #15]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d101      	bne.n	8013334 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x5c>
                        return 0;
 8013330:	2300      	movs	r3, #0
 8013332:	e065      	b.n	8013400 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(_parent.devAddress == 0) {
 8013334:	7b3b      	ldrb	r3, [r7, #12]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d124      	bne.n	8013384 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
                        if(is_hub) {
 801333a:	78bb      	ldrb	r3, [r7, #2]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d00f      	beq.n	8013360 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x88>
                                thePool[index].address.devAddress = 0x41;
 8013340:	7bfa      	ldrb	r2, [r7, #15]
 8013342:	6879      	ldr	r1, [r7, #4]
 8013344:	4613      	mov	r3, r2
 8013346:	00db      	lsls	r3, r3, #3
 8013348:	1a9b      	subs	r3, r3, r2
 801334a:	440b      	add	r3, r1
 801334c:	330c      	adds	r3, #12
 801334e:	2241      	movs	r2, #65	; 0x41
 8013350:	701a      	strb	r2, [r3, #0]
                                hubCounter++;
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	79db      	ldrb	r3, [r3, #7]
 8013356:	3301      	adds	r3, #1
 8013358:	b2da      	uxtb	r2, r3
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	71da      	strb	r2, [r3, #7]
 801335e:	e008      	b.n	8013372 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                        } else
                                thePool[index].address.devAddress = 1;
 8013360:	7bfa      	ldrb	r2, [r7, #15]
 8013362:	6879      	ldr	r1, [r7, #4]
 8013364:	4613      	mov	r3, r2
 8013366:	00db      	lsls	r3, r3, #3
 8013368:	1a9b      	subs	r3, r3, r2
 801336a:	440b      	add	r3, r1
 801336c:	330c      	adds	r3, #12
 801336e:	2201      	movs	r2, #1
 8013370:	701a      	strb	r2, [r3, #0]

                        return thePool[index].address.devAddress;
 8013372:	7bfa      	ldrb	r2, [r7, #15]
 8013374:	6879      	ldr	r1, [r7, #4]
 8013376:	4613      	mov	r3, r2
 8013378:	00db      	lsls	r3, r3, #3
 801337a:	1a9b      	subs	r3, r3, r2
 801337c:	440b      	add	r3, r1
 801337e:	330c      	adds	r3, #12
 8013380:	781b      	ldrb	r3, [r3, #0]
 8013382:	e03d      	b.n	8013400 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 8013384:	2300      	movs	r3, #0
 8013386:	723b      	strb	r3, [r7, #8]
                addr.bmParent = _parent.bmAddress;
 8013388:	7b3b      	ldrb	r3, [r7, #12]
 801338a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801338e:	b2da      	uxtb	r2, r3
 8013390:	7a3b      	ldrb	r3, [r7, #8]
 8013392:	f362 03c5 	bfi	r3, r2, #3, #3
 8013396:	723b      	strb	r3, [r7, #8]
                if(is_hub) {
 8013398:	78bb      	ldrb	r3, [r7, #2]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d013      	beq.n	80133c6 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xee>
                        addr.bmHub = 1;
 801339e:	7a3b      	ldrb	r3, [r7, #8]
 80133a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80133a4:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = ++hubCounter;
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	79db      	ldrb	r3, [r3, #7]
 80133aa:	3301      	adds	r3, #1
 80133ac:	b2da      	uxtb	r2, r3
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	71da      	strb	r2, [r3, #7]
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	79db      	ldrb	r3, [r3, #7]
 80133b6:	f003 0307 	and.w	r3, r3, #7
 80133ba:	b2da      	uxtb	r2, r3
 80133bc:	7a3b      	ldrb	r3, [r7, #8]
 80133be:	f362 0302 	bfi	r3, r2, #0, #3
 80133c2:	723b      	strb	r3, [r7, #8]
 80133c4:	e00b      	b.n	80133de <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x106>
                } else {
                        addr.bmHub = 0;
 80133c6:	7a3b      	ldrb	r3, [r7, #8]
 80133c8:	f36f 1386 	bfc	r3, #6, #1
 80133cc:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = port;
 80133ce:	787b      	ldrb	r3, [r7, #1]
 80133d0:	f003 0307 	and.w	r3, r3, #7
 80133d4:	b2da      	uxtb	r2, r3
 80133d6:	7a3b      	ldrb	r3, [r7, #8]
 80133d8:	f362 0302 	bfi	r3, r2, #0, #3
 80133dc:	723b      	strb	r3, [r7, #8]
                }
                thePool[index].address = addr;
 80133de:	7bfa      	ldrb	r2, [r7, #15]
 80133e0:	6879      	ldr	r1, [r7, #4]
 80133e2:	4613      	mov	r3, r2
 80133e4:	00db      	lsls	r3, r3, #3
 80133e6:	1a9b      	subs	r3, r3, r2
 80133e8:	440b      	add	r3, r1
 80133ea:	330c      	adds	r3, #12
 80133ec:	7a3a      	ldrb	r2, [r7, #8]
 80133ee:	701a      	strb	r2, [r3, #0]
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 80133f0:	7bfa      	ldrb	r2, [r7, #15]
 80133f2:	6879      	ldr	r1, [r7, #4]
 80133f4:	4613      	mov	r3, r2
 80133f6:	00db      	lsls	r3, r3, #3
 80133f8:	1a9b      	subs	r3, r3, r2
 80133fa:	440b      	add	r3, r1
 80133fc:	330c      	adds	r3, #12
 80133fe:	781b      	ldrb	r3, [r3, #0]
        };
 8013400:	4618      	mov	r0, r3
 8013402:	3710      	adds	r7, #16
 8013404:	46bd      	mov	sp, r7
 8013406:	bd80      	pop	{r7, pc}

08013408 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 8013408:	b580      	push	{r7, lr}
 801340a:	b084      	sub	sp, #16
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
 8013410:	460b      	mov	r3, r1
 8013412:	70fb      	strb	r3, [r7, #3]
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 8013414:	78fb      	ldrb	r3, [r7, #3]
 8013416:	2b41      	cmp	r3, #65	; 0x41
 8013418:	d103      	bne.n	8013422 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x1a>
                        InitAllAddresses();
 801341a:	6878      	ldr	r0, [r7, #4]
 801341c:	f000 f841 	bl	80134a2 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 8013420:	e00b      	b.n	801343a <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x32>
                }
                uint8_t index = FindAddressIndex(addr);
 8013422:	78fb      	ldrb	r3, [r7, #3]
 8013424:	4619      	mov	r1, r3
 8013426:	6878      	ldr	r0, [r7, #4]
 8013428:	f000 f854 	bl	80134d4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 801342c:	4603      	mov	r3, r0
 801342e:	73fb      	strb	r3, [r7, #15]
                FreeAddressByIndex(index);
 8013430:	7bfb      	ldrb	r3, [r7, #15]
 8013432:	4619      	mov	r1, r3
 8013434:	6878      	ldr	r0, [r7, #4]
 8013436:	f000 f893 	bl	8013560 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 801343a:	3710      	adds	r7, #16
 801343c:	46bd      	mov	sp, r7
 801343e:	bd80      	pop	{r7, pc}

08013440 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:
        void InitEntry(uint8_t index) {
 8013440:	b480      	push	{r7}
 8013442:	b083      	sub	sp, #12
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
 8013448:	460b      	mov	r3, r1
 801344a:	70fb      	strb	r3, [r7, #3]
                thePool[index].address.devAddress = 0;
 801344c:	78fa      	ldrb	r2, [r7, #3]
 801344e:	6879      	ldr	r1, [r7, #4]
 8013450:	4613      	mov	r3, r2
 8013452:	00db      	lsls	r3, r3, #3
 8013454:	1a9b      	subs	r3, r3, r2
 8013456:	440b      	add	r3, r1
 8013458:	330c      	adds	r3, #12
 801345a:	2200      	movs	r2, #0
 801345c:	701a      	strb	r2, [r3, #0]
                thePool[index].epcount = 1;
 801345e:	78fa      	ldrb	r2, [r7, #3]
 8013460:	6879      	ldr	r1, [r7, #4]
 8013462:	4613      	mov	r3, r2
 8013464:	00db      	lsls	r3, r3, #3
 8013466:	1a9b      	subs	r3, r3, r2
 8013468:	440b      	add	r3, r1
 801346a:	330d      	adds	r3, #13
 801346c:	2201      	movs	r2, #1
 801346e:	701a      	strb	r2, [r3, #0]
                thePool[index].lowspeed = 0;
 8013470:	78fa      	ldrb	r2, [r7, #3]
 8013472:	6879      	ldr	r1, [r7, #4]
 8013474:	4613      	mov	r3, r2
 8013476:	00db      	lsls	r3, r3, #3
 8013478:	1a9b      	subs	r3, r3, r2
 801347a:	440b      	add	r3, r1
 801347c:	330e      	adds	r3, #14
 801347e:	2200      	movs	r2, #0
 8013480:	701a      	strb	r2, [r3, #0]
                thePool[index].epinfo = &dev0ep;
 8013482:	78fa      	ldrb	r2, [r7, #3]
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	1d19      	adds	r1, r3, #4
 8013488:	6878      	ldr	r0, [r7, #4]
 801348a:	4613      	mov	r3, r2
 801348c:	00db      	lsls	r3, r3, #3
 801348e:	1a9b      	subs	r3, r3, r2
 8013490:	4403      	add	r3, r0
 8013492:	3308      	adds	r3, #8
 8013494:	6019      	str	r1, [r3, #0]
        };
 8013496:	bf00      	nop
 8013498:	370c      	adds	r7, #12
 801349a:	46bd      	mov	sp, r7
 801349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a0:	4770      	bx	lr

080134a2 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
        void InitAllAddresses() {
 80134a2:	b580      	push	{r7, lr}
 80134a4:	b084      	sub	sp, #16
 80134a6:	af00      	add	r7, sp, #0
 80134a8:	6078      	str	r0, [r7, #4]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 80134aa:	2301      	movs	r3, #1
 80134ac:	73fb      	strb	r3, [r7, #15]
 80134ae:	7bfb      	ldrb	r3, [r7, #15]
 80134b0:	2b0f      	cmp	r3, #15
 80134b2:	d808      	bhi.n	80134c6 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x24>
                        InitEntry(i);
 80134b4:	7bfb      	ldrb	r3, [r7, #15]
 80134b6:	4619      	mov	r1, r3
 80134b8:	6878      	ldr	r0, [r7, #4]
 80134ba:	f7ff ffc1 	bl	8013440 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 80134be:	7bfb      	ldrb	r3, [r7, #15]
 80134c0:	3301      	adds	r3, #1
 80134c2:	73fb      	strb	r3, [r7, #15]
 80134c4:	e7f3      	b.n	80134ae <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0xc>
                hubCounter = 0;
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	2200      	movs	r2, #0
 80134ca:	71da      	strb	r2, [r3, #7]
        };
 80134cc:	bf00      	nop
 80134ce:	3710      	adds	r7, #16
 80134d0:	46bd      	mov	sp, r7
 80134d2:	bd80      	pop	{r7, pc}

080134d4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
        uint8_t FindAddressIndex(uint8_t address = 0) {
 80134d4:	b480      	push	{r7}
 80134d6:	b085      	sub	sp, #20
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6078      	str	r0, [r7, #4]
 80134dc:	460b      	mov	r3, r1
 80134de:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 80134e0:	2301      	movs	r3, #1
 80134e2:	73fb      	strb	r3, [r7, #15]
 80134e4:	7bfb      	ldrb	r3, [r7, #15]
 80134e6:	2b0f      	cmp	r3, #15
 80134e8:	d810      	bhi.n	801350c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x38>
                        if(thePool[i].address.devAddress == address)
 80134ea:	7bfa      	ldrb	r2, [r7, #15]
 80134ec:	6879      	ldr	r1, [r7, #4]
 80134ee:	4613      	mov	r3, r2
 80134f0:	00db      	lsls	r3, r3, #3
 80134f2:	1a9b      	subs	r3, r3, r2
 80134f4:	440b      	add	r3, r1
 80134f6:	330c      	adds	r3, #12
 80134f8:	781b      	ldrb	r3, [r3, #0]
 80134fa:	78fa      	ldrb	r2, [r7, #3]
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d101      	bne.n	8013504 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x30>
                                return i;
 8013500:	7bfb      	ldrb	r3, [r7, #15]
 8013502:	e004      	b.n	801350e <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x3a>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 8013504:	7bfb      	ldrb	r3, [r7, #15]
 8013506:	3301      	adds	r3, #1
 8013508:	73fb      	strb	r3, [r7, #15]
 801350a:	e7eb      	b.n	80134e4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x10>
                return 0;
 801350c:	2300      	movs	r3, #0
        };
 801350e:	4618      	mov	r0, r3
 8013510:	3714      	adds	r7, #20
 8013512:	46bd      	mov	sp, r7
 8013514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013518:	4770      	bx	lr

0801351a <_ZN8MAX3421eI3P102P9E10IntHandlerEv>:

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
 801351a:	b580      	push	{r7, lr}
 801351c:	b084      	sub	sp, #16
 801351e:	af00      	add	r7, sp, #0
 8013520:	6078      	str	r0, [r7, #4]
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
 8013522:	2300      	movs	r3, #0
 8013524:	73fb      	strb	r3, [r7, #15]
        HIRQ = regRd(rHIRQ); //determine interrupt source
 8013526:	21c8      	movs	r1, #200	; 0xc8
 8013528:	6878      	ldr	r0, [r7, #4]
 801352a:	f7ee fccd 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801352e:	4603      	mov	r3, r0
 8013530:	73bb      	strb	r3, [r7, #14]
        //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
        //    HIRQ_sendback |= bmFRAMEIRQ;
        //}//end FRAMEIRQ handling
        if(HIRQ & bmCONDETIRQ) {
 8013532:	7bbb      	ldrb	r3, [r7, #14]
 8013534:	f003 0320 	and.w	r3, r3, #32
 8013538:	2b00      	cmp	r3, #0
 801353a:	d006      	beq.n	801354a <_ZN8MAX3421eI3P102P9E10IntHandlerEv+0x30>
                busprobe();
 801353c:	6878      	ldr	r0, [r7, #4]
 801353e:	f7ee fce5 	bl	8001f0c <_ZN8MAX3421eI3P102P9E8busprobeEv>
                HIRQ_sendback |= bmCONDETIRQ;
 8013542:	7bfb      	ldrb	r3, [r7, #15]
 8013544:	f043 0320 	orr.w	r3, r3, #32
 8013548:	73fb      	strb	r3, [r7, #15]
        }
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        regWr(rHIRQ, HIRQ_sendback);
 801354a:	7bfb      	ldrb	r3, [r7, #15]
 801354c:	461a      	mov	r2, r3
 801354e:	21c8      	movs	r1, #200	; 0xc8
 8013550:	6878      	ldr	r0, [r7, #4]
 8013552:	f7ee fc67 	bl	8001e24 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        return ( HIRQ_sendback);
 8013556:	7bfb      	ldrb	r3, [r7, #15]
}
 8013558:	4618      	mov	r0, r3
 801355a:	3710      	adds	r7, #16
 801355c:	46bd      	mov	sp, r7
 801355e:	bd80      	pop	{r7, pc}

08013560 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
        void FreeAddressByIndex(uint8_t index) {
 8013560:	b580      	push	{r7, lr}
 8013562:	b084      	sub	sp, #16
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
 8013568:	460b      	mov	r3, r1
 801356a:	70fb      	strb	r3, [r7, #3]
                if(index == 0)
 801356c:	78fb      	ldrb	r3, [r7, #3]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d03a      	beq.n	80135e8 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x88>
                UsbDeviceAddress uda = thePool[index].address;
 8013572:	78fa      	ldrb	r2, [r7, #3]
 8013574:	6879      	ldr	r1, [r7, #4]
 8013576:	4613      	mov	r3, r2
 8013578:	00db      	lsls	r3, r3, #3
 801357a:	1a9b      	subs	r3, r3, r2
 801357c:	440b      	add	r3, r1
 801357e:	330c      	adds	r3, #12
 8013580:	781b      	ldrb	r3, [r3, #0]
 8013582:	733b      	strb	r3, [r7, #12]
                if(uda.bmHub == 1) {
 8013584:	7b3b      	ldrb	r3, [r7, #12]
 8013586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801358a:	b2db      	uxtb	r3, r3
 801358c:	2b00      	cmp	r3, #0
 801358e:	d025      	beq.n	80135dc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 8013590:	2301      	movs	r3, #1
 8013592:	73fb      	strb	r3, [r7, #15]
 8013594:	7bfb      	ldrb	r3, [r7, #15]
 8013596:	461a      	mov	r2, r3
 8013598:	7b39      	ldrb	r1, [r7, #12]
 801359a:	6878      	ldr	r0, [r7, #4]
 801359c:	f000 f828 	bl	80135f0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 80135a0:	4603      	mov	r3, r0
 80135a2:	73fb      	strb	r3, [r7, #15]
 80135a4:	7bfb      	ldrb	r3, [r7, #15]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	bf14      	ite	ne
 80135aa:	2301      	movne	r3, #1
 80135ac:	2300      	moveq	r3, #0
 80135ae:	b2db      	uxtb	r3, r3
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d005      	beq.n	80135c0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x60>
                                FreeAddressByIndex(i);
 80135b4:	7bfb      	ldrb	r3, [r7, #15]
 80135b6:	4619      	mov	r1, r3
 80135b8:	6878      	ldr	r0, [r7, #4]
 80135ba:	f7ff ffd1 	bl	8013560 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 80135be:	e7e9      	b.n	8013594 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x34>
                        if(hubCounter == uda.bmAddress)
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	79db      	ldrb	r3, [r3, #7]
 80135c4:	7b3a      	ldrb	r2, [r7, #12]
 80135c6:	f3c2 0202 	ubfx	r2, r2, #0, #3
 80135ca:	b2d2      	uxtb	r2, r2
 80135cc:	4293      	cmp	r3, r2
 80135ce:	d105      	bne.n	80135dc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                                hubCounter--;
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	79db      	ldrb	r3, [r3, #7]
 80135d4:	3b01      	subs	r3, #1
 80135d6:	b2da      	uxtb	r2, r3
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	71da      	strb	r2, [r3, #7]
                InitEntry(index);
 80135dc:	78fb      	ldrb	r3, [r7, #3]
 80135de:	4619      	mov	r1, r3
 80135e0:	6878      	ldr	r0, [r7, #4]
 80135e2:	f7ff ff2d 	bl	8013440 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 80135e6:	e000      	b.n	80135ea <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x8a>
                        return;
 80135e8:	bf00      	nop
        }
 80135ea:	3710      	adds	r7, #16
 80135ec:	46bd      	mov	sp, r7
 80135ee:	bd80      	pop	{r7, pc}

080135f0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 80135f0:	b480      	push	{r7}
 80135f2:	b085      	sub	sp, #20
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
 80135f8:	7039      	strb	r1, [r7, #0]
 80135fa:	4613      	mov	r3, r2
 80135fc:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 80135fe:	78fb      	ldrb	r3, [r7, #3]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d004      	beq.n	801360e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 8013604:	78fb      	ldrb	r3, [r7, #3]
 8013606:	2b0f      	cmp	r3, #15
 8013608:	d801      	bhi.n	801360e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 801360a:	78fb      	ldrb	r3, [r7, #3]
 801360c:	e000      	b.n	8013610 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x20>
 801360e:	2301      	movs	r3, #1
 8013610:	73fb      	strb	r3, [r7, #15]
 8013612:	7bfb      	ldrb	r3, [r7, #15]
 8013614:	2b0f      	cmp	r3, #15
 8013616:	d816      	bhi.n	8013646 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x56>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 8013618:	7bfa      	ldrb	r2, [r7, #15]
 801361a:	6879      	ldr	r1, [r7, #4]
 801361c:	4613      	mov	r3, r2
 801361e:	00db      	lsls	r3, r3, #3
 8013620:	1a9b      	subs	r3, r3, r2
 8013622:	440b      	add	r3, r1
 8013624:	3308      	adds	r3, #8
 8013626:	791b      	ldrb	r3, [r3, #4]
 8013628:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 801362c:	b2da      	uxtb	r2, r3
 801362e:	783b      	ldrb	r3, [r7, #0]
 8013630:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8013634:	b2db      	uxtb	r3, r3
 8013636:	429a      	cmp	r2, r3
 8013638:	d101      	bne.n	801363e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x4e>
                                return i;
 801363a:	7bfb      	ldrb	r3, [r7, #15]
 801363c:	e004      	b.n	8013648 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x58>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 801363e:	7bfb      	ldrb	r3, [r7, #15]
 8013640:	3301      	adds	r3, #1
 8013642:	73fb      	strb	r3, [r7, #15]
 8013644:	e7e5      	b.n	8013612 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x22>
                return 0;
 8013646:	2300      	movs	r3, #0
        };
 8013648:	4618      	mov	r0, r3
 801364a:	3714      	adds	r7, #20
 801364c:	46bd      	mov	sp, r7
 801364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013652:	4770      	bx	lr

08013654 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 8013654:	b480      	push	{r7}
 8013656:	b085      	sub	sp, #20
 8013658:	af00      	add	r7, sp, #0
 801365a:	60f8      	str	r0, [r7, #12]
 801365c:	60b9      	str	r1, [r7, #8]
 801365e:	607a      	str	r2, [r7, #4]
        if(!pBuf) {
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d101      	bne.n	801366c <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
 8013668:	2300      	movs	r3, #0
 801366a:	e031      	b.n	80136d0 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	791b      	ldrb	r3, [r3, #4]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d022      	beq.n	80136ba <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	881b      	ldrh	r3, [r3, #0]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d01e      	beq.n	80136ba <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
                pBuf[valueSize - countDown] = (**pp);
 801367c:	68bb      	ldr	r3, [r7, #8]
 801367e:	681a      	ldr	r2, [r3, #0]
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	68f9      	ldr	r1, [r7, #12]
 8013686:	7949      	ldrb	r1, [r1, #5]
 8013688:	4608      	mov	r0, r1
 801368a:	68f9      	ldr	r1, [r7, #12]
 801368c:	7909      	ldrb	r1, [r1, #4]
 801368e:	1a41      	subs	r1, r0, r1
 8013690:	440b      	add	r3, r1
 8013692:	7812      	ldrb	r2, [r2, #0]
 8013694:	701a      	strb	r2, [r3, #0]
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	791b      	ldrb	r3, [r3, #4]
 801369a:	3b01      	subs	r3, #1
 801369c:	b2da      	uxtb	r2, r3
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	711a      	strb	r2, [r3, #4]
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	881b      	ldrh	r3, [r3, #0]
 80136a6:	3b01      	subs	r3, #1
 80136a8:	b29a      	uxth	r2, r3
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	801a      	strh	r2, [r3, #0]
 80136ae:	68bb      	ldr	r3, [r7, #8]
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	1c5a      	adds	r2, r3, #1
 80136b4:	68bb      	ldr	r3, [r7, #8]
 80136b6:	601a      	str	r2, [r3, #0]
 80136b8:	e7d8      	b.n	801366c <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>

        if(countDown)
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	791b      	ldrb	r3, [r3, #4]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d001      	beq.n	80136c6 <_ZN20MultiByteValueParser5ParseEPPhPt+0x72>
                return false;
 80136c2:	2300      	movs	r3, #0
 80136c4:	e004      	b.n	80136d0 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>

        countDown = valueSize;
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	795a      	ldrb	r2, [r3, #5]
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	711a      	strb	r2, [r3, #4]
        return true;
 80136ce:	2301      	movs	r3, #1
}
 80136d0:	4618      	mov	r0, r3
 80136d2:	3714      	adds	r7, #20
 80136d4:	46bd      	mov	sp, r7
 80136d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136da:	4770      	bx	lr

080136dc <__cxa_pure_virtual>:
 80136dc:	b508      	push	{r3, lr}
 80136de:	f000 f80d 	bl	80136fc <_ZSt9terminatev>

080136e2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80136e2:	b508      	push	{r3, lr}
 80136e4:	4780      	blx	r0
 80136e6:	f000 f80e 	bl	8013706 <abort>
	...

080136ec <_ZSt13get_terminatev>:
 80136ec:	4b02      	ldr	r3, [pc, #8]	; (80136f8 <_ZSt13get_terminatev+0xc>)
 80136ee:	6818      	ldr	r0, [r3, #0]
 80136f0:	f3bf 8f5b 	dmb	ish
 80136f4:	4770      	bx	lr
 80136f6:	bf00      	nop
 80136f8:	2000011c 	.word	0x2000011c

080136fc <_ZSt9terminatev>:
 80136fc:	b508      	push	{r3, lr}
 80136fe:	f7ff fff5 	bl	80136ec <_ZSt13get_terminatev>
 8013702:	f7ff ffee 	bl	80136e2 <_ZN10__cxxabiv111__terminateEPFvvE>

08013706 <abort>:
 8013706:	b508      	push	{r3, lr}
 8013708:	2006      	movs	r0, #6
 801370a:	f000 f86b 	bl	80137e4 <raise>
 801370e:	2001      	movs	r0, #1
 8013710:	f7ee fe74 	bl	80023fc <_exit>

08013714 <__errno>:
 8013714:	4b01      	ldr	r3, [pc, #4]	; (801371c <__errno+0x8>)
 8013716:	6818      	ldr	r0, [r3, #0]
 8013718:	4770      	bx	lr
 801371a:	bf00      	nop
 801371c:	20000120 	.word	0x20000120

08013720 <__libc_init_array>:
 8013720:	b570      	push	{r4, r5, r6, lr}
 8013722:	4d0d      	ldr	r5, [pc, #52]	; (8013758 <__libc_init_array+0x38>)
 8013724:	4c0d      	ldr	r4, [pc, #52]	; (801375c <__libc_init_array+0x3c>)
 8013726:	1b64      	subs	r4, r4, r5
 8013728:	10a4      	asrs	r4, r4, #2
 801372a:	2600      	movs	r6, #0
 801372c:	42a6      	cmp	r6, r4
 801372e:	d109      	bne.n	8013744 <__libc_init_array+0x24>
 8013730:	4d0b      	ldr	r5, [pc, #44]	; (8013760 <__libc_init_array+0x40>)
 8013732:	4c0c      	ldr	r4, [pc, #48]	; (8013764 <__libc_init_array+0x44>)
 8013734:	f000 f884 	bl	8013840 <_init>
 8013738:	1b64      	subs	r4, r4, r5
 801373a:	10a4      	asrs	r4, r4, #2
 801373c:	2600      	movs	r6, #0
 801373e:	42a6      	cmp	r6, r4
 8013740:	d105      	bne.n	801374e <__libc_init_array+0x2e>
 8013742:	bd70      	pop	{r4, r5, r6, pc}
 8013744:	f855 3b04 	ldr.w	r3, [r5], #4
 8013748:	4798      	blx	r3
 801374a:	3601      	adds	r6, #1
 801374c:	e7ee      	b.n	801372c <__libc_init_array+0xc>
 801374e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013752:	4798      	blx	r3
 8013754:	3601      	adds	r6, #1
 8013756:	e7f2      	b.n	801373e <__libc_init_array+0x1e>
 8013758:	08014b28 	.word	0x08014b28
 801375c:	08014b28 	.word	0x08014b28
 8013760:	08014b28 	.word	0x08014b28
 8013764:	08014b30 	.word	0x08014b30

08013768 <memcpy>:
 8013768:	440a      	add	r2, r1
 801376a:	4291      	cmp	r1, r2
 801376c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013770:	d100      	bne.n	8013774 <memcpy+0xc>
 8013772:	4770      	bx	lr
 8013774:	b510      	push	{r4, lr}
 8013776:	f811 4b01 	ldrb.w	r4, [r1], #1
 801377a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801377e:	4291      	cmp	r1, r2
 8013780:	d1f9      	bne.n	8013776 <memcpy+0xe>
 8013782:	bd10      	pop	{r4, pc}

08013784 <memset>:
 8013784:	4402      	add	r2, r0
 8013786:	4603      	mov	r3, r0
 8013788:	4293      	cmp	r3, r2
 801378a:	d100      	bne.n	801378e <memset+0xa>
 801378c:	4770      	bx	lr
 801378e:	f803 1b01 	strb.w	r1, [r3], #1
 8013792:	e7f9      	b.n	8013788 <memset+0x4>

08013794 <_raise_r>:
 8013794:	291f      	cmp	r1, #31
 8013796:	b538      	push	{r3, r4, r5, lr}
 8013798:	4604      	mov	r4, r0
 801379a:	460d      	mov	r5, r1
 801379c:	d904      	bls.n	80137a8 <_raise_r+0x14>
 801379e:	2316      	movs	r3, #22
 80137a0:	6003      	str	r3, [r0, #0]
 80137a2:	f04f 30ff 	mov.w	r0, #4294967295
 80137a6:	bd38      	pop	{r3, r4, r5, pc}
 80137a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80137aa:	b112      	cbz	r2, 80137b2 <_raise_r+0x1e>
 80137ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80137b0:	b94b      	cbnz	r3, 80137c6 <_raise_r+0x32>
 80137b2:	4620      	mov	r0, r4
 80137b4:	f000 f830 	bl	8013818 <_getpid_r>
 80137b8:	462a      	mov	r2, r5
 80137ba:	4601      	mov	r1, r0
 80137bc:	4620      	mov	r0, r4
 80137be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80137c2:	f000 b817 	b.w	80137f4 <_kill_r>
 80137c6:	2b01      	cmp	r3, #1
 80137c8:	d00a      	beq.n	80137e0 <_raise_r+0x4c>
 80137ca:	1c59      	adds	r1, r3, #1
 80137cc:	d103      	bne.n	80137d6 <_raise_r+0x42>
 80137ce:	2316      	movs	r3, #22
 80137d0:	6003      	str	r3, [r0, #0]
 80137d2:	2001      	movs	r0, #1
 80137d4:	e7e7      	b.n	80137a6 <_raise_r+0x12>
 80137d6:	2400      	movs	r4, #0
 80137d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80137dc:	4628      	mov	r0, r5
 80137de:	4798      	blx	r3
 80137e0:	2000      	movs	r0, #0
 80137e2:	e7e0      	b.n	80137a6 <_raise_r+0x12>

080137e4 <raise>:
 80137e4:	4b02      	ldr	r3, [pc, #8]	; (80137f0 <raise+0xc>)
 80137e6:	4601      	mov	r1, r0
 80137e8:	6818      	ldr	r0, [r3, #0]
 80137ea:	f7ff bfd3 	b.w	8013794 <_raise_r>
 80137ee:	bf00      	nop
 80137f0:	20000120 	.word	0x20000120

080137f4 <_kill_r>:
 80137f4:	b538      	push	{r3, r4, r5, lr}
 80137f6:	4d07      	ldr	r5, [pc, #28]	; (8013814 <_kill_r+0x20>)
 80137f8:	2300      	movs	r3, #0
 80137fa:	4604      	mov	r4, r0
 80137fc:	4608      	mov	r0, r1
 80137fe:	4611      	mov	r1, r2
 8013800:	602b      	str	r3, [r5, #0]
 8013802:	f7ee fdeb 	bl	80023dc <_kill>
 8013806:	1c43      	adds	r3, r0, #1
 8013808:	d102      	bne.n	8013810 <_kill_r+0x1c>
 801380a:	682b      	ldr	r3, [r5, #0]
 801380c:	b103      	cbz	r3, 8013810 <_kill_r+0x1c>
 801380e:	6023      	str	r3, [r4, #0]
 8013810:	bd38      	pop	{r3, r4, r5, pc}
 8013812:	bf00      	nop
 8013814:	20005d54 	.word	0x20005d54

08013818 <_getpid_r>:
 8013818:	f7ee bdd8 	b.w	80023cc <_getpid>

0801381c <strncmp>:
 801381c:	b510      	push	{r4, lr}
 801381e:	b16a      	cbz	r2, 801383c <strncmp+0x20>
 8013820:	3901      	subs	r1, #1
 8013822:	1884      	adds	r4, r0, r2
 8013824:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013828:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801382c:	4293      	cmp	r3, r2
 801382e:	d103      	bne.n	8013838 <strncmp+0x1c>
 8013830:	42a0      	cmp	r0, r4
 8013832:	d001      	beq.n	8013838 <strncmp+0x1c>
 8013834:	2b00      	cmp	r3, #0
 8013836:	d1f5      	bne.n	8013824 <strncmp+0x8>
 8013838:	1a98      	subs	r0, r3, r2
 801383a:	bd10      	pop	{r4, pc}
 801383c:	4610      	mov	r0, r2
 801383e:	e7fc      	b.n	801383a <strncmp+0x1e>

08013840 <_init>:
 8013840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013842:	bf00      	nop
 8013844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013846:	bc08      	pop	{r3}
 8013848:	469e      	mov	lr, r3
 801384a:	4770      	bx	lr

0801384c <_fini>:
 801384c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801384e:	bf00      	nop
 8013850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013852:	bc08      	pop	{r3}
 8013854:	469e      	mov	lr, r3
 8013856:	4770      	bx	lr
