
xbox_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000124d8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  080126a8  080126a8  000226a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ad0  08012ad0  000301a4  2**0
                  CONTENTS
  4 .ARM          00000008  08012ad0  08012ad0  00022ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012ad8  08012ad8  000301a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012ad8  08012ad8  00022ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012ae0  08012ae0  00022ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  08012ae4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005754  200001a4  08012c88  000301a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200058f8  08012c88  000358f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005d586  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000086ae  00000000  00000000  0008d75a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002540  00000000  00000000  00095e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002370  00000000  00000000  00098348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c2f1  00000000  00000000  0009a6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c288  00000000  00000000  000c69a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f582a  00000000  00000000  000f2c31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e845b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a264  00000000  00000000  001e84b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001a4 	.word	0x200001a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012690 	.word	0x08012690

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001a8 	.word	0x200001a8
 800020c:	08012690 	.word	0x08012690

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d101      	bne.n	800052c <_ZN5Print5writeEPKc+0x14>
 8000528:	2300      	movs	r3, #0
 800052a:	e00d      	b.n	8000548 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	3304      	adds	r3, #4
 8000532:	681c      	ldr	r4, [r3, #0]
 8000534:	6838      	ldr	r0, [r7, #0]
 8000536:	f7ff fe6b 	bl	8000210 <strlen>
 800053a:	4603      	mov	r3, r0
 800053c:	461a      	mov	r2, r3
 800053e:	6839      	ldr	r1, [r7, #0]
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	47a0      	blx	r4
 8000544:	4603      	mov	r3, r0
 8000546:	bf00      	nop
    }
 8000548:	4618      	mov	r0, r3
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bd90      	pop	{r4, r7, pc}

08000550 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	1e5a      	subs	r2, r3, #1
 8000564:	607a      	str	r2, [r7, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	bf14      	ite	ne
 800056a:	2301      	movne	r3, #1
 800056c:	2300      	moveq	r3, #0
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00e      	beq.n	8000592 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	1c59      	adds	r1, r3, #1
 800057e:	60b9      	str	r1, [r7, #8]
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	4619      	mov	r1, r3
 8000584:	68f8      	ldr	r0, [r7, #12]
 8000586:	4790      	blx	r2
 8000588:	4602      	mov	r2, r0
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	4413      	add	r3, r2
 800058e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000590:	e7e6      	b.n	8000560 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8000592:	697b      	ldr	r3, [r7, #20]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3718      	adds	r7, #24
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 80005a6:	6839      	ldr	r1, [r7, #0]
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f000 f805 	bl	80005b8 <_ZN5Print5printEPKc>
 80005ae:	4603      	mov	r3, r0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
  return write(str);
 80005c2:	6839      	ldr	r1, [r7, #0]
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff ffa7 	bl	8000518 <_ZN5Print5writeEPKc>
 80005ca:	4603      	mov	r3, r0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	70fb      	strb	r3, [r7, #3]
  return write(c);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	78fa      	ldrb	r2, [r7, #3]
 80005e8:	4611      	mov	r1, r2
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	4798      	blx	r3
 80005ee:	4603      	mov	r3, r0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	68b9      	ldr	r1, [r7, #8]
 8000608:	68f8      	ldr	r0, [r7, #12]
 800060a:	f000 f805 	bl	8000618 <_ZN5Print5printEli>
 800060e:	4603      	mov	r3, r0
}
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d109      	bne.n	800063e <_ZN5Print5printEli+0x26>
    return write(n);
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	b2d2      	uxtb	r2, r2
 8000634:	4611      	mov	r1, r2
 8000636:	68f8      	ldr	r0, [r7, #12]
 8000638:	4798      	blx	r3
 800063a:	4603      	mov	r3, r0
 800063c:	e029      	b.n	8000692 <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b0a      	cmp	r3, #10
 8000642:	d11d      	bne.n	8000680 <_ZN5Print5printEli+0x68>
    if (n < 0) {
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	2b00      	cmp	r3, #0
 8000648:	da12      	bge.n	8000670 <_ZN5Print5printEli+0x58>
      int t = print('-');
 800064a:	212d      	movs	r1, #45	; 0x2d
 800064c:	68f8      	ldr	r0, [r7, #12]
 800064e:	f7ff ffc1 	bl	80005d4 <_ZN5Print5printEc>
 8000652:	4603      	mov	r3, r0
 8000654:	617b      	str	r3, [r7, #20]
      n = -n;
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	425b      	negs	r3, r3
 800065a:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	220a      	movs	r2, #10
 8000660:	4619      	mov	r1, r3
 8000662:	68f8      	ldr	r0, [r7, #12]
 8000664:	f000 f819 	bl	800069a <_ZN5Print11printNumberEmh>
 8000668:	4602      	mov	r2, r0
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	4413      	add	r3, r2
 800066e:	e010      	b.n	8000692 <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	220a      	movs	r2, #10
 8000674:	4619      	mov	r1, r3
 8000676:	68f8      	ldr	r0, [r7, #12]
 8000678:	f000 f80f 	bl	800069a <_ZN5Print11printNumberEmh>
 800067c:	4603      	mov	r3, r0
 800067e:	e008      	b.n	8000692 <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	4619      	mov	r1, r3
 8000688:	68f8      	ldr	r0, [r7, #12]
 800068a:	f000 f806 	bl	800069a <_ZN5Print11printNumberEmh>
 800068e:	4603      	mov	r3, r0
 8000690:	bf00      	nop
  }
}
 8000692:	4618      	mov	r0, r3
 8000694:	3718      	adds	r7, #24
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 800069a:	b580      	push	{r7, lr}
 800069c:	b090      	sub	sp, #64	; 0x40
 800069e:	af00      	add	r7, sp, #0
 80006a0:	60f8      	str	r0, [r7, #12]
 80006a2:	60b9      	str	r1, [r7, #8]
 80006a4:	4613      	mov	r3, r2
 80006a6:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	3320      	adds	r3, #32
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 80006b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d801      	bhi.n	80006c0 <_ZN5Print11printNumberEmh+0x26>
 80006bc:	230a      	movs	r3, #10
 80006be:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006cc:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 80006ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	79f9      	ldrb	r1, [r7, #7]
 80006d8:	fb11 f303 	smulbb	r3, r1, r3
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80006e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d804      	bhi.n	80006f6 <_ZN5Print11printNumberEmh+0x5c>
 80006ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006f0:	3330      	adds	r3, #48	; 0x30
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	e003      	b.n	80006fe <_ZN5Print11printNumberEmh+0x64>
 80006f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006fa:	3337      	adds	r3, #55	; 0x37
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000700:	3a01      	subs	r2, #1
 8000702:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000704:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000706:	7013      	strb	r3, [r2, #0]
  } while(n);
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d000      	beq.n	8000710 <_ZN5Print11printNumberEmh+0x76>
  do {
 800070e:	e7d7      	b.n	80006c0 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 8000710:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000712:	68f8      	ldr	r0, [r7, #12]
 8000714:	f7ff ff00 	bl	8000518 <_ZN5Print5writeEPKc>
 8000718:	4603      	mov	r3, r0
}
 800071a:	4618      	mov	r0, r3
 800071c:	3740      	adds	r7, #64	; 0x40
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <_ZN11SerialClass5writeEh>:
#include "SerialClass.h"

size_t SerialClass::write(uint8_t data) {
 8000722:	b580      	push	{r7, lr}
 8000724:	b082      	sub	sp, #8
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	460b      	mov	r3, r1
 800072c:	70fb      	strb	r3, [r7, #3]
	return write(&data, 1);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	3304      	adds	r3, #4
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	1cf9      	adds	r1, r7, #3
 8000738:	2201      	movs	r2, #1
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	4798      	blx	r3
 800073e:	4603      	mov	r3, r0
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <_ZN11SerialClass5writeEPKhj>:

size_t SerialClass::write(const uint8_t *buffer, size_t size) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
	uint8_t *pBuffer = (uint8_t*)buffer;
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(pUART_Handle, pBuffer, size, HAL_MAX_DELAY);
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	6918      	ldr	r0, [r3, #16]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	b29a      	uxth	r2, r3
 8000760:	f04f 33ff 	mov.w	r3, #4294967295
 8000764:	6979      	ldr	r1, [r7, #20]
 8000766:	f005 f9a2 	bl	8005aae <HAL_UART_Transmit>
	return size;
 800076a:	687b      	ldr	r3, [r7, #4]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3718      	adds	r7, #24
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <_ZN11SerialClass4readEv>:

int SerialClass::read() {
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	uint8_t data;
	HAL_UART_Receive(pUART_Handle, &data, 1, HAL_MAX_DELAY);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6918      	ldr	r0, [r3, #16]
 8000780:	f107 010f 	add.w	r1, r7, #15
 8000784:	f04f 33ff 	mov.w	r3, #4294967295
 8000788:	2201      	movs	r2, #1
 800078a:	f005 fa22 	bl	8005bd2 <HAL_UART_Receive>
	return data;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <_ZN11SerialClass9availableEv>:

int SerialClass::available() {
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	return -1;
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <_ZN11SerialClass4peekEv>:

int SerialClass::peek() {
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	return -1;
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007bc:	4618      	mov	r0, r3
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <_ZN11SerialClass5flushEv>:

void SerialClass::flush() {
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	4a06      	ldr	r2, [pc, #24]	; (8000800 <_ZN5PrintC1Ev+0x24>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2200      	movs	r2, #0
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4618      	mov	r0, r3
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	0801283c 	.word	0x0801283c

08000804 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ffe4 	bl	80007dc <_ZN5PrintC1Ev>
 8000814:	4a05      	ldr	r2, [pc, #20]	; (800082c <_ZN6StreamC1Ev+0x28>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4618      	mov	r0, r3
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	08012920 	.word	0x08012920

08000830 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>:
#include "Stream.h"
#include "stm32f4xx_hal.h"

class SerialClass : public Stream {
public:
	SerialClass(UART_HandleTypeDef *UART_Handle) : pUART_Handle(UART_Handle) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ffe1 	bl	8000804 <_ZN6StreamC1Ev>
 8000842:	4a05      	ldr	r2, [pc, #20]	; (8000858 <_ZN11SerialClassC1EP20__UART_HandleTypeDef+0x28>)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	683a      	ldr	r2, [r7, #0]
 800084c:	611a      	str	r2, [r3, #16]
	};
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	0801284c 	.word	0x0801284c

0800085c <_ZN2P910SetDirReadEv>:
MAKE_PIN(P4, GPIOB, GPIO_PIN_5); // D4
MAKE_PIN(P5, GPIOB, GPIO_PIN_4); // D5
MAKE_PIN(P6, GPIOB, GPIO_PIN_10); // D6
MAKE_PIN(P7, GPIOA, GPIO_PIN_8); // D7
MAKE_PIN(P8, GPIOA, GPIO_PIN_9); // D8
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <_ZN2P910SetDirReadEv+0x24>)
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <_ZN2P910SetDirReadEv+0x24>)
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <_ZN2P910SetDirReadEv+0x24>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	4903      	ldr	r1, [pc, #12]	; (8000880 <_ZN2P910SetDirReadEv+0x24>)
 8000874:	4803      	ldr	r0, [pc, #12]	; (8000884 <_ZN2P910SetDirReadEv+0x28>)
 8000876:	f001 fc3f 	bl	80020f8 <HAL_GPIO_Init>
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200001c0 	.word	0x200001c0
 8000884:	40020800 	.word	0x40020800

08000888 <_ZN3P103SetEv>:
MAKE_PIN(P10, GPIOB, GPIO_PIN_6); // D10
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
 800088c:	2201      	movs	r2, #1
 800088e:	2140      	movs	r1, #64	; 0x40
 8000890:	4802      	ldr	r0, [pc, #8]	; (800089c <_ZN3P103SetEv+0x14>)
 8000892:	f001 fddd 	bl	8002450 <HAL_GPIO_WritePin>
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40020400 	.word	0x40020400

080008a0 <_ZN3P105ClearEv>:
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	2200      	movs	r2, #0
 80008a6:	2140      	movs	r1, #64	; 0x40
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <_ZN3P105ClearEv+0x14>)
 80008aa:	f001 fdd1 	bl	8002450 <HAL_GPIO_WritePin>
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40020400 	.word	0x40020400

080008b8 <_ZN3P1011SetDirWriteEv>:
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008be:	2240      	movs	r2, #64	; 0x40
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008d0:	2203      	movs	r2, #3
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	4902      	ldr	r1, [pc, #8]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008d6:	4803      	ldr	r0, [pc, #12]	; (80008e4 <_ZN3P1011SetDirWriteEv+0x2c>)
 80008d8:	f001 fc0e 	bl	80020f8 <HAL_GPIO_Init>
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	200001d4 	.word	0x200001d4
 80008e4:	40020400 	.word	0x40020400

080008e8 <_ZN3BTD11pairWithHIDEv>:
        bool motionPlusInside;
        /** True if it's a Wii U Pro Controller. */
        bool wiiUProController;

        /** Call this function to pair with a HID device */
        void pairWithHID() {
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
                waitingForConnection = false;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2200      	movs	r2, #0
 80008f4:	721a      	strb	r2, [r3, #8]
                pairWithHIDDevice = true;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2201      	movs	r2, #1
 80008fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                hci_state = HCI_CHECK_DEVICE_SERVICE;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2206      	movs	r2, #6
 8000902:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        };
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <_ZN5BTHID4pairEv>:

        /** True if a device is connected */
        bool connected;

        /** Call this to start the pairing sequence with a device */
        void pair(void) {
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
                if(pBtd)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d004      	beq.n	800092c <_ZN5BTHID4pairEv+0x1a>
                        pBtd->pairWithHID();
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff ffde 	bl	80008e8 <_ZN3BTD11pairWithHIDEv>
        };
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <_ZN5BTHID6onInitEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        void onInit() {
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
                if(pFuncOnInit)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d002      	beq.n	800094a <_ZN5BTHID6onInitEv+0x16>
                        pFuncOnInit(); // Call the user function
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	4798      	blx	r3
                OnInitBTHID();
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	331c      	adds	r3, #28
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	4798      	blx	r3
        };
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <_ZN5BTHID21ParseBTHIDControlDataEhPh>:
        };
        /**
         * Same as ParseBTHIDData for reports that are sent through the
         * interrupt pipe (in response to a GET_REPORT).
         */
        virtual void ParseBTHIDControlData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 800095e:	b480      	push	{r7}
 8000960:	b085      	sub	sp, #20
 8000962:	af00      	add	r7, sp, #0
 8000964:	60f8      	str	r0, [r7, #12]
 8000966:	460b      	mov	r3, r1
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	72fb      	strb	r3, [r7, #11]
                return;
 800096c:	bf00      	nop
        }
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <_ZN9PS4ParserC1Ev>:

/** This class parses all the data sent by the PS4 controller */
class PS4Parser {
public:
        /** Constructor for the PS4Parser class. */
        PS4Parser() {
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	4a05      	ldr	r2, [pc, #20]	; (8000998 <_ZN9PS4ParserC1Ev+0x20>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	601a      	str	r2, [r3, #0]
                Reset();
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f010 f864 	bl	8010a54 <_ZN9PS4Parser5ResetEv>
        };
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	08012914 	.word	0x08012914

0800099c <_ZN9PS4Parser12setRumbleOffEv>:
                setRumbleOff();
                setLedOff();
        };

        /** Set rumble off. */
        void setRumbleOff() {
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
                setRumbleOn(0, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2100      	movs	r1, #0
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f000 f81c 	bl	80009e6 <_ZN9PS4Parser11setRumbleOnEhh>
        };
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>:

        /**
         * Turn on rumble.
         * @param mode Either ::RumbleHigh or ::RumbleLow.
         */
        void setRumbleOn(RumbleEnum mode) {
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
 80009be:	460b      	mov	r3, r1
 80009c0:	70fb      	strb	r3, [r7, #3]
                if (mode == RumbleLow)
 80009c2:	78fb      	ldrb	r3, [r7, #3]
 80009c4:	2b20      	cmp	r3, #32
 80009c6:	d105      	bne.n	80009d4 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x1e>
                        setRumbleOn(0x00, 0xFF);
 80009c8:	22ff      	movs	r2, #255	; 0xff
 80009ca:	2100      	movs	r1, #0
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f000 f80a 	bl	80009e6 <_ZN9PS4Parser11setRumbleOnEhh>
                else
                        setRumbleOn(0xFF, 0x00);
        };
 80009d2:	e004      	b.n	80009de <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x28>
                        setRumbleOn(0xFF, 0x00);
 80009d4:	2200      	movs	r2, #0
 80009d6:	21ff      	movs	r1, #255	; 0xff
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f000 f804 	bl	80009e6 <_ZN9PS4Parser11setRumbleOnEhh>
        };
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <_ZN9PS4Parser11setRumbleOnEhh>:
        /**
         * Turn on rumble.
         * @param bigRumble   Value for big motor.
         * @param smallRumble Value for small motor.
         */
        void setRumbleOn(uint8_t bigRumble, uint8_t smallRumble) {
 80009e6:	b480      	push	{r7}
 80009e8:	b083      	sub	sp, #12
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
 80009ee:	460b      	mov	r3, r1
 80009f0:	70fb      	strb	r3, [r7, #3]
 80009f2:	4613      	mov	r3, r2
 80009f4:	70bb      	strb	r3, [r7, #2]
                ps4Output.bigRumble = bigRumble;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	78fa      	ldrb	r2, [r7, #3]
 80009fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                ps4Output.smallRumble = smallRumble;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	78ba      	ldrb	r2, [r7, #2]
 8000a02:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                ps4Output.reportChanged = true;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <_ZN9PS4Parser6setLedEhhh>:

        /**
         * Use this to set the color using RGB values.
         * @param r,g,b RGB value.
         */
        void setLed(uint8_t r, uint8_t g, uint8_t b) {
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	4608      	mov	r0, r1
 8000a24:	4611      	mov	r1, r2
 8000a26:	461a      	mov	r2, r3
 8000a28:	4603      	mov	r3, r0
 8000a2a:	70fb      	strb	r3, [r7, #3]
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	70bb      	strb	r3, [r7, #2]
 8000a30:	4613      	mov	r3, r2
 8000a32:	707b      	strb	r3, [r7, #1]
                ps4Output.r = r;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	78fa      	ldrb	r2, [r7, #3]
 8000a38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                ps4Output.g = g;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	78ba      	ldrb	r2, [r7, #2]
 8000a40:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                ps4Output.b = b;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	787a      	ldrb	r2, [r7, #1]
 8000a48:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                ps4Output.reportChanged = true;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <_ZN9PS4Parser6setLedE10ColorsEnum>:

        /**
         * Use this to set the color using the predefined colors in ::ColorsEnum.
         * @param color The desired color.
         */
        void setLed(ColorsEnum color) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
                setLed((uint8_t)(color >> 16), (uint8_t)(color >> 8), (uint8_t)(color));
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	141b      	asrs	r3, r3, #16
 8000a6e:	b2d9      	uxtb	r1, r3
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	121b      	asrs	r3, r3, #8
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff ffcd 	bl	8000a1a <_ZN9PS4Parser6setLedEhhh>
        };
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <_ZN5PS4BTC1EP3BTDbPKc>:
         * Constructor for the PS4BT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         * @param  pin   Write the pin to BTD#btdPin. If argument is omitted, then "0000" will be used.
         */
        PS4BT(BTD *p, bool pair = false, const char *pin = "0000") :
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	4613      	mov	r3, r2
 8000a96:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair, pin) {
 8000a98:	68f8      	ldr	r0, [r7, #12]
 8000a9a:	79fa      	ldrb	r2, [r7, #7]
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	68b9      	ldr	r1, [r7, #8]
 8000aa0:	f00e fdf2 	bl	800f688 <_ZN5BTHIDC1EP3BTDbPKc>
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	3378      	adds	r3, #120	; 0x78
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff65 	bl	8000978 <_ZN9PS4ParserC1Ev>
 8000aae:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <_ZN5PS4BTC1EP3BTDbPKc+0x48>)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <_ZN5PS4BTC1EP3BTDbPKc+0x4c>)
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	679a      	str	r2, [r3, #120]	; 0x78
                PS4Parser::Reset();
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	3378      	adds	r3, #120	; 0x78
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f00f ffc8 	bl	8010a54 <_ZN9PS4Parser5ResetEv>
        };
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	080128d8 	.word	0x080128d8
 8000ad4:	08012908 	.word	0x08012908

08000ad8 <_ZN5PS4BT9connectedEv>:

        /**
         * Used to check if a PS4 controller is connected.
         * @return Returns true if it is connected.
         */
        bool connected() {
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
                return BTHID::connected;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	7d5b      	ldrb	r3, [r3, #21]
        };
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <_ZN5PS4BT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	460b      	mov	r3, r1
 8000afa:	607a      	str	r2, [r7, #4]
 8000afc:	72fb      	strb	r3, [r7, #11]
                PS4Parser::Parse(len, buf);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	3378      	adds	r3, #120	; 0x78
 8000b02:	7af9      	ldrb	r1, [r7, #11]
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f00f fedf 	bl	80108ca <_ZN9PS4Parser5ParseEhPh>
        };
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <_ZN5PS4BT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3378      	adds	r3, #120	; 0x78
 8000b20:	4618      	mov	r0, r3
 8000b22:	f00f ff97 	bl	8010a54 <_ZN9PS4Parser5ResetEv>
                enable_sixaxis(); // Make the controller send out the entire output report
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f000 f855 	bl	8000bd6 <_ZN5PS4BT14enable_sixaxisEv>
                if (!pFuncOnInit)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d105      	bne.n	8000b40 <_ZN5PS4BT11OnInitBTHIDEv+0x2c>
                        setLed(Blue); // Only call this is a user function has not been set
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3378      	adds	r3, #120	; 0x78
 8000b38:	21ff      	movs	r1, #255	; 0xff
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff ff90 	bl	8000a60 <_ZN9PS4Parser6setLedE10ColorsEnum>
        };
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <_ZN5PS4BT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3378      	adds	r3, #120	; 0x78
 8000b54:	4618      	mov	r0, r3
 8000b56:	f00f ff7d 	bl	8010a54 <_ZN9PS4Parser5ResetEv>
        };
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <_ZN5PS4BT16sendOutputReportEP9PS4Output>:
        /**@}*/

        /** @name PS4Parser implementation */
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b096      	sub	sp, #88	; 0x58
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
 8000b6a:	6039      	str	r1, [r7, #0]
                uint8_t buf[79];
                memset(buf, 0, sizeof(buf));
 8000b6c:	f107 0308 	add.w	r3, r7, #8
 8000b70:	224f      	movs	r2, #79	; 0x4f
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f011 fd2d 	bl	80125d4 <memset>

                buf[0] = 0x52; // HID BT Set_report (0x50) | Report Type (Output 0x02)
 8000b7a:	2352      	movs	r3, #82	; 0x52
 8000b7c:	723b      	strb	r3, [r7, #8]
                buf[1] = 0x11; // Report ID
 8000b7e:	2311      	movs	r3, #17
 8000b80:	727b      	strb	r3, [r7, #9]
                buf[2] = 0x80;
 8000b82:	2380      	movs	r3, #128	; 0x80
 8000b84:	72bb      	strb	r3, [r7, #10]
                buf[4]= 0xFF;
 8000b86:	23ff      	movs	r3, #255	; 0xff
 8000b88:	733b      	strb	r3, [r7, #12]

                buf[7] = output->smallRumble; // Small Rumble
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	785b      	ldrb	r3, [r3, #1]
 8000b8e:	73fb      	strb	r3, [r7, #15]
                buf[8] = output->bigRumble; // Big rumble
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	743b      	strb	r3, [r7, #16]

                buf[9] = output->r; // Red
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	789b      	ldrb	r3, [r3, #2]
 8000b9a:	747b      	strb	r3, [r7, #17]
                buf[10] = output->g; // Green
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	78db      	ldrb	r3, [r3, #3]
 8000ba0:	74bb      	strb	r3, [r7, #18]
                buf[11] = output->b; // Blue
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	791b      	ldrb	r3, [r3, #4]
 8000ba6:	74fb      	strb	r3, [r7, #19]

                buf[12] = output->flashOn; // Time to flash bright (255 = 2.5 seconds)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	795b      	ldrb	r3, [r3, #5]
 8000bac:	753b      	strb	r3, [r7, #20]
                buf[13] = output->flashOff; // Time to flash dark (255 = 2.5 seconds)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	799b      	ldrb	r3, [r3, #6]
 8000bb2:	757b      	strb	r3, [r7, #21]

                output->reportChanged = false;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	71da      	strb	r2, [r3, #7]

                // The PS4 console actually set the four last bytes to a CRC32 checksum, but it seems like it is actually not needed

                HID_Command(buf, sizeof(buf));
 8000bba:	f107 0308 	add.w	r3, r7, #8
 8000bbe:	224f      	movs	r2, #79	; 0x4f
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f000 f81a 	bl	8000bfc <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000bc8:	bf00      	nop
 8000bca:	3758      	adds	r7, #88	; 0x58
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <_ZThn120_N5PS4BT16sendOutputReportEP9PS4Output>:
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000bd0:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 8000bd4:	e7c5      	b.n	8000b62 <_ZN5PS4BT16sendOutputReportEP9PS4Output>

08000bd6 <_ZN5PS4BT14enable_sixaxisEv>:
        /**@}*/

private:
        void enable_sixaxis() { // Command used to make the PS4 controller send out the entire output report
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b084      	sub	sp, #16
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
                uint8_t buf[2];
                buf[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
 8000bde:	2343      	movs	r3, #67	; 0x43
 8000be0:	733b      	strb	r3, [r7, #12]
                buf[1] = 0x02; // Report ID
 8000be2:	2302      	movs	r3, #2
 8000be4:	737b      	strb	r3, [r7, #13]

                HID_Command(buf, 2);
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	2202      	movs	r2, #2
 8000bec:	4619      	mov	r1, r3
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f000 f804 	bl	8000bfc <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <_ZN5PS4BT11HID_CommandEPhh>:

        void HID_Command(uint8_t *data, uint8_t nbytes) {
 8000bfc:	b590      	push	{r4, r7, lr}
 8000bfe:	b087      	sub	sp, #28
 8000c00:	af02      	add	r7, sp, #8
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	4613      	mov	r3, r2
 8000c08:	71fb      	strb	r3, [r7, #7]
                pBtd->L2CAP_Command(hci_handle, data, nbytes, control_scid[0], control_scid[1]);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	6898      	ldr	r0, [r3, #8]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	8999      	ldrh	r1, [r3, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	7d9b      	ldrb	r3, [r3, #22]
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	7dd2      	ldrb	r2, [r2, #23]
 8000c1a:	79fc      	ldrb	r4, [r7, #7]
 8000c1c:	9201      	str	r2, [sp, #4]
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	4623      	mov	r3, r4
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	f00d fdcc 	bl	800e7c0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
        };
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd90      	pop	{r4, r7, pc}

08000c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c34:	f001 f918 	bl	8001e68 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c38:	f000 f8ba 	bl	8000db0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c3c:	f000 f9e4 	bl	8001008 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000c40:	f000 f9b4 	bl	8000fac <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8000c44:	f000 f976 	bl	8000f34 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8000c48:	f00a ff08 	bl	800ba5c <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 8000c4c:	f000 f948 	bl	8000ee0 <_ZL13MX_TIM14_Initv>
  //MX_ADC1_Init();
  /* USER CODE BEGIN 2 */

  /* For the USB Host Shield Library*/
  SPI_Handle = hspi1;
 8000c50:	4a3d      	ldr	r2, [pc, #244]	; (8000d48 <main+0x118>)
 8000c52:	4b3e      	ldr	r3, [pc, #248]	; (8000d4c <main+0x11c>)
 8000c54:	4610      	mov	r0, r2
 8000c56:	4619      	mov	r1, r3
 8000c58:	2358      	movs	r3, #88	; 0x58
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	f011 fcac 	bl	80125b8 <memcpy>
  UART_Handle = huart2;
 8000c60:	4a3b      	ldr	r2, [pc, #236]	; (8000d50 <main+0x120>)
 8000c62:	4b3c      	ldr	r3, [pc, #240]	; (8000d54 <main+0x124>)
 8000c64:	4610      	mov	r0, r2
 8000c66:	4619      	mov	r1, r3
 8000c68:	2344      	movs	r3, #68	; 0x44
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	f011 fca4 	bl	80125b8 <memcpy>

  /* The Primary Timer, since using freeRTOS, not using systick */
  HAL_TIM_Base_Start_IT(&htim14);
 8000c70:	4839      	ldr	r0, [pc, #228]	; (8000d58 <main+0x128>)
 8000c72:	f004 fc7b 	bl	800556c <HAL_TIM_Base_Start_IT>

  /* Verify our CPU Frequency
   * We should get a 500ms delay here */
  Serial.print(F("\r\nCPU Frequency is: "));
 8000c76:	4939      	ldr	r1, [pc, #228]	; (8000d5c <main+0x12c>)
 8000c78:	4839      	ldr	r0, [pc, #228]	; (8000d60 <main+0x130>)
 8000c7a:	f7ff fc8f 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
  cpu_freq = HAL_RCC_GetHCLKFreq()/1000000;
 8000c7e:	f002 fe9d 	bl	80039bc <HAL_RCC_GetHCLKFreq>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4a37      	ldr	r2, [pc, #220]	; (8000d64 <main+0x134>)
 8000c86:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8a:	0c9b      	lsrs	r3, r3, #18
 8000c8c:	4a36      	ldr	r2, [pc, #216]	; (8000d68 <main+0x138>)
 8000c8e:	6013      	str	r3, [r2, #0]
  Serial.print((int)cpu_freq);
 8000c90:	4b35      	ldr	r3, [pc, #212]	; (8000d68 <main+0x138>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	220a      	movs	r2, #10
 8000c96:	4619      	mov	r1, r3
 8000c98:	4831      	ldr	r0, [pc, #196]	; (8000d60 <main+0x130>)
 8000c9a:	f7ff fcad 	bl	80005f8 <_ZN5Print5printEii>
  Serial.print("MHz");
 8000c9e:	4933      	ldr	r1, [pc, #204]	; (8000d6c <main+0x13c>)
 8000ca0:	482f      	ldr	r0, [pc, #188]	; (8000d60 <main+0x130>)
 8000ca2:	f7ff fc89 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print("\r\nStart");
 8000ca6:	4932      	ldr	r1, [pc, #200]	; (8000d70 <main+0x140>)
 8000ca8:	482d      	ldr	r0, [pc, #180]	; (8000d60 <main+0x130>)
 8000caa:	f7ff fc85 	bl	80005b8 <_ZN5Print5printEPKc>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14);
 8000cae:	4b2a      	ldr	r3, [pc, #168]	; (8000d58 <main+0x128>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	4b2f      	ldr	r3, [pc, #188]	; (8000d74 <main+0x144>)
 8000cb8:	801a      	strh	r2, [r3, #0]
  HAL_Delay(500);
 8000cba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cbe:	f001 f915 	bl	8001eec <HAL_Delay>
  timer_val2 = __HAL_TIM_GET_COUNTER(&htim14) - timer_val;
 8000cc2:	4b25      	ldr	r3, [pc, #148]	; (8000d58 <main+0x128>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	4b2a      	ldr	r3, [pc, #168]	; (8000d74 <main+0x144>)
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <main+0x148>)
 8000cd4:	801a      	strh	r2, [r3, #0]
  Serial.print("\r\nTime Elapsed is: ");
 8000cd6:	4929      	ldr	r1, [pc, #164]	; (8000d7c <main+0x14c>)
 8000cd8:	4821      	ldr	r0, [pc, #132]	; (8000d60 <main+0x130>)
 8000cda:	f7ff fc6d 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print((int)timer_val2/10);
 8000cde:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <main+0x148>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	4a27      	ldr	r2, [pc, #156]	; (8000d80 <main+0x150>)
 8000ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce8:	08db      	lsrs	r3, r3, #3
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	220a      	movs	r2, #10
 8000cee:	4619      	mov	r1, r3
 8000cf0:	481b      	ldr	r0, [pc, #108]	; (8000d60 <main+0x130>)
 8000cf2:	f7ff fc81 	bl	80005f8 <_ZN5Print5printEii>
  Serial.print(" ms");
 8000cf6:	4923      	ldr	r1, [pc, #140]	; (8000d84 <main+0x154>)
 8000cf8:	4819      	ldr	r0, [pc, #100]	; (8000d60 <main+0x130>)
 8000cfa:	f7ff fc5d 	bl	80005b8 <_ZN5Print5printEPKc>
//  hal_gettick = HAL_GetTick();
//  hal_gettick/1000;

  Serial.print((int)hal_gettick);
 8000cfe:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <main+0x158>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	220a      	movs	r2, #10
 8000d04:	4619      	mov	r1, r3
 8000d06:	4816      	ldr	r0, [pc, #88]	; (8000d60 <main+0x130>)
 8000d08:	f7ff fc76 	bl	80005f8 <_ZN5Print5printEii>



  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 8000d0c:	f008 f958 	bl	8008fc0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of getBT */
  getBTHandle = osThreadNew(StartGetBT, NULL, &getBT_attributes);
 8000d10:	4a1e      	ldr	r2, [pc, #120]	; (8000d8c <main+0x15c>)
 8000d12:	2100      	movs	r1, #0
 8000d14:	481e      	ldr	r0, [pc, #120]	; (8000d90 <main+0x160>)
 8000d16:	f008 f99d 	bl	8009054 <osThreadNew>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	4a1d      	ldr	r2, [pc, #116]	; (8000d94 <main+0x164>)
 8000d1e:	6013      	str	r3, [r2, #0]

  /* creation of sendUSB */
  sendUSBHandle = osThreadNew(StartSendUSB, NULL, &sendUSB_attributes);
 8000d20:	4a1d      	ldr	r2, [pc, #116]	; (8000d98 <main+0x168>)
 8000d22:	2100      	movs	r1, #0
 8000d24:	481d      	ldr	r0, [pc, #116]	; (8000d9c <main+0x16c>)
 8000d26:	f008 f995 	bl	8009054 <osThreadNew>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	4a1c      	ldr	r2, [pc, #112]	; (8000da0 <main+0x170>)
 8000d2e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* Used to determine if a controller just connected */
  controllerConnectedHandle = osThreadNew(StartControllerConnected, NULL, &controllerConnected_attributes);
 8000d30:	4a1c      	ldr	r2, [pc, #112]	; (8000da4 <main+0x174>)
 8000d32:	2100      	movs	r1, #0
 8000d34:	481c      	ldr	r0, [pc, #112]	; (8000da8 <main+0x178>)
 8000d36:	f008 f98d 	bl	8009054 <osThreadNew>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	4a1b      	ldr	r2, [pc, #108]	; (8000dac <main+0x17c>)
 8000d3e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d40:	f008 f962 	bl	8009008 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <main+0x114>
 8000d46:	bf00      	nop
 8000d48:	200002d8 	.word	0x200002d8
 8000d4c:	200001e8 	.word	0x200001e8
 8000d50:	20000330 	.word	0x20000330
 8000d54:	20000240 	.word	0x20000240
 8000d58:	20000284 	.word	0x20000284
 8000d5c:	080126cc 	.word	0x080126cc
 8000d60:	20000374 	.word	0x20000374
 8000d64:	431bde83 	.word	0x431bde83
 8000d68:	2000062c 	.word	0x2000062c
 8000d6c:	080126e4 	.word	0x080126e4
 8000d70:	080126e8 	.word	0x080126e8
 8000d74:	20000630 	.word	0x20000630
 8000d78:	20000632 	.word	0x20000632
 8000d7c:	080126f0 	.word	0x080126f0
 8000d80:	cccccccd 	.word	0xcccccccd
 8000d84:	08012704 	.word	0x08012704
 8000d88:	20000634 	.word	0x20000634
 8000d8c:	08012864 	.word	0x08012864
 8000d90:	08001115 	.word	0x08001115
 8000d94:	200002cc 	.word	0x200002cc
 8000d98:	08012888 	.word	0x08012888
 8000d9c:	08001779 	.word	0x08001779
 8000da0:	200002d0 	.word	0x200002d0
 8000da4:	080128ac 	.word	0x080128ac
 8000da8:	080010bd 	.word	0x080010bd
 8000dac:	200002d4 	.word	0x200002d4

08000db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b0ac      	sub	sp, #176	; 0xb0
 8000db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000dba:	2234      	movs	r2, #52	; 0x34
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f011 fc08 	bl	80125d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	225c      	movs	r2, #92	; 0x5c
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f011 fbf9 	bl	80125d4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	4b3c      	ldr	r3, [pc, #240]	; (8000ed8 <SystemClock_Config+0x128>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	4a3b      	ldr	r2, [pc, #236]	; (8000ed8 <SystemClock_Config+0x128>)
 8000dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df0:	6413      	str	r3, [r2, #64]	; 0x40
 8000df2:	4b39      	ldr	r3, [pc, #228]	; (8000ed8 <SystemClock_Config+0x128>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	4b36      	ldr	r3, [pc, #216]	; (8000edc <SystemClock_Config+0x12c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a35      	ldr	r2, [pc, #212]	; (8000edc <SystemClock_Config+0x12c>)
 8000e08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e0c:	6013      	str	r3, [r2, #0]
 8000e0e:	4b33      	ldr	r3, [pc, #204]	; (8000edc <SystemClock_Config+0x12c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e26:	2302      	movs	r3, #2
 8000e28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e34:	2304      	movs	r3, #4
 8000e36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e3a:	23a8      	movs	r3, #168	; 0xa8
 8000e3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e40:	2302      	movs	r3, #2
 8000e42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e46:	2307      	movs	r3, #7
 8000e48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e52:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e56:	4618      	mov	r0, r3
 8000e58:	f003 faf2 	bl	8004440 <HAL_RCC_OscConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	bf14      	ite	ne
 8000e62:	2301      	movne	r3, #1
 8000e64:	2300      	moveq	r3, #0
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e6c:	f000 fcaa 	bl	80017c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e70:	230f      	movs	r3, #15
 8000e72:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e74:	2302      	movs	r3, #2
 8000e76:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e7c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e80:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e86:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e88:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000e8c:	2105      	movs	r1, #5
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f002 fcae 	bl	80037f0 <HAL_RCC_ClockConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	bf14      	ite	ne
 8000e9a:	2301      	movne	r3, #1
 8000e9c:	2300      	moveq	r3, #0
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000ea4:	f000 fc8e 	bl	80017c4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000ea8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eac:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f002 fde6 	bl	8003a88 <HAL_RCCEx_PeriphCLKConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	bf14      	ite	ne
 8000ec2:	2301      	movne	r3, #1
 8000ec4:	2300      	moveq	r3, #0
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000ecc:	f000 fc7a 	bl	80017c4 <Error_Handler>
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	37b0      	adds	r7, #176	; 0xb0
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40007000 	.word	0x40007000

08000ee0 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <_ZL13MX_TIM14_Initv+0x4c>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <_ZL13MX_TIM14_Initv+0x50>)
 8000ee8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (168/2)*100 -1;
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <_ZL13MX_TIM14_Initv+0x4c>)
 8000eec:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000ef0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <_ZL13MX_TIM14_Initv+0x4c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <_ZL13MX_TIM14_Initv+0x4c>)
 8000efa:	f242 720f 	movw	r2, #9999	; 0x270f
 8000efe:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <_ZL13MX_TIM14_Initv+0x4c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <_ZL13MX_TIM14_Initv+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000f0c:	4807      	ldr	r0, [pc, #28]	; (8000f2c <_ZL13MX_TIM14_Initv+0x4c>)
 8000f0e:	f004 fadd 	bl	80054cc <HAL_TIM_Base_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	bf14      	ite	ne
 8000f18:	2301      	movne	r3, #1
 8000f1a:	2300      	moveq	r3, #0
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <_ZL13MX_TIM14_Initv+0x46>
  {
    Error_Handler();
 8000f22:	f000 fc4f 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000284 	.word	0x20000284
 8000f30:	40002000 	.word	0x40002000

08000f34 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f38:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <_ZL12MX_SPI1_Initv+0x70>)
 8000f3a:	4a1b      	ldr	r2, [pc, #108]	; (8000fa8 <_ZL12MX_SPI1_Initv+0x74>)
 8000f3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f3e:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <_ZL12MX_SPI1_Initv+0x70>)
 8000f40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <_ZL12MX_SPI1_Initv+0x70>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f4c:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <_ZL12MX_SPI1_Initv+0x70>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f52:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <_ZL12MX_SPI1_Initv+0x70>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <_ZL12MX_SPI1_Initv+0x70>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <_ZL12MX_SPI1_Initv+0x70>)
 8000f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f66:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <_ZL12MX_SPI1_Initv+0x70>)
 8000f68:	2218      	movs	r2, #24
 8000f6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <_ZL12MX_SPI1_Initv+0x70>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <_ZL12MX_SPI1_Initv+0x70>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <_ZL12MX_SPI1_Initv+0x70>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <_ZL12MX_SPI1_Initv+0x70>)
 8000f80:	220a      	movs	r2, #10
 8000f82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f84:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <_ZL12MX_SPI1_Initv+0x70>)
 8000f86:	f003 fcf9 	bl	800497c <HAL_SPI_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	bf14      	ite	ne
 8000f90:	2301      	movne	r3, #1
 8000f92:	2300      	moveq	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8000f9a:	f000 fc13 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200001e8 	.word	0x200001e8
 8000fa8:	40013000 	.word	0x40013000

08000fac <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fb2:	4a14      	ldr	r2, [pc, #80]	; (8001004 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000fb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fb6:	4b12      	ldr	r3, [pc, #72]	; (8001000 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fca:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fe2:	4807      	ldr	r0, [pc, #28]	; (8001000 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fe4:	f004 fd16 	bl	8005a14 <HAL_UART_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	bf14      	ite	ne
 8000fee:	2301      	movne	r3, #1
 8000ff0:	2300      	moveq	r3, #0
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000ff8:	f000 fbe4 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000240 	.word	0x20000240
 8001004:	40004400 	.word	0x40004400

08001008 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
 800101c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <_ZL12MX_GPIO_Initv+0xa8>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a22      	ldr	r2, [pc, #136]	; (80010b0 <_ZL12MX_GPIO_Initv+0xa8>)
 8001028:	f043 0304 	orr.w	r3, r3, #4
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <_ZL12MX_GPIO_Initv+0xa8>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0304 	and.w	r3, r3, #4
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <_ZL12MX_GPIO_Initv+0xa8>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a1b      	ldr	r2, [pc, #108]	; (80010b0 <_ZL12MX_GPIO_Initv+0xa8>)
 8001044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <_ZL12MX_GPIO_Initv+0xa8>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <_ZL12MX_GPIO_Initv+0xa8>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a14      	ldr	r2, [pc, #80]	; (80010b0 <_ZL12MX_GPIO_Initv+0xa8>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <_ZL12MX_GPIO_Initv+0xa8>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <_ZL12MX_GPIO_Initv+0xa8>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <_ZL12MX_GPIO_Initv+0xa8>)
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <_ZL12MX_GPIO_Initv+0xa8>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800108e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001094:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <_ZL12MX_GPIO_Initv+0xac>)
 8001096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4619      	mov	r1, r3
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <_ZL12MX_GPIO_Initv+0xb0>)
 80010a4:	f001 f828 	bl	80020f8 <HAL_GPIO_Init>
}
 80010a8:	bf00      	nop
 80010aa:	3728      	adds	r7, #40	; 0x28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40023800 	.word	0x40023800
 80010b4:	10210000 	.word	0x10210000
 80010b8:	40020800 	.word	0x40020800

080010bc <_Z24StartControllerConnectedPv>:

/* USER CODE BEGIN 4 */
/*Rumble when connected */
void StartControllerConnected(void *argument)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendUSB */
  
  /* Infinite loop */
  for(;;)
  {
    if(PS4.connected() && !rumble_once) {
 80010c4:	4810      	ldr	r0, [pc, #64]	; (8001108 <_Z24StartControllerConnectedPv+0x4c>)
 80010c6:	f7ff fd07 	bl	8000ad8 <_ZN5PS4BT9connectedEv>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d005      	beq.n	80010dc <_Z24StartControllerConnectedPv+0x20>
 80010d0:	4b0e      	ldr	r3, [pc, #56]	; (800110c <_Z24StartControllerConnectedPv+0x50>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d101      	bne.n	80010dc <_Z24StartControllerConnectedPv+0x20>
 80010d8:	2301      	movs	r3, #1
 80010da:	e000      	b.n	80010de <_Z24StartControllerConnectedPv+0x22>
 80010dc:	2300      	movs	r3, #0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d00d      	beq.n	80010fe <_Z24StartControllerConnectedPv+0x42>
      PS4.setRumbleOn(RumbleLow);
 80010e2:	2120      	movs	r1, #32
 80010e4:	480a      	ldr	r0, [pc, #40]	; (8001110 <_Z24StartControllerConnectedPv+0x54>)
 80010e6:	f7ff fc66 	bl	80009b6 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>
      osDelay(500);
 80010ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ee:	f008 f843 	bl	8009178 <osDelay>
      PS4.setRumbleOff();
 80010f2:	4807      	ldr	r0, [pc, #28]	; (8001110 <_Z24StartControllerConnectedPv+0x54>)
 80010f4:	f7ff fc52 	bl	800099c <_ZN9PS4Parser12setRumbleOffEv>
      rumble_once = 1;
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <_Z24StartControllerConnectedPv+0x50>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	701a      	strb	r2, [r3, #0]
    }
    osDelay(1);
 80010fe:	2001      	movs	r0, #1
 8001100:	f008 f83a 	bl	8009178 <osDelay>
    if(PS4.connected() && !rumble_once) {
 8001104:	e7de      	b.n	80010c4 <_Z24StartControllerConnectedPv+0x8>
 8001106:	bf00      	nop
 8001108:	2000055c 	.word	0x2000055c
 800110c:	20000625 	.word	0x20000625
 8001110:	200005d4 	.word	0x200005d4

08001114 <_Z10StartGetBTPv>:
  }
  /* USER CODE END StartControllerConnected */
}
/* USER CODE END 4 */
void StartGetBT(void *argument)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */

  /* USER CODE BEGIN 5 */
  if (Usb.Init() == -1) {
 800111c:	48aa      	ldr	r0, [pc, #680]	; (80013c8 <_Z10StartGetBTPv+0x2b4>)
 800111e:	f000 fb5f 	bl	80017e0 <_ZN8MAX3421eI3P102P9E4InitEv>
 8001122:	4603      	mov	r3, r0
 8001124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001128:	bf0c      	ite	eq
 800112a:	2301      	moveq	r3, #1
 800112c:	2300      	movne	r3, #0
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	d004      	beq.n	800113e <_Z10StartGetBTPv+0x2a>
  		Serial.print(F("\r\nOSC did not start"));
 8001134:	49a5      	ldr	r1, [pc, #660]	; (80013cc <_Z10StartGetBTPv+0x2b8>)
 8001136:	48a6      	ldr	r0, [pc, #664]	; (80013d0 <_Z10StartGetBTPv+0x2bc>)
 8001138:	f7ff fa30 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
  		while (1); // Halt
 800113c:	e7fe      	b.n	800113c <_Z10StartGetBTPv+0x28>
  }
  Serial.print(F("\r\nPS4 Bluetooth Library Started"));
 800113e:	49a5      	ldr	r1, [pc, #660]	; (80013d4 <_Z10StartGetBTPv+0x2c0>)
 8001140:	48a3      	ldr	r0, [pc, #652]	; (80013d0 <_Z10StartGetBTPv+0x2bc>)
 8001142:	f7ff fa2b 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>

  /*Initialize our gamepad, this is for use on a PC*/
  gameHID.JoyX = 0;
 8001146:	4ba4      	ldr	r3, [pc, #656]	; (80013d8 <_Z10StartGetBTPv+0x2c4>)
 8001148:	2200      	movs	r2, #0
 800114a:	709a      	strb	r2, [r3, #2]
  gameHID.JoyY = 0;
 800114c:	4ba2      	ldr	r3, [pc, #648]	; (80013d8 <_Z10StartGetBTPv+0x2c4>)
 800114e:	2200      	movs	r2, #0
 8001150:	70da      	strb	r2, [r3, #3]
  gameHID.Joy2X = 0;
 8001152:	4ba1      	ldr	r3, [pc, #644]	; (80013d8 <_Z10StartGetBTPv+0x2c4>)
 8001154:	2200      	movs	r2, #0
 8001156:	711a      	strb	r2, [r3, #4]
  gameHID.Joy2Y = 0;
 8001158:	4b9f      	ldr	r3, [pc, #636]	; (80013d8 <_Z10StartGetBTPv+0x2c4>)
 800115a:	2200      	movs	r2, #0
 800115c:	715a      	strb	r2, [r3, #5]
  gameHID.Joy_LT = 0;
 800115e:	4b9e      	ldr	r3, [pc, #632]	; (80013d8 <_Z10StartGetBTPv+0x2c4>)
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
  gameHID.Joy_RT = 0;
 8001164:	4b9c      	ldr	r3, [pc, #624]	; (80013d8 <_Z10StartGetBTPv+0x2c4>)
 8001166:	2200      	movs	r2, #0
 8001168:	705a      	strb	r2, [r3, #1]
  gameHID.ps4ButtonsTag.dummy = 0;
 800116a:	4a9b      	ldr	r2, [pc, #620]	; (80013d8 <_Z10StartGetBTPv+0x2c4>)
 800116c:	7993      	ldrb	r3, [r2, #6]
 800116e:	f36f 0300 	bfc	r3, #0, #1
 8001172:	7193      	strb	r3, [r2, #6]


  /* Initalize our Xbox Controller data that we will send in our hid reports */
  xboxHID.startByte = 0x00;
 8001174:	4b99      	ldr	r3, [pc, #612]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 8001176:	2200      	movs	r2, #0
 8001178:	701a      	strb	r2, [r3, #0]
  xboxHID.bLength = 20;
 800117a:	4b98      	ldr	r3, [pc, #608]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 800117c:	2214      	movs	r2, #20
 800117e:	705a      	strb	r2, [r3, #1]
  xboxHID.dButtons = 0x00;
 8001180:	4b96      	ldr	r3, [pc, #600]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 8001182:	2200      	movs	r2, #0
 8001184:	709a      	strb	r2, [r3, #2]
  xboxHID.A = 0;
 8001186:	4b95      	ldr	r3, [pc, #596]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 8001188:	2200      	movs	r2, #0
 800118a:	711a      	strb	r2, [r3, #4]
  xboxHID.B = 0;
 800118c:	4b93      	ldr	r3, [pc, #588]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 800118e:	2200      	movs	r2, #0
 8001190:	715a      	strb	r2, [r3, #5]
  xboxHID.X = 0;
 8001192:	4b92      	ldr	r3, [pc, #584]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 8001194:	2200      	movs	r2, #0
 8001196:	719a      	strb	r2, [r3, #6]
  xboxHID.Y = 0;
 8001198:	4b90      	ldr	r3, [pc, #576]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 800119a:	2200      	movs	r2, #0
 800119c:	71da      	strb	r2, [r3, #7]
  xboxHID.BLACK = 0;
 800119e:	4b8f      	ldr	r3, [pc, #572]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	721a      	strb	r2, [r3, #8]
  xboxHID.WHITE = 0;
 80011a4:	4b8d      	ldr	r3, [pc, #564]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	725a      	strb	r2, [r3, #9]
  xboxHID.L = 0;
 80011aa:	4b8c      	ldr	r3, [pc, #560]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	729a      	strb	r2, [r3, #10]
  xboxHID.R = 0;
 80011b0:	4b8a      	ldr	r3, [pc, #552]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	72da      	strb	r2, [r3, #11]
  xboxHID.leftStickX = 0;
 80011b6:	4b89      	ldr	r3, [pc, #548]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	819a      	strh	r2, [r3, #12]
  xboxHID.leftStickY = 0;
 80011bc:	4b87      	ldr	r3, [pc, #540]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	81da      	strh	r2, [r3, #14]
  xboxHID.rightStickX = 0;
 80011c2:	4b86      	ldr	r3, [pc, #536]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	821a      	strh	r2, [r3, #16]
  xboxHID.rightStickY = 0;
 80011c8:	4b84      	ldr	r3, [pc, #528]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	825a      	strh	r2, [r3, #18]
//		}
//		if(usb_failed || usb_failed2) {
//			Serial.print("\r\nUSBd failed");
//		}

		Usb.Task();
 80011ce:	487e      	ldr	r0, [pc, #504]	; (80013c8 <_Z10StartGetBTPv+0x2b4>)
 80011d0:	f010 f97e 	bl	80114d0 <_ZN3USB4TaskEv>
		if (PS4.connected()) {
 80011d4:	4882      	ldr	r0, [pc, #520]	; (80013e0 <_Z10StartGetBTPv+0x2cc>)
 80011d6:	f7ff fc7f 	bl	8000ad8 <_ZN5PS4BT9connectedEv>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f000 8296 	beq.w	800170e <_Z10StartGetBTPv+0x5fa>
			ps4_connected = 1;
 80011e2:	4b80      	ldr	r3, [pc, #512]	; (80013e4 <_Z10StartGetBTPv+0x2d0>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	701a      	strb	r2, [r3, #0]
			LeftHatX_val = PS4.getAnalogHat(LeftHatX);
 80011e8:	2100      	movs	r1, #0
 80011ea:	487f      	ldr	r0, [pc, #508]	; (80013e8 <_Z10StartGetBTPv+0x2d4>)
 80011ec:	f00f fb5d 	bl	80108aa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b7d      	ldr	r3, [pc, #500]	; (80013ec <_Z10StartGetBTPv+0x2d8>)
 80011f6:	701a      	strb	r2, [r3, #0]
			LeftHatY_val = PS4.getAnalogHat(LeftHatY);
 80011f8:	2101      	movs	r1, #1
 80011fa:	487b      	ldr	r0, [pc, #492]	; (80013e8 <_Z10StartGetBTPv+0x2d4>)
 80011fc:	f00f fb55 	bl	80108aa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	4b7a      	ldr	r3, [pc, #488]	; (80013f0 <_Z10StartGetBTPv+0x2dc>)
 8001206:	701a      	strb	r2, [r3, #0]
			RightHatX_val = PS4.getAnalogHat(RightHatX);
 8001208:	2102      	movs	r1, #2
 800120a:	4877      	ldr	r0, [pc, #476]	; (80013e8 <_Z10StartGetBTPv+0x2d4>)
 800120c:	f00f fb4d 	bl	80108aa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	4b77      	ldr	r3, [pc, #476]	; (80013f4 <_Z10StartGetBTPv+0x2e0>)
 8001216:	701a      	strb	r2, [r3, #0]
			RightHatY_val = PS4.getAnalogHat(RightHatY);
 8001218:	2103      	movs	r1, #3
 800121a:	4873      	ldr	r0, [pc, #460]	; (80013e8 <_Z10StartGetBTPv+0x2d4>)
 800121c:	f00f fb45 	bl	80108aa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	4b74      	ldr	r3, [pc, #464]	; (80013f8 <_Z10StartGetBTPv+0x2e4>)
 8001226:	701a      	strb	r2, [r3, #0]

			/* Let's have a builtin deadzone */
			if (LeftHatX_val > 137 || LeftHatX_val < 117 || LeftHatY_val > 137 || LeftHatY_val < 117) {// || RightHatX_val > 137 || RightHatX_val < 117 || RightHatY_val > 137 || RightHatY_val < 117) {
 8001228:	4b70      	ldr	r3, [pc, #448]	; (80013ec <_Z10StartGetBTPv+0x2d8>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b89      	cmp	r3, #137	; 0x89
 800122e:	d80b      	bhi.n	8001248 <_Z10StartGetBTPv+0x134>
 8001230:	4b6e      	ldr	r3, [pc, #440]	; (80013ec <_Z10StartGetBTPv+0x2d8>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b74      	cmp	r3, #116	; 0x74
 8001236:	d907      	bls.n	8001248 <_Z10StartGetBTPv+0x134>
 8001238:	4b6d      	ldr	r3, [pc, #436]	; (80013f0 <_Z10StartGetBTPv+0x2dc>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b89      	cmp	r3, #137	; 0x89
 800123e:	d803      	bhi.n	8001248 <_Z10StartGetBTPv+0x134>
 8001240:	4b6b      	ldr	r3, [pc, #428]	; (80013f0 <_Z10StartGetBTPv+0x2dc>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b74      	cmp	r3, #116	; 0x74
 8001246:	d82d      	bhi.n	80012a4 <_Z10StartGetBTPv+0x190>
				gameHID.JoyX = PS4.getAnalogHat(LeftHatX) - 128;
 8001248:	2100      	movs	r1, #0
 800124a:	4867      	ldr	r0, [pc, #412]	; (80013e8 <_Z10StartGetBTPv+0x2d4>)
 800124c:	f00f fb2d 	bl	80108aa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001250:	4603      	mov	r3, r0
 8001252:	3b80      	subs	r3, #128	; 0x80
 8001254:	b2db      	uxtb	r3, r3
 8001256:	b25a      	sxtb	r2, r3
 8001258:	4b5f      	ldr	r3, [pc, #380]	; (80013d8 <_Z10StartGetBTPv+0x2c4>)
 800125a:	709a      	strb	r2, [r3, #2]
				gameHID.JoyY = PS4.getAnalogHat(LeftHatY) - 128;
 800125c:	2101      	movs	r1, #1
 800125e:	4862      	ldr	r0, [pc, #392]	; (80013e8 <_Z10StartGetBTPv+0x2d4>)
 8001260:	f00f fb23 	bl	80108aa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001264:	4603      	mov	r3, r0
 8001266:	3b80      	subs	r3, #128	; 0x80
 8001268:	b2db      	uxtb	r3, r3
 800126a:	b25a      	sxtb	r2, r3
 800126c:	4b5a      	ldr	r3, [pc, #360]	; (80013d8 <_Z10StartGetBTPv+0x2c4>)
 800126e:	70da      	strb	r2, [r3, #3]
				xboxHID.leftStickX = gameHID.JoyX << 8;	//only getting 8 bit value from bt
 8001270:	4b59      	ldr	r3, [pc, #356]	; (80013d8 <_Z10StartGetBTPv+0x2c4>)
 8001272:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	b21a      	sxth	r2, r3
 800127a:	4b58      	ldr	r3, [pc, #352]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 800127c:	819a      	strh	r2, [r3, #12]
				xboxHID.leftStickY = gameHID.JoyY << 8;	//xbox uses 16 bit signed
 800127e:	4b56      	ldr	r3, [pc, #344]	; (80013d8 <_Z10StartGetBTPv+0x2c4>)
 8001280:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b21a      	sxth	r2, r3
 8001288:	4b54      	ldr	r3, [pc, #336]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 800128a:	81da      	strh	r2, [r3, #14]
				/* The Y axis by default is inverted on the Xbox */
				xboxHID.leftStickY = -xboxHID.leftStickY-128;
 800128c:	4b53      	ldr	r3, [pc, #332]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 800128e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001292:	b29a      	uxth	r2, r3
 8001294:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001298:	1a9b      	subs	r3, r3, r2
 800129a:	b29b      	uxth	r3, r3
 800129c:	b21a      	sxth	r2, r3
 800129e:	4b4f      	ldr	r3, [pc, #316]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 80012a0:	81da      	strh	r2, [r3, #14]
 80012a2:	e00b      	b.n	80012bc <_Z10StartGetBTPv+0x1a8>

			} else {
				gameHID.JoyX = 0;
 80012a4:	4b4c      	ldr	r3, [pc, #304]	; (80013d8 <_Z10StartGetBTPv+0x2c4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	709a      	strb	r2, [r3, #2]
				gameHID.JoyY = 0;
 80012aa:	4b4b      	ldr	r3, [pc, #300]	; (80013d8 <_Z10StartGetBTPv+0x2c4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	70da      	strb	r2, [r3, #3]
				xboxHID.leftStickX = 0;
 80012b0:	4b4a      	ldr	r3, [pc, #296]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	819a      	strh	r2, [r3, #12]
				xboxHID.leftStickY = 0;
 80012b6:	4b49      	ldr	r3, [pc, #292]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	81da      	strh	r2, [r3, #14]
			}
			if(RightHatX_val > 137 || RightHatX_val < 117 || RightHatY_val > 137 || RightHatY_val < 117) {
 80012bc:	4b4d      	ldr	r3, [pc, #308]	; (80013f4 <_Z10StartGetBTPv+0x2e0>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b89      	cmp	r3, #137	; 0x89
 80012c2:	d80b      	bhi.n	80012dc <_Z10StartGetBTPv+0x1c8>
 80012c4:	4b4b      	ldr	r3, [pc, #300]	; (80013f4 <_Z10StartGetBTPv+0x2e0>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b74      	cmp	r3, #116	; 0x74
 80012ca:	d907      	bls.n	80012dc <_Z10StartGetBTPv+0x1c8>
 80012cc:	4b4a      	ldr	r3, [pc, #296]	; (80013f8 <_Z10StartGetBTPv+0x2e4>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b89      	cmp	r3, #137	; 0x89
 80012d2:	d803      	bhi.n	80012dc <_Z10StartGetBTPv+0x1c8>
 80012d4:	4b48      	ldr	r3, [pc, #288]	; (80013f8 <_Z10StartGetBTPv+0x2e4>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b74      	cmp	r3, #116	; 0x74
 80012da:	d82d      	bhi.n	8001338 <_Z10StartGetBTPv+0x224>
				gameHID.Joy2X = PS4.getAnalogHat(RightHatX) - 128;
 80012dc:	2102      	movs	r1, #2
 80012de:	4842      	ldr	r0, [pc, #264]	; (80013e8 <_Z10StartGetBTPv+0x2d4>)
 80012e0:	f00f fae3 	bl	80108aa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80012e4:	4603      	mov	r3, r0
 80012e6:	3b80      	subs	r3, #128	; 0x80
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	b25a      	sxtb	r2, r3
 80012ec:	4b3a      	ldr	r3, [pc, #232]	; (80013d8 <_Z10StartGetBTPv+0x2c4>)
 80012ee:	711a      	strb	r2, [r3, #4]
				gameHID.Joy2Y = PS4.getAnalogHat(RightHatY) - 128;
 80012f0:	2103      	movs	r1, #3
 80012f2:	483d      	ldr	r0, [pc, #244]	; (80013e8 <_Z10StartGetBTPv+0x2d4>)
 80012f4:	f00f fad9 	bl	80108aa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80012f8:	4603      	mov	r3, r0
 80012fa:	3b80      	subs	r3, #128	; 0x80
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	b25a      	sxtb	r2, r3
 8001300:	4b35      	ldr	r3, [pc, #212]	; (80013d8 <_Z10StartGetBTPv+0x2c4>)
 8001302:	715a      	strb	r2, [r3, #5]
				xboxHID.rightStickX = gameHID.Joy2X << 8;
 8001304:	4b34      	ldr	r3, [pc, #208]	; (80013d8 <_Z10StartGetBTPv+0x2c4>)
 8001306:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	b21a      	sxth	r2, r3
 800130e:	4b33      	ldr	r3, [pc, #204]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 8001310:	821a      	strh	r2, [r3, #16]
				xboxHID.rightStickY = gameHID.Joy2Y << 8;
 8001312:	4b31      	ldr	r3, [pc, #196]	; (80013d8 <_Z10StartGetBTPv+0x2c4>)
 8001314:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	b21a      	sxth	r2, r3
 800131c:	4b2f      	ldr	r3, [pc, #188]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 800131e:	825a      	strh	r2, [r3, #18]

				/* The Y axis by default is inverted on the Xbox */
				xboxHID.rightStickY = -xboxHID.rightStickY - 128;
 8001320:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 8001322:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001326:	b29a      	uxth	r2, r3
 8001328:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800132c:	1a9b      	subs	r3, r3, r2
 800132e:	b29b      	uxth	r3, r3
 8001330:	b21a      	sxth	r2, r3
 8001332:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 8001334:	825a      	strh	r2, [r3, #18]
 8001336:	e00b      	b.n	8001350 <_Z10StartGetBTPv+0x23c>

			} else {
				gameHID.Joy2X = 0;
 8001338:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <_Z10StartGetBTPv+0x2c4>)
 800133a:	2200      	movs	r2, #0
 800133c:	711a      	strb	r2, [r3, #4]
				gameHID.Joy2Y = 0;
 800133e:	4b26      	ldr	r3, [pc, #152]	; (80013d8 <_Z10StartGetBTPv+0x2c4>)
 8001340:	2200      	movs	r2, #0
 8001342:	715a      	strb	r2, [r3, #5]
				xboxHID.rightStickX = 0;
 8001344:	4b25      	ldr	r3, [pc, #148]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 8001346:	2200      	movs	r2, #0
 8001348:	821a      	strh	r2, [r3, #16]
				xboxHID.rightStickY = 0;
 800134a:	4b24      	ldr	r3, [pc, #144]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 800134c:	2200      	movs	r2, #0
 800134e:	825a      	strh	r2, [r3, #18]
			}

			xboxHID.L = PS4.getAnalogButton(L2);
 8001350:	2108      	movs	r1, #8
 8001352:	4825      	ldr	r0, [pc, #148]	; (80013e8 <_Z10StartGetBTPv+0x2d4>)
 8001354:	f00f fa90 	bl	8010878 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001358:	4603      	mov	r3, r0
 800135a:	461a      	mov	r2, r3
 800135c:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 800135e:	729a      	strb	r2, [r3, #10]
			xboxHID.R = PS4.getAnalogButton(R2);
 8001360:	2109      	movs	r1, #9
 8001362:	4821      	ldr	r0, [pc, #132]	; (80013e8 <_Z10StartGetBTPv+0x2d4>)
 8001364:	f00f fa88 	bl	8010878 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001368:	4603      	mov	r3, r0
 800136a:	461a      	mov	r2, r3
 800136c:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 800136e:	72da      	strb	r2, [r3, #11]
			gameHID.Joy_LT = xboxHID.L - 128;
 8001370:	4b1a      	ldr	r3, [pc, #104]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 8001372:	7a9b      	ldrb	r3, [r3, #10]
 8001374:	3b80      	subs	r3, #128	; 0x80
 8001376:	b2db      	uxtb	r3, r3
 8001378:	b25a      	sxtb	r2, r3
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <_Z10StartGetBTPv+0x2c4>)
 800137c:	701a      	strb	r2, [r3, #0]
			gameHID.Joy_RT = xboxHID.R - 128;
 800137e:	4b17      	ldr	r3, [pc, #92]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 8001380:	7adb      	ldrb	r3, [r3, #11]
 8001382:	3b80      	subs	r3, #128	; 0x80
 8001384:	b2db      	uxtb	r3, r3
 8001386:	b25a      	sxtb	r2, r3
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <_Z10StartGetBTPv+0x2c4>)
 800138a:	705a      	strb	r2, [r3, #1]

			//Serial.print(gameHID.Joy_LT);

			if (PS4.getButtonClick(PS)) {
 800138c:	2110      	movs	r1, #16
 800138e:	4816      	ldr	r0, [pc, #88]	; (80013e8 <_Z10StartGetBTPv+0x2d4>)
 8001390:	f00f fa32 	bl	80107f8 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d005      	beq.n	80013a6 <_Z10StartGetBTPv+0x292>
				PS4.disconnect();
 800139a:	4811      	ldr	r0, [pc, #68]	; (80013e0 <_Z10StartGetBTPv+0x2cc>)
 800139c:	f00e f9e5 	bl	800f76a <_ZN5BTHID10disconnectEv>
        rumble_once = 0;
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <_Z10StartGetBTPv+0x2e8>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
			} else {
				//gameHID.ps4ButtonsTag.button_ps = 0;
				//PS4.disconnect();
			}

			if (PS4.getButtonPress(TRIANGLE)) {
 80013a6:	210c      	movs	r1, #12
 80013a8:	480f      	ldr	r0, [pc, #60]	; (80013e8 <_Z10StartGetBTPv+0x2d4>)
 80013aa:	f00f f9fd 	bl	80107a8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d025      	beq.n	8001400 <_Z10StartGetBTPv+0x2ec>
				gameHID.ps4ButtonsTag.button_triangle = 1;
 80013b4:	4a08      	ldr	r2, [pc, #32]	; (80013d8 <_Z10StartGetBTPv+0x2c4>)
 80013b6:	79d3      	ldrb	r3, [r2, #7]
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	71d3      	strb	r3, [r2, #7]
				xboxHID.Y = 0xFF;
 80013be:	4b07      	ldr	r3, [pc, #28]	; (80013dc <_Z10StartGetBTPv+0x2c8>)
 80013c0:	22ff      	movs	r2, #255	; 0xff
 80013c2:	71da      	strb	r2, [r3, #7]
 80013c4:	e024      	b.n	8001410 <_Z10StartGetBTPv+0x2fc>
 80013c6:	bf00      	nop
 80013c8:	20000388 	.word	0x20000388
 80013cc:	08012708 	.word	0x08012708
 80013d0:	20000374 	.word	0x20000374
 80013d4:	0801271c 	.word	0x0801271c
 80013d8:	20000638 	.word	0x20000638
 80013dc:	20000640 	.word	0x20000640
 80013e0:	2000055c 	.word	0x2000055c
 80013e4:	20000626 	.word	0x20000626
 80013e8:	200005d4 	.word	0x200005d4
 80013ec:	20000627 	.word	0x20000627
 80013f0:	20000628 	.word	0x20000628
 80013f4:	20000629 	.word	0x20000629
 80013f8:	2000062a 	.word	0x2000062a
 80013fc:	20000625 	.word	0x20000625
			} else {
				gameHID.ps4ButtonsTag.button_triangle = 0;
 8001400:	4ab9      	ldr	r2, [pc, #740]	; (80016e8 <_Z10StartGetBTPv+0x5d4>)
 8001402:	79d3      	ldrb	r3, [r2, #7]
 8001404:	f36f 0300 	bfc	r3, #0, #1
 8001408:	71d3      	strb	r3, [r2, #7]
				xboxHID.Y = 0;
 800140a:	4bb8      	ldr	r3, [pc, #736]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 800140c:	2200      	movs	r2, #0
 800140e:	71da      	strb	r2, [r3, #7]
			}

			if (PS4.getButtonPress(CIRCLE)) {
 8001410:	210d      	movs	r1, #13
 8001412:	48b7      	ldr	r0, [pc, #732]	; (80016f0 <_Z10StartGetBTPv+0x5dc>)
 8001414:	f00f f9c8 	bl	80107a8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d008      	beq.n	8001430 <_Z10StartGetBTPv+0x31c>
				gameHID.ps4ButtonsTag.button_circle = 1;
 800141e:	4ab2      	ldr	r2, [pc, #712]	; (80016e8 <_Z10StartGetBTPv+0x5d4>)
 8001420:	7993      	ldrb	r3, [r2, #6]
 8001422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001426:	7193      	strb	r3, [r2, #6]
				xboxHID.B = 0xFF;
 8001428:	4bb0      	ldr	r3, [pc, #704]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 800142a:	22ff      	movs	r2, #255	; 0xff
 800142c:	715a      	strb	r2, [r3, #5]
 800142e:	e007      	b.n	8001440 <_Z10StartGetBTPv+0x32c>
			} else {
				gameHID.ps4ButtonsTag.button_circle = 0;
 8001430:	4aad      	ldr	r2, [pc, #692]	; (80016e8 <_Z10StartGetBTPv+0x5d4>)
 8001432:	7993      	ldrb	r3, [r2, #6]
 8001434:	f36f 13c7 	bfc	r3, #7, #1
 8001438:	7193      	strb	r3, [r2, #6]
				xboxHID.B = 0;
 800143a:	4bac      	ldr	r3, [pc, #688]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 800143c:	2200      	movs	r2, #0
 800143e:	715a      	strb	r2, [r3, #5]
			}

			if (PS4.getButtonPress(CROSS)) {
 8001440:	210e      	movs	r1, #14
 8001442:	48ab      	ldr	r0, [pc, #684]	; (80016f0 <_Z10StartGetBTPv+0x5dc>)
 8001444:	f00f f9b0 	bl	80107a8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d008      	beq.n	8001460 <_Z10StartGetBTPv+0x34c>
				gameHID.ps4ButtonsTag.button_cross = 1;
 800144e:	4aa6      	ldr	r2, [pc, #664]	; (80016e8 <_Z10StartGetBTPv+0x5d4>)
 8001450:	7993      	ldrb	r3, [r2, #6]
 8001452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001456:	7193      	strb	r3, [r2, #6]
				xboxHID.A = 0xFF;
 8001458:	4ba4      	ldr	r3, [pc, #656]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 800145a:	22ff      	movs	r2, #255	; 0xff
 800145c:	711a      	strb	r2, [r3, #4]
 800145e:	e007      	b.n	8001470 <_Z10StartGetBTPv+0x35c>
			} else {
				gameHID.ps4ButtonsTag.button_cross = 0;
 8001460:	4aa1      	ldr	r2, [pc, #644]	; (80016e8 <_Z10StartGetBTPv+0x5d4>)
 8001462:	7993      	ldrb	r3, [r2, #6]
 8001464:	f36f 1386 	bfc	r3, #6, #1
 8001468:	7193      	strb	r3, [r2, #6]
				xboxHID.A = 0;
 800146a:	4ba0      	ldr	r3, [pc, #640]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 800146c:	2200      	movs	r2, #0
 800146e:	711a      	strb	r2, [r3, #4]
			}

			if (PS4.getButtonPress(SQUARE)) {
 8001470:	210f      	movs	r1, #15
 8001472:	489f      	ldr	r0, [pc, #636]	; (80016f0 <_Z10StartGetBTPv+0x5dc>)
 8001474:	f00f f998 	bl	80107a8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d008      	beq.n	8001490 <_Z10StartGetBTPv+0x37c>
				gameHID.ps4ButtonsTag.button_square = 1;
 800147e:	4a9a      	ldr	r2, [pc, #616]	; (80016e8 <_Z10StartGetBTPv+0x5d4>)
 8001480:	79d3      	ldrb	r3, [r2, #7]
 8001482:	f043 0302 	orr.w	r3, r3, #2
 8001486:	71d3      	strb	r3, [r2, #7]
				xboxHID.X = 0xFF;
 8001488:	4b98      	ldr	r3, [pc, #608]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 800148a:	22ff      	movs	r2, #255	; 0xff
 800148c:	719a      	strb	r2, [r3, #6]
 800148e:	e007      	b.n	80014a0 <_Z10StartGetBTPv+0x38c>
			} else {
				gameHID.ps4ButtonsTag.button_square = 0;
 8001490:	4a95      	ldr	r2, [pc, #596]	; (80016e8 <_Z10StartGetBTPv+0x5d4>)
 8001492:	79d3      	ldrb	r3, [r2, #7]
 8001494:	f36f 0341 	bfc	r3, #1, #1
 8001498:	71d3      	strb	r3, [r2, #7]
				xboxHID.X = 0;
 800149a:	4b94      	ldr	r3, [pc, #592]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 800149c:	2200      	movs	r2, #0
 800149e:	719a      	strb	r2, [r3, #6]
			}

			if (PS4.getButtonPress(UP)) {
 80014a0:	2100      	movs	r1, #0
 80014a2:	4893      	ldr	r0, [pc, #588]	; (80016f0 <_Z10StartGetBTPv+0x5dc>)
 80014a4:	f00f f980 	bl	80107a8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00c      	beq.n	80014c8 <_Z10StartGetBTPv+0x3b4>
				gameHID.ps4ButtonsTag.button_dpad_up = 1;
 80014ae:	4a8e      	ldr	r2, [pc, #568]	; (80016e8 <_Z10StartGetBTPv+0x5d4>)
 80014b0:	79d3      	ldrb	r3, [r2, #7]
 80014b2:	f043 0304 	orr.w	r3, r3, #4
 80014b6:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DUP;
 80014b8:	4b8c      	ldr	r3, [pc, #560]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 80014ba:	789b      	ldrb	r3, [r3, #2]
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4b8a      	ldr	r3, [pc, #552]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 80014c4:	709a      	strb	r2, [r3, #2]
 80014c6:	e00b      	b.n	80014e0 <_Z10StartGetBTPv+0x3cc>
			} else {
				gameHID.ps4ButtonsTag.button_dpad_up = 0;
 80014c8:	4a87      	ldr	r2, [pc, #540]	; (80016e8 <_Z10StartGetBTPv+0x5d4>)
 80014ca:	79d3      	ldrb	r3, [r2, #7]
 80014cc:	f36f 0382 	bfc	r3, #2, #1
 80014d0:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DUP;
 80014d2:	4b86      	ldr	r3, [pc, #536]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 80014d4:	789b      	ldrb	r3, [r3, #2]
 80014d6:	f023 0301 	bic.w	r3, r3, #1
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	4b83      	ldr	r3, [pc, #524]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 80014de:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(RIGHT)) {
 80014e0:	2101      	movs	r1, #1
 80014e2:	4883      	ldr	r0, [pc, #524]	; (80016f0 <_Z10StartGetBTPv+0x5dc>)
 80014e4:	f00f f960 	bl	80107a8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00c      	beq.n	8001508 <_Z10StartGetBTPv+0x3f4>
				gameHID.ps4ButtonsTag.button_dpad_right = 1;
 80014ee:	4a7e      	ldr	r2, [pc, #504]	; (80016e8 <_Z10StartGetBTPv+0x5d4>)
 80014f0:	79d3      	ldrb	r3, [r2, #7]
 80014f2:	f043 0308 	orr.w	r3, r3, #8
 80014f6:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DRIGHT;
 80014f8:	4b7c      	ldr	r3, [pc, #496]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 80014fa:	789b      	ldrb	r3, [r3, #2]
 80014fc:	f043 0308 	orr.w	r3, r3, #8
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4b7a      	ldr	r3, [pc, #488]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 8001504:	709a      	strb	r2, [r3, #2]
 8001506:	e00b      	b.n	8001520 <_Z10StartGetBTPv+0x40c>
			} else {
				gameHID.ps4ButtonsTag.button_dpad_right = 0;
 8001508:	4a77      	ldr	r2, [pc, #476]	; (80016e8 <_Z10StartGetBTPv+0x5d4>)
 800150a:	79d3      	ldrb	r3, [r2, #7]
 800150c:	f36f 03c3 	bfc	r3, #3, #1
 8001510:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DRIGHT;
 8001512:	4b76      	ldr	r3, [pc, #472]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 8001514:	789b      	ldrb	r3, [r3, #2]
 8001516:	f023 0308 	bic.w	r3, r3, #8
 800151a:	b2da      	uxtb	r2, r3
 800151c:	4b73      	ldr	r3, [pc, #460]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 800151e:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(DOWN)) {
 8001520:	2102      	movs	r1, #2
 8001522:	4873      	ldr	r0, [pc, #460]	; (80016f0 <_Z10StartGetBTPv+0x5dc>)
 8001524:	f00f f940 	bl	80107a8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00c      	beq.n	8001548 <_Z10StartGetBTPv+0x434>
				gameHID.ps4ButtonsTag.button_dpad_down = 1;
 800152e:	4a6e      	ldr	r2, [pc, #440]	; (80016e8 <_Z10StartGetBTPv+0x5d4>)
 8001530:	79d3      	ldrb	r3, [r2, #7]
 8001532:	f043 0320 	orr.w	r3, r3, #32
 8001536:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DDOWN;
 8001538:	4b6c      	ldr	r3, [pc, #432]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 800153a:	789b      	ldrb	r3, [r3, #2]
 800153c:	f043 0302 	orr.w	r3, r3, #2
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4b6a      	ldr	r3, [pc, #424]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 8001544:	709a      	strb	r2, [r3, #2]
 8001546:	e00b      	b.n	8001560 <_Z10StartGetBTPv+0x44c>
			} else {
				gameHID.ps4ButtonsTag.button_dpad_down = 0;
 8001548:	4a67      	ldr	r2, [pc, #412]	; (80016e8 <_Z10StartGetBTPv+0x5d4>)
 800154a:	79d3      	ldrb	r3, [r2, #7]
 800154c:	f36f 1345 	bfc	r3, #5, #1
 8001550:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DDOWN;
 8001552:	4b66      	ldr	r3, [pc, #408]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 8001554:	789b      	ldrb	r3, [r3, #2]
 8001556:	f023 0302 	bic.w	r3, r3, #2
 800155a:	b2da      	uxtb	r2, r3
 800155c:	4b63      	ldr	r3, [pc, #396]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 800155e:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(LEFT)) {
 8001560:	2103      	movs	r1, #3
 8001562:	4863      	ldr	r0, [pc, #396]	; (80016f0 <_Z10StartGetBTPv+0x5dc>)
 8001564:	f00f f920 	bl	80107a8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00c      	beq.n	8001588 <_Z10StartGetBTPv+0x474>
				gameHID.ps4ButtonsTag.button_dpad_left = 1;
 800156e:	4a5e      	ldr	r2, [pc, #376]	; (80016e8 <_Z10StartGetBTPv+0x5d4>)
 8001570:	79d3      	ldrb	r3, [r2, #7]
 8001572:	f043 0310 	orr.w	r3, r3, #16
 8001576:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DLEFT;
 8001578:	4b5c      	ldr	r3, [pc, #368]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 800157a:	789b      	ldrb	r3, [r3, #2]
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	b2da      	uxtb	r2, r3
 8001582:	4b5a      	ldr	r3, [pc, #360]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 8001584:	709a      	strb	r2, [r3, #2]
 8001586:	e00b      	b.n	80015a0 <_Z10StartGetBTPv+0x48c>

			} else {
				gameHID.ps4ButtonsTag.button_dpad_left = 0;
 8001588:	4a57      	ldr	r2, [pc, #348]	; (80016e8 <_Z10StartGetBTPv+0x5d4>)
 800158a:	79d3      	ldrb	r3, [r2, #7]
 800158c:	f36f 1304 	bfc	r3, #4, #1
 8001590:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DLEFT;
 8001592:	4b56      	ldr	r3, [pc, #344]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 8001594:	789b      	ldrb	r3, [r3, #2]
 8001596:	f023 0304 	bic.w	r3, r3, #4
 800159a:	b2da      	uxtb	r2, r3
 800159c:	4b53      	ldr	r3, [pc, #332]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 800159e:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(L1)) {
 80015a0:	210a      	movs	r1, #10
 80015a2:	4853      	ldr	r0, [pc, #332]	; (80016f0 <_Z10StartGetBTPv+0x5dc>)
 80015a4:	f00f f900 	bl	80107a8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d008      	beq.n	80015c0 <_Z10StartGetBTPv+0x4ac>
				gameHID.ps4ButtonsTag.button_left_trigger = 1;
 80015ae:	4a4e      	ldr	r2, [pc, #312]	; (80016e8 <_Z10StartGetBTPv+0x5d4>)
 80015b0:	7993      	ldrb	r3, [r2, #6]
 80015b2:	f043 0320 	orr.w	r3, r3, #32
 80015b6:	7193      	strb	r3, [r2, #6]
				xboxHID.WHITE = 0xFF;
 80015b8:	4b4c      	ldr	r3, [pc, #304]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 80015ba:	22ff      	movs	r2, #255	; 0xff
 80015bc:	725a      	strb	r2, [r3, #9]
 80015be:	e007      	b.n	80015d0 <_Z10StartGetBTPv+0x4bc>

			} else {
				gameHID.ps4ButtonsTag.button_left_trigger = 0;
 80015c0:	4a49      	ldr	r2, [pc, #292]	; (80016e8 <_Z10StartGetBTPv+0x5d4>)
 80015c2:	7993      	ldrb	r3, [r2, #6]
 80015c4:	f36f 1345 	bfc	r3, #5, #1
 80015c8:	7193      	strb	r3, [r2, #6]
				xboxHID.WHITE = 0;
 80015ca:	4b48      	ldr	r3, [pc, #288]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	725a      	strb	r2, [r3, #9]
			}

			if (PS4.getButtonPress(L3)) {
 80015d0:	2106      	movs	r1, #6
 80015d2:	4847      	ldr	r0, [pc, #284]	; (80016f0 <_Z10StartGetBTPv+0x5dc>)
 80015d4:	f00f f8e8 	bl	80107a8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00c      	beq.n	80015f8 <_Z10StartGetBTPv+0x4e4>
				gameHID.ps4ButtonsTag.button_left_thumb = 1;
 80015de:	4a42      	ldr	r2, [pc, #264]	; (80016e8 <_Z10StartGetBTPv+0x5d4>)
 80015e0:	79d3      	ldrb	r3, [r2, #7]
 80015e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015e6:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_LS_BTN;
 80015e8:	4b40      	ldr	r3, [pc, #256]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 80015ea:	789b      	ldrb	r3, [r3, #2]
 80015ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4b3e      	ldr	r3, [pc, #248]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 80015f4:	709a      	strb	r2, [r3, #2]
 80015f6:	e00b      	b.n	8001610 <_Z10StartGetBTPv+0x4fc>
			} else {
				gameHID.ps4ButtonsTag.button_left_thumb = 0;
 80015f8:	4a3b      	ldr	r2, [pc, #236]	; (80016e8 <_Z10StartGetBTPv+0x5d4>)
 80015fa:	79d3      	ldrb	r3, [r2, #7]
 80015fc:	f36f 1386 	bfc	r3, #6, #1
 8001600:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_LS_BTN;
 8001602:	4b3a      	ldr	r3, [pc, #232]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 8001604:	789b      	ldrb	r3, [r3, #2]
 8001606:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800160a:	b2da      	uxtb	r2, r3
 800160c:	4b37      	ldr	r3, [pc, #220]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 800160e:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(R1)) {
 8001610:	210b      	movs	r1, #11
 8001612:	4837      	ldr	r0, [pc, #220]	; (80016f0 <_Z10StartGetBTPv+0x5dc>)
 8001614:	f00f f8c8 	bl	80107a8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d008      	beq.n	8001630 <_Z10StartGetBTPv+0x51c>
				gameHID.ps4ButtonsTag.button_right_trigger = 1;
 800161e:	4a32      	ldr	r2, [pc, #200]	; (80016e8 <_Z10StartGetBTPv+0x5d4>)
 8001620:	7993      	ldrb	r3, [r2, #6]
 8001622:	f043 0310 	orr.w	r3, r3, #16
 8001626:	7193      	strb	r3, [r2, #6]
				xboxHID.BLACK = 0xFF;
 8001628:	4b30      	ldr	r3, [pc, #192]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 800162a:	22ff      	movs	r2, #255	; 0xff
 800162c:	721a      	strb	r2, [r3, #8]
 800162e:	e007      	b.n	8001640 <_Z10StartGetBTPv+0x52c>
			} else {
				gameHID.ps4ButtonsTag.button_right_trigger = 0;
 8001630:	4a2d      	ldr	r2, [pc, #180]	; (80016e8 <_Z10StartGetBTPv+0x5d4>)
 8001632:	7993      	ldrb	r3, [r2, #6]
 8001634:	f36f 1304 	bfc	r3, #4, #1
 8001638:	7193      	strb	r3, [r2, #6]
				xboxHID.BLACK = 0;
 800163a:	4b2c      	ldr	r3, [pc, #176]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 800163c:	2200      	movs	r2, #0
 800163e:	721a      	strb	r2, [r3, #8]
			}

			if (PS4.getButtonPress(R3)) {
 8001640:	2107      	movs	r1, #7
 8001642:	482b      	ldr	r0, [pc, #172]	; (80016f0 <_Z10StartGetBTPv+0x5dc>)
 8001644:	f00f f8b0 	bl	80107a8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00c      	beq.n	8001668 <_Z10StartGetBTPv+0x554>
				gameHID.ps4ButtonsTag.button_right_thumb = 1;
 800164e:	4a26      	ldr	r2, [pc, #152]	; (80016e8 <_Z10StartGetBTPv+0x5d4>)
 8001650:	79d3      	ldrb	r3, [r2, #7]
 8001652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001656:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_RS_BTN;
 8001658:	4b24      	ldr	r3, [pc, #144]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 800165a:	789b      	ldrb	r3, [r3, #2]
 800165c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b22      	ldr	r3, [pc, #136]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 8001664:	709a      	strb	r2, [r3, #2]
 8001666:	e00b      	b.n	8001680 <_Z10StartGetBTPv+0x56c>
			} else {
				gameHID.ps4ButtonsTag.button_right_thumb = 0;
 8001668:	4a1f      	ldr	r2, [pc, #124]	; (80016e8 <_Z10StartGetBTPv+0x5d4>)
 800166a:	79d3      	ldrb	r3, [r2, #7]
 800166c:	f36f 13c7 	bfc	r3, #7, #1
 8001670:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_RS_BTN;
 8001672:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 8001674:	789b      	ldrb	r3, [r3, #2]
 8001676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800167a:	b2da      	uxtb	r2, r3
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 800167e:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(SHARE)) {
 8001680:	2104      	movs	r1, #4
 8001682:	481b      	ldr	r0, [pc, #108]	; (80016f0 <_Z10StartGetBTPv+0x5dc>)
 8001684:	f00f f890 	bl	80107a8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00c      	beq.n	80016a8 <_Z10StartGetBTPv+0x594>
				gameHID.ps4ButtonsTag.button_share = 1;
 800168e:	4a16      	ldr	r2, [pc, #88]	; (80016e8 <_Z10StartGetBTPv+0x5d4>)
 8001690:	7993      	ldrb	r3, [r2, #6]
 8001692:	f043 0308 	orr.w	r3, r3, #8
 8001696:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons |= XBOX_BACK_BTN;
 8001698:	4b14      	ldr	r3, [pc, #80]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 800169a:	789b      	ldrb	r3, [r3, #2]
 800169c:	f043 0320 	orr.w	r3, r3, #32
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 80016a4:	709a      	strb	r2, [r3, #2]
 80016a6:	e00b      	b.n	80016c0 <_Z10StartGetBTPv+0x5ac>
			} else {
				gameHID.ps4ButtonsTag.button_share = 0;
 80016a8:	4a0f      	ldr	r2, [pc, #60]	; (80016e8 <_Z10StartGetBTPv+0x5d4>)
 80016aa:	7993      	ldrb	r3, [r2, #6]
 80016ac:	f36f 03c3 	bfc	r3, #3, #1
 80016b0:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_BACK_BTN;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 80016b4:	789b      	ldrb	r3, [r3, #2]
 80016b6:	f023 0320 	bic.w	r3, r3, #32
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 80016be:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(OPTIONS)) {
 80016c0:	2105      	movs	r1, #5
 80016c2:	480b      	ldr	r0, [pc, #44]	; (80016f0 <_Z10StartGetBTPv+0x5dc>)
 80016c4:	f00f f870 	bl	80107a8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d012      	beq.n	80016f4 <_Z10StartGetBTPv+0x5e0>
				gameHID.ps4ButtonsTag.button_start = 1;
 80016ce:	4a06      	ldr	r2, [pc, #24]	; (80016e8 <_Z10StartGetBTPv+0x5d4>)
 80016d0:	7993      	ldrb	r3, [r2, #6]
 80016d2:	f043 0304 	orr.w	r3, r3, #4
 80016d6:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons |= XBOX_START_BTN;
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 80016da:	789b      	ldrb	r3, [r3, #2]
 80016dc:	f043 0310 	orr.w	r3, r3, #16
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4b02      	ldr	r3, [pc, #8]	; (80016ec <_Z10StartGetBTPv+0x5d8>)
 80016e4:	709a      	strb	r2, [r3, #2]
 80016e6:	e034      	b.n	8001752 <_Z10StartGetBTPv+0x63e>
 80016e8:	20000638 	.word	0x20000638
 80016ec:	20000640 	.word	0x20000640
 80016f0:	200005d4 	.word	0x200005d4
			} else {
				gameHID.ps4ButtonsTag.button_start = 0;
 80016f4:	4a19      	ldr	r2, [pc, #100]	; (800175c <_Z10StartGetBTPv+0x648>)
 80016f6:	7993      	ldrb	r3, [r2, #6]
 80016f8:	f36f 0382 	bfc	r3, #2, #1
 80016fc:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_START_BTN;
 80016fe:	4b18      	ldr	r3, [pc, #96]	; (8001760 <_Z10StartGetBTPv+0x64c>)
 8001700:	789b      	ldrb	r3, [r3, #2]
 8001702:	f023 0310 	bic.w	r3, r3, #16
 8001706:	b2da      	uxtb	r2, r3
 8001708:	4b15      	ldr	r3, [pc, #84]	; (8001760 <_Z10StartGetBTPv+0x64c>)
 800170a:	709a      	strb	r2, [r3, #2]
 800170c:	e021      	b.n	8001752 <_Z10StartGetBTPv+0x63e>
			}

		} else if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 800170e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001712:	4814      	ldr	r0, [pc, #80]	; (8001764 <_Z10StartGetBTPv+0x650>)
 8001714:	f000 fe84 	bl	8002420 <HAL_GPIO_ReadPin>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	bf0c      	ite	eq
 800171e:	2301      	moveq	r3, #1
 8001720:	2300      	movne	r3, #0
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	d011      	beq.n	800174c <_Z10StartGetBTPv+0x638>
			if (!buttonPressed) {
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <_Z10StartGetBTPv+0x654>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	f083 0301 	eor.w	r3, r3, #1
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d006      	beq.n	8001744 <_Z10StartGetBTPv+0x630>
				Serial.print(F("\r\nButton Pressed"));
 8001736:	490d      	ldr	r1, [pc, #52]	; (800176c <_Z10StartGetBTPv+0x658>)
 8001738:	480d      	ldr	r0, [pc, #52]	; (8001770 <_Z10StartGetBTPv+0x65c>)
 800173a:	f7fe ff2f 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
				PS4.pair(); // Start paring routine if user button was just pressed
 800173e:	480d      	ldr	r0, [pc, #52]	; (8001774 <_Z10StartGetBTPv+0x660>)
 8001740:	f7ff f8e7 	bl	8000912 <_ZN5BTHID4pairEv>
			}
			buttonPressed = true;
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <_Z10StartGetBTPv+0x654>)
 8001746:	2201      	movs	r2, #1
 8001748:	701a      	strb	r2, [r3, #0]
 800174a:	e002      	b.n	8001752 <_Z10StartGetBTPv+0x63e>
		} else
			buttonPressed = false;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <_Z10StartGetBTPv+0x654>)
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
    osDelay(1);
 8001752:	2001      	movs	r0, #1
 8001754:	f007 fd10 	bl	8009178 <osDelay>
		Usb.Task();
 8001758:	e539      	b.n	80011ce <_Z10StartGetBTPv+0xba>
 800175a:	bf00      	nop
 800175c:	20000638 	.word	0x20000638
 8001760:	20000640 	.word	0x20000640
 8001764:	40020800 	.word	0x40020800
 8001768:	20000624 	.word	0x20000624
 800176c:	0801273c 	.word	0x0801273c
 8001770:	20000374 	.word	0x20000374
 8001774:	2000055c 	.word	0x2000055c

08001778 <_Z12StartSendUSBPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendUSB */
void StartSendUSB(void *argument)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendUSB */
	MX_USB_DEVICE_Init();
 8001780:	f00a f96c 	bl	800ba5c <MX_USB_DEVICE_Init>
#endif

#if OG_XBOX_SETUP
	//Serial.print(xboxHID.leftStickX);

	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &xboxHID, sizeof(struct xboxHID_t));
 8001784:	2214      	movs	r2, #20
 8001786:	4904      	ldr	r1, [pc, #16]	; (8001798 <_Z12StartSendUSBPv+0x20>)
 8001788:	4804      	ldr	r0, [pc, #16]	; (800179c <_Z12StartSendUSBPv+0x24>)
 800178a:	f006 f9a5 	bl	8007ad8 <USBD_HID_SendReport>
#endif
    osDelay(1);
 800178e:	2001      	movs	r0, #1
 8001790:	f007 fcf2 	bl	8009178 <osDelay>
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &xboxHID, sizeof(struct xboxHID_t));
 8001794:	e7f6      	b.n	8001784 <_Z12StartSendUSBPv+0xc>
 8001796:	bf00      	nop
 8001798:	20000640 	.word	0x20000640
 800179c:	2000501c 	.word	0x2000501c

080017a0 <HAL_TIM_PeriodElapsedCallback>:
  }
  /* USER CODE END StartSendUSB */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d101      	bne.n	80017b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017b2:	f000 fb7b 	bl	8001eac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40001c00 	.word	0x40001c00

080017c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	Serial.print("\r\nSomething went wrong!");
 80017c8:	4903      	ldr	r1, [pc, #12]	; (80017d8 <Error_Handler+0x14>)
 80017ca:	4804      	ldr	r0, [pc, #16]	; (80017dc <Error_Handler+0x18>)
 80017cc:	f7fe fef4 	bl	80005b8 <_ZN5Print5printEPKc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d0:	b672      	cpsid	i
}
 80017d2:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <Error_Handler+0x10>
 80017d6:	bf00      	nop
 80017d8:	08012750 	.word	0x08012750
 80017dc:	20000374 	.word	0x20000374

080017e0 <_ZN8MAX3421eI3P102P9E4InitEv>:
        return ( i);
}

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
template< typename SPI_SS, typename INTR >
int8_t MAX3421e< SPI_SS, INTR >::Init() {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
        XMEM_ACQUIRE_SPI();
        // Moved here.
        // you really should not init hardware in the constructor when it involves locks.
        // Also avoids the vbus flicker issue confusing some devices.
        /* pin and peripheral setup */
        SPI_SS::SetDirWrite();
 80017e8:	f7ff f866 	bl	80008b8 <_ZN3P1011SetDirWriteEv>
        SPI_SS::Set();
 80017ec:	f7ff f84c 	bl	8000888 <_ZN3P103SetEv>
        spi::init();
 80017f0:	f000 f845 	bl	800187e <_ZN3SPiI3P133P113P123P10E4initEv>
        INTR::SetDirRead();
 80017f4:	f7ff f832 	bl	800085c <_ZN2P910SetDirReadEv>
        XMEM_RELEASE_SPI();
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 80017f8:	2218      	movs	r2, #24
 80017fa:	2188      	movs	r1, #136	; 0x88
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 f845 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>

        if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 f864 	bl	80018d0 <_ZN8MAX3421eI3P102P9E5resetEv>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	bf0c      	ite	eq
 800180e:	2301      	moveq	r3, #1
 8001810:	2300      	movne	r3, #0
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <_ZN8MAX3421eI3P102P9E4InitEv+0x3e>
                return ( -1);
 8001818:	f04f 33ff 	mov.w	r3, #4294967295
 800181c:	e02b      	b.n	8001876 <_ZN8MAX3421eI3P102P9E4InitEv+0x96>
        }

        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 800181e:	22c1      	movs	r2, #193	; 0xc1
 8001820:	21d8      	movs	r1, #216	; 0xd8
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f832 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>

        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 8001828:	2260      	movs	r2, #96	; 0x60
 800182a:	21d0      	movs	r1, #208	; 0xd0
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 f82d 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>

        /* check if device is connected */
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 8001832:	2204      	movs	r2, #4
 8001834:	21e8      	movs	r1, #232	; 0xe8
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f828 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 800183c:	21e8      	movs	r1, #232	; 0xe8
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f876 	bl	8001930 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001844:	4603      	mov	r3, r0
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	2b00      	cmp	r3, #0
 800184c:	bf0c      	ite	eq
 800184e:	2301      	moveq	r3, #1
 8001850:	2300      	movne	r3, #0
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b00      	cmp	r3, #0
 8001856:	d000      	beq.n	800185a <_ZN8MAX3421eI3P102P9E4InitEv+0x7a>
 8001858:	e7f0      	b.n	800183c <_ZN8MAX3421eI3P102P9E4InitEv+0x5c>

        busprobe(); //check if anything is connected
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f88a 	bl	8001974 <_ZN8MAX3421eI3P102P9E8busprobeEv>

        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 8001860:	2220      	movs	r2, #32
 8001862:	21c8      	movs	r1, #200	; 0xc8
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 f811 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
 800186a:	2201      	movs	r2, #1
 800186c:	2180      	movs	r1, #128	; 0x80
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f80c 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return ( 0);
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <_ZN3SPiI3P133P113P123P10E4initEv>:
        static void init() {
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
        }
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>:
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	70fb      	strb	r3, [r7, #3]
 8001898:	4613      	mov	r3, r2
 800189a:	70bb      	strb	r3, [r7, #2]
        SPI_SS::Clear();
 800189c:	f7ff f800 	bl	80008a0 <_ZN3P105ClearEv>
        c[0] = reg | 0x02;
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	f043 0302 	orr.w	r3, r3, #2
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	733b      	strb	r3, [r7, #12]
        c[1] = data;
 80018aa:	78bb      	ldrb	r3, [r7, #2]
 80018ac:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(&SPI_Handle, c, 2, HAL_MAX_DELAY);
 80018ae:	f107 010c 	add.w	r1, r7, #12
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	2202      	movs	r2, #2
 80018b8:	4804      	ldr	r0, [pc, #16]	; (80018cc <_ZN8MAX3421eI3P102P9E5regWrEhh+0x40>)
 80018ba:	f003 f8e8 	bl	8004a8e <HAL_SPI_Transmit>
        SPI_SS::Set();
 80018be:	f7fe ffe3 	bl	8000888 <_ZN3P103SetEv>
        return;
 80018c2:	bf00      	nop
};
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200002d8 	.word	0x200002d8

080018d0 <_ZN8MAX3421eI3P102P9E5resetEv>:
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
        uint16_t i = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	81fb      	strh	r3, [r7, #14]
        regWr(rUSBCTL, bmCHIPRES);
 80018dc:	2220      	movs	r2, #32
 80018de:	2178      	movs	r1, #120	; 0x78
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff ffd3 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rUSBCTL, 0x00);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2178      	movs	r1, #120	; 0x78
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff ffce 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(++i) {
 80018f0:	89fb      	ldrh	r3, [r7, #14]
 80018f2:	3301      	adds	r3, #1
 80018f4:	81fb      	strh	r3, [r7, #14]
 80018f6:	89fb      	ldrh	r3, [r7, #14]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	bf14      	ite	ne
 80018fc:	2301      	movne	r3, #1
 80018fe:	2300      	moveq	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00f      	beq.n	8001926 <_ZN8MAX3421eI3P102P9E5resetEv+0x56>
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 8001906:	2168      	movs	r1, #104	; 0x68
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 f811 	bl	8001930 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800190e:	4603      	mov	r3, r0
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	bf14      	ite	ne
 8001918:	2301      	movne	r3, #1
 800191a:	2300      	moveq	r3, #0
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d100      	bne.n	8001924 <_ZN8MAX3421eI3P102P9E5resetEv+0x54>
        while(++i) {
 8001922:	e7e5      	b.n	80018f0 <_ZN8MAX3421eI3P102P9E5resetEv+0x20>
                        break;
 8001924:	bf00      	nop
        return ( i);
 8001926:	89fb      	ldrh	r3, [r7, #14]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <_ZN8MAX3421eI3P102P9E5regRdEh>:
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	70fb      	strb	r3, [r7, #3]
        SPI_SS::Clear();
 800193c:	f7fe ffb0 	bl	80008a0 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8001940:	1cf9      	adds	r1, r7, #3
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	2201      	movs	r2, #1
 8001948:	4809      	ldr	r0, [pc, #36]	; (8001970 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 800194a:	f003 f8a0 	bl	8004a8e <HAL_SPI_Transmit>
        uint8_t rv = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	73fb      	strb	r3, [r7, #15]
        HAL_SPI_Receive(&SPI_Handle, &rv, 1, HAL_MAX_DELAY);
 8001952:	f107 010f 	add.w	r1, r7, #15
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
 800195a:	2201      	movs	r2, #1
 800195c:	4804      	ldr	r0, [pc, #16]	; (8001970 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 800195e:	f003 f9d2 	bl	8004d06 <HAL_SPI_Receive>
        SPI_SS::Set();
 8001962:	f7fe ff91 	bl	8000888 <_ZN3P103SetEv>
        return (rv);
 8001966:	7bfb      	ldrb	r3, [r7, #15]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	200002d8 	.word	0x200002d8

08001974 <_ZN8MAX3421eI3P102P9E8busprobeEv>:
        return ( 0);
}

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
 800197c:	21f8      	movs	r1, #248	; 0xf8
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff ffd6 	bl	8001930 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001984:	4603      	mov	r3, r0
 8001986:	73fb      	strb	r3, [r7, #15]
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800198e:	73fb      	strb	r3, [r7, #15]
        switch(bus_sample) { //start full-speed or low-speed host
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	2bc0      	cmp	r3, #192	; 0xc0
 8001994:	d04a      	beq.n	8001a2c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xb8>
 8001996:	2bc0      	cmp	r3, #192	; 0xc0
 8001998:	dc55      	bgt.n	8001a46 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 800199a:	2b80      	cmp	r3, #128	; 0x80
 800199c:	d006      	beq.n	80019ac <_ZN8MAX3421eI3P102P9E8busprobeEv+0x38>
 800199e:	2b80      	cmp	r3, #128	; 0x80
 80019a0:	dc51      	bgt.n	8001a46 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d046      	beq.n	8001a34 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xc0>
 80019a6:	2b40      	cmp	r3, #64	; 0x40
 80019a8:	d020      	beq.n	80019ec <_ZN8MAX3421eI3P102P9E8busprobeEv+0x78>
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
                        vbusState = SE0;
                        break;
        }//end switch( bus_sample )
}
 80019aa:	e04c      	b.n	8001a46 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 80019ac:	21d8      	movs	r1, #216	; 0xd8
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ffbe 	bl	8001930 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	bf0c      	ite	eq
 80019be:	2301      	moveq	r3, #1
 80019c0:	2300      	movne	r3, #0
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d008      	beq.n	80019da <_ZN8MAX3421eI3P102P9E8busprobeEv+0x66>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 80019c8:	22c9      	movs	r2, #201	; 0xc9
 80019ca:	21d8      	movs	r1, #216	; 0xd8
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff5d 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 80019d2:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80019d4:	2202      	movs	r2, #2
 80019d6:	701a      	strb	r2, [r3, #0]
                        break;
 80019d8:	e035      	b.n	8001a46 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 80019da:	22cb      	movs	r2, #203	; 0xcb
 80019dc:	21d8      	movs	r1, #216	; 0xd8
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff ff54 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 80019e4:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80019e6:	2203      	movs	r2, #3
 80019e8:	701a      	strb	r2, [r3, #0]
                        break;
 80019ea:	e02c      	b.n	8001a46 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 80019ec:	21d8      	movs	r1, #216	; 0xd8
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ff9e 	bl	8001930 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	bf0c      	ite	eq
 80019fe:	2301      	moveq	r3, #1
 8001a00:	2300      	movne	r3, #0
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d008      	beq.n	8001a1a <_ZN8MAX3421eI3P102P9E8busprobeEv+0xa6>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8001a08:	22cb      	movs	r2, #203	; 0xcb
 8001a0a:	21d8      	movs	r1, #216	; 0xd8
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ff3d 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8001a12:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001a14:	2203      	movs	r2, #3
 8001a16:	701a      	strb	r2, [r3, #0]
                        break;
 8001a18:	e015      	b.n	8001a46 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 8001a1a:	22c9      	movs	r2, #201	; 0xc9
 8001a1c:	21d8      	movs	r1, #216	; 0xd8
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff ff34 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001a26:	2202      	movs	r2, #2
 8001a28:	701a      	strb	r2, [r3, #0]
                        break;
 8001a2a:	e00c      	b.n	8001a46 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        vbusState = SE1;
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	701a      	strb	r2, [r3, #0]
                        break;
 8001a32:	e008      	b.n	8001a46 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 8001a34:	22d1      	movs	r2, #209	; 0xd1
 8001a36:	21d8      	movs	r1, #216	; 0xd8
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ff27 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        vbusState = SE0;
 8001a3e:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
                        break;
 8001a44:	bf00      	nop
}
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000654 	.word	0x20000654

08001a54 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d115      	bne.n	8001a90 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d110      	bne.n	8001a90 <_Z41__static_initialization_and_destruction_0ii+0x3c>
SerialClass Serial(&huart2);
 8001a6e:	490a      	ldr	r1, [pc, #40]	; (8001a98 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001a70:	480a      	ldr	r0, [pc, #40]	; (8001a9c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001a72:	f7fe fedd 	bl	8000830 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>
USB Usb;
 8001a76:	480a      	ldr	r0, [pc, #40]	; (8001aa0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001a78:	f00f f88a 	bl	8010b90 <_ZN3USBC1Ev>
BTD Btd(&Usb);
 8001a7c:	4908      	ldr	r1, [pc, #32]	; (8001aa0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001a7e:	4809      	ldr	r0, [pc, #36]	; (8001aa4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001a80:	f00a fe8a 	bl	800c798 <_ZN3BTDC1EP3USB>
PS4BT PS4(&Btd,PAIR);
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	4906      	ldr	r1, [pc, #24]	; (8001aa4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001a8a:	4808      	ldr	r0, [pc, #32]	; (8001aac <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001a8c:	f7fe fffc 	bl	8000a88 <_ZN5PS4BTC1EP3BTDbPKc>
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000240 	.word	0x20000240
 8001a9c:	20000374 	.word	0x20000374
 8001aa0:	20000388 	.word	0x20000388
 8001aa4:	20000444 	.word	0x20000444
 8001aa8:	08012768 	.word	0x08012768
 8001aac:	2000055c 	.word	0x2000055c

08001ab0 <_GLOBAL__sub_I_hspi1>:
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ab8:	2001      	movs	r0, #1
 8001aba:	f7ff ffcb 	bl	8001a54 <_Z41__static_initialization_and_destruction_0ii>
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <HAL_MspInit+0x54>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	4a11      	ldr	r2, [pc, #68]	; (8001b14 <HAL_MspInit+0x54>)
 8001ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <HAL_MspInit+0x54>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	603b      	str	r3, [r7, #0]
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <HAL_MspInit+0x54>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <HAL_MspInit+0x54>)
 8001aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af0:	6413      	str	r3, [r2, #64]	; 0x40
 8001af2:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <HAL_MspInit+0x54>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	603b      	str	r3, [r7, #0]
 8001afc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	210f      	movs	r1, #15
 8001b02:	f06f 0001 	mvn.w	r0, #1
 8001b06:	f000 facd 	bl	80020a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800

08001b18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08a      	sub	sp, #40	; 0x28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a19      	ldr	r2, [pc, #100]	; (8001b9c <HAL_SPI_MspInit+0x84>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d12b      	bne.n	8001b92 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <HAL_SPI_MspInit+0x88>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	4a17      	ldr	r2, [pc, #92]	; (8001ba0 <HAL_SPI_MspInit+0x88>)
 8001b44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b48:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <HAL_SPI_MspInit+0x88>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <HAL_SPI_MspInit+0x88>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a10      	ldr	r2, [pc, #64]	; (8001ba0 <HAL_SPI_MspInit+0x88>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <HAL_SPI_MspInit+0x88>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b72:	23e0      	movs	r3, #224	; 0xe0
 8001b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b76:	2302      	movs	r3, #2
 8001b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b82:	2305      	movs	r3, #5
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b86:	f107 0314 	add.w	r3, r7, #20
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <HAL_SPI_MspInit+0x8c>)
 8001b8e:	f000 fab3 	bl	80020f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b92:	bf00      	nop
 8001b94:	3728      	adds	r7, #40	; 0x28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40013000 	.word	0x40013000
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40020000 	.word	0x40020000

08001ba8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0e      	ldr	r2, [pc, #56]	; (8001bf0 <HAL_TIM_Base_MspInit+0x48>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d115      	bne.n	8001be6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <HAL_TIM_Base_MspInit+0x4c>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	4a0c      	ldr	r2, [pc, #48]	; (8001bf4 <HAL_TIM_Base_MspInit+0x4c>)
 8001bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_TIM_Base_MspInit+0x4c>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2105      	movs	r1, #5
 8001bda:	202d      	movs	r0, #45	; 0x2d
 8001bdc:	f000 fa62 	bl	80020a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001be0:	202d      	movs	r0, #45	; 0x2d
 8001be2:	f000 fa7b 	bl	80020dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40002000 	.word	0x40002000
 8001bf4:	40023800 	.word	0x40023800

08001bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	; 0x28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a19      	ldr	r2, [pc, #100]	; (8001c7c <HAL_UART_MspInit+0x84>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d12b      	bne.n	8001c72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <HAL_UART_MspInit+0x88>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	4a17      	ldr	r2, [pc, #92]	; (8001c80 <HAL_UART_MspInit+0x88>)
 8001c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c28:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <HAL_UART_MspInit+0x88>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <HAL_UART_MspInit+0x88>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a10      	ldr	r2, [pc, #64]	; (8001c80 <HAL_UART_MspInit+0x88>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <HAL_UART_MspInit+0x88>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c52:	230c      	movs	r3, #12
 8001c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c56:	2302      	movs	r3, #2
 8001c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c62:	2307      	movs	r3, #7
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c66:	f107 0314 	add.w	r3, r7, #20
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4805      	ldr	r0, [pc, #20]	; (8001c84 <HAL_UART_MspInit+0x8c>)
 8001c6e:	f000 fa43 	bl	80020f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c72:	bf00      	nop
 8001c74:	3728      	adds	r7, #40	; 0x28
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40004400 	.word	0x40004400
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40020000 	.word	0x40020000

08001c88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08c      	sub	sp, #48	; 0x30
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	202c      	movs	r0, #44	; 0x2c
 8001c9e:	f000 fa01 	bl	80020a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001ca2:	202c      	movs	r0, #44	; 0x2c
 8001ca4:	f000 fa1a 	bl	80020dc <HAL_NVIC_EnableIRQ>
  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	4b1f      	ldr	r3, [pc, #124]	; (8001d2c <HAL_InitTick+0xa4>)
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	4a1e      	ldr	r2, [pc, #120]	; (8001d2c <HAL_InitTick+0xa4>)
 8001cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb8:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <HAL_InitTick+0xa4>)
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cc4:	f107 0210 	add.w	r2, r7, #16
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	4611      	mov	r1, r2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f001 fea8 	bl	8003a24 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001cd4:	f001 fe7e 	bl	80039d4 <HAL_RCC_GetPCLK1Freq>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce0:	4a13      	ldr	r2, [pc, #76]	; (8001d30 <HAL_InitTick+0xa8>)
 8001ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce6:	0c9b      	lsrs	r3, r3, #18
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <HAL_InitTick+0xac>)
 8001cee:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <HAL_InitTick+0xb0>)
 8001cf0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8001cf2:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <HAL_InitTick+0xac>)
 8001cf4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cf8:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8001cfa:	4a0e      	ldr	r2, [pc, #56]	; (8001d34 <HAL_InitTick+0xac>)
 8001cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfe:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <HAL_InitTick+0xac>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d06:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <HAL_InitTick+0xac>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8001d0c:	4809      	ldr	r0, [pc, #36]	; (8001d34 <HAL_InitTick+0xac>)
 8001d0e:	f003 fbdd 	bl	80054cc <HAL_TIM_Base_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d104      	bne.n	8001d22 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8001d18:	4806      	ldr	r0, [pc, #24]	; (8001d34 <HAL_InitTick+0xac>)
 8001d1a:	f003 fc27 	bl	800556c <HAL_TIM_Base_Start_IT>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	e000      	b.n	8001d24 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3730      	adds	r7, #48	; 0x30
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	431bde83 	.word	0x431bde83
 8001d34:	20004f90 	.word	0x20004f90
 8001d38:	40001c00 	.word	0x40001c00

08001d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <NMI_Handler+0x4>

08001d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d46:	e7fe      	b.n	8001d46 <HardFault_Handler+0x4>

08001d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <MemManage_Handler+0x4>

08001d4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d52:	e7fe      	b.n	8001d52 <BusFault_Handler+0x4>

08001d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <UsageFault_Handler+0x4>

08001d5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001d6c:	4802      	ldr	r0, [pc, #8]	; (8001d78 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001d6e:	f003 fc6d 	bl	800564c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20004f90 	.word	0x20004f90

08001d7c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001d80:	4802      	ldr	r0, [pc, #8]	; (8001d8c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001d82:	f003 fc63 	bl	800564c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000284 	.word	0x20000284

08001d90 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d94:	4802      	ldr	r0, [pc, #8]	; (8001da0 <OTG_FS_IRQHandler+0x10>)
 8001d96:	f000 fccb 	bl	8002730 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	200054ec 	.word	0x200054ec

08001da4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
	return 1;
 8001da8:	2301      	movs	r3, #1
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <_kill>:

int _kill(int pid, int sig)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dbe:	f010 fbd1 	bl	8012564 <__errno>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2216      	movs	r2, #22
 8001dc6:	601a      	str	r2, [r3, #0]
	return -1;
 8001dc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_exit>:

void _exit (int status)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff ffe7 	bl	8001db4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001de6:	e7fe      	b.n	8001de6 <_exit+0x12>

08001de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <SystemInit+0x28>)
 8001dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df2:	4a07      	ldr	r2, [pc, #28]	; (8001e10 <SystemInit+0x28>)
 8001df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dfc:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <SystemInit+0x28>)
 8001dfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e02:	609a      	str	r2, [r3, #8]
#endif
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e1a:	e003      	b.n	8001e24 <LoopCopyDataInit>

08001e1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e22:	3104      	adds	r1, #4

08001e24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e24:	480b      	ldr	r0, [pc, #44]	; (8001e54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e26:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e2c:	d3f6      	bcc.n	8001e1c <CopyDataInit>
  ldr  r2, =_sbss
 8001e2e:	4a0b      	ldr	r2, [pc, #44]	; (8001e5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e30:	e002      	b.n	8001e38 <LoopFillZerobss>

08001e32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e34:	f842 3b04 	str.w	r3, [r2], #4

08001e38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e3c:	d3f9      	bcc.n	8001e32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e3e:	f7ff ffd3 	bl	8001de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e42:	f010 fb95 	bl	8012570 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e46:	f7fe fef3 	bl	8000c30 <main>
  bx  lr    
 8001e4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e4c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001e50:	08012ae4 	.word	0x08012ae4
  ldr  r0, =_sdata
 8001e54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e58:	200001a4 	.word	0x200001a4
  ldr  r2, =_sbss
 8001e5c:	200001a4 	.word	0x200001a4
  ldr  r3, = _ebss
 8001e60:	200058f8 	.word	0x200058f8

08001e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e64:	e7fe      	b.n	8001e64 <ADC_IRQHandler>
	...

08001e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <HAL_Init+0x40>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0d      	ldr	r2, [pc, #52]	; (8001ea8 <HAL_Init+0x40>)
 8001e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_Init+0x40>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <HAL_Init+0x40>)
 8001e7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e84:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <HAL_Init+0x40>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a07      	ldr	r2, [pc, #28]	; (8001ea8 <HAL_Init+0x40>)
 8001e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e90:	2003      	movs	r0, #3
 8001e92:	f000 f8fc 	bl	800208e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e96:	2000      	movs	r0, #0
 8001e98:	f7ff fef6 	bl	8001c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e9c:	f7ff fe10 	bl	8001ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023c00 	.word	0x40023c00

08001eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_IncTick+0x20>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_IncTick+0x24>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <HAL_IncTick+0x24>)
 8001ebe:	6013      	str	r3, [r2, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000008 	.word	0x20000008
 8001ed0:	20004fd8 	.word	0x20004fd8

08001ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <HAL_GetTick+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20004fd8 	.word	0x20004fd8

08001eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef4:	f7ff ffee 	bl	8001ed4 <HAL_GetTick>
 8001ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f04:	d005      	beq.n	8001f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_Delay+0x44>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4413      	add	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f12:	bf00      	nop
 8001f14:	f7ff ffde 	bl	8001ed4 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d8f7      	bhi.n	8001f14 <HAL_Delay+0x28>
  {
  }
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000008 	.word	0x20000008

08001f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <__NVIC_SetPriorityGrouping+0x44>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f50:	4013      	ands	r3, r2
 8001f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f66:	4a04      	ldr	r2, [pc, #16]	; (8001f78 <__NVIC_SetPriorityGrouping+0x44>)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	60d3      	str	r3, [r2, #12]
}
 8001f6c:	bf00      	nop
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <__NVIC_GetPriorityGrouping+0x18>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	0a1b      	lsrs	r3, r3, #8
 8001f86:	f003 0307 	and.w	r3, r3, #7
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	db0b      	blt.n	8001fc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	f003 021f 	and.w	r2, r3, #31
 8001fb0:	4907      	ldr	r1, [pc, #28]	; (8001fd0 <__NVIC_EnableIRQ+0x38>)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	095b      	lsrs	r3, r3, #5
 8001fb8:	2001      	movs	r0, #1
 8001fba:	fa00 f202 	lsl.w	r2, r0, r2
 8001fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000e100 	.word	0xe000e100

08001fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	6039      	str	r1, [r7, #0]
 8001fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	db0a      	blt.n	8001ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	490c      	ldr	r1, [pc, #48]	; (8002020 <__NVIC_SetPriority+0x4c>)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	0112      	lsls	r2, r2, #4
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ffc:	e00a      	b.n	8002014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4908      	ldr	r1, [pc, #32]	; (8002024 <__NVIC_SetPriority+0x50>)
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	3b04      	subs	r3, #4
 800200c:	0112      	lsls	r2, r2, #4
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	440b      	add	r3, r1
 8002012:	761a      	strb	r2, [r3, #24]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000e100 	.word	0xe000e100
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002028:	b480      	push	{r7}
 800202a:	b089      	sub	sp, #36	; 0x24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f1c3 0307 	rsb	r3, r3, #7
 8002042:	2b04      	cmp	r3, #4
 8002044:	bf28      	it	cs
 8002046:	2304      	movcs	r3, #4
 8002048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3304      	adds	r3, #4
 800204e:	2b06      	cmp	r3, #6
 8002050:	d902      	bls.n	8002058 <NVIC_EncodePriority+0x30>
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3b03      	subs	r3, #3
 8002056:	e000      	b.n	800205a <NVIC_EncodePriority+0x32>
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	f04f 32ff 	mov.w	r2, #4294967295
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43da      	mvns	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	401a      	ands	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002070:	f04f 31ff 	mov.w	r1, #4294967295
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	43d9      	mvns	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	4313      	orrs	r3, r2
         );
}
 8002082:	4618      	mov	r0, r3
 8002084:	3724      	adds	r7, #36	; 0x24
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff ff4c 	bl	8001f34 <__NVIC_SetPriorityGrouping>
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020b6:	f7ff ff61 	bl	8001f7c <__NVIC_GetPriorityGrouping>
 80020ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	68b9      	ldr	r1, [r7, #8]
 80020c0:	6978      	ldr	r0, [r7, #20]
 80020c2:	f7ff ffb1 	bl	8002028 <NVIC_EncodePriority>
 80020c6:	4602      	mov	r2, r0
 80020c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020cc:	4611      	mov	r1, r2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff ff80 	bl	8001fd4 <__NVIC_SetPriority>
}
 80020d4:	bf00      	nop
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff ff54 	bl	8001f98 <__NVIC_EnableIRQ>
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b089      	sub	sp, #36	; 0x24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
 8002112:	e165      	b.n	80023e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002114:	2201      	movs	r2, #1
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	4013      	ands	r3, r2
 8002126:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	429a      	cmp	r2, r3
 800212e:	f040 8154 	bne.w	80023da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	2b01      	cmp	r3, #1
 800213c:	d005      	beq.n	800214a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002146:	2b02      	cmp	r3, #2
 8002148:	d130      	bne.n	80021ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	2203      	movs	r2, #3
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002180:	2201      	movs	r2, #1
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	091b      	lsrs	r3, r3, #4
 8002196:	f003 0201 	and.w	r2, r3, #1
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d017      	beq.n	80021e8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	2203      	movs	r2, #3
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d123      	bne.n	800223c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	08da      	lsrs	r2, r3, #3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3208      	adds	r2, #8
 80021fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002200:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	220f      	movs	r2, #15
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	08da      	lsrs	r2, r3, #3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3208      	adds	r2, #8
 8002236:	69b9      	ldr	r1, [r7, #24]
 8002238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	2203      	movs	r2, #3
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0203 	and.w	r2, r3, #3
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 80ae 	beq.w	80023da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	4b5d      	ldr	r3, [pc, #372]	; (80023f8 <HAL_GPIO_Init+0x300>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	4a5c      	ldr	r2, [pc, #368]	; (80023f8 <HAL_GPIO_Init+0x300>)
 8002288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800228c:	6453      	str	r3, [r2, #68]	; 0x44
 800228e:	4b5a      	ldr	r3, [pc, #360]	; (80023f8 <HAL_GPIO_Init+0x300>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800229a:	4a58      	ldr	r2, [pc, #352]	; (80023fc <HAL_GPIO_Init+0x304>)
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	089b      	lsrs	r3, r3, #2
 80022a0:	3302      	adds	r3, #2
 80022a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	220f      	movs	r2, #15
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4013      	ands	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a4f      	ldr	r2, [pc, #316]	; (8002400 <HAL_GPIO_Init+0x308>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d025      	beq.n	8002312 <HAL_GPIO_Init+0x21a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a4e      	ldr	r2, [pc, #312]	; (8002404 <HAL_GPIO_Init+0x30c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d01f      	beq.n	800230e <HAL_GPIO_Init+0x216>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a4d      	ldr	r2, [pc, #308]	; (8002408 <HAL_GPIO_Init+0x310>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d019      	beq.n	800230a <HAL_GPIO_Init+0x212>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a4c      	ldr	r2, [pc, #304]	; (800240c <HAL_GPIO_Init+0x314>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d013      	beq.n	8002306 <HAL_GPIO_Init+0x20e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a4b      	ldr	r2, [pc, #300]	; (8002410 <HAL_GPIO_Init+0x318>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d00d      	beq.n	8002302 <HAL_GPIO_Init+0x20a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a4a      	ldr	r2, [pc, #296]	; (8002414 <HAL_GPIO_Init+0x31c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d007      	beq.n	80022fe <HAL_GPIO_Init+0x206>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a49      	ldr	r2, [pc, #292]	; (8002418 <HAL_GPIO_Init+0x320>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d101      	bne.n	80022fa <HAL_GPIO_Init+0x202>
 80022f6:	2306      	movs	r3, #6
 80022f8:	e00c      	b.n	8002314 <HAL_GPIO_Init+0x21c>
 80022fa:	2307      	movs	r3, #7
 80022fc:	e00a      	b.n	8002314 <HAL_GPIO_Init+0x21c>
 80022fe:	2305      	movs	r3, #5
 8002300:	e008      	b.n	8002314 <HAL_GPIO_Init+0x21c>
 8002302:	2304      	movs	r3, #4
 8002304:	e006      	b.n	8002314 <HAL_GPIO_Init+0x21c>
 8002306:	2303      	movs	r3, #3
 8002308:	e004      	b.n	8002314 <HAL_GPIO_Init+0x21c>
 800230a:	2302      	movs	r3, #2
 800230c:	e002      	b.n	8002314 <HAL_GPIO_Init+0x21c>
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <HAL_GPIO_Init+0x21c>
 8002312:	2300      	movs	r3, #0
 8002314:	69fa      	ldr	r2, [r7, #28]
 8002316:	f002 0203 	and.w	r2, r2, #3
 800231a:	0092      	lsls	r2, r2, #2
 800231c:	4093      	lsls	r3, r2
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4313      	orrs	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002324:	4935      	ldr	r1, [pc, #212]	; (80023fc <HAL_GPIO_Init+0x304>)
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	089b      	lsrs	r3, r3, #2
 800232a:	3302      	adds	r3, #2
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002332:	4b3a      	ldr	r3, [pc, #232]	; (800241c <HAL_GPIO_Init+0x324>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002356:	4a31      	ldr	r2, [pc, #196]	; (800241c <HAL_GPIO_Init+0x324>)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800235c:	4b2f      	ldr	r3, [pc, #188]	; (800241c <HAL_GPIO_Init+0x324>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002380:	4a26      	ldr	r2, [pc, #152]	; (800241c <HAL_GPIO_Init+0x324>)
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002386:	4b25      	ldr	r3, [pc, #148]	; (800241c <HAL_GPIO_Init+0x324>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023aa:	4a1c      	ldr	r2, [pc, #112]	; (800241c <HAL_GPIO_Init+0x324>)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023b0:	4b1a      	ldr	r3, [pc, #104]	; (800241c <HAL_GPIO_Init+0x324>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023d4:	4a11      	ldr	r2, [pc, #68]	; (800241c <HAL_GPIO_Init+0x324>)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3301      	adds	r3, #1
 80023de:	61fb      	str	r3, [r7, #28]
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	2b0f      	cmp	r3, #15
 80023e4:	f67f ae96 	bls.w	8002114 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	3724      	adds	r7, #36	; 0x24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40013800 	.word	0x40013800
 8002400:	40020000 	.word	0x40020000
 8002404:	40020400 	.word	0x40020400
 8002408:	40020800 	.word	0x40020800
 800240c:	40020c00 	.word	0x40020c00
 8002410:	40021000 	.word	0x40021000
 8002414:	40021400 	.word	0x40021400
 8002418:	40021800 	.word	0x40021800
 800241c:	40013c00 	.word	0x40013c00

08002420 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	887b      	ldrh	r3, [r7, #2]
 8002432:	4013      	ands	r3, r2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d002      	beq.n	800243e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
 800243c:	e001      	b.n	8002442 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800243e:	2300      	movs	r3, #0
 8002440:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002442:	7bfb      	ldrb	r3, [r7, #15]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	807b      	strh	r3, [r7, #2]
 800245c:	4613      	mov	r3, r2
 800245e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002460:	787b      	ldrb	r3, [r7, #1]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002466:	887a      	ldrh	r2, [r7, #2]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800246c:	e003      	b.n	8002476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800246e:	887b      	ldrh	r3, [r7, #2]
 8002470:	041a      	lsls	r2, r3, #16
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	619a      	str	r2, [r3, #24]
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002482:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002484:	b08f      	sub	sp, #60	; 0x3c
 8002486:	af0a      	add	r7, sp, #40	; 0x28
 8002488:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e116      	b.n	80026c2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d106      	bne.n	80024b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f009 fc14 	bl	800bcdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2203      	movs	r2, #3
 80024b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d102      	bne.n	80024ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f003 ff47 	bl	8006366 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	603b      	str	r3, [r7, #0]
 80024de:	687e      	ldr	r6, [r7, #4]
 80024e0:	466d      	mov	r5, sp
 80024e2:	f106 0410 	add.w	r4, r6, #16
 80024e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80024f6:	1d33      	adds	r3, r6, #4
 80024f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024fa:	6838      	ldr	r0, [r7, #0]
 80024fc:	f003 fe1e 	bl	800613c <USB_CoreInit>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2202      	movs	r2, #2
 800250a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e0d7      	b.n	80026c2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2100      	movs	r1, #0
 8002518:	4618      	mov	r0, r3
 800251a:	f003 ff35 	bl	8006388 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800251e:	2300      	movs	r3, #0
 8002520:	73fb      	strb	r3, [r7, #15]
 8002522:	e04a      	b.n	80025ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	333d      	adds	r3, #61	; 0x3d
 8002534:	2201      	movs	r2, #1
 8002536:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002538:	7bfa      	ldrb	r2, [r7, #15]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	333c      	adds	r3, #60	; 0x3c
 8002548:	7bfa      	ldrb	r2, [r7, #15]
 800254a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800254c:	7bfa      	ldrb	r2, [r7, #15]
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	b298      	uxth	r0, r3
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	3342      	adds	r3, #66	; 0x42
 8002560:	4602      	mov	r2, r0
 8002562:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002564:	7bfa      	ldrb	r2, [r7, #15]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	1a9b      	subs	r3, r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	333f      	adds	r3, #63	; 0x3f
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	1a9b      	subs	r3, r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	3344      	adds	r3, #68	; 0x44
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800258c:	7bfa      	ldrb	r2, [r7, #15]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	3348      	adds	r3, #72	; 0x48
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	3350      	adds	r3, #80	; 0x50
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	3301      	adds	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
 80025ba:	7bfa      	ldrb	r2, [r7, #15]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d3af      	bcc.n	8002524 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025c4:	2300      	movs	r3, #0
 80025c6:	73fb      	strb	r3, [r7, #15]
 80025c8:	e044      	b.n	8002654 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025ca:	7bfa      	ldrb	r2, [r7, #15]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025e0:	7bfa      	ldrb	r2, [r7, #15]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80025f2:	7bfa      	ldrb	r2, [r7, #15]
 80025f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025f6:	7bfa      	ldrb	r2, [r7, #15]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	1a9b      	subs	r3, r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800260c:	7bfa      	ldrb	r2, [r7, #15]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002622:	7bfa      	ldrb	r2, [r7, #15]
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002638:	7bfa      	ldrb	r2, [r7, #15]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	1a9b      	subs	r3, r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	3301      	adds	r3, #1
 8002652:	73fb      	strb	r3, [r7, #15]
 8002654:	7bfa      	ldrb	r2, [r7, #15]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	429a      	cmp	r2, r3
 800265c:	d3b5      	bcc.n	80025ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	603b      	str	r3, [r7, #0]
 8002664:	687e      	ldr	r6, [r7, #4]
 8002666:	466d      	mov	r5, sp
 8002668:	f106 0410 	add.w	r4, r6, #16
 800266c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800266e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002672:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002674:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002678:	e885 0003 	stmia.w	r5, {r0, r1}
 800267c:	1d33      	adds	r3, r6, #4
 800267e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002680:	6838      	ldr	r0, [r7, #0]
 8002682:	f003 feab 	bl	80063dc <USB_DevInit>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e014      	b.n	80026c2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d102      	bne.n	80026b6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f001 f879 	bl	80037a8 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f004 fee6 	bl	800748c <USB_DevDisconnect>

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026ca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b084      	sub	sp, #16
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d101      	bne.n	80026e6 <HAL_PCD_Start+0x1c>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e020      	b.n	8002728 <HAL_PCD_Start+0x5e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d109      	bne.n	800270a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d005      	beq.n	800270a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f003 fe18 	bl	8006344 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f004 fe96 	bl	800744a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002730:	b590      	push	{r4, r7, lr}
 8002732:	b08d      	sub	sp, #52	; 0x34
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f004 ff54 	bl	80075f4 <USB_GetMode>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	f040 83ca 	bne.w	8002ee8 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f004 feb8 	bl	80074ce <USB_ReadInterrupts>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 83c0 	beq.w	8002ee6 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f004 feaf 	bl	80074ce <USB_ReadInterrupts>
 8002770:	4603      	mov	r3, r0
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b02      	cmp	r3, #2
 8002778:	d107      	bne.n	800278a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695a      	ldr	r2, [r3, #20]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f002 0202 	and.w	r2, r2, #2
 8002788:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f004 fe9d 	bl	80074ce <USB_ReadInterrupts>
 8002794:	4603      	mov	r3, r0
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	2b10      	cmp	r3, #16
 800279c:	d161      	bne.n	8002862 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699a      	ldr	r2, [r3, #24]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0210 	bic.w	r2, r2, #16
 80027ac:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	f003 020f 	and.w	r2, r3, #15
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	1a9b      	subs	r3, r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	4413      	add	r3, r2
 80027ca:	3304      	adds	r3, #4
 80027cc:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	0c5b      	lsrs	r3, r3, #17
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d124      	bne.n	8002824 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80027e0:	4013      	ands	r3, r2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d035      	beq.n	8002852 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	091b      	lsrs	r3, r3, #4
 80027ee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	461a      	mov	r2, r3
 80027f8:	6a38      	ldr	r0, [r7, #32]
 80027fa:	f004 fd03 	bl	8007204 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800280a:	441a      	add	r2, r3
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	699a      	ldr	r2, [r3, #24]
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	091b      	lsrs	r3, r3, #4
 8002818:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800281c:	441a      	add	r2, r3
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	619a      	str	r2, [r3, #24]
 8002822:	e016      	b.n	8002852 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	0c5b      	lsrs	r3, r3, #17
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	2b06      	cmp	r3, #6
 800282e:	d110      	bne.n	8002852 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002836:	2208      	movs	r2, #8
 8002838:	4619      	mov	r1, r3
 800283a:	6a38      	ldr	r0, [r7, #32]
 800283c:	f004 fce2 	bl	8007204 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	699a      	ldr	r2, [r3, #24]
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	091b      	lsrs	r3, r3, #4
 8002848:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800284c:	441a      	add	r2, r3
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	699a      	ldr	r2, [r3, #24]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 0210 	orr.w	r2, r2, #16
 8002860:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f004 fe31 	bl	80074ce <USB_ReadInterrupts>
 800286c:	4603      	mov	r3, r0
 800286e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002872:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002876:	d16e      	bne.n	8002956 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f004 fe37 	bl	80074f4 <USB_ReadDevAllOutEpInterrupt>
 8002886:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002888:	e062      	b.n	8002950 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800288a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d057      	beq.n	8002944 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	4611      	mov	r1, r2
 800289e:	4618      	mov	r0, r3
 80028a0:	f004 fe5c 	bl	800755c <USB_ReadDevOutEPInterrupt>
 80028a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00c      	beq.n	80028ca <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028bc:	461a      	mov	r2, r3
 80028be:	2301      	movs	r3, #1
 80028c0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80028c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 fdc5 	bl	8003454 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00c      	beq.n	80028ee <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e0:	461a      	mov	r2, r3
 80028e2:	2308      	movs	r3, #8
 80028e4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80028e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 febf 	bl	800366c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002904:	461a      	mov	r2, r3
 8002906:	2310      	movs	r3, #16
 8002908:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	f003 0320 	and.w	r3, r3, #32
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	4413      	add	r3, r2
 800291c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002920:	461a      	mov	r2, r3
 8002922:	2320      	movs	r3, #32
 8002924:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d009      	beq.n	8002944 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	4413      	add	r3, r2
 8002938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800293c:	461a      	mov	r2, r3
 800293e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002942:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	3301      	adds	r3, #1
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294c:	085b      	lsrs	r3, r3, #1
 800294e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002952:	2b00      	cmp	r3, #0
 8002954:	d199      	bne.n	800288a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f004 fdb7 	bl	80074ce <USB_ReadInterrupts>
 8002960:	4603      	mov	r3, r0
 8002962:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002966:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800296a:	f040 80c0 	bne.w	8002aee <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f004 fdd8 	bl	8007528 <USB_ReadDevAllInEpInterrupt>
 8002978:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800297a:	2300      	movs	r3, #0
 800297c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800297e:	e0b2      	b.n	8002ae6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80a7 	beq.w	8002ada <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	4611      	mov	r1, r2
 8002996:	4618      	mov	r0, r3
 8002998:	f004 fdfe 	bl	8007598 <USB_ReadDevInEPInterrupt>
 800299c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d057      	beq.n	8002a58 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	2201      	movs	r2, #1
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69f9      	ldr	r1, [r7, #28]
 80029c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80029c8:	4013      	ands	r3, r2
 80029ca:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029d8:	461a      	mov	r2, r3
 80029da:	2301      	movs	r3, #1
 80029dc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d132      	bne.n	8002a4c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ea:	4613      	mov	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	1a9b      	subs	r3, r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	3348      	adds	r3, #72	; 0x48
 80029f6:	6819      	ldr	r1, [r3, #0]
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fc:	4613      	mov	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	1a9b      	subs	r3, r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4403      	add	r3, r0
 8002a06:	3344      	adds	r3, #68	; 0x44
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4419      	add	r1, r3
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a10:	4613      	mov	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4403      	add	r3, r0
 8002a1a:	3348      	adds	r3, #72	; 0x48
 8002a1c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d113      	bne.n	8002a4c <HAL_PCD_IRQHandler+0x31c>
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a28:	4613      	mov	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	1a9b      	subs	r3, r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	3350      	adds	r3, #80	; 0x50
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d108      	bne.n	8002a4c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a44:	461a      	mov	r2, r3
 8002a46:	2101      	movs	r1, #1
 8002a48:	f004 fe06 	bl	8007658 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	4619      	mov	r1, r3
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f009 f9c3 	bl	800bdde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d008      	beq.n	8002a74 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	015a      	lsls	r2, r3, #5
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	4413      	add	r3, r2
 8002a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a6e:	461a      	mov	r2, r3
 8002a70:	2308      	movs	r3, #8
 8002a72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d008      	beq.n	8002a90 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	015a      	lsls	r2, r3, #5
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	4413      	add	r3, r2
 8002a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	2310      	movs	r3, #16
 8002a8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d008      	beq.n	8002aac <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	015a      	lsls	r2, r3, #5
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	2340      	movs	r3, #64	; 0x40
 8002aaa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d008      	beq.n	8002ac8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	015a      	lsls	r2, r3, #5
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	4413      	add	r3, r2
 8002abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ad2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 fc30 	bl	800333a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	3301      	adds	r3, #1
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae2:	085b      	lsrs	r3, r3, #1
 8002ae4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f47f af49 	bne.w	8002980 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f004 fceb 	bl	80074ce <USB_ReadInterrupts>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002afe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b02:	d122      	bne.n	8002b4a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	69fa      	ldr	r2, [r7, #28]
 8002b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b12:	f023 0301 	bic.w	r3, r3, #1
 8002b16:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d108      	bne.n	8002b34 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f009 fb93 	bl	800c258 <HAL_PCDEx_LPM_Callback>
 8002b32:	e002      	b.n	8002b3a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f009 f9c9 	bl	800becc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002b48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f004 fcbd 	bl	80074ce <USB_ReadInterrupts>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b5e:	d112      	bne.n	8002b86 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d102      	bne.n	8002b76 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f009 f985 	bl	800be80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695a      	ldr	r2, [r3, #20]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002b84:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f004 fc9f 	bl	80074ce <USB_ReadInterrupts>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b9a:	d121      	bne.n	8002be0 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695a      	ldr	r2, [r3, #20]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002baa:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d111      	bne.n	8002bda <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc4:	089b      	lsrs	r3, r3, #2
 8002bc6:	f003 020f 	and.w	r2, r3, #15
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f009 fb40 	bl	800c258 <HAL_PCDEx_LPM_Callback>
 8002bd8:	e002      	b.n	8002be0 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f009 f950 	bl	800be80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f004 fc72 	bl	80074ce <USB_ReadInterrupts>
 8002bea:	4603      	mov	r3, r0
 8002bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf4:	f040 80c7 	bne.w	8002d86 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c06:	f023 0301 	bic.w	r3, r3, #1
 8002c0a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2110      	movs	r1, #16
 8002c12:	4618      	mov	r0, r3
 8002c14:	f003 fd40 	bl	8006698 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c1c:	e056      	b.n	8002ccc <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c20:	015a      	lsls	r2, r3, #5
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c30:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c42:	0151      	lsls	r1, r2, #5
 8002c44:	69fa      	ldr	r2, [r7, #28]
 8002c46:	440a      	add	r2, r1
 8002c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c50:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c54:	015a      	lsls	r2, r3, #5
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	4413      	add	r3, r2
 8002c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c62:	0151      	lsls	r1, r2, #5
 8002c64:	69fa      	ldr	r2, [r7, #28]
 8002c66:	440a      	add	r2, r1
 8002c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c70:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c74:	015a      	lsls	r2, r3, #5
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c7e:	461a      	mov	r2, r3
 8002c80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c84:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c88:	015a      	lsls	r2, r3, #5
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c96:	0151      	lsls	r1, r2, #5
 8002c98:	69fa      	ldr	r2, [r7, #28]
 8002c9a:	440a      	add	r2, r1
 8002c9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ca0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ca4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cb6:	0151      	lsls	r1, r2, #5
 8002cb8:	69fa      	ldr	r2, [r7, #28]
 8002cba:	440a      	add	r2, r1
 8002cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002cc0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002cc4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc8:	3301      	adds	r3, #1
 8002cca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d3a3      	bcc.n	8002c1e <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	69fa      	ldr	r2, [r7, #28]
 8002ce0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ce4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002ce8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d016      	beq.n	8002d20 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cfc:	69fa      	ldr	r2, [r7, #28]
 8002cfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d02:	f043 030b 	orr.w	r3, r3, #11
 8002d06:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	69fa      	ldr	r2, [r7, #28]
 8002d14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d18:	f043 030b 	orr.w	r3, r3, #11
 8002d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d1e:	e015      	b.n	8002d4c <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	69fa      	ldr	r2, [r7, #28]
 8002d2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d32:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002d36:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	69fa      	ldr	r2, [r7, #28]
 8002d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d46:	f043 030b 	orr.w	r3, r3, #11
 8002d4a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69fa      	ldr	r2, [r7, #28]
 8002d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d5a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002d5e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d70:	461a      	mov	r2, r3
 8002d72:	f004 fc71 	bl	8007658 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695a      	ldr	r2, [r3, #20]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002d84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f004 fb9f 	bl	80074ce <USB_ReadInterrupts>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d9a:	d124      	bne.n	8002de6 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f004 fc35 	bl	8007610 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f003 fcd5 	bl	800675a <USB_GetDevSpeed>
 8002db0:	4603      	mov	r3, r0
 8002db2:	461a      	mov	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681c      	ldr	r4, [r3, #0]
 8002dbc:	f000 fdfe 	bl	80039bc <HAL_RCC_GetHCLKFreq>
 8002dc0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4620      	mov	r0, r4
 8002dcc:	f003 fa18 	bl	8006200 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f009 f82c 	bl	800be2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695a      	ldr	r2, [r3, #20]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002de4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f004 fb6f 	bl	80074ce <USB_ReadInterrupts>
 8002df0:	4603      	mov	r3, r0
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d10a      	bne.n	8002e10 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f009 f809 	bl	800be12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f002 0208 	and.w	r2, r2, #8
 8002e0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f004 fb5a 	bl	80074ce <USB_ReadInterrupts>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e24:	d10f      	bne.n	8002e46 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	4619      	mov	r1, r3
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f009 f86b 	bl	800bf0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695a      	ldr	r2, [r3, #20]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002e44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f004 fb3f 	bl	80074ce <USB_ReadInterrupts>
 8002e50:	4603      	mov	r3, r0
 8002e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e5a:	d10f      	bne.n	8002e7c <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	4619      	mov	r1, r3
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f009 f83e 	bl	800bee8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695a      	ldr	r2, [r3, #20]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002e7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f004 fb24 	bl	80074ce <USB_ReadInterrupts>
 8002e86:	4603      	mov	r3, r0
 8002e88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e90:	d10a      	bne.n	8002ea8 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f009 f84c 	bl	800bf30 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ea6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f004 fb0e 	bl	80074ce <USB_ReadInterrupts>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d115      	bne.n	8002ee8 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f009 f83c 	bl	800bf4c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6859      	ldr	r1, [r3, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	605a      	str	r2, [r3, #4]
 8002ee4:	e000      	b.n	8002ee8 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002ee6:	bf00      	nop
    }
  }
}
 8002ee8:	3734      	adds	r7, #52	; 0x34
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd90      	pop	{r4, r7, pc}

08002eee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_PCD_SetAddress+0x1a>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e013      	b.n	8002f30 <HAL_PCD_SetAddress+0x42>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	78fa      	ldrb	r2, [r7, #3]
 8002f1e:	4611      	mov	r1, r2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f004 fa6c 	bl	80073fe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	4608      	mov	r0, r1
 8002f42:	4611      	mov	r1, r2
 8002f44:	461a      	mov	r2, r3
 8002f46:	4603      	mov	r3, r0
 8002f48:	70fb      	strb	r3, [r7, #3]
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	803b      	strh	r3, [r7, #0]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	da0f      	bge.n	8002f7e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f5e:	78fb      	ldrb	r3, [r7, #3]
 8002f60:	f003 020f 	and.w	r2, r3, #15
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	3338      	adds	r3, #56	; 0x38
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	4413      	add	r3, r2
 8002f72:	3304      	adds	r3, #4
 8002f74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	705a      	strb	r2, [r3, #1]
 8002f7c:	e00f      	b.n	8002f9e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f7e:	78fb      	ldrb	r3, [r7, #3]
 8002f80:	f003 020f 	and.w	r2, r3, #15
 8002f84:	4613      	mov	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	4413      	add	r3, r2
 8002f94:	3304      	adds	r3, #4
 8002f96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002faa:	883a      	ldrh	r2, [r7, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	78ba      	ldrb	r2, [r7, #2]
 8002fb4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	785b      	ldrb	r3, [r3, #1]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d004      	beq.n	8002fc8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002fc8:	78bb      	ldrb	r3, [r7, #2]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d102      	bne.n	8002fd4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_PCD_EP_Open+0xaa>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e00e      	b.n	8003000 <HAL_PCD_EP_Open+0xc8>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68f9      	ldr	r1, [r7, #12]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f003 fbd7 	bl	80067a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002ffe:	7afb      	ldrb	r3, [r7, #11]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003014:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003018:	2b00      	cmp	r3, #0
 800301a:	da0f      	bge.n	800303c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800301c:	78fb      	ldrb	r3, [r7, #3]
 800301e:	f003 020f 	and.w	r2, r3, #15
 8003022:	4613      	mov	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	3338      	adds	r3, #56	; 0x38
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	4413      	add	r3, r2
 8003030:	3304      	adds	r3, #4
 8003032:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2201      	movs	r2, #1
 8003038:	705a      	strb	r2, [r3, #1]
 800303a:	e00f      	b.n	800305c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800303c:	78fb      	ldrb	r3, [r7, #3]
 800303e:	f003 020f 	and.w	r2, r3, #15
 8003042:	4613      	mov	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	1a9b      	subs	r3, r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	4413      	add	r3, r2
 8003052:	3304      	adds	r3, #4
 8003054:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800305c:	78fb      	ldrb	r3, [r7, #3]
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	b2da      	uxtb	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800306e:	2b01      	cmp	r3, #1
 8003070:	d101      	bne.n	8003076 <HAL_PCD_EP_Close+0x6e>
 8003072:	2302      	movs	r3, #2
 8003074:	e00e      	b.n	8003094 <HAL_PCD_EP_Close+0x8c>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68f9      	ldr	r1, [r7, #12]
 8003084:	4618      	mov	r0, r3
 8003086:	f003 fc15 	bl	80068b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	607a      	str	r2, [r7, #4]
 80030a6:	603b      	str	r3, [r7, #0]
 80030a8:	460b      	mov	r3, r1
 80030aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030ac:	7afb      	ldrb	r3, [r7, #11]
 80030ae:	f003 020f 	and.w	r2, r3, #15
 80030b2:	4613      	mov	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	1a9b      	subs	r3, r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4413      	add	r3, r2
 80030c2:	3304      	adds	r3, #4
 80030c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2200      	movs	r2, #0
 80030d6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	2200      	movs	r2, #0
 80030dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030de:	7afb      	ldrb	r3, [r7, #11]
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d102      	bne.n	80030f8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030f8:	7afb      	ldrb	r3, [r7, #11]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d109      	bne.n	8003116 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6818      	ldr	r0, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	b2db      	uxtb	r3, r3
 800310c:	461a      	mov	r2, r3
 800310e:	6979      	ldr	r1, [r7, #20]
 8003110:	f003 fef0 	bl	8006ef4 <USB_EP0StartXfer>
 8003114:	e008      	b.n	8003128 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6818      	ldr	r0, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	b2db      	uxtb	r3, r3
 8003120:	461a      	mov	r2, r3
 8003122:	6979      	ldr	r1, [r7, #20]
 8003124:	f003 fca2 	bl	8006a6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b086      	sub	sp, #24
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	603b      	str	r3, [r7, #0]
 800313e:	460b      	mov	r3, r1
 8003140:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003142:	7afb      	ldrb	r3, [r7, #11]
 8003144:	f003 020f 	and.w	r2, r3, #15
 8003148:	4613      	mov	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	3338      	adds	r3, #56	; 0x38
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4413      	add	r3, r2
 8003156:	3304      	adds	r3, #4
 8003158:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2200      	movs	r2, #0
 800316a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2201      	movs	r2, #1
 8003170:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003172:	7afb      	ldrb	r3, [r7, #11]
 8003174:	f003 030f 	and.w	r3, r3, #15
 8003178:	b2da      	uxtb	r2, r3
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d102      	bne.n	800318c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800318c:	7afb      	ldrb	r3, [r7, #11]
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	2b00      	cmp	r3, #0
 8003194:	d109      	bne.n	80031aa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	461a      	mov	r2, r3
 80031a2:	6979      	ldr	r1, [r7, #20]
 80031a4:	f003 fea6 	bl	8006ef4 <USB_EP0StartXfer>
 80031a8:	e008      	b.n	80031bc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	461a      	mov	r2, r3
 80031b6:	6979      	ldr	r1, [r7, #20]
 80031b8:	f003 fc58 	bl	8006a6c <USB_EPStartXfer>
  }

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
 80031ce:	460b      	mov	r3, r1
 80031d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	f003 020f 	and.w	r2, r3, #15
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d901      	bls.n	80031e4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e050      	b.n	8003286 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	da0f      	bge.n	800320c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	f003 020f 	and.w	r2, r3, #15
 80031f2:	4613      	mov	r3, r2
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	3338      	adds	r3, #56	; 0x38
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	4413      	add	r3, r2
 8003200:	3304      	adds	r3, #4
 8003202:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2201      	movs	r2, #1
 8003208:	705a      	strb	r2, [r3, #1]
 800320a:	e00d      	b.n	8003228 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800320c:	78fa      	ldrb	r2, [r7, #3]
 800320e:	4613      	mov	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	4413      	add	r3, r2
 800321e:	3304      	adds	r3, #4
 8003220:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2201      	movs	r2, #1
 800322c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800322e:	78fb      	ldrb	r3, [r7, #3]
 8003230:	f003 030f 	and.w	r3, r3, #15
 8003234:	b2da      	uxtb	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_PCD_EP_SetStall+0x82>
 8003244:	2302      	movs	r3, #2
 8003246:	e01e      	b.n	8003286 <HAL_PCD_EP_SetStall+0xc0>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68f9      	ldr	r1, [r7, #12]
 8003256:	4618      	mov	r0, r3
 8003258:	f003 fffd 	bl	8007256 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800325c:	78fb      	ldrb	r3, [r7, #3]
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10a      	bne.n	800327c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	b2d9      	uxtb	r1, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003276:	461a      	mov	r2, r3
 8003278:	f004 f9ee 	bl	8007658 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	460b      	mov	r3, r1
 8003298:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800329a:	78fb      	ldrb	r3, [r7, #3]
 800329c:	f003 020f 	and.w	r2, r3, #15
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d901      	bls.n	80032ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e042      	b.n	8003332 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	da0f      	bge.n	80032d4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	f003 020f 	and.w	r2, r3, #15
 80032ba:	4613      	mov	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	1a9b      	subs	r3, r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	3338      	adds	r3, #56	; 0x38
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	4413      	add	r3, r2
 80032c8:	3304      	adds	r3, #4
 80032ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2201      	movs	r2, #1
 80032d0:	705a      	strb	r2, [r3, #1]
 80032d2:	e00f      	b.n	80032f4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	f003 020f 	and.w	r2, r3, #15
 80032da:	4613      	mov	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	3304      	adds	r3, #4
 80032ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032fa:	78fb      	ldrb	r3, [r7, #3]
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	b2da      	uxtb	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_PCD_EP_ClrStall+0x86>
 8003310:	2302      	movs	r3, #2
 8003312:	e00e      	b.n	8003332 <HAL_PCD_EP_ClrStall+0xa4>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68f9      	ldr	r1, [r7, #12]
 8003322:	4618      	mov	r0, r3
 8003324:	f004 f805 	bl	8007332 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b08a      	sub	sp, #40	; 0x28
 800333e:	af02      	add	r7, sp, #8
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	4613      	mov	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	3338      	adds	r3, #56	; 0x38
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	4413      	add	r3, r2
 800335e:	3304      	adds	r3, #4
 8003360:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	699a      	ldr	r2, [r3, #24]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	429a      	cmp	r2, r3
 800336c:	d901      	bls.n	8003372 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e06c      	b.n	800344c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	695a      	ldr	r2, [r3, #20]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	69fa      	ldr	r2, [r7, #28]
 8003384:	429a      	cmp	r2, r3
 8003386:	d902      	bls.n	800338e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	3303      	adds	r3, #3
 8003392:	089b      	lsrs	r3, r3, #2
 8003394:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003396:	e02b      	b.n	80033f0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	69fa      	ldr	r2, [r7, #28]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d902      	bls.n	80033b4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	3303      	adds	r3, #3
 80033b8:	089b      	lsrs	r3, r3, #2
 80033ba:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	68d9      	ldr	r1, [r3, #12]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	4603      	mov	r3, r0
 80033d2:	6978      	ldr	r0, [r7, #20]
 80033d4:	f003 fee1 	bl	800719a <USB_WritePacket>

    ep->xfer_buff  += len;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	441a      	add	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	699a      	ldr	r2, [r3, #24]
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	441a      	add	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	429a      	cmp	r2, r3
 8003404:	d809      	bhi.n	800341a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	699a      	ldr	r2, [r3, #24]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800340e:	429a      	cmp	r2, r3
 8003410:	d203      	bcs.n	800341a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1be      	bne.n	8003398 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	695a      	ldr	r2, [r3, #20]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	429a      	cmp	r2, r3
 8003424:	d811      	bhi.n	800344a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	f003 030f 	and.w	r3, r3, #15
 800342c:	2201      	movs	r2, #1
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	43db      	mvns	r3, r3
 8003440:	6939      	ldr	r1, [r7, #16]
 8003442:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003446:	4013      	ands	r3, r2
 8003448:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3720      	adds	r7, #32
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	333c      	adds	r3, #60	; 0x3c
 800346c:	3304      	adds	r3, #4
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4413      	add	r3, r2
 800347a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2b01      	cmp	r3, #1
 8003488:	f040 80a0 	bne.w	80035cc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d015      	beq.n	80034c2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	4a72      	ldr	r2, [pc, #456]	; (8003664 <PCD_EP_OutXfrComplete_int+0x210>)
 800349a:	4293      	cmp	r3, r2
 800349c:	f240 80dd 	bls.w	800365a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 80d7 	beq.w	800365a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b8:	461a      	mov	r2, r3
 80034ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034be:	6093      	str	r3, [r2, #8]
 80034c0:	e0cb      	b.n	800365a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	f003 0320 	and.w	r3, r3, #32
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d009      	beq.n	80034e0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d8:	461a      	mov	r2, r3
 80034da:	2320      	movs	r3, #32
 80034dc:	6093      	str	r3, [r2, #8]
 80034de:	e0bc      	b.n	800365a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f040 80b7 	bne.w	800365a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4a5d      	ldr	r2, [pc, #372]	; (8003664 <PCD_EP_OutXfrComplete_int+0x210>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d90f      	bls.n	8003514 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	015a      	lsls	r2, r3, #5
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	4413      	add	r3, r2
 8003506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800350a:	461a      	mov	r2, r3
 800350c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003510:	6093      	str	r3, [r2, #8]
 8003512:	e0a2      	b.n	800365a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	4613      	mov	r3, r2
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003526:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	0159      	lsls	r1, r3, #5
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	440b      	add	r3, r1
 8003530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800353a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	4613      	mov	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4403      	add	r3, r0
 800354a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800354e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	4613      	mov	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003562:	6819      	ldr	r1, [r3, #0]
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4403      	add	r3, r0
 8003572:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4419      	add	r1, r3
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	4613      	mov	r3, r2
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	1a9b      	subs	r3, r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4403      	add	r3, r0
 8003588:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800358c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d114      	bne.n	80035be <PCD_EP_OutXfrComplete_int+0x16a>
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	4613      	mov	r3, r2
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	1a9b      	subs	r3, r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d108      	bne.n	80035be <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6818      	ldr	r0, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035b6:	461a      	mov	r2, r3
 80035b8:	2101      	movs	r1, #1
 80035ba:	f004 f84d 	bl	8007658 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	4619      	mov	r1, r3
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f008 fbef 	bl	800bda8 <HAL_PCD_DataOutStageCallback>
 80035ca:	e046      	b.n	800365a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4a26      	ldr	r2, [pc, #152]	; (8003668 <PCD_EP_OutXfrComplete_int+0x214>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d124      	bne.n	800361e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ea:	461a      	mov	r2, r3
 80035ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035f0:	6093      	str	r3, [r2, #8]
 80035f2:	e032      	b.n	800365a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f003 0320 	and.w	r3, r3, #32
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d008      	beq.n	8003610 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4413      	add	r3, r2
 8003606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360a:	461a      	mov	r2, r3
 800360c:	2320      	movs	r3, #32
 800360e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	b2db      	uxtb	r3, r3
 8003614:	4619      	mov	r1, r3
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f008 fbc6 	bl	800bda8 <HAL_PCD_DataOutStageCallback>
 800361c:	e01d      	b.n	800365a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d114      	bne.n	800364e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	4613      	mov	r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	1a9b      	subs	r3, r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d108      	bne.n	800364e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003646:	461a      	mov	r2, r3
 8003648:	2100      	movs	r1, #0
 800364a:	f004 f805 	bl	8007658 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	4619      	mov	r1, r3
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f008 fba7 	bl	800bda8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	4f54300a 	.word	0x4f54300a
 8003668:	4f54310a 	.word	0x4f54310a

0800366c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	333c      	adds	r3, #60	; 0x3c
 8003684:	3304      	adds	r3, #4
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	4413      	add	r3, r2
 8003692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4a15      	ldr	r2, [pc, #84]	; (80036f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d90e      	bls.n	80036c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d009      	beq.n	80036c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b8:	461a      	mov	r2, r3
 80036ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f008 fb5f 	bl	800bd84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4a0a      	ldr	r2, [pc, #40]	; (80036f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d90c      	bls.n	80036e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d108      	bne.n	80036e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036e0:	461a      	mov	r2, r3
 80036e2:	2101      	movs	r1, #1
 80036e4:	f003 ffb8 	bl	8007658 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	4f54300a 	.word	0x4f54300a

080036f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	70fb      	strb	r3, [r7, #3]
 8003704:	4613      	mov	r3, r2
 8003706:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d107      	bne.n	8003726 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003716:	883b      	ldrh	r3, [r7, #0]
 8003718:	0419      	lsls	r1, r3, #16
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	430a      	orrs	r2, r1
 8003722:	629a      	str	r2, [r3, #40]	; 0x28
 8003724:	e028      	b.n	8003778 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372c:	0c1b      	lsrs	r3, r3, #16
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	4413      	add	r3, r2
 8003732:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003734:	2300      	movs	r3, #0
 8003736:	73fb      	strb	r3, [r7, #15]
 8003738:	e00d      	b.n	8003756 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	7bfb      	ldrb	r3, [r7, #15]
 8003740:	3340      	adds	r3, #64	; 0x40
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	0c1b      	lsrs	r3, r3, #16
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	4413      	add	r3, r2
 800374e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003750:	7bfb      	ldrb	r3, [r7, #15]
 8003752:	3301      	adds	r3, #1
 8003754:	73fb      	strb	r3, [r7, #15]
 8003756:	7bfa      	ldrb	r2, [r7, #15]
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	3b01      	subs	r3, #1
 800375c:	429a      	cmp	r2, r3
 800375e:	d3ec      	bcc.n	800373a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003760:	883b      	ldrh	r3, [r7, #0]
 8003762:	0418      	lsls	r0, r3, #16
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6819      	ldr	r1, [r3, #0]
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	3b01      	subs	r3, #1
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	4302      	orrs	r2, r0
 8003770:	3340      	adds	r3, #64	; 0x40
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	460b      	mov	r3, r1
 8003790:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	887a      	ldrh	r2, [r7, #2]
 8003798:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037da:	f043 0303 	orr.w	r3, r3, #3
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0cc      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003804:	4b68      	ldr	r3, [pc, #416]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d90c      	bls.n	800382c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003812:	4b65      	ldr	r3, [pc, #404]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800381a:	4b63      	ldr	r3, [pc, #396]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d001      	beq.n	800382c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0b8      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d020      	beq.n	800387a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d005      	beq.n	8003850 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003844:	4b59      	ldr	r3, [pc, #356]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	4a58      	ldr	r2, [pc, #352]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800384e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800385c:	4b53      	ldr	r3, [pc, #332]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	4a52      	ldr	r2, [pc, #328]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003866:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003868:	4b50      	ldr	r3, [pc, #320]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	494d      	ldr	r1, [pc, #308]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	4313      	orrs	r3, r2
 8003878:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d044      	beq.n	8003910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d107      	bne.n	800389e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388e:	4b47      	ldr	r3, [pc, #284]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d119      	bne.n	80038ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e07f      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d003      	beq.n	80038ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	d107      	bne.n	80038be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ae:	4b3f      	ldr	r3, [pc, #252]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e06f      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038be:	4b3b      	ldr	r3, [pc, #236]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e067      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ce:	4b37      	ldr	r3, [pc, #220]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f023 0203 	bic.w	r2, r3, #3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	4934      	ldr	r1, [pc, #208]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038e0:	f7fe faf8 	bl	8001ed4 <HAL_GetTick>
 80038e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e6:	e00a      	b.n	80038fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e8:	f7fe faf4 	bl	8001ed4 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e04f      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fe:	4b2b      	ldr	r3, [pc, #172]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 020c 	and.w	r2, r3, #12
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	429a      	cmp	r2, r3
 800390e:	d1eb      	bne.n	80038e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003910:	4b25      	ldr	r3, [pc, #148]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 030f 	and.w	r3, r3, #15
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d20c      	bcs.n	8003938 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391e:	4b22      	ldr	r3, [pc, #136]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003926:	4b20      	ldr	r3, [pc, #128]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d001      	beq.n	8003938 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e032      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	d008      	beq.n	8003956 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003944:	4b19      	ldr	r3, [pc, #100]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	4916      	ldr	r1, [pc, #88]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	4313      	orrs	r3, r2
 8003954:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d009      	beq.n	8003976 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003962:	4b12      	ldr	r3, [pc, #72]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	490e      	ldr	r1, [pc, #56]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	4313      	orrs	r3, r2
 8003974:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003976:	f000 fbb1 	bl	80040dc <HAL_RCC_GetSysClockFreq>
 800397a:	4602      	mov	r2, r0
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	490a      	ldr	r1, [pc, #40]	; (80039b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003988:	5ccb      	ldrb	r3, [r1, r3]
 800398a:	fa22 f303 	lsr.w	r3, r2, r3
 800398e:	4a09      	ldr	r2, [pc, #36]	; (80039b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003992:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7fe f976 	bl	8001c88 <HAL_InitTick>

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40023c00 	.word	0x40023c00
 80039ac:	40023800 	.word	0x40023800
 80039b0:	08012938 	.word	0x08012938
 80039b4:	20000000 	.word	0x20000000
 80039b8:	20000004 	.word	0x20000004

080039bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039c0:	4b03      	ldr	r3, [pc, #12]	; (80039d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039c2:	681b      	ldr	r3, [r3, #0]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	20000000 	.word	0x20000000

080039d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039d8:	f7ff fff0 	bl	80039bc <HAL_RCC_GetHCLKFreq>
 80039dc:	4602      	mov	r2, r0
 80039de:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	0a9b      	lsrs	r3, r3, #10
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	4903      	ldr	r1, [pc, #12]	; (80039f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ea:	5ccb      	ldrb	r3, [r1, r3]
 80039ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40023800 	.word	0x40023800
 80039f8:	08012948 	.word	0x08012948

080039fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a00:	f7ff ffdc 	bl	80039bc <HAL_RCC_GetHCLKFreq>
 8003a04:	4602      	mov	r2, r0
 8003a06:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	0b5b      	lsrs	r3, r3, #13
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	4903      	ldr	r1, [pc, #12]	; (8003a20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a12:	5ccb      	ldrb	r3, [r1, r3]
 8003a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	08012948 	.word	0x08012948

08003a24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	220f      	movs	r2, #15
 8003a32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a34:	4b12      	ldr	r3, [pc, #72]	; (8003a80 <HAL_RCC_GetClockConfig+0x5c>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 0203 	and.w	r2, r3, #3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a40:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <HAL_RCC_GetClockConfig+0x5c>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a4c:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <HAL_RCC_GetClockConfig+0x5c>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a58:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <HAL_RCC_GetClockConfig+0x5c>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	08db      	lsrs	r3, r3, #3
 8003a5e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a66:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <HAL_RCC_GetClockConfig+0x60>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 020f 	and.w	r2, r3, #15
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	601a      	str	r2, [r3, #0]
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40023800 	.word	0x40023800
 8003a84:	40023c00 	.word	0x40023c00

08003a88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08c      	sub	sp, #48	; 0x30
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d010      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003ac0:	4b6f      	ldr	r3, [pc, #444]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ac6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ace:	496c      	ldr	r1, [pc, #432]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d010      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003aee:	4b64      	ldr	r3, [pc, #400]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003af4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afc:	4960      	ldr	r1, [pc, #384]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d017      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b1c:	4b58      	ldr	r3, [pc, #352]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	4955      	ldr	r1, [pc, #340]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b3a:	d101      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d017      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b58:	4b49      	ldr	r3, [pc, #292]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b66:	4946      	ldr	r1, [pc, #280]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b76:	d101      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003b84:	2301      	movs	r3, #1
 8003b86:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0320 	and.w	r3, r3, #32
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 808a 	beq.w	8003caa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b96:	2300      	movs	r3, #0
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	4b39      	ldr	r3, [pc, #228]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	4a38      	ldr	r2, [pc, #224]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ba6:	4b36      	ldr	r3, [pc, #216]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bae:	60bb      	str	r3, [r7, #8]
 8003bb0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003bb2:	4b34      	ldr	r3, [pc, #208]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a33      	ldr	r2, [pc, #204]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bbc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bbe:	f7fe f989 	bl	8001ed4 <HAL_GetTick>
 8003bc2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003bc6:	f7fe f985 	bl	8001ed4 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e278      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003bd8:	4b2a      	ldr	r3, [pc, #168]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003be4:	4b26      	ldr	r3, [pc, #152]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bec:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d02f      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfc:	6a3a      	ldr	r2, [r7, #32]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d028      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c02:	4b1f      	ldr	r3, [pc, #124]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c0a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c0c:	4b1e      	ldr	r3, [pc, #120]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c12:	4b1d      	ldr	r3, [pc, #116]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003c18:	4a19      	ldr	r2, [pc, #100]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c1e:	4b18      	ldr	r3, [pc, #96]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d114      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003c2a:	f7fe f953 	bl	8001ed4 <HAL_GetTick>
 8003c2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c30:	e00a      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c32:	f7fe f94f 	bl	8001ed4 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e240      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c48:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0ee      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c60:	d114      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003c62:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c76:	4902      	ldr	r1, [pc, #8]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	608b      	str	r3, [r1, #8]
 8003c7c:	e00c      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003c7e:	bf00      	nop
 8003c80:	40023800 	.word	0x40023800
 8003c84:	40007000 	.word	0x40007000
 8003c88:	42470e40 	.word	0x42470e40
 8003c8c:	4b4a      	ldr	r3, [pc, #296]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	4a49      	ldr	r2, [pc, #292]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c92:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c96:	6093      	str	r3, [r2, #8]
 8003c98:	4b47      	ldr	r3, [pc, #284]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca4:	4944      	ldr	r1, [pc, #272]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0310 	and.w	r3, r3, #16
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d004      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003cbc:	4b3f      	ldr	r3, [pc, #252]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003cbe:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003ccc:	4b3a      	ldr	r3, [pc, #232]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cda:	4937      	ldr	r1, [pc, #220]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003cee:	4b32      	ldr	r3, [pc, #200]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cf4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cfc:	492e      	ldr	r1, [pc, #184]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d011      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d10:	4b29      	ldr	r3, [pc, #164]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d16:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1e:	4926      	ldr	r1, [pc, #152]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d2e:	d101      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003d30:	2301      	movs	r3, #1
 8003d32:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003d40:	4b1d      	ldr	r3, [pc, #116]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4e:	491a      	ldr	r1, [pc, #104]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d011      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003d62:	4b15      	ldr	r3, [pc, #84]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d68:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d70:	4911      	ldr	r1, [pc, #68]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d80:	d101      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003d82:	2301      	movs	r3, #1
 8003d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d94:	f040 80ff 	bne.w	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d98:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d9e:	f7fe f899 	bl	8001ed4 <HAL_GetTick>
 8003da2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003da4:	e00e      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003da6:	f7fe f895 	bl	8001ed4 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d907      	bls.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e188      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	424711e0 	.word	0x424711e0
 8003dc0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dc4:	4b7e      	ldr	r3, [pc, #504]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1ea      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d009      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d028      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d124      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003df8:	4b71      	ldr	r3, [pc, #452]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dfe:	0c1b      	lsrs	r3, r3, #16
 8003e00:	f003 0303 	and.w	r3, r3, #3
 8003e04:	3301      	adds	r3, #1
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e0a:	4b6d      	ldr	r3, [pc, #436]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e10:	0e1b      	lsrs	r3, r3, #24
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	019b      	lsls	r3, r3, #6
 8003e22:	431a      	orrs	r2, r3
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	085b      	lsrs	r3, r3, #1
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	041b      	lsls	r3, r3, #16
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	061b      	lsls	r3, r3, #24
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	071b      	lsls	r3, r3, #28
 8003e3a:	4961      	ldr	r1, [pc, #388]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d004      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e56:	d00a      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d035      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e6c:	d130      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003e6e:	4b54      	ldr	r3, [pc, #336]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e74:	0c1b      	lsrs	r3, r3, #16
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e80:	4b4f      	ldr	r3, [pc, #316]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e86:	0f1b      	lsrs	r3, r3, #28
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	019b      	lsls	r3, r3, #6
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	085b      	lsrs	r3, r3, #1
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	041b      	lsls	r3, r3, #16
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	061b      	lsls	r3, r3, #24
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	071b      	lsls	r3, r3, #28
 8003eb0:	4943      	ldr	r1, [pc, #268]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003eb8:	4b41      	ldr	r3, [pc, #260]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ebe:	f023 021f 	bic.w	r2, r3, #31
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	493d      	ldr	r1, [pc, #244]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d029      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ee4:	d124      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003ee6:	4b36      	ldr	r3, [pc, #216]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eec:	0c1b      	lsrs	r3, r3, #16
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ef8:	4b31      	ldr	r3, [pc, #196]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003efe:	0f1b      	lsrs	r3, r3, #28
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	019b      	lsls	r3, r3, #6
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	085b      	lsrs	r3, r3, #1
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	041b      	lsls	r3, r3, #16
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	061b      	lsls	r3, r3, #24
 8003f22:	431a      	orrs	r2, r3
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	071b      	lsls	r3, r3, #28
 8003f28:	4925      	ldr	r1, [pc, #148]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d016      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	019b      	lsls	r3, r3, #6
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	085b      	lsrs	r3, r3, #1
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	041b      	lsls	r3, r3, #16
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	061b      	lsls	r3, r3, #24
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	071b      	lsls	r3, r3, #28
 8003f62:	4917      	ldr	r1, [pc, #92]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f6a:	4b16      	ldr	r3, [pc, #88]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f70:	f7fd ffb0 	bl	8001ed4 <HAL_GetTick>
 8003f74:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f78:	f7fd ffac 	bl	8001ed4 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e09f      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f8a:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0f0      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	f040 8095 	bne.w	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f9e:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fa4:	f7fd ff96 	bl	8001ed4 <HAL_GetTick>
 8003fa8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003faa:	e00f      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003fac:	f7fd ff92 	bl	8001ed4 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d908      	bls.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e085      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003fbe:	bf00      	nop
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	42470068 	.word	0x42470068
 8003fc8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fcc:	4b41      	ldr	r3, [pc, #260]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fd8:	d0e8      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d009      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d02b      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d127      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004002:	4b34      	ldr	r3, [pc, #208]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004008:	0c1b      	lsrs	r3, r3, #16
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	3301      	adds	r3, #1
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699a      	ldr	r2, [r3, #24]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	019b      	lsls	r3, r3, #6
 800401e:	431a      	orrs	r2, r3
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	085b      	lsrs	r3, r3, #1
 8004024:	3b01      	subs	r3, #1
 8004026:	041b      	lsls	r3, r3, #16
 8004028:	431a      	orrs	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	061b      	lsls	r3, r3, #24
 8004030:	4928      	ldr	r1, [pc, #160]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004038:	4b26      	ldr	r3, [pc, #152]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800403a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800403e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004046:	3b01      	subs	r3, #1
 8004048:	021b      	lsls	r3, r3, #8
 800404a:	4922      	ldr	r1, [pc, #136]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800404c:	4313      	orrs	r3, r2
 800404e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405a:	2b00      	cmp	r3, #0
 800405c:	d01d      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004062:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004066:	d118      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004068:	4b1a      	ldr	r3, [pc, #104]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800406a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406e:	0e1b      	lsrs	r3, r3, #24
 8004070:	f003 030f 	and.w	r3, r3, #15
 8004074:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699a      	ldr	r2, [r3, #24]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	019b      	lsls	r3, r3, #6
 8004080:	431a      	orrs	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	085b      	lsrs	r3, r3, #1
 8004088:	3b01      	subs	r3, #1
 800408a:	041b      	lsls	r3, r3, #16
 800408c:	431a      	orrs	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	061b      	lsls	r3, r3, #24
 8004092:	4910      	ldr	r1, [pc, #64]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800409a:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800409c:	2201      	movs	r2, #1
 800409e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040a0:	f7fd ff18 	bl	8001ed4 <HAL_GetTick>
 80040a4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040a6:	e008      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80040a8:	f7fd ff14 	bl	8001ed4 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d901      	bls.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e007      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040ba:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040c6:	d1ef      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3730      	adds	r7, #48	; 0x30
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	40023800 	.word	0x40023800
 80040d8:	42470070 	.word	0x42470070

080040dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040e0:	b088      	sub	sp, #32
 80040e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040f8:	4bce      	ldr	r3, [pc, #824]	; (8004434 <HAL_RCC_GetSysClockFreq+0x358>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 030c 	and.w	r3, r3, #12
 8004100:	2b0c      	cmp	r3, #12
 8004102:	f200 818d 	bhi.w	8004420 <HAL_RCC_GetSysClockFreq+0x344>
 8004106:	a201      	add	r2, pc, #4	; (adr r2, 800410c <HAL_RCC_GetSysClockFreq+0x30>)
 8004108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410c:	08004141 	.word	0x08004141
 8004110:	08004421 	.word	0x08004421
 8004114:	08004421 	.word	0x08004421
 8004118:	08004421 	.word	0x08004421
 800411c:	08004147 	.word	0x08004147
 8004120:	08004421 	.word	0x08004421
 8004124:	08004421 	.word	0x08004421
 8004128:	08004421 	.word	0x08004421
 800412c:	0800414d 	.word	0x0800414d
 8004130:	08004421 	.word	0x08004421
 8004134:	08004421 	.word	0x08004421
 8004138:	08004421 	.word	0x08004421
 800413c:	080042c1 	.word	0x080042c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004140:	4bbd      	ldr	r3, [pc, #756]	; (8004438 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004142:	61bb      	str	r3, [r7, #24]
       break;
 8004144:	e16f      	b.n	8004426 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004146:	4bbd      	ldr	r3, [pc, #756]	; (800443c <HAL_RCC_GetSysClockFreq+0x360>)
 8004148:	61bb      	str	r3, [r7, #24]
      break;
 800414a:	e16c      	b.n	8004426 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800414c:	4bb9      	ldr	r3, [pc, #740]	; (8004434 <HAL_RCC_GetSysClockFreq+0x358>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004154:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004156:	4bb7      	ldr	r3, [pc, #732]	; (8004434 <HAL_RCC_GetSysClockFreq+0x358>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d053      	beq.n	800420a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004162:	4bb4      	ldr	r3, [pc, #720]	; (8004434 <HAL_RCC_GetSysClockFreq+0x358>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	099b      	lsrs	r3, r3, #6
 8004168:	461a      	mov	r2, r3
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004172:	f04f 0100 	mov.w	r1, #0
 8004176:	ea02 0400 	and.w	r4, r2, r0
 800417a:	603c      	str	r4, [r7, #0]
 800417c:	400b      	ands	r3, r1
 800417e:	607b      	str	r3, [r7, #4]
 8004180:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004184:	4620      	mov	r0, r4
 8004186:	4629      	mov	r1, r5
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	014b      	lsls	r3, r1, #5
 8004192:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004196:	0142      	lsls	r2, r0, #5
 8004198:	4610      	mov	r0, r2
 800419a:	4619      	mov	r1, r3
 800419c:	4623      	mov	r3, r4
 800419e:	1ac0      	subs	r0, r0, r3
 80041a0:	462b      	mov	r3, r5
 80041a2:	eb61 0103 	sbc.w	r1, r1, r3
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	018b      	lsls	r3, r1, #6
 80041b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041b4:	0182      	lsls	r2, r0, #6
 80041b6:	1a12      	subs	r2, r2, r0
 80041b8:	eb63 0301 	sbc.w	r3, r3, r1
 80041bc:	f04f 0000 	mov.w	r0, #0
 80041c0:	f04f 0100 	mov.w	r1, #0
 80041c4:	00d9      	lsls	r1, r3, #3
 80041c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041ca:	00d0      	lsls	r0, r2, #3
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4621      	mov	r1, r4
 80041d2:	1852      	adds	r2, r2, r1
 80041d4:	4629      	mov	r1, r5
 80041d6:	eb43 0101 	adc.w	r1, r3, r1
 80041da:	460b      	mov	r3, r1
 80041dc:	f04f 0000 	mov.w	r0, #0
 80041e0:	f04f 0100 	mov.w	r1, #0
 80041e4:	0259      	lsls	r1, r3, #9
 80041e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80041ea:	0250      	lsls	r0, r2, #9
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4610      	mov	r0, r2
 80041f2:	4619      	mov	r1, r3
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	461a      	mov	r2, r3
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	f7fc f810 	bl	8000220 <__aeabi_uldivmod>
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	4613      	mov	r3, r2
 8004206:	61fb      	str	r3, [r7, #28]
 8004208:	e04c      	b.n	80042a4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800420a:	4b8a      	ldr	r3, [pc, #552]	; (8004434 <HAL_RCC_GetSysClockFreq+0x358>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	099b      	lsrs	r3, r3, #6
 8004210:	461a      	mov	r2, r3
 8004212:	f04f 0300 	mov.w	r3, #0
 8004216:	f240 10ff 	movw	r0, #511	; 0x1ff
 800421a:	f04f 0100 	mov.w	r1, #0
 800421e:	ea02 0a00 	and.w	sl, r2, r0
 8004222:	ea03 0b01 	and.w	fp, r3, r1
 8004226:	4650      	mov	r0, sl
 8004228:	4659      	mov	r1, fp
 800422a:	f04f 0200 	mov.w	r2, #0
 800422e:	f04f 0300 	mov.w	r3, #0
 8004232:	014b      	lsls	r3, r1, #5
 8004234:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004238:	0142      	lsls	r2, r0, #5
 800423a:	4610      	mov	r0, r2
 800423c:	4619      	mov	r1, r3
 800423e:	ebb0 000a 	subs.w	r0, r0, sl
 8004242:	eb61 010b 	sbc.w	r1, r1, fp
 8004246:	f04f 0200 	mov.w	r2, #0
 800424a:	f04f 0300 	mov.w	r3, #0
 800424e:	018b      	lsls	r3, r1, #6
 8004250:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004254:	0182      	lsls	r2, r0, #6
 8004256:	1a12      	subs	r2, r2, r0
 8004258:	eb63 0301 	sbc.w	r3, r3, r1
 800425c:	f04f 0000 	mov.w	r0, #0
 8004260:	f04f 0100 	mov.w	r1, #0
 8004264:	00d9      	lsls	r1, r3, #3
 8004266:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800426a:	00d0      	lsls	r0, r2, #3
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	eb12 020a 	adds.w	r2, r2, sl
 8004274:	eb43 030b 	adc.w	r3, r3, fp
 8004278:	f04f 0000 	mov.w	r0, #0
 800427c:	f04f 0100 	mov.w	r1, #0
 8004280:	0299      	lsls	r1, r3, #10
 8004282:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004286:	0290      	lsls	r0, r2, #10
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4610      	mov	r0, r2
 800428e:	4619      	mov	r1, r3
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	461a      	mov	r2, r3
 8004294:	f04f 0300 	mov.w	r3, #0
 8004298:	f7fb ffc2 	bl	8000220 <__aeabi_uldivmod>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4613      	mov	r3, r2
 80042a2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042a4:	4b63      	ldr	r3, [pc, #396]	; (8004434 <HAL_RCC_GetSysClockFreq+0x358>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	0c1b      	lsrs	r3, r3, #16
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	3301      	adds	r3, #1
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042bc:	61bb      	str	r3, [r7, #24]
      break;
 80042be:	e0b2      	b.n	8004426 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042c0:	4b5c      	ldr	r3, [pc, #368]	; (8004434 <HAL_RCC_GetSysClockFreq+0x358>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042c8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042ca:	4b5a      	ldr	r3, [pc, #360]	; (8004434 <HAL_RCC_GetSysClockFreq+0x358>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d04d      	beq.n	8004372 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042d6:	4b57      	ldr	r3, [pc, #348]	; (8004434 <HAL_RCC_GetSysClockFreq+0x358>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	099b      	lsrs	r3, r3, #6
 80042dc:	461a      	mov	r2, r3
 80042de:	f04f 0300 	mov.w	r3, #0
 80042e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042e6:	f04f 0100 	mov.w	r1, #0
 80042ea:	ea02 0800 	and.w	r8, r2, r0
 80042ee:	ea03 0901 	and.w	r9, r3, r1
 80042f2:	4640      	mov	r0, r8
 80042f4:	4649      	mov	r1, r9
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	014b      	lsls	r3, r1, #5
 8004300:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004304:	0142      	lsls	r2, r0, #5
 8004306:	4610      	mov	r0, r2
 8004308:	4619      	mov	r1, r3
 800430a:	ebb0 0008 	subs.w	r0, r0, r8
 800430e:	eb61 0109 	sbc.w	r1, r1, r9
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	018b      	lsls	r3, r1, #6
 800431c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004320:	0182      	lsls	r2, r0, #6
 8004322:	1a12      	subs	r2, r2, r0
 8004324:	eb63 0301 	sbc.w	r3, r3, r1
 8004328:	f04f 0000 	mov.w	r0, #0
 800432c:	f04f 0100 	mov.w	r1, #0
 8004330:	00d9      	lsls	r1, r3, #3
 8004332:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004336:	00d0      	lsls	r0, r2, #3
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	eb12 0208 	adds.w	r2, r2, r8
 8004340:	eb43 0309 	adc.w	r3, r3, r9
 8004344:	f04f 0000 	mov.w	r0, #0
 8004348:	f04f 0100 	mov.w	r1, #0
 800434c:	0259      	lsls	r1, r3, #9
 800434e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004352:	0250      	lsls	r0, r2, #9
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	4610      	mov	r0, r2
 800435a:	4619      	mov	r1, r3
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	461a      	mov	r2, r3
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	f7fb ff5c 	bl	8000220 <__aeabi_uldivmod>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4613      	mov	r3, r2
 800436e:	61fb      	str	r3, [r7, #28]
 8004370:	e04a      	b.n	8004408 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004372:	4b30      	ldr	r3, [pc, #192]	; (8004434 <HAL_RCC_GetSysClockFreq+0x358>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	099b      	lsrs	r3, r3, #6
 8004378:	461a      	mov	r2, r3
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004382:	f04f 0100 	mov.w	r1, #0
 8004386:	ea02 0400 	and.w	r4, r2, r0
 800438a:	ea03 0501 	and.w	r5, r3, r1
 800438e:	4620      	mov	r0, r4
 8004390:	4629      	mov	r1, r5
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	014b      	lsls	r3, r1, #5
 800439c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043a0:	0142      	lsls	r2, r0, #5
 80043a2:	4610      	mov	r0, r2
 80043a4:	4619      	mov	r1, r3
 80043a6:	1b00      	subs	r0, r0, r4
 80043a8:	eb61 0105 	sbc.w	r1, r1, r5
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	018b      	lsls	r3, r1, #6
 80043b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043ba:	0182      	lsls	r2, r0, #6
 80043bc:	1a12      	subs	r2, r2, r0
 80043be:	eb63 0301 	sbc.w	r3, r3, r1
 80043c2:	f04f 0000 	mov.w	r0, #0
 80043c6:	f04f 0100 	mov.w	r1, #0
 80043ca:	00d9      	lsls	r1, r3, #3
 80043cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043d0:	00d0      	lsls	r0, r2, #3
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	1912      	adds	r2, r2, r4
 80043d8:	eb45 0303 	adc.w	r3, r5, r3
 80043dc:	f04f 0000 	mov.w	r0, #0
 80043e0:	f04f 0100 	mov.w	r1, #0
 80043e4:	0299      	lsls	r1, r3, #10
 80043e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043ea:	0290      	lsls	r0, r2, #10
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	4610      	mov	r0, r2
 80043f2:	4619      	mov	r1, r3
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	461a      	mov	r2, r3
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	f7fb ff10 	bl	8000220 <__aeabi_uldivmod>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4613      	mov	r3, r2
 8004406:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004408:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <HAL_RCC_GetSysClockFreq+0x358>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	0f1b      	lsrs	r3, r3, #28
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004414:	69fa      	ldr	r2, [r7, #28]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	fbb2 f3f3 	udiv	r3, r2, r3
 800441c:	61bb      	str	r3, [r7, #24]
      break;
 800441e:	e002      	b.n	8004426 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004420:	4b05      	ldr	r3, [pc, #20]	; (8004438 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004422:	61bb      	str	r3, [r7, #24]
      break;
 8004424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004426:	69bb      	ldr	r3, [r7, #24]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3720      	adds	r7, #32
 800442c:	46bd      	mov	sp, r7
 800442e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004432:	bf00      	nop
 8004434:	40023800 	.word	0x40023800
 8004438:	00f42400 	.word	0x00f42400
 800443c:	007a1200 	.word	0x007a1200

08004440 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e28d      	b.n	800496e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 8083 	beq.w	8004566 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004460:	4b94      	ldr	r3, [pc, #592]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f003 030c 	and.w	r3, r3, #12
 8004468:	2b04      	cmp	r3, #4
 800446a:	d019      	beq.n	80044a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800446c:	4b91      	ldr	r3, [pc, #580]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004474:	2b08      	cmp	r3, #8
 8004476:	d106      	bne.n	8004486 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004478:	4b8e      	ldr	r3, [pc, #568]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004480:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004484:	d00c      	beq.n	80044a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004486:	4b8b      	ldr	r3, [pc, #556]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800448e:	2b0c      	cmp	r3, #12
 8004490:	d112      	bne.n	80044b8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004492:	4b88      	ldr	r3, [pc, #544]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800449a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800449e:	d10b      	bne.n	80044b8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a0:	4b84      	ldr	r3, [pc, #528]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d05b      	beq.n	8004564 <HAL_RCC_OscConfig+0x124>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d157      	bne.n	8004564 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e25a      	b.n	800496e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c0:	d106      	bne.n	80044d0 <HAL_RCC_OscConfig+0x90>
 80044c2:	4b7c      	ldr	r3, [pc, #496]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a7b      	ldr	r2, [pc, #492]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 80044c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	e01d      	b.n	800450c <HAL_RCC_OscConfig+0xcc>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044d8:	d10c      	bne.n	80044f4 <HAL_RCC_OscConfig+0xb4>
 80044da:	4b76      	ldr	r3, [pc, #472]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a75      	ldr	r2, [pc, #468]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 80044e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	4b73      	ldr	r3, [pc, #460]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a72      	ldr	r2, [pc, #456]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 80044ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	e00b      	b.n	800450c <HAL_RCC_OscConfig+0xcc>
 80044f4:	4b6f      	ldr	r3, [pc, #444]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a6e      	ldr	r2, [pc, #440]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 80044fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	4b6c      	ldr	r3, [pc, #432]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a6b      	ldr	r2, [pc, #428]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 8004506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800450a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d013      	beq.n	800453c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004514:	f7fd fcde 	bl	8001ed4 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800451c:	f7fd fcda 	bl	8001ed4 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b64      	cmp	r3, #100	; 0x64
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e21f      	b.n	800496e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800452e:	4b61      	ldr	r3, [pc, #388]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0f0      	beq.n	800451c <HAL_RCC_OscConfig+0xdc>
 800453a:	e014      	b.n	8004566 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453c:	f7fd fcca 	bl	8001ed4 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004544:	f7fd fcc6 	bl	8001ed4 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b64      	cmp	r3, #100	; 0x64
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e20b      	b.n	800496e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004556:	4b57      	ldr	r3, [pc, #348]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0x104>
 8004562:	e000      	b.n	8004566 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d06f      	beq.n	8004652 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004572:	4b50      	ldr	r3, [pc, #320]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 030c 	and.w	r3, r3, #12
 800457a:	2b00      	cmp	r3, #0
 800457c:	d017      	beq.n	80045ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800457e:	4b4d      	ldr	r3, [pc, #308]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004586:	2b08      	cmp	r3, #8
 8004588:	d105      	bne.n	8004596 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800458a:	4b4a      	ldr	r3, [pc, #296]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00b      	beq.n	80045ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004596:	4b47      	ldr	r3, [pc, #284]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800459e:	2b0c      	cmp	r3, #12
 80045a0:	d11c      	bne.n	80045dc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045a2:	4b44      	ldr	r3, [pc, #272]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d116      	bne.n	80045dc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ae:	4b41      	ldr	r3, [pc, #260]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d005      	beq.n	80045c6 <HAL_RCC_OscConfig+0x186>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d001      	beq.n	80045c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e1d3      	b.n	800496e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c6:	4b3b      	ldr	r3, [pc, #236]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	4937      	ldr	r1, [pc, #220]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045da:	e03a      	b.n	8004652 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d020      	beq.n	8004626 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045e4:	4b34      	ldr	r3, [pc, #208]	; (80046b8 <HAL_RCC_OscConfig+0x278>)
 80045e6:	2201      	movs	r2, #1
 80045e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ea:	f7fd fc73 	bl	8001ed4 <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045f2:	f7fd fc6f 	bl	8001ed4 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e1b4      	b.n	800496e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004604:	4b2b      	ldr	r3, [pc, #172]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f0      	beq.n	80045f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004610:	4b28      	ldr	r3, [pc, #160]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	4925      	ldr	r1, [pc, #148]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 8004620:	4313      	orrs	r3, r2
 8004622:	600b      	str	r3, [r1, #0]
 8004624:	e015      	b.n	8004652 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004626:	4b24      	ldr	r3, [pc, #144]	; (80046b8 <HAL_RCC_OscConfig+0x278>)
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462c:	f7fd fc52 	bl	8001ed4 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004634:	f7fd fc4e 	bl	8001ed4 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e193      	b.n	800496e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004646:	4b1b      	ldr	r3, [pc, #108]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f0      	bne.n	8004634 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0308 	and.w	r3, r3, #8
 800465a:	2b00      	cmp	r3, #0
 800465c:	d036      	beq.n	80046cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d016      	beq.n	8004694 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004666:	4b15      	ldr	r3, [pc, #84]	; (80046bc <HAL_RCC_OscConfig+0x27c>)
 8004668:	2201      	movs	r2, #1
 800466a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466c:	f7fd fc32 	bl	8001ed4 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004674:	f7fd fc2e 	bl	8001ed4 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e173      	b.n	800496e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004686:	4b0b      	ldr	r3, [pc, #44]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 8004688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0f0      	beq.n	8004674 <HAL_RCC_OscConfig+0x234>
 8004692:	e01b      	b.n	80046cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004694:	4b09      	ldr	r3, [pc, #36]	; (80046bc <HAL_RCC_OscConfig+0x27c>)
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469a:	f7fd fc1b 	bl	8001ed4 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a0:	e00e      	b.n	80046c0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046a2:	f7fd fc17 	bl	8001ed4 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d907      	bls.n	80046c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e15c      	b.n	800496e <HAL_RCC_OscConfig+0x52e>
 80046b4:	40023800 	.word	0x40023800
 80046b8:	42470000 	.word	0x42470000
 80046bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c0:	4b8a      	ldr	r3, [pc, #552]	; (80048ec <HAL_RCC_OscConfig+0x4ac>)
 80046c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1ea      	bne.n	80046a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 8097 	beq.w	8004808 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046da:	2300      	movs	r3, #0
 80046dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046de:	4b83      	ldr	r3, [pc, #524]	; (80048ec <HAL_RCC_OscConfig+0x4ac>)
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10f      	bne.n	800470a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ea:	2300      	movs	r3, #0
 80046ec:	60bb      	str	r3, [r7, #8]
 80046ee:	4b7f      	ldr	r3, [pc, #508]	; (80048ec <HAL_RCC_OscConfig+0x4ac>)
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	4a7e      	ldr	r2, [pc, #504]	; (80048ec <HAL_RCC_OscConfig+0x4ac>)
 80046f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f8:	6413      	str	r3, [r2, #64]	; 0x40
 80046fa:	4b7c      	ldr	r3, [pc, #496]	; (80048ec <HAL_RCC_OscConfig+0x4ac>)
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004702:	60bb      	str	r3, [r7, #8]
 8004704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004706:	2301      	movs	r3, #1
 8004708:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470a:	4b79      	ldr	r3, [pc, #484]	; (80048f0 <HAL_RCC_OscConfig+0x4b0>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004712:	2b00      	cmp	r3, #0
 8004714:	d118      	bne.n	8004748 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004716:	4b76      	ldr	r3, [pc, #472]	; (80048f0 <HAL_RCC_OscConfig+0x4b0>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a75      	ldr	r2, [pc, #468]	; (80048f0 <HAL_RCC_OscConfig+0x4b0>)
 800471c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004722:	f7fd fbd7 	bl	8001ed4 <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800472a:	f7fd fbd3 	bl	8001ed4 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e118      	b.n	800496e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800473c:	4b6c      	ldr	r3, [pc, #432]	; (80048f0 <HAL_RCC_OscConfig+0x4b0>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0f0      	beq.n	800472a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d106      	bne.n	800475e <HAL_RCC_OscConfig+0x31e>
 8004750:	4b66      	ldr	r3, [pc, #408]	; (80048ec <HAL_RCC_OscConfig+0x4ac>)
 8004752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004754:	4a65      	ldr	r2, [pc, #404]	; (80048ec <HAL_RCC_OscConfig+0x4ac>)
 8004756:	f043 0301 	orr.w	r3, r3, #1
 800475a:	6713      	str	r3, [r2, #112]	; 0x70
 800475c:	e01c      	b.n	8004798 <HAL_RCC_OscConfig+0x358>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b05      	cmp	r3, #5
 8004764:	d10c      	bne.n	8004780 <HAL_RCC_OscConfig+0x340>
 8004766:	4b61      	ldr	r3, [pc, #388]	; (80048ec <HAL_RCC_OscConfig+0x4ac>)
 8004768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476a:	4a60      	ldr	r2, [pc, #384]	; (80048ec <HAL_RCC_OscConfig+0x4ac>)
 800476c:	f043 0304 	orr.w	r3, r3, #4
 8004770:	6713      	str	r3, [r2, #112]	; 0x70
 8004772:	4b5e      	ldr	r3, [pc, #376]	; (80048ec <HAL_RCC_OscConfig+0x4ac>)
 8004774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004776:	4a5d      	ldr	r2, [pc, #372]	; (80048ec <HAL_RCC_OscConfig+0x4ac>)
 8004778:	f043 0301 	orr.w	r3, r3, #1
 800477c:	6713      	str	r3, [r2, #112]	; 0x70
 800477e:	e00b      	b.n	8004798 <HAL_RCC_OscConfig+0x358>
 8004780:	4b5a      	ldr	r3, [pc, #360]	; (80048ec <HAL_RCC_OscConfig+0x4ac>)
 8004782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004784:	4a59      	ldr	r2, [pc, #356]	; (80048ec <HAL_RCC_OscConfig+0x4ac>)
 8004786:	f023 0301 	bic.w	r3, r3, #1
 800478a:	6713      	str	r3, [r2, #112]	; 0x70
 800478c:	4b57      	ldr	r3, [pc, #348]	; (80048ec <HAL_RCC_OscConfig+0x4ac>)
 800478e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004790:	4a56      	ldr	r2, [pc, #344]	; (80048ec <HAL_RCC_OscConfig+0x4ac>)
 8004792:	f023 0304 	bic.w	r3, r3, #4
 8004796:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d015      	beq.n	80047cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a0:	f7fd fb98 	bl	8001ed4 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a6:	e00a      	b.n	80047be <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047a8:	f7fd fb94 	bl	8001ed4 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e0d7      	b.n	800496e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047be:	4b4b      	ldr	r3, [pc, #300]	; (80048ec <HAL_RCC_OscConfig+0x4ac>)
 80047c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0ee      	beq.n	80047a8 <HAL_RCC_OscConfig+0x368>
 80047ca:	e014      	b.n	80047f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047cc:	f7fd fb82 	bl	8001ed4 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047d2:	e00a      	b.n	80047ea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047d4:	f7fd fb7e 	bl	8001ed4 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e0c1      	b.n	800496e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ea:	4b40      	ldr	r3, [pc, #256]	; (80048ec <HAL_RCC_OscConfig+0x4ac>)
 80047ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1ee      	bne.n	80047d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047f6:	7dfb      	ldrb	r3, [r7, #23]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d105      	bne.n	8004808 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047fc:	4b3b      	ldr	r3, [pc, #236]	; (80048ec <HAL_RCC_OscConfig+0x4ac>)
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	4a3a      	ldr	r2, [pc, #232]	; (80048ec <HAL_RCC_OscConfig+0x4ac>)
 8004802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004806:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 80ad 	beq.w	800496c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004812:	4b36      	ldr	r3, [pc, #216]	; (80048ec <HAL_RCC_OscConfig+0x4ac>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 030c 	and.w	r3, r3, #12
 800481a:	2b08      	cmp	r3, #8
 800481c:	d060      	beq.n	80048e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d145      	bne.n	80048b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004826:	4b33      	ldr	r3, [pc, #204]	; (80048f4 <HAL_RCC_OscConfig+0x4b4>)
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482c:	f7fd fb52 	bl	8001ed4 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004834:	f7fd fb4e 	bl	8001ed4 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e093      	b.n	800496e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004846:	4b29      	ldr	r3, [pc, #164]	; (80048ec <HAL_RCC_OscConfig+0x4ac>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1f0      	bne.n	8004834 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69da      	ldr	r2, [r3, #28]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	019b      	lsls	r3, r3, #6
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004868:	085b      	lsrs	r3, r3, #1
 800486a:	3b01      	subs	r3, #1
 800486c:	041b      	lsls	r3, r3, #16
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004874:	061b      	lsls	r3, r3, #24
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	071b      	lsls	r3, r3, #28
 800487e:	491b      	ldr	r1, [pc, #108]	; (80048ec <HAL_RCC_OscConfig+0x4ac>)
 8004880:	4313      	orrs	r3, r2
 8004882:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004884:	4b1b      	ldr	r3, [pc, #108]	; (80048f4 <HAL_RCC_OscConfig+0x4b4>)
 8004886:	2201      	movs	r2, #1
 8004888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488a:	f7fd fb23 	bl	8001ed4 <HAL_GetTick>
 800488e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004890:	e008      	b.n	80048a4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004892:	f7fd fb1f 	bl	8001ed4 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e064      	b.n	800496e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048a4:	4b11      	ldr	r3, [pc, #68]	; (80048ec <HAL_RCC_OscConfig+0x4ac>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0f0      	beq.n	8004892 <HAL_RCC_OscConfig+0x452>
 80048b0:	e05c      	b.n	800496c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b2:	4b10      	ldr	r3, [pc, #64]	; (80048f4 <HAL_RCC_OscConfig+0x4b4>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b8:	f7fd fb0c 	bl	8001ed4 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048c0:	f7fd fb08 	bl	8001ed4 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e04d      	b.n	800496e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d2:	4b06      	ldr	r3, [pc, #24]	; (80048ec <HAL_RCC_OscConfig+0x4ac>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1f0      	bne.n	80048c0 <HAL_RCC_OscConfig+0x480>
 80048de:	e045      	b.n	800496c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d107      	bne.n	80048f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e040      	b.n	800496e <HAL_RCC_OscConfig+0x52e>
 80048ec:	40023800 	.word	0x40023800
 80048f0:	40007000 	.word	0x40007000
 80048f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048f8:	4b1f      	ldr	r3, [pc, #124]	; (8004978 <HAL_RCC_OscConfig+0x538>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d030      	beq.n	8004968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004910:	429a      	cmp	r2, r3
 8004912:	d129      	bne.n	8004968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800491e:	429a      	cmp	r2, r3
 8004920:	d122      	bne.n	8004968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004928:	4013      	ands	r3, r2
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800492e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004930:	4293      	cmp	r3, r2
 8004932:	d119      	bne.n	8004968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493e:	085b      	lsrs	r3, r3, #1
 8004940:	3b01      	subs	r3, #1
 8004942:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004944:	429a      	cmp	r2, r3
 8004946:	d10f      	bne.n	8004968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004952:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004954:	429a      	cmp	r2, r3
 8004956:	d107      	bne.n	8004968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004962:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004964:	429a      	cmp	r2, r3
 8004966:	d001      	beq.n	800496c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	40023800 	.word	0x40023800

0800497c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e07b      	b.n	8004a86 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	2b00      	cmp	r3, #0
 8004994:	d108      	bne.n	80049a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800499e:	d009      	beq.n	80049b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	61da      	str	r2, [r3, #28]
 80049a6:	e005      	b.n	80049b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d106      	bne.n	80049d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7fd f8a2 	bl	8001b18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049fc:	431a      	orrs	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	431a      	orrs	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a24:	431a      	orrs	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a38:	ea42 0103 	orr.w	r1, r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a40:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	0c1b      	lsrs	r3, r3, #16
 8004a52:	f003 0104 	and.w	r1, r3, #4
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	f003 0210 	and.w	r2, r3, #16
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	69da      	ldr	r2, [r3, #28]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b088      	sub	sp, #32
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	60f8      	str	r0, [r7, #12]
 8004a96:	60b9      	str	r1, [r7, #8]
 8004a98:	603b      	str	r3, [r7, #0]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d101      	bne.n	8004ab0 <HAL_SPI_Transmit+0x22>
 8004aac:	2302      	movs	r3, #2
 8004aae:	e126      	b.n	8004cfe <HAL_SPI_Transmit+0x270>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ab8:	f7fd fa0c 	bl	8001ed4 <HAL_GetTick>
 8004abc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004abe:	88fb      	ldrh	r3, [r7, #6]
 8004ac0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d002      	beq.n	8004ad4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004ace:	2302      	movs	r3, #2
 8004ad0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ad2:	e10b      	b.n	8004cec <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <HAL_SPI_Transmit+0x52>
 8004ada:	88fb      	ldrh	r3, [r7, #6]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d102      	bne.n	8004ae6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ae4:	e102      	b.n	8004cec <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2203      	movs	r2, #3
 8004aea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	88fa      	ldrh	r2, [r7, #6]
 8004afe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	88fa      	ldrh	r2, [r7, #6]
 8004b04:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b2c:	d10f      	bne.n	8004b4e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b4c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b58:	2b40      	cmp	r3, #64	; 0x40
 8004b5a:	d007      	beq.n	8004b6c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b74:	d14b      	bne.n	8004c0e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <HAL_SPI_Transmit+0xf6>
 8004b7e:	8afb      	ldrh	r3, [r7, #22]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d13e      	bne.n	8004c02 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b88:	881a      	ldrh	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b94:	1c9a      	adds	r2, r3, #2
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ba8:	e02b      	b.n	8004c02 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d112      	bne.n	8004bde <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbc:	881a      	ldrh	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc8:	1c9a      	adds	r2, r3, #2
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bdc:	e011      	b.n	8004c02 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bde:	f7fd f979 	bl	8001ed4 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d803      	bhi.n	8004bf6 <HAL_SPI_Transmit+0x168>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf4:	d102      	bne.n	8004bfc <HAL_SPI_Transmit+0x16e>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d102      	bne.n	8004c02 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c00:	e074      	b.n	8004cec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1ce      	bne.n	8004baa <HAL_SPI_Transmit+0x11c>
 8004c0c:	e04c      	b.n	8004ca8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <HAL_SPI_Transmit+0x18e>
 8004c16:	8afb      	ldrh	r3, [r7, #22]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d140      	bne.n	8004c9e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	330c      	adds	r3, #12
 8004c26:	7812      	ldrb	r2, [r2, #0]
 8004c28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2e:	1c5a      	adds	r2, r3, #1
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c42:	e02c      	b.n	8004c9e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d113      	bne.n	8004c7a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	330c      	adds	r3, #12
 8004c5c:	7812      	ldrb	r2, [r2, #0]
 8004c5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c78:	e011      	b.n	8004c9e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c7a:	f7fd f92b 	bl	8001ed4 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d803      	bhi.n	8004c92 <HAL_SPI_Transmit+0x204>
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c90:	d102      	bne.n	8004c98 <HAL_SPI_Transmit+0x20a>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d102      	bne.n	8004c9e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c9c:	e026      	b.n	8004cec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1cd      	bne.n	8004c44 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	6839      	ldr	r1, [r7, #0]
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 fbcb 	bl	8005448 <SPI_EndRxTxTransaction>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10a      	bne.n	8004cdc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	613b      	str	r3, [r7, #16]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	613b      	str	r3, [r7, #16]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	613b      	str	r3, [r7, #16]
 8004cda:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	77fb      	strb	r3, [r7, #31]
 8004ce8:	e000      	b.n	8004cec <HAL_SPI_Transmit+0x25e>
  }

error:
 8004cea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cfc:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3720      	adds	r7, #32
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b088      	sub	sp, #32
 8004d0a:	af02      	add	r7, sp, #8
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	603b      	str	r3, [r7, #0]
 8004d12:	4613      	mov	r3, r2
 8004d14:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d22:	d112      	bne.n	8004d4a <HAL_SPI_Receive+0x44>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10e      	bne.n	8004d4a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2204      	movs	r2, #4
 8004d30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d34:	88fa      	ldrh	r2, [r7, #6]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	68b9      	ldr	r1, [r7, #8]
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 f8f1 	bl	8004f28 <HAL_SPI_TransmitReceive>
 8004d46:	4603      	mov	r3, r0
 8004d48:	e0ea      	b.n	8004f20 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d101      	bne.n	8004d58 <HAL_SPI_Receive+0x52>
 8004d54:	2302      	movs	r3, #2
 8004d56:	e0e3      	b.n	8004f20 <HAL_SPI_Receive+0x21a>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d60:	f7fd f8b8 	bl	8001ed4 <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d002      	beq.n	8004d78 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004d72:	2302      	movs	r3, #2
 8004d74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d76:	e0ca      	b.n	8004f0e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <HAL_SPI_Receive+0x7e>
 8004d7e:	88fb      	ldrh	r3, [r7, #6]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d102      	bne.n	8004d8a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d88:	e0c1      	b.n	8004f0e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2204      	movs	r2, #4
 8004d8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	88fa      	ldrh	r2, [r7, #6]
 8004da2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	88fa      	ldrh	r2, [r7, #6]
 8004da8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dd0:	d10f      	bne.n	8004df2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004de0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004df0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfc:	2b40      	cmp	r3, #64	; 0x40
 8004dfe:	d007      	beq.n	8004e10 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e0e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d162      	bne.n	8004ede <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e18:	e02e      	b.n	8004e78 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d115      	bne.n	8004e54 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f103 020c 	add.w	r2, r3, #12
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e34:	7812      	ldrb	r2, [r2, #0]
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e52:	e011      	b.n	8004e78 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e54:	f7fd f83e 	bl	8001ed4 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d803      	bhi.n	8004e6c <HAL_SPI_Receive+0x166>
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6a:	d102      	bne.n	8004e72 <HAL_SPI_Receive+0x16c>
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d102      	bne.n	8004e78 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e76:	e04a      	b.n	8004f0e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1cb      	bne.n	8004e1a <HAL_SPI_Receive+0x114>
 8004e82:	e031      	b.n	8004ee8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d113      	bne.n	8004eba <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68da      	ldr	r2, [r3, #12]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9c:	b292      	uxth	r2, r2
 8004e9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea4:	1c9a      	adds	r2, r3, #2
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004eb8:	e011      	b.n	8004ede <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eba:	f7fd f80b 	bl	8001ed4 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d803      	bhi.n	8004ed2 <HAL_SPI_Receive+0x1cc>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed0:	d102      	bne.n	8004ed8 <HAL_SPI_Receive+0x1d2>
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d102      	bne.n	8004ede <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004edc:	e017      	b.n	8004f0e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1cd      	bne.n	8004e84 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	6839      	ldr	r1, [r7, #0]
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 fa45 	bl	800537c <SPI_EndRxTransaction>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2220      	movs	r2, #32
 8004efc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d002      	beq.n	8004f0c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	75fb      	strb	r3, [r7, #23]
 8004f0a:	e000      	b.n	8004f0e <HAL_SPI_Receive+0x208>
  }

error :
 8004f0c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08c      	sub	sp, #48	; 0x30
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f36:	2301      	movs	r3, #1
 8004f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d101      	bne.n	8004f4e <HAL_SPI_TransmitReceive+0x26>
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	e18a      	b.n	8005264 <HAL_SPI_TransmitReceive+0x33c>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f56:	f7fc ffbd 	bl	8001ed4 <HAL_GetTick>
 8004f5a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004f6c:	887b      	ldrh	r3, [r7, #2]
 8004f6e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d00f      	beq.n	8004f98 <HAL_SPI_TransmitReceive+0x70>
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f7e:	d107      	bne.n	8004f90 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d103      	bne.n	8004f90 <HAL_SPI_TransmitReceive+0x68>
 8004f88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f8c:	2b04      	cmp	r3, #4
 8004f8e:	d003      	beq.n	8004f98 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004f90:	2302      	movs	r3, #2
 8004f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f96:	e15b      	b.n	8005250 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d005      	beq.n	8004faa <HAL_SPI_TransmitReceive+0x82>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d002      	beq.n	8004faa <HAL_SPI_TransmitReceive+0x82>
 8004fa4:	887b      	ldrh	r3, [r7, #2]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d103      	bne.n	8004fb2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004fb0:	e14e      	b.n	8005250 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d003      	beq.n	8004fc6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2205      	movs	r2, #5
 8004fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	887a      	ldrh	r2, [r7, #2]
 8004fd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	887a      	ldrh	r2, [r7, #2]
 8004fdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	887a      	ldrh	r2, [r7, #2]
 8004fe8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	887a      	ldrh	r2, [r7, #2]
 8004fee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005006:	2b40      	cmp	r3, #64	; 0x40
 8005008:	d007      	beq.n	800501a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005018:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005022:	d178      	bne.n	8005116 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <HAL_SPI_TransmitReceive+0x10a>
 800502c:	8b7b      	ldrh	r3, [r7, #26]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d166      	bne.n	8005100 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005036:	881a      	ldrh	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005042:	1c9a      	adds	r2, r3, #2
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005056:	e053      	b.n	8005100 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b02      	cmp	r3, #2
 8005064:	d11b      	bne.n	800509e <HAL_SPI_TransmitReceive+0x176>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800506a:	b29b      	uxth	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d016      	beq.n	800509e <HAL_SPI_TransmitReceive+0x176>
 8005070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005072:	2b01      	cmp	r3, #1
 8005074:	d113      	bne.n	800509e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507a:	881a      	ldrh	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005086:	1c9a      	adds	r2, r3, #2
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005090:	b29b      	uxth	r3, r3
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d119      	bne.n	80050e0 <HAL_SPI_TransmitReceive+0x1b8>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d014      	beq.n	80050e0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68da      	ldr	r2, [r3, #12]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c0:	b292      	uxth	r2, r2
 80050c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c8:	1c9a      	adds	r2, r3, #2
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	3b01      	subs	r3, #1
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050dc:	2301      	movs	r3, #1
 80050de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80050e0:	f7fc fef8 	bl	8001ed4 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d807      	bhi.n	8005100 <HAL_SPI_TransmitReceive+0x1d8>
 80050f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f6:	d003      	beq.n	8005100 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80050fe:	e0a7      	b.n	8005250 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005104:	b29b      	uxth	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1a6      	bne.n	8005058 <HAL_SPI_TransmitReceive+0x130>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800510e:	b29b      	uxth	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1a1      	bne.n	8005058 <HAL_SPI_TransmitReceive+0x130>
 8005114:	e07c      	b.n	8005210 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d002      	beq.n	8005124 <HAL_SPI_TransmitReceive+0x1fc>
 800511e:	8b7b      	ldrh	r3, [r7, #26]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d16b      	bne.n	80051fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	330c      	adds	r3, #12
 800512e:	7812      	ldrb	r2, [r2, #0]
 8005130:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005140:	b29b      	uxth	r3, r3
 8005142:	3b01      	subs	r3, #1
 8005144:	b29a      	uxth	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800514a:	e057      	b.n	80051fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b02      	cmp	r3, #2
 8005158:	d11c      	bne.n	8005194 <HAL_SPI_TransmitReceive+0x26c>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800515e:	b29b      	uxth	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d017      	beq.n	8005194 <HAL_SPI_TransmitReceive+0x26c>
 8005164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005166:	2b01      	cmp	r3, #1
 8005168:	d114      	bne.n	8005194 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	330c      	adds	r3, #12
 8005174:	7812      	ldrb	r2, [r2, #0]
 8005176:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005186:	b29b      	uxth	r3, r3
 8005188:	3b01      	subs	r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d119      	bne.n	80051d6 <HAL_SPI_TransmitReceive+0x2ae>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d014      	beq.n	80051d6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051d2:	2301      	movs	r3, #1
 80051d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051d6:	f7fc fe7d 	bl	8001ed4 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d803      	bhi.n	80051ee <HAL_SPI_TransmitReceive+0x2c6>
 80051e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ec:	d102      	bne.n	80051f4 <HAL_SPI_TransmitReceive+0x2cc>
 80051ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d103      	bne.n	80051fc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80051fa:	e029      	b.n	8005250 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1a2      	bne.n	800514c <HAL_SPI_TransmitReceive+0x224>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800520a:	b29b      	uxth	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d19d      	bne.n	800514c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005212:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 f917 	bl	8005448 <SPI_EndRxTxTransaction>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d006      	beq.n	800522e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2220      	movs	r2, #32
 800522a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800522c:	e010      	b.n	8005250 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10b      	bne.n	800524e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005236:	2300      	movs	r3, #0
 8005238:	617b      	str	r3, [r7, #20]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	617b      	str	r3, [r7, #20]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	e000      	b.n	8005250 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800524e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005260:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005264:	4618      	mov	r0, r3
 8005266:	3730      	adds	r7, #48	; 0x30
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	603b      	str	r3, [r7, #0]
 8005278:	4613      	mov	r3, r2
 800527a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800527c:	f7fc fe2a 	bl	8001ed4 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005284:	1a9b      	subs	r3, r3, r2
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	4413      	add	r3, r2
 800528a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800528c:	f7fc fe22 	bl	8001ed4 <HAL_GetTick>
 8005290:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005292:	4b39      	ldr	r3, [pc, #228]	; (8005378 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	015b      	lsls	r3, r3, #5
 8005298:	0d1b      	lsrs	r3, r3, #20
 800529a:	69fa      	ldr	r2, [r7, #28]
 800529c:	fb02 f303 	mul.w	r3, r2, r3
 80052a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052a2:	e054      	b.n	800534e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052aa:	d050      	beq.n	800534e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052ac:	f7fc fe12 	bl	8001ed4 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d902      	bls.n	80052c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d13d      	bne.n	800533e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052da:	d111      	bne.n	8005300 <SPI_WaitFlagStateUntilTimeout+0x94>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052e4:	d004      	beq.n	80052f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ee:	d107      	bne.n	8005300 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005308:	d10f      	bne.n	800532a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005328:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e017      	b.n	800536e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	3b01      	subs	r3, #1
 800534c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4013      	ands	r3, r2
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	429a      	cmp	r2, r3
 800535c:	bf0c      	ite	eq
 800535e:	2301      	moveq	r3, #1
 8005360:	2300      	movne	r3, #0
 8005362:	b2db      	uxtb	r3, r3
 8005364:	461a      	mov	r2, r3
 8005366:	79fb      	ldrb	r3, [r7, #7]
 8005368:	429a      	cmp	r2, r3
 800536a:	d19b      	bne.n	80052a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3720      	adds	r7, #32
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	20000000 	.word	0x20000000

0800537c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af02      	add	r7, sp, #8
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005390:	d111      	bne.n	80053b6 <SPI_EndRxTransaction+0x3a>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800539a:	d004      	beq.n	80053a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053a4:	d107      	bne.n	80053b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053b4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053be:	d12a      	bne.n	8005416 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053c8:	d012      	beq.n	80053f0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	2200      	movs	r2, #0
 80053d2:	2180      	movs	r1, #128	; 0x80
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f7ff ff49 	bl	800526c <SPI_WaitFlagStateUntilTimeout>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d02d      	beq.n	800543c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e4:	f043 0220 	orr.w	r2, r3, #32
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e026      	b.n	800543e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2200      	movs	r2, #0
 80053f8:	2101      	movs	r1, #1
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f7ff ff36 	bl	800526c <SPI_WaitFlagStateUntilTimeout>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d01a      	beq.n	800543c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540a:	f043 0220 	orr.w	r2, r3, #32
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e013      	b.n	800543e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2200      	movs	r2, #0
 800541e:	2101      	movs	r1, #1
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f7ff ff23 	bl	800526c <SPI_WaitFlagStateUntilTimeout>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d007      	beq.n	800543c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005430:	f043 0220 	orr.w	r2, r3, #32
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e000      	b.n	800543e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
	...

08005448 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b088      	sub	sp, #32
 800544c:	af02      	add	r7, sp, #8
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005454:	4b1b      	ldr	r3, [pc, #108]	; (80054c4 <SPI_EndRxTxTransaction+0x7c>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a1b      	ldr	r2, [pc, #108]	; (80054c8 <SPI_EndRxTxTransaction+0x80>)
 800545a:	fba2 2303 	umull	r2, r3, r2, r3
 800545e:	0d5b      	lsrs	r3, r3, #21
 8005460:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005464:	fb02 f303 	mul.w	r3, r2, r3
 8005468:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005472:	d112      	bne.n	800549a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2200      	movs	r2, #0
 800547c:	2180      	movs	r1, #128	; 0x80
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f7ff fef4 	bl	800526c <SPI_WaitFlagStateUntilTimeout>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d016      	beq.n	80054b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548e:	f043 0220 	orr.w	r2, r3, #32
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e00f      	b.n	80054ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b0:	2b80      	cmp	r3, #128	; 0x80
 80054b2:	d0f2      	beq.n	800549a <SPI_EndRxTxTransaction+0x52>
 80054b4:	e000      	b.n	80054b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80054b6:	bf00      	nop
  }

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3718      	adds	r7, #24
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	20000000 	.word	0x20000000
 80054c8:	165e9f81 	.word	0x165e9f81

080054cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e041      	b.n	8005562 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d106      	bne.n	80054f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7fc fb58 	bl	8001ba8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	3304      	adds	r3, #4
 8005508:	4619      	mov	r1, r3
 800550a:	4610      	mov	r0, r2
 800550c:	f000 f9ce 	bl	80058ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
	...

0800556c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b01      	cmp	r3, #1
 800557e:	d001      	beq.n	8005584 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e04e      	b.n	8005622 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68da      	ldr	r2, [r3, #12]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0201 	orr.w	r2, r2, #1
 800559a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a23      	ldr	r2, [pc, #140]	; (8005630 <HAL_TIM_Base_Start_IT+0xc4>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d022      	beq.n	80055ec <HAL_TIM_Base_Start_IT+0x80>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ae:	d01d      	beq.n	80055ec <HAL_TIM_Base_Start_IT+0x80>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a1f      	ldr	r2, [pc, #124]	; (8005634 <HAL_TIM_Base_Start_IT+0xc8>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d018      	beq.n	80055ec <HAL_TIM_Base_Start_IT+0x80>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a1e      	ldr	r2, [pc, #120]	; (8005638 <HAL_TIM_Base_Start_IT+0xcc>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d013      	beq.n	80055ec <HAL_TIM_Base_Start_IT+0x80>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a1c      	ldr	r2, [pc, #112]	; (800563c <HAL_TIM_Base_Start_IT+0xd0>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00e      	beq.n	80055ec <HAL_TIM_Base_Start_IT+0x80>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a1b      	ldr	r2, [pc, #108]	; (8005640 <HAL_TIM_Base_Start_IT+0xd4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d009      	beq.n	80055ec <HAL_TIM_Base_Start_IT+0x80>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a19      	ldr	r2, [pc, #100]	; (8005644 <HAL_TIM_Base_Start_IT+0xd8>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d004      	beq.n	80055ec <HAL_TIM_Base_Start_IT+0x80>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a18      	ldr	r2, [pc, #96]	; (8005648 <HAL_TIM_Base_Start_IT+0xdc>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d111      	bne.n	8005610 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2b06      	cmp	r3, #6
 80055fc:	d010      	beq.n	8005620 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f042 0201 	orr.w	r2, r2, #1
 800560c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800560e:	e007      	b.n	8005620 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0201 	orr.w	r2, r2, #1
 800561e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	40010000 	.word	0x40010000
 8005634:	40000400 	.word	0x40000400
 8005638:	40000800 	.word	0x40000800
 800563c:	40000c00 	.word	0x40000c00
 8005640:	40010400 	.word	0x40010400
 8005644:	40014000 	.word	0x40014000
 8005648:	40001800 	.word	0x40001800

0800564c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	2b02      	cmp	r3, #2
 8005660:	d122      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b02      	cmp	r3, #2
 800566e:	d11b      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f06f 0202 	mvn.w	r2, #2
 8005678:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f8ee 	bl	8005870 <HAL_TIM_IC_CaptureCallback>
 8005694:	e005      	b.n	80056a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f8e0 	bl	800585c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f8f1 	bl	8005884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0304 	and.w	r3, r3, #4
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	d122      	bne.n	80056fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	d11b      	bne.n	80056fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f06f 0204 	mvn.w	r2, #4
 80056cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2202      	movs	r2, #2
 80056d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f8c4 	bl	8005870 <HAL_TIM_IC_CaptureCallback>
 80056e8:	e005      	b.n	80056f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f8b6 	bl	800585c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f8c7 	bl	8005884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0308 	and.w	r3, r3, #8
 8005706:	2b08      	cmp	r3, #8
 8005708:	d122      	bne.n	8005750 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f003 0308 	and.w	r3, r3, #8
 8005714:	2b08      	cmp	r3, #8
 8005716:	d11b      	bne.n	8005750 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f06f 0208 	mvn.w	r2, #8
 8005720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2204      	movs	r2, #4
 8005726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f89a 	bl	8005870 <HAL_TIM_IC_CaptureCallback>
 800573c:	e005      	b.n	800574a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f88c 	bl	800585c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f89d 	bl	8005884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	f003 0310 	and.w	r3, r3, #16
 800575a:	2b10      	cmp	r3, #16
 800575c:	d122      	bne.n	80057a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f003 0310 	and.w	r3, r3, #16
 8005768:	2b10      	cmp	r3, #16
 800576a:	d11b      	bne.n	80057a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f06f 0210 	mvn.w	r2, #16
 8005774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2208      	movs	r2, #8
 800577a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f870 	bl	8005870 <HAL_TIM_IC_CaptureCallback>
 8005790:	e005      	b.n	800579e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f862 	bl	800585c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f873 	bl	8005884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d10e      	bne.n	80057d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d107      	bne.n	80057d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f06f 0201 	mvn.w	r2, #1
 80057c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7fb ffe8 	bl	80017a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057da:	2b80      	cmp	r3, #128	; 0x80
 80057dc:	d10e      	bne.n	80057fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e8:	2b80      	cmp	r3, #128	; 0x80
 80057ea:	d107      	bne.n	80057fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f902 	bl	8005a00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005806:	2b40      	cmp	r3, #64	; 0x40
 8005808:	d10e      	bne.n	8005828 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005814:	2b40      	cmp	r3, #64	; 0x40
 8005816:	d107      	bne.n	8005828 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f838 	bl	8005898 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	f003 0320 	and.w	r3, r3, #32
 8005832:	2b20      	cmp	r3, #32
 8005834:	d10e      	bne.n	8005854 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f003 0320 	and.w	r3, r3, #32
 8005840:	2b20      	cmp	r3, #32
 8005842:	d107      	bne.n	8005854 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f06f 0220 	mvn.w	r2, #32
 800584c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f8cc 	bl	80059ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005854:	bf00      	nop
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a40      	ldr	r2, [pc, #256]	; (80059c0 <TIM_Base_SetConfig+0x114>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d013      	beq.n	80058ec <TIM_Base_SetConfig+0x40>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ca:	d00f      	beq.n	80058ec <TIM_Base_SetConfig+0x40>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a3d      	ldr	r2, [pc, #244]	; (80059c4 <TIM_Base_SetConfig+0x118>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d00b      	beq.n	80058ec <TIM_Base_SetConfig+0x40>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a3c      	ldr	r2, [pc, #240]	; (80059c8 <TIM_Base_SetConfig+0x11c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d007      	beq.n	80058ec <TIM_Base_SetConfig+0x40>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a3b      	ldr	r2, [pc, #236]	; (80059cc <TIM_Base_SetConfig+0x120>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d003      	beq.n	80058ec <TIM_Base_SetConfig+0x40>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a3a      	ldr	r2, [pc, #232]	; (80059d0 <TIM_Base_SetConfig+0x124>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d108      	bne.n	80058fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a2f      	ldr	r2, [pc, #188]	; (80059c0 <TIM_Base_SetConfig+0x114>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d02b      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800590c:	d027      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a2c      	ldr	r2, [pc, #176]	; (80059c4 <TIM_Base_SetConfig+0x118>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d023      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a2b      	ldr	r2, [pc, #172]	; (80059c8 <TIM_Base_SetConfig+0x11c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d01f      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a2a      	ldr	r2, [pc, #168]	; (80059cc <TIM_Base_SetConfig+0x120>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d01b      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a29      	ldr	r2, [pc, #164]	; (80059d0 <TIM_Base_SetConfig+0x124>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d017      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a28      	ldr	r2, [pc, #160]	; (80059d4 <TIM_Base_SetConfig+0x128>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d013      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a27      	ldr	r2, [pc, #156]	; (80059d8 <TIM_Base_SetConfig+0x12c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d00f      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a26      	ldr	r2, [pc, #152]	; (80059dc <TIM_Base_SetConfig+0x130>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d00b      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a25      	ldr	r2, [pc, #148]	; (80059e0 <TIM_Base_SetConfig+0x134>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d007      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a24      	ldr	r2, [pc, #144]	; (80059e4 <TIM_Base_SetConfig+0x138>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d003      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a23      	ldr	r2, [pc, #140]	; (80059e8 <TIM_Base_SetConfig+0x13c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d108      	bne.n	8005970 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4313      	orrs	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a0a      	ldr	r2, [pc, #40]	; (80059c0 <TIM_Base_SetConfig+0x114>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d003      	beq.n	80059a4 <TIM_Base_SetConfig+0xf8>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a0c      	ldr	r2, [pc, #48]	; (80059d0 <TIM_Base_SetConfig+0x124>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d103      	bne.n	80059ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	691a      	ldr	r2, [r3, #16]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	615a      	str	r2, [r3, #20]
}
 80059b2:	bf00      	nop
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	40010000 	.word	0x40010000
 80059c4:	40000400 	.word	0x40000400
 80059c8:	40000800 	.word	0x40000800
 80059cc:	40000c00 	.word	0x40000c00
 80059d0:	40010400 	.word	0x40010400
 80059d4:	40014000 	.word	0x40014000
 80059d8:	40014400 	.word	0x40014400
 80059dc:	40014800 	.word	0x40014800
 80059e0:	40001800 	.word	0x40001800
 80059e4:	40001c00 	.word	0x40001c00
 80059e8:	40002000 	.word	0x40002000

080059ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e03f      	b.n	8005aa6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d106      	bne.n	8005a40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7fc f8dc 	bl	8001bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2224      	movs	r2, #36	; 0x24
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68da      	ldr	r2, [r3, #12]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f9a7 	bl	8005dac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	695a      	ldr	r2, [r3, #20]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68da      	ldr	r2, [r3, #12]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b08a      	sub	sp, #40	; 0x28
 8005ab2:	af02      	add	r7, sp, #8
 8005ab4:	60f8      	str	r0, [r7, #12]
 8005ab6:	60b9      	str	r1, [r7, #8]
 8005ab8:	603b      	str	r3, [r7, #0]
 8005aba:	4613      	mov	r3, r2
 8005abc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b20      	cmp	r3, #32
 8005acc:	d17c      	bne.n	8005bc8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <HAL_UART_Transmit+0x2c>
 8005ad4:	88fb      	ldrh	r3, [r7, #6]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e075      	b.n	8005bca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <HAL_UART_Transmit+0x3e>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e06e      	b.n	8005bca <HAL_UART_Transmit+0x11c>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2221      	movs	r2, #33	; 0x21
 8005afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b02:	f7fc f9e7 	bl	8001ed4 <HAL_GetTick>
 8005b06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	88fa      	ldrh	r2, [r7, #6]
 8005b0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	88fa      	ldrh	r2, [r7, #6]
 8005b12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b1c:	d108      	bne.n	8005b30 <HAL_UART_Transmit+0x82>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d104      	bne.n	8005b30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005b26:	2300      	movs	r3, #0
 8005b28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	e003      	b.n	8005b38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b34:	2300      	movs	r3, #0
 8005b36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005b40:	e02a      	b.n	8005b98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	2180      	movs	r1, #128	; 0x80
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 f8e2 	bl	8005d16 <UART_WaitOnFlagUntilTimeout>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e036      	b.n	8005bca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10b      	bne.n	8005b7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	881b      	ldrh	r3, [r3, #0]
 8005b66:	461a      	mov	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	3302      	adds	r3, #2
 8005b76:	61bb      	str	r3, [r7, #24]
 8005b78:	e007      	b.n	8005b8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	781a      	ldrb	r2, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	3301      	adds	r3, #1
 8005b88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	3b01      	subs	r3, #1
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1cf      	bne.n	8005b42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	2140      	movs	r1, #64	; 0x40
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f8b2 	bl	8005d16 <UART_WaitOnFlagUntilTimeout>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e006      	b.n	8005bca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	e000      	b.n	8005bca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005bc8:	2302      	movs	r3, #2
  }
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3720      	adds	r7, #32
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b08a      	sub	sp, #40	; 0x28
 8005bd6:	af02      	add	r7, sp, #8
 8005bd8:	60f8      	str	r0, [r7, #12]
 8005bda:	60b9      	str	r1, [r7, #8]
 8005bdc:	603b      	str	r3, [r7, #0]
 8005bde:	4613      	mov	r3, r2
 8005be0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b20      	cmp	r3, #32
 8005bf0:	f040 808c 	bne.w	8005d0c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <HAL_UART_Receive+0x2e>
 8005bfa:	88fb      	ldrh	r3, [r7, #6]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e084      	b.n	8005d0e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d101      	bne.n	8005c12 <HAL_UART_Receive+0x40>
 8005c0e:	2302      	movs	r3, #2
 8005c10:	e07d      	b.n	8005d0e <HAL_UART_Receive+0x13c>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2222      	movs	r2, #34	; 0x22
 8005c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c2e:	f7fc f951 	bl	8001ed4 <HAL_GetTick>
 8005c32:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	88fa      	ldrh	r2, [r7, #6]
 8005c38:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	88fa      	ldrh	r2, [r7, #6]
 8005c3e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c48:	d108      	bne.n	8005c5c <HAL_UART_Receive+0x8a>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d104      	bne.n	8005c5c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005c52:	2300      	movs	r3, #0
 8005c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	61bb      	str	r3, [r7, #24]
 8005c5a:	e003      	b.n	8005c64 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c60:	2300      	movs	r3, #0
 8005c62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005c6c:	e043      	b.n	8005cf6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2200      	movs	r2, #0
 8005c76:	2120      	movs	r1, #32
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 f84c 	bl	8005d16 <UART_WaitOnFlagUntilTimeout>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d001      	beq.n	8005c88 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e042      	b.n	8005d0e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10c      	bne.n	8005ca8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	3302      	adds	r3, #2
 8005ca4:	61bb      	str	r3, [r7, #24]
 8005ca6:	e01f      	b.n	8005ce8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb0:	d007      	beq.n	8005cc2 <HAL_UART_Receive+0xf0>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10a      	bne.n	8005cd0 <HAL_UART_Receive+0xfe>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d106      	bne.n	8005cd0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	701a      	strb	r2, [r3, #0]
 8005cce:	e008      	b.n	8005ce2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1b6      	bne.n	8005c6e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	e000      	b.n	8005d0e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005d0c:	2302      	movs	r3, #2
  }
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3720      	adds	r7, #32
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b084      	sub	sp, #16
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	60f8      	str	r0, [r7, #12]
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	603b      	str	r3, [r7, #0]
 8005d22:	4613      	mov	r3, r2
 8005d24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d26:	e02c      	b.n	8005d82 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2e:	d028      	beq.n	8005d82 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d007      	beq.n	8005d46 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d36:	f7fc f8cd 	bl	8001ed4 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d21d      	bcs.n	8005d82 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68da      	ldr	r2, [r3, #12]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d54:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	695a      	ldr	r2, [r3, #20]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0201 	bic.w	r2, r2, #1
 8005d64:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2220      	movs	r2, #32
 8005d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e00f      	b.n	8005da2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	bf0c      	ite	eq
 8005d92:	2301      	moveq	r3, #1
 8005d94:	2300      	movne	r3, #0
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	461a      	mov	r2, r3
 8005d9a:	79fb      	ldrb	r3, [r7, #7]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d0c3      	beq.n	8005d28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
	...

08005dac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db0:	b09f      	sub	sp, #124	; 0x7c
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc2:	68d9      	ldr	r1, [r3, #12]
 8005dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	ea40 0301 	orr.w	r3, r0, r1
 8005dcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd0:	689a      	ldr	r2, [r3, #8]
 8005dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005df0:	f021 010c 	bic.w	r1, r1, #12
 8005df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dfa:	430b      	orrs	r3, r1
 8005dfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e0a:	6999      	ldr	r1, [r3, #24]
 8005e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	ea40 0301 	orr.w	r3, r0, r1
 8005e14:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	4bc5      	ldr	r3, [pc, #788]	; (8006130 <UART_SetConfig+0x384>)
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d004      	beq.n	8005e2a <UART_SetConfig+0x7e>
 8005e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	4bc3      	ldr	r3, [pc, #780]	; (8006134 <UART_SetConfig+0x388>)
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d103      	bne.n	8005e32 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e2a:	f7fd fde7 	bl	80039fc <HAL_RCC_GetPCLK2Freq>
 8005e2e:	6778      	str	r0, [r7, #116]	; 0x74
 8005e30:	e002      	b.n	8005e38 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e32:	f7fd fdcf 	bl	80039d4 <HAL_RCC_GetPCLK1Freq>
 8005e36:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e40:	f040 80b6 	bne.w	8005fb0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e46:	461c      	mov	r4, r3
 8005e48:	f04f 0500 	mov.w	r5, #0
 8005e4c:	4622      	mov	r2, r4
 8005e4e:	462b      	mov	r3, r5
 8005e50:	1891      	adds	r1, r2, r2
 8005e52:	6439      	str	r1, [r7, #64]	; 0x40
 8005e54:	415b      	adcs	r3, r3
 8005e56:	647b      	str	r3, [r7, #68]	; 0x44
 8005e58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e5c:	1912      	adds	r2, r2, r4
 8005e5e:	eb45 0303 	adc.w	r3, r5, r3
 8005e62:	f04f 0000 	mov.w	r0, #0
 8005e66:	f04f 0100 	mov.w	r1, #0
 8005e6a:	00d9      	lsls	r1, r3, #3
 8005e6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e70:	00d0      	lsls	r0, r2, #3
 8005e72:	4602      	mov	r2, r0
 8005e74:	460b      	mov	r3, r1
 8005e76:	1911      	adds	r1, r2, r4
 8005e78:	6639      	str	r1, [r7, #96]	; 0x60
 8005e7a:	416b      	adcs	r3, r5
 8005e7c:	667b      	str	r3, [r7, #100]	; 0x64
 8005e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	461a      	mov	r2, r3
 8005e84:	f04f 0300 	mov.w	r3, #0
 8005e88:	1891      	adds	r1, r2, r2
 8005e8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e8c:	415b      	adcs	r3, r3
 8005e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e94:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005e98:	f7fa f9c2 	bl	8000220 <__aeabi_uldivmod>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	4ba5      	ldr	r3, [pc, #660]	; (8006138 <UART_SetConfig+0x38c>)
 8005ea2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ea6:	095b      	lsrs	r3, r3, #5
 8005ea8:	011e      	lsls	r6, r3, #4
 8005eaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eac:	461c      	mov	r4, r3
 8005eae:	f04f 0500 	mov.w	r5, #0
 8005eb2:	4622      	mov	r2, r4
 8005eb4:	462b      	mov	r3, r5
 8005eb6:	1891      	adds	r1, r2, r2
 8005eb8:	6339      	str	r1, [r7, #48]	; 0x30
 8005eba:	415b      	adcs	r3, r3
 8005ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8005ebe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005ec2:	1912      	adds	r2, r2, r4
 8005ec4:	eb45 0303 	adc.w	r3, r5, r3
 8005ec8:	f04f 0000 	mov.w	r0, #0
 8005ecc:	f04f 0100 	mov.w	r1, #0
 8005ed0:	00d9      	lsls	r1, r3, #3
 8005ed2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ed6:	00d0      	lsls	r0, r2, #3
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	1911      	adds	r1, r2, r4
 8005ede:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ee0:	416b      	adcs	r3, r5
 8005ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	f04f 0300 	mov.w	r3, #0
 8005eee:	1891      	adds	r1, r2, r2
 8005ef0:	62b9      	str	r1, [r7, #40]	; 0x28
 8005ef2:	415b      	adcs	r3, r3
 8005ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ef6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005efa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005efe:	f7fa f98f 	bl	8000220 <__aeabi_uldivmod>
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	4b8c      	ldr	r3, [pc, #560]	; (8006138 <UART_SetConfig+0x38c>)
 8005f08:	fba3 1302 	umull	r1, r3, r3, r2
 8005f0c:	095b      	lsrs	r3, r3, #5
 8005f0e:	2164      	movs	r1, #100	; 0x64
 8005f10:	fb01 f303 	mul.w	r3, r1, r3
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	3332      	adds	r3, #50	; 0x32
 8005f1a:	4a87      	ldr	r2, [pc, #540]	; (8006138 <UART_SetConfig+0x38c>)
 8005f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f20:	095b      	lsrs	r3, r3, #5
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f28:	441e      	add	r6, r3
 8005f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f04f 0100 	mov.w	r1, #0
 8005f32:	4602      	mov	r2, r0
 8005f34:	460b      	mov	r3, r1
 8005f36:	1894      	adds	r4, r2, r2
 8005f38:	623c      	str	r4, [r7, #32]
 8005f3a:	415b      	adcs	r3, r3
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f42:	1812      	adds	r2, r2, r0
 8005f44:	eb41 0303 	adc.w	r3, r1, r3
 8005f48:	f04f 0400 	mov.w	r4, #0
 8005f4c:	f04f 0500 	mov.w	r5, #0
 8005f50:	00dd      	lsls	r5, r3, #3
 8005f52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f56:	00d4      	lsls	r4, r2, #3
 8005f58:	4622      	mov	r2, r4
 8005f5a:	462b      	mov	r3, r5
 8005f5c:	1814      	adds	r4, r2, r0
 8005f5e:	653c      	str	r4, [r7, #80]	; 0x50
 8005f60:	414b      	adcs	r3, r1
 8005f62:	657b      	str	r3, [r7, #84]	; 0x54
 8005f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	461a      	mov	r2, r3
 8005f6a:	f04f 0300 	mov.w	r3, #0
 8005f6e:	1891      	adds	r1, r2, r2
 8005f70:	61b9      	str	r1, [r7, #24]
 8005f72:	415b      	adcs	r3, r3
 8005f74:	61fb      	str	r3, [r7, #28]
 8005f76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f7a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005f7e:	f7fa f94f 	bl	8000220 <__aeabi_uldivmod>
 8005f82:	4602      	mov	r2, r0
 8005f84:	460b      	mov	r3, r1
 8005f86:	4b6c      	ldr	r3, [pc, #432]	; (8006138 <UART_SetConfig+0x38c>)
 8005f88:	fba3 1302 	umull	r1, r3, r3, r2
 8005f8c:	095b      	lsrs	r3, r3, #5
 8005f8e:	2164      	movs	r1, #100	; 0x64
 8005f90:	fb01 f303 	mul.w	r3, r1, r3
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	00db      	lsls	r3, r3, #3
 8005f98:	3332      	adds	r3, #50	; 0x32
 8005f9a:	4a67      	ldr	r2, [pc, #412]	; (8006138 <UART_SetConfig+0x38c>)
 8005f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa0:	095b      	lsrs	r3, r3, #5
 8005fa2:	f003 0207 	and.w	r2, r3, #7
 8005fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4432      	add	r2, r6
 8005fac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005fae:	e0b9      	b.n	8006124 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fb2:	461c      	mov	r4, r3
 8005fb4:	f04f 0500 	mov.w	r5, #0
 8005fb8:	4622      	mov	r2, r4
 8005fba:	462b      	mov	r3, r5
 8005fbc:	1891      	adds	r1, r2, r2
 8005fbe:	6139      	str	r1, [r7, #16]
 8005fc0:	415b      	adcs	r3, r3
 8005fc2:	617b      	str	r3, [r7, #20]
 8005fc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005fc8:	1912      	adds	r2, r2, r4
 8005fca:	eb45 0303 	adc.w	r3, r5, r3
 8005fce:	f04f 0000 	mov.w	r0, #0
 8005fd2:	f04f 0100 	mov.w	r1, #0
 8005fd6:	00d9      	lsls	r1, r3, #3
 8005fd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fdc:	00d0      	lsls	r0, r2, #3
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	eb12 0804 	adds.w	r8, r2, r4
 8005fe6:	eb43 0905 	adc.w	r9, r3, r5
 8005fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f04f 0100 	mov.w	r1, #0
 8005ff4:	f04f 0200 	mov.w	r2, #0
 8005ff8:	f04f 0300 	mov.w	r3, #0
 8005ffc:	008b      	lsls	r3, r1, #2
 8005ffe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006002:	0082      	lsls	r2, r0, #2
 8006004:	4640      	mov	r0, r8
 8006006:	4649      	mov	r1, r9
 8006008:	f7fa f90a 	bl	8000220 <__aeabi_uldivmod>
 800600c:	4602      	mov	r2, r0
 800600e:	460b      	mov	r3, r1
 8006010:	4b49      	ldr	r3, [pc, #292]	; (8006138 <UART_SetConfig+0x38c>)
 8006012:	fba3 2302 	umull	r2, r3, r3, r2
 8006016:	095b      	lsrs	r3, r3, #5
 8006018:	011e      	lsls	r6, r3, #4
 800601a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800601c:	4618      	mov	r0, r3
 800601e:	f04f 0100 	mov.w	r1, #0
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	1894      	adds	r4, r2, r2
 8006028:	60bc      	str	r4, [r7, #8]
 800602a:	415b      	adcs	r3, r3
 800602c:	60fb      	str	r3, [r7, #12]
 800602e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006032:	1812      	adds	r2, r2, r0
 8006034:	eb41 0303 	adc.w	r3, r1, r3
 8006038:	f04f 0400 	mov.w	r4, #0
 800603c:	f04f 0500 	mov.w	r5, #0
 8006040:	00dd      	lsls	r5, r3, #3
 8006042:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006046:	00d4      	lsls	r4, r2, #3
 8006048:	4622      	mov	r2, r4
 800604a:	462b      	mov	r3, r5
 800604c:	1814      	adds	r4, r2, r0
 800604e:	64bc      	str	r4, [r7, #72]	; 0x48
 8006050:	414b      	adcs	r3, r1
 8006052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	4618      	mov	r0, r3
 800605a:	f04f 0100 	mov.w	r1, #0
 800605e:	f04f 0200 	mov.w	r2, #0
 8006062:	f04f 0300 	mov.w	r3, #0
 8006066:	008b      	lsls	r3, r1, #2
 8006068:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800606c:	0082      	lsls	r2, r0, #2
 800606e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006072:	f7fa f8d5 	bl	8000220 <__aeabi_uldivmod>
 8006076:	4602      	mov	r2, r0
 8006078:	460b      	mov	r3, r1
 800607a:	4b2f      	ldr	r3, [pc, #188]	; (8006138 <UART_SetConfig+0x38c>)
 800607c:	fba3 1302 	umull	r1, r3, r3, r2
 8006080:	095b      	lsrs	r3, r3, #5
 8006082:	2164      	movs	r1, #100	; 0x64
 8006084:	fb01 f303 	mul.w	r3, r1, r3
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	3332      	adds	r3, #50	; 0x32
 800608e:	4a2a      	ldr	r2, [pc, #168]	; (8006138 <UART_SetConfig+0x38c>)
 8006090:	fba2 2303 	umull	r2, r3, r2, r3
 8006094:	095b      	lsrs	r3, r3, #5
 8006096:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800609a:	441e      	add	r6, r3
 800609c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800609e:	4618      	mov	r0, r3
 80060a0:	f04f 0100 	mov.w	r1, #0
 80060a4:	4602      	mov	r2, r0
 80060a6:	460b      	mov	r3, r1
 80060a8:	1894      	adds	r4, r2, r2
 80060aa:	603c      	str	r4, [r7, #0]
 80060ac:	415b      	adcs	r3, r3
 80060ae:	607b      	str	r3, [r7, #4]
 80060b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060b4:	1812      	adds	r2, r2, r0
 80060b6:	eb41 0303 	adc.w	r3, r1, r3
 80060ba:	f04f 0400 	mov.w	r4, #0
 80060be:	f04f 0500 	mov.w	r5, #0
 80060c2:	00dd      	lsls	r5, r3, #3
 80060c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060c8:	00d4      	lsls	r4, r2, #3
 80060ca:	4622      	mov	r2, r4
 80060cc:	462b      	mov	r3, r5
 80060ce:	eb12 0a00 	adds.w	sl, r2, r0
 80060d2:	eb43 0b01 	adc.w	fp, r3, r1
 80060d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	4618      	mov	r0, r3
 80060dc:	f04f 0100 	mov.w	r1, #0
 80060e0:	f04f 0200 	mov.w	r2, #0
 80060e4:	f04f 0300 	mov.w	r3, #0
 80060e8:	008b      	lsls	r3, r1, #2
 80060ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060ee:	0082      	lsls	r2, r0, #2
 80060f0:	4650      	mov	r0, sl
 80060f2:	4659      	mov	r1, fp
 80060f4:	f7fa f894 	bl	8000220 <__aeabi_uldivmod>
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	4b0e      	ldr	r3, [pc, #56]	; (8006138 <UART_SetConfig+0x38c>)
 80060fe:	fba3 1302 	umull	r1, r3, r3, r2
 8006102:	095b      	lsrs	r3, r3, #5
 8006104:	2164      	movs	r1, #100	; 0x64
 8006106:	fb01 f303 	mul.w	r3, r1, r3
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	011b      	lsls	r3, r3, #4
 800610e:	3332      	adds	r3, #50	; 0x32
 8006110:	4a09      	ldr	r2, [pc, #36]	; (8006138 <UART_SetConfig+0x38c>)
 8006112:	fba2 2303 	umull	r2, r3, r2, r3
 8006116:	095b      	lsrs	r3, r3, #5
 8006118:	f003 020f 	and.w	r2, r3, #15
 800611c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4432      	add	r2, r6
 8006122:	609a      	str	r2, [r3, #8]
}
 8006124:	bf00      	nop
 8006126:	377c      	adds	r7, #124	; 0x7c
 8006128:	46bd      	mov	sp, r7
 800612a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800612e:	bf00      	nop
 8006130:	40011000 	.word	0x40011000
 8006134:	40011400 	.word	0x40011400
 8006138:	51eb851f 	.word	0x51eb851f

0800613c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800613c:	b084      	sub	sp, #16
 800613e:	b580      	push	{r7, lr}
 8006140:	b084      	sub	sp, #16
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	f107 001c 	add.w	r0, r7, #28
 800614a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800614e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006150:	2b01      	cmp	r3, #1
 8006152:	d122      	bne.n	800619a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006158:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006168:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800617c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800617e:	2b01      	cmp	r3, #1
 8006180:	d105      	bne.n	800618e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f001 fac0 	bl	8007714 <USB_CoreReset>
 8006194:	4603      	mov	r3, r0
 8006196:	73fb      	strb	r3, [r7, #15]
 8006198:	e01a      	b.n	80061d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f001 fab4 	bl	8007714 <USB_CoreReset>
 80061ac:	4603      	mov	r3, r0
 80061ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80061b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d106      	bne.n	80061c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	639a      	str	r2, [r3, #56]	; 0x38
 80061c2:	e005      	b.n	80061d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80061d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d10b      	bne.n	80061ee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f043 0206 	orr.w	r2, r3, #6
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f043 0220 	orr.w	r2, r3, #32
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80061ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061fa:	b004      	add	sp, #16
 80061fc:	4770      	bx	lr
	...

08006200 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	4613      	mov	r3, r2
 800620c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800620e:	79fb      	ldrb	r3, [r7, #7]
 8006210:	2b02      	cmp	r3, #2
 8006212:	d165      	bne.n	80062e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	4a41      	ldr	r2, [pc, #260]	; (800631c <USB_SetTurnaroundTime+0x11c>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d906      	bls.n	800622a <USB_SetTurnaroundTime+0x2a>
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	4a40      	ldr	r2, [pc, #256]	; (8006320 <USB_SetTurnaroundTime+0x120>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d202      	bcs.n	800622a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006224:	230f      	movs	r3, #15
 8006226:	617b      	str	r3, [r7, #20]
 8006228:	e062      	b.n	80062f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	4a3c      	ldr	r2, [pc, #240]	; (8006320 <USB_SetTurnaroundTime+0x120>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d306      	bcc.n	8006240 <USB_SetTurnaroundTime+0x40>
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	4a3b      	ldr	r2, [pc, #236]	; (8006324 <USB_SetTurnaroundTime+0x124>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d202      	bcs.n	8006240 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800623a:	230e      	movs	r3, #14
 800623c:	617b      	str	r3, [r7, #20]
 800623e:	e057      	b.n	80062f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	4a38      	ldr	r2, [pc, #224]	; (8006324 <USB_SetTurnaroundTime+0x124>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d306      	bcc.n	8006256 <USB_SetTurnaroundTime+0x56>
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	4a37      	ldr	r2, [pc, #220]	; (8006328 <USB_SetTurnaroundTime+0x128>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d202      	bcs.n	8006256 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006250:	230d      	movs	r3, #13
 8006252:	617b      	str	r3, [r7, #20]
 8006254:	e04c      	b.n	80062f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	4a33      	ldr	r2, [pc, #204]	; (8006328 <USB_SetTurnaroundTime+0x128>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d306      	bcc.n	800626c <USB_SetTurnaroundTime+0x6c>
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	4a32      	ldr	r2, [pc, #200]	; (800632c <USB_SetTurnaroundTime+0x12c>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d802      	bhi.n	800626c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006266:	230c      	movs	r3, #12
 8006268:	617b      	str	r3, [r7, #20]
 800626a:	e041      	b.n	80062f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	4a2f      	ldr	r2, [pc, #188]	; (800632c <USB_SetTurnaroundTime+0x12c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d906      	bls.n	8006282 <USB_SetTurnaroundTime+0x82>
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	4a2e      	ldr	r2, [pc, #184]	; (8006330 <USB_SetTurnaroundTime+0x130>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d802      	bhi.n	8006282 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800627c:	230b      	movs	r3, #11
 800627e:	617b      	str	r3, [r7, #20]
 8006280:	e036      	b.n	80062f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	4a2a      	ldr	r2, [pc, #168]	; (8006330 <USB_SetTurnaroundTime+0x130>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d906      	bls.n	8006298 <USB_SetTurnaroundTime+0x98>
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	4a29      	ldr	r2, [pc, #164]	; (8006334 <USB_SetTurnaroundTime+0x134>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d802      	bhi.n	8006298 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006292:	230a      	movs	r3, #10
 8006294:	617b      	str	r3, [r7, #20]
 8006296:	e02b      	b.n	80062f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	4a26      	ldr	r2, [pc, #152]	; (8006334 <USB_SetTurnaroundTime+0x134>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d906      	bls.n	80062ae <USB_SetTurnaroundTime+0xae>
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4a25      	ldr	r2, [pc, #148]	; (8006338 <USB_SetTurnaroundTime+0x138>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d202      	bcs.n	80062ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80062a8:	2309      	movs	r3, #9
 80062aa:	617b      	str	r3, [r7, #20]
 80062ac:	e020      	b.n	80062f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	4a21      	ldr	r2, [pc, #132]	; (8006338 <USB_SetTurnaroundTime+0x138>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d306      	bcc.n	80062c4 <USB_SetTurnaroundTime+0xc4>
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	4a20      	ldr	r2, [pc, #128]	; (800633c <USB_SetTurnaroundTime+0x13c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d802      	bhi.n	80062c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80062be:	2308      	movs	r3, #8
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	e015      	b.n	80062f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	4a1d      	ldr	r2, [pc, #116]	; (800633c <USB_SetTurnaroundTime+0x13c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d906      	bls.n	80062da <USB_SetTurnaroundTime+0xda>
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	4a1c      	ldr	r2, [pc, #112]	; (8006340 <USB_SetTurnaroundTime+0x140>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d202      	bcs.n	80062da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80062d4:	2307      	movs	r3, #7
 80062d6:	617b      	str	r3, [r7, #20]
 80062d8:	e00a      	b.n	80062f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80062da:	2306      	movs	r3, #6
 80062dc:	617b      	str	r3, [r7, #20]
 80062de:	e007      	b.n	80062f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80062e0:	79fb      	ldrb	r3, [r7, #7]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d102      	bne.n	80062ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80062e6:	2309      	movs	r3, #9
 80062e8:	617b      	str	r3, [r7, #20]
 80062ea:	e001      	b.n	80062f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80062ec:	2309      	movs	r3, #9
 80062ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	68da      	ldr	r2, [r3, #12]
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	029b      	lsls	r3, r3, #10
 8006304:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006308:	431a      	orrs	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	371c      	adds	r7, #28
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	00d8acbf 	.word	0x00d8acbf
 8006320:	00e4e1c0 	.word	0x00e4e1c0
 8006324:	00f42400 	.word	0x00f42400
 8006328:	01067380 	.word	0x01067380
 800632c:	011a499f 	.word	0x011a499f
 8006330:	01312cff 	.word	0x01312cff
 8006334:	014ca43f 	.word	0x014ca43f
 8006338:	016e3600 	.word	0x016e3600
 800633c:	01a6ab1f 	.word	0x01a6ab1f
 8006340:	01e84800 	.word	0x01e84800

08006344 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f043 0201 	orr.w	r2, r3, #1
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f023 0201 	bic.w	r2, r3, #1
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	460b      	mov	r3, r1
 8006392:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80063a0:	78fb      	ldrb	r3, [r7, #3]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d106      	bne.n	80063b4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	60da      	str	r2, [r3, #12]
 80063b2:	e00b      	b.n	80063cc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80063b4:	78fb      	ldrb	r3, [r7, #3]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d106      	bne.n	80063c8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	60da      	str	r2, [r3, #12]
 80063c6:	e001      	b.n	80063cc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e003      	b.n	80063d4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80063cc:	2032      	movs	r0, #50	; 0x32
 80063ce:	f7fb fd8d 	bl	8001eec <HAL_Delay>

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3708      	adds	r7, #8
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063dc:	b084      	sub	sp, #16
 80063de:	b580      	push	{r7, lr}
 80063e0:	b086      	sub	sp, #24
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80063ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80063f6:	2300      	movs	r3, #0
 80063f8:	613b      	str	r3, [r7, #16]
 80063fa:	e009      	b.n	8006410 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	3340      	adds	r3, #64	; 0x40
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	2200      	movs	r2, #0
 8006408:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	3301      	adds	r3, #1
 800640e:	613b      	str	r3, [r7, #16]
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	2b0e      	cmp	r3, #14
 8006414:	d9f2      	bls.n	80063fc <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006418:	2b00      	cmp	r3, #0
 800641a:	d11c      	bne.n	8006456 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800642a:	f043 0302 	orr.w	r3, r3, #2
 800642e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006434:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	e005      	b.n	8006462 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006468:	461a      	mov	r2, r3
 800646a:	2300      	movs	r3, #0
 800646c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006474:	4619      	mov	r1, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800647c:	461a      	mov	r2, r3
 800647e:	680b      	ldr	r3, [r1, #0]
 8006480:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006484:	2b01      	cmp	r3, #1
 8006486:	d10c      	bne.n	80064a2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648a:	2b00      	cmp	r3, #0
 800648c:	d104      	bne.n	8006498 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800648e:	2100      	movs	r1, #0
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f949 	bl	8006728 <USB_SetDevSpeed>
 8006496:	e008      	b.n	80064aa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006498:	2101      	movs	r1, #1
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f944 	bl	8006728 <USB_SetDevSpeed>
 80064a0:	e003      	b.n	80064aa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80064a2:	2103      	movs	r1, #3
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 f93f 	bl	8006728 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064aa:	2110      	movs	r1, #16
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 f8f3 	bl	8006698 <USB_FlushTxFifo>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f911 	bl	80066e4 <USB_FlushRxFifo>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d2:	461a      	mov	r2, r3
 80064d4:	2300      	movs	r3, #0
 80064d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064de:	461a      	mov	r2, r3
 80064e0:	2300      	movs	r3, #0
 80064e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ea:	461a      	mov	r2, r3
 80064ec:	2300      	movs	r3, #0
 80064ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064f0:	2300      	movs	r3, #0
 80064f2:	613b      	str	r3, [r7, #16]
 80064f4:	e043      	b.n	800657e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006508:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800650c:	d118      	bne.n	8006540 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10a      	bne.n	800652a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4413      	add	r3, r2
 800651c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006520:	461a      	mov	r2, r3
 8006522:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006526:	6013      	str	r3, [r2, #0]
 8006528:	e013      	b.n	8006552 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	015a      	lsls	r2, r3, #5
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4413      	add	r3, r2
 8006532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006536:	461a      	mov	r2, r3
 8006538:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800653c:	6013      	str	r3, [r2, #0]
 800653e:	e008      	b.n	8006552 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	4413      	add	r3, r2
 8006548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654c:	461a      	mov	r2, r3
 800654e:	2300      	movs	r3, #0
 8006550:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	015a      	lsls	r2, r3, #5
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	4413      	add	r3, r2
 800655a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800655e:	461a      	mov	r2, r3
 8006560:	2300      	movs	r3, #0
 8006562:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	4413      	add	r3, r2
 800656c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006570:	461a      	mov	r2, r3
 8006572:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006576:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	3301      	adds	r3, #1
 800657c:	613b      	str	r3, [r7, #16]
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	429a      	cmp	r2, r3
 8006584:	d3b7      	bcc.n	80064f6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006586:	2300      	movs	r3, #0
 8006588:	613b      	str	r3, [r7, #16]
 800658a:	e043      	b.n	8006614 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	4413      	add	r3, r2
 8006594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800659e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065a2:	d118      	bne.n	80065d6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10a      	bne.n	80065c0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b6:	461a      	mov	r2, r3
 80065b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065bc:	6013      	str	r3, [r2, #0]
 80065be:	e013      	b.n	80065e8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065cc:	461a      	mov	r2, r3
 80065ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065d2:	6013      	str	r3, [r2, #0]
 80065d4:	e008      	b.n	80065e8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e2:	461a      	mov	r2, r3
 80065e4:	2300      	movs	r3, #0
 80065e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f4:	461a      	mov	r2, r3
 80065f6:	2300      	movs	r3, #0
 80065f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	4413      	add	r3, r2
 8006602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006606:	461a      	mov	r2, r3
 8006608:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800660c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	3301      	adds	r3, #1
 8006612:	613b      	str	r3, [r7, #16]
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	429a      	cmp	r2, r3
 800661a:	d3b7      	bcc.n	800658c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800662a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800662e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800663c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800663e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006640:	2b00      	cmp	r3, #0
 8006642:	d105      	bne.n	8006650 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	f043 0210 	orr.w	r2, r3, #16
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	699a      	ldr	r2, [r3, #24]
 8006654:	4b0f      	ldr	r3, [pc, #60]	; (8006694 <USB_DevInit+0x2b8>)
 8006656:	4313      	orrs	r3, r2
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800665c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800665e:	2b00      	cmp	r3, #0
 8006660:	d005      	beq.n	800666e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	f043 0208 	orr.w	r2, r3, #8
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800666e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006670:	2b01      	cmp	r3, #1
 8006672:	d107      	bne.n	8006684 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800667c:	f043 0304 	orr.w	r3, r3, #4
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006684:	7dfb      	ldrb	r3, [r7, #23]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006690:	b004      	add	sp, #16
 8006692:	4770      	bx	lr
 8006694:	803c3800 	.word	0x803c3800

08006698 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	019b      	lsls	r3, r3, #6
 80066aa:	f043 0220 	orr.w	r2, r3, #32
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3301      	adds	r3, #1
 80066b6:	60fb      	str	r3, [r7, #12]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4a09      	ldr	r2, [pc, #36]	; (80066e0 <USB_FlushTxFifo+0x48>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d901      	bls.n	80066c4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e006      	b.n	80066d2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	f003 0320 	and.w	r3, r3, #32
 80066cc:	2b20      	cmp	r3, #32
 80066ce:	d0f0      	beq.n	80066b2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	00030d40 	.word	0x00030d40

080066e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80066ec:	2300      	movs	r3, #0
 80066ee:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2210      	movs	r2, #16
 80066f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	3301      	adds	r3, #1
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	4a09      	ldr	r2, [pc, #36]	; (8006724 <USB_FlushRxFifo+0x40>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d901      	bls.n	8006708 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e006      	b.n	8006716 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	f003 0310 	and.w	r3, r3, #16
 8006710:	2b10      	cmp	r3, #16
 8006712:	d0f0      	beq.n	80066f6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	00030d40 	.word	0x00030d40

08006728 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	460b      	mov	r3, r1
 8006732:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	78fb      	ldrb	r3, [r7, #3]
 8006742:	68f9      	ldr	r1, [r7, #12]
 8006744:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006748:	4313      	orrs	r3, r2
 800674a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800675a:	b480      	push	{r7}
 800675c:	b087      	sub	sp, #28
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f003 0306 	and.w	r3, r3, #6
 8006772:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d102      	bne.n	8006780 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800677a:	2300      	movs	r3, #0
 800677c:	75fb      	strb	r3, [r7, #23]
 800677e:	e00a      	b.n	8006796 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2b02      	cmp	r3, #2
 8006784:	d002      	beq.n	800678c <USB_GetDevSpeed+0x32>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2b06      	cmp	r3, #6
 800678a:	d102      	bne.n	8006792 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800678c:	2302      	movs	r3, #2
 800678e:	75fb      	strb	r3, [r7, #23]
 8006790:	e001      	b.n	8006796 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006792:	230f      	movs	r3, #15
 8006794:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006796:	7dfb      	ldrb	r3, [r7, #23]
}
 8006798:	4618      	mov	r0, r3
 800679a:	371c      	adds	r7, #28
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	785b      	ldrb	r3, [r3, #1]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d13a      	bne.n	8006836 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c6:	69da      	ldr	r2, [r3, #28]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	f003 030f 	and.w	r3, r3, #15
 80067d0:	2101      	movs	r1, #1
 80067d2:	fa01 f303 	lsl.w	r3, r1, r3
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	68f9      	ldr	r1, [r7, #12]
 80067da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067de:	4313      	orrs	r3, r2
 80067e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d155      	bne.n	80068a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	78db      	ldrb	r3, [r3, #3]
 8006812:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006814:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	059b      	lsls	r3, r3, #22
 800681a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800681c:	4313      	orrs	r3, r2
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	0151      	lsls	r1, r2, #5
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	440a      	add	r2, r1
 8006826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800682a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800682e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006832:	6013      	str	r3, [r2, #0]
 8006834:	e036      	b.n	80068a4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800683c:	69da      	ldr	r2, [r3, #28]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	f003 030f 	and.w	r3, r3, #15
 8006846:	2101      	movs	r1, #1
 8006848:	fa01 f303 	lsl.w	r3, r1, r3
 800684c:	041b      	lsls	r3, r3, #16
 800684e:	68f9      	ldr	r1, [r7, #12]
 8006850:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006854:	4313      	orrs	r3, r2
 8006856:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	4413      	add	r3, r2
 8006860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d11a      	bne.n	80068a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	4413      	add	r3, r2
 8006876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	78db      	ldrb	r3, [r3, #3]
 8006888:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800688a:	430b      	orrs	r3, r1
 800688c:	4313      	orrs	r3, r2
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	0151      	lsls	r1, r2, #5
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	440a      	add	r2, r1
 8006896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800689a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800689e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
	...

080068b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	785b      	ldrb	r3, [r3, #1]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d161      	bne.n	8006994 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068e6:	d11f      	bne.n	8006928 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	015a      	lsls	r2, r3, #5
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	0151      	lsls	r1, r2, #5
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	440a      	add	r2, r1
 80068fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006902:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006906:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4413      	add	r3, r2
 8006910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	0151      	lsls	r1, r2, #5
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	440a      	add	r2, r1
 800691e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006922:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006926:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	f003 030f 	and.w	r3, r3, #15
 8006938:	2101      	movs	r1, #1
 800693a:	fa01 f303 	lsl.w	r3, r1, r3
 800693e:	b29b      	uxth	r3, r3
 8006940:	43db      	mvns	r3, r3
 8006942:	68f9      	ldr	r1, [r7, #12]
 8006944:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006948:	4013      	ands	r3, r2
 800694a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006952:	69da      	ldr	r2, [r3, #28]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	f003 030f 	and.w	r3, r3, #15
 800695c:	2101      	movs	r1, #1
 800695e:	fa01 f303 	lsl.w	r3, r1, r3
 8006962:	b29b      	uxth	r3, r3
 8006964:	43db      	mvns	r3, r3
 8006966:	68f9      	ldr	r1, [r7, #12]
 8006968:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800696c:	4013      	ands	r3, r2
 800696e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	015a      	lsls	r2, r3, #5
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	4413      	add	r3, r2
 8006978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	0159      	lsls	r1, r3, #5
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	440b      	add	r3, r1
 8006986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800698a:	4619      	mov	r1, r3
 800698c:	4b35      	ldr	r3, [pc, #212]	; (8006a64 <USB_DeactivateEndpoint+0x1b0>)
 800698e:	4013      	ands	r3, r2
 8006990:	600b      	str	r3, [r1, #0]
 8006992:	e060      	b.n	8006a56 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4413      	add	r3, r2
 800699c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069aa:	d11f      	bne.n	80069ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	0151      	lsls	r1, r2, #5
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	440a      	add	r2, r1
 80069c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80069ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	0151      	lsls	r1, r2, #5
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	440a      	add	r2, r1
 80069e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	f003 030f 	and.w	r3, r3, #15
 80069fc:	2101      	movs	r1, #1
 80069fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006a02:	041b      	lsls	r3, r3, #16
 8006a04:	43db      	mvns	r3, r3
 8006a06:	68f9      	ldr	r1, [r7, #12]
 8006a08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a16:	69da      	ldr	r2, [r3, #28]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	f003 030f 	and.w	r3, r3, #15
 8006a20:	2101      	movs	r1, #1
 8006a22:	fa01 f303 	lsl.w	r3, r1, r3
 8006a26:	041b      	lsls	r3, r3, #16
 8006a28:	43db      	mvns	r3, r3
 8006a2a:	68f9      	ldr	r1, [r7, #12]
 8006a2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a30:	4013      	ands	r3, r2
 8006a32:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	0159      	lsls	r1, r3, #5
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	440b      	add	r3, r1
 8006a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a4e:	4619      	mov	r1, r3
 8006a50:	4b05      	ldr	r3, [pc, #20]	; (8006a68 <USB_DeactivateEndpoint+0x1b4>)
 8006a52:	4013      	ands	r3, r2
 8006a54:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3714      	adds	r7, #20
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	ec337800 	.word	0xec337800
 8006a68:	eff37800 	.word	0xeff37800

08006a6c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b08a      	sub	sp, #40	; 0x28
 8006a70:	af02      	add	r7, sp, #8
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	4613      	mov	r3, r2
 8006a78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	785b      	ldrb	r3, [r3, #1]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	f040 815c 	bne.w	8006d46 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d132      	bne.n	8006afc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	0151      	lsls	r1, r2, #5
 8006aa8:	69fa      	ldr	r2, [r7, #28]
 8006aaa:	440a      	add	r2, r1
 8006aac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ab0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ab4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ab8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	015a      	lsls	r2, r3, #5
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	0151      	lsls	r1, r2, #5
 8006acc:	69fa      	ldr	r2, [r7, #28]
 8006ace:	440a      	add	r2, r1
 8006ad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ad4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ad8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	69ba      	ldr	r2, [r7, #24]
 8006aea:	0151      	lsls	r1, r2, #5
 8006aec:	69fa      	ldr	r2, [r7, #28]
 8006aee:	440a      	add	r2, r1
 8006af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006af4:	0cdb      	lsrs	r3, r3, #19
 8006af6:	04db      	lsls	r3, r3, #19
 8006af8:	6113      	str	r3, [r2, #16]
 8006afa:	e074      	b.n	8006be6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	0151      	lsls	r1, r2, #5
 8006b0e:	69fa      	ldr	r2, [r7, #28]
 8006b10:	440a      	add	r2, r1
 8006b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b16:	0cdb      	lsrs	r3, r3, #19
 8006b18:	04db      	lsls	r3, r3, #19
 8006b1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	69ba      	ldr	r2, [r7, #24]
 8006b2c:	0151      	lsls	r1, r2, #5
 8006b2e:	69fa      	ldr	r2, [r7, #28]
 8006b30:	440a      	add	r2, r1
 8006b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b4c:	691a      	ldr	r2, [r3, #16]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	6959      	ldr	r1, [r3, #20]
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	440b      	add	r3, r1
 8006b58:	1e59      	subs	r1, r3, #1
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b62:	04d9      	lsls	r1, r3, #19
 8006b64:	4b9d      	ldr	r3, [pc, #628]	; (8006ddc <USB_EPStartXfer+0x370>)
 8006b66:	400b      	ands	r3, r1
 8006b68:	69b9      	ldr	r1, [r7, #24]
 8006b6a:	0148      	lsls	r0, r1, #5
 8006b6c:	69f9      	ldr	r1, [r7, #28]
 8006b6e:	4401      	add	r1, r0
 8006b70:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006b74:	4313      	orrs	r3, r2
 8006b76:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	015a      	lsls	r2, r3, #5
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b84:	691a      	ldr	r2, [r3, #16]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b8e:	69b9      	ldr	r1, [r7, #24]
 8006b90:	0148      	lsls	r0, r1, #5
 8006b92:	69f9      	ldr	r1, [r7, #28]
 8006b94:	4401      	add	r1, r0
 8006b96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	78db      	ldrb	r3, [r3, #3]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d11f      	bne.n	8006be6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	015a      	lsls	r2, r3, #5
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	4413      	add	r3, r2
 8006bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	69ba      	ldr	r2, [r7, #24]
 8006bb6:	0151      	lsls	r1, r2, #5
 8006bb8:	69fa      	ldr	r2, [r7, #28]
 8006bba:	440a      	add	r2, r1
 8006bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bc0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006bc4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	0151      	lsls	r1, r2, #5
 8006bd8:	69fa      	ldr	r2, [r7, #28]
 8006bda:	440a      	add	r2, r1
 8006bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006be0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006be4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006be6:	79fb      	ldrb	r3, [r7, #7]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d14b      	bne.n	8006c84 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d009      	beq.n	8006c08 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c00:	461a      	mov	r2, r3
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	78db      	ldrb	r3, [r3, #3]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d128      	bne.n	8006c62 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d110      	bne.n	8006c42 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	69ba      	ldr	r2, [r7, #24]
 8006c30:	0151      	lsls	r1, r2, #5
 8006c32:	69fa      	ldr	r2, [r7, #28]
 8006c34:	440a      	add	r2, r1
 8006c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c3e:	6013      	str	r3, [r2, #0]
 8006c40:	e00f      	b.n	8006c62 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	0151      	lsls	r1, r2, #5
 8006c54:	69fa      	ldr	r2, [r7, #28]
 8006c56:	440a      	add	r2, r1
 8006c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c60:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	015a      	lsls	r2, r3, #5
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	4413      	add	r3, r2
 8006c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	0151      	lsls	r1, r2, #5
 8006c74:	69fa      	ldr	r2, [r7, #28]
 8006c76:	440a      	add	r2, r1
 8006c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c80:	6013      	str	r3, [r2, #0]
 8006c82:	e12f      	b.n	8006ee4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	69ba      	ldr	r2, [r7, #24]
 8006c94:	0151      	lsls	r1, r2, #5
 8006c96:	69fa      	ldr	r2, [r7, #28]
 8006c98:	440a      	add	r2, r1
 8006c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ca2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	78db      	ldrb	r3, [r3, #3]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d015      	beq.n	8006cd8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	695b      	ldr	r3, [r3, #20]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 8117 	beq.w	8006ee4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	f003 030f 	and.w	r3, r3, #15
 8006cc6:	2101      	movs	r1, #1
 8006cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8006ccc:	69f9      	ldr	r1, [r7, #28]
 8006cce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	634b      	str	r3, [r1, #52]	; 0x34
 8006cd6:	e105      	b.n	8006ee4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d110      	bne.n	8006d0a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	015a      	lsls	r2, r3, #5
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	4413      	add	r3, r2
 8006cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	69ba      	ldr	r2, [r7, #24]
 8006cf8:	0151      	lsls	r1, r2, #5
 8006cfa:	69fa      	ldr	r2, [r7, #28]
 8006cfc:	440a      	add	r2, r1
 8006cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d06:	6013      	str	r3, [r2, #0]
 8006d08:	e00f      	b.n	8006d2a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	69ba      	ldr	r2, [r7, #24]
 8006d1a:	0151      	lsls	r1, r2, #5
 8006d1c:	69fa      	ldr	r2, [r7, #28]
 8006d1e:	440a      	add	r2, r1
 8006d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d28:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	68d9      	ldr	r1, [r3, #12]
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	781a      	ldrb	r2, [r3, #0]
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	b298      	uxth	r0, r3
 8006d38:	79fb      	ldrb	r3, [r7, #7]
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 fa2b 	bl	800719a <USB_WritePacket>
 8006d44:	e0ce      	b.n	8006ee4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	69ba      	ldr	r2, [r7, #24]
 8006d56:	0151      	lsls	r1, r2, #5
 8006d58:	69fa      	ldr	r2, [r7, #28]
 8006d5a:	440a      	add	r2, r1
 8006d5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d60:	0cdb      	lsrs	r3, r3, #19
 8006d62:	04db      	lsls	r3, r3, #19
 8006d64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	0151      	lsls	r1, r2, #5
 8006d78:	69fa      	ldr	r2, [r7, #28]
 8006d7a:	440a      	add	r2, r1
 8006d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d88:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d126      	bne.n	8006de0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d9e:	691a      	ldr	r2, [r3, #16]
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006da8:	69b9      	ldr	r1, [r7, #24]
 8006daa:	0148      	lsls	r0, r1, #5
 8006dac:	69f9      	ldr	r1, [r7, #28]
 8006dae:	4401      	add	r1, r0
 8006db0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006db4:	4313      	orrs	r3, r2
 8006db6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	69ba      	ldr	r2, [r7, #24]
 8006dc8:	0151      	lsls	r1, r2, #5
 8006dca:	69fa      	ldr	r2, [r7, #28]
 8006dcc:	440a      	add	r2, r1
 8006dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006dd6:	6113      	str	r3, [r2, #16]
 8006dd8:	e036      	b.n	8006e48 <USB_EPStartXfer+0x3dc>
 8006dda:	bf00      	nop
 8006ddc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	695a      	ldr	r2, [r3, #20]
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	4413      	add	r3, r2
 8006dea:	1e5a      	subs	r2, r3, #1
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	015a      	lsls	r2, r3, #5
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e02:	691a      	ldr	r2, [r3, #16]
 8006e04:	8afb      	ldrh	r3, [r7, #22]
 8006e06:	04d9      	lsls	r1, r3, #19
 8006e08:	4b39      	ldr	r3, [pc, #228]	; (8006ef0 <USB_EPStartXfer+0x484>)
 8006e0a:	400b      	ands	r3, r1
 8006e0c:	69b9      	ldr	r1, [r7, #24]
 8006e0e:	0148      	lsls	r0, r1, #5
 8006e10:	69f9      	ldr	r1, [r7, #28]
 8006e12:	4401      	add	r1, r0
 8006e14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	015a      	lsls	r2, r3, #5
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	4413      	add	r3, r2
 8006e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e28:	691a      	ldr	r2, [r3, #16]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	8af9      	ldrh	r1, [r7, #22]
 8006e30:	fb01 f303 	mul.w	r3, r1, r3
 8006e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e38:	69b9      	ldr	r1, [r7, #24]
 8006e3a:	0148      	lsls	r0, r1, #5
 8006e3c:	69f9      	ldr	r1, [r7, #28]
 8006e3e:	4401      	add	r1, r0
 8006e40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e44:	4313      	orrs	r3, r2
 8006e46:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006e48:	79fb      	ldrb	r3, [r7, #7]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d10d      	bne.n	8006e6a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d009      	beq.n	8006e6a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	68d9      	ldr	r1, [r3, #12]
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	015a      	lsls	r2, r3, #5
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	4413      	add	r3, r2
 8006e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e66:	460a      	mov	r2, r1
 8006e68:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	78db      	ldrb	r3, [r3, #3]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d128      	bne.n	8006ec4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d110      	bne.n	8006ea4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	015a      	lsls	r2, r3, #5
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	4413      	add	r3, r2
 8006e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	69ba      	ldr	r2, [r7, #24]
 8006e92:	0151      	lsls	r1, r2, #5
 8006e94:	69fa      	ldr	r2, [r7, #28]
 8006e96:	440a      	add	r2, r1
 8006e98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ea0:	6013      	str	r3, [r2, #0]
 8006ea2:	e00f      	b.n	8006ec4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	015a      	lsls	r2, r3, #5
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	4413      	add	r3, r2
 8006eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	69ba      	ldr	r2, [r7, #24]
 8006eb4:	0151      	lsls	r1, r2, #5
 8006eb6:	69fa      	ldr	r2, [r7, #28]
 8006eb8:	440a      	add	r2, r1
 8006eba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ec2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	015a      	lsls	r2, r3, #5
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	4413      	add	r3, r2
 8006ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	69ba      	ldr	r2, [r7, #24]
 8006ed4:	0151      	lsls	r1, r2, #5
 8006ed6:	69fa      	ldr	r2, [r7, #28]
 8006ed8:	440a      	add	r2, r1
 8006eda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ede:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ee2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3720      	adds	r7, #32
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	1ff80000 	.word	0x1ff80000

08006ef4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	4613      	mov	r3, r2
 8006f00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	785b      	ldrb	r3, [r3, #1]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	f040 80cd 	bne.w	80070b0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d132      	bne.n	8006f84 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	0151      	lsls	r1, r2, #5
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	440a      	add	r2, r1
 8006f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	0151      	lsls	r1, r2, #5
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	440a      	add	r2, r1
 8006f58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	0151      	lsls	r1, r2, #5
 8006f74:	697a      	ldr	r2, [r7, #20]
 8006f76:	440a      	add	r2, r1
 8006f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f7c:	0cdb      	lsrs	r3, r3, #19
 8006f7e:	04db      	lsls	r3, r3, #19
 8006f80:	6113      	str	r3, [r2, #16]
 8006f82:	e04e      	b.n	8007022 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	0151      	lsls	r1, r2, #5
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	440a      	add	r2, r1
 8006f9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f9e:	0cdb      	lsrs	r3, r3, #19
 8006fa0:	04db      	lsls	r3, r3, #19
 8006fa2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	015a      	lsls	r2, r3, #5
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	0151      	lsls	r1, r2, #5
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	440a      	add	r2, r1
 8006fba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fbe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006fc2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006fc6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	695a      	ldr	r2, [r3, #20]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d903      	bls.n	8006fdc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	689a      	ldr	r2, [r3, #8]
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	015a      	lsls	r2, r3, #5
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	0151      	lsls	r1, r2, #5
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	440a      	add	r2, r1
 8006ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ff6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ffa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007008:	691a      	ldr	r2, [r3, #16]
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007012:	6939      	ldr	r1, [r7, #16]
 8007014:	0148      	lsls	r0, r1, #5
 8007016:	6979      	ldr	r1, [r7, #20]
 8007018:	4401      	add	r1, r0
 800701a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800701e:	4313      	orrs	r3, r2
 8007020:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007022:	79fb      	ldrb	r3, [r7, #7]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d11e      	bne.n	8007066 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d009      	beq.n	8007044 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	015a      	lsls	r2, r3, #5
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	4413      	add	r3, r2
 8007038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703c:	461a      	mov	r2, r3
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	0151      	lsls	r1, r2, #5
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	440a      	add	r2, r1
 800705a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800705e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007062:	6013      	str	r3, [r2, #0]
 8007064:	e092      	b.n	800718c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	0151      	lsls	r1, r2, #5
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	440a      	add	r2, r1
 800707c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007080:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007084:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d07e      	beq.n	800718c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	f003 030f 	and.w	r3, r3, #15
 800709e:	2101      	movs	r1, #1
 80070a0:	fa01 f303 	lsl.w	r3, r1, r3
 80070a4:	6979      	ldr	r1, [r7, #20]
 80070a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070aa:	4313      	orrs	r3, r2
 80070ac:	634b      	str	r3, [r1, #52]	; 0x34
 80070ae:	e06d      	b.n	800718c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	0151      	lsls	r1, r2, #5
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	440a      	add	r2, r1
 80070c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070ca:	0cdb      	lsrs	r3, r3, #19
 80070cc:	04db      	lsls	r3, r3, #19
 80070ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	0151      	lsls	r1, r2, #5
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	440a      	add	r2, r1
 80070e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070f2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	695b      	ldr	r3, [r3, #20]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d003      	beq.n	8007104 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	689a      	ldr	r2, [r3, #8]
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	4413      	add	r3, r2
 800710c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	693a      	ldr	r2, [r7, #16]
 8007114:	0151      	lsls	r1, r2, #5
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	440a      	add	r2, r1
 800711a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800711e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007122:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	4413      	add	r3, r2
 800712c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007130:	691a      	ldr	r2, [r3, #16]
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800713a:	6939      	ldr	r1, [r7, #16]
 800713c:	0148      	lsls	r0, r1, #5
 800713e:	6979      	ldr	r1, [r7, #20]
 8007140:	4401      	add	r1, r0
 8007142:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007146:	4313      	orrs	r3, r2
 8007148:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800714a:	79fb      	ldrb	r3, [r7, #7]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d10d      	bne.n	800716c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d009      	beq.n	800716c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	68d9      	ldr	r1, [r3, #12]
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	015a      	lsls	r2, r3, #5
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	4413      	add	r3, r2
 8007164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007168:	460a      	mov	r2, r1
 800716a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	4413      	add	r3, r2
 8007174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	0151      	lsls	r1, r2, #5
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	440a      	add	r2, r1
 8007182:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007186:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800718a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	371c      	adds	r7, #28
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800719a:	b480      	push	{r7}
 800719c:	b089      	sub	sp, #36	; 0x24
 800719e:	af00      	add	r7, sp, #0
 80071a0:	60f8      	str	r0, [r7, #12]
 80071a2:	60b9      	str	r1, [r7, #8]
 80071a4:	4611      	mov	r1, r2
 80071a6:	461a      	mov	r2, r3
 80071a8:	460b      	mov	r3, r1
 80071aa:	71fb      	strb	r3, [r7, #7]
 80071ac:	4613      	mov	r3, r2
 80071ae:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80071b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d11a      	bne.n	80071f6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80071c0:	88bb      	ldrh	r3, [r7, #4]
 80071c2:	3303      	adds	r3, #3
 80071c4:	089b      	lsrs	r3, r3, #2
 80071c6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80071c8:	2300      	movs	r3, #0
 80071ca:	61bb      	str	r3, [r7, #24]
 80071cc:	e00f      	b.n	80071ee <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80071ce:	79fb      	ldrb	r3, [r7, #7]
 80071d0:	031a      	lsls	r2, r3, #12
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	4413      	add	r3, r2
 80071d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071da:	461a      	mov	r2, r3
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	3304      	adds	r3, #4
 80071e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	3301      	adds	r3, #1
 80071ec:	61bb      	str	r3, [r7, #24]
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d3eb      	bcc.n	80071ce <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3724      	adds	r7, #36	; 0x24
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007204:	b480      	push	{r7}
 8007206:	b089      	sub	sp, #36	; 0x24
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	4613      	mov	r3, r2
 8007210:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800721a:	88fb      	ldrh	r3, [r7, #6]
 800721c:	3303      	adds	r3, #3
 800721e:	089b      	lsrs	r3, r3, #2
 8007220:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007222:	2300      	movs	r3, #0
 8007224:	61bb      	str	r3, [r7, #24]
 8007226:	e00b      	b.n	8007240 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	601a      	str	r2, [r3, #0]
    pDest++;
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	3304      	adds	r3, #4
 8007238:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	3301      	adds	r3, #1
 800723e:	61bb      	str	r3, [r7, #24]
 8007240:	69ba      	ldr	r2, [r7, #24]
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	429a      	cmp	r2, r3
 8007246:	d3ef      	bcc.n	8007228 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007248:	69fb      	ldr	r3, [r7, #28]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3724      	adds	r7, #36	; 0x24
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007256:	b480      	push	{r7}
 8007258:	b085      	sub	sp, #20
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	785b      	ldrb	r3, [r3, #1]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d12c      	bne.n	80072cc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	015a      	lsls	r2, r3, #5
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	4413      	add	r3, r2
 800727a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	db12      	blt.n	80072aa <USB_EPSetStall+0x54>
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00f      	beq.n	80072aa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	015a      	lsls	r2, r3, #5
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	4413      	add	r3, r2
 8007292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	0151      	lsls	r1, r2, #5
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	440a      	add	r2, r1
 80072a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072a8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	015a      	lsls	r2, r3, #5
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	4413      	add	r3, r2
 80072b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	0151      	lsls	r1, r2, #5
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	440a      	add	r2, r1
 80072c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80072c8:	6013      	str	r3, [r2, #0]
 80072ca:	e02b      	b.n	8007324 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	015a      	lsls	r2, r3, #5
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	4413      	add	r3, r2
 80072d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	db12      	blt.n	8007304 <USB_EPSetStall+0xae>
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00f      	beq.n	8007304 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	0151      	lsls	r1, r2, #5
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	440a      	add	r2, r1
 80072fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007302:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	4413      	add	r3, r2
 800730c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68ba      	ldr	r2, [r7, #8]
 8007314:	0151      	lsls	r1, r2, #5
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	440a      	add	r2, r1
 800731a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800731e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007322:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3714      	adds	r7, #20
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007332:	b480      	push	{r7}
 8007334:	b085      	sub	sp, #20
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	785b      	ldrb	r3, [r3, #1]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d128      	bne.n	80073a0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	015a      	lsls	r2, r3, #5
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	4413      	add	r3, r2
 8007356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	0151      	lsls	r1, r2, #5
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	440a      	add	r2, r1
 8007364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007368:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800736c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	78db      	ldrb	r3, [r3, #3]
 8007372:	2b03      	cmp	r3, #3
 8007374:	d003      	beq.n	800737e <USB_EPClearStall+0x4c>
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	78db      	ldrb	r3, [r3, #3]
 800737a:	2b02      	cmp	r3, #2
 800737c:	d138      	bne.n	80073f0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	4413      	add	r3, r2
 8007386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	0151      	lsls	r1, r2, #5
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	440a      	add	r2, r1
 8007394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800739c:	6013      	str	r3, [r2, #0]
 800739e:	e027      	b.n	80073f0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	0151      	lsls	r1, r2, #5
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	440a      	add	r2, r1
 80073b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	78db      	ldrb	r3, [r3, #3]
 80073c4:	2b03      	cmp	r3, #3
 80073c6:	d003      	beq.n	80073d0 <USB_EPClearStall+0x9e>
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	78db      	ldrb	r3, [r3, #3]
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d10f      	bne.n	80073f0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	0151      	lsls	r1, r2, #5
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	440a      	add	r2, r1
 80073e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073ee:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80073fe:	b480      	push	{r7}
 8007400:	b085      	sub	sp, #20
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	460b      	mov	r3, r1
 8007408:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800741c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007420:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	78fb      	ldrb	r3, [r7, #3]
 800742c:	011b      	lsls	r3, r3, #4
 800742e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007432:	68f9      	ldr	r1, [r7, #12]
 8007434:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007438:	4313      	orrs	r3, r2
 800743a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800744a:	b480      	push	{r7}
 800744c:	b085      	sub	sp, #20
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007464:	f023 0303 	bic.w	r3, r3, #3
 8007468:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007478:	f023 0302 	bic.w	r3, r3, #2
 800747c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074a6:	f023 0303 	bic.w	r3, r3, #3
 80074aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074ba:	f043 0302 	orr.w	r3, r3, #2
 80074be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3714      	adds	r7, #20
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b085      	sub	sp, #20
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	4013      	ands	r3, r2
 80074e4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80074e6:	68fb      	ldr	r3, [r7, #12]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3714      	adds	r7, #20
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	4013      	ands	r3, r2
 8007516:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	0c1b      	lsrs	r3, r3, #16
}
 800751c:	4618      	mov	r0, r3
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	4013      	ands	r3, r2
 800754a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	b29b      	uxth	r3, r3
}
 8007550:	4618      	mov	r0, r3
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	460b      	mov	r3, r1
 8007566:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800756c:	78fb      	ldrb	r3, [r7, #3]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	4413      	add	r3, r2
 8007574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	4013      	ands	r3, r2
 8007588:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800758a:	68bb      	ldr	r3, [r7, #8]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3714      	adds	r7, #20
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	460b      	mov	r3, r1
 80075a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ba:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80075bc:	78fb      	ldrb	r3, [r7, #3]
 80075be:	f003 030f 	and.w	r3, r3, #15
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	fa22 f303 	lsr.w	r3, r2, r3
 80075c8:	01db      	lsls	r3, r3, #7
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80075d2:	78fb      	ldrb	r3, [r7, #3]
 80075d4:	015a      	lsls	r2, r3, #5
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	4413      	add	r3, r2
 80075da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	693a      	ldr	r2, [r7, #16]
 80075e2:	4013      	ands	r3, r2
 80075e4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80075e6:	68bb      	ldr	r3, [r7, #8]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	371c      	adds	r7, #28
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	695b      	ldr	r3, [r3, #20]
 8007600:	f003 0301 	and.w	r3, r3, #1
}
 8007604:	4618      	mov	r0, r3
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800762a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800762e:	f023 0307 	bic.w	r3, r3, #7
 8007632:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007646:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3714      	adds	r7, #20
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
	...

08007658 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007658:	b480      	push	{r7}
 800765a:	b087      	sub	sp, #28
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	460b      	mov	r3, r1
 8007662:	607a      	str	r2, [r7, #4]
 8007664:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	333c      	adds	r3, #60	; 0x3c
 800766e:	3304      	adds	r3, #4
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	4a26      	ldr	r2, [pc, #152]	; (8007710 <USB_EP0_OutStart+0xb8>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d90a      	bls.n	8007692 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007688:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800768c:	d101      	bne.n	8007692 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800768e:	2300      	movs	r3, #0
 8007690:	e037      	b.n	8007702 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007698:	461a      	mov	r2, r3
 800769a:	2300      	movs	r3, #0
 800769c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076c0:	f043 0318 	orr.w	r3, r3, #24
 80076c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076d4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80076d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80076da:	7afb      	ldrb	r3, [r7, #11]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d10f      	bne.n	8007700 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e6:	461a      	mov	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076fa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80076fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	371c      	adds	r7, #28
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	4f54300a 	.word	0x4f54300a

08007714 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800771c:	2300      	movs	r3, #0
 800771e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	3301      	adds	r3, #1
 8007724:	60fb      	str	r3, [r7, #12]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	4a13      	ldr	r2, [pc, #76]	; (8007778 <USB_CoreReset+0x64>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d901      	bls.n	8007732 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	e01b      	b.n	800776a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	2b00      	cmp	r3, #0
 8007738:	daf2      	bge.n	8007720 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800773a:	2300      	movs	r3, #0
 800773c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	f043 0201 	orr.w	r2, r3, #1
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	3301      	adds	r3, #1
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4a09      	ldr	r2, [pc, #36]	; (8007778 <USB_CoreReset+0x64>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d901      	bls.n	800775c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007758:	2303      	movs	r3, #3
 800775a:	e006      	b.n	800776a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	2b01      	cmp	r3, #1
 8007766:	d0f0      	beq.n	800774a <USB_CoreReset+0x36>

  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	00030d40 	.word	0x00030d40

0800777c <USBD_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t rx_buf[6];
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	460b      	mov	r3, r1
 8007786:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007788:	2010      	movs	r0, #16
 800778a:	f004 fdb3 	bl	800c2f4 <USBD_static_malloc>
 800778e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d108      	bne.n	80077a8 <USBD_HID_Init+0x2c>
  {
	  usb_failed = 1;
 8007796:	4b1a      	ldr	r3, [pc, #104]	; (8007800 <USBD_HID_Init+0x84>)
 8007798:	2201      	movs	r2, #1
 800779a:	701a      	strb	r2, [r3, #0]
    pdev->pClassData = NULL;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80077a4:	2302      	movs	r3, #2
 80077a6:	e027      	b.n	80077f8 <USBD_HID_Init+0x7c>
  }

  pdev->pClassData = (void *)hhid;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	7c1b      	ldrb	r3, [r3, #16]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d103      	bne.n	80077c0 <USBD_HID_Init+0x44>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2207      	movs	r2, #7
 80077bc:	875a      	strh	r2, [r3, #58]	; 0x3a
 80077be:	e002      	b.n	80077c6 <USBD_HID_Init+0x4a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2204      	movs	r2, #4
 80077c4:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80077c6:	2320      	movs	r3, #32
 80077c8:	2203      	movs	r2, #3
 80077ca:	2181      	movs	r1, #129	; 0x81
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f004 fc32 	bl	800c036 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2201      	movs	r2, #1
 80077d6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT, This is to get out rumble data */
  USBD_LL_OpenEP(pdev, HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, HID_EPOUT_SIZE);
 80077d8:	2306      	movs	r3, #6
 80077da:	2203      	movs	r2, #3
 80077dc:	2102      	movs	r1, #2
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f004 fc29 	bl	800c036 <USBD_LL_OpenEP>
  USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, rx_buf, 1);
 80077e4:	2301      	movs	r3, #1
 80077e6:	4a07      	ldr	r2, [pc, #28]	; (8007804 <USBD_HID_Init+0x88>)
 80077e8:	2102      	movs	r1, #2
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f004 fd12 	bl	800c214 <USBD_LL_PrepareReceive>
  hhid->state = HID_IDLE;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	20000656 	.word	0x20000656
 8007804:	20000658 	.word	0x20000658

08007808 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	460b      	mov	r3, r1
 8007812:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007814:	2181      	movs	r1, #129	; 0x81
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f004 fc33 	bl	800c082 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800782e:	2b00      	cmp	r3, #0
 8007830:	d009      	beq.n	8007846 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007838:	4618      	mov	r0, r3
 800783a:	f004 fd69 	bl	800c310 <USBD_static_free>
    pdev->pClassData = NULL;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b088      	sub	sp, #32
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]


  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007860:	61bb      	str	r3, [r7, #24]
  USBD_StatusTypeDef ret = USBD_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	77fb      	strb	r3, [r7, #31]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8007866:	2300      	movs	r3, #0
 8007868:	81fb      	strh	r3, [r7, #14]

  if (hhid == NULL)
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d104      	bne.n	800787a <USBD_HID_Setup+0x2a>
  {
	  usb_failed = 1;
 8007870:	4b94      	ldr	r3, [pc, #592]	; (8007ac4 <USBD_HID_Setup+0x274>)
 8007872:	2201      	movs	r2, #1
 8007874:	701a      	strb	r2, [r3, #0]
    return (uint8_t)USBD_FAIL;
 8007876:	2303      	movs	r3, #3
 8007878:	e11f      	b.n	8007aba <USBD_HID_Setup+0x26a>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007882:	2b40      	cmp	r3, #64	; 0x40
 8007884:	f000 80cd 	beq.w	8007a22 <USBD_HID_Setup+0x1d2>
 8007888:	2b40      	cmp	r3, #64	; 0x40
 800788a:	f200 810d 	bhi.w	8007aa8 <USBD_HID_Setup+0x258>
 800788e:	2b00      	cmp	r3, #0
 8007890:	d045      	beq.n	800791e <USBD_HID_Setup+0xce>
 8007892:	2b20      	cmp	r3, #32
 8007894:	f040 8108 	bne.w	8007aa8 <USBD_HID_Setup+0x258>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	785b      	ldrb	r3, [r3, #1]
 800789c:	3b02      	subs	r3, #2
 800789e:	2b09      	cmp	r3, #9
 80078a0:	d835      	bhi.n	800790e <USBD_HID_Setup+0xbe>
 80078a2:	a201      	add	r2, pc, #4	; (adr r2, 80078a8 <USBD_HID_Setup+0x58>)
 80078a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a8:	080078ff 	.word	0x080078ff
 80078ac:	080078df 	.word	0x080078df
 80078b0:	0800790f 	.word	0x0800790f
 80078b4:	0800790f 	.word	0x0800790f
 80078b8:	0800790f 	.word	0x0800790f
 80078bc:	0800790f 	.word	0x0800790f
 80078c0:	0800790f 	.word	0x0800790f
 80078c4:	0800790f 	.word	0x0800790f
 80078c8:	080078ed 	.word	0x080078ed
 80078cc:	080078d1 	.word	0x080078d1
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	885b      	ldrh	r3, [r3, #2]
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	461a      	mov	r2, r3
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	601a      	str	r2, [r3, #0]
          break;
 80078dc:	e01e      	b.n	800791c <USBD_HID_Setup+0xcc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	2201      	movs	r2, #1
 80078e2:	4619      	mov	r1, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f001 fac4 	bl	8008e72 <USBD_CtlSendData>
          break;
 80078ea:	e017      	b.n	800791c <USBD_HID_Setup+0xcc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	885b      	ldrh	r3, [r3, #2]
 80078f0:	0a1b      	lsrs	r3, r3, #8
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	461a      	mov	r2, r3
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	605a      	str	r2, [r3, #4]
          break;
 80078fc:	e00e      	b.n	800791c <USBD_HID_Setup+0xcc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	3304      	adds	r3, #4
 8007902:	2201      	movs	r2, #1
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f001 fab3 	bl	8008e72 <USBD_CtlSendData>
          break;
 800790c:	e006      	b.n	800791c <USBD_HID_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f001 fa3d 	bl	8008d90 <USBD_CtlError>
          ret = USBD_FAIL;
 8007916:	2303      	movs	r3, #3
 8007918:	77fb      	strb	r3, [r7, #31]
          break;
 800791a:	bf00      	nop
      }
      break;
 800791c:	e0cc      	b.n	8007ab8 <USBD_HID_Setup+0x268>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	785b      	ldrb	r3, [r3, #1]
 8007922:	2b0b      	cmp	r3, #11
 8007924:	d874      	bhi.n	8007a10 <USBD_HID_Setup+0x1c0>
 8007926:	a201      	add	r2, pc, #4	; (adr r2, 800792c <USBD_HID_Setup+0xdc>)
 8007928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792c:	0800795d 	.word	0x0800795d
 8007930:	08007a1f 	.word	0x08007a1f
 8007934:	08007a11 	.word	0x08007a11
 8007938:	08007a11 	.word	0x08007a11
 800793c:	08007a11 	.word	0x08007a11
 8007940:	08007a11 	.word	0x08007a11
 8007944:	08007987 	.word	0x08007987
 8007948:	08007a11 	.word	0x08007a11
 800794c:	08007a11 	.word	0x08007a11
 8007950:	08007a11 	.word	0x08007a11
 8007954:	080079bf 	.word	0x080079bf
 8007958:	080079e9 	.word	0x080079e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b03      	cmp	r3, #3
 8007966:	d107      	bne.n	8007978 <USBD_HID_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007968:	f107 030e 	add.w	r3, r7, #14
 800796c:	2202      	movs	r2, #2
 800796e:	4619      	mov	r1, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f001 fa7e 	bl	8008e72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007976:	e053      	b.n	8007a20 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f001 fa08 	bl	8008d90 <USBD_CtlError>
            ret = USBD_FAIL;
 8007980:	2303      	movs	r3, #3
 8007982:	77fb      	strb	r3, [r7, #31]
          break;
 8007984:	e04c      	b.n	8007a20 <USBD_HID_Setup+0x1d0>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
            pbuf = HID_MOUSE_ReportDesc;
          }
#endif
           if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	885b      	ldrh	r3, [r3, #2]
 800798a:	0a1b      	lsrs	r3, r3, #8
 800798c:	b29b      	uxth	r3, r3
 800798e:	2b21      	cmp	r3, #33	; 0x21
 8007990:	d10e      	bne.n	80079b0 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8007992:	4b4d      	ldr	r3, [pc, #308]	; (8007ac8 <USBD_HID_Setup+0x278>)
 8007994:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	88db      	ldrh	r3, [r3, #6]
 800799a:	2b12      	cmp	r3, #18
 800799c:	bf28      	it	cs
 800799e:	2312      	movcs	r3, #18
 80079a0:	82fb      	strh	r3, [r7, #22]
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
            break;
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80079a2:	8afb      	ldrh	r3, [r7, #22]
 80079a4:	461a      	mov	r2, r3
 80079a6:	6939      	ldr	r1, [r7, #16]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f001 fa62 	bl	8008e72 <USBD_CtlSendData>
          break;
 80079ae:	e037      	b.n	8007a20 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f001 f9ec 	bl	8008d90 <USBD_CtlError>
            ret = USBD_FAIL;
 80079b8:	2303      	movs	r3, #3
 80079ba:	77fb      	strb	r3, [r7, #31]
            break;
 80079bc:	e030      	b.n	8007a20 <USBD_HID_Setup+0x1d0>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b03      	cmp	r3, #3
 80079c8:	d107      	bne.n	80079da <USBD_HID_Setup+0x18a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	3308      	adds	r3, #8
 80079ce:	2201      	movs	r2, #1
 80079d0:	4619      	mov	r1, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f001 fa4d 	bl	8008e72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80079d8:	e022      	b.n	8007a20 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f001 f9d7 	bl	8008d90 <USBD_CtlError>
            ret = USBD_FAIL;
 80079e2:	2303      	movs	r3, #3
 80079e4:	77fb      	strb	r3, [r7, #31]
          break;
 80079e6:	e01b      	b.n	8007a20 <USBD_HID_Setup+0x1d0>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b03      	cmp	r3, #3
 80079f2:	d106      	bne.n	8007a02 <USBD_HID_Setup+0x1b2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	885b      	ldrh	r3, [r3, #2]
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	461a      	mov	r2, r3
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a00:	e00e      	b.n	8007a20 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 8007a02:	6839      	ldr	r1, [r7, #0]
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f001 f9c3 	bl	8008d90 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	77fb      	strb	r3, [r7, #31]
          break;
 8007a0e:	e007      	b.n	8007a20 <USBD_HID_Setup+0x1d0>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007a10:	6839      	ldr	r1, [r7, #0]
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f001 f9bc 	bl	8008d90 <USBD_CtlError>
          ret = USBD_FAIL;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	77fb      	strb	r3, [r7, #31]
          break;
 8007a1c:	e000      	b.n	8007a20 <USBD_HID_Setup+0x1d0>
          break;
 8007a1e:	bf00      	nop
      }
      break;
 8007a20:	e04a      	b.n	8007ab8 <USBD_HID_Setup+0x268>
    /*This is for the og xbox, this is the custom vendor request */
    case (0xC1 & USB_REQ_TYPE_MASK):
    	 hid_setup_ran++;
 8007a22:	4b2a      	ldr	r3, [pc, #168]	; (8007acc <USBD_HID_Setup+0x27c>)
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	3301      	adds	r3, #1
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	4b28      	ldr	r3, [pc, #160]	; (8007acc <USBD_HID_Setup+0x27c>)
 8007a2c:	701a      	strb	r2, [r3, #0]
    	if(req->bRequest == 0x06 && req->wValue == 0x4200) {
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	785b      	ldrb	r3, [r3, #1]
 8007a32:	2b06      	cmp	r3, #6
 8007a34:	d10f      	bne.n	8007a56 <USBD_HID_Setup+0x206>
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	885b      	ldrh	r3, [r3, #2]
 8007a3a:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 8007a3e:	d10a      	bne.n	8007a56 <USBD_HID_Setup+0x206>
    		len = 16;
 8007a40:	2310      	movs	r3, #16
 8007a42:	82fb      	strh	r3, [r7, #22]
    		pbuf = USBD_HID_Desc;
 8007a44:	4b20      	ldr	r3, [pc, #128]	; (8007ac8 <USBD_HID_Setup+0x278>)
 8007a46:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8007a48:	8afb      	ldrh	r3, [r7, #22]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	6939      	ldr	r1, [r7, #16]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f001 fa0f 	bl	8008e72 <USBD_CtlSendData>
 8007a54:	e027      	b.n	8007aa6 <USBD_HID_Setup+0x256>
    	}
    	else if(req->bRequest == 0x01 && req->wValue == 0x0100) {
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	785b      	ldrb	r3, [r3, #1]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d10f      	bne.n	8007a7e <USBD_HID_Setup+0x22e>
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	885b      	ldrh	r3, [r3, #2]
 8007a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a66:	d10a      	bne.n	8007a7e <USBD_HID_Setup+0x22e>
    		len = 20;
 8007a68:	2314      	movs	r3, #20
 8007a6a:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_IN;
 8007a6c:	4b18      	ldr	r3, [pc, #96]	; (8007ad0 <USBD_HID_Setup+0x280>)
 8007a6e:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8007a70:	8afb      	ldrh	r3, [r7, #22]
 8007a72:	461a      	mov	r2, r3
 8007a74:	6939      	ldr	r1, [r7, #16]
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f001 f9fb 	bl	8008e72 <USBD_CtlSendData>
 8007a7c:	e013      	b.n	8007aa6 <USBD_HID_Setup+0x256>
    	}
    	else if (req->bRequest == 0x01 && req->wValue == 0x0200) {
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	785b      	ldrb	r3, [r3, #1]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d117      	bne.n	8007ab6 <USBD_HID_Setup+0x266>
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	885b      	ldrh	r3, [r3, #2]
 8007a8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a8e:	d112      	bne.n	8007ab6 <USBD_HID_Setup+0x266>
    		len = 6;
 8007a90:	2306      	movs	r3, #6
 8007a92:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_OUT;
 8007a94:	4b0f      	ldr	r3, [pc, #60]	; (8007ad4 <USBD_HID_Setup+0x284>)
 8007a96:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8007a98:	8afb      	ldrh	r3, [r7, #22]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	6939      	ldr	r1, [r7, #16]
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f001 f9e7 	bl	8008e72 <USBD_CtlSendData>
    	}
    break;
 8007aa4:	e007      	b.n	8007ab6 <USBD_HID_Setup+0x266>
 8007aa6:	e006      	b.n	8007ab6 <USBD_HID_Setup+0x266>


    default:
      USBD_CtlError(pdev, req);
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f001 f970 	bl	8008d90 <USBD_CtlError>
      ret = USBD_FAIL;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	77fb      	strb	r3, [r7, #31]
      break;
 8007ab4:	e000      	b.n	8007ab8 <USBD_HID_Setup+0x268>
    break;
 8007ab6:	bf00      	nop
  }

  return (uint8_t)ret;
 8007ab8:	7ffb      	ldrb	r3, [r7, #31]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3720      	adds	r7, #32
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	20000656 	.word	0x20000656
 8007ac8:	20000084 	.word	0x20000084
 8007acc:	20000655 	.word	0x20000655
 8007ad0:	200000a0 	.word	0x200000a0
 8007ad4:	200000b4 	.word	0x200000b4

08007ad8 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aec:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d101      	bne.n	8007af8 <USBD_HID_SendReport+0x20>
  {
	  //usb_failed = 1;
    return (uint8_t)USBD_FAIL;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e013      	b.n	8007b20 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b03      	cmp	r3, #3
 8007b02:	d10c      	bne.n	8007b1e <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	7b1b      	ldrb	r3, [r3, #12]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d108      	bne.n	8007b1e <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8007b12:	88fb      	ldrh	r3, [r7, #6]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	2181      	movs	r1, #129	; 0x81
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f004 fb5a 	bl	800c1d2 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3718      	adds	r7, #24
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2220      	movs	r2, #32
 8007b34:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8007b36:	4b03      	ldr	r3, [pc, #12]	; (8007b44 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	20000044 	.word	0x20000044

08007b48 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
#if PC_SETUP
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);

  return USBD_HID_CfgHSDesc;
#endif
}
 8007b50:	bf00      	nop
 8007b52:	4618      	mov	r0, r3
 8007b54:	370c      	adds	r7, #12
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
	...

08007b60 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */

static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2220      	movs	r2, #32
 8007b6c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8007b6e:	4b03      	ldr	r3, [pc, #12]	; (8007b7c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	20000064 	.word	0x20000064

08007b80 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b92:	2200      	movs	r2, #0
 8007b94:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <USBD_HID_DataOut>:

static uint8_t USBD_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	460b      	mov	r3, r1
 8007bae:	70fb      	strb	r3, [r7, #3]
    HAL_PCD_EP_Receive(&hUsbDeviceFS.pData, HID_EPOUT_ADDR, rx_buf, 6);
 8007bb0:	2306      	movs	r3, #6
 8007bb2:	4a05      	ldr	r2, [pc, #20]	; (8007bc8 <USBD_HID_DataOut+0x24>)
 8007bb4:	2102      	movs	r1, #2
 8007bb6:	4805      	ldr	r0, [pc, #20]	; (8007bcc <USBD_HID_DataOut+0x28>)
 8007bb8:	f7fb fa70 	bl	800309c <HAL_PCD_EP_Receive>
	return USBD_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	20000658 	.word	0x20000658
 8007bcc:	200052e0 	.word	0x200052e0

08007bd0 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]

  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	220a      	movs	r2, #10
 8007bdc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8007bde:	4b03      	ldr	r3, [pc, #12]	; (8007bec <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	20000094 	.word	0x20000094

08007bf0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d101      	bne.n	8007c08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e01f      	b.n	8007c48 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d003      	beq.n	8007c2e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	79fa      	ldrb	r2, [r7, #7]
 8007c3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f004 f993 	bl	800bf68 <USBD_LL_Init>
 8007c42:	4603      	mov	r3, r0
 8007c44:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3718      	adds	r7, #24
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d101      	bne.n	8007c68 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007c64:	2303      	movs	r3, #3
 8007c66:	e016      	b.n	8007c96 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	683a      	ldr	r2, [r7, #0]
 8007c6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00b      	beq.n	8007c94 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c84:	f107 020e 	add.w	r2, r7, #14
 8007c88:	4610      	mov	r0, r2
 8007c8a:	4798      	blx	r3
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b082      	sub	sp, #8
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f004 f9aa 	bl	800c000 <USBD_LL_Start>
 8007cac:	4603      	mov	r3, r0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b083      	sub	sp, #12
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d009      	beq.n	8007cfa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	78fa      	ldrb	r2, [r7, #3]
 8007cf0:	4611      	mov	r1, r2
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	4798      	blx	r3
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d007      	beq.n	8007d2a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	78fa      	ldrb	r2, [r7, #3]
 8007d24:	4611      	mov	r1, r2
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	4798      	blx	r3
  }

  return USBD_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	4618      	mov	r0, r3
 8007d48:	f000 ffe8 	bl	8008d1c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d68:	f003 031f 	and.w	r3, r3, #31
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d01a      	beq.n	8007da6 <USBD_LL_SetupStage+0x72>
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d822      	bhi.n	8007dba <USBD_LL_SetupStage+0x86>
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d002      	beq.n	8007d7e <USBD_LL_SetupStage+0x4a>
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d00a      	beq.n	8007d92 <USBD_LL_SetupStage+0x5e>
 8007d7c:	e01d      	b.n	8007dba <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d84:	4619      	mov	r1, r3
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fa62 	bl	8008250 <USBD_StdDevReq>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d90:	e020      	b.n	8007dd4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d98:	4619      	mov	r1, r3
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fb1e 	bl	80083dc <USBD_StdItfReq>
 8007da0:	4603      	mov	r3, r0
 8007da2:	73fb      	strb	r3, [r7, #15]
      break;
 8007da4:	e016      	b.n	8007dd4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007dac:	4619      	mov	r1, r3
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fb5d 	bl	800846e <USBD_StdEPReq>
 8007db4:	4603      	mov	r3, r0
 8007db6:	73fb      	strb	r3, [r7, #15]
      break;
 8007db8:	e00c      	b.n	8007dd4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007dc0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f004 f979 	bl	800c0c0 <USBD_LL_StallEP>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8007dd2:	bf00      	nop
  }

  return ret;
 8007dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b086      	sub	sp, #24
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	60f8      	str	r0, [r7, #12]
 8007de6:	460b      	mov	r3, r1
 8007de8:	607a      	str	r2, [r7, #4]
 8007dea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007dec:	7afb      	ldrb	r3, [r7, #11]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d138      	bne.n	8007e64 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007df8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e00:	2b03      	cmp	r3, #3
 8007e02:	d14a      	bne.n	8007e9a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	689a      	ldr	r2, [r3, #8]
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d913      	bls.n	8007e38 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	689a      	ldr	r2, [r3, #8]
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	1ad2      	subs	r2, r2, r3
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	68da      	ldr	r2, [r3, #12]
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	4293      	cmp	r3, r2
 8007e28:	bf28      	it	cs
 8007e2a:	4613      	movcs	r3, r2
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	6879      	ldr	r1, [r7, #4]
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f001 f84a 	bl	8008eca <USBD_CtlContinueRx>
 8007e36:	e030      	b.n	8007e9a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	2b03      	cmp	r3, #3
 8007e42:	d10b      	bne.n	8007e5c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d005      	beq.n	8007e5c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f001 f845 	bl	8008eec <USBD_CtlSendStatus>
 8007e62:	e01a      	b.n	8007e9a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b03      	cmp	r3, #3
 8007e6e:	d114      	bne.n	8007e9a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e76:	699b      	ldr	r3, [r3, #24]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00e      	beq.n	8007e9a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	7afa      	ldrb	r2, [r7, #11]
 8007e86:	4611      	mov	r1, r2
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	4798      	blx	r3
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007e90:	7dfb      	ldrb	r3, [r7, #23]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d001      	beq.n	8007e9a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007e96:	7dfb      	ldrb	r3, [r7, #23]
 8007e98:	e000      	b.n	8007e9c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3718      	adds	r7, #24
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b086      	sub	sp, #24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	460b      	mov	r3, r1
 8007eae:	607a      	str	r2, [r7, #4]
 8007eb0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007eb2:	7afb      	ldrb	r3, [r7, #11]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d16b      	bne.n	8007f90 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	3314      	adds	r3, #20
 8007ebc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d156      	bne.n	8007f76 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	689a      	ldr	r2, [r3, #8]
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d914      	bls.n	8007efe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	689a      	ldr	r2, [r3, #8]
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	1ad2      	subs	r2, r2, r3
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	6879      	ldr	r1, [r7, #4]
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f000 ffdc 	bl	8008ea8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f004 f98c 	bl	800c214 <USBD_LL_PrepareReceive>
 8007efc:	e03b      	b.n	8007f76 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	68da      	ldr	r2, [r3, #12]
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d11c      	bne.n	8007f44 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d316      	bcc.n	8007f44 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	685a      	ldr	r2, [r3, #4]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d20f      	bcs.n	8007f44 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f24:	2200      	movs	r2, #0
 8007f26:	2100      	movs	r1, #0
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f000 ffbd 	bl	8008ea8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f36:	2300      	movs	r3, #0
 8007f38:	2200      	movs	r2, #0
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f004 f969 	bl	800c214 <USBD_LL_PrepareReceive>
 8007f42:	e018      	b.n	8007f76 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	2b03      	cmp	r3, #3
 8007f4e:	d10b      	bne.n	8007f68 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d005      	beq.n	8007f68 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f68:	2180      	movs	r1, #128	; 0x80
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f004 f8a8 	bl	800c0c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f000 ffce 	bl	8008f12 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d122      	bne.n	8007fc6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f7ff fe98 	bl	8007cb6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f8e:	e01a      	b.n	8007fc6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b03      	cmp	r3, #3
 8007f9a:	d114      	bne.n	8007fc6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fa2:	695b      	ldr	r3, [r3, #20]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00e      	beq.n	8007fc6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fae:	695b      	ldr	r3, [r3, #20]
 8007fb0:	7afa      	ldrb	r2, [r7, #11]
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	4798      	blx	r3
 8007fb8:	4603      	mov	r3, r0
 8007fba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007fbc:	7dfb      	ldrb	r3, [r7, #23]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d001      	beq.n	8007fc6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007fc2:	7dfb      	ldrb	r3, [r7, #23]
 8007fc4:	e000      	b.n	8007fc8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3718      	adds	r7, #24
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d101      	bne.n	8008004 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008000:	2303      	movs	r3, #3
 8008002:	e02f      	b.n	8008064 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00f      	beq.n	800802e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d009      	beq.n	800802e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	6852      	ldr	r2, [r2, #4]
 8008026:	b2d2      	uxtb	r2, r2
 8008028:	4611      	mov	r1, r2
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800802e:	2340      	movs	r3, #64	; 0x40
 8008030:	2200      	movs	r2, #0
 8008032:	2100      	movs	r1, #0
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f003 fffe 	bl	800c036 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2240      	movs	r2, #64	; 0x40
 8008046:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800804a:	2340      	movs	r3, #64	; 0x40
 800804c:	2200      	movs	r2, #0
 800804e:	2180      	movs	r1, #128	; 0x80
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f003 fff0 	bl	800c036 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2240      	movs	r2, #64	; 0x40
 8008060:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3708      	adds	r7, #8
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	460b      	mov	r3, r1
 8008076:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	78fa      	ldrb	r2, [r7, #3]
 800807c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800809a:	b2da      	uxtb	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2204      	movs	r2, #4
 80080a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	2b04      	cmp	r3, #4
 80080ca:	d106      	bne.n	80080da <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80080d2:	b2da      	uxtb	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e012      	b.n	8008124 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b03      	cmp	r3, #3
 8008108:	d10b      	bne.n	8008122 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008110:	69db      	ldr	r3, [r3, #28]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d005      	beq.n	8008122 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800811c:	69db      	ldr	r3, [r3, #28]
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	3708      	adds	r7, #8
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	460b      	mov	r3, r1
 8008136:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800813e:	2b00      	cmp	r3, #0
 8008140:	d101      	bne.n	8008146 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008142:	2303      	movs	r3, #3
 8008144:	e014      	b.n	8008170 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800814c:	b2db      	uxtb	r3, r3
 800814e:	2b03      	cmp	r3, #3
 8008150:	d10d      	bne.n	800816e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d007      	beq.n	800816e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	78fa      	ldrb	r2, [r7, #3]
 8008168:	4611      	mov	r1, r2
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	460b      	mov	r3, r1
 8008182:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800818a:	2b00      	cmp	r3, #0
 800818c:	d101      	bne.n	8008192 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800818e:	2303      	movs	r3, #3
 8008190:	e014      	b.n	80081bc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b03      	cmp	r3, #3
 800819c:	d10d      	bne.n	80081ba <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d007      	beq.n	80081ba <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b2:	78fa      	ldrb	r2, [r7, #3]
 80081b4:	4611      	mov	r1, r2
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	370c      	adds	r7, #12
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr

080081da <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80081da:	b580      	push	{r7, lr}
 80081dc:	b082      	sub	sp, #8
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d009      	beq.n	8008208 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	6852      	ldr	r2, [r2, #4]
 8008200:	b2d2      	uxtb	r2, r2
 8008202:	4611      	mov	r1, r2
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	4798      	blx	r3
  }

  return USBD_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008212:	b480      	push	{r7}
 8008214:	b087      	sub	sp, #28
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	3301      	adds	r3, #1
 8008228:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008230:	8a3b      	ldrh	r3, [r7, #16]
 8008232:	021b      	lsls	r3, r3, #8
 8008234:	b21a      	sxth	r2, r3
 8008236:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800823a:	4313      	orrs	r3, r2
 800823c:	b21b      	sxth	r3, r3
 800823e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008240:	89fb      	ldrh	r3, [r7, #14]
}
 8008242:	4618      	mov	r0, r3
 8008244:	371c      	adds	r7, #28
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
	...

08008250 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	73fb      	strb	r3, [r7, #15]


  if(req->bmRequest == 0xC1) {
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	2bc1      	cmp	r3, #193	; 0xc1
 8008264:	d148      	bne.n	80082f8 <USBD_StdDevReq+0xa8>
	  uint16_t len = 0;
 8008266:	2300      	movs	r3, #0
 8008268:	81bb      	strh	r3, [r7, #12]
	  uint8_t *pbuf = NULL;
 800826a:	2300      	movs	r3, #0
 800826c:	60bb      	str	r3, [r7, #8]
  	if(req->bRequest == 0x06 && req->wValue == 0x4200) {
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	785b      	ldrb	r3, [r3, #1]
 8008272:	2b06      	cmp	r3, #6
 8008274:	d10f      	bne.n	8008296 <USBD_StdDevReq+0x46>
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	885b      	ldrh	r3, [r3, #2]
 800827a:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 800827e:	d10a      	bne.n	8008296 <USBD_StdDevReq+0x46>
  		len = 16;
 8008280:	2310      	movs	r3, #16
 8008282:	81bb      	strh	r3, [r7, #12]
  		pbuf = USBD_HID_Desc;
 8008284:	4b51      	ldr	r3, [pc, #324]	; (80083cc <USBD_StdDevReq+0x17c>)
 8008286:	60bb      	str	r3, [r7, #8]
  		(void)USBD_CtlSendData(pdev, pbuf, len);
 8008288:	89bb      	ldrh	r3, [r7, #12]
 800828a:	461a      	mov	r2, r3
 800828c:	68b9      	ldr	r1, [r7, #8]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fdef 	bl	8008e72 <USBD_CtlSendData>
 8008294:	e026      	b.n	80082e4 <USBD_StdDevReq+0x94>
  	}
  	else if(req->bRequest == 0x01 && req->wValue == 0x0100) {
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	785b      	ldrb	r3, [r3, #1]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d10f      	bne.n	80082be <USBD_StdDevReq+0x6e>
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	885b      	ldrh	r3, [r3, #2]
 80082a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082a6:	d10a      	bne.n	80082be <USBD_StdDevReq+0x6e>
  		len = 20;
 80082a8:	2314      	movs	r3, #20
 80082aa:	81bb      	strh	r3, [r7, #12]
  		pbuf = DUKE_HID_CAPABILITIES_IN;
 80082ac:	4b48      	ldr	r3, [pc, #288]	; (80083d0 <USBD_StdDevReq+0x180>)
 80082ae:	60bb      	str	r3, [r7, #8]
  		(void)USBD_CtlSendData(pdev, pbuf, len);
 80082b0:	89bb      	ldrh	r3, [r7, #12]
 80082b2:	461a      	mov	r2, r3
 80082b4:	68b9      	ldr	r1, [r7, #8]
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fddb 	bl	8008e72 <USBD_CtlSendData>
 80082bc:	e012      	b.n	80082e4 <USBD_StdDevReq+0x94>
  	}
  	else if (req->bRequest == 0x01 && req->wValue == 0x0200) {
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	785b      	ldrb	r3, [r3, #1]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d10e      	bne.n	80082e4 <USBD_StdDevReq+0x94>
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	885b      	ldrh	r3, [r3, #2]
 80082ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082ce:	d109      	bne.n	80082e4 <USBD_StdDevReq+0x94>
  		len = 6;
 80082d0:	2306      	movs	r3, #6
 80082d2:	81bb      	strh	r3, [r7, #12]
  		pbuf = DUKE_HID_CAPABILITIES_OUT;
 80082d4:	4b3f      	ldr	r3, [pc, #252]	; (80083d4 <USBD_StdDevReq+0x184>)
 80082d6:	60bb      	str	r3, [r7, #8]
  		(void)USBD_CtlSendData(pdev, pbuf, len);
 80082d8:	89bb      	ldrh	r3, [r7, #12]
 80082da:	461a      	mov	r2, r3
 80082dc:	68b9      	ldr	r1, [r7, #8]
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fdc7 	bl	8008e72 <USBD_CtlSendData>
  	}
	  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	6839      	ldr	r1, [r7, #0]
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	4798      	blx	r3
 80082f2:	4603      	mov	r3, r0
 80082f4:	73fb      	strb	r3, [r7, #15]
 80082f6:	e064      	b.n	80083c2 <USBD_StdDevReq+0x172>


  } else {
	  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008300:	2b40      	cmp	r3, #64	; 0x40
 8008302:	d005      	beq.n	8008310 <USBD_StdDevReq+0xc0>
 8008304:	2b40      	cmp	r3, #64	; 0x40
 8008306:	d854      	bhi.n	80083b2 <USBD_StdDevReq+0x162>
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00b      	beq.n	8008324 <USBD_StdDevReq+0xd4>
 800830c:	2b20      	cmp	r3, #32
 800830e:	d150      	bne.n	80083b2 <USBD_StdDevReq+0x162>
	  {
		case USB_REQ_TYPE_CLASS:
		case USB_REQ_TYPE_VENDOR:
		  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	4798      	blx	r3
 800831e:	4603      	mov	r3, r0
 8008320:	73fb      	strb	r3, [r7, #15]
		  break;
 8008322:	e04e      	b.n	80083c2 <USBD_StdDevReq+0x172>

		case USB_REQ_TYPE_STANDARD:
		  switch (req->bRequest)
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	785b      	ldrb	r3, [r3, #1]
 8008328:	2b09      	cmp	r3, #9
 800832a:	d83c      	bhi.n	80083a6 <USBD_StdDevReq+0x156>
 800832c:	a201      	add	r2, pc, #4	; (adr r2, 8008334 <USBD_StdDevReq+0xe4>)
 800832e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008332:	bf00      	nop
 8008334:	08008389 	.word	0x08008389
 8008338:	0800839d 	.word	0x0800839d
 800833c:	080083a7 	.word	0x080083a7
 8008340:	08008393 	.word	0x08008393
 8008344:	080083a7 	.word	0x080083a7
 8008348:	08008367 	.word	0x08008367
 800834c:	0800835d 	.word	0x0800835d
 8008350:	080083a7 	.word	0x080083a7
 8008354:	0800837f 	.word	0x0800837f
 8008358:	08008371 	.word	0x08008371
		  {
			case USB_REQ_GET_DESCRIPTOR:
			  USBD_GetDescriptor(pdev, req);
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f9e8 	bl	8008734 <USBD_GetDescriptor>
			  break;
 8008364:	e024      	b.n	80083b0 <USBD_StdDevReq+0x160>

			case USB_REQ_SET_ADDRESS:
			  USBD_SetAddress(pdev, req);
 8008366:	6839      	ldr	r1, [r7, #0]
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fb4d 	bl	8008a08 <USBD_SetAddress>
			  break;
 800836e:	e01f      	b.n	80083b0 <USBD_StdDevReq+0x160>

			case USB_REQ_SET_CONFIGURATION:
			  ret = USBD_SetConfig(pdev, req);
 8008370:	6839      	ldr	r1, [r7, #0]
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fb8c 	bl	8008a90 <USBD_SetConfig>
 8008378:	4603      	mov	r3, r0
 800837a:	73fb      	strb	r3, [r7, #15]
			  break;
 800837c:	e018      	b.n	80083b0 <USBD_StdDevReq+0x160>

			case USB_REQ_GET_CONFIGURATION:
			  USBD_GetConfig(pdev, req);
 800837e:	6839      	ldr	r1, [r7, #0]
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 fc2b 	bl	8008bdc <USBD_GetConfig>
			  break;
 8008386:	e013      	b.n	80083b0 <USBD_StdDevReq+0x160>

			case USB_REQ_GET_STATUS:
			  USBD_GetStatus(pdev, req);
 8008388:	6839      	ldr	r1, [r7, #0]
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fc5c 	bl	8008c48 <USBD_GetStatus>
			  break;
 8008390:	e00e      	b.n	80083b0 <USBD_StdDevReq+0x160>

			case USB_REQ_SET_FEATURE:
			  USBD_SetFeature(pdev, req);
 8008392:	6839      	ldr	r1, [r7, #0]
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 fc8b 	bl	8008cb0 <USBD_SetFeature>
			  break;
 800839a:	e009      	b.n	80083b0 <USBD_StdDevReq+0x160>

			case USB_REQ_CLEAR_FEATURE:
			  USBD_ClrFeature(pdev, req);
 800839c:	6839      	ldr	r1, [r7, #0]
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fc9a 	bl	8008cd8 <USBD_ClrFeature>
			  break;
 80083a4:	e004      	b.n	80083b0 <USBD_StdDevReq+0x160>

			default:
			  USBD_CtlError(pdev, req);
 80083a6:	6839      	ldr	r1, [r7, #0]
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fcf1 	bl	8008d90 <USBD_CtlError>
			  break;
 80083ae:	bf00      	nop
		  }
		  break;
 80083b0:	e007      	b.n	80083c2 <USBD_StdDevReq+0x172>

		default:
		  unknown_bmrequest = 1;
 80083b2:	4b09      	ldr	r3, [pc, #36]	; (80083d8 <USBD_StdDevReq+0x188>)
 80083b4:	2201      	movs	r2, #1
 80083b6:	701a      	strb	r2, [r3, #0]
		  USBD_CtlError(pdev, req);
 80083b8:	6839      	ldr	r1, [r7, #0]
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fce8 	bl	8008d90 <USBD_CtlError>
		  break;
 80083c0:	bf00      	nop
	  }
	}
  return ret;
 80083c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	200000bc 	.word	0x200000bc
 80083d0:	200000cc 	.word	0x200000cc
 80083d4:	200000e0 	.word	0x200000e0
 80083d8:	2000065e 	.word	0x2000065e

080083dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083f2:	2b40      	cmp	r3, #64	; 0x40
 80083f4:	d005      	beq.n	8008402 <USBD_StdItfReq+0x26>
 80083f6:	2b40      	cmp	r3, #64	; 0x40
 80083f8:	d82f      	bhi.n	800845a <USBD_StdItfReq+0x7e>
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <USBD_StdItfReq+0x26>
 80083fe:	2b20      	cmp	r3, #32
 8008400:	d12b      	bne.n	800845a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008408:	b2db      	uxtb	r3, r3
 800840a:	3b01      	subs	r3, #1
 800840c:	2b02      	cmp	r3, #2
 800840e:	d81d      	bhi.n	800844c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	889b      	ldrh	r3, [r3, #4]
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b01      	cmp	r3, #1
 8008418:	d813      	bhi.n	8008442 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	6839      	ldr	r1, [r7, #0]
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	4798      	blx	r3
 8008428:	4603      	mov	r3, r0
 800842a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	88db      	ldrh	r3, [r3, #6]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d110      	bne.n	8008456 <USBD_StdItfReq+0x7a>
 8008434:	7bfb      	ldrb	r3, [r7, #15]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10d      	bne.n	8008456 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fd56 	bl	8008eec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008440:	e009      	b.n	8008456 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008442:	6839      	ldr	r1, [r7, #0]
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fca3 	bl	8008d90 <USBD_CtlError>
          break;
 800844a:	e004      	b.n	8008456 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fc9e 	bl	8008d90 <USBD_CtlError>
          break;
 8008454:	e000      	b.n	8008458 <USBD_StdItfReq+0x7c>
          break;
 8008456:	bf00      	nop
      }
      break;
 8008458:	e004      	b.n	8008464 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fc97 	bl	8008d90 <USBD_CtlError>
      break;
 8008462:	bf00      	nop
  }

  return ret;
 8008464:	7bfb      	ldrb	r3, [r7, #15]
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b084      	sub	sp, #16
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
 8008476:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008478:	2300      	movs	r3, #0
 800847a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	889b      	ldrh	r3, [r3, #4]
 8008480:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800848a:	2b40      	cmp	r3, #64	; 0x40
 800848c:	d007      	beq.n	800849e <USBD_StdEPReq+0x30>
 800848e:	2b40      	cmp	r3, #64	; 0x40
 8008490:	f200 8145 	bhi.w	800871e <USBD_StdEPReq+0x2b0>
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00c      	beq.n	80084b2 <USBD_StdEPReq+0x44>
 8008498:	2b20      	cmp	r3, #32
 800849a:	f040 8140 	bne.w	800871e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	4798      	blx	r3
 80084ac:	4603      	mov	r3, r0
 80084ae:	73fb      	strb	r3, [r7, #15]
      break;
 80084b0:	e13a      	b.n	8008728 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	785b      	ldrb	r3, [r3, #1]
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	d007      	beq.n	80084ca <USBD_StdEPReq+0x5c>
 80084ba:	2b03      	cmp	r3, #3
 80084bc:	f300 8129 	bgt.w	8008712 <USBD_StdEPReq+0x2a4>
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d07f      	beq.n	80085c4 <USBD_StdEPReq+0x156>
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d03c      	beq.n	8008542 <USBD_StdEPReq+0xd4>
 80084c8:	e123      	b.n	8008712 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d002      	beq.n	80084dc <USBD_StdEPReq+0x6e>
 80084d6:	2b03      	cmp	r3, #3
 80084d8:	d016      	beq.n	8008508 <USBD_StdEPReq+0x9a>
 80084da:	e02c      	b.n	8008536 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084dc:	7bbb      	ldrb	r3, [r7, #14]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00d      	beq.n	80084fe <USBD_StdEPReq+0x90>
 80084e2:	7bbb      	ldrb	r3, [r7, #14]
 80084e4:	2b80      	cmp	r3, #128	; 0x80
 80084e6:	d00a      	beq.n	80084fe <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80084e8:	7bbb      	ldrb	r3, [r7, #14]
 80084ea:	4619      	mov	r1, r3
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f003 fde7 	bl	800c0c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80084f2:	2180      	movs	r1, #128	; 0x80
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f003 fde3 	bl	800c0c0 <USBD_LL_StallEP>
 80084fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084fc:	e020      	b.n	8008540 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fc45 	bl	8008d90 <USBD_CtlError>
              break;
 8008506:	e01b      	b.n	8008540 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	885b      	ldrh	r3, [r3, #2]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10e      	bne.n	800852e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008510:	7bbb      	ldrb	r3, [r7, #14]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00b      	beq.n	800852e <USBD_StdEPReq+0xc0>
 8008516:	7bbb      	ldrb	r3, [r7, #14]
 8008518:	2b80      	cmp	r3, #128	; 0x80
 800851a:	d008      	beq.n	800852e <USBD_StdEPReq+0xc0>
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	88db      	ldrh	r3, [r3, #6]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d104      	bne.n	800852e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008524:	7bbb      	ldrb	r3, [r7, #14]
 8008526:	4619      	mov	r1, r3
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f003 fdc9 	bl	800c0c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fcdc 	bl	8008eec <USBD_CtlSendStatus>

              break;
 8008534:	e004      	b.n	8008540 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fc29 	bl	8008d90 <USBD_CtlError>
              break;
 800853e:	bf00      	nop
          }
          break;
 8008540:	e0ec      	b.n	800871c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b02      	cmp	r3, #2
 800854c:	d002      	beq.n	8008554 <USBD_StdEPReq+0xe6>
 800854e:	2b03      	cmp	r3, #3
 8008550:	d016      	beq.n	8008580 <USBD_StdEPReq+0x112>
 8008552:	e030      	b.n	80085b6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008554:	7bbb      	ldrb	r3, [r7, #14]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00d      	beq.n	8008576 <USBD_StdEPReq+0x108>
 800855a:	7bbb      	ldrb	r3, [r7, #14]
 800855c:	2b80      	cmp	r3, #128	; 0x80
 800855e:	d00a      	beq.n	8008576 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008560:	7bbb      	ldrb	r3, [r7, #14]
 8008562:	4619      	mov	r1, r3
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f003 fdab 	bl	800c0c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800856a:	2180      	movs	r1, #128	; 0x80
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f003 fda7 	bl	800c0c0 <USBD_LL_StallEP>
 8008572:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008574:	e025      	b.n	80085c2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008576:	6839      	ldr	r1, [r7, #0]
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fc09 	bl	8008d90 <USBD_CtlError>
              break;
 800857e:	e020      	b.n	80085c2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	885b      	ldrh	r3, [r3, #2]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d11b      	bne.n	80085c0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008588:	7bbb      	ldrb	r3, [r7, #14]
 800858a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800858e:	2b00      	cmp	r3, #0
 8008590:	d004      	beq.n	800859c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008592:	7bbb      	ldrb	r3, [r7, #14]
 8008594:	4619      	mov	r1, r3
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f003 fdb1 	bl	800c0fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 fca5 	bl	8008eec <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	6839      	ldr	r1, [r7, #0]
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	4798      	blx	r3
 80085b0:	4603      	mov	r3, r0
 80085b2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80085b4:	e004      	b.n	80085c0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80085b6:	6839      	ldr	r1, [r7, #0]
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fbe9 	bl	8008d90 <USBD_CtlError>
              break;
 80085be:	e000      	b.n	80085c2 <USBD_StdEPReq+0x154>
              break;
 80085c0:	bf00      	nop
          }
          break;
 80085c2:	e0ab      	b.n	800871c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d002      	beq.n	80085d6 <USBD_StdEPReq+0x168>
 80085d0:	2b03      	cmp	r3, #3
 80085d2:	d032      	beq.n	800863a <USBD_StdEPReq+0x1cc>
 80085d4:	e097      	b.n	8008706 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085d6:	7bbb      	ldrb	r3, [r7, #14]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d007      	beq.n	80085ec <USBD_StdEPReq+0x17e>
 80085dc:	7bbb      	ldrb	r3, [r7, #14]
 80085de:	2b80      	cmp	r3, #128	; 0x80
 80085e0:	d004      	beq.n	80085ec <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 fbd3 	bl	8008d90 <USBD_CtlError>
                break;
 80085ea:	e091      	b.n	8008710 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	da0b      	bge.n	800860c <USBD_StdEPReq+0x19e>
 80085f4:	7bbb      	ldrb	r3, [r7, #14]
 80085f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085fa:	4613      	mov	r3, r2
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	4413      	add	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	3310      	adds	r3, #16
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	4413      	add	r3, r2
 8008608:	3304      	adds	r3, #4
 800860a:	e00b      	b.n	8008624 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800860c:	7bbb      	ldrb	r3, [r7, #14]
 800860e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008612:	4613      	mov	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4413      	add	r3, r2
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	4413      	add	r3, r2
 8008622:	3304      	adds	r3, #4
 8008624:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	2200      	movs	r2, #0
 800862a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	2202      	movs	r2, #2
 8008630:	4619      	mov	r1, r3
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fc1d 	bl	8008e72 <USBD_CtlSendData>
              break;
 8008638:	e06a      	b.n	8008710 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800863a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800863e:	2b00      	cmp	r3, #0
 8008640:	da11      	bge.n	8008666 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008642:	7bbb      	ldrb	r3, [r7, #14]
 8008644:	f003 020f 	and.w	r2, r3, #15
 8008648:	6879      	ldr	r1, [r7, #4]
 800864a:	4613      	mov	r3, r2
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4413      	add	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	440b      	add	r3, r1
 8008654:	3324      	adds	r3, #36	; 0x24
 8008656:	881b      	ldrh	r3, [r3, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d117      	bne.n	800868c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 fb96 	bl	8008d90 <USBD_CtlError>
                  break;
 8008664:	e054      	b.n	8008710 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008666:	7bbb      	ldrb	r3, [r7, #14]
 8008668:	f003 020f 	and.w	r2, r3, #15
 800866c:	6879      	ldr	r1, [r7, #4]
 800866e:	4613      	mov	r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	4413      	add	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	440b      	add	r3, r1
 8008678:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800867c:	881b      	ldrh	r3, [r3, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d104      	bne.n	800868c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008682:	6839      	ldr	r1, [r7, #0]
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fb83 	bl	8008d90 <USBD_CtlError>
                  break;
 800868a:	e041      	b.n	8008710 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800868c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008690:	2b00      	cmp	r3, #0
 8008692:	da0b      	bge.n	80086ac <USBD_StdEPReq+0x23e>
 8008694:	7bbb      	ldrb	r3, [r7, #14]
 8008696:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800869a:	4613      	mov	r3, r2
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	4413      	add	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	3310      	adds	r3, #16
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	4413      	add	r3, r2
 80086a8:	3304      	adds	r3, #4
 80086aa:	e00b      	b.n	80086c4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086ac:	7bbb      	ldrb	r3, [r7, #14]
 80086ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086b2:	4613      	mov	r3, r2
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	4413      	add	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	4413      	add	r3, r2
 80086c2:	3304      	adds	r3, #4
 80086c4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80086c6:	7bbb      	ldrb	r3, [r7, #14]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <USBD_StdEPReq+0x264>
 80086cc:	7bbb      	ldrb	r3, [r7, #14]
 80086ce:	2b80      	cmp	r3, #128	; 0x80
 80086d0:	d103      	bne.n	80086da <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	2200      	movs	r2, #0
 80086d6:	601a      	str	r2, [r3, #0]
 80086d8:	e00e      	b.n	80086f8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80086da:	7bbb      	ldrb	r3, [r7, #14]
 80086dc:	4619      	mov	r1, r3
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f003 fd2c 	bl	800c13c <USBD_LL_IsStallEP>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d003      	beq.n	80086f2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	2201      	movs	r2, #1
 80086ee:	601a      	str	r2, [r3, #0]
 80086f0:	e002      	b.n	80086f8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	2200      	movs	r2, #0
 80086f6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	2202      	movs	r2, #2
 80086fc:	4619      	mov	r1, r3
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fbb7 	bl	8008e72 <USBD_CtlSendData>
              break;
 8008704:	e004      	b.n	8008710 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008706:	6839      	ldr	r1, [r7, #0]
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 fb41 	bl	8008d90 <USBD_CtlError>
              break;
 800870e:	bf00      	nop
          }
          break;
 8008710:	e004      	b.n	800871c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008712:	6839      	ldr	r1, [r7, #0]
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 fb3b 	bl	8008d90 <USBD_CtlError>
          break;
 800871a:	bf00      	nop
      }
      break;
 800871c:	e004      	b.n	8008728 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800871e:	6839      	ldr	r1, [r7, #0]
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fb35 	bl	8008d90 <USBD_CtlError>
      break;
 8008726:	bf00      	nop
  }

  return ret;
 8008728:	7bfb      	ldrb	r3, [r7, #15]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
	...

08008734 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800873e:	2300      	movs	r3, #0
 8008740:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008742:	2300      	movs	r3, #0
 8008744:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008746:	2300      	movs	r3, #0
 8008748:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	885b      	ldrh	r3, [r3, #2]
 800874e:	0a1b      	lsrs	r3, r3, #8
 8008750:	b29b      	uxth	r3, r3
 8008752:	3b01      	subs	r3, #1
 8008754:	2b06      	cmp	r3, #6
 8008756:	f200 8128 	bhi.w	80089aa <USBD_GetDescriptor+0x276>
 800875a:	a201      	add	r2, pc, #4	; (adr r2, 8008760 <USBD_GetDescriptor+0x2c>)
 800875c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008760:	0800877d 	.word	0x0800877d
 8008764:	08008795 	.word	0x08008795
 8008768:	080087d5 	.word	0x080087d5
 800876c:	080089ab 	.word	0x080089ab
 8008770:	080089ab 	.word	0x080089ab
 8008774:	0800894b 	.word	0x0800894b
 8008778:	08008977 	.word	0x08008977
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	7c12      	ldrb	r2, [r2, #16]
 8008788:	f107 0108 	add.w	r1, r7, #8
 800878c:	4610      	mov	r0, r2
 800878e:	4798      	blx	r3
 8008790:	60f8      	str	r0, [r7, #12]
      break;
 8008792:	e112      	b.n	80089ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	7c1b      	ldrb	r3, [r3, #16]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10d      	bne.n	80087b8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a4:	f107 0208 	add.w	r2, r7, #8
 80087a8:	4610      	mov	r0, r2
 80087aa:	4798      	blx	r3
 80087ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	3301      	adds	r3, #1
 80087b2:	2202      	movs	r2, #2
 80087b4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80087b6:	e100      	b.n	80089ba <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c0:	f107 0208 	add.w	r2, r7, #8
 80087c4:	4610      	mov	r0, r2
 80087c6:	4798      	blx	r3
 80087c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	3301      	adds	r3, #1
 80087ce:	2202      	movs	r2, #2
 80087d0:	701a      	strb	r2, [r3, #0]
      break;
 80087d2:	e0f2      	b.n	80089ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	885b      	ldrh	r3, [r3, #2]
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	2b05      	cmp	r3, #5
 80087dc:	f200 80ac 	bhi.w	8008938 <USBD_GetDescriptor+0x204>
 80087e0:	a201      	add	r2, pc, #4	; (adr r2, 80087e8 <USBD_GetDescriptor+0xb4>)
 80087e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e6:	bf00      	nop
 80087e8:	08008801 	.word	0x08008801
 80087ec:	08008835 	.word	0x08008835
 80087f0:	08008869 	.word	0x08008869
 80087f4:	0800889d 	.word	0x0800889d
 80087f8:	080088d1 	.word	0x080088d1
 80087fc:	08008905 	.word	0x08008905
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00b      	beq.n	8008824 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	7c12      	ldrb	r2, [r2, #16]
 8008818:	f107 0108 	add.w	r1, r7, #8
 800881c:	4610      	mov	r0, r2
 800881e:	4798      	blx	r3
 8008820:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008822:	e091      	b.n	8008948 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fab2 	bl	8008d90 <USBD_CtlError>
            err++;
 800882c:	7afb      	ldrb	r3, [r7, #11]
 800882e:	3301      	adds	r3, #1
 8008830:	72fb      	strb	r3, [r7, #11]
          break;
 8008832:	e089      	b.n	8008948 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00b      	beq.n	8008858 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	7c12      	ldrb	r2, [r2, #16]
 800884c:	f107 0108 	add.w	r1, r7, #8
 8008850:	4610      	mov	r0, r2
 8008852:	4798      	blx	r3
 8008854:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008856:	e077      	b.n	8008948 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008858:	6839      	ldr	r1, [r7, #0]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fa98 	bl	8008d90 <USBD_CtlError>
            err++;
 8008860:	7afb      	ldrb	r3, [r7, #11]
 8008862:	3301      	adds	r3, #1
 8008864:	72fb      	strb	r3, [r7, #11]
          break;
 8008866:	e06f      	b.n	8008948 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00b      	beq.n	800888c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	7c12      	ldrb	r2, [r2, #16]
 8008880:	f107 0108 	add.w	r1, r7, #8
 8008884:	4610      	mov	r0, r2
 8008886:	4798      	blx	r3
 8008888:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800888a:	e05d      	b.n	8008948 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800888c:	6839      	ldr	r1, [r7, #0]
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fa7e 	bl	8008d90 <USBD_CtlError>
            err++;
 8008894:	7afb      	ldrb	r3, [r7, #11]
 8008896:	3301      	adds	r3, #1
 8008898:	72fb      	strb	r3, [r7, #11]
          break;
 800889a:	e055      	b.n	8008948 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00b      	beq.n	80088c0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ae:	691b      	ldr	r3, [r3, #16]
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	7c12      	ldrb	r2, [r2, #16]
 80088b4:	f107 0108 	add.w	r1, r7, #8
 80088b8:	4610      	mov	r0, r2
 80088ba:	4798      	blx	r3
 80088bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088be:	e043      	b.n	8008948 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088c0:	6839      	ldr	r1, [r7, #0]
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 fa64 	bl	8008d90 <USBD_CtlError>
            err++;
 80088c8:	7afb      	ldrb	r3, [r7, #11]
 80088ca:	3301      	adds	r3, #1
 80088cc:	72fb      	strb	r3, [r7, #11]
          break;
 80088ce:	e03b      	b.n	8008948 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088d6:	695b      	ldr	r3, [r3, #20]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00b      	beq.n	80088f4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088e2:	695b      	ldr	r3, [r3, #20]
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	7c12      	ldrb	r2, [r2, #16]
 80088e8:	f107 0108 	add.w	r1, r7, #8
 80088ec:	4610      	mov	r0, r2
 80088ee:	4798      	blx	r3
 80088f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088f2:	e029      	b.n	8008948 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088f4:	6839      	ldr	r1, [r7, #0]
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fa4a 	bl	8008d90 <USBD_CtlError>
            err++;
 80088fc:	7afb      	ldrb	r3, [r7, #11]
 80088fe:	3301      	adds	r3, #1
 8008900:	72fb      	strb	r3, [r7, #11]
          break;
 8008902:	e021      	b.n	8008948 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800890a:	699b      	ldr	r3, [r3, #24]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d00b      	beq.n	8008928 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008916:	699b      	ldr	r3, [r3, #24]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	7c12      	ldrb	r2, [r2, #16]
 800891c:	f107 0108 	add.w	r1, r7, #8
 8008920:	4610      	mov	r0, r2
 8008922:	4798      	blx	r3
 8008924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008926:	e00f      	b.n	8008948 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fa30 	bl	8008d90 <USBD_CtlError>
            err++;
 8008930:	7afb      	ldrb	r3, [r7, #11]
 8008932:	3301      	adds	r3, #1
 8008934:	72fb      	strb	r3, [r7, #11]
          break;
 8008936:	e007      	b.n	8008948 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fa28 	bl	8008d90 <USBD_CtlError>
          err++;
 8008940:	7afb      	ldrb	r3, [r7, #11]
 8008942:	3301      	adds	r3, #1
 8008944:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008946:	bf00      	nop
      }
      break;
 8008948:	e037      	b.n	80089ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	7c1b      	ldrb	r3, [r3, #16]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d109      	bne.n	8008966 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800895a:	f107 0208 	add.w	r2, r7, #8
 800895e:	4610      	mov	r0, r2
 8008960:	4798      	blx	r3
 8008962:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008964:	e029      	b.n	80089ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008966:	6839      	ldr	r1, [r7, #0]
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fa11 	bl	8008d90 <USBD_CtlError>
        err++;
 800896e:	7afb      	ldrb	r3, [r7, #11]
 8008970:	3301      	adds	r3, #1
 8008972:	72fb      	strb	r3, [r7, #11]
      break;
 8008974:	e021      	b.n	80089ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	7c1b      	ldrb	r3, [r3, #16]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d10d      	bne.n	800899a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008986:	f107 0208 	add.w	r2, r7, #8
 800898a:	4610      	mov	r0, r2
 800898c:	4798      	blx	r3
 800898e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	3301      	adds	r3, #1
 8008994:	2207      	movs	r2, #7
 8008996:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008998:	e00f      	b.n	80089ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800899a:	6839      	ldr	r1, [r7, #0]
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 f9f7 	bl	8008d90 <USBD_CtlError>
        err++;
 80089a2:	7afb      	ldrb	r3, [r7, #11]
 80089a4:	3301      	adds	r3, #1
 80089a6:	72fb      	strb	r3, [r7, #11]
      break;
 80089a8:	e007      	b.n	80089ba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80089aa:	6839      	ldr	r1, [r7, #0]
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 f9ef 	bl	8008d90 <USBD_CtlError>
      err++;
 80089b2:	7afb      	ldrb	r3, [r7, #11]
 80089b4:	3301      	adds	r3, #1
 80089b6:	72fb      	strb	r3, [r7, #11]
      break;
 80089b8:	bf00      	nop
  }

  if (err != 0U)
 80089ba:	7afb      	ldrb	r3, [r7, #11]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d11e      	bne.n	80089fe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	88db      	ldrh	r3, [r3, #6]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d016      	beq.n	80089f6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80089c8:	893b      	ldrh	r3, [r7, #8]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00e      	beq.n	80089ec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	88da      	ldrh	r2, [r3, #6]
 80089d2:	893b      	ldrh	r3, [r7, #8]
 80089d4:	4293      	cmp	r3, r2
 80089d6:	bf28      	it	cs
 80089d8:	4613      	movcs	r3, r2
 80089da:	b29b      	uxth	r3, r3
 80089dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80089de:	893b      	ldrh	r3, [r7, #8]
 80089e0:	461a      	mov	r2, r3
 80089e2:	68f9      	ldr	r1, [r7, #12]
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 fa44 	bl	8008e72 <USBD_CtlSendData>
 80089ea:	e009      	b.n	8008a00 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80089ec:	6839      	ldr	r1, [r7, #0]
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 f9ce 	bl	8008d90 <USBD_CtlError>
 80089f4:	e004      	b.n	8008a00 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fa78 	bl	8008eec <USBD_CtlSendStatus>
 80089fc:	e000      	b.n	8008a00 <USBD_GetDescriptor+0x2cc>
    return;
 80089fe:	bf00      	nop
  }
}
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop

08008a08 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	889b      	ldrh	r3, [r3, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d131      	bne.n	8008a7e <USBD_SetAddress+0x76>
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	88db      	ldrh	r3, [r3, #6]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d12d      	bne.n	8008a7e <USBD_SetAddress+0x76>
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	885b      	ldrh	r3, [r3, #2]
 8008a26:	2b7f      	cmp	r3, #127	; 0x7f
 8008a28:	d829      	bhi.n	8008a7e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	885b      	ldrh	r3, [r3, #2]
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	2b03      	cmp	r3, #3
 8008a40:	d104      	bne.n	8008a4c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008a42:	6839      	ldr	r1, [r7, #0]
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f9a3 	bl	8008d90 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a4a:	e01d      	b.n	8008a88 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	7bfa      	ldrb	r2, [r7, #15]
 8008a50:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
 8008a56:	4619      	mov	r1, r3
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f003 fb9b 	bl	800c194 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fa44 	bl	8008eec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008a64:	7bfb      	ldrb	r3, [r7, #15]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d004      	beq.n	8008a74 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2202      	movs	r2, #2
 8008a6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a72:	e009      	b.n	8008a88 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a7c:	e004      	b.n	8008a88 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 f985 	bl	8008d90 <USBD_CtlError>
  }
}
 8008a86:	bf00      	nop
 8008a88:	bf00      	nop
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	885b      	ldrh	r3, [r3, #2]
 8008aa2:	b2da      	uxtb	r2, r3
 8008aa4:	4b4c      	ldr	r3, [pc, #304]	; (8008bd8 <USBD_SetConfig+0x148>)
 8008aa6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008aa8:	4b4b      	ldr	r3, [pc, #300]	; (8008bd8 <USBD_SetConfig+0x148>)
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d905      	bls.n	8008abc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008ab0:	6839      	ldr	r1, [r7, #0]
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f96c 	bl	8008d90 <USBD_CtlError>
    return USBD_FAIL;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	e088      	b.n	8008bce <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	d002      	beq.n	8008ace <USBD_SetConfig+0x3e>
 8008ac8:	2b03      	cmp	r3, #3
 8008aca:	d025      	beq.n	8008b18 <USBD_SetConfig+0x88>
 8008acc:	e071      	b.n	8008bb2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008ace:	4b42      	ldr	r3, [pc, #264]	; (8008bd8 <USBD_SetConfig+0x148>)
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d01c      	beq.n	8008b10 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008ad6:	4b40      	ldr	r3, [pc, #256]	; (8008bd8 <USBD_SetConfig+0x148>)
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	461a      	mov	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ae0:	4b3d      	ldr	r3, [pc, #244]	; (8008bd8 <USBD_SetConfig+0x148>)
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7ff f8f0 	bl	8007ccc <USBD_SetClassConfig>
 8008aec:	4603      	mov	r3, r0
 8008aee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d004      	beq.n	8008b00 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 f949 	bl	8008d90 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008afe:	e065      	b.n	8008bcc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 f9f3 	bl	8008eec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2203      	movs	r2, #3
 8008b0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008b0e:	e05d      	b.n	8008bcc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 f9eb 	bl	8008eec <USBD_CtlSendStatus>
      break;
 8008b16:	e059      	b.n	8008bcc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008b18:	4b2f      	ldr	r3, [pc, #188]	; (8008bd8 <USBD_SetConfig+0x148>)
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d112      	bne.n	8008b46 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2202      	movs	r2, #2
 8008b24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008b28:	4b2b      	ldr	r3, [pc, #172]	; (8008bd8 <USBD_SetConfig+0x148>)
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b32:	4b29      	ldr	r3, [pc, #164]	; (8008bd8 <USBD_SetConfig+0x148>)
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	4619      	mov	r1, r3
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f7ff f8e3 	bl	8007d04 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f9d4 	bl	8008eec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b44:	e042      	b.n	8008bcc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008b46:	4b24      	ldr	r3, [pc, #144]	; (8008bd8 <USBD_SetConfig+0x148>)
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d02a      	beq.n	8008baa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f7ff f8d1 	bl	8007d04 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008b62:	4b1d      	ldr	r3, [pc, #116]	; (8008bd8 <USBD_SetConfig+0x148>)
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	461a      	mov	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b6c:	4b1a      	ldr	r3, [pc, #104]	; (8008bd8 <USBD_SetConfig+0x148>)
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	4619      	mov	r1, r3
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f7ff f8aa 	bl	8007ccc <USBD_SetClassConfig>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00f      	beq.n	8008ba2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008b82:	6839      	ldr	r1, [r7, #0]
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 f903 	bl	8008d90 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	4619      	mov	r1, r3
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7ff f8b6 	bl	8007d04 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2202      	movs	r2, #2
 8008b9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008ba0:	e014      	b.n	8008bcc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f9a2 	bl	8008eec <USBD_CtlSendStatus>
      break;
 8008ba8:	e010      	b.n	8008bcc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 f99e 	bl	8008eec <USBD_CtlSendStatus>
      break;
 8008bb0:	e00c      	b.n	8008bcc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f8eb 	bl	8008d90 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008bba:	4b07      	ldr	r3, [pc, #28]	; (8008bd8 <USBD_SetConfig+0x148>)
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f7ff f89f 	bl	8007d04 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	73fb      	strb	r3, [r7, #15]
      break;
 8008bca:	bf00      	nop
  }

  return ret;
 8008bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	2000065f 	.word	0x2000065f

08008bdc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	88db      	ldrh	r3, [r3, #6]
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d004      	beq.n	8008bf8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008bee:	6839      	ldr	r1, [r7, #0]
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 f8cd 	bl	8008d90 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008bf6:	e023      	b.n	8008c40 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	dc02      	bgt.n	8008c0a <USBD_GetConfig+0x2e>
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	dc03      	bgt.n	8008c10 <USBD_GetConfig+0x34>
 8008c08:	e015      	b.n	8008c36 <USBD_GetConfig+0x5a>
 8008c0a:	2b03      	cmp	r3, #3
 8008c0c:	d00b      	beq.n	8008c26 <USBD_GetConfig+0x4a>
 8008c0e:	e012      	b.n	8008c36 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	3308      	adds	r3, #8
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f927 	bl	8008e72 <USBD_CtlSendData>
        break;
 8008c24:	e00c      	b.n	8008c40 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	3304      	adds	r3, #4
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f91f 	bl	8008e72 <USBD_CtlSendData>
        break;
 8008c34:	e004      	b.n	8008c40 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008c36:	6839      	ldr	r1, [r7, #0]
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f8a9 	bl	8008d90 <USBD_CtlError>
        break;
 8008c3e:	bf00      	nop
}
 8008c40:	bf00      	nop
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d81e      	bhi.n	8008c9e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	88db      	ldrh	r3, [r3, #6]
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d004      	beq.n	8008c72 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008c68:	6839      	ldr	r1, [r7, #0]
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f890 	bl	8008d90 <USBD_CtlError>
        break;
 8008c70:	e01a      	b.n	8008ca8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2201      	movs	r2, #1
 8008c76:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d005      	beq.n	8008c8e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	f043 0202 	orr.w	r2, r3, #2
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	330c      	adds	r3, #12
 8008c92:	2202      	movs	r2, #2
 8008c94:	4619      	mov	r1, r3
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f8eb 	bl	8008e72 <USBD_CtlSendData>
      break;
 8008c9c:	e004      	b.n	8008ca8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008c9e:	6839      	ldr	r1, [r7, #0]
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 f875 	bl	8008d90 <USBD_CtlError>
      break;
 8008ca6:	bf00      	nop
  }
}
 8008ca8:	bf00      	nop
 8008caa:	3708      	adds	r7, #8
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	885b      	ldrh	r3, [r3, #2]
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d106      	bne.n	8008cd0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f90e 	bl	8008eec <USBD_CtlSendStatus>
  }
}
 8008cd0:	bf00      	nop
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	3b01      	subs	r3, #1
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d80b      	bhi.n	8008d08 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	885b      	ldrh	r3, [r3, #2]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d10c      	bne.n	8008d12 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 f8f3 	bl	8008eec <USBD_CtlSendStatus>
      }
      break;
 8008d06:	e004      	b.n	8008d12 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008d08:	6839      	ldr	r1, [r7, #0]
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f840 	bl	8008d90 <USBD_CtlError>
      break;
 8008d10:	e000      	b.n	8008d14 <USBD_ClrFeature+0x3c>
      break;
 8008d12:	bf00      	nop
  }
}
 8008d14:	bf00      	nop
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	781a      	ldrb	r2, [r3, #0]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	3301      	adds	r3, #1
 8008d36:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	781a      	ldrb	r2, [r3, #0]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	3301      	adds	r3, #1
 8008d44:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f7ff fa63 	bl	8008212 <SWAPBYTE>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	461a      	mov	r2, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	3301      	adds	r3, #1
 8008d58:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f7ff fa56 	bl	8008212 <SWAPBYTE>
 8008d66:	4603      	mov	r3, r0
 8008d68:	461a      	mov	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	3301      	adds	r3, #1
 8008d72:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	3301      	adds	r3, #1
 8008d78:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f7ff fa49 	bl	8008212 <SWAPBYTE>
 8008d80:	4603      	mov	r3, r0
 8008d82:	461a      	mov	r2, r3
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	80da      	strh	r2, [r3, #6]
}
 8008d88:	bf00      	nop
 8008d8a:	3710      	adds	r7, #16
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d9a:	2180      	movs	r1, #128	; 0x80
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f003 f98f 	bl	800c0c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008da2:	2100      	movs	r1, #0
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f003 f98b 	bl	800c0c0 <USBD_LL_StallEP>
}
 8008daa:	bf00      	nop
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b086      	sub	sp, #24
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	60f8      	str	r0, [r7, #12]
 8008dba:	60b9      	str	r1, [r7, #8]
 8008dbc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d036      	beq.n	8008e36 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008dcc:	6938      	ldr	r0, [r7, #16]
 8008dce:	f000 f836 	bl	8008e3e <USBD_GetLen>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	005b      	lsls	r3, r3, #1
 8008dda:	b29a      	uxth	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008de0:	7dfb      	ldrb	r3, [r7, #23]
 8008de2:	68ba      	ldr	r2, [r7, #8]
 8008de4:	4413      	add	r3, r2
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	7812      	ldrb	r2, [r2, #0]
 8008dea:	701a      	strb	r2, [r3, #0]
  idx++;
 8008dec:	7dfb      	ldrb	r3, [r7, #23]
 8008dee:	3301      	adds	r3, #1
 8008df0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008df2:	7dfb      	ldrb	r3, [r7, #23]
 8008df4:	68ba      	ldr	r2, [r7, #8]
 8008df6:	4413      	add	r3, r2
 8008df8:	2203      	movs	r2, #3
 8008dfa:	701a      	strb	r2, [r3, #0]
  idx++;
 8008dfc:	7dfb      	ldrb	r3, [r7, #23]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008e02:	e013      	b.n	8008e2c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008e04:	7dfb      	ldrb	r3, [r7, #23]
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	4413      	add	r3, r2
 8008e0a:	693a      	ldr	r2, [r7, #16]
 8008e0c:	7812      	ldrb	r2, [r2, #0]
 8008e0e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	3301      	adds	r3, #1
 8008e14:	613b      	str	r3, [r7, #16]
    idx++;
 8008e16:	7dfb      	ldrb	r3, [r7, #23]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008e1c:	7dfb      	ldrb	r3, [r7, #23]
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	4413      	add	r3, r2
 8008e22:	2200      	movs	r2, #0
 8008e24:	701a      	strb	r2, [r3, #0]
    idx++;
 8008e26:	7dfb      	ldrb	r3, [r7, #23]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d1e7      	bne.n	8008e04 <USBD_GetString+0x52>
 8008e34:	e000      	b.n	8008e38 <USBD_GetString+0x86>
    return;
 8008e36:	bf00      	nop
  }
}
 8008e38:	3718      	adds	r7, #24
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008e3e:	b480      	push	{r7}
 8008e40:	b085      	sub	sp, #20
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008e46:	2300      	movs	r3, #0
 8008e48:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008e4e:	e005      	b.n	8008e5c <USBD_GetLen+0x1e>
  {
    len++;
 8008e50:	7bfb      	ldrb	r3, [r7, #15]
 8008e52:	3301      	adds	r3, #1
 8008e54:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1f5      	bne.n	8008e50 <USBD_GetLen+0x12>
  }

  return len;
 8008e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3714      	adds	r7, #20
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr

08008e72 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b084      	sub	sp, #16
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	60f8      	str	r0, [r7, #12]
 8008e7a:	60b9      	str	r1, [r7, #8]
 8008e7c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2202      	movs	r2, #2
 8008e82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	2100      	movs	r1, #0
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	f003 f99a 	bl	800c1d2 <USBD_LL_Transmit>

  return USBD_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3710      	adds	r7, #16
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	68ba      	ldr	r2, [r7, #8]
 8008eb8:	2100      	movs	r1, #0
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f003 f989 	bl	800c1d2 <USBD_LL_Transmit>

  return USBD_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b084      	sub	sp, #16
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	60f8      	str	r0, [r7, #12]
 8008ed2:	60b9      	str	r1, [r7, #8]
 8008ed4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68ba      	ldr	r2, [r7, #8]
 8008eda:	2100      	movs	r1, #0
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f003 f999 	bl	800c214 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2204      	movs	r2, #4
 8008ef8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008efc:	2300      	movs	r3, #0
 8008efe:	2200      	movs	r2, #0
 8008f00:	2100      	movs	r1, #0
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f003 f965 	bl	800c1d2 <USBD_LL_Transmit>

  return USBD_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b082      	sub	sp, #8
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2205      	movs	r2, #5
 8008f1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f22:	2300      	movs	r3, #0
 8008f24:	2200      	movs	r2, #0
 8008f26:	2100      	movs	r1, #0
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f003 f973 	bl	800c214 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <__NVIC_SetPriority>:
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	4603      	mov	r3, r0
 8008f40:	6039      	str	r1, [r7, #0]
 8008f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	db0a      	blt.n	8008f62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	b2da      	uxtb	r2, r3
 8008f50:	490c      	ldr	r1, [pc, #48]	; (8008f84 <__NVIC_SetPriority+0x4c>)
 8008f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f56:	0112      	lsls	r2, r2, #4
 8008f58:	b2d2      	uxtb	r2, r2
 8008f5a:	440b      	add	r3, r1
 8008f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008f60:	e00a      	b.n	8008f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	b2da      	uxtb	r2, r3
 8008f66:	4908      	ldr	r1, [pc, #32]	; (8008f88 <__NVIC_SetPriority+0x50>)
 8008f68:	79fb      	ldrb	r3, [r7, #7]
 8008f6a:	f003 030f 	and.w	r3, r3, #15
 8008f6e:	3b04      	subs	r3, #4
 8008f70:	0112      	lsls	r2, r2, #4
 8008f72:	b2d2      	uxtb	r2, r2
 8008f74:	440b      	add	r3, r1
 8008f76:	761a      	strb	r2, [r3, #24]
}
 8008f78:	bf00      	nop
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr
 8008f84:	e000e100 	.word	0xe000e100
 8008f88:	e000ed00 	.word	0xe000ed00

08008f8c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008f90:	4b05      	ldr	r3, [pc, #20]	; (8008fa8 <SysTick_Handler+0x1c>)
 8008f92:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008f94:	f001 fcfe 	bl	800a994 <xTaskGetSchedulerState>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d001      	beq.n	8008fa2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008f9e:	f002 fae3 	bl	800b568 <xPortSysTickHandler>
  }
}
 8008fa2:	bf00      	nop
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	e000e010 	.word	0xe000e010

08008fac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008fac:	b580      	push	{r7, lr}
 8008fae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	f06f 0004 	mvn.w	r0, #4
 8008fb6:	f7ff ffbf 	bl	8008f38 <__NVIC_SetPriority>
#endif
}
 8008fba:	bf00      	nop
 8008fbc:	bd80      	pop	{r7, pc}
	...

08008fc0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fc6:	f3ef 8305 	mrs	r3, IPSR
 8008fca:	603b      	str	r3, [r7, #0]
  return(result);
 8008fcc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d003      	beq.n	8008fda <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008fd2:	f06f 0305 	mvn.w	r3, #5
 8008fd6:	607b      	str	r3, [r7, #4]
 8008fd8:	e00c      	b.n	8008ff4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008fda:	4b0a      	ldr	r3, [pc, #40]	; (8009004 <osKernelInitialize+0x44>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d105      	bne.n	8008fee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008fe2:	4b08      	ldr	r3, [pc, #32]	; (8009004 <osKernelInitialize+0x44>)
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	607b      	str	r3, [r7, #4]
 8008fec:	e002      	b.n	8008ff4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008fee:	f04f 33ff 	mov.w	r3, #4294967295
 8008ff2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008ff4:	687b      	ldr	r3, [r7, #4]
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	370c      	adds	r7, #12
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	20000660 	.word	0x20000660

08009008 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800900e:	f3ef 8305 	mrs	r3, IPSR
 8009012:	603b      	str	r3, [r7, #0]
  return(result);
 8009014:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009016:	2b00      	cmp	r3, #0
 8009018:	d003      	beq.n	8009022 <osKernelStart+0x1a>
    stat = osErrorISR;
 800901a:	f06f 0305 	mvn.w	r3, #5
 800901e:	607b      	str	r3, [r7, #4]
 8009020:	e010      	b.n	8009044 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009022:	4b0b      	ldr	r3, [pc, #44]	; (8009050 <osKernelStart+0x48>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2b01      	cmp	r3, #1
 8009028:	d109      	bne.n	800903e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800902a:	f7ff ffbf 	bl	8008fac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800902e:	4b08      	ldr	r3, [pc, #32]	; (8009050 <osKernelStart+0x48>)
 8009030:	2202      	movs	r2, #2
 8009032:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009034:	f001 f866 	bl	800a104 <vTaskStartScheduler>
      stat = osOK;
 8009038:	2300      	movs	r3, #0
 800903a:	607b      	str	r3, [r7, #4]
 800903c:	e002      	b.n	8009044 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800903e:	f04f 33ff 	mov.w	r3, #4294967295
 8009042:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009044:	687b      	ldr	r3, [r7, #4]
}
 8009046:	4618      	mov	r0, r3
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	20000660 	.word	0x20000660

08009054 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009054:	b580      	push	{r7, lr}
 8009056:	b08e      	sub	sp, #56	; 0x38
 8009058:	af04      	add	r7, sp, #16
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009060:	2300      	movs	r3, #0
 8009062:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009064:	f3ef 8305 	mrs	r3, IPSR
 8009068:	617b      	str	r3, [r7, #20]
  return(result);
 800906a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800906c:	2b00      	cmp	r3, #0
 800906e:	d17e      	bne.n	800916e <osThreadNew+0x11a>
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d07b      	beq.n	800916e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009076:	2380      	movs	r3, #128	; 0x80
 8009078:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800907a:	2318      	movs	r3, #24
 800907c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800907e:	2300      	movs	r3, #0
 8009080:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009082:	f04f 33ff 	mov.w	r3, #4294967295
 8009086:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d045      	beq.n	800911a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d002      	beq.n	800909c <osThreadNew+0x48>
        name = attr->name;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	699b      	ldr	r3, [r3, #24]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d002      	beq.n	80090aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d008      	beq.n	80090c2 <osThreadNew+0x6e>
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	2b38      	cmp	r3, #56	; 0x38
 80090b4:	d805      	bhi.n	80090c2 <osThreadNew+0x6e>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	f003 0301 	and.w	r3, r3, #1
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d001      	beq.n	80090c6 <osThreadNew+0x72>
        return (NULL);
 80090c2:	2300      	movs	r3, #0
 80090c4:	e054      	b.n	8009170 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	695b      	ldr	r3, [r3, #20]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d003      	beq.n	80090d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	695b      	ldr	r3, [r3, #20]
 80090d2:	089b      	lsrs	r3, r3, #2
 80090d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00e      	beq.n	80090fc <osThreadNew+0xa8>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	2b5b      	cmp	r3, #91	; 0x5b
 80090e4:	d90a      	bls.n	80090fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d006      	beq.n	80090fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	695b      	ldr	r3, [r3, #20]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d002      	beq.n	80090fc <osThreadNew+0xa8>
        mem = 1;
 80090f6:	2301      	movs	r3, #1
 80090f8:	61bb      	str	r3, [r7, #24]
 80090fa:	e010      	b.n	800911e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d10c      	bne.n	800911e <osThreadNew+0xca>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d108      	bne.n	800911e <osThreadNew+0xca>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d104      	bne.n	800911e <osThreadNew+0xca>
          mem = 0;
 8009114:	2300      	movs	r3, #0
 8009116:	61bb      	str	r3, [r7, #24]
 8009118:	e001      	b.n	800911e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800911a:	2300      	movs	r3, #0
 800911c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	2b01      	cmp	r3, #1
 8009122:	d110      	bne.n	8009146 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800912c:	9202      	str	r2, [sp, #8]
 800912e:	9301      	str	r3, [sp, #4]
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	9300      	str	r3, [sp, #0]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	6a3a      	ldr	r2, [r7, #32]
 8009138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f000 fe0c 	bl	8009d58 <xTaskCreateStatic>
 8009140:	4603      	mov	r3, r0
 8009142:	613b      	str	r3, [r7, #16]
 8009144:	e013      	b.n	800916e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d110      	bne.n	800916e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800914c:	6a3b      	ldr	r3, [r7, #32]
 800914e:	b29a      	uxth	r2, r3
 8009150:	f107 0310 	add.w	r3, r7, #16
 8009154:	9301      	str	r3, [sp, #4]
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	9300      	str	r3, [sp, #0]
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800915e:	68f8      	ldr	r0, [r7, #12]
 8009160:	f000 fe57 	bl	8009e12 <xTaskCreate>
 8009164:	4603      	mov	r3, r0
 8009166:	2b01      	cmp	r3, #1
 8009168:	d001      	beq.n	800916e <osThreadNew+0x11a>
            hTask = NULL;
 800916a:	2300      	movs	r3, #0
 800916c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800916e:	693b      	ldr	r3, [r7, #16]
}
 8009170:	4618      	mov	r0, r3
 8009172:	3728      	adds	r7, #40	; 0x28
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009180:	f3ef 8305 	mrs	r3, IPSR
 8009184:	60bb      	str	r3, [r7, #8]
  return(result);
 8009186:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009188:	2b00      	cmp	r3, #0
 800918a:	d003      	beq.n	8009194 <osDelay+0x1c>
    stat = osErrorISR;
 800918c:	f06f 0305 	mvn.w	r3, #5
 8009190:	60fb      	str	r3, [r7, #12]
 8009192:	e007      	b.n	80091a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009194:	2300      	movs	r3, #0
 8009196:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d002      	beq.n	80091a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 ff7c 	bl	800a09c <vTaskDelay>
    }
  }

  return (stat);
 80091a4:	68fb      	ldr	r3, [r7, #12]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
	...

080091b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80091b0:	b480      	push	{r7}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	4a07      	ldr	r2, [pc, #28]	; (80091dc <vApplicationGetIdleTaskMemory+0x2c>)
 80091c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	4a06      	ldr	r2, [pc, #24]	; (80091e0 <vApplicationGetIdleTaskMemory+0x30>)
 80091c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2280      	movs	r2, #128	; 0x80
 80091cc:	601a      	str	r2, [r3, #0]
}
 80091ce:	bf00      	nop
 80091d0:	3714      	adds	r7, #20
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	20000664 	.word	0x20000664
 80091e0:	200006c0 	.word	0x200006c0

080091e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	4a07      	ldr	r2, [pc, #28]	; (8009210 <vApplicationGetTimerTaskMemory+0x2c>)
 80091f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	4a06      	ldr	r2, [pc, #24]	; (8009214 <vApplicationGetTimerTaskMemory+0x30>)
 80091fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009202:	601a      	str	r2, [r3, #0]
}
 8009204:	bf00      	nop
 8009206:	3714      	adds	r7, #20
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr
 8009210:	200008c0 	.word	0x200008c0
 8009214:	2000091c 	.word	0x2000091c

08009218 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f103 0208 	add.w	r2, r3, #8
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f04f 32ff 	mov.w	r2, #4294967295
 8009230:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f103 0208 	add.w	r2, r3, #8
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f103 0208 	add.w	r2, r3, #8
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009266:	bf00      	nop
 8009268:	370c      	adds	r7, #12
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr

08009272 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009272:	b480      	push	{r7}
 8009274:	b085      	sub	sp, #20
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
 800927a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	689a      	ldr	r2, [r3, #8]
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	683a      	ldr	r2, [r7, #0]
 8009296:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	683a      	ldr	r2, [r7, #0]
 800929c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	1c5a      	adds	r2, r3, #1
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	601a      	str	r2, [r3, #0]
}
 80092ae:	bf00      	nop
 80092b0:	3714      	adds	r7, #20
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr

080092ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80092ba:	b480      	push	{r7}
 80092bc:	b085      	sub	sp, #20
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
 80092c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d0:	d103      	bne.n	80092da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	60fb      	str	r3, [r7, #12]
 80092d8:	e00c      	b.n	80092f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	3308      	adds	r3, #8
 80092de:	60fb      	str	r3, [r7, #12]
 80092e0:	e002      	b.n	80092e8 <vListInsert+0x2e>
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	60fb      	str	r3, [r7, #12]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d2f6      	bcs.n	80092e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	685a      	ldr	r2, [r3, #4]
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	683a      	ldr	r2, [r7, #0]
 8009302:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	683a      	ldr	r2, [r7, #0]
 800930e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	1c5a      	adds	r2, r3, #1
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	601a      	str	r2, [r3, #0]
}
 8009320:	bf00      	nop
 8009322:	3714      	adds	r7, #20
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	691b      	ldr	r3, [r3, #16]
 8009338:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	6892      	ldr	r2, [r2, #8]
 8009342:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	6852      	ldr	r2, [r2, #4]
 800934c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	429a      	cmp	r2, r3
 8009356:	d103      	bne.n	8009360 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	689a      	ldr	r2, [r3, #8]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	1e5a      	subs	r2, r3, #1
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3714      	adds	r7, #20
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d10a      	bne.n	80093aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009398:	f383 8811 	msr	BASEPRI, r3
 800939c:	f3bf 8f6f 	isb	sy
 80093a0:	f3bf 8f4f 	dsb	sy
 80093a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80093a6:	bf00      	nop
 80093a8:	e7fe      	b.n	80093a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80093aa:	f002 f84b 	bl	800b444 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093b6:	68f9      	ldr	r1, [r7, #12]
 80093b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80093ba:	fb01 f303 	mul.w	r3, r1, r3
 80093be:	441a      	add	r2, r3
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2200      	movs	r2, #0
 80093c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093da:	3b01      	subs	r3, #1
 80093dc:	68f9      	ldr	r1, [r7, #12]
 80093de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80093e0:	fb01 f303 	mul.w	r3, r1, r3
 80093e4:	441a      	add	r2, r3
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	22ff      	movs	r2, #255	; 0xff
 80093ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	22ff      	movs	r2, #255	; 0xff
 80093f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d114      	bne.n	800942a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	691b      	ldr	r3, [r3, #16]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d01a      	beq.n	800943e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	3310      	adds	r3, #16
 800940c:	4618      	mov	r0, r3
 800940e:	f001 f903 	bl	800a618 <xTaskRemoveFromEventList>
 8009412:	4603      	mov	r3, r0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d012      	beq.n	800943e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009418:	4b0c      	ldr	r3, [pc, #48]	; (800944c <xQueueGenericReset+0xcc>)
 800941a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800941e:	601a      	str	r2, [r3, #0]
 8009420:	f3bf 8f4f 	dsb	sy
 8009424:	f3bf 8f6f 	isb	sy
 8009428:	e009      	b.n	800943e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	3310      	adds	r3, #16
 800942e:	4618      	mov	r0, r3
 8009430:	f7ff fef2 	bl	8009218 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	3324      	adds	r3, #36	; 0x24
 8009438:	4618      	mov	r0, r3
 800943a:	f7ff feed 	bl	8009218 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800943e:	f002 f831 	bl	800b4a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009442:	2301      	movs	r3, #1
}
 8009444:	4618      	mov	r0, r3
 8009446:	3710      	adds	r7, #16
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}
 800944c:	e000ed04 	.word	0xe000ed04

08009450 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009450:	b580      	push	{r7, lr}
 8009452:	b08e      	sub	sp, #56	; 0x38
 8009454:	af02      	add	r7, sp, #8
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	60b9      	str	r1, [r7, #8]
 800945a:	607a      	str	r2, [r7, #4]
 800945c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d10a      	bne.n	800947a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009468:	f383 8811 	msr	BASEPRI, r3
 800946c:	f3bf 8f6f 	isb	sy
 8009470:	f3bf 8f4f 	dsb	sy
 8009474:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009476:	bf00      	nop
 8009478:	e7fe      	b.n	8009478 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d10a      	bne.n	8009496 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009484:	f383 8811 	msr	BASEPRI, r3
 8009488:	f3bf 8f6f 	isb	sy
 800948c:	f3bf 8f4f 	dsb	sy
 8009490:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009492:	bf00      	nop
 8009494:	e7fe      	b.n	8009494 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d002      	beq.n	80094a2 <xQueueGenericCreateStatic+0x52>
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d001      	beq.n	80094a6 <xQueueGenericCreateStatic+0x56>
 80094a2:	2301      	movs	r3, #1
 80094a4:	e000      	b.n	80094a8 <xQueueGenericCreateStatic+0x58>
 80094a6:	2300      	movs	r3, #0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10a      	bne.n	80094c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80094ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b0:	f383 8811 	msr	BASEPRI, r3
 80094b4:	f3bf 8f6f 	isb	sy
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	623b      	str	r3, [r7, #32]
}
 80094be:	bf00      	nop
 80094c0:	e7fe      	b.n	80094c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d102      	bne.n	80094ce <xQueueGenericCreateStatic+0x7e>
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d101      	bne.n	80094d2 <xQueueGenericCreateStatic+0x82>
 80094ce:	2301      	movs	r3, #1
 80094d0:	e000      	b.n	80094d4 <xQueueGenericCreateStatic+0x84>
 80094d2:	2300      	movs	r3, #0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d10a      	bne.n	80094ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80094d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094dc:	f383 8811 	msr	BASEPRI, r3
 80094e0:	f3bf 8f6f 	isb	sy
 80094e4:	f3bf 8f4f 	dsb	sy
 80094e8:	61fb      	str	r3, [r7, #28]
}
 80094ea:	bf00      	nop
 80094ec:	e7fe      	b.n	80094ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80094ee:	2350      	movs	r3, #80	; 0x50
 80094f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	2b50      	cmp	r3, #80	; 0x50
 80094f6:	d00a      	beq.n	800950e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80094f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fc:	f383 8811 	msr	BASEPRI, r3
 8009500:	f3bf 8f6f 	isb	sy
 8009504:	f3bf 8f4f 	dsb	sy
 8009508:	61bb      	str	r3, [r7, #24]
}
 800950a:	bf00      	nop
 800950c:	e7fe      	b.n	800950c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800950e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00d      	beq.n	8009536 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800951a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951c:	2201      	movs	r2, #1
 800951e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009522:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009528:	9300      	str	r3, [sp, #0]
 800952a:	4613      	mov	r3, r2
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	68b9      	ldr	r1, [r7, #8]
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f000 f805 	bl	8009540 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009538:	4618      	mov	r0, r3
 800953a:	3730      	adds	r7, #48	; 0x30
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	607a      	str	r2, [r7, #4]
 800954c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d103      	bne.n	800955c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	69ba      	ldr	r2, [r7, #24]
 8009558:	601a      	str	r2, [r3, #0]
 800955a:	e002      	b.n	8009562 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800956e:	2101      	movs	r1, #1
 8009570:	69b8      	ldr	r0, [r7, #24]
 8009572:	f7ff ff05 	bl	8009380 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	78fa      	ldrb	r2, [r7, #3]
 800957a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800957e:	bf00      	nop
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
	...

08009588 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b08e      	sub	sp, #56	; 0x38
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]
 8009594:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009596:	2300      	movs	r3, #0
 8009598:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800959e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d10a      	bne.n	80095ba <xQueueGenericSend+0x32>
	__asm volatile
 80095a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a8:	f383 8811 	msr	BASEPRI, r3
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80095b6:	bf00      	nop
 80095b8:	e7fe      	b.n	80095b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d103      	bne.n	80095c8 <xQueueGenericSend+0x40>
 80095c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d101      	bne.n	80095cc <xQueueGenericSend+0x44>
 80095c8:	2301      	movs	r3, #1
 80095ca:	e000      	b.n	80095ce <xQueueGenericSend+0x46>
 80095cc:	2300      	movs	r3, #0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d10a      	bne.n	80095e8 <xQueueGenericSend+0x60>
	__asm volatile
 80095d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d6:	f383 8811 	msr	BASEPRI, r3
 80095da:	f3bf 8f6f 	isb	sy
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80095e4:	bf00      	nop
 80095e6:	e7fe      	b.n	80095e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	2b02      	cmp	r3, #2
 80095ec:	d103      	bne.n	80095f6 <xQueueGenericSend+0x6e>
 80095ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d101      	bne.n	80095fa <xQueueGenericSend+0x72>
 80095f6:	2301      	movs	r3, #1
 80095f8:	e000      	b.n	80095fc <xQueueGenericSend+0x74>
 80095fa:	2300      	movs	r3, #0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d10a      	bne.n	8009616 <xQueueGenericSend+0x8e>
	__asm volatile
 8009600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009604:	f383 8811 	msr	BASEPRI, r3
 8009608:	f3bf 8f6f 	isb	sy
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	623b      	str	r3, [r7, #32]
}
 8009612:	bf00      	nop
 8009614:	e7fe      	b.n	8009614 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009616:	f001 f9bd 	bl	800a994 <xTaskGetSchedulerState>
 800961a:	4603      	mov	r3, r0
 800961c:	2b00      	cmp	r3, #0
 800961e:	d102      	bne.n	8009626 <xQueueGenericSend+0x9e>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d101      	bne.n	800962a <xQueueGenericSend+0xa2>
 8009626:	2301      	movs	r3, #1
 8009628:	e000      	b.n	800962c <xQueueGenericSend+0xa4>
 800962a:	2300      	movs	r3, #0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d10a      	bne.n	8009646 <xQueueGenericSend+0xbe>
	__asm volatile
 8009630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009634:	f383 8811 	msr	BASEPRI, r3
 8009638:	f3bf 8f6f 	isb	sy
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	61fb      	str	r3, [r7, #28]
}
 8009642:	bf00      	nop
 8009644:	e7fe      	b.n	8009644 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009646:	f001 fefd 	bl	800b444 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800964a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800964e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009652:	429a      	cmp	r2, r3
 8009654:	d302      	bcc.n	800965c <xQueueGenericSend+0xd4>
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	2b02      	cmp	r3, #2
 800965a:	d129      	bne.n	80096b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800965c:	683a      	ldr	r2, [r7, #0]
 800965e:	68b9      	ldr	r1, [r7, #8]
 8009660:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009662:	f000 fa0b 	bl	8009a7c <prvCopyDataToQueue>
 8009666:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966c:	2b00      	cmp	r3, #0
 800966e:	d010      	beq.n	8009692 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009672:	3324      	adds	r3, #36	; 0x24
 8009674:	4618      	mov	r0, r3
 8009676:	f000 ffcf 	bl	800a618 <xTaskRemoveFromEventList>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d013      	beq.n	80096a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009680:	4b3f      	ldr	r3, [pc, #252]	; (8009780 <xQueueGenericSend+0x1f8>)
 8009682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009686:	601a      	str	r2, [r3, #0]
 8009688:	f3bf 8f4f 	dsb	sy
 800968c:	f3bf 8f6f 	isb	sy
 8009690:	e00a      	b.n	80096a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009694:	2b00      	cmp	r3, #0
 8009696:	d007      	beq.n	80096a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009698:	4b39      	ldr	r3, [pc, #228]	; (8009780 <xQueueGenericSend+0x1f8>)
 800969a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800969e:	601a      	str	r2, [r3, #0]
 80096a0:	f3bf 8f4f 	dsb	sy
 80096a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80096a8:	f001 fefc 	bl	800b4a4 <vPortExitCritical>
				return pdPASS;
 80096ac:	2301      	movs	r3, #1
 80096ae:	e063      	b.n	8009778 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d103      	bne.n	80096be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80096b6:	f001 fef5 	bl	800b4a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80096ba:	2300      	movs	r3, #0
 80096bc:	e05c      	b.n	8009778 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80096be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d106      	bne.n	80096d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80096c4:	f107 0314 	add.w	r3, r7, #20
 80096c8:	4618      	mov	r0, r3
 80096ca:	f001 f809 	bl	800a6e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80096ce:	2301      	movs	r3, #1
 80096d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80096d2:	f001 fee7 	bl	800b4a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80096d6:	f000 fd7b 	bl	800a1d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80096da:	f001 feb3 	bl	800b444 <vPortEnterCritical>
 80096de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096e4:	b25b      	sxtb	r3, r3
 80096e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ea:	d103      	bne.n	80096f4 <xQueueGenericSend+0x16c>
 80096ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096fa:	b25b      	sxtb	r3, r3
 80096fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009700:	d103      	bne.n	800970a <xQueueGenericSend+0x182>
 8009702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009704:	2200      	movs	r2, #0
 8009706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800970a:	f001 fecb 	bl	800b4a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800970e:	1d3a      	adds	r2, r7, #4
 8009710:	f107 0314 	add.w	r3, r7, #20
 8009714:	4611      	mov	r1, r2
 8009716:	4618      	mov	r0, r3
 8009718:	f000 fff8 	bl	800a70c <xTaskCheckForTimeOut>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d124      	bne.n	800976c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009722:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009724:	f000 faa2 	bl	8009c6c <prvIsQueueFull>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d018      	beq.n	8009760 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800972e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009730:	3310      	adds	r3, #16
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	4611      	mov	r1, r2
 8009736:	4618      	mov	r0, r3
 8009738:	f000 ff1e 	bl	800a578 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800973c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800973e:	f000 fa2d 	bl	8009b9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009742:	f000 fd53 	bl	800a1ec <xTaskResumeAll>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	f47f af7c 	bne.w	8009646 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800974e:	4b0c      	ldr	r3, [pc, #48]	; (8009780 <xQueueGenericSend+0x1f8>)
 8009750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009754:	601a      	str	r2, [r3, #0]
 8009756:	f3bf 8f4f 	dsb	sy
 800975a:	f3bf 8f6f 	isb	sy
 800975e:	e772      	b.n	8009646 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009762:	f000 fa1b 	bl	8009b9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009766:	f000 fd41 	bl	800a1ec <xTaskResumeAll>
 800976a:	e76c      	b.n	8009646 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800976c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800976e:	f000 fa15 	bl	8009b9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009772:	f000 fd3b 	bl	800a1ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009776:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009778:	4618      	mov	r0, r3
 800977a:	3738      	adds	r7, #56	; 0x38
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	e000ed04 	.word	0xe000ed04

08009784 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b090      	sub	sp, #64	; 0x40
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	607a      	str	r2, [r7, #4]
 8009790:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009798:	2b00      	cmp	r3, #0
 800979a:	d10a      	bne.n	80097b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800979c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a0:	f383 8811 	msr	BASEPRI, r3
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	f3bf 8f4f 	dsb	sy
 80097ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80097ae:	bf00      	nop
 80097b0:	e7fe      	b.n	80097b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d103      	bne.n	80097c0 <xQueueGenericSendFromISR+0x3c>
 80097b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d101      	bne.n	80097c4 <xQueueGenericSendFromISR+0x40>
 80097c0:	2301      	movs	r3, #1
 80097c2:	e000      	b.n	80097c6 <xQueueGenericSendFromISR+0x42>
 80097c4:	2300      	movs	r3, #0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d10a      	bne.n	80097e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80097ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ce:	f383 8811 	msr	BASEPRI, r3
 80097d2:	f3bf 8f6f 	isb	sy
 80097d6:	f3bf 8f4f 	dsb	sy
 80097da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80097dc:	bf00      	nop
 80097de:	e7fe      	b.n	80097de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d103      	bne.n	80097ee <xQueueGenericSendFromISR+0x6a>
 80097e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d101      	bne.n	80097f2 <xQueueGenericSendFromISR+0x6e>
 80097ee:	2301      	movs	r3, #1
 80097f0:	e000      	b.n	80097f4 <xQueueGenericSendFromISR+0x70>
 80097f2:	2300      	movs	r3, #0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d10a      	bne.n	800980e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80097f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fc:	f383 8811 	msr	BASEPRI, r3
 8009800:	f3bf 8f6f 	isb	sy
 8009804:	f3bf 8f4f 	dsb	sy
 8009808:	623b      	str	r3, [r7, #32]
}
 800980a:	bf00      	nop
 800980c:	e7fe      	b.n	800980c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800980e:	f001 fefb 	bl	800b608 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009812:	f3ef 8211 	mrs	r2, BASEPRI
 8009816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981a:	f383 8811 	msr	BASEPRI, r3
 800981e:	f3bf 8f6f 	isb	sy
 8009822:	f3bf 8f4f 	dsb	sy
 8009826:	61fa      	str	r2, [r7, #28]
 8009828:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800982a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800982c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800982e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009836:	429a      	cmp	r2, r3
 8009838:	d302      	bcc.n	8009840 <xQueueGenericSendFromISR+0xbc>
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	2b02      	cmp	r3, #2
 800983e:	d12f      	bne.n	80098a0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009842:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800984a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009850:	683a      	ldr	r2, [r7, #0]
 8009852:	68b9      	ldr	r1, [r7, #8]
 8009854:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009856:	f000 f911 	bl	8009a7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800985a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800985e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009862:	d112      	bne.n	800988a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009868:	2b00      	cmp	r3, #0
 800986a:	d016      	beq.n	800989a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800986c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986e:	3324      	adds	r3, #36	; 0x24
 8009870:	4618      	mov	r0, r3
 8009872:	f000 fed1 	bl	800a618 <xTaskRemoveFromEventList>
 8009876:	4603      	mov	r3, r0
 8009878:	2b00      	cmp	r3, #0
 800987a:	d00e      	beq.n	800989a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d00b      	beq.n	800989a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2201      	movs	r2, #1
 8009886:	601a      	str	r2, [r3, #0]
 8009888:	e007      	b.n	800989a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800988a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800988e:	3301      	adds	r3, #1
 8009890:	b2db      	uxtb	r3, r3
 8009892:	b25a      	sxtb	r2, r3
 8009894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800989a:	2301      	movs	r3, #1
 800989c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800989e:	e001      	b.n	80098a4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80098a0:	2300      	movs	r3, #0
 80098a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098a6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80098ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80098b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3740      	adds	r7, #64	; 0x40
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
	...

080098bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b08c      	sub	sp, #48	; 0x30
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80098c8:	2300      	movs	r3, #0
 80098ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80098d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d10a      	bne.n	80098ec <xQueueReceive+0x30>
	__asm volatile
 80098d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098da:	f383 8811 	msr	BASEPRI, r3
 80098de:	f3bf 8f6f 	isb	sy
 80098e2:	f3bf 8f4f 	dsb	sy
 80098e6:	623b      	str	r3, [r7, #32]
}
 80098e8:	bf00      	nop
 80098ea:	e7fe      	b.n	80098ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d103      	bne.n	80098fa <xQueueReceive+0x3e>
 80098f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d101      	bne.n	80098fe <xQueueReceive+0x42>
 80098fa:	2301      	movs	r3, #1
 80098fc:	e000      	b.n	8009900 <xQueueReceive+0x44>
 80098fe:	2300      	movs	r3, #0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d10a      	bne.n	800991a <xQueueReceive+0x5e>
	__asm volatile
 8009904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009908:	f383 8811 	msr	BASEPRI, r3
 800990c:	f3bf 8f6f 	isb	sy
 8009910:	f3bf 8f4f 	dsb	sy
 8009914:	61fb      	str	r3, [r7, #28]
}
 8009916:	bf00      	nop
 8009918:	e7fe      	b.n	8009918 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800991a:	f001 f83b 	bl	800a994 <xTaskGetSchedulerState>
 800991e:	4603      	mov	r3, r0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d102      	bne.n	800992a <xQueueReceive+0x6e>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d101      	bne.n	800992e <xQueueReceive+0x72>
 800992a:	2301      	movs	r3, #1
 800992c:	e000      	b.n	8009930 <xQueueReceive+0x74>
 800992e:	2300      	movs	r3, #0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d10a      	bne.n	800994a <xQueueReceive+0x8e>
	__asm volatile
 8009934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009938:	f383 8811 	msr	BASEPRI, r3
 800993c:	f3bf 8f6f 	isb	sy
 8009940:	f3bf 8f4f 	dsb	sy
 8009944:	61bb      	str	r3, [r7, #24]
}
 8009946:	bf00      	nop
 8009948:	e7fe      	b.n	8009948 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800994a:	f001 fd7b 	bl	800b444 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800994e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009952:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009956:	2b00      	cmp	r3, #0
 8009958:	d01f      	beq.n	800999a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800995a:	68b9      	ldr	r1, [r7, #8]
 800995c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800995e:	f000 f8f7 	bl	8009b50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009964:	1e5a      	subs	r2, r3, #1
 8009966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009968:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800996a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00f      	beq.n	8009992 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009974:	3310      	adds	r3, #16
 8009976:	4618      	mov	r0, r3
 8009978:	f000 fe4e 	bl	800a618 <xTaskRemoveFromEventList>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d007      	beq.n	8009992 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009982:	4b3d      	ldr	r3, [pc, #244]	; (8009a78 <xQueueReceive+0x1bc>)
 8009984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009988:	601a      	str	r2, [r3, #0]
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009992:	f001 fd87 	bl	800b4a4 <vPortExitCritical>
				return pdPASS;
 8009996:	2301      	movs	r3, #1
 8009998:	e069      	b.n	8009a6e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d103      	bne.n	80099a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80099a0:	f001 fd80 	bl	800b4a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80099a4:	2300      	movs	r3, #0
 80099a6:	e062      	b.n	8009a6e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80099a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d106      	bne.n	80099bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099ae:	f107 0310 	add.w	r3, r7, #16
 80099b2:	4618      	mov	r0, r3
 80099b4:	f000 fe94 	bl	800a6e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099b8:	2301      	movs	r3, #1
 80099ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099bc:	f001 fd72 	bl	800b4a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099c0:	f000 fc06 	bl	800a1d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099c4:	f001 fd3e 	bl	800b444 <vPortEnterCritical>
 80099c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099ce:	b25b      	sxtb	r3, r3
 80099d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099d4:	d103      	bne.n	80099de <xQueueReceive+0x122>
 80099d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d8:	2200      	movs	r2, #0
 80099da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099e4:	b25b      	sxtb	r3, r3
 80099e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ea:	d103      	bne.n	80099f4 <xQueueReceive+0x138>
 80099ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ee:	2200      	movs	r2, #0
 80099f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099f4:	f001 fd56 	bl	800b4a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80099f8:	1d3a      	adds	r2, r7, #4
 80099fa:	f107 0310 	add.w	r3, r7, #16
 80099fe:	4611      	mov	r1, r2
 8009a00:	4618      	mov	r0, r3
 8009a02:	f000 fe83 	bl	800a70c <xTaskCheckForTimeOut>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d123      	bne.n	8009a54 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a0e:	f000 f917 	bl	8009c40 <prvIsQueueEmpty>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d017      	beq.n	8009a48 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1a:	3324      	adds	r3, #36	; 0x24
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	4611      	mov	r1, r2
 8009a20:	4618      	mov	r0, r3
 8009a22:	f000 fda9 	bl	800a578 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a28:	f000 f8b8 	bl	8009b9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a2c:	f000 fbde 	bl	800a1ec <xTaskResumeAll>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d189      	bne.n	800994a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009a36:	4b10      	ldr	r3, [pc, #64]	; (8009a78 <xQueueReceive+0x1bc>)
 8009a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a3c:	601a      	str	r2, [r3, #0]
 8009a3e:	f3bf 8f4f 	dsb	sy
 8009a42:	f3bf 8f6f 	isb	sy
 8009a46:	e780      	b.n	800994a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009a48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a4a:	f000 f8a7 	bl	8009b9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a4e:	f000 fbcd 	bl	800a1ec <xTaskResumeAll>
 8009a52:	e77a      	b.n	800994a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009a54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a56:	f000 f8a1 	bl	8009b9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a5a:	f000 fbc7 	bl	800a1ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a60:	f000 f8ee 	bl	8009c40 <prvIsQueueEmpty>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	f43f af6f 	beq.w	800994a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009a6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3730      	adds	r7, #48	; 0x30
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	e000ed04 	.word	0xe000ed04

08009a7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b086      	sub	sp, #24
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d10d      	bne.n	8009ab6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d14d      	bne.n	8009b3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f000 ff92 	bl	800a9d0 <xTaskPriorityDisinherit>
 8009aac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	609a      	str	r2, [r3, #8]
 8009ab4:	e043      	b.n	8009b3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d119      	bne.n	8009af0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	6858      	ldr	r0, [r3, #4]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	68b9      	ldr	r1, [r7, #8]
 8009ac8:	f008 fd76 	bl	80125b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	685a      	ldr	r2, [r3, #4]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad4:	441a      	add	r2, r3
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	685a      	ldr	r2, [r3, #4]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	689b      	ldr	r3, [r3, #8]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d32b      	bcc.n	8009b3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	605a      	str	r2, [r3, #4]
 8009aee:	e026      	b.n	8009b3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	68d8      	ldr	r0, [r3, #12]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af8:	461a      	mov	r2, r3
 8009afa:	68b9      	ldr	r1, [r7, #8]
 8009afc:	f008 fd5c 	bl	80125b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	68da      	ldr	r2, [r3, #12]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b08:	425b      	negs	r3, r3
 8009b0a:	441a      	add	r2, r3
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	68da      	ldr	r2, [r3, #12]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d207      	bcs.n	8009b2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	689a      	ldr	r2, [r3, #8]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b24:	425b      	negs	r3, r3
 8009b26:	441a      	add	r2, r3
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	d105      	bne.n	8009b3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d002      	beq.n	8009b3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	1c5a      	adds	r2, r3, #1
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009b46:	697b      	ldr	r3, [r7, #20]
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3718      	adds	r7, #24
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d018      	beq.n	8009b94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	68da      	ldr	r2, [r3, #12]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6a:	441a      	add	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	68da      	ldr	r2, [r3, #12]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d303      	bcc.n	8009b84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	68d9      	ldr	r1, [r3, #12]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	6838      	ldr	r0, [r7, #0]
 8009b90:	f008 fd12 	bl	80125b8 <memcpy>
	}
}
 8009b94:	bf00      	nop
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009ba4:	f001 fc4e 	bl	800b444 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009bb0:	e011      	b.n	8009bd6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d012      	beq.n	8009be0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	3324      	adds	r3, #36	; 0x24
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f000 fd2a 	bl	800a618 <xTaskRemoveFromEventList>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d001      	beq.n	8009bce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009bca:	f000 fe01 	bl	800a7d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009bce:	7bfb      	ldrb	r3, [r7, #15]
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	dce9      	bgt.n	8009bb2 <prvUnlockQueue+0x16>
 8009bde:	e000      	b.n	8009be2 <prvUnlockQueue+0x46>
					break;
 8009be0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	22ff      	movs	r2, #255	; 0xff
 8009be6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009bea:	f001 fc5b 	bl	800b4a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009bee:	f001 fc29 	bl	800b444 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bf8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009bfa:	e011      	b.n	8009c20 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	691b      	ldr	r3, [r3, #16]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d012      	beq.n	8009c2a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	3310      	adds	r3, #16
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f000 fd05 	bl	800a618 <xTaskRemoveFromEventList>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d001      	beq.n	8009c18 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009c14:	f000 fddc 	bl	800a7d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009c18:	7bbb      	ldrb	r3, [r7, #14]
 8009c1a:	3b01      	subs	r3, #1
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	dce9      	bgt.n	8009bfc <prvUnlockQueue+0x60>
 8009c28:	e000      	b.n	8009c2c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009c2a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	22ff      	movs	r2, #255	; 0xff
 8009c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009c34:	f001 fc36 	bl	800b4a4 <vPortExitCritical>
}
 8009c38:	bf00      	nop
 8009c3a:	3710      	adds	r7, #16
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c48:	f001 fbfc 	bl	800b444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d102      	bne.n	8009c5a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009c54:	2301      	movs	r3, #1
 8009c56:	60fb      	str	r3, [r7, #12]
 8009c58:	e001      	b.n	8009c5e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c5e:	f001 fc21 	bl	800b4a4 <vPortExitCritical>

	return xReturn;
 8009c62:	68fb      	ldr	r3, [r7, #12]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3710      	adds	r7, #16
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c74:	f001 fbe6 	bl	800b444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d102      	bne.n	8009c8a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009c84:	2301      	movs	r3, #1
 8009c86:	60fb      	str	r3, [r7, #12]
 8009c88:	e001      	b.n	8009c8e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c8e:	f001 fc09 	bl	800b4a4 <vPortExitCritical>

	return xReturn;
 8009c92:	68fb      	ldr	r3, [r7, #12]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3710      	adds	r7, #16
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b085      	sub	sp, #20
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	60fb      	str	r3, [r7, #12]
 8009caa:	e014      	b.n	8009cd6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009cac:	4a0f      	ldr	r2, [pc, #60]	; (8009cec <vQueueAddToRegistry+0x50>)
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d10b      	bne.n	8009cd0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009cb8:	490c      	ldr	r1, [pc, #48]	; (8009cec <vQueueAddToRegistry+0x50>)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	683a      	ldr	r2, [r7, #0]
 8009cbe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009cc2:	4a0a      	ldr	r2, [pc, #40]	; (8009cec <vQueueAddToRegistry+0x50>)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	00db      	lsls	r3, r3, #3
 8009cc8:	4413      	add	r3, r2
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009cce:	e006      	b.n	8009cde <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	60fb      	str	r3, [r7, #12]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2b07      	cmp	r3, #7
 8009cda:	d9e7      	bls.n	8009cac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009cdc:	bf00      	nop
 8009cde:	bf00      	nop
 8009ce0:	3714      	adds	r7, #20
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	20004fdc 	.word	0x20004fdc

08009cf0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b086      	sub	sp, #24
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009d00:	f001 fba0 	bl	800b444 <vPortEnterCritical>
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d0a:	b25b      	sxtb	r3, r3
 8009d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d10:	d103      	bne.n	8009d1a <vQueueWaitForMessageRestricted+0x2a>
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d20:	b25b      	sxtb	r3, r3
 8009d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d26:	d103      	bne.n	8009d30 <vQueueWaitForMessageRestricted+0x40>
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d30:	f001 fbb8 	bl	800b4a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d106      	bne.n	8009d4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	3324      	adds	r3, #36	; 0x24
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	68b9      	ldr	r1, [r7, #8]
 8009d44:	4618      	mov	r0, r3
 8009d46:	f000 fc3b 	bl	800a5c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009d4a:	6978      	ldr	r0, [r7, #20]
 8009d4c:	f7ff ff26 	bl	8009b9c <prvUnlockQueue>
	}
 8009d50:	bf00      	nop
 8009d52:	3718      	adds	r7, #24
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b08e      	sub	sp, #56	; 0x38
 8009d5c:	af04      	add	r7, sp, #16
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
 8009d64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d10a      	bne.n	8009d82 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d70:	f383 8811 	msr	BASEPRI, r3
 8009d74:	f3bf 8f6f 	isb	sy
 8009d78:	f3bf 8f4f 	dsb	sy
 8009d7c:	623b      	str	r3, [r7, #32]
}
 8009d7e:	bf00      	nop
 8009d80:	e7fe      	b.n	8009d80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d10a      	bne.n	8009d9e <xTaskCreateStatic+0x46>
	__asm volatile
 8009d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8c:	f383 8811 	msr	BASEPRI, r3
 8009d90:	f3bf 8f6f 	isb	sy
 8009d94:	f3bf 8f4f 	dsb	sy
 8009d98:	61fb      	str	r3, [r7, #28]
}
 8009d9a:	bf00      	nop
 8009d9c:	e7fe      	b.n	8009d9c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009d9e:	235c      	movs	r3, #92	; 0x5c
 8009da0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	2b5c      	cmp	r3, #92	; 0x5c
 8009da6:	d00a      	beq.n	8009dbe <xTaskCreateStatic+0x66>
	__asm volatile
 8009da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dac:	f383 8811 	msr	BASEPRI, r3
 8009db0:	f3bf 8f6f 	isb	sy
 8009db4:	f3bf 8f4f 	dsb	sy
 8009db8:	61bb      	str	r3, [r7, #24]
}
 8009dba:	bf00      	nop
 8009dbc:	e7fe      	b.n	8009dbc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009dbe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d01e      	beq.n	8009e04 <xTaskCreateStatic+0xac>
 8009dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d01b      	beq.n	8009e04 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009dd4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd8:	2202      	movs	r2, #2
 8009dda:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009dde:	2300      	movs	r3, #0
 8009de0:	9303      	str	r3, [sp, #12]
 8009de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de4:	9302      	str	r3, [sp, #8]
 8009de6:	f107 0314 	add.w	r3, r7, #20
 8009dea:	9301      	str	r3, [sp, #4]
 8009dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dee:	9300      	str	r3, [sp, #0]
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	68b9      	ldr	r1, [r7, #8]
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	f000 f850 	bl	8009e9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009dfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009dfe:	f000 f8dd 	bl	8009fbc <prvAddNewTaskToReadyList>
 8009e02:	e001      	b.n	8009e08 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009e04:	2300      	movs	r3, #0
 8009e06:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009e08:	697b      	ldr	r3, [r7, #20]
	}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3728      	adds	r7, #40	; 0x28
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b08c      	sub	sp, #48	; 0x30
 8009e16:	af04      	add	r7, sp, #16
 8009e18:	60f8      	str	r0, [r7, #12]
 8009e1a:	60b9      	str	r1, [r7, #8]
 8009e1c:	603b      	str	r3, [r7, #0]
 8009e1e:	4613      	mov	r3, r2
 8009e20:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009e22:	88fb      	ldrh	r3, [r7, #6]
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	4618      	mov	r0, r3
 8009e28:	f001 fc2e 	bl	800b688 <pvPortMalloc>
 8009e2c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d00e      	beq.n	8009e52 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009e34:	205c      	movs	r0, #92	; 0x5c
 8009e36:	f001 fc27 	bl	800b688 <pvPortMalloc>
 8009e3a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d003      	beq.n	8009e4a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	697a      	ldr	r2, [r7, #20]
 8009e46:	631a      	str	r2, [r3, #48]	; 0x30
 8009e48:	e005      	b.n	8009e56 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009e4a:	6978      	ldr	r0, [r7, #20]
 8009e4c:	f001 fce8 	bl	800b820 <vPortFree>
 8009e50:	e001      	b.n	8009e56 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009e52:	2300      	movs	r3, #0
 8009e54:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d017      	beq.n	8009e8c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009e5c:	69fb      	ldr	r3, [r7, #28]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009e64:	88fa      	ldrh	r2, [r7, #6]
 8009e66:	2300      	movs	r3, #0
 8009e68:	9303      	str	r3, [sp, #12]
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	9302      	str	r3, [sp, #8]
 8009e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e70:	9301      	str	r3, [sp, #4]
 8009e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e74:	9300      	str	r3, [sp, #0]
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	68b9      	ldr	r1, [r7, #8]
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f000 f80e 	bl	8009e9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e80:	69f8      	ldr	r0, [r7, #28]
 8009e82:	f000 f89b 	bl	8009fbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009e86:	2301      	movs	r3, #1
 8009e88:	61bb      	str	r3, [r7, #24]
 8009e8a:	e002      	b.n	8009e92 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e90:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009e92:	69bb      	ldr	r3, [r7, #24]
	}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3720      	adds	r7, #32
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b088      	sub	sp, #32
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	607a      	str	r2, [r7, #4]
 8009ea8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	21a5      	movs	r1, #165	; 0xa5
 8009eb6:	f008 fb8d 	bl	80125d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4413      	add	r3, r2
 8009eca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	f023 0307 	bic.w	r3, r3, #7
 8009ed2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009ed4:	69bb      	ldr	r3, [r7, #24]
 8009ed6:	f003 0307 	and.w	r3, r3, #7
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00a      	beq.n	8009ef4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee2:	f383 8811 	msr	BASEPRI, r3
 8009ee6:	f3bf 8f6f 	isb	sy
 8009eea:	f3bf 8f4f 	dsb	sy
 8009eee:	617b      	str	r3, [r7, #20]
}
 8009ef0:	bf00      	nop
 8009ef2:	e7fe      	b.n	8009ef2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d01f      	beq.n	8009f3a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009efa:	2300      	movs	r3, #0
 8009efc:	61fb      	str	r3, [r7, #28]
 8009efe:	e012      	b.n	8009f26 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009f00:	68ba      	ldr	r2, [r7, #8]
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	4413      	add	r3, r2
 8009f06:	7819      	ldrb	r1, [r3, #0]
 8009f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	3334      	adds	r3, #52	; 0x34
 8009f10:	460a      	mov	r2, r1
 8009f12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009f14:	68ba      	ldr	r2, [r7, #8]
 8009f16:	69fb      	ldr	r3, [r7, #28]
 8009f18:	4413      	add	r3, r2
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d006      	beq.n	8009f2e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	3301      	adds	r3, #1
 8009f24:	61fb      	str	r3, [r7, #28]
 8009f26:	69fb      	ldr	r3, [r7, #28]
 8009f28:	2b0f      	cmp	r3, #15
 8009f2a:	d9e9      	bls.n	8009f00 <prvInitialiseNewTask+0x64>
 8009f2c:	e000      	b.n	8009f30 <prvInitialiseNewTask+0x94>
			{
				break;
 8009f2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f32:	2200      	movs	r2, #0
 8009f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f38:	e003      	b.n	8009f42 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f44:	2b37      	cmp	r3, #55	; 0x37
 8009f46:	d901      	bls.n	8009f4c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009f48:	2337      	movs	r3, #55	; 0x37
 8009f4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f56:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f60:	3304      	adds	r3, #4
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7ff f978 	bl	8009258 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6a:	3318      	adds	r3, #24
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f7ff f973 	bl	8009258 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009f96:	683a      	ldr	r2, [r7, #0]
 8009f98:	68f9      	ldr	r1, [r7, #12]
 8009f9a:	69b8      	ldr	r0, [r7, #24]
 8009f9c:	f001 f928 	bl	800b1f0 <pxPortInitialiseStack>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d002      	beq.n	8009fb2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fb2:	bf00      	nop
 8009fb4:	3720      	adds	r7, #32
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
	...

08009fbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009fc4:	f001 fa3e 	bl	800b444 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009fc8:	4b2d      	ldr	r3, [pc, #180]	; (800a080 <prvAddNewTaskToReadyList+0xc4>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	3301      	adds	r3, #1
 8009fce:	4a2c      	ldr	r2, [pc, #176]	; (800a080 <prvAddNewTaskToReadyList+0xc4>)
 8009fd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009fd2:	4b2c      	ldr	r3, [pc, #176]	; (800a084 <prvAddNewTaskToReadyList+0xc8>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d109      	bne.n	8009fee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009fda:	4a2a      	ldr	r2, [pc, #168]	; (800a084 <prvAddNewTaskToReadyList+0xc8>)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009fe0:	4b27      	ldr	r3, [pc, #156]	; (800a080 <prvAddNewTaskToReadyList+0xc4>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d110      	bne.n	800a00a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009fe8:	f000 fc16 	bl	800a818 <prvInitialiseTaskLists>
 8009fec:	e00d      	b.n	800a00a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009fee:	4b26      	ldr	r3, [pc, #152]	; (800a088 <prvAddNewTaskToReadyList+0xcc>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d109      	bne.n	800a00a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009ff6:	4b23      	ldr	r3, [pc, #140]	; (800a084 <prvAddNewTaskToReadyList+0xc8>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a000:	429a      	cmp	r2, r3
 800a002:	d802      	bhi.n	800a00a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a004:	4a1f      	ldr	r2, [pc, #124]	; (800a084 <prvAddNewTaskToReadyList+0xc8>)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a00a:	4b20      	ldr	r3, [pc, #128]	; (800a08c <prvAddNewTaskToReadyList+0xd0>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	3301      	adds	r3, #1
 800a010:	4a1e      	ldr	r2, [pc, #120]	; (800a08c <prvAddNewTaskToReadyList+0xd0>)
 800a012:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a014:	4b1d      	ldr	r3, [pc, #116]	; (800a08c <prvAddNewTaskToReadyList+0xd0>)
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a020:	4b1b      	ldr	r3, [pc, #108]	; (800a090 <prvAddNewTaskToReadyList+0xd4>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	429a      	cmp	r2, r3
 800a026:	d903      	bls.n	800a030 <prvAddNewTaskToReadyList+0x74>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02c:	4a18      	ldr	r2, [pc, #96]	; (800a090 <prvAddNewTaskToReadyList+0xd4>)
 800a02e:	6013      	str	r3, [r2, #0]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a034:	4613      	mov	r3, r2
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	4413      	add	r3, r2
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	4a15      	ldr	r2, [pc, #84]	; (800a094 <prvAddNewTaskToReadyList+0xd8>)
 800a03e:	441a      	add	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	3304      	adds	r3, #4
 800a044:	4619      	mov	r1, r3
 800a046:	4610      	mov	r0, r2
 800a048:	f7ff f913 	bl	8009272 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a04c:	f001 fa2a 	bl	800b4a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a050:	4b0d      	ldr	r3, [pc, #52]	; (800a088 <prvAddNewTaskToReadyList+0xcc>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d00e      	beq.n	800a076 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a058:	4b0a      	ldr	r3, [pc, #40]	; (800a084 <prvAddNewTaskToReadyList+0xc8>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a062:	429a      	cmp	r2, r3
 800a064:	d207      	bcs.n	800a076 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a066:	4b0c      	ldr	r3, [pc, #48]	; (800a098 <prvAddNewTaskToReadyList+0xdc>)
 800a068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a06c:	601a      	str	r2, [r3, #0]
 800a06e:	f3bf 8f4f 	dsb	sy
 800a072:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a076:	bf00      	nop
 800a078:	3708      	adds	r7, #8
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	200011f0 	.word	0x200011f0
 800a084:	20000d1c 	.word	0x20000d1c
 800a088:	200011fc 	.word	0x200011fc
 800a08c:	2000120c 	.word	0x2000120c
 800a090:	200011f8 	.word	0x200011f8
 800a094:	20000d20 	.word	0x20000d20
 800a098:	e000ed04 	.word	0xe000ed04

0800a09c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d017      	beq.n	800a0de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a0ae:	4b13      	ldr	r3, [pc, #76]	; (800a0fc <vTaskDelay+0x60>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d00a      	beq.n	800a0cc <vTaskDelay+0x30>
	__asm volatile
 800a0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ba:	f383 8811 	msr	BASEPRI, r3
 800a0be:	f3bf 8f6f 	isb	sy
 800a0c2:	f3bf 8f4f 	dsb	sy
 800a0c6:	60bb      	str	r3, [r7, #8]
}
 800a0c8:	bf00      	nop
 800a0ca:	e7fe      	b.n	800a0ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a0cc:	f000 f880 	bl	800a1d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 fcea 	bl	800aaac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a0d8:	f000 f888 	bl	800a1ec <xTaskResumeAll>
 800a0dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d107      	bne.n	800a0f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a0e4:	4b06      	ldr	r3, [pc, #24]	; (800a100 <vTaskDelay+0x64>)
 800a0e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ea:	601a      	str	r2, [r3, #0]
 800a0ec:	f3bf 8f4f 	dsb	sy
 800a0f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a0f4:	bf00      	nop
 800a0f6:	3710      	adds	r7, #16
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	20001218 	.word	0x20001218
 800a100:	e000ed04 	.word	0xe000ed04

0800a104 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b08a      	sub	sp, #40	; 0x28
 800a108:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a10a:	2300      	movs	r3, #0
 800a10c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a10e:	2300      	movs	r3, #0
 800a110:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a112:	463a      	mov	r2, r7
 800a114:	1d39      	adds	r1, r7, #4
 800a116:	f107 0308 	add.w	r3, r7, #8
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7ff f848 	bl	80091b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a120:	6839      	ldr	r1, [r7, #0]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	68ba      	ldr	r2, [r7, #8]
 800a126:	9202      	str	r2, [sp, #8]
 800a128:	9301      	str	r3, [sp, #4]
 800a12a:	2300      	movs	r3, #0
 800a12c:	9300      	str	r3, [sp, #0]
 800a12e:	2300      	movs	r3, #0
 800a130:	460a      	mov	r2, r1
 800a132:	4921      	ldr	r1, [pc, #132]	; (800a1b8 <vTaskStartScheduler+0xb4>)
 800a134:	4821      	ldr	r0, [pc, #132]	; (800a1bc <vTaskStartScheduler+0xb8>)
 800a136:	f7ff fe0f 	bl	8009d58 <xTaskCreateStatic>
 800a13a:	4603      	mov	r3, r0
 800a13c:	4a20      	ldr	r2, [pc, #128]	; (800a1c0 <vTaskStartScheduler+0xbc>)
 800a13e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a140:	4b1f      	ldr	r3, [pc, #124]	; (800a1c0 <vTaskStartScheduler+0xbc>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d002      	beq.n	800a14e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a148:	2301      	movs	r3, #1
 800a14a:	617b      	str	r3, [r7, #20]
 800a14c:	e001      	b.n	800a152 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a14e:	2300      	movs	r3, #0
 800a150:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	2b01      	cmp	r3, #1
 800a156:	d102      	bne.n	800a15e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a158:	f000 fcfc 	bl	800ab54 <xTimerCreateTimerTask>
 800a15c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	2b01      	cmp	r3, #1
 800a162:	d116      	bne.n	800a192 <vTaskStartScheduler+0x8e>
	__asm volatile
 800a164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a168:	f383 8811 	msr	BASEPRI, r3
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	613b      	str	r3, [r7, #16]
}
 800a176:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a178:	4b12      	ldr	r3, [pc, #72]	; (800a1c4 <vTaskStartScheduler+0xc0>)
 800a17a:	f04f 32ff 	mov.w	r2, #4294967295
 800a17e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a180:	4b11      	ldr	r3, [pc, #68]	; (800a1c8 <vTaskStartScheduler+0xc4>)
 800a182:	2201      	movs	r2, #1
 800a184:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a186:	4b11      	ldr	r3, [pc, #68]	; (800a1cc <vTaskStartScheduler+0xc8>)
 800a188:	2200      	movs	r2, #0
 800a18a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a18c:	f001 f8b8 	bl	800b300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a190:	e00e      	b.n	800a1b0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a198:	d10a      	bne.n	800a1b0 <vTaskStartScheduler+0xac>
	__asm volatile
 800a19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19e:	f383 8811 	msr	BASEPRI, r3
 800a1a2:	f3bf 8f6f 	isb	sy
 800a1a6:	f3bf 8f4f 	dsb	sy
 800a1aa:	60fb      	str	r3, [r7, #12]
}
 800a1ac:	bf00      	nop
 800a1ae:	e7fe      	b.n	800a1ae <vTaskStartScheduler+0xaa>
}
 800a1b0:	bf00      	nop
 800a1b2:	3718      	adds	r7, #24
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	08012770 	.word	0x08012770
 800a1bc:	0800a7e9 	.word	0x0800a7e9
 800a1c0:	20001214 	.word	0x20001214
 800a1c4:	20001210 	.word	0x20001210
 800a1c8:	200011fc 	.word	0x200011fc
 800a1cc:	200011f4 	.word	0x200011f4

0800a1d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a1d4:	4b04      	ldr	r3, [pc, #16]	; (800a1e8 <vTaskSuspendAll+0x18>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	3301      	adds	r3, #1
 800a1da:	4a03      	ldr	r2, [pc, #12]	; (800a1e8 <vTaskSuspendAll+0x18>)
 800a1dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a1de:	bf00      	nop
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr
 800a1e8:	20001218 	.word	0x20001218

0800a1ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a1fa:	4b42      	ldr	r3, [pc, #264]	; (800a304 <xTaskResumeAll+0x118>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d10a      	bne.n	800a218 <xTaskResumeAll+0x2c>
	__asm volatile
 800a202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a206:	f383 8811 	msr	BASEPRI, r3
 800a20a:	f3bf 8f6f 	isb	sy
 800a20e:	f3bf 8f4f 	dsb	sy
 800a212:	603b      	str	r3, [r7, #0]
}
 800a214:	bf00      	nop
 800a216:	e7fe      	b.n	800a216 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a218:	f001 f914 	bl	800b444 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a21c:	4b39      	ldr	r3, [pc, #228]	; (800a304 <xTaskResumeAll+0x118>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	3b01      	subs	r3, #1
 800a222:	4a38      	ldr	r2, [pc, #224]	; (800a304 <xTaskResumeAll+0x118>)
 800a224:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a226:	4b37      	ldr	r3, [pc, #220]	; (800a304 <xTaskResumeAll+0x118>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d162      	bne.n	800a2f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a22e:	4b36      	ldr	r3, [pc, #216]	; (800a308 <xTaskResumeAll+0x11c>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d05e      	beq.n	800a2f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a236:	e02f      	b.n	800a298 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a238:	4b34      	ldr	r3, [pc, #208]	; (800a30c <xTaskResumeAll+0x120>)
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	3318      	adds	r3, #24
 800a244:	4618      	mov	r0, r3
 800a246:	f7ff f871 	bl	800932c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	3304      	adds	r3, #4
 800a24e:	4618      	mov	r0, r3
 800a250:	f7ff f86c 	bl	800932c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a258:	4b2d      	ldr	r3, [pc, #180]	; (800a310 <xTaskResumeAll+0x124>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d903      	bls.n	800a268 <xTaskResumeAll+0x7c>
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a264:	4a2a      	ldr	r2, [pc, #168]	; (800a310 <xTaskResumeAll+0x124>)
 800a266:	6013      	str	r3, [r2, #0]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a26c:	4613      	mov	r3, r2
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	4413      	add	r3, r2
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	4a27      	ldr	r2, [pc, #156]	; (800a314 <xTaskResumeAll+0x128>)
 800a276:	441a      	add	r2, r3
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	3304      	adds	r3, #4
 800a27c:	4619      	mov	r1, r3
 800a27e:	4610      	mov	r0, r2
 800a280:	f7fe fff7 	bl	8009272 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a288:	4b23      	ldr	r3, [pc, #140]	; (800a318 <xTaskResumeAll+0x12c>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a28e:	429a      	cmp	r2, r3
 800a290:	d302      	bcc.n	800a298 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a292:	4b22      	ldr	r3, [pc, #136]	; (800a31c <xTaskResumeAll+0x130>)
 800a294:	2201      	movs	r2, #1
 800a296:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a298:	4b1c      	ldr	r3, [pc, #112]	; (800a30c <xTaskResumeAll+0x120>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d1cb      	bne.n	800a238 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d001      	beq.n	800a2aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a2a6:	f000 fb55 	bl	800a954 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a2aa:	4b1d      	ldr	r3, [pc, #116]	; (800a320 <xTaskResumeAll+0x134>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d010      	beq.n	800a2d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a2b6:	f000 f847 	bl	800a348 <xTaskIncrementTick>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d002      	beq.n	800a2c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a2c0:	4b16      	ldr	r3, [pc, #88]	; (800a31c <xTaskResumeAll+0x130>)
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	3b01      	subs	r3, #1
 800a2ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d1f1      	bne.n	800a2b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a2d2:	4b13      	ldr	r3, [pc, #76]	; (800a320 <xTaskResumeAll+0x134>)
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a2d8:	4b10      	ldr	r3, [pc, #64]	; (800a31c <xTaskResumeAll+0x130>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d009      	beq.n	800a2f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a2e4:	4b0f      	ldr	r3, [pc, #60]	; (800a324 <xTaskResumeAll+0x138>)
 800a2e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2ea:	601a      	str	r2, [r3, #0]
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a2f4:	f001 f8d6 	bl	800b4a4 <vPortExitCritical>

	return xAlreadyYielded;
 800a2f8:	68bb      	ldr	r3, [r7, #8]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	20001218 	.word	0x20001218
 800a308:	200011f0 	.word	0x200011f0
 800a30c:	200011b0 	.word	0x200011b0
 800a310:	200011f8 	.word	0x200011f8
 800a314:	20000d20 	.word	0x20000d20
 800a318:	20000d1c 	.word	0x20000d1c
 800a31c:	20001204 	.word	0x20001204
 800a320:	20001200 	.word	0x20001200
 800a324:	e000ed04 	.word	0xe000ed04

0800a328 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a32e:	4b05      	ldr	r3, [pc, #20]	; (800a344 <xTaskGetTickCount+0x1c>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a334:	687b      	ldr	r3, [r7, #4]
}
 800a336:	4618      	mov	r0, r3
 800a338:	370c      	adds	r7, #12
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	200011f4 	.word	0x200011f4

0800a348 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b086      	sub	sp, #24
 800a34c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a34e:	2300      	movs	r3, #0
 800a350:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a352:	4b4f      	ldr	r3, [pc, #316]	; (800a490 <xTaskIncrementTick+0x148>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	f040 808f 	bne.w	800a47a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a35c:	4b4d      	ldr	r3, [pc, #308]	; (800a494 <xTaskIncrementTick+0x14c>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	3301      	adds	r3, #1
 800a362:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a364:	4a4b      	ldr	r2, [pc, #300]	; (800a494 <xTaskIncrementTick+0x14c>)
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d120      	bne.n	800a3b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a370:	4b49      	ldr	r3, [pc, #292]	; (800a498 <xTaskIncrementTick+0x150>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d00a      	beq.n	800a390 <xTaskIncrementTick+0x48>
	__asm volatile
 800a37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37e:	f383 8811 	msr	BASEPRI, r3
 800a382:	f3bf 8f6f 	isb	sy
 800a386:	f3bf 8f4f 	dsb	sy
 800a38a:	603b      	str	r3, [r7, #0]
}
 800a38c:	bf00      	nop
 800a38e:	e7fe      	b.n	800a38e <xTaskIncrementTick+0x46>
 800a390:	4b41      	ldr	r3, [pc, #260]	; (800a498 <xTaskIncrementTick+0x150>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	60fb      	str	r3, [r7, #12]
 800a396:	4b41      	ldr	r3, [pc, #260]	; (800a49c <xTaskIncrementTick+0x154>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a3f      	ldr	r2, [pc, #252]	; (800a498 <xTaskIncrementTick+0x150>)
 800a39c:	6013      	str	r3, [r2, #0]
 800a39e:	4a3f      	ldr	r2, [pc, #252]	; (800a49c <xTaskIncrementTick+0x154>)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6013      	str	r3, [r2, #0]
 800a3a4:	4b3e      	ldr	r3, [pc, #248]	; (800a4a0 <xTaskIncrementTick+0x158>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	4a3d      	ldr	r2, [pc, #244]	; (800a4a0 <xTaskIncrementTick+0x158>)
 800a3ac:	6013      	str	r3, [r2, #0]
 800a3ae:	f000 fad1 	bl	800a954 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a3b2:	4b3c      	ldr	r3, [pc, #240]	; (800a4a4 <xTaskIncrementTick+0x15c>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	693a      	ldr	r2, [r7, #16]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d349      	bcc.n	800a450 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3bc:	4b36      	ldr	r3, [pc, #216]	; (800a498 <xTaskIncrementTick+0x150>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d104      	bne.n	800a3d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3c6:	4b37      	ldr	r3, [pc, #220]	; (800a4a4 <xTaskIncrementTick+0x15c>)
 800a3c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a3cc:	601a      	str	r2, [r3, #0]
					break;
 800a3ce:	e03f      	b.n	800a450 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3d0:	4b31      	ldr	r3, [pc, #196]	; (800a498 <xTaskIncrementTick+0x150>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a3e0:	693a      	ldr	r2, [r7, #16]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d203      	bcs.n	800a3f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a3e8:	4a2e      	ldr	r2, [pc, #184]	; (800a4a4 <xTaskIncrementTick+0x15c>)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a3ee:	e02f      	b.n	800a450 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	3304      	adds	r3, #4
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7fe ff99 	bl	800932c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d004      	beq.n	800a40c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	3318      	adds	r3, #24
 800a406:	4618      	mov	r0, r3
 800a408:	f7fe ff90 	bl	800932c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a410:	4b25      	ldr	r3, [pc, #148]	; (800a4a8 <xTaskIncrementTick+0x160>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	429a      	cmp	r2, r3
 800a416:	d903      	bls.n	800a420 <xTaskIncrementTick+0xd8>
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a41c:	4a22      	ldr	r2, [pc, #136]	; (800a4a8 <xTaskIncrementTick+0x160>)
 800a41e:	6013      	str	r3, [r2, #0]
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a424:	4613      	mov	r3, r2
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	4413      	add	r3, r2
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	4a1f      	ldr	r2, [pc, #124]	; (800a4ac <xTaskIncrementTick+0x164>)
 800a42e:	441a      	add	r2, r3
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	3304      	adds	r3, #4
 800a434:	4619      	mov	r1, r3
 800a436:	4610      	mov	r0, r2
 800a438:	f7fe ff1b 	bl	8009272 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a440:	4b1b      	ldr	r3, [pc, #108]	; (800a4b0 <xTaskIncrementTick+0x168>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a446:	429a      	cmp	r2, r3
 800a448:	d3b8      	bcc.n	800a3bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a44a:	2301      	movs	r3, #1
 800a44c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a44e:	e7b5      	b.n	800a3bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a450:	4b17      	ldr	r3, [pc, #92]	; (800a4b0 <xTaskIncrementTick+0x168>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a456:	4915      	ldr	r1, [pc, #84]	; (800a4ac <xTaskIncrementTick+0x164>)
 800a458:	4613      	mov	r3, r2
 800a45a:	009b      	lsls	r3, r3, #2
 800a45c:	4413      	add	r3, r2
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	440b      	add	r3, r1
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2b01      	cmp	r3, #1
 800a466:	d901      	bls.n	800a46c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a468:	2301      	movs	r3, #1
 800a46a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a46c:	4b11      	ldr	r3, [pc, #68]	; (800a4b4 <xTaskIncrementTick+0x16c>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d007      	beq.n	800a484 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a474:	2301      	movs	r3, #1
 800a476:	617b      	str	r3, [r7, #20]
 800a478:	e004      	b.n	800a484 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a47a:	4b0f      	ldr	r3, [pc, #60]	; (800a4b8 <xTaskIncrementTick+0x170>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	3301      	adds	r3, #1
 800a480:	4a0d      	ldr	r2, [pc, #52]	; (800a4b8 <xTaskIncrementTick+0x170>)
 800a482:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a484:	697b      	ldr	r3, [r7, #20]
}
 800a486:	4618      	mov	r0, r3
 800a488:	3718      	adds	r7, #24
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	20001218 	.word	0x20001218
 800a494:	200011f4 	.word	0x200011f4
 800a498:	200011a8 	.word	0x200011a8
 800a49c:	200011ac 	.word	0x200011ac
 800a4a0:	20001208 	.word	0x20001208
 800a4a4:	20001210 	.word	0x20001210
 800a4a8:	200011f8 	.word	0x200011f8
 800a4ac:	20000d20 	.word	0x20000d20
 800a4b0:	20000d1c 	.word	0x20000d1c
 800a4b4:	20001204 	.word	0x20001204
 800a4b8:	20001200 	.word	0x20001200

0800a4bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b085      	sub	sp, #20
 800a4c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a4c2:	4b28      	ldr	r3, [pc, #160]	; (800a564 <vTaskSwitchContext+0xa8>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d003      	beq.n	800a4d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a4ca:	4b27      	ldr	r3, [pc, #156]	; (800a568 <vTaskSwitchContext+0xac>)
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a4d0:	e041      	b.n	800a556 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a4d2:	4b25      	ldr	r3, [pc, #148]	; (800a568 <vTaskSwitchContext+0xac>)
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4d8:	4b24      	ldr	r3, [pc, #144]	; (800a56c <vTaskSwitchContext+0xb0>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	60fb      	str	r3, [r7, #12]
 800a4de:	e010      	b.n	800a502 <vTaskSwitchContext+0x46>
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d10a      	bne.n	800a4fc <vTaskSwitchContext+0x40>
	__asm volatile
 800a4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ea:	f383 8811 	msr	BASEPRI, r3
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	607b      	str	r3, [r7, #4]
}
 800a4f8:	bf00      	nop
 800a4fa:	e7fe      	b.n	800a4fa <vTaskSwitchContext+0x3e>
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	3b01      	subs	r3, #1
 800a500:	60fb      	str	r3, [r7, #12]
 800a502:	491b      	ldr	r1, [pc, #108]	; (800a570 <vTaskSwitchContext+0xb4>)
 800a504:	68fa      	ldr	r2, [r7, #12]
 800a506:	4613      	mov	r3, r2
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	4413      	add	r3, r2
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	440b      	add	r3, r1
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d0e4      	beq.n	800a4e0 <vTaskSwitchContext+0x24>
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	4613      	mov	r3, r2
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	4413      	add	r3, r2
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	4a13      	ldr	r2, [pc, #76]	; (800a570 <vTaskSwitchContext+0xb4>)
 800a522:	4413      	add	r3, r2
 800a524:	60bb      	str	r3, [r7, #8]
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	685a      	ldr	r2, [r3, #4]
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	605a      	str	r2, [r3, #4]
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	685a      	ldr	r2, [r3, #4]
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	3308      	adds	r3, #8
 800a538:	429a      	cmp	r2, r3
 800a53a:	d104      	bne.n	800a546 <vTaskSwitchContext+0x8a>
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	685a      	ldr	r2, [r3, #4]
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	605a      	str	r2, [r3, #4]
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	4a09      	ldr	r2, [pc, #36]	; (800a574 <vTaskSwitchContext+0xb8>)
 800a54e:	6013      	str	r3, [r2, #0]
 800a550:	4a06      	ldr	r2, [pc, #24]	; (800a56c <vTaskSwitchContext+0xb0>)
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	6013      	str	r3, [r2, #0]
}
 800a556:	bf00      	nop
 800a558:	3714      	adds	r7, #20
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr
 800a562:	bf00      	nop
 800a564:	20001218 	.word	0x20001218
 800a568:	20001204 	.word	0x20001204
 800a56c:	200011f8 	.word	0x200011f8
 800a570:	20000d20 	.word	0x20000d20
 800a574:	20000d1c 	.word	0x20000d1c

0800a578 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d10a      	bne.n	800a59e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58c:	f383 8811 	msr	BASEPRI, r3
 800a590:	f3bf 8f6f 	isb	sy
 800a594:	f3bf 8f4f 	dsb	sy
 800a598:	60fb      	str	r3, [r7, #12]
}
 800a59a:	bf00      	nop
 800a59c:	e7fe      	b.n	800a59c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a59e:	4b07      	ldr	r3, [pc, #28]	; (800a5bc <vTaskPlaceOnEventList+0x44>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	3318      	adds	r3, #24
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f7fe fe87 	bl	80092ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a5ac:	2101      	movs	r1, #1
 800a5ae:	6838      	ldr	r0, [r7, #0]
 800a5b0:	f000 fa7c 	bl	800aaac <prvAddCurrentTaskToDelayedList>
}
 800a5b4:	bf00      	nop
 800a5b6:	3710      	adds	r7, #16
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	20000d1c 	.word	0x20000d1c

0800a5c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b086      	sub	sp, #24
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d10a      	bne.n	800a5e8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d6:	f383 8811 	msr	BASEPRI, r3
 800a5da:	f3bf 8f6f 	isb	sy
 800a5de:	f3bf 8f4f 	dsb	sy
 800a5e2:	617b      	str	r3, [r7, #20]
}
 800a5e4:	bf00      	nop
 800a5e6:	e7fe      	b.n	800a5e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a5e8:	4b0a      	ldr	r3, [pc, #40]	; (800a614 <vTaskPlaceOnEventListRestricted+0x54>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	3318      	adds	r3, #24
 800a5ee:	4619      	mov	r1, r3
 800a5f0:	68f8      	ldr	r0, [r7, #12]
 800a5f2:	f7fe fe3e 	bl	8009272 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d002      	beq.n	800a602 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a5fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a600:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a602:	6879      	ldr	r1, [r7, #4]
 800a604:	68b8      	ldr	r0, [r7, #8]
 800a606:	f000 fa51 	bl	800aaac <prvAddCurrentTaskToDelayedList>
	}
 800a60a:	bf00      	nop
 800a60c:	3718      	adds	r7, #24
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	20000d1c 	.word	0x20000d1c

0800a618 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b086      	sub	sp, #24
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	68db      	ldr	r3, [r3, #12]
 800a626:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d10a      	bne.n	800a644 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a632:	f383 8811 	msr	BASEPRI, r3
 800a636:	f3bf 8f6f 	isb	sy
 800a63a:	f3bf 8f4f 	dsb	sy
 800a63e:	60fb      	str	r3, [r7, #12]
}
 800a640:	bf00      	nop
 800a642:	e7fe      	b.n	800a642 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	3318      	adds	r3, #24
 800a648:	4618      	mov	r0, r3
 800a64a:	f7fe fe6f 	bl	800932c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a64e:	4b1e      	ldr	r3, [pc, #120]	; (800a6c8 <xTaskRemoveFromEventList+0xb0>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d11d      	bne.n	800a692 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	3304      	adds	r3, #4
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7fe fe66 	bl	800932c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a664:	4b19      	ldr	r3, [pc, #100]	; (800a6cc <xTaskRemoveFromEventList+0xb4>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d903      	bls.n	800a674 <xTaskRemoveFromEventList+0x5c>
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a670:	4a16      	ldr	r2, [pc, #88]	; (800a6cc <xTaskRemoveFromEventList+0xb4>)
 800a672:	6013      	str	r3, [r2, #0]
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a678:	4613      	mov	r3, r2
 800a67a:	009b      	lsls	r3, r3, #2
 800a67c:	4413      	add	r3, r2
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	4a13      	ldr	r2, [pc, #76]	; (800a6d0 <xTaskRemoveFromEventList+0xb8>)
 800a682:	441a      	add	r2, r3
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	3304      	adds	r3, #4
 800a688:	4619      	mov	r1, r3
 800a68a:	4610      	mov	r0, r2
 800a68c:	f7fe fdf1 	bl	8009272 <vListInsertEnd>
 800a690:	e005      	b.n	800a69e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	3318      	adds	r3, #24
 800a696:	4619      	mov	r1, r3
 800a698:	480e      	ldr	r0, [pc, #56]	; (800a6d4 <xTaskRemoveFromEventList+0xbc>)
 800a69a:	f7fe fdea 	bl	8009272 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6a2:	4b0d      	ldr	r3, [pc, #52]	; (800a6d8 <xTaskRemoveFromEventList+0xc0>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d905      	bls.n	800a6b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a6b0:	4b0a      	ldr	r3, [pc, #40]	; (800a6dc <xTaskRemoveFromEventList+0xc4>)
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	601a      	str	r2, [r3, #0]
 800a6b6:	e001      	b.n	800a6bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a6bc:	697b      	ldr	r3, [r7, #20]
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3718      	adds	r7, #24
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	20001218 	.word	0x20001218
 800a6cc:	200011f8 	.word	0x200011f8
 800a6d0:	20000d20 	.word	0x20000d20
 800a6d4:	200011b0 	.word	0x200011b0
 800a6d8:	20000d1c 	.word	0x20000d1c
 800a6dc:	20001204 	.word	0x20001204

0800a6e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a6e8:	4b06      	ldr	r3, [pc, #24]	; (800a704 <vTaskInternalSetTimeOutState+0x24>)
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a6f0:	4b05      	ldr	r3, [pc, #20]	; (800a708 <vTaskInternalSetTimeOutState+0x28>)
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	605a      	str	r2, [r3, #4]
}
 800a6f8:	bf00      	nop
 800a6fa:	370c      	adds	r7, #12
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr
 800a704:	20001208 	.word	0x20001208
 800a708:	200011f4 	.word	0x200011f4

0800a70c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b088      	sub	sp, #32
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d10a      	bne.n	800a732 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a720:	f383 8811 	msr	BASEPRI, r3
 800a724:	f3bf 8f6f 	isb	sy
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	613b      	str	r3, [r7, #16]
}
 800a72e:	bf00      	nop
 800a730:	e7fe      	b.n	800a730 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d10a      	bne.n	800a74e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73c:	f383 8811 	msr	BASEPRI, r3
 800a740:	f3bf 8f6f 	isb	sy
 800a744:	f3bf 8f4f 	dsb	sy
 800a748:	60fb      	str	r3, [r7, #12]
}
 800a74a:	bf00      	nop
 800a74c:	e7fe      	b.n	800a74c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a74e:	f000 fe79 	bl	800b444 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a752:	4b1d      	ldr	r3, [pc, #116]	; (800a7c8 <xTaskCheckForTimeOut+0xbc>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	69ba      	ldr	r2, [r7, #24]
 800a75e:	1ad3      	subs	r3, r2, r3
 800a760:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76a:	d102      	bne.n	800a772 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a76c:	2300      	movs	r3, #0
 800a76e:	61fb      	str	r3, [r7, #28]
 800a770:	e023      	b.n	800a7ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	4b15      	ldr	r3, [pc, #84]	; (800a7cc <xTaskCheckForTimeOut+0xc0>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d007      	beq.n	800a78e <xTaskCheckForTimeOut+0x82>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	69ba      	ldr	r2, [r7, #24]
 800a784:	429a      	cmp	r2, r3
 800a786:	d302      	bcc.n	800a78e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a788:	2301      	movs	r3, #1
 800a78a:	61fb      	str	r3, [r7, #28]
 800a78c:	e015      	b.n	800a7ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	697a      	ldr	r2, [r7, #20]
 800a794:	429a      	cmp	r2, r3
 800a796:	d20b      	bcs.n	800a7b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	1ad2      	subs	r2, r2, r3
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f7ff ff9b 	bl	800a6e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	61fb      	str	r3, [r7, #28]
 800a7ae:	e004      	b.n	800a7ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a7ba:	f000 fe73 	bl	800b4a4 <vPortExitCritical>

	return xReturn;
 800a7be:	69fb      	ldr	r3, [r7, #28]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3720      	adds	r7, #32
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	200011f4 	.word	0x200011f4
 800a7cc:	20001208 	.word	0x20001208

0800a7d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a7d4:	4b03      	ldr	r3, [pc, #12]	; (800a7e4 <vTaskMissedYield+0x14>)
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	601a      	str	r2, [r3, #0]
}
 800a7da:	bf00      	nop
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr
 800a7e4:	20001204 	.word	0x20001204

0800a7e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a7f0:	f000 f852 	bl	800a898 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a7f4:	4b06      	ldr	r3, [pc, #24]	; (800a810 <prvIdleTask+0x28>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d9f9      	bls.n	800a7f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a7fc:	4b05      	ldr	r3, [pc, #20]	; (800a814 <prvIdleTask+0x2c>)
 800a7fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a802:	601a      	str	r2, [r3, #0]
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a80c:	e7f0      	b.n	800a7f0 <prvIdleTask+0x8>
 800a80e:	bf00      	nop
 800a810:	20000d20 	.word	0x20000d20
 800a814:	e000ed04 	.word	0xe000ed04

0800a818 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a81e:	2300      	movs	r3, #0
 800a820:	607b      	str	r3, [r7, #4]
 800a822:	e00c      	b.n	800a83e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	4613      	mov	r3, r2
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	4413      	add	r3, r2
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	4a12      	ldr	r2, [pc, #72]	; (800a878 <prvInitialiseTaskLists+0x60>)
 800a830:	4413      	add	r3, r2
 800a832:	4618      	mov	r0, r3
 800a834:	f7fe fcf0 	bl	8009218 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	3301      	adds	r3, #1
 800a83c:	607b      	str	r3, [r7, #4]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2b37      	cmp	r3, #55	; 0x37
 800a842:	d9ef      	bls.n	800a824 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a844:	480d      	ldr	r0, [pc, #52]	; (800a87c <prvInitialiseTaskLists+0x64>)
 800a846:	f7fe fce7 	bl	8009218 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a84a:	480d      	ldr	r0, [pc, #52]	; (800a880 <prvInitialiseTaskLists+0x68>)
 800a84c:	f7fe fce4 	bl	8009218 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a850:	480c      	ldr	r0, [pc, #48]	; (800a884 <prvInitialiseTaskLists+0x6c>)
 800a852:	f7fe fce1 	bl	8009218 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a856:	480c      	ldr	r0, [pc, #48]	; (800a888 <prvInitialiseTaskLists+0x70>)
 800a858:	f7fe fcde 	bl	8009218 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a85c:	480b      	ldr	r0, [pc, #44]	; (800a88c <prvInitialiseTaskLists+0x74>)
 800a85e:	f7fe fcdb 	bl	8009218 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a862:	4b0b      	ldr	r3, [pc, #44]	; (800a890 <prvInitialiseTaskLists+0x78>)
 800a864:	4a05      	ldr	r2, [pc, #20]	; (800a87c <prvInitialiseTaskLists+0x64>)
 800a866:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a868:	4b0a      	ldr	r3, [pc, #40]	; (800a894 <prvInitialiseTaskLists+0x7c>)
 800a86a:	4a05      	ldr	r2, [pc, #20]	; (800a880 <prvInitialiseTaskLists+0x68>)
 800a86c:	601a      	str	r2, [r3, #0]
}
 800a86e:	bf00      	nop
 800a870:	3708      	adds	r7, #8
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	20000d20 	.word	0x20000d20
 800a87c:	20001180 	.word	0x20001180
 800a880:	20001194 	.word	0x20001194
 800a884:	200011b0 	.word	0x200011b0
 800a888:	200011c4 	.word	0x200011c4
 800a88c:	200011dc 	.word	0x200011dc
 800a890:	200011a8 	.word	0x200011a8
 800a894:	200011ac 	.word	0x200011ac

0800a898 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a89e:	e019      	b.n	800a8d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a8a0:	f000 fdd0 	bl	800b444 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8a4:	4b10      	ldr	r3, [pc, #64]	; (800a8e8 <prvCheckTasksWaitingTermination+0x50>)
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	3304      	adds	r3, #4
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7fe fd3b 	bl	800932c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a8b6:	4b0d      	ldr	r3, [pc, #52]	; (800a8ec <prvCheckTasksWaitingTermination+0x54>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	4a0b      	ldr	r2, [pc, #44]	; (800a8ec <prvCheckTasksWaitingTermination+0x54>)
 800a8be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a8c0:	4b0b      	ldr	r3, [pc, #44]	; (800a8f0 <prvCheckTasksWaitingTermination+0x58>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	3b01      	subs	r3, #1
 800a8c6:	4a0a      	ldr	r2, [pc, #40]	; (800a8f0 <prvCheckTasksWaitingTermination+0x58>)
 800a8c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a8ca:	f000 fdeb 	bl	800b4a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 f810 	bl	800a8f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a8d4:	4b06      	ldr	r3, [pc, #24]	; (800a8f0 <prvCheckTasksWaitingTermination+0x58>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d1e1      	bne.n	800a8a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a8dc:	bf00      	nop
 800a8de:	bf00      	nop
 800a8e0:	3708      	adds	r7, #8
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	200011c4 	.word	0x200011c4
 800a8ec:	200011f0 	.word	0x200011f0
 800a8f0:	200011d8 	.word	0x200011d8

0800a8f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a902:	2b00      	cmp	r3, #0
 800a904:	d108      	bne.n	800a918 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a90a:	4618      	mov	r0, r3
 800a90c:	f000 ff88 	bl	800b820 <vPortFree>
				vPortFree( pxTCB );
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 ff85 	bl	800b820 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a916:	e018      	b.n	800a94a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d103      	bne.n	800a92a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 ff7c 	bl	800b820 <vPortFree>
	}
 800a928:	e00f      	b.n	800a94a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a930:	2b02      	cmp	r3, #2
 800a932:	d00a      	beq.n	800a94a <prvDeleteTCB+0x56>
	__asm volatile
 800a934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a938:	f383 8811 	msr	BASEPRI, r3
 800a93c:	f3bf 8f6f 	isb	sy
 800a940:	f3bf 8f4f 	dsb	sy
 800a944:	60fb      	str	r3, [r7, #12]
}
 800a946:	bf00      	nop
 800a948:	e7fe      	b.n	800a948 <prvDeleteTCB+0x54>
	}
 800a94a:	bf00      	nop
 800a94c:	3710      	adds	r7, #16
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
	...

0800a954 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a95a:	4b0c      	ldr	r3, [pc, #48]	; (800a98c <prvResetNextTaskUnblockTime+0x38>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d104      	bne.n	800a96e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a964:	4b0a      	ldr	r3, [pc, #40]	; (800a990 <prvResetNextTaskUnblockTime+0x3c>)
 800a966:	f04f 32ff 	mov.w	r2, #4294967295
 800a96a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a96c:	e008      	b.n	800a980 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a96e:	4b07      	ldr	r3, [pc, #28]	; (800a98c <prvResetNextTaskUnblockTime+0x38>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	68db      	ldr	r3, [r3, #12]
 800a976:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	4a04      	ldr	r2, [pc, #16]	; (800a990 <prvResetNextTaskUnblockTime+0x3c>)
 800a97e:	6013      	str	r3, [r2, #0]
}
 800a980:	bf00      	nop
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr
 800a98c:	200011a8 	.word	0x200011a8
 800a990:	20001210 	.word	0x20001210

0800a994 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a99a:	4b0b      	ldr	r3, [pc, #44]	; (800a9c8 <xTaskGetSchedulerState+0x34>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d102      	bne.n	800a9a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	607b      	str	r3, [r7, #4]
 800a9a6:	e008      	b.n	800a9ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9a8:	4b08      	ldr	r3, [pc, #32]	; (800a9cc <xTaskGetSchedulerState+0x38>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d102      	bne.n	800a9b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a9b0:	2302      	movs	r3, #2
 800a9b2:	607b      	str	r3, [r7, #4]
 800a9b4:	e001      	b.n	800a9ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a9ba:	687b      	ldr	r3, [r7, #4]
	}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr
 800a9c8:	200011fc 	.word	0x200011fc
 800a9cc:	20001218 	.word	0x20001218

0800a9d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b086      	sub	sp, #24
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d056      	beq.n	800aa94 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a9e6:	4b2e      	ldr	r3, [pc, #184]	; (800aaa0 <xTaskPriorityDisinherit+0xd0>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	693a      	ldr	r2, [r7, #16]
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d00a      	beq.n	800aa06 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f4:	f383 8811 	msr	BASEPRI, r3
 800a9f8:	f3bf 8f6f 	isb	sy
 800a9fc:	f3bf 8f4f 	dsb	sy
 800aa00:	60fb      	str	r3, [r7, #12]
}
 800aa02:	bf00      	nop
 800aa04:	e7fe      	b.n	800aa04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d10a      	bne.n	800aa24 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800aa0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa12:	f383 8811 	msr	BASEPRI, r3
 800aa16:	f3bf 8f6f 	isb	sy
 800aa1a:	f3bf 8f4f 	dsb	sy
 800aa1e:	60bb      	str	r3, [r7, #8]
}
 800aa20:	bf00      	nop
 800aa22:	e7fe      	b.n	800aa22 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa28:	1e5a      	subs	r2, r3, #1
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d02c      	beq.n	800aa94 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d128      	bne.n	800aa94 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	3304      	adds	r3, #4
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7fe fc70 	bl	800932c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa64:	4b0f      	ldr	r3, [pc, #60]	; (800aaa4 <xTaskPriorityDisinherit+0xd4>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d903      	bls.n	800aa74 <xTaskPriorityDisinherit+0xa4>
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa70:	4a0c      	ldr	r2, [pc, #48]	; (800aaa4 <xTaskPriorityDisinherit+0xd4>)
 800aa72:	6013      	str	r3, [r2, #0]
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa78:	4613      	mov	r3, r2
 800aa7a:	009b      	lsls	r3, r3, #2
 800aa7c:	4413      	add	r3, r2
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	4a09      	ldr	r2, [pc, #36]	; (800aaa8 <xTaskPriorityDisinherit+0xd8>)
 800aa82:	441a      	add	r2, r3
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	3304      	adds	r3, #4
 800aa88:	4619      	mov	r1, r3
 800aa8a:	4610      	mov	r0, r2
 800aa8c:	f7fe fbf1 	bl	8009272 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aa90:	2301      	movs	r3, #1
 800aa92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa94:	697b      	ldr	r3, [r7, #20]
	}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3718      	adds	r7, #24
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	20000d1c 	.word	0x20000d1c
 800aaa4:	200011f8 	.word	0x200011f8
 800aaa8:	20000d20 	.word	0x20000d20

0800aaac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aab6:	4b21      	ldr	r3, [pc, #132]	; (800ab3c <prvAddCurrentTaskToDelayedList+0x90>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aabc:	4b20      	ldr	r3, [pc, #128]	; (800ab40 <prvAddCurrentTaskToDelayedList+0x94>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	3304      	adds	r3, #4
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fe fc32 	bl	800932c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aace:	d10a      	bne.n	800aae6 <prvAddCurrentTaskToDelayedList+0x3a>
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d007      	beq.n	800aae6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aad6:	4b1a      	ldr	r3, [pc, #104]	; (800ab40 <prvAddCurrentTaskToDelayedList+0x94>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	3304      	adds	r3, #4
 800aadc:	4619      	mov	r1, r3
 800aade:	4819      	ldr	r0, [pc, #100]	; (800ab44 <prvAddCurrentTaskToDelayedList+0x98>)
 800aae0:	f7fe fbc7 	bl	8009272 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aae4:	e026      	b.n	800ab34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aae6:	68fa      	ldr	r2, [r7, #12]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	4413      	add	r3, r2
 800aaec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aaee:	4b14      	ldr	r3, [pc, #80]	; (800ab40 <prvAddCurrentTaskToDelayedList+0x94>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	68ba      	ldr	r2, [r7, #8]
 800aaf4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aaf6:	68ba      	ldr	r2, [r7, #8]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d209      	bcs.n	800ab12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aafe:	4b12      	ldr	r3, [pc, #72]	; (800ab48 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	4b0f      	ldr	r3, [pc, #60]	; (800ab40 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	3304      	adds	r3, #4
 800ab08:	4619      	mov	r1, r3
 800ab0a:	4610      	mov	r0, r2
 800ab0c:	f7fe fbd5 	bl	80092ba <vListInsert>
}
 800ab10:	e010      	b.n	800ab34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab12:	4b0e      	ldr	r3, [pc, #56]	; (800ab4c <prvAddCurrentTaskToDelayedList+0xa0>)
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	4b0a      	ldr	r3, [pc, #40]	; (800ab40 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	3304      	adds	r3, #4
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	4610      	mov	r0, r2
 800ab20:	f7fe fbcb 	bl	80092ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ab24:	4b0a      	ldr	r3, [pc, #40]	; (800ab50 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68ba      	ldr	r2, [r7, #8]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d202      	bcs.n	800ab34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ab2e:	4a08      	ldr	r2, [pc, #32]	; (800ab50 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	6013      	str	r3, [r2, #0]
}
 800ab34:	bf00      	nop
 800ab36:	3710      	adds	r7, #16
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	200011f4 	.word	0x200011f4
 800ab40:	20000d1c 	.word	0x20000d1c
 800ab44:	200011dc 	.word	0x200011dc
 800ab48:	200011ac 	.word	0x200011ac
 800ab4c:	200011a8 	.word	0x200011a8
 800ab50:	20001210 	.word	0x20001210

0800ab54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b08a      	sub	sp, #40	; 0x28
 800ab58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ab5e:	f000 fb07 	bl	800b170 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ab62:	4b1c      	ldr	r3, [pc, #112]	; (800abd4 <xTimerCreateTimerTask+0x80>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d021      	beq.n	800abae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ab72:	1d3a      	adds	r2, r7, #4
 800ab74:	f107 0108 	add.w	r1, r7, #8
 800ab78:	f107 030c 	add.w	r3, r7, #12
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f7fe fb31 	bl	80091e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ab82:	6879      	ldr	r1, [r7, #4]
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	9202      	str	r2, [sp, #8]
 800ab8a:	9301      	str	r3, [sp, #4]
 800ab8c:	2302      	movs	r3, #2
 800ab8e:	9300      	str	r3, [sp, #0]
 800ab90:	2300      	movs	r3, #0
 800ab92:	460a      	mov	r2, r1
 800ab94:	4910      	ldr	r1, [pc, #64]	; (800abd8 <xTimerCreateTimerTask+0x84>)
 800ab96:	4811      	ldr	r0, [pc, #68]	; (800abdc <xTimerCreateTimerTask+0x88>)
 800ab98:	f7ff f8de 	bl	8009d58 <xTaskCreateStatic>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	4a10      	ldr	r2, [pc, #64]	; (800abe0 <xTimerCreateTimerTask+0x8c>)
 800aba0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aba2:	4b0f      	ldr	r3, [pc, #60]	; (800abe0 <xTimerCreateTimerTask+0x8c>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d001      	beq.n	800abae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800abaa:	2301      	movs	r3, #1
 800abac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d10a      	bne.n	800abca <xTimerCreateTimerTask+0x76>
	__asm volatile
 800abb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	613b      	str	r3, [r7, #16]
}
 800abc6:	bf00      	nop
 800abc8:	e7fe      	b.n	800abc8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800abca:	697b      	ldr	r3, [r7, #20]
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3718      	adds	r7, #24
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}
 800abd4:	2000124c 	.word	0x2000124c
 800abd8:	08012778 	.word	0x08012778
 800abdc:	0800ad19 	.word	0x0800ad19
 800abe0:	20001250 	.word	0x20001250

0800abe4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b08a      	sub	sp, #40	; 0x28
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	607a      	str	r2, [r7, #4]
 800abf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800abf2:	2300      	movs	r3, #0
 800abf4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d10a      	bne.n	800ac12 <xTimerGenericCommand+0x2e>
	__asm volatile
 800abfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac00:	f383 8811 	msr	BASEPRI, r3
 800ac04:	f3bf 8f6f 	isb	sy
 800ac08:	f3bf 8f4f 	dsb	sy
 800ac0c:	623b      	str	r3, [r7, #32]
}
 800ac0e:	bf00      	nop
 800ac10:	e7fe      	b.n	800ac10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ac12:	4b1a      	ldr	r3, [pc, #104]	; (800ac7c <xTimerGenericCommand+0x98>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d02a      	beq.n	800ac70 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	2b05      	cmp	r3, #5
 800ac2a:	dc18      	bgt.n	800ac5e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ac2c:	f7ff feb2 	bl	800a994 <xTaskGetSchedulerState>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b02      	cmp	r3, #2
 800ac34:	d109      	bne.n	800ac4a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ac36:	4b11      	ldr	r3, [pc, #68]	; (800ac7c <xTimerGenericCommand+0x98>)
 800ac38:	6818      	ldr	r0, [r3, #0]
 800ac3a:	f107 0110 	add.w	r1, r7, #16
 800ac3e:	2300      	movs	r3, #0
 800ac40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac42:	f7fe fca1 	bl	8009588 <xQueueGenericSend>
 800ac46:	6278      	str	r0, [r7, #36]	; 0x24
 800ac48:	e012      	b.n	800ac70 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ac4a:	4b0c      	ldr	r3, [pc, #48]	; (800ac7c <xTimerGenericCommand+0x98>)
 800ac4c:	6818      	ldr	r0, [r3, #0]
 800ac4e:	f107 0110 	add.w	r1, r7, #16
 800ac52:	2300      	movs	r3, #0
 800ac54:	2200      	movs	r2, #0
 800ac56:	f7fe fc97 	bl	8009588 <xQueueGenericSend>
 800ac5a:	6278      	str	r0, [r7, #36]	; 0x24
 800ac5c:	e008      	b.n	800ac70 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ac5e:	4b07      	ldr	r3, [pc, #28]	; (800ac7c <xTimerGenericCommand+0x98>)
 800ac60:	6818      	ldr	r0, [r3, #0]
 800ac62:	f107 0110 	add.w	r1, r7, #16
 800ac66:	2300      	movs	r3, #0
 800ac68:	683a      	ldr	r2, [r7, #0]
 800ac6a:	f7fe fd8b 	bl	8009784 <xQueueGenericSendFromISR>
 800ac6e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ac70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3728      	adds	r7, #40	; 0x28
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	2000124c 	.word	0x2000124c

0800ac80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b088      	sub	sp, #32
 800ac84:	af02      	add	r7, sp, #8
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac8a:	4b22      	ldr	r3, [pc, #136]	; (800ad14 <prvProcessExpiredTimer+0x94>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	3304      	adds	r3, #4
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7fe fb47 	bl	800932c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aca4:	f003 0304 	and.w	r3, r3, #4
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d022      	beq.n	800acf2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	699a      	ldr	r2, [r3, #24]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	18d1      	adds	r1, r2, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	683a      	ldr	r2, [r7, #0]
 800acb8:	6978      	ldr	r0, [r7, #20]
 800acba:	f000 f8d1 	bl	800ae60 <prvInsertTimerInActiveList>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d01f      	beq.n	800ad04 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800acc4:	2300      	movs	r3, #0
 800acc6:	9300      	str	r3, [sp, #0]
 800acc8:	2300      	movs	r3, #0
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	2100      	movs	r1, #0
 800acce:	6978      	ldr	r0, [r7, #20]
 800acd0:	f7ff ff88 	bl	800abe4 <xTimerGenericCommand>
 800acd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d113      	bne.n	800ad04 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800acdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace0:	f383 8811 	msr	BASEPRI, r3
 800ace4:	f3bf 8f6f 	isb	sy
 800ace8:	f3bf 8f4f 	dsb	sy
 800acec:	60fb      	str	r3, [r7, #12]
}
 800acee:	bf00      	nop
 800acf0:	e7fe      	b.n	800acf0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acf8:	f023 0301 	bic.w	r3, r3, #1
 800acfc:	b2da      	uxtb	r2, r3
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	6a1b      	ldr	r3, [r3, #32]
 800ad08:	6978      	ldr	r0, [r7, #20]
 800ad0a:	4798      	blx	r3
}
 800ad0c:	bf00      	nop
 800ad0e:	3718      	adds	r7, #24
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	20001244 	.word	0x20001244

0800ad18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad20:	f107 0308 	add.w	r3, r7, #8
 800ad24:	4618      	mov	r0, r3
 800ad26:	f000 f857 	bl	800add8 <prvGetNextExpireTime>
 800ad2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	4619      	mov	r1, r3
 800ad30:	68f8      	ldr	r0, [r7, #12]
 800ad32:	f000 f803 	bl	800ad3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ad36:	f000 f8d5 	bl	800aee4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad3a:	e7f1      	b.n	800ad20 <prvTimerTask+0x8>

0800ad3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ad46:	f7ff fa43 	bl	800a1d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad4a:	f107 0308 	add.w	r3, r7, #8
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f000 f866 	bl	800ae20 <prvSampleTimeNow>
 800ad54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d130      	bne.n	800adbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d10a      	bne.n	800ad78 <prvProcessTimerOrBlockTask+0x3c>
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d806      	bhi.n	800ad78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ad6a:	f7ff fa3f 	bl	800a1ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ad6e:	68f9      	ldr	r1, [r7, #12]
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f7ff ff85 	bl	800ac80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ad76:	e024      	b.n	800adc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d008      	beq.n	800ad90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ad7e:	4b13      	ldr	r3, [pc, #76]	; (800adcc <prvProcessTimerOrBlockTask+0x90>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d101      	bne.n	800ad8c <prvProcessTimerOrBlockTask+0x50>
 800ad88:	2301      	movs	r3, #1
 800ad8a:	e000      	b.n	800ad8e <prvProcessTimerOrBlockTask+0x52>
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ad90:	4b0f      	ldr	r3, [pc, #60]	; (800add0 <prvProcessTimerOrBlockTask+0x94>)
 800ad92:	6818      	ldr	r0, [r3, #0]
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	1ad3      	subs	r3, r2, r3
 800ad9a:	683a      	ldr	r2, [r7, #0]
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	f7fe ffa7 	bl	8009cf0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ada2:	f7ff fa23 	bl	800a1ec <xTaskResumeAll>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d10a      	bne.n	800adc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800adac:	4b09      	ldr	r3, [pc, #36]	; (800add4 <prvProcessTimerOrBlockTask+0x98>)
 800adae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adb2:	601a      	str	r2, [r3, #0]
 800adb4:	f3bf 8f4f 	dsb	sy
 800adb8:	f3bf 8f6f 	isb	sy
}
 800adbc:	e001      	b.n	800adc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800adbe:	f7ff fa15 	bl	800a1ec <xTaskResumeAll>
}
 800adc2:	bf00      	nop
 800adc4:	3710      	adds	r7, #16
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	20001248 	.word	0x20001248
 800add0:	2000124c 	.word	0x2000124c
 800add4:	e000ed04 	.word	0xe000ed04

0800add8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800add8:	b480      	push	{r7}
 800adda:	b085      	sub	sp, #20
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ade0:	4b0e      	ldr	r3, [pc, #56]	; (800ae1c <prvGetNextExpireTime+0x44>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d101      	bne.n	800adee <prvGetNextExpireTime+0x16>
 800adea:	2201      	movs	r2, #1
 800adec:	e000      	b.n	800adf0 <prvGetNextExpireTime+0x18>
 800adee:	2200      	movs	r2, #0
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d105      	bne.n	800ae08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800adfc:	4b07      	ldr	r3, [pc, #28]	; (800ae1c <prvGetNextExpireTime+0x44>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	60fb      	str	r3, [r7, #12]
 800ae06:	e001      	b.n	800ae0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3714      	adds	r7, #20
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop
 800ae1c:	20001244 	.word	0x20001244

0800ae20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ae28:	f7ff fa7e 	bl	800a328 <xTaskGetTickCount>
 800ae2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ae2e:	4b0b      	ldr	r3, [pc, #44]	; (800ae5c <prvSampleTimeNow+0x3c>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	68fa      	ldr	r2, [r7, #12]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d205      	bcs.n	800ae44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ae38:	f000 f936 	bl	800b0a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2201      	movs	r2, #1
 800ae40:	601a      	str	r2, [r3, #0]
 800ae42:	e002      	b.n	800ae4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2200      	movs	r2, #0
 800ae48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ae4a:	4a04      	ldr	r2, [pc, #16]	; (800ae5c <prvSampleTimeNow+0x3c>)
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ae50:	68fb      	ldr	r3, [r7, #12]
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3710      	adds	r7, #16
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	20001254 	.word	0x20001254

0800ae60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b086      	sub	sp, #24
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	607a      	str	r2, [r7, #4]
 800ae6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	68ba      	ldr	r2, [r7, #8]
 800ae76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	68fa      	ldr	r2, [r7, #12]
 800ae7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ae7e:	68ba      	ldr	r2, [r7, #8]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d812      	bhi.n	800aeac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	1ad2      	subs	r2, r2, r3
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	699b      	ldr	r3, [r3, #24]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d302      	bcc.n	800ae9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ae94:	2301      	movs	r3, #1
 800ae96:	617b      	str	r3, [r7, #20]
 800ae98:	e01b      	b.n	800aed2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ae9a:	4b10      	ldr	r3, [pc, #64]	; (800aedc <prvInsertTimerInActiveList+0x7c>)
 800ae9c:	681a      	ldr	r2, [r3, #0]
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	3304      	adds	r3, #4
 800aea2:	4619      	mov	r1, r3
 800aea4:	4610      	mov	r0, r2
 800aea6:	f7fe fa08 	bl	80092ba <vListInsert>
 800aeaa:	e012      	b.n	800aed2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d206      	bcs.n	800aec2 <prvInsertTimerInActiveList+0x62>
 800aeb4:	68ba      	ldr	r2, [r7, #8]
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d302      	bcc.n	800aec2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aebc:	2301      	movs	r3, #1
 800aebe:	617b      	str	r3, [r7, #20]
 800aec0:	e007      	b.n	800aed2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aec2:	4b07      	ldr	r3, [pc, #28]	; (800aee0 <prvInsertTimerInActiveList+0x80>)
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	3304      	adds	r3, #4
 800aeca:	4619      	mov	r1, r3
 800aecc:	4610      	mov	r0, r2
 800aece:	f7fe f9f4 	bl	80092ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aed2:	697b      	ldr	r3, [r7, #20]
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3718      	adds	r7, #24
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	20001248 	.word	0x20001248
 800aee0:	20001244 	.word	0x20001244

0800aee4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b08e      	sub	sp, #56	; 0x38
 800aee8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aeea:	e0ca      	b.n	800b082 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	da18      	bge.n	800af24 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aef2:	1d3b      	adds	r3, r7, #4
 800aef4:	3304      	adds	r3, #4
 800aef6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d10a      	bne.n	800af14 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800aefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af02:	f383 8811 	msr	BASEPRI, r3
 800af06:	f3bf 8f6f 	isb	sy
 800af0a:	f3bf 8f4f 	dsb	sy
 800af0e:	61fb      	str	r3, [r7, #28]
}
 800af10:	bf00      	nop
 800af12:	e7fe      	b.n	800af12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800af14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af1a:	6850      	ldr	r0, [r2, #4]
 800af1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af1e:	6892      	ldr	r2, [r2, #8]
 800af20:	4611      	mov	r1, r2
 800af22:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2b00      	cmp	r3, #0
 800af28:	f2c0 80aa 	blt.w	800b080 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800af30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af32:	695b      	ldr	r3, [r3, #20]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d004      	beq.n	800af42 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3a:	3304      	adds	r3, #4
 800af3c:	4618      	mov	r0, r3
 800af3e:	f7fe f9f5 	bl	800932c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af42:	463b      	mov	r3, r7
 800af44:	4618      	mov	r0, r3
 800af46:	f7ff ff6b 	bl	800ae20 <prvSampleTimeNow>
 800af4a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2b09      	cmp	r3, #9
 800af50:	f200 8097 	bhi.w	800b082 <prvProcessReceivedCommands+0x19e>
 800af54:	a201      	add	r2, pc, #4	; (adr r2, 800af5c <prvProcessReceivedCommands+0x78>)
 800af56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af5a:	bf00      	nop
 800af5c:	0800af85 	.word	0x0800af85
 800af60:	0800af85 	.word	0x0800af85
 800af64:	0800af85 	.word	0x0800af85
 800af68:	0800aff9 	.word	0x0800aff9
 800af6c:	0800b00d 	.word	0x0800b00d
 800af70:	0800b057 	.word	0x0800b057
 800af74:	0800af85 	.word	0x0800af85
 800af78:	0800af85 	.word	0x0800af85
 800af7c:	0800aff9 	.word	0x0800aff9
 800af80:	0800b00d 	.word	0x0800b00d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af8a:	f043 0301 	orr.w	r3, r3, #1
 800af8e:	b2da      	uxtb	r2, r3
 800af90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800af96:	68ba      	ldr	r2, [r7, #8]
 800af98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9a:	699b      	ldr	r3, [r3, #24]
 800af9c:	18d1      	adds	r1, r2, r3
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afa4:	f7ff ff5c 	bl	800ae60 <prvInsertTimerInActiveList>
 800afa8:	4603      	mov	r3, r0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d069      	beq.n	800b082 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb0:	6a1b      	ldr	r3, [r3, #32]
 800afb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800afb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afbc:	f003 0304 	and.w	r3, r3, #4
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d05e      	beq.n	800b082 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800afc4:	68ba      	ldr	r2, [r7, #8]
 800afc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc8:	699b      	ldr	r3, [r3, #24]
 800afca:	441a      	add	r2, r3
 800afcc:	2300      	movs	r3, #0
 800afce:	9300      	str	r3, [sp, #0]
 800afd0:	2300      	movs	r3, #0
 800afd2:	2100      	movs	r1, #0
 800afd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afd6:	f7ff fe05 	bl	800abe4 <xTimerGenericCommand>
 800afda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800afdc:	6a3b      	ldr	r3, [r7, #32]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d14f      	bne.n	800b082 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800afe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe6:	f383 8811 	msr	BASEPRI, r3
 800afea:	f3bf 8f6f 	isb	sy
 800afee:	f3bf 8f4f 	dsb	sy
 800aff2:	61bb      	str	r3, [r7, #24]
}
 800aff4:	bf00      	nop
 800aff6:	e7fe      	b.n	800aff6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800affe:	f023 0301 	bic.w	r3, r3, #1
 800b002:	b2da      	uxtb	r2, r3
 800b004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b006:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b00a:	e03a      	b.n	800b082 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b012:	f043 0301 	orr.w	r3, r3, #1
 800b016:	b2da      	uxtb	r2, r3
 800b018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b01e:	68ba      	ldr	r2, [r7, #8]
 800b020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b022:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b026:	699b      	ldr	r3, [r3, #24]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d10a      	bne.n	800b042 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b030:	f383 8811 	msr	BASEPRI, r3
 800b034:	f3bf 8f6f 	isb	sy
 800b038:	f3bf 8f4f 	dsb	sy
 800b03c:	617b      	str	r3, [r7, #20]
}
 800b03e:	bf00      	nop
 800b040:	e7fe      	b.n	800b040 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b044:	699a      	ldr	r2, [r3, #24]
 800b046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b048:	18d1      	adds	r1, r2, r3
 800b04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b04e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b050:	f7ff ff06 	bl	800ae60 <prvInsertTimerInActiveList>
					break;
 800b054:	e015      	b.n	800b082 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b05c:	f003 0302 	and.w	r3, r3, #2
 800b060:	2b00      	cmp	r3, #0
 800b062:	d103      	bne.n	800b06c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b066:	f000 fbdb 	bl	800b820 <vPortFree>
 800b06a:	e00a      	b.n	800b082 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b072:	f023 0301 	bic.w	r3, r3, #1
 800b076:	b2da      	uxtb	r2, r3
 800b078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b07a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b07e:	e000      	b.n	800b082 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b080:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b082:	4b08      	ldr	r3, [pc, #32]	; (800b0a4 <prvProcessReceivedCommands+0x1c0>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	1d39      	adds	r1, r7, #4
 800b088:	2200      	movs	r2, #0
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7fe fc16 	bl	80098bc <xQueueReceive>
 800b090:	4603      	mov	r3, r0
 800b092:	2b00      	cmp	r3, #0
 800b094:	f47f af2a 	bne.w	800aeec <prvProcessReceivedCommands+0x8>
	}
}
 800b098:	bf00      	nop
 800b09a:	bf00      	nop
 800b09c:	3730      	adds	r7, #48	; 0x30
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}
 800b0a2:	bf00      	nop
 800b0a4:	2000124c 	.word	0x2000124c

0800b0a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b088      	sub	sp, #32
 800b0ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b0ae:	e048      	b.n	800b142 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0b0:	4b2d      	ldr	r3, [pc, #180]	; (800b168 <prvSwitchTimerLists+0xc0>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	68db      	ldr	r3, [r3, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0ba:	4b2b      	ldr	r3, [pc, #172]	; (800b168 <prvSwitchTimerLists+0xc0>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	68db      	ldr	r3, [r3, #12]
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	3304      	adds	r3, #4
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7fe f92f 	bl	800932c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	6a1b      	ldr	r3, [r3, #32]
 800b0d2:	68f8      	ldr	r0, [r7, #12]
 800b0d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0dc:	f003 0304 	and.w	r3, r3, #4
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d02e      	beq.n	800b142 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	699b      	ldr	r3, [r3, #24]
 800b0e8:	693a      	ldr	r2, [r7, #16]
 800b0ea:	4413      	add	r3, r2
 800b0ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b0ee:	68ba      	ldr	r2, [r7, #8]
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d90e      	bls.n	800b114 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	68ba      	ldr	r2, [r7, #8]
 800b0fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	68fa      	ldr	r2, [r7, #12]
 800b100:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b102:	4b19      	ldr	r3, [pc, #100]	; (800b168 <prvSwitchTimerLists+0xc0>)
 800b104:	681a      	ldr	r2, [r3, #0]
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	3304      	adds	r3, #4
 800b10a:	4619      	mov	r1, r3
 800b10c:	4610      	mov	r0, r2
 800b10e:	f7fe f8d4 	bl	80092ba <vListInsert>
 800b112:	e016      	b.n	800b142 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b114:	2300      	movs	r3, #0
 800b116:	9300      	str	r3, [sp, #0]
 800b118:	2300      	movs	r3, #0
 800b11a:	693a      	ldr	r2, [r7, #16]
 800b11c:	2100      	movs	r1, #0
 800b11e:	68f8      	ldr	r0, [r7, #12]
 800b120:	f7ff fd60 	bl	800abe4 <xTimerGenericCommand>
 800b124:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d10a      	bne.n	800b142 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b130:	f383 8811 	msr	BASEPRI, r3
 800b134:	f3bf 8f6f 	isb	sy
 800b138:	f3bf 8f4f 	dsb	sy
 800b13c:	603b      	str	r3, [r7, #0]
}
 800b13e:	bf00      	nop
 800b140:	e7fe      	b.n	800b140 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b142:	4b09      	ldr	r3, [pc, #36]	; (800b168 <prvSwitchTimerLists+0xc0>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d1b1      	bne.n	800b0b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b14c:	4b06      	ldr	r3, [pc, #24]	; (800b168 <prvSwitchTimerLists+0xc0>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b152:	4b06      	ldr	r3, [pc, #24]	; (800b16c <prvSwitchTimerLists+0xc4>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a04      	ldr	r2, [pc, #16]	; (800b168 <prvSwitchTimerLists+0xc0>)
 800b158:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b15a:	4a04      	ldr	r2, [pc, #16]	; (800b16c <prvSwitchTimerLists+0xc4>)
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	6013      	str	r3, [r2, #0]
}
 800b160:	bf00      	nop
 800b162:	3718      	adds	r7, #24
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}
 800b168:	20001244 	.word	0x20001244
 800b16c:	20001248 	.word	0x20001248

0800b170 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b176:	f000 f965 	bl	800b444 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b17a:	4b15      	ldr	r3, [pc, #84]	; (800b1d0 <prvCheckForValidListAndQueue+0x60>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d120      	bne.n	800b1c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b182:	4814      	ldr	r0, [pc, #80]	; (800b1d4 <prvCheckForValidListAndQueue+0x64>)
 800b184:	f7fe f848 	bl	8009218 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b188:	4813      	ldr	r0, [pc, #76]	; (800b1d8 <prvCheckForValidListAndQueue+0x68>)
 800b18a:	f7fe f845 	bl	8009218 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b18e:	4b13      	ldr	r3, [pc, #76]	; (800b1dc <prvCheckForValidListAndQueue+0x6c>)
 800b190:	4a10      	ldr	r2, [pc, #64]	; (800b1d4 <prvCheckForValidListAndQueue+0x64>)
 800b192:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b194:	4b12      	ldr	r3, [pc, #72]	; (800b1e0 <prvCheckForValidListAndQueue+0x70>)
 800b196:	4a10      	ldr	r2, [pc, #64]	; (800b1d8 <prvCheckForValidListAndQueue+0x68>)
 800b198:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b19a:	2300      	movs	r3, #0
 800b19c:	9300      	str	r3, [sp, #0]
 800b19e:	4b11      	ldr	r3, [pc, #68]	; (800b1e4 <prvCheckForValidListAndQueue+0x74>)
 800b1a0:	4a11      	ldr	r2, [pc, #68]	; (800b1e8 <prvCheckForValidListAndQueue+0x78>)
 800b1a2:	2110      	movs	r1, #16
 800b1a4:	200a      	movs	r0, #10
 800b1a6:	f7fe f953 	bl	8009450 <xQueueGenericCreateStatic>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	4a08      	ldr	r2, [pc, #32]	; (800b1d0 <prvCheckForValidListAndQueue+0x60>)
 800b1ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b1b0:	4b07      	ldr	r3, [pc, #28]	; (800b1d0 <prvCheckForValidListAndQueue+0x60>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d005      	beq.n	800b1c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b1b8:	4b05      	ldr	r3, [pc, #20]	; (800b1d0 <prvCheckForValidListAndQueue+0x60>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	490b      	ldr	r1, [pc, #44]	; (800b1ec <prvCheckForValidListAndQueue+0x7c>)
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f7fe fd6c 	bl	8009c9c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b1c4:	f000 f96e 	bl	800b4a4 <vPortExitCritical>
}
 800b1c8:	bf00      	nop
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	2000124c 	.word	0x2000124c
 800b1d4:	2000121c 	.word	0x2000121c
 800b1d8:	20001230 	.word	0x20001230
 800b1dc:	20001244 	.word	0x20001244
 800b1e0:	20001248 	.word	0x20001248
 800b1e4:	200012f8 	.word	0x200012f8
 800b1e8:	20001258 	.word	0x20001258
 800b1ec:	08012780 	.word	0x08012780

0800b1f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b085      	sub	sp, #20
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	3b04      	subs	r3, #4
 800b200:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	3b04      	subs	r3, #4
 800b20e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	f023 0201 	bic.w	r2, r3, #1
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	3b04      	subs	r3, #4
 800b21e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b220:	4a0c      	ldr	r2, [pc, #48]	; (800b254 <pxPortInitialiseStack+0x64>)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	3b14      	subs	r3, #20
 800b22a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	3b04      	subs	r3, #4
 800b236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f06f 0202 	mvn.w	r2, #2
 800b23e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	3b20      	subs	r3, #32
 800b244:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b246:	68fb      	ldr	r3, [r7, #12]
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3714      	adds	r7, #20
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr
 800b254:	0800b259 	.word	0x0800b259

0800b258 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b258:	b480      	push	{r7}
 800b25a:	b085      	sub	sp, #20
 800b25c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b25e:	2300      	movs	r3, #0
 800b260:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b262:	4b12      	ldr	r3, [pc, #72]	; (800b2ac <prvTaskExitError+0x54>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b26a:	d00a      	beq.n	800b282 <prvTaskExitError+0x2a>
	__asm volatile
 800b26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b270:	f383 8811 	msr	BASEPRI, r3
 800b274:	f3bf 8f6f 	isb	sy
 800b278:	f3bf 8f4f 	dsb	sy
 800b27c:	60fb      	str	r3, [r7, #12]
}
 800b27e:	bf00      	nop
 800b280:	e7fe      	b.n	800b280 <prvTaskExitError+0x28>
	__asm volatile
 800b282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b286:	f383 8811 	msr	BASEPRI, r3
 800b28a:	f3bf 8f6f 	isb	sy
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	60bb      	str	r3, [r7, #8]
}
 800b294:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b296:	bf00      	nop
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d0fc      	beq.n	800b298 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b29e:	bf00      	nop
 800b2a0:	bf00      	nop
 800b2a2:	3714      	adds	r7, #20
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr
 800b2ac:	200000e8 	.word	0x200000e8

0800b2b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b2b0:	4b07      	ldr	r3, [pc, #28]	; (800b2d0 <pxCurrentTCBConst2>)
 800b2b2:	6819      	ldr	r1, [r3, #0]
 800b2b4:	6808      	ldr	r0, [r1, #0]
 800b2b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ba:	f380 8809 	msr	PSP, r0
 800b2be:	f3bf 8f6f 	isb	sy
 800b2c2:	f04f 0000 	mov.w	r0, #0
 800b2c6:	f380 8811 	msr	BASEPRI, r0
 800b2ca:	4770      	bx	lr
 800b2cc:	f3af 8000 	nop.w

0800b2d0 <pxCurrentTCBConst2>:
 800b2d0:	20000d1c 	.word	0x20000d1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b2d4:	bf00      	nop
 800b2d6:	bf00      	nop

0800b2d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b2d8:	4808      	ldr	r0, [pc, #32]	; (800b2fc <prvPortStartFirstTask+0x24>)
 800b2da:	6800      	ldr	r0, [r0, #0]
 800b2dc:	6800      	ldr	r0, [r0, #0]
 800b2de:	f380 8808 	msr	MSP, r0
 800b2e2:	f04f 0000 	mov.w	r0, #0
 800b2e6:	f380 8814 	msr	CONTROL, r0
 800b2ea:	b662      	cpsie	i
 800b2ec:	b661      	cpsie	f
 800b2ee:	f3bf 8f4f 	dsb	sy
 800b2f2:	f3bf 8f6f 	isb	sy
 800b2f6:	df00      	svc	0
 800b2f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b2fa:	bf00      	nop
 800b2fc:	e000ed08 	.word	0xe000ed08

0800b300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b086      	sub	sp, #24
 800b304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b306:	4b46      	ldr	r3, [pc, #280]	; (800b420 <xPortStartScheduler+0x120>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4a46      	ldr	r2, [pc, #280]	; (800b424 <xPortStartScheduler+0x124>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d10a      	bne.n	800b326 <xPortStartScheduler+0x26>
	__asm volatile
 800b310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b314:	f383 8811 	msr	BASEPRI, r3
 800b318:	f3bf 8f6f 	isb	sy
 800b31c:	f3bf 8f4f 	dsb	sy
 800b320:	613b      	str	r3, [r7, #16]
}
 800b322:	bf00      	nop
 800b324:	e7fe      	b.n	800b324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b326:	4b3e      	ldr	r3, [pc, #248]	; (800b420 <xPortStartScheduler+0x120>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4a3f      	ldr	r2, [pc, #252]	; (800b428 <xPortStartScheduler+0x128>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d10a      	bne.n	800b346 <xPortStartScheduler+0x46>
	__asm volatile
 800b330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b334:	f383 8811 	msr	BASEPRI, r3
 800b338:	f3bf 8f6f 	isb	sy
 800b33c:	f3bf 8f4f 	dsb	sy
 800b340:	60fb      	str	r3, [r7, #12]
}
 800b342:	bf00      	nop
 800b344:	e7fe      	b.n	800b344 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b346:	4b39      	ldr	r3, [pc, #228]	; (800b42c <xPortStartScheduler+0x12c>)
 800b348:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	b2db      	uxtb	r3, r3
 800b350:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	22ff      	movs	r2, #255	; 0xff
 800b356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	b2db      	uxtb	r3, r3
 800b35e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b360:	78fb      	ldrb	r3, [r7, #3]
 800b362:	b2db      	uxtb	r3, r3
 800b364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b368:	b2da      	uxtb	r2, r3
 800b36a:	4b31      	ldr	r3, [pc, #196]	; (800b430 <xPortStartScheduler+0x130>)
 800b36c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b36e:	4b31      	ldr	r3, [pc, #196]	; (800b434 <xPortStartScheduler+0x134>)
 800b370:	2207      	movs	r2, #7
 800b372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b374:	e009      	b.n	800b38a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b376:	4b2f      	ldr	r3, [pc, #188]	; (800b434 <xPortStartScheduler+0x134>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	3b01      	subs	r3, #1
 800b37c:	4a2d      	ldr	r2, [pc, #180]	; (800b434 <xPortStartScheduler+0x134>)
 800b37e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b380:	78fb      	ldrb	r3, [r7, #3]
 800b382:	b2db      	uxtb	r3, r3
 800b384:	005b      	lsls	r3, r3, #1
 800b386:	b2db      	uxtb	r3, r3
 800b388:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b38a:	78fb      	ldrb	r3, [r7, #3]
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b392:	2b80      	cmp	r3, #128	; 0x80
 800b394:	d0ef      	beq.n	800b376 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b396:	4b27      	ldr	r3, [pc, #156]	; (800b434 <xPortStartScheduler+0x134>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f1c3 0307 	rsb	r3, r3, #7
 800b39e:	2b04      	cmp	r3, #4
 800b3a0:	d00a      	beq.n	800b3b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a6:	f383 8811 	msr	BASEPRI, r3
 800b3aa:	f3bf 8f6f 	isb	sy
 800b3ae:	f3bf 8f4f 	dsb	sy
 800b3b2:	60bb      	str	r3, [r7, #8]
}
 800b3b4:	bf00      	nop
 800b3b6:	e7fe      	b.n	800b3b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b3b8:	4b1e      	ldr	r3, [pc, #120]	; (800b434 <xPortStartScheduler+0x134>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	021b      	lsls	r3, r3, #8
 800b3be:	4a1d      	ldr	r2, [pc, #116]	; (800b434 <xPortStartScheduler+0x134>)
 800b3c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b3c2:	4b1c      	ldr	r3, [pc, #112]	; (800b434 <xPortStartScheduler+0x134>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b3ca:	4a1a      	ldr	r2, [pc, #104]	; (800b434 <xPortStartScheduler+0x134>)
 800b3cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	b2da      	uxtb	r2, r3
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b3d6:	4b18      	ldr	r3, [pc, #96]	; (800b438 <xPortStartScheduler+0x138>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a17      	ldr	r2, [pc, #92]	; (800b438 <xPortStartScheduler+0x138>)
 800b3dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b3e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b3e2:	4b15      	ldr	r3, [pc, #84]	; (800b438 <xPortStartScheduler+0x138>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a14      	ldr	r2, [pc, #80]	; (800b438 <xPortStartScheduler+0x138>)
 800b3e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b3ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b3ee:	f000 f8dd 	bl	800b5ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b3f2:	4b12      	ldr	r3, [pc, #72]	; (800b43c <xPortStartScheduler+0x13c>)
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b3f8:	f000 f8fc 	bl	800b5f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b3fc:	4b10      	ldr	r3, [pc, #64]	; (800b440 <xPortStartScheduler+0x140>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a0f      	ldr	r2, [pc, #60]	; (800b440 <xPortStartScheduler+0x140>)
 800b402:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b406:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b408:	f7ff ff66 	bl	800b2d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b40c:	f7ff f856 	bl	800a4bc <vTaskSwitchContext>
	prvTaskExitError();
 800b410:	f7ff ff22 	bl	800b258 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b414:	2300      	movs	r3, #0
}
 800b416:	4618      	mov	r0, r3
 800b418:	3718      	adds	r7, #24
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	e000ed00 	.word	0xe000ed00
 800b424:	410fc271 	.word	0x410fc271
 800b428:	410fc270 	.word	0x410fc270
 800b42c:	e000e400 	.word	0xe000e400
 800b430:	20001348 	.word	0x20001348
 800b434:	2000134c 	.word	0x2000134c
 800b438:	e000ed20 	.word	0xe000ed20
 800b43c:	200000e8 	.word	0x200000e8
 800b440:	e000ef34 	.word	0xe000ef34

0800b444 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
	__asm volatile
 800b44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b44e:	f383 8811 	msr	BASEPRI, r3
 800b452:	f3bf 8f6f 	isb	sy
 800b456:	f3bf 8f4f 	dsb	sy
 800b45a:	607b      	str	r3, [r7, #4]
}
 800b45c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b45e:	4b0f      	ldr	r3, [pc, #60]	; (800b49c <vPortEnterCritical+0x58>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	3301      	adds	r3, #1
 800b464:	4a0d      	ldr	r2, [pc, #52]	; (800b49c <vPortEnterCritical+0x58>)
 800b466:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b468:	4b0c      	ldr	r3, [pc, #48]	; (800b49c <vPortEnterCritical+0x58>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d10f      	bne.n	800b490 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b470:	4b0b      	ldr	r3, [pc, #44]	; (800b4a0 <vPortEnterCritical+0x5c>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	b2db      	uxtb	r3, r3
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00a      	beq.n	800b490 <vPortEnterCritical+0x4c>
	__asm volatile
 800b47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47e:	f383 8811 	msr	BASEPRI, r3
 800b482:	f3bf 8f6f 	isb	sy
 800b486:	f3bf 8f4f 	dsb	sy
 800b48a:	603b      	str	r3, [r7, #0]
}
 800b48c:	bf00      	nop
 800b48e:	e7fe      	b.n	800b48e <vPortEnterCritical+0x4a>
	}
}
 800b490:	bf00      	nop
 800b492:	370c      	adds	r7, #12
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr
 800b49c:	200000e8 	.word	0x200000e8
 800b4a0:	e000ed04 	.word	0xe000ed04

0800b4a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b4aa:	4b12      	ldr	r3, [pc, #72]	; (800b4f4 <vPortExitCritical+0x50>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d10a      	bne.n	800b4c8 <vPortExitCritical+0x24>
	__asm volatile
 800b4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b6:	f383 8811 	msr	BASEPRI, r3
 800b4ba:	f3bf 8f6f 	isb	sy
 800b4be:	f3bf 8f4f 	dsb	sy
 800b4c2:	607b      	str	r3, [r7, #4]
}
 800b4c4:	bf00      	nop
 800b4c6:	e7fe      	b.n	800b4c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b4c8:	4b0a      	ldr	r3, [pc, #40]	; (800b4f4 <vPortExitCritical+0x50>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	3b01      	subs	r3, #1
 800b4ce:	4a09      	ldr	r2, [pc, #36]	; (800b4f4 <vPortExitCritical+0x50>)
 800b4d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b4d2:	4b08      	ldr	r3, [pc, #32]	; (800b4f4 <vPortExitCritical+0x50>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d105      	bne.n	800b4e6 <vPortExitCritical+0x42>
 800b4da:	2300      	movs	r3, #0
 800b4dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	f383 8811 	msr	BASEPRI, r3
}
 800b4e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b4e6:	bf00      	nop
 800b4e8:	370c      	adds	r7, #12
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr
 800b4f2:	bf00      	nop
 800b4f4:	200000e8 	.word	0x200000e8
	...

0800b500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b500:	f3ef 8009 	mrs	r0, PSP
 800b504:	f3bf 8f6f 	isb	sy
 800b508:	4b15      	ldr	r3, [pc, #84]	; (800b560 <pxCurrentTCBConst>)
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	f01e 0f10 	tst.w	lr, #16
 800b510:	bf08      	it	eq
 800b512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b51a:	6010      	str	r0, [r2, #0]
 800b51c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b520:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b524:	f380 8811 	msr	BASEPRI, r0
 800b528:	f3bf 8f4f 	dsb	sy
 800b52c:	f3bf 8f6f 	isb	sy
 800b530:	f7fe ffc4 	bl	800a4bc <vTaskSwitchContext>
 800b534:	f04f 0000 	mov.w	r0, #0
 800b538:	f380 8811 	msr	BASEPRI, r0
 800b53c:	bc09      	pop	{r0, r3}
 800b53e:	6819      	ldr	r1, [r3, #0]
 800b540:	6808      	ldr	r0, [r1, #0]
 800b542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b546:	f01e 0f10 	tst.w	lr, #16
 800b54a:	bf08      	it	eq
 800b54c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b550:	f380 8809 	msr	PSP, r0
 800b554:	f3bf 8f6f 	isb	sy
 800b558:	4770      	bx	lr
 800b55a:	bf00      	nop
 800b55c:	f3af 8000 	nop.w

0800b560 <pxCurrentTCBConst>:
 800b560:	20000d1c 	.word	0x20000d1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b564:	bf00      	nop
 800b566:	bf00      	nop

0800b568 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
	__asm volatile
 800b56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b572:	f383 8811 	msr	BASEPRI, r3
 800b576:	f3bf 8f6f 	isb	sy
 800b57a:	f3bf 8f4f 	dsb	sy
 800b57e:	607b      	str	r3, [r7, #4]
}
 800b580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b582:	f7fe fee1 	bl	800a348 <xTaskIncrementTick>
 800b586:	4603      	mov	r3, r0
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d003      	beq.n	800b594 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b58c:	4b06      	ldr	r3, [pc, #24]	; (800b5a8 <xPortSysTickHandler+0x40>)
 800b58e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b592:	601a      	str	r2, [r3, #0]
 800b594:	2300      	movs	r3, #0
 800b596:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	f383 8811 	msr	BASEPRI, r3
}
 800b59e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b5a0:	bf00      	nop
 800b5a2:	3708      	adds	r7, #8
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	e000ed04 	.word	0xe000ed04

0800b5ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b5b0:	4b0b      	ldr	r3, [pc, #44]	; (800b5e0 <vPortSetupTimerInterrupt+0x34>)
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b5b6:	4b0b      	ldr	r3, [pc, #44]	; (800b5e4 <vPortSetupTimerInterrupt+0x38>)
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b5bc:	4b0a      	ldr	r3, [pc, #40]	; (800b5e8 <vPortSetupTimerInterrupt+0x3c>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4a0a      	ldr	r2, [pc, #40]	; (800b5ec <vPortSetupTimerInterrupt+0x40>)
 800b5c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5c6:	099b      	lsrs	r3, r3, #6
 800b5c8:	4a09      	ldr	r2, [pc, #36]	; (800b5f0 <vPortSetupTimerInterrupt+0x44>)
 800b5ca:	3b01      	subs	r3, #1
 800b5cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b5ce:	4b04      	ldr	r3, [pc, #16]	; (800b5e0 <vPortSetupTimerInterrupt+0x34>)
 800b5d0:	2207      	movs	r2, #7
 800b5d2:	601a      	str	r2, [r3, #0]
}
 800b5d4:	bf00      	nop
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr
 800b5de:	bf00      	nop
 800b5e0:	e000e010 	.word	0xe000e010
 800b5e4:	e000e018 	.word	0xe000e018
 800b5e8:	20000000 	.word	0x20000000
 800b5ec:	10624dd3 	.word	0x10624dd3
 800b5f0:	e000e014 	.word	0xe000e014

0800b5f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b5f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b604 <vPortEnableVFP+0x10>
 800b5f8:	6801      	ldr	r1, [r0, #0]
 800b5fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b5fe:	6001      	str	r1, [r0, #0]
 800b600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b602:	bf00      	nop
 800b604:	e000ed88 	.word	0xe000ed88

0800b608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b608:	b480      	push	{r7}
 800b60a:	b085      	sub	sp, #20
 800b60c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b60e:	f3ef 8305 	mrs	r3, IPSR
 800b612:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	2b0f      	cmp	r3, #15
 800b618:	d914      	bls.n	800b644 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b61a:	4a17      	ldr	r2, [pc, #92]	; (800b678 <vPortValidateInterruptPriority+0x70>)
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	4413      	add	r3, r2
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b624:	4b15      	ldr	r3, [pc, #84]	; (800b67c <vPortValidateInterruptPriority+0x74>)
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	7afa      	ldrb	r2, [r7, #11]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d20a      	bcs.n	800b644 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b632:	f383 8811 	msr	BASEPRI, r3
 800b636:	f3bf 8f6f 	isb	sy
 800b63a:	f3bf 8f4f 	dsb	sy
 800b63e:	607b      	str	r3, [r7, #4]
}
 800b640:	bf00      	nop
 800b642:	e7fe      	b.n	800b642 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b644:	4b0e      	ldr	r3, [pc, #56]	; (800b680 <vPortValidateInterruptPriority+0x78>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b64c:	4b0d      	ldr	r3, [pc, #52]	; (800b684 <vPortValidateInterruptPriority+0x7c>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	429a      	cmp	r2, r3
 800b652:	d90a      	bls.n	800b66a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b658:	f383 8811 	msr	BASEPRI, r3
 800b65c:	f3bf 8f6f 	isb	sy
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	603b      	str	r3, [r7, #0]
}
 800b666:	bf00      	nop
 800b668:	e7fe      	b.n	800b668 <vPortValidateInterruptPriority+0x60>
	}
 800b66a:	bf00      	nop
 800b66c:	3714      	adds	r7, #20
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr
 800b676:	bf00      	nop
 800b678:	e000e3f0 	.word	0xe000e3f0
 800b67c:	20001348 	.word	0x20001348
 800b680:	e000ed0c 	.word	0xe000ed0c
 800b684:	2000134c 	.word	0x2000134c

0800b688 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b08a      	sub	sp, #40	; 0x28
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b690:	2300      	movs	r3, #0
 800b692:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b694:	f7fe fd9c 	bl	800a1d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b698:	4b5b      	ldr	r3, [pc, #364]	; (800b808 <pvPortMalloc+0x180>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d101      	bne.n	800b6a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b6a0:	f000 f920 	bl	800b8e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b6a4:	4b59      	ldr	r3, [pc, #356]	; (800b80c <pvPortMalloc+0x184>)
 800b6a6:	681a      	ldr	r2, [r3, #0]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	4013      	ands	r3, r2
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	f040 8093 	bne.w	800b7d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d01d      	beq.n	800b6f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b6b8:	2208      	movs	r2, #8
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	4413      	add	r3, r2
 800b6be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f003 0307 	and.w	r3, r3, #7
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d014      	beq.n	800b6f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f023 0307 	bic.w	r3, r3, #7
 800b6d0:	3308      	adds	r3, #8
 800b6d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f003 0307 	and.w	r3, r3, #7
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d00a      	beq.n	800b6f4 <pvPortMalloc+0x6c>
	__asm volatile
 800b6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e2:	f383 8811 	msr	BASEPRI, r3
 800b6e6:	f3bf 8f6f 	isb	sy
 800b6ea:	f3bf 8f4f 	dsb	sy
 800b6ee:	617b      	str	r3, [r7, #20]
}
 800b6f0:	bf00      	nop
 800b6f2:	e7fe      	b.n	800b6f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d06e      	beq.n	800b7d8 <pvPortMalloc+0x150>
 800b6fa:	4b45      	ldr	r3, [pc, #276]	; (800b810 <pvPortMalloc+0x188>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	687a      	ldr	r2, [r7, #4]
 800b700:	429a      	cmp	r2, r3
 800b702:	d869      	bhi.n	800b7d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b704:	4b43      	ldr	r3, [pc, #268]	; (800b814 <pvPortMalloc+0x18c>)
 800b706:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b708:	4b42      	ldr	r3, [pc, #264]	; (800b814 <pvPortMalloc+0x18c>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b70e:	e004      	b.n	800b71a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b712:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	429a      	cmp	r2, r3
 800b722:	d903      	bls.n	800b72c <pvPortMalloc+0xa4>
 800b724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d1f1      	bne.n	800b710 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b72c:	4b36      	ldr	r3, [pc, #216]	; (800b808 <pvPortMalloc+0x180>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b732:	429a      	cmp	r2, r3
 800b734:	d050      	beq.n	800b7d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b736:	6a3b      	ldr	r3, [r7, #32]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2208      	movs	r2, #8
 800b73c:	4413      	add	r3, r2
 800b73e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	6a3b      	ldr	r3, [r7, #32]
 800b746:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74a:	685a      	ldr	r2, [r3, #4]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	1ad2      	subs	r2, r2, r3
 800b750:	2308      	movs	r3, #8
 800b752:	005b      	lsls	r3, r3, #1
 800b754:	429a      	cmp	r2, r3
 800b756:	d91f      	bls.n	800b798 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	4413      	add	r3, r2
 800b75e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b760:	69bb      	ldr	r3, [r7, #24]
 800b762:	f003 0307 	and.w	r3, r3, #7
 800b766:	2b00      	cmp	r3, #0
 800b768:	d00a      	beq.n	800b780 <pvPortMalloc+0xf8>
	__asm volatile
 800b76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b76e:	f383 8811 	msr	BASEPRI, r3
 800b772:	f3bf 8f6f 	isb	sy
 800b776:	f3bf 8f4f 	dsb	sy
 800b77a:	613b      	str	r3, [r7, #16]
}
 800b77c:	bf00      	nop
 800b77e:	e7fe      	b.n	800b77e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b782:	685a      	ldr	r2, [r3, #4]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	1ad2      	subs	r2, r2, r3
 800b788:	69bb      	ldr	r3, [r7, #24]
 800b78a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b792:	69b8      	ldr	r0, [r7, #24]
 800b794:	f000 f908 	bl	800b9a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b798:	4b1d      	ldr	r3, [pc, #116]	; (800b810 <pvPortMalloc+0x188>)
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	1ad3      	subs	r3, r2, r3
 800b7a2:	4a1b      	ldr	r2, [pc, #108]	; (800b810 <pvPortMalloc+0x188>)
 800b7a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b7a6:	4b1a      	ldr	r3, [pc, #104]	; (800b810 <pvPortMalloc+0x188>)
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	4b1b      	ldr	r3, [pc, #108]	; (800b818 <pvPortMalloc+0x190>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	d203      	bcs.n	800b7ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b7b2:	4b17      	ldr	r3, [pc, #92]	; (800b810 <pvPortMalloc+0x188>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4a18      	ldr	r2, [pc, #96]	; (800b818 <pvPortMalloc+0x190>)
 800b7b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7bc:	685a      	ldr	r2, [r3, #4]
 800b7be:	4b13      	ldr	r3, [pc, #76]	; (800b80c <pvPortMalloc+0x184>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	431a      	orrs	r2, r3
 800b7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b7ce:	4b13      	ldr	r3, [pc, #76]	; (800b81c <pvPortMalloc+0x194>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	4a11      	ldr	r2, [pc, #68]	; (800b81c <pvPortMalloc+0x194>)
 800b7d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b7d8:	f7fe fd08 	bl	800a1ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7dc:	69fb      	ldr	r3, [r7, #28]
 800b7de:	f003 0307 	and.w	r3, r3, #7
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d00a      	beq.n	800b7fc <pvPortMalloc+0x174>
	__asm volatile
 800b7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ea:	f383 8811 	msr	BASEPRI, r3
 800b7ee:	f3bf 8f6f 	isb	sy
 800b7f2:	f3bf 8f4f 	dsb	sy
 800b7f6:	60fb      	str	r3, [r7, #12]
}
 800b7f8:	bf00      	nop
 800b7fa:	e7fe      	b.n	800b7fa <pvPortMalloc+0x172>
	return pvReturn;
 800b7fc:	69fb      	ldr	r3, [r7, #28]
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3728      	adds	r7, #40	; 0x28
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
 800b806:	bf00      	nop
 800b808:	20004f58 	.word	0x20004f58
 800b80c:	20004f6c 	.word	0x20004f6c
 800b810:	20004f5c 	.word	0x20004f5c
 800b814:	20004f50 	.word	0x20004f50
 800b818:	20004f60 	.word	0x20004f60
 800b81c:	20004f64 	.word	0x20004f64

0800b820 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b086      	sub	sp, #24
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d04d      	beq.n	800b8ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b832:	2308      	movs	r3, #8
 800b834:	425b      	negs	r3, r3
 800b836:	697a      	ldr	r2, [r7, #20]
 800b838:	4413      	add	r3, r2
 800b83a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	685a      	ldr	r2, [r3, #4]
 800b844:	4b24      	ldr	r3, [pc, #144]	; (800b8d8 <vPortFree+0xb8>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4013      	ands	r3, r2
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d10a      	bne.n	800b864 <vPortFree+0x44>
	__asm volatile
 800b84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b852:	f383 8811 	msr	BASEPRI, r3
 800b856:	f3bf 8f6f 	isb	sy
 800b85a:	f3bf 8f4f 	dsb	sy
 800b85e:	60fb      	str	r3, [r7, #12]
}
 800b860:	bf00      	nop
 800b862:	e7fe      	b.n	800b862 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d00a      	beq.n	800b882 <vPortFree+0x62>
	__asm volatile
 800b86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b870:	f383 8811 	msr	BASEPRI, r3
 800b874:	f3bf 8f6f 	isb	sy
 800b878:	f3bf 8f4f 	dsb	sy
 800b87c:	60bb      	str	r3, [r7, #8]
}
 800b87e:	bf00      	nop
 800b880:	e7fe      	b.n	800b880 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	685a      	ldr	r2, [r3, #4]
 800b886:	4b14      	ldr	r3, [pc, #80]	; (800b8d8 <vPortFree+0xb8>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4013      	ands	r3, r2
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d01e      	beq.n	800b8ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d11a      	bne.n	800b8ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	685a      	ldr	r2, [r3, #4]
 800b89c:	4b0e      	ldr	r3, [pc, #56]	; (800b8d8 <vPortFree+0xb8>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	43db      	mvns	r3, r3
 800b8a2:	401a      	ands	r2, r3
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b8a8:	f7fe fc92 	bl	800a1d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	685a      	ldr	r2, [r3, #4]
 800b8b0:	4b0a      	ldr	r3, [pc, #40]	; (800b8dc <vPortFree+0xbc>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4413      	add	r3, r2
 800b8b6:	4a09      	ldr	r2, [pc, #36]	; (800b8dc <vPortFree+0xbc>)
 800b8b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b8ba:	6938      	ldr	r0, [r7, #16]
 800b8bc:	f000 f874 	bl	800b9a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b8c0:	4b07      	ldr	r3, [pc, #28]	; (800b8e0 <vPortFree+0xc0>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	3301      	adds	r3, #1
 800b8c6:	4a06      	ldr	r2, [pc, #24]	; (800b8e0 <vPortFree+0xc0>)
 800b8c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b8ca:	f7fe fc8f 	bl	800a1ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b8ce:	bf00      	nop
 800b8d0:	3718      	adds	r7, #24
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	20004f6c 	.word	0x20004f6c
 800b8dc:	20004f5c 	.word	0x20004f5c
 800b8e0:	20004f68 	.word	0x20004f68

0800b8e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b085      	sub	sp, #20
 800b8e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b8ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b8ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b8f0:	4b27      	ldr	r3, [pc, #156]	; (800b990 <prvHeapInit+0xac>)
 800b8f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f003 0307 	and.w	r3, r3, #7
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d00c      	beq.n	800b918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	3307      	adds	r3, #7
 800b902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	f023 0307 	bic.w	r3, r3, #7
 800b90a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b90c:	68ba      	ldr	r2, [r7, #8]
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	1ad3      	subs	r3, r2, r3
 800b912:	4a1f      	ldr	r2, [pc, #124]	; (800b990 <prvHeapInit+0xac>)
 800b914:	4413      	add	r3, r2
 800b916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b91c:	4a1d      	ldr	r2, [pc, #116]	; (800b994 <prvHeapInit+0xb0>)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b922:	4b1c      	ldr	r3, [pc, #112]	; (800b994 <prvHeapInit+0xb0>)
 800b924:	2200      	movs	r2, #0
 800b926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	68ba      	ldr	r2, [r7, #8]
 800b92c:	4413      	add	r3, r2
 800b92e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b930:	2208      	movs	r2, #8
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	1a9b      	subs	r3, r3, r2
 800b936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f023 0307 	bic.w	r3, r3, #7
 800b93e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	4a15      	ldr	r2, [pc, #84]	; (800b998 <prvHeapInit+0xb4>)
 800b944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b946:	4b14      	ldr	r3, [pc, #80]	; (800b998 <prvHeapInit+0xb4>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	2200      	movs	r2, #0
 800b94c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b94e:	4b12      	ldr	r3, [pc, #72]	; (800b998 <prvHeapInit+0xb4>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2200      	movs	r2, #0
 800b954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	68fa      	ldr	r2, [r7, #12]
 800b95e:	1ad2      	subs	r2, r2, r3
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b964:	4b0c      	ldr	r3, [pc, #48]	; (800b998 <prvHeapInit+0xb4>)
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	4a0a      	ldr	r2, [pc, #40]	; (800b99c <prvHeapInit+0xb8>)
 800b972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	4a09      	ldr	r2, [pc, #36]	; (800b9a0 <prvHeapInit+0xbc>)
 800b97a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b97c:	4b09      	ldr	r3, [pc, #36]	; (800b9a4 <prvHeapInit+0xc0>)
 800b97e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b982:	601a      	str	r2, [r3, #0]
}
 800b984:	bf00      	nop
 800b986:	3714      	adds	r7, #20
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr
 800b990:	20001350 	.word	0x20001350
 800b994:	20004f50 	.word	0x20004f50
 800b998:	20004f58 	.word	0x20004f58
 800b99c:	20004f60 	.word	0x20004f60
 800b9a0:	20004f5c 	.word	0x20004f5c
 800b9a4:	20004f6c 	.word	0x20004f6c

0800b9a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b085      	sub	sp, #20
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b9b0:	4b28      	ldr	r3, [pc, #160]	; (800ba54 <prvInsertBlockIntoFreeList+0xac>)
 800b9b2:	60fb      	str	r3, [r7, #12]
 800b9b4:	e002      	b.n	800b9bc <prvInsertBlockIntoFreeList+0x14>
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	60fb      	str	r3, [r7, #12]
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	687a      	ldr	r2, [r7, #4]
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d8f7      	bhi.n	800b9b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	68ba      	ldr	r2, [r7, #8]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	687a      	ldr	r2, [r7, #4]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d108      	bne.n	800b9ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	685a      	ldr	r2, [r3, #4]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	441a      	add	r2, r3
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	68ba      	ldr	r2, [r7, #8]
 800b9f4:	441a      	add	r2, r3
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d118      	bne.n	800ba30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681a      	ldr	r2, [r3, #0]
 800ba02:	4b15      	ldr	r3, [pc, #84]	; (800ba58 <prvInsertBlockIntoFreeList+0xb0>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d00d      	beq.n	800ba26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	685a      	ldr	r2, [r3, #4]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	441a      	add	r2, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	601a      	str	r2, [r3, #0]
 800ba24:	e008      	b.n	800ba38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ba26:	4b0c      	ldr	r3, [pc, #48]	; (800ba58 <prvInsertBlockIntoFreeList+0xb0>)
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	601a      	str	r2, [r3, #0]
 800ba2e:	e003      	b.n	800ba38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ba38:	68fa      	ldr	r2, [r7, #12]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d002      	beq.n	800ba46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba46:	bf00      	nop
 800ba48:	3714      	adds	r7, #20
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr
 800ba52:	bf00      	nop
 800ba54:	20004f50 	.word	0x20004f50
 800ba58:	20004f58 	.word	0x20004f58

0800ba5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ba60:	2201      	movs	r2, #1
 800ba62:	4912      	ldr	r1, [pc, #72]	; (800baac <MX_USB_DEVICE_Init+0x50>)
 800ba64:	4812      	ldr	r0, [pc, #72]	; (800bab0 <MX_USB_DEVICE_Init+0x54>)
 800ba66:	f7fc f8c3 	bl	8007bf0 <USBD_Init>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d004      	beq.n	800ba7a <MX_USB_DEVICE_Init+0x1e>
  {
	usb_failed2 = 1;
 800ba70:	4b10      	ldr	r3, [pc, #64]	; (800bab4 <MX_USB_DEVICE_Init+0x58>)
 800ba72:	2201      	movs	r2, #1
 800ba74:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800ba76:	f7f5 fea5 	bl	80017c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800ba7a:	490f      	ldr	r1, [pc, #60]	; (800bab8 <MX_USB_DEVICE_Init+0x5c>)
 800ba7c:	480c      	ldr	r0, [pc, #48]	; (800bab0 <MX_USB_DEVICE_Init+0x54>)
 800ba7e:	f7fc f8e7 	bl	8007c50 <USBD_RegisterClass>
 800ba82:	4603      	mov	r3, r0
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d004      	beq.n	800ba92 <MX_USB_DEVICE_Init+0x36>
  {
	  usb_failed2 = 1;
 800ba88:	4b0a      	ldr	r3, [pc, #40]	; (800bab4 <MX_USB_DEVICE_Init+0x58>)
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800ba8e:	f7f5 fe99 	bl	80017c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ba92:	4807      	ldr	r0, [pc, #28]	; (800bab0 <MX_USB_DEVICE_Init+0x54>)
 800ba94:	f7fc f903 	bl	8007c9e <USBD_Start>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d004      	beq.n	800baa8 <MX_USB_DEVICE_Init+0x4c>
  {
	  usb_failed2 = 1;
 800ba9e:	4b05      	ldr	r3, [pc, #20]	; (800bab4 <MX_USB_DEVICE_Init+0x58>)
 800baa0:	2201      	movs	r2, #1
 800baa2:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800baa4:	f7f5 fe8e 	bl	80017c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800baa8:	bf00      	nop
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	200000ec 	.word	0x200000ec
 800bab0:	2000501c 	.word	0x2000501c
 800bab4:	20004f70 	.word	0x20004f70
 800bab8:	2000000c 	.word	0x2000000c

0800babc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800babc:	b480      	push	{r7}
 800babe:	b083      	sub	sp, #12
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	4603      	mov	r3, r0
 800bac4:	6039      	str	r1, [r7, #0]
 800bac6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	2212      	movs	r2, #18
 800bacc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bace:	4b03      	ldr	r3, [pc, #12]	; (800badc <USBD_FS_DeviceDescriptor+0x20>)
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	370c      	adds	r7, #12
 800bad4:	46bd      	mov	sp, r7
 800bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bada:	4770      	bx	lr
 800badc:	20000108 	.word	0x20000108

0800bae0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b083      	sub	sp, #12
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	4603      	mov	r3, r0
 800bae8:	6039      	str	r1, [r7, #0]
 800baea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	2204      	movs	r2, #4
 800baf0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800baf2:	4b03      	ldr	r3, [pc, #12]	; (800bb00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	370c      	adds	r7, #12
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr
 800bb00:	2000011c 	.word	0x2000011c

0800bb04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b082      	sub	sp, #8
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	6039      	str	r1, [r7, #0]
 800bb0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb10:	79fb      	ldrb	r3, [r7, #7]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d105      	bne.n	800bb22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb16:	683a      	ldr	r2, [r7, #0]
 800bb18:	4907      	ldr	r1, [pc, #28]	; (800bb38 <USBD_FS_ProductStrDescriptor+0x34>)
 800bb1a:	4808      	ldr	r0, [pc, #32]	; (800bb3c <USBD_FS_ProductStrDescriptor+0x38>)
 800bb1c:	f7fd f949 	bl	8008db2 <USBD_GetString>
 800bb20:	e004      	b.n	800bb2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb22:	683a      	ldr	r2, [r7, #0]
 800bb24:	4904      	ldr	r1, [pc, #16]	; (800bb38 <USBD_FS_ProductStrDescriptor+0x34>)
 800bb26:	4805      	ldr	r0, [pc, #20]	; (800bb3c <USBD_FS_ProductStrDescriptor+0x38>)
 800bb28:	f7fd f943 	bl	8008db2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb2c:	4b02      	ldr	r3, [pc, #8]	; (800bb38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3708      	adds	r7, #8
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	200052ec 	.word	0x200052ec
 800bb3c:	08012788 	.word	0x08012788

0800bb40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	4603      	mov	r3, r0
 800bb48:	6039      	str	r1, [r7, #0]
 800bb4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bb4c:	683a      	ldr	r2, [r7, #0]
 800bb4e:	4904      	ldr	r1, [pc, #16]	; (800bb60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bb50:	4804      	ldr	r0, [pc, #16]	; (800bb64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bb52:	f7fd f92e 	bl	8008db2 <USBD_GetString>
  return USBD_StrDesc;
 800bb56:	4b02      	ldr	r3, [pc, #8]	; (800bb60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3708      	adds	r7, #8
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}
 800bb60:	200052ec 	.word	0x200052ec
 800bb64:	080127a0 	.word	0x080127a0

0800bb68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	4603      	mov	r3, r0
 800bb70:	6039      	str	r1, [r7, #0]
 800bb72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	221a      	movs	r2, #26
 800bb78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bb7a:	f000 f843 	bl	800bc04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bb7e:	4b02      	ldr	r3, [pc, #8]	; (800bb88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3708      	adds	r7, #8
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	20000120 	.word	0x20000120

0800bb8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	4603      	mov	r3, r0
 800bb94:	6039      	str	r1, [r7, #0]
 800bb96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bb98:	79fb      	ldrb	r3, [r7, #7]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d105      	bne.n	800bbaa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bb9e:	683a      	ldr	r2, [r7, #0]
 800bba0:	4907      	ldr	r1, [pc, #28]	; (800bbc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bba2:	4808      	ldr	r0, [pc, #32]	; (800bbc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bba4:	f7fd f905 	bl	8008db2 <USBD_GetString>
 800bba8:	e004      	b.n	800bbb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bbaa:	683a      	ldr	r2, [r7, #0]
 800bbac:	4904      	ldr	r1, [pc, #16]	; (800bbc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bbae:	4805      	ldr	r0, [pc, #20]	; (800bbc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bbb0:	f7fd f8ff 	bl	8008db2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bbb4:	4b02      	ldr	r3, [pc, #8]	; (800bbc0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3708      	adds	r7, #8
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	200052ec 	.word	0x200052ec
 800bbc4:	080127b4 	.word	0x080127b4

0800bbc8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	4603      	mov	r3, r0
 800bbd0:	6039      	str	r1, [r7, #0]
 800bbd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bbd4:	79fb      	ldrb	r3, [r7, #7]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d105      	bne.n	800bbe6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bbda:	683a      	ldr	r2, [r7, #0]
 800bbdc:	4907      	ldr	r1, [pc, #28]	; (800bbfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bbde:	4808      	ldr	r0, [pc, #32]	; (800bc00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bbe0:	f7fd f8e7 	bl	8008db2 <USBD_GetString>
 800bbe4:	e004      	b.n	800bbf0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bbe6:	683a      	ldr	r2, [r7, #0]
 800bbe8:	4904      	ldr	r1, [pc, #16]	; (800bbfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bbea:	4805      	ldr	r0, [pc, #20]	; (800bc00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bbec:	f7fd f8e1 	bl	8008db2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bbf0:	4b02      	ldr	r3, [pc, #8]	; (800bbfc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3708      	adds	r7, #8
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
 800bbfa:	bf00      	nop
 800bbfc:	200052ec 	.word	0x200052ec
 800bc00:	080127c0 	.word	0x080127c0

0800bc04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b084      	sub	sp, #16
 800bc08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bc0a:	4b0f      	ldr	r3, [pc, #60]	; (800bc48 <Get_SerialNum+0x44>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bc10:	4b0e      	ldr	r3, [pc, #56]	; (800bc4c <Get_SerialNum+0x48>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bc16:	4b0e      	ldr	r3, [pc, #56]	; (800bc50 <Get_SerialNum+0x4c>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bc1c:	68fa      	ldr	r2, [r7, #12]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	4413      	add	r3, r2
 800bc22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d009      	beq.n	800bc3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bc2a:	2208      	movs	r2, #8
 800bc2c:	4909      	ldr	r1, [pc, #36]	; (800bc54 <Get_SerialNum+0x50>)
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f000 f814 	bl	800bc5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bc34:	2204      	movs	r2, #4
 800bc36:	4908      	ldr	r1, [pc, #32]	; (800bc58 <Get_SerialNum+0x54>)
 800bc38:	68b8      	ldr	r0, [r7, #8]
 800bc3a:	f000 f80f 	bl	800bc5c <IntToUnicode>
  }
}
 800bc3e:	bf00      	nop
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	1fff7a10 	.word	0x1fff7a10
 800bc4c:	1fff7a14 	.word	0x1fff7a14
 800bc50:	1fff7a18 	.word	0x1fff7a18
 800bc54:	20000122 	.word	0x20000122
 800bc58:	20000132 	.word	0x20000132

0800bc5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b087      	sub	sp, #28
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	60f8      	str	r0, [r7, #12]
 800bc64:	60b9      	str	r1, [r7, #8]
 800bc66:	4613      	mov	r3, r2
 800bc68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bc6e:	2300      	movs	r3, #0
 800bc70:	75fb      	strb	r3, [r7, #23]
 800bc72:	e027      	b.n	800bcc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	0f1b      	lsrs	r3, r3, #28
 800bc78:	2b09      	cmp	r3, #9
 800bc7a:	d80b      	bhi.n	800bc94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	0f1b      	lsrs	r3, r3, #28
 800bc80:	b2da      	uxtb	r2, r3
 800bc82:	7dfb      	ldrb	r3, [r7, #23]
 800bc84:	005b      	lsls	r3, r3, #1
 800bc86:	4619      	mov	r1, r3
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	440b      	add	r3, r1
 800bc8c:	3230      	adds	r2, #48	; 0x30
 800bc8e:	b2d2      	uxtb	r2, r2
 800bc90:	701a      	strb	r2, [r3, #0]
 800bc92:	e00a      	b.n	800bcaa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	0f1b      	lsrs	r3, r3, #28
 800bc98:	b2da      	uxtb	r2, r3
 800bc9a:	7dfb      	ldrb	r3, [r7, #23]
 800bc9c:	005b      	lsls	r3, r3, #1
 800bc9e:	4619      	mov	r1, r3
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	440b      	add	r3, r1
 800bca4:	3237      	adds	r2, #55	; 0x37
 800bca6:	b2d2      	uxtb	r2, r2
 800bca8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	011b      	lsls	r3, r3, #4
 800bcae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bcb0:	7dfb      	ldrb	r3, [r7, #23]
 800bcb2:	005b      	lsls	r3, r3, #1
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	68ba      	ldr	r2, [r7, #8]
 800bcb8:	4413      	add	r3, r2
 800bcba:	2200      	movs	r2, #0
 800bcbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bcbe:	7dfb      	ldrb	r3, [r7, #23]
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	75fb      	strb	r3, [r7, #23]
 800bcc4:	7dfa      	ldrb	r2, [r7, #23]
 800bcc6:	79fb      	ldrb	r3, [r7, #7]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d3d3      	bcc.n	800bc74 <IntToUnicode+0x18>
  }
}
 800bccc:	bf00      	nop
 800bcce:	bf00      	nop
 800bcd0:	371c      	adds	r7, #28
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd8:	4770      	bx	lr
	...

0800bcdc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b08a      	sub	sp, #40	; 0x28
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bce4:	f107 0314 	add.w	r3, r7, #20
 800bce8:	2200      	movs	r2, #0
 800bcea:	601a      	str	r2, [r3, #0]
 800bcec:	605a      	str	r2, [r3, #4]
 800bcee:	609a      	str	r2, [r3, #8]
 800bcf0:	60da      	str	r2, [r3, #12]
 800bcf2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bcfc:	d13a      	bne.n	800bd74 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bcfe:	2300      	movs	r3, #0
 800bd00:	613b      	str	r3, [r7, #16]
 800bd02:	4b1e      	ldr	r3, [pc, #120]	; (800bd7c <HAL_PCD_MspInit+0xa0>)
 800bd04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd06:	4a1d      	ldr	r2, [pc, #116]	; (800bd7c <HAL_PCD_MspInit+0xa0>)
 800bd08:	f043 0301 	orr.w	r3, r3, #1
 800bd0c:	6313      	str	r3, [r2, #48]	; 0x30
 800bd0e:	4b1b      	ldr	r3, [pc, #108]	; (800bd7c <HAL_PCD_MspInit+0xa0>)
 800bd10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd12:	f003 0301 	and.w	r3, r3, #1
 800bd16:	613b      	str	r3, [r7, #16]
 800bd18:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bd1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bd1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd20:	2302      	movs	r3, #2
 800bd22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd24:	2300      	movs	r3, #0
 800bd26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd28:	2303      	movs	r3, #3
 800bd2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bd2c:	230a      	movs	r3, #10
 800bd2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd30:	f107 0314 	add.w	r3, r7, #20
 800bd34:	4619      	mov	r1, r3
 800bd36:	4812      	ldr	r0, [pc, #72]	; (800bd80 <HAL_PCD_MspInit+0xa4>)
 800bd38:	f7f6 f9de 	bl	80020f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bd3c:	4b0f      	ldr	r3, [pc, #60]	; (800bd7c <HAL_PCD_MspInit+0xa0>)
 800bd3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd40:	4a0e      	ldr	r2, [pc, #56]	; (800bd7c <HAL_PCD_MspInit+0xa0>)
 800bd42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd46:	6353      	str	r3, [r2, #52]	; 0x34
 800bd48:	2300      	movs	r3, #0
 800bd4a:	60fb      	str	r3, [r7, #12]
 800bd4c:	4b0b      	ldr	r3, [pc, #44]	; (800bd7c <HAL_PCD_MspInit+0xa0>)
 800bd4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd50:	4a0a      	ldr	r2, [pc, #40]	; (800bd7c <HAL_PCD_MspInit+0xa0>)
 800bd52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bd56:	6453      	str	r3, [r2, #68]	; 0x44
 800bd58:	4b08      	ldr	r3, [pc, #32]	; (800bd7c <HAL_PCD_MspInit+0xa0>)
 800bd5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd60:	60fb      	str	r3, [r7, #12]
 800bd62:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800bd64:	2200      	movs	r2, #0
 800bd66:	2105      	movs	r1, #5
 800bd68:	2043      	movs	r0, #67	; 0x43
 800bd6a:	f7f6 f99b 	bl	80020a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bd6e:	2043      	movs	r0, #67	; 0x43
 800bd70:	f7f6 f9b4 	bl	80020dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bd74:	bf00      	nop
 800bd76:	3728      	adds	r7, #40	; 0x28
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}
 800bd7c:	40023800 	.word	0x40023800
 800bd80:	40020000 	.word	0x40020000

0800bd84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bd98:	4619      	mov	r1, r3
 800bd9a:	4610      	mov	r0, r2
 800bd9c:	f7fb ffca 	bl	8007d34 <USBD_LL_SetupStage>
}
 800bda0:	bf00      	nop
 800bda2:	3708      	adds	r7, #8
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bdba:	78fa      	ldrb	r2, [r7, #3]
 800bdbc:	6879      	ldr	r1, [r7, #4]
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	00db      	lsls	r3, r3, #3
 800bdc2:	1a9b      	subs	r3, r3, r2
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	440b      	add	r3, r1
 800bdc8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bdcc:	681a      	ldr	r2, [r3, #0]
 800bdce:	78fb      	ldrb	r3, [r7, #3]
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	f7fc f804 	bl	8007dde <USBD_LL_DataOutStage>
}
 800bdd6:	bf00      	nop
 800bdd8:	3708      	adds	r7, #8
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}

0800bdde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdde:	b580      	push	{r7, lr}
 800bde0:	b082      	sub	sp, #8
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
 800bde6:	460b      	mov	r3, r1
 800bde8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bdf0:	78fa      	ldrb	r2, [r7, #3]
 800bdf2:	6879      	ldr	r1, [r7, #4]
 800bdf4:	4613      	mov	r3, r2
 800bdf6:	00db      	lsls	r3, r3, #3
 800bdf8:	1a9b      	subs	r3, r3, r2
 800bdfa:	009b      	lsls	r3, r3, #2
 800bdfc:	440b      	add	r3, r1
 800bdfe:	3348      	adds	r3, #72	; 0x48
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	78fb      	ldrb	r3, [r7, #3]
 800be04:	4619      	mov	r1, r3
 800be06:	f7fc f84d 	bl	8007ea4 <USBD_LL_DataInStage>
}
 800be0a:	bf00      	nop
 800be0c:	3708      	adds	r7, #8
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b082      	sub	sp, #8
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800be20:	4618      	mov	r0, r3
 800be22:	f7fc f961 	bl	80080e8 <USBD_LL_SOF>
}
 800be26:	bf00      	nop
 800be28:	3708      	adds	r7, #8
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be2e:	b580      	push	{r7, lr}
 800be30:	b084      	sub	sp, #16
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800be36:	2301      	movs	r3, #1
 800be38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	68db      	ldr	r3, [r3, #12]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d102      	bne.n	800be48 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800be42:	2300      	movs	r3, #0
 800be44:	73fb      	strb	r3, [r7, #15]
 800be46:	e008      	b.n	800be5a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	68db      	ldr	r3, [r3, #12]
 800be4c:	2b02      	cmp	r3, #2
 800be4e:	d102      	bne.n	800be56 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800be50:	2301      	movs	r3, #1
 800be52:	73fb      	strb	r3, [r7, #15]
 800be54:	e001      	b.n	800be5a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800be56:	f7f5 fcb5 	bl	80017c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800be60:	7bfa      	ldrb	r2, [r7, #15]
 800be62:	4611      	mov	r1, r2
 800be64:	4618      	mov	r0, r3
 800be66:	f7fc f901 	bl	800806c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800be70:	4618      	mov	r0, r3
 800be72:	f7fc f8ad 	bl	8007fd0 <USBD_LL_Reset>
}
 800be76:	bf00      	nop
 800be78:	3710      	adds	r7, #16
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
	...

0800be80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b082      	sub	sp, #8
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800be8e:	4618      	mov	r0, r3
 800be90:	f7fc f8fc 	bl	800808c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	6812      	ldr	r2, [r2, #0]
 800bea2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bea6:	f043 0301 	orr.w	r3, r3, #1
 800beaa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6a1b      	ldr	r3, [r3, #32]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d005      	beq.n	800bec0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800beb4:	4b04      	ldr	r3, [pc, #16]	; (800bec8 <HAL_PCD_SuspendCallback+0x48>)
 800beb6:	691b      	ldr	r3, [r3, #16]
 800beb8:	4a03      	ldr	r2, [pc, #12]	; (800bec8 <HAL_PCD_SuspendCallback+0x48>)
 800beba:	f043 0306 	orr.w	r3, r3, #6
 800bebe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bec0:	bf00      	nop
 800bec2:	3708      	adds	r7, #8
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}
 800bec8:	e000ed00 	.word	0xe000ed00

0800becc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800beda:	4618      	mov	r0, r3
 800bedc:	f7fc f8ec 	bl	80080b8 <USBD_LL_Resume>
}
 800bee0:	bf00      	nop
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	460b      	mov	r3, r1
 800bef2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800befa:	78fa      	ldrb	r2, [r7, #3]
 800befc:	4611      	mov	r1, r2
 800befe:	4618      	mov	r0, r3
 800bf00:	f7fc f93a 	bl	8008178 <USBD_LL_IsoOUTIncomplete>
}
 800bf04:	bf00      	nop
 800bf06:	3708      	adds	r7, #8
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}

0800bf0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	460b      	mov	r3, r1
 800bf16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bf1e:	78fa      	ldrb	r2, [r7, #3]
 800bf20:	4611      	mov	r1, r2
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7fc f902 	bl	800812c <USBD_LL_IsoINIncomplete>
}
 800bf28:	bf00      	nop
 800bf2a:	3708      	adds	r7, #8
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7fc f940 	bl	80081c4 <USBD_LL_DevConnected>
}
 800bf44:	bf00      	nop
 800bf46:	3708      	adds	r7, #8
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b082      	sub	sp, #8
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7fc f93d 	bl	80081da <USBD_LL_DevDisconnected>
}
 800bf60:	bf00      	nop
 800bf62:	3708      	adds	r7, #8
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}

0800bf68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b082      	sub	sp, #8
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	d13c      	bne.n	800bff2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bf78:	4a20      	ldr	r2, [pc, #128]	; (800bffc <USBD_LL_Init+0x94>)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	4a1e      	ldr	r2, [pc, #120]	; (800bffc <USBD_LL_Init+0x94>)
 800bf84:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bf88:	4b1c      	ldr	r3, [pc, #112]	; (800bffc <USBD_LL_Init+0x94>)
 800bf8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bf8e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800bf90:	4b1a      	ldr	r3, [pc, #104]	; (800bffc <USBD_LL_Init+0x94>)
 800bf92:	2206      	movs	r2, #6
 800bf94:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bf96:	4b19      	ldr	r3, [pc, #100]	; (800bffc <USBD_LL_Init+0x94>)
 800bf98:	2202      	movs	r2, #2
 800bf9a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bf9c:	4b17      	ldr	r3, [pc, #92]	; (800bffc <USBD_LL_Init+0x94>)
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bfa2:	4b16      	ldr	r3, [pc, #88]	; (800bffc <USBD_LL_Init+0x94>)
 800bfa4:	2202      	movs	r2, #2
 800bfa6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bfa8:	4b14      	ldr	r3, [pc, #80]	; (800bffc <USBD_LL_Init+0x94>)
 800bfaa:	2200      	movs	r2, #0
 800bfac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bfae:	4b13      	ldr	r3, [pc, #76]	; (800bffc <USBD_LL_Init+0x94>)
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bfb4:	4b11      	ldr	r3, [pc, #68]	; (800bffc <USBD_LL_Init+0x94>)
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bfba:	4b10      	ldr	r3, [pc, #64]	; (800bffc <USBD_LL_Init+0x94>)
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bfc0:	4b0e      	ldr	r3, [pc, #56]	; (800bffc <USBD_LL_Init+0x94>)
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bfc6:	480d      	ldr	r0, [pc, #52]	; (800bffc <USBD_LL_Init+0x94>)
 800bfc8:	f7f6 fa5b 	bl	8002482 <HAL_PCD_Init>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d001      	beq.n	800bfd6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bfd2:	f7f5 fbf7 	bl	80017c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bfd6:	2180      	movs	r1, #128	; 0x80
 800bfd8:	4808      	ldr	r0, [pc, #32]	; (800bffc <USBD_LL_Init+0x94>)
 800bfda:	f7f7 fbd4 	bl	8003786 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bfde:	2240      	movs	r2, #64	; 0x40
 800bfe0:	2100      	movs	r1, #0
 800bfe2:	4806      	ldr	r0, [pc, #24]	; (800bffc <USBD_LL_Init+0x94>)
 800bfe4:	f7f7 fb88 	bl	80036f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bfe8:	2280      	movs	r2, #128	; 0x80
 800bfea:	2101      	movs	r1, #1
 800bfec:	4803      	ldr	r0, [pc, #12]	; (800bffc <USBD_LL_Init+0x94>)
 800bfee:	f7f7 fb83 	bl	80036f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bff2:	2300      	movs	r3, #0
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3708      	adds	r7, #8
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}
 800bffc:	200054ec 	.word	0x200054ec

0800c000 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c008:	2300      	movs	r3, #0
 800c00a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c00c:	2300      	movs	r3, #0
 800c00e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c016:	4618      	mov	r0, r3
 800c018:	f7f6 fb57 	bl	80026ca <HAL_PCD_Start>
 800c01c:	4603      	mov	r3, r0
 800c01e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c020:	7bfb      	ldrb	r3, [r7, #15]
 800c022:	4618      	mov	r0, r3
 800c024:	f000 f97e 	bl	800c324 <USBD_Get_USB_Status>
 800c028:	4603      	mov	r3, r0
 800c02a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c02c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3710      	adds	r7, #16
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}

0800c036 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c036:	b580      	push	{r7, lr}
 800c038:	b084      	sub	sp, #16
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	6078      	str	r0, [r7, #4]
 800c03e:	4608      	mov	r0, r1
 800c040:	4611      	mov	r1, r2
 800c042:	461a      	mov	r2, r3
 800c044:	4603      	mov	r3, r0
 800c046:	70fb      	strb	r3, [r7, #3]
 800c048:	460b      	mov	r3, r1
 800c04a:	70bb      	strb	r3, [r7, #2]
 800c04c:	4613      	mov	r3, r2
 800c04e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c050:	2300      	movs	r3, #0
 800c052:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c054:	2300      	movs	r3, #0
 800c056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c05e:	78bb      	ldrb	r3, [r7, #2]
 800c060:	883a      	ldrh	r2, [r7, #0]
 800c062:	78f9      	ldrb	r1, [r7, #3]
 800c064:	f7f6 ff68 	bl	8002f38 <HAL_PCD_EP_Open>
 800c068:	4603      	mov	r3, r0
 800c06a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c06c:	7bfb      	ldrb	r3, [r7, #15]
 800c06e:	4618      	mov	r0, r3
 800c070:	f000 f958 	bl	800c324 <USBD_Get_USB_Status>
 800c074:	4603      	mov	r3, r0
 800c076:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c078:	7bbb      	ldrb	r3, [r7, #14]
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}

0800c082 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c082:	b580      	push	{r7, lr}
 800c084:	b084      	sub	sp, #16
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
 800c08a:	460b      	mov	r3, r1
 800c08c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c08e:	2300      	movs	r3, #0
 800c090:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c092:	2300      	movs	r3, #0
 800c094:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c09c:	78fa      	ldrb	r2, [r7, #3]
 800c09e:	4611      	mov	r1, r2
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7f6 ffb1 	bl	8003008 <HAL_PCD_EP_Close>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0aa:	7bfb      	ldrb	r3, [r7, #15]
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f000 f939 	bl	800c324 <USBD_Get_USB_Status>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3710      	adds	r7, #16
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}

0800c0c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c0da:	78fa      	ldrb	r2, [r7, #3]
 800c0dc:	4611      	mov	r1, r2
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f7f7 f871 	bl	80031c6 <HAL_PCD_EP_SetStall>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0e8:	7bfb      	ldrb	r3, [r7, #15]
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f000 f91a 	bl	800c324 <USBD_Get_USB_Status>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3710      	adds	r7, #16
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}

0800c0fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0fe:	b580      	push	{r7, lr}
 800c100:	b084      	sub	sp, #16
 800c102:	af00      	add	r7, sp, #0
 800c104:	6078      	str	r0, [r7, #4]
 800c106:	460b      	mov	r3, r1
 800c108:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c10a:	2300      	movs	r3, #0
 800c10c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c10e:	2300      	movs	r3, #0
 800c110:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c118:	78fa      	ldrb	r2, [r7, #3]
 800c11a:	4611      	mov	r1, r2
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7f7 f8b6 	bl	800328e <HAL_PCD_EP_ClrStall>
 800c122:	4603      	mov	r3, r0
 800c124:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c126:	7bfb      	ldrb	r3, [r7, #15]
 800c128:	4618      	mov	r0, r3
 800c12a:	f000 f8fb 	bl	800c324 <USBD_Get_USB_Status>
 800c12e:	4603      	mov	r3, r0
 800c130:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c132:	7bbb      	ldrb	r3, [r7, #14]
}
 800c134:	4618      	mov	r0, r3
 800c136:	3710      	adds	r7, #16
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b085      	sub	sp, #20
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	460b      	mov	r3, r1
 800c146:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c14e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c150:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c154:	2b00      	cmp	r3, #0
 800c156:	da0b      	bge.n	800c170 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c158:	78fb      	ldrb	r3, [r7, #3]
 800c15a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c15e:	68f9      	ldr	r1, [r7, #12]
 800c160:	4613      	mov	r3, r2
 800c162:	00db      	lsls	r3, r3, #3
 800c164:	1a9b      	subs	r3, r3, r2
 800c166:	009b      	lsls	r3, r3, #2
 800c168:	440b      	add	r3, r1
 800c16a:	333e      	adds	r3, #62	; 0x3e
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	e00b      	b.n	800c188 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c170:	78fb      	ldrb	r3, [r7, #3]
 800c172:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c176:	68f9      	ldr	r1, [r7, #12]
 800c178:	4613      	mov	r3, r2
 800c17a:	00db      	lsls	r3, r3, #3
 800c17c:	1a9b      	subs	r3, r3, r2
 800c17e:	009b      	lsls	r3, r3, #2
 800c180:	440b      	add	r3, r1
 800c182:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c186:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3714      	adds	r7, #20
 800c18c:	46bd      	mov	sp, r7
 800c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c192:	4770      	bx	lr

0800c194 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b084      	sub	sp, #16
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	460b      	mov	r3, r1
 800c19e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c1ae:	78fa      	ldrb	r2, [r7, #3]
 800c1b0:	4611      	mov	r1, r2
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7f6 fe9b 	bl	8002eee <HAL_PCD_SetAddress>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1bc:	7bfb      	ldrb	r3, [r7, #15]
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f000 f8b0 	bl	800c324 <USBD_Get_USB_Status>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3710      	adds	r7, #16
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}

0800c1d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c1d2:	b580      	push	{r7, lr}
 800c1d4:	b086      	sub	sp, #24
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	60f8      	str	r0, [r7, #12]
 800c1da:	607a      	str	r2, [r7, #4]
 800c1dc:	603b      	str	r3, [r7, #0]
 800c1de:	460b      	mov	r3, r1
 800c1e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c1f0:	7af9      	ldrb	r1, [r7, #11]
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	f7f6 ff9c 	bl	8003132 <HAL_PCD_EP_Transmit>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1fe:	7dfb      	ldrb	r3, [r7, #23]
 800c200:	4618      	mov	r0, r3
 800c202:	f000 f88f 	bl	800c324 <USBD_Get_USB_Status>
 800c206:	4603      	mov	r3, r0
 800c208:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c20a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3718      	adds	r7, #24
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b086      	sub	sp, #24
 800c218:	af00      	add	r7, sp, #0
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	607a      	str	r2, [r7, #4]
 800c21e:	603b      	str	r3, [r7, #0]
 800c220:	460b      	mov	r3, r1
 800c222:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c224:	2300      	movs	r3, #0
 800c226:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c228:	2300      	movs	r3, #0
 800c22a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c232:	7af9      	ldrb	r1, [r7, #11]
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	687a      	ldr	r2, [r7, #4]
 800c238:	f7f6 ff30 	bl	800309c <HAL_PCD_EP_Receive>
 800c23c:	4603      	mov	r3, r0
 800c23e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c240:	7dfb      	ldrb	r3, [r7, #23]
 800c242:	4618      	mov	r0, r3
 800c244:	f000 f86e 	bl	800c324 <USBD_Get_USB_Status>
 800c248:	4603      	mov	r3, r0
 800c24a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c24c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3718      	adds	r7, #24
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
	...

0800c258 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	460b      	mov	r3, r1
 800c262:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c264:	78fb      	ldrb	r3, [r7, #3]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d002      	beq.n	800c270 <HAL_PCDEx_LPM_Callback+0x18>
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d01f      	beq.n	800c2ae <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c26e:	e03b      	b.n	800c2e8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6a1b      	ldr	r3, [r3, #32]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d007      	beq.n	800c288 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800c278:	f7f4 fd9a 	bl	8000db0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c27c:	4b1c      	ldr	r3, [pc, #112]	; (800c2f0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c27e:	691b      	ldr	r3, [r3, #16]
 800c280:	4a1b      	ldr	r2, [pc, #108]	; (800c2f0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c282:	f023 0306 	bic.w	r3, r3, #6
 800c286:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	6812      	ldr	r2, [r2, #0]
 800c296:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c29a:	f023 0301 	bic.w	r3, r3, #1
 800c29e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7fb ff06 	bl	80080b8 <USBD_LL_Resume>
    break;
 800c2ac:	e01c      	b.n	800c2e8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	687a      	ldr	r2, [r7, #4]
 800c2ba:	6812      	ldr	r2, [r2, #0]
 800c2bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c2c0:	f043 0301 	orr.w	r3, r3, #1
 800c2c4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f7fb fedd 	bl	800808c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6a1b      	ldr	r3, [r3, #32]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d005      	beq.n	800c2e6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c2da:	4b05      	ldr	r3, [pc, #20]	; (800c2f0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c2dc:	691b      	ldr	r3, [r3, #16]
 800c2de:	4a04      	ldr	r2, [pc, #16]	; (800c2f0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c2e0:	f043 0306 	orr.w	r3, r3, #6
 800c2e4:	6113      	str	r3, [r2, #16]
    break;
 800c2e6:	bf00      	nop
}
 800c2e8:	bf00      	nop
 800c2ea:	3708      	adds	r7, #8
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}
 800c2f0:	e000ed00 	.word	0xe000ed00

0800c2f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b083      	sub	sp, #12
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c2fc:	4b03      	ldr	r3, [pc, #12]	; (800c30c <USBD_static_malloc+0x18>)
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	370c      	adds	r7, #12
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr
 800c30a:	bf00      	nop
 800c30c:	20004f74 	.word	0x20004f74

0800c310 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c310:	b480      	push	{r7}
 800c312:	b083      	sub	sp, #12
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]

}
 800c318:	bf00      	nop
 800c31a:	370c      	adds	r7, #12
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr

0800c324 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c324:	b480      	push	{r7}
 800c326:	b085      	sub	sp, #20
 800c328:	af00      	add	r7, sp, #0
 800c32a:	4603      	mov	r3, r0
 800c32c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c32e:	2300      	movs	r3, #0
 800c330:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c332:	79fb      	ldrb	r3, [r7, #7]
 800c334:	2b03      	cmp	r3, #3
 800c336:	d817      	bhi.n	800c368 <USBD_Get_USB_Status+0x44>
 800c338:	a201      	add	r2, pc, #4	; (adr r2, 800c340 <USBD_Get_USB_Status+0x1c>)
 800c33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c33e:	bf00      	nop
 800c340:	0800c351 	.word	0x0800c351
 800c344:	0800c357 	.word	0x0800c357
 800c348:	0800c35d 	.word	0x0800c35d
 800c34c:	0800c363 	.word	0x0800c363
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c350:	2300      	movs	r3, #0
 800c352:	73fb      	strb	r3, [r7, #15]
    break;
 800c354:	e00b      	b.n	800c36e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c356:	2303      	movs	r3, #3
 800c358:	73fb      	strb	r3, [r7, #15]
    break;
 800c35a:	e008      	b.n	800c36e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c35c:	2301      	movs	r3, #1
 800c35e:	73fb      	strb	r3, [r7, #15]
    break;
 800c360:	e005      	b.n	800c36e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c362:	2303      	movs	r3, #3
 800c364:	73fb      	strb	r3, [r7, #15]
    break;
 800c366:	e002      	b.n	800c36e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c368:	2303      	movs	r3, #3
 800c36a:	73fb      	strb	r3, [r7, #15]
    break;
 800c36c:	bf00      	nop
  }
  return usb_status;
 800c36e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c370:	4618      	mov	r0, r3
 800c372:	3714      	adds	r7, #20
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr

0800c37c <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800c37c:	b480      	push	{r7}
 800c37e:	b083      	sub	sp, #12
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	4608      	mov	r0, r1
 800c386:	4611      	mov	r1, r2
 800c388:	461a      	mov	r2, r3
 800c38a:	4603      	mov	r3, r0
 800c38c:	70fb      	strb	r3, [r7, #3]
 800c38e:	460b      	mov	r3, r1
 800c390:	70bb      	strb	r3, [r7, #2]
 800c392:	4613      	mov	r3, r2
 800c394:	707b      	strb	r3, [r7, #1]
                return 0;
 800c396:	2300      	movs	r3, #0
        }
 800c398:	4618      	mov	r0, r3
 800c39a:	370c      	adds	r7, #12
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800c3a4:	b480      	push	{r7}
 800c3a6:	b083      	sub	sp, #12
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	4608      	mov	r0, r1
 800c3ae:	4611      	mov	r1, r2
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	70fb      	strb	r3, [r7, #3]
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	70bb      	strb	r3, [r7, #2]
 800c3ba:	4613      	mov	r3, r2
 800c3bc:	707b      	strb	r3, [r7, #1]
                return 0;
 800c3be:	2300      	movs	r3, #0
        }
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	370c      	adds	r7, #12
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr

0800c3cc <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
                return 0;
 800c3d4:	2300      	movs	r3, #0
        }
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	370c      	adds	r7, #12
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e0:	4770      	bx	lr

0800c3e2 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 800c3e2:	b480      	push	{r7}
 800c3e4:	b083      	sub	sp, #12
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
                return 0;
 800c3ea:	2300      	movs	r3, #0
        }
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	370c      	adds	r7, #12
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr

0800c3f8 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 800c3f8:	b480      	push	{r7}
 800c3fa:	b083      	sub	sp, #12
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
                return 0;
 800c400:	2300      	movs	r3, #0
        }
 800c402:	4618      	mov	r0, r3
 800c404:	370c      	adds	r7, #12
 800c406:	46bd      	mov	sp, r7
 800c408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40c:	4770      	bx	lr

0800c40e <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 800c40e:	b480      	push	{r7}
 800c410:	b083      	sub	sp, #12
 800c412:	af00      	add	r7, sp, #0
 800c414:	6078      	str	r0, [r7, #4]
 800c416:	460b      	mov	r3, r1
 800c418:	70fb      	strb	r3, [r7, #3]
                return;
 800c41a:	bf00      	nop
        } // Note used for hubs only!
 800c41c:	370c      	adds	r7, #12
 800c41e:	46bd      	mov	sp, r7
 800c420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c424:	4770      	bx	lr

0800c426 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 800c426:	b480      	push	{r7}
 800c428:	b083      	sub	sp, #12
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
 800c42e:	460b      	mov	r3, r1
 800c430:	807b      	strh	r3, [r7, #2]
 800c432:	4613      	mov	r3, r2
 800c434:	803b      	strh	r3, [r7, #0]
                return false;
 800c436:	2300      	movs	r3, #0
        }
 800c438:	4618      	mov	r0, r3
 800c43a:	370c      	adds	r7, #12
 800c43c:	46bd      	mov	sp, r7
 800c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c442:	4770      	bx	lr

0800c444 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 800c444:	b480      	push	{r7}
 800c446:	b083      	sub	sp, #12
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
 800c44c:	460b      	mov	r3, r1
 800c44e:	70fb      	strb	r3, [r7, #3]
                return false;
 800c450:	2300      	movs	r3, #0
        }
 800c452:	4618      	mov	r0, r3
 800c454:	370c      	adds	r7, #12
 800c456:	46bd      	mov	sp, r7
 800c458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45c:	4770      	bx	lr

0800c45e <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 800c45e:	b480      	push	{r7}
 800c460:	b083      	sub	sp, #12
 800c462:	af00      	add	r7, sp, #0
 800c464:	6078      	str	r0, [r7, #4]
 800c466:	460b      	mov	r3, r1
 800c468:	70fb      	strb	r3, [r7, #3]
                return true;
 800c46a:	2301      	movs	r3, #1
        }
 800c46c:	4618      	mov	r0, r3
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 800c478:	b480      	push	{r7}
 800c47a:	b083      	sub	sp, #12
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
                return (AddressPool&)addrPool;
 800c480:	687b      	ldr	r3, [r7, #4]
        };
 800c482:	4618      	mov	r0, r3
 800c484:	370c      	adds	r7, #12
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr

0800c48e <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 800c48e:	b480      	push	{r7}
 800c490:	b085      	sub	sp, #20
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
 800c496:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800c498:	2300      	movs	r3, #0
 800c49a:	73fb      	strb	r3, [r7, #15]
 800c49c:	7bfb      	ldrb	r3, [r7, #15]
 800c49e:	2b0f      	cmp	r3, #15
 800c4a0:	d812      	bhi.n	800c4c8 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3a>
                        if(!devConfig[i]) {
 800c4a2:	7bfa      	ldrb	r2, [r7, #15]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	321e      	adds	r2, #30
 800c4a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d107      	bne.n	800c4c0 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x32>
                                devConfig[i] = pdev;
 800c4b0:	7bfa      	ldrb	r2, [r7, #15]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	321e      	adds	r2, #30
 800c4b6:	6839      	ldr	r1, [r7, #0]
 800c4b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                return 0;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	e004      	b.n	800c4ca <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3c>
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800c4c0:	7bfb      	ldrb	r3, [r7, #15]
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	73fb      	strb	r3, [r7, #15]
 800c4c6:	e7e9      	b.n	800c49c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0xe>
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 800c4c8:	23d3      	movs	r3, #211	; 0xd3
        };
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3714      	adds	r7, #20
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d4:	4770      	bx	lr

0800c4d6 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 800c4d6:	b480      	push	{r7}
 800c4d8:	b083      	sub	sp, #12
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	6078      	str	r0, [r7, #4]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	701a      	strb	r2, [r3, #0]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	705a      	strb	r2, [r3, #1]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	709a      	strb	r2, [r3, #2]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	70da      	strb	r2, [r3, #3]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	711a      	strb	r2, [r3, #4]
        };
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	370c      	adds	r7, #12
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr

0800c504 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 800c504:	b480      	push	{r7}
 800c506:	b083      	sub	sp, #12
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2200      	movs	r2, #0
 800c510:	601a      	str	r2, [r3, #0]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2200      	movs	r2, #0
 800c516:	711a      	strb	r2, [r3, #4]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2200      	movs	r2, #0
 800c51c:	715a      	strb	r2, [r3, #5]
        };
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	4618      	mov	r0, r3
 800c522:	370c      	adds	r7, #12
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr

0800c52c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 800c52c:	b480      	push	{r7}
 800c52e:	b083      	sub	sp, #12
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	601a      	str	r2, [r3, #0]
                countDown = valueSize = pbuf->valueSize;
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	781a      	ldrb	r2, [r3, #0]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	715a      	strb	r2, [r3, #5]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	795a      	ldrb	r2, [r3, #5]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	711a      	strb	r2, [r3, #4]
        };
 800c550:	bf00      	nop
 800c552:	370c      	adds	r7, #12
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr

0800c55c <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 800c55c:	b480      	push	{r7}
 800c55e:	b083      	sub	sp, #12
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2200      	movs	r2, #0
 800c568:	601a      	str	r2, [r3, #0]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2200      	movs	r2, #0
 800c56e:	711a      	strb	r2, [r3, #4]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2200      	movs	r2, #0
 800c574:	80da      	strh	r2, [r3, #6]
        };
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	4618      	mov	r0, r3
 800c57a:	370c      	adds	r7, #12
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr

0800c584 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 800c584:	b480      	push	{r7}
 800c586:	b083      	sub	sp, #12
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	601a      	str	r2, [r3, #0]
                countDown = 0;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2200      	movs	r2, #0
 800c59c:	80da      	strh	r2, [r3, #6]
        };
 800c59e:	bf00      	nop
 800c5a0:	370c      	adds	r7, #12
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr

0800c5aa <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 800c5aa:	b480      	push	{r7}
 800c5ac:	b085      	sub	sp, #20
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	60f8      	str	r0, [r7, #12]
 800c5b2:	60b9      	str	r1, [r7, #8]
 800c5b4:	607a      	str	r2, [r7, #4]
 800c5b6:	807b      	strh	r3, [r7, #2]
                switch(nStage) {
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	791b      	ldrb	r3, [r3, #4]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d002      	beq.n	800c5c6 <_ZN11ByteSkipper4SkipEPPhPtt+0x1c>
 800c5c0:	2b01      	cmp	r3, #1
 800c5c2:	d009      	beq.n	800c5d8 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>
 800c5c4:	e029      	b.n	800c61a <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                        case 0:
                                countDown = bytes_to_skip;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	887a      	ldrh	r2, [r7, #2]
 800c5ca:	80da      	strh	r2, [r3, #6]
                                nStage++;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	791b      	ldrb	r3, [r3, #4]
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	b2da      	uxtb	r2, r3
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	711a      	strb	r2, [r3, #4]
                                // fall through
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	88db      	ldrh	r3, [r3, #6]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d015      	beq.n	800c60c <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	881b      	ldrh	r3, [r3, #0]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d011      	beq.n	800c60c <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	88db      	ldrh	r3, [r3, #6]
 800c5ec:	3b01      	subs	r3, #1
 800c5ee:	b29a      	uxth	r2, r3
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	80da      	strh	r2, [r3, #6]
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	1c5a      	adds	r2, r3, #1
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	601a      	str	r2, [r3, #0]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	881b      	ldrh	r3, [r3, #0]
 800c602:	3b01      	subs	r3, #1
 800c604:	b29a      	uxth	r2, r3
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	801a      	strh	r2, [r3, #0]
 800c60a:	e7e5      	b.n	800c5d8 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>

                                if(!countDown)
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	88db      	ldrh	r3, [r3, #6]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d102      	bne.n	800c61a <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                                        nStage = 0;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2200      	movs	r2, #0
 800c618:	711a      	strb	r2, [r3, #4]
                };
                return (!countDown);
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	88db      	ldrh	r3, [r3, #6]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	bf0c      	ite	eq
 800c622:	2301      	moveq	r3, #1
 800c624:	2300      	movne	r3, #0
 800c626:	b2db      	uxtb	r3, r3
        };
 800c628:	4618      	mov	r0, r3
 800c62a:	3714      	adds	r7, #20
 800c62c:	46bd      	mov	sp, r7
 800c62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c632:	4770      	bx	lr

0800c634 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	4608      	mov	r0, r1
 800c63e:	4611      	mov	r1, r2
 800c640:	461a      	mov	r2, r3
 800c642:	4603      	mov	r3, r0
 800c644:	70fb      	strb	r3, [r7, #3]
 800c646:	460b      	mov	r3, r1
 800c648:	70bb      	strb	r3, [r7, #2]
 800c64a:	4613      	mov	r3, r2
 800c64c:	707b      	strb	r3, [r7, #1]
        };
 800c64e:	bf00      	nop
 800c650:	370c      	adds	r7, #12
 800c652:	46bd      	mov	sp, r7
 800c654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c658:	4770      	bx	lr
	...

0800c65c <_ZN15USBDeviceConfigC1Ev>:
class USBDeviceConfig {
 800c65c:	b480      	push	{r7}
 800c65e:	b083      	sub	sp, #12
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	4a04      	ldr	r2, [pc, #16]	; (800c678 <_ZN15USBDeviceConfigC1Ev+0x1c>)
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	601a      	str	r2, [r3, #0]
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	4618      	mov	r0, r3
 800c66e:	370c      	adds	r7, #12
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr
 800c678:	080129c8 	.word	0x080129c8

0800c67c <_ZN17UsbConfigXtracterC1Ev>:
class UsbConfigXtracter {
 800c67c:	b480      	push	{r7}
 800c67e:	b083      	sub	sp, #12
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	4a04      	ldr	r2, [pc, #16]	; (800c698 <_ZN17UsbConfigXtracterC1Ev+0x1c>)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	601a      	str	r2, [r3, #0]
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	4618      	mov	r0, r3
 800c68e:	370c      	adds	r7, #12
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr
 800c698:	080129b0 	.word	0x080129b0

0800c69c <_ZN3BTD10GetAddressEv>:
        virtual uint8_t GetAddress() {
 800c69c:	b480      	push	{r7}
 800c69e:	b083      	sub	sp, #12
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
                return bAddress;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
        };
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	370c      	adds	r7, #12
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b4:	4770      	bx	lr

0800c6b6 <_ZN3BTD7isReadyEv>:
        virtual bool isReady() {
 800c6b6:	b480      	push	{r7}
 800c6b8:	b083      	sub	sp, #12
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
                return bPollEnable;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
        };
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	370c      	adds	r7, #12
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ce:	4770      	bx	lr

0800c6d0 <_ZN3BTD10DEVCLASSOKEh>:
        virtual bool DEVCLASSOK(uint8_t klass) {
 800c6d0:	b480      	push	{r7}
 800c6d2:	b083      	sub	sp, #12
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	460b      	mov	r3, r1
 800c6da:	70fb      	strb	r3, [r7, #3]
                return (klass == USB_CLASS_WIRELESS_CTRL);
 800c6dc:	78fb      	ldrb	r3, [r7, #3]
 800c6de:	2be0      	cmp	r3, #224	; 0xe0
 800c6e0:	bf0c      	ite	eq
 800c6e2:	2301      	moveq	r3, #1
 800c6e4:	2300      	movne	r3, #0
 800c6e6:	b2db      	uxtb	r3, r3
        };
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	370c      	adds	r7, #12
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr

0800c6f4 <_ZN3BTD8VIDPIDOKEtt>:
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 800c6f4:	b480      	push	{r7}
 800c6f6:	b083      	sub	sp, #12
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	807b      	strh	r3, [r7, #2]
 800c700:	4613      	mov	r3, r2
 800c702:	803b      	strh	r3, [r7, #0]
                if((vid == IOGEAR_GBU521_VID && pid == IOGEAR_GBU521_PID) || (vid == BELKIN_F8T065BF_VID && pid == BELKIN_F8T065BF_PID))
 800c704:	887b      	ldrh	r3, [r7, #2]
 800c706:	f640 225c 	movw	r2, #2652	; 0xa5c
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d104      	bne.n	800c718 <_ZN3BTD8VIDPIDOKEtt+0x24>
 800c70e:	883b      	ldrh	r3, [r7, #0]
 800c710:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800c714:	4293      	cmp	r3, r2
 800c716:	d009      	beq.n	800c72c <_ZN3BTD8VIDPIDOKEtt+0x38>
 800c718:	887b      	ldrh	r3, [r7, #2]
 800c71a:	f240 520d 	movw	r2, #1293	; 0x50d
 800c71e:	4293      	cmp	r3, r2
 800c720:	d106      	bne.n	800c730 <_ZN3BTD8VIDPIDOKEtt+0x3c>
 800c722:	883b      	ldrh	r3, [r7, #0]
 800c724:	f240 625a 	movw	r2, #1626	; 0x65a
 800c728:	4293      	cmp	r3, r2
 800c72a:	d101      	bne.n	800c730 <_ZN3BTD8VIDPIDOKEtt+0x3c>
                        return true;
 800c72c:	2301      	movs	r3, #1
 800c72e:	e02d      	b.n	800c78c <_ZN3BTD8VIDPIDOKEtt+0x98>
                if(my_bdaddr[0] != 0x00 || my_bdaddr[1] != 0x00 || my_bdaddr[2] != 0x00 || my_bdaddr[3] != 0x00 || my_bdaddr[4] != 0x00 || my_bdaddr[5] != 0x00) { // Check if Bluetooth address is set
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	7d1b      	ldrb	r3, [r3, #20]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d113      	bne.n	800c760 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	7d5b      	ldrb	r3, [r3, #21]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d10f      	bne.n	800c760 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	7d9b      	ldrb	r3, [r3, #22]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d10b      	bne.n	800c760 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	7ddb      	ldrb	r3, [r3, #23]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d107      	bne.n	800c760 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	7e1b      	ldrb	r3, [r3, #24]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d103      	bne.n	800c760 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	7e5b      	ldrb	r3, [r3, #25]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d014      	beq.n	800c78a <_ZN3BTD8VIDPIDOKEtt+0x96>
                        if(vid == PS3_VID && (pid == PS3_PID || pid == PS3NAVIGATION_PID || pid == PS3MOVE_PID))
 800c760:	887b      	ldrh	r3, [r7, #2]
 800c762:	f240 524c 	movw	r2, #1356	; 0x54c
 800c766:	4293      	cmp	r3, r2
 800c768:	d10f      	bne.n	800c78a <_ZN3BTD8VIDPIDOKEtt+0x96>
 800c76a:	883b      	ldrh	r3, [r7, #0]
 800c76c:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800c770:	d009      	beq.n	800c786 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800c772:	883b      	ldrh	r3, [r7, #0]
 800c774:	f240 422f 	movw	r2, #1071	; 0x42f
 800c778:	4293      	cmp	r3, r2
 800c77a:	d004      	beq.n	800c786 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800c77c:	883b      	ldrh	r3, [r7, #0]
 800c77e:	f240 32d5 	movw	r2, #981	; 0x3d5
 800c782:	4293      	cmp	r3, r2
 800c784:	d101      	bne.n	800c78a <_ZN3BTD8VIDPIDOKEtt+0x96>
                                return true;
 800c786:	2301      	movs	r3, #1
 800c788:	e000      	b.n	800c78c <_ZN3BTD8VIDPIDOKEtt+0x98>
                return false;
 800c78a:	2300      	movs	r3, #0
        };
 800c78c:	4618      	mov	r0, r3
 800c78e:	370c      	adds	r7, #12
 800c790:	46bd      	mov	sp, r7
 800c792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c796:	4770      	bx	lr

0800c798 <_ZN3BTDC1EP3USB>:
const uint8_t BTD::BTD_CONTROL_PIPE = 0;
const uint8_t BTD::BTD_EVENT_PIPE = 1;
const uint8_t BTD::BTD_DATAIN_PIPE = 2;
const uint8_t BTD::BTD_DATAOUT_PIPE = 3;

BTD::BTD(USB *p) :
 800c798:	b580      	push	{r7, lr}
 800c79a:	b084      	sub	sp, #16
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	6039      	str	r1, [r7, #0]
bAddress(0), // Device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
simple_pairing_supported(false),
bPollEnable(false) // Don't start polling before dongle is connected
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f7ff ff59 	bl	800c65c <_ZN15USBDeviceConfigC1Ev>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	3304      	adds	r3, #4
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f7ff ff64 	bl	800c67c <_ZN17UsbConfigXtracterC1Ev>
 800c7b4:	4a2b      	ldr	r2, [pc, #172]	; (800c864 <_ZN3BTDC1EP3USB+0xcc>)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	601a      	str	r2, [r3, #0]
 800c7ba:	4a2b      	ldr	r2, [pc, #172]	; (800c868 <_ZN3BTDC1EP3USB+0xd0>)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	605a      	str	r2, [r3, #4]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	683a      	ldr	r2, [r7, #0]
 800c7ec:	64da      	str	r2, [r3, #76]	; 0x4c
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2201      	movs	r2, #1
 800c7fa:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2200      	movs	r2, #0
 800c802:	661a      	str	r2, [r3, #96]	; 0x60
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2200      	movs	r2, #0
 800c808:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2200      	movs	r2, #0
 800c810:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2200      	movs	r2, #0
 800c818:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
{
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800c81c:	2300      	movs	r3, #0
 800c81e:	73fb      	strb	r3, [r7, #15]
 800c820:	7bfb      	ldrb	r3, [r7, #15]
 800c822:	2b03      	cmp	r3, #3
 800c824:	d80a      	bhi.n	800c83c <_ZN3BTDC1EP3USB+0xa4>
                btService[i] = NULL;
 800c826:	7bfb      	ldrb	r3, [r7, #15]
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	3318      	adds	r3, #24
 800c82c:	009b      	lsls	r3, r3, #2
 800c82e:	4413      	add	r3, r2
 800c830:	2200      	movs	r2, #0
 800c832:	605a      	str	r2, [r3, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800c834:	7bfb      	ldrb	r3, [r7, #15]
 800c836:	3301      	adds	r3, #1
 800c838:	73fb      	strb	r3, [r7, #15]
 800c83a:	e7f1      	b.n	800c820 <_ZN3BTDC1EP3USB+0x88>

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f000 fa7d 	bl	800cd3c <_ZN3BTD10InitializeEv>

        if(pUsb) // Register in USB subsystem
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c846:	2b00      	cmp	r3, #0
 800c848:	d006      	beq.n	800c858 <_ZN3BTDC1EP3USB+0xc0>
                pUsb->RegisterDeviceClass(this); // Set devConfig[] entry
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	4611      	mov	r1, r2
 800c852:	4618      	mov	r0, r3
 800c854:	f7ff fe1b 	bl	800c48e <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	4618      	mov	r0, r3
 800c85c:	3710      	adds	r7, #16
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
 800c862:	bf00      	nop
 800c864:	08012970 	.word	0x08012970
 800c868:	080129a4 	.word	0x080129a4

0800c86c <_ZN3BTD15ConfigureDeviceEhhb>:

uint8_t BTD::ConfigureDevice(uint8_t parent, uint8_t port, bool lowspeed) {
 800c86c:	b590      	push	{r4, r7, lr}
 800c86e:	b08f      	sub	sp, #60	; 0x3c
 800c870:	af02      	add	r7, sp, #8
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	4608      	mov	r0, r1
 800c876:	4611      	mov	r1, r2
 800c878:	461a      	mov	r2, r3
 800c87a:	4603      	mov	r3, r0
 800c87c:	70fb      	strb	r3, [r7, #3]
 800c87e:	460b      	mov	r3, r1
 800c880:	70bb      	strb	r3, [r7, #2]
 800c882:	4613      	mov	r3, r2
 800c884:	707b      	strb	r3, [r7, #1]
        const uint8_t constBufSize = sizeof (USB_DEVICE_DESCRIPTOR);
 800c886:	2312      	movs	r3, #18
 800c888:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        uint8_t buf[constBufSize];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 800c88c:	f107 0308 	add.w	r3, r7, #8
 800c890:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t rcode;
        UsbDevice *p = NULL;
 800c892:	2300      	movs	r3, #0
 800c894:	627b      	str	r3, [r7, #36]	; 0x24
        EpInfo *oldep_ptr = NULL;
 800c896:	2300      	movs	r3, #0
 800c898:	623b      	str	r3, [r7, #32]

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f000 fa4e 	bl	800cd3c <_ZN3BTD10InitializeEv>

        AddressPool &addrPool = pUsb->GetAddressPool(); // Get memory address of USB device address pool
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f7ff fde7 	bl	800c478 <_ZN3USB14GetAddressPoolEv>
 800c8aa:	61f8      	str	r0, [r7, #28]
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD ConfigureDevice"), 0x80);
#endif

        if(bAddress) { // Check if address has already been assigned to an instance
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d001      	beq.n	800c8ba <_ZN3BTD15ConfigureDeviceEhhb+0x4e>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 800c8b6:	23d9      	movs	r3, #217	; 0xd9
 800c8b8:	e087      	b.n	800c9ca <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        p = addrPool.GetUsbDevicePtr(0); // Get pointer to pseudo device with address 0 assigned
 800c8ba:	69fb      	ldr	r3, [r7, #28]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	2100      	movs	r1, #0
 800c8c2:	69f8      	ldr	r0, [r7, #28]
 800c8c4:	4798      	blx	r3
 800c8c6:	6278      	str	r0, [r7, #36]	; 0x24
        if(!p) {
 800c8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d101      	bne.n	800c8d2 <_ZN3BTD15ConfigureDeviceEhhb+0x66>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800c8ce:	23d6      	movs	r3, #214	; 0xd6
 800c8d0:	e07b      	b.n	800c9ca <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if(!p->epinfo) {
 800c8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d101      	bne.n	800c8de <_ZN3BTD15ConfigureDeviceEhhb+0x72>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 800c8da:	23d7      	movs	r3, #215	; 0xd7
 800c8dc:	e075      	b.n	800c9ca <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        oldep_ptr = p->epinfo; // Save old pointer to EP_RECORD of address 0
 800c8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	623b      	str	r3, [r7, #32]
        p->epinfo = epInfo; // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f103 0251 	add.w	r2, r3, #81	; 0x51
 800c8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ec:	601a      	str	r2, [r3, #0]
        p->lowspeed = lowspeed;
 800c8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f0:	787a      	ldrb	r2, [r7, #1]
 800c8f2:	719a      	strb	r2, [r3, #6]
        rcode = pUsb->getDevDescr(0, 0, constBufSize, (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c8f8:	f107 0308 	add.w	r3, r7, #8
 800c8fc:	9300      	str	r3, [sp, #0]
 800c8fe:	2312      	movs	r3, #18
 800c900:	2200      	movs	r2, #0
 800c902:	2100      	movs	r1, #0
 800c904:	f005 fa13 	bl	8011d2e <_ZN3USB11getDevDescrEhhtPh>
 800c908:	4603      	mov	r3, r0
 800c90a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        p->epinfo = oldep_ptr; // Restore p->epinfo
 800c90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c910:	6a3a      	ldr	r2, [r7, #32]
 800c912:	601a      	str	r2, [r3, #0]

        if(rcode)
 800c914:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d146      	bne.n	800c9aa <_ZN3BTD15ConfigureDeviceEhhb+0x13e>
                goto FailGetDevDescr;

        bAddress = addrPool.AllocAddress(parent, false, port); // Allocate new address according to device class
 800c91c:	69fb      	ldr	r3, [r7, #28]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	3304      	adds	r3, #4
 800c922:	681c      	ldr	r4, [r3, #0]
 800c924:	78bb      	ldrb	r3, [r7, #2]
 800c926:	78f9      	ldrb	r1, [r7, #3]
 800c928:	2200      	movs	r2, #0
 800c92a:	69f8      	ldr	r0, [r7, #28]
 800c92c:	47a0      	blx	r4
 800c92e:	4603      	mov	r3, r0
 800c930:	461a      	mov	r2, r3
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(!bAddress) {
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d101      	bne.n	800c946 <_ZN3BTD15ConfigureDeviceEhhb+0xda>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nOut of address space"), 0x80);
#endif
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800c942:	23d4      	movs	r3, #212	; 0xd4
 800c944:	e041      	b.n	800c9ca <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if (udd->bDeviceClass == 0x09) // Some dongles have an USB hub inside
 800c946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c948:	791b      	ldrb	r3, [r3, #4]
 800c94a:	2b09      	cmp	r3, #9
 800c94c:	d017      	beq.n	800c97e <_ZN3BTD15ConfigureDeviceEhhb+0x112>
                goto FailHub;

        epInfo[0].maxPktSize = udd->bMaxPacketSize0; // Extract Max Packet Size from device descriptor
 800c94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c950:	79da      	ldrb	r2, [r3, #7]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        epInfo[1].epAddr = udd->bNumConfigurations; // Steal and abuse from epInfo structure to save memory
 800c958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c95a:	7c5a      	ldrb	r2, [r3, #17]
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        VID = udd->idVendor;
 800c962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c964:	891b      	ldrh	r3, [r3, #8]
 800c966:	b29a      	uxth	r2, r3
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        PID = udd->idProduct;
 800c96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c970:	895b      	ldrh	r3, [r3, #10]
 800c972:	b29a      	uxth	r2, r3
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

        return USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET;
 800c97a:	23e0      	movs	r3, #224	; 0xe0
 800c97c:	e025      	b.n	800c9ca <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailHub;
 800c97e:	bf00      	nop

FailHub:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nPlease create a hub instance in your code: \"USBHub Hub1(&Usb);\""), 0x80);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800c98a:	2300      	movs	r3, #0
 800c98c:	2200      	movs	r2, #0
 800c98e:	f005 fa6b 	bl	8011e68 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800c992:	23d1      	movs	r3, #209	; 0xd1
 800c994:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	3308      	adds	r3, #8
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	4798      	blx	r3
        return rcode;
 800c9a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9a8:	e00f      	b.n	800c9ca <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailGetDevDescr;
 800c9aa:	bf00      	nop

FailGetDevDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetDevDescr(rcode);
#endif
        if(rcode != hrJERR)
 800c9ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9b0:	2b0d      	cmp	r3, #13
 800c9b2:	d002      	beq.n	800c9ba <_ZN3BTD15ConfigureDeviceEhhb+0x14e>
                rcode = USB_ERROR_FailGetDevDescr;
 800c9b4:	23e1      	movs	r3, #225	; 0xe1
 800c9b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	3308      	adds	r3, #8
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	4798      	blx	r3
        return rcode;
 800c9c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
};
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3734      	adds	r7, #52	; 0x34
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd90      	pop	{r4, r7, pc}

0800c9d2 <_ZN3BTD4InitEhhb>:

uint8_t BTD::Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed) {
 800c9d2:	b580      	push	{r7, lr}
 800c9d4:	b096      	sub	sp, #88	; 0x58
 800c9d6:	af02      	add	r7, sp, #8
 800c9d8:	6078      	str	r0, [r7, #4]
 800c9da:	4608      	mov	r0, r1
 800c9dc:	4611      	mov	r1, r2
 800c9de:	461a      	mov	r2, r3
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	70fb      	strb	r3, [r7, #3]
 800c9e4:	460b      	mov	r3, r1
 800c9e6:	70bb      	strb	r3, [r7, #2]
 800c9e8:	4613      	mov	r3, r2
 800c9ea:	707b      	strb	r3, [r7, #1]
        uint8_t rcode;
        uint8_t num_of_conf = epInfo[1].epAddr; // Number of configurations
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c9f2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        epInfo[1].epAddr = 0;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        AddressPool &addrPool = pUsb->GetAddressPool();
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7ff fd38 	bl	800c478 <_ZN3USB14GetAddressPoolEv>
 800ca08:	64b8      	str	r0, [r7, #72]	; 0x48
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD Init"), 0x80);
#endif
        UsbDevice *p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800ca0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	687a      	ldr	r2, [r7, #4]
 800ca12:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800ca16:	4611      	mov	r1, r2
 800ca18:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ca1a:	4798      	blx	r3
 800ca1c:	6478      	str	r0, [r7, #68]	; 0x44

        if(!p) {
 800ca1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d101      	bne.n	800ca28 <_ZN3BTD4InitEhhb+0x56>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800ca24:	23d6      	movs	r3, #214	; 0xd6
 800ca26:	e185      	b.n	800cd34 <_ZN3BTD4InitEhhb+0x362>
        }

        delay(300); // Assign new address to the device
 800ca28:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ca2c:	f7f5 fa5e 	bl	8001eec <HAL_Delay>

        rcode = pUsb->setAddr(0, 0, bAddress); // Assign new address to the device
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	2100      	movs	r1, #0
 800ca3e:	f005 fa13 	bl	8011e68 <_ZN3USB7setAddrEhhh>
 800ca42:	4603      	mov	r3, r0
 800ca44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode) {
 800ca48:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d003      	beq.n	800ca58 <_ZN3BTD4InitEhhb+0x86>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                p->lowspeed = false;
 800ca50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca52:	2200      	movs	r2, #0
 800ca54:	719a      	strb	r2, [r3, #6]
                goto Fail;
 800ca56:	e165      	b.n	800cd24 <_ZN3BTD4InitEhhb+0x352>
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif

        p->lowspeed = false;
 800ca58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	719a      	strb	r2, [r3, #6]

        p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800ca5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	687a      	ldr	r2, [r7, #4]
 800ca66:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800ca6a:	4611      	mov	r1, r2
 800ca6c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ca6e:	4798      	blx	r3
 800ca70:	6478      	str	r0, [r7, #68]	; 0x44
        if(!p) {
 800ca72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d101      	bne.n	800ca7c <_ZN3BTD4InitEhhb+0xaa>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800ca78:	23d6      	movs	r3, #214	; 0xd6
 800ca7a:	e15b      	b.n	800cd34 <_ZN3BTD4InitEhhb+0x362>
        }

        p->lowspeed = lowspeed;
 800ca7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca7e:	787a      	ldrb	r2, [r7, #1]
 800ca80:	719a      	strb	r2, [r3, #6]

        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo); // Assign epInfo to epinfo pointer - only EP0 is known
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	3351      	adds	r3, #81	; 0x51
 800ca90:	2201      	movs	r2, #1
 800ca92:	f004 f8dc 	bl	8010c4e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800ca96:	4603      	mov	r3, r0
 800ca98:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode)
 800ca9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	f040 8128 	bne.w	800ccf6 <_ZN3BTD4InitEhhb+0x324>
                goto FailSetDevTblEntry;

        if(VID == PS3_VID && (PID == PS3_PID || PID == PS3NAVIGATION_PID || PID == PS3MOVE_PID)) {
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800caac:	f240 524c 	movw	r2, #1356	; 0x54c
 800cab0:	4293      	cmp	r3, r2
 800cab2:	d177      	bne.n	800cba4 <_ZN3BTD4InitEhhb+0x1d2>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800caba:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800cabe:	d00d      	beq.n	800cadc <_ZN3BTD4InitEhhb+0x10a>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800cac6:	f240 422f 	movw	r2, #1071	; 0x42f
 800caca:	4293      	cmp	r3, r2
 800cacc:	d006      	beq.n	800cadc <_ZN3BTD4InitEhhb+0x10a>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800cad4:	f240 32d5 	movw	r2, #981	; 0x3d5
 800cad8:	4293      	cmp	r3, r2
 800cada:	d163      	bne.n	800cba4 <_ZN3BTD4InitEhhb+0x1d2>
                delay(100);
 800cadc:	2064      	movs	r0, #100	; 0x64
 800cade:	f7f5 fa05 	bl	8001eec <HAL_Delay>
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 1); // We only need the Control endpoint, so we don't have to initialize the other endpoints of device
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800caf2:	2301      	movs	r3, #1
 800caf4:	f005 f9e6 	bl	8011ec4 <_ZN3USB7setConfEhhh>
 800caf8:	4603      	mov	r3, r0
 800cafa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800cafe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	f040 80f9 	bne.w	800ccfa <_ZN3BTD4InitEhhb+0x328>
                                Notify(PSTR("\r\nNavigation Controller Connected"), 0x80);
                } else // It must be a Motion controller
                        Notify(PSTR("\r\nMotion Controller Connected"), 0x80);
#endif

                if(my_bdaddr[0] == 0x00 && my_bdaddr[1] == 0x00 && my_bdaddr[2] == 0x00 && my_bdaddr[3] == 0x00 && my_bdaddr[4] == 0x00 && my_bdaddr[5] == 0x00) {
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	7d1b      	ldrb	r3, [r3, #20]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d113      	bne.n	800cb38 <_ZN3BTD4InitEhhb+0x166>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	7d5b      	ldrb	r3, [r3, #21]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d10f      	bne.n	800cb38 <_ZN3BTD4InitEhhb+0x166>
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	7d9b      	ldrb	r3, [r3, #22]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d10b      	bne.n	800cb38 <_ZN3BTD4InitEhhb+0x166>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	7ddb      	ldrb	r3, [r3, #23]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d107      	bne.n	800cb38 <_ZN3BTD4InitEhhb+0x166>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	7e1b      	ldrb	r3, [r3, #24]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d103      	bne.n	800cb38 <_ZN3BTD4InitEhhb+0x166>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	7e5b      	ldrb	r3, [r3, #25]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d019      	beq.n	800cb6c <_ZN3BTD4InitEhhb+0x19a>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPlease plug in the dongle before trying to pair with the PS3 Controller\r\nor set the Bluetooth address in the constructor of the PS3BT class"), 0x80);
#endif
                } else {
                        if(PID == PS3_PID || PID == PS3NAVIGATION_PID)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800cb3e:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800cb42:	d006      	beq.n	800cb52 <_ZN3BTD4InitEhhb+0x180>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800cb4a:	f240 422f 	movw	r2, #1071	; 0x42f
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d106      	bne.n	800cb60 <_ZN3BTD4InitEhhb+0x18e>
                                setBdaddr(my_bdaddr); // Set internal Bluetooth address
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	3314      	adds	r3, #20
 800cb56:	4619      	mov	r1, r3
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f002 f8b0 	bl	800ecbe <_ZN3BTD9setBdaddrEPh>
 800cb5e:	e005      	b.n	800cb6c <_ZN3BTD4InitEhhb+0x19a>
                        else
                                setMoveBdaddr(my_bdaddr); // Set internal Bluetooth address
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	3314      	adds	r3, #20
 800cb64:	4619      	mov	r1, r3
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f002 f8e9 	bl	800ed3e <_ZN3BTD13setMoveBdaddrEPh>
                        }
                        D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                }

                pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 0); // Reset configuration value
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	f005 f9a1 	bl	8011ec4 <_ZN3USB7setConfEhhh>
                pUsb->setAddr(bAddress, 0, 0); // Reset address
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	2200      	movs	r2, #0
 800cb90:	f005 f96a 	bl	8011e68 <_ZN3USB7setAddrEhhh>
                Release(); // Release device
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	3308      	adds	r3, #8
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	4798      	blx	r3
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED; // Return
 800cba0:	23d1      	movs	r3, #209	; 0xd1
 800cba2:	e0c7      	b.n	800cd34 <_ZN3BTD4InitEhhb+0x362>
        } else {
                // Check if attached device is a Bluetooth dongle and fill endpoint data structure
                // First interface in the configuration must have Bluetooth assigned Class/Subclass/Protocol
                // And 3 endpoints - interrupt-IN, bulk-IN, bulk-OUT, not necessarily in this order
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800cba4:	2300      	movs	r3, #0
 800cba6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800cbaa:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800cbae:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d25e      	bcs.n	800cc74 <_ZN3BTD4InitEhhb+0x2a2>
                        if((VID == IOGEAR_GBU521_VID && PID == IOGEAR_GBU521_PID) || (VID == BELKIN_F8T065BF_VID && PID == BELKIN_F8T065BF_PID)) {
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800cbbc:	f640 225c 	movw	r2, #2652	; 0xa5c
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d106      	bne.n	800cbd2 <_ZN3BTD4InitEhhb+0x200>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800cbca:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d00d      	beq.n	800cbee <_ZN3BTD4InitEhhb+0x21c>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800cbd8:	f240 520d 	movw	r2, #1293	; 0x50d
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d120      	bne.n	800cc22 <_ZN3BTD4InitEhhb+0x250>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800cbe6:	f240 625a 	movw	r2, #1626	; 0x65a
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d119      	bne.n	800cc22 <_ZN3BTD4InitEhhb+0x250>
                                ConfigDescParser<USB_CLASS_VENDOR_SPECIFIC, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Workaround issue with some dongles
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	1d1a      	adds	r2, r3, #4
 800cbf2:	f107 0308 	add.w	r3, r7, #8
 800cbf6:	4611      	mov	r1, r2
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f002 f8f3 	bl	800ede4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cc08:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800cc0c:	f107 0308 	add.w	r3, r7, #8
 800cc10:	9300      	str	r3, [sp, #0]
 800cc12:	4613      	mov	r3, r2
 800cc14:	2200      	movs	r2, #0
 800cc16:	f005 f8da 	bl	8011dce <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800cc20:	e018      	b.n	800cc54 <_ZN3BTD4InitEhhb+0x282>
                        } else {
                                ConfigDescParser<USB_CLASS_WIRELESS_CTRL, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Set class id according to the specification
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	1d1a      	adds	r2, r3, #4
 800cc26:	f107 0308 	add.w	r3, r7, #8
 800cc2a:	4611      	mov	r1, r2
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f002 f927 	bl	800ee80 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cc3c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800cc40:	f107 0308 	add.w	r3, r7, #8
 800cc44:	9300      	str	r3, [sp, #0]
 800cc46:	4613      	mov	r3, r2
 800cc48:	2200      	movs	r2, #0
 800cc4a:	f005 f8c0 	bl	8011dce <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        }
                        if(rcode) // Check error code
 800cc54:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d150      	bne.n	800ccfe <_ZN3BTD4InitEhhb+0x32c>
                                goto FailGetConfDescr;
                        if(bNumEP >= BTD_MAX_ENDPOINTS) // All endpoints extracted
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800cc62:	2b03      	cmp	r3, #3
 800cc64:	d805      	bhi.n	800cc72 <_ZN3BTD4InitEhhb+0x2a0>
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800cc66:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800cc70:	e79b      	b.n	800cbaa <_ZN3BTD4InitEhhb+0x1d8>
                                break;
 800cc72:	bf00      	nop
                }

                if(bNumEP < BTD_MAX_ENDPOINTS)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800cc7a:	2b03      	cmp	r3, #3
 800cc7c:	d945      	bls.n	800cd0a <_ZN3BTD4InitEhhb+0x338>
                        goto FailUnknownDevice;

                // Assign epInfo to epinfo pointer - this time all 3 endpoins
                rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	3351      	adds	r3, #81	; 0x51
 800cc92:	f003 ffdc 	bl	8010c4e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800cc96:	4603      	mov	r3, r0
 800cc98:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800cc9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d12e      	bne.n	800cd02 <_ZN3BTD4InitEhhb+0x330>
                        goto FailSetDevTblEntry;

                // Set Configuration Value
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bConfNum);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ccba:	f005 f903 	bl	8011ec4 <_ZN3USB7setConfEhhh>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800ccc4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d11c      	bne.n	800cd06 <_ZN3BTD4InitEhhb+0x334>
                        goto FailSetConfDescr;

                hci_num_reset_loops = 100; // only loop 100 times before trying to send the hci reset command
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2264      	movs	r2, #100	; 0x64
 800ccd0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                hci_counter = 0;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                hci_state = HCI_INIT_STATE;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2200      	movs	r2, #0
 800cce0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                waitingForConnection = false;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2200      	movs	r2, #0
 800cce8:	721a      	strb	r2, [r3, #8]
                bPollEnable = true;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2201      	movs	r2, #1
 800ccee:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nBluetooth Dongle Initialized"), 0x80);
#endif
        }
        return 0; // Successful configuration
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	e01e      	b.n	800cd34 <_ZN3BTD4InitEhhb+0x362>
                goto FailSetDevTblEntry;
 800ccf6:	bf00      	nop
 800ccf8:	e014      	b.n	800cd24 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 800ccfa:	bf00      	nop
 800ccfc:	e012      	b.n	800cd24 <_ZN3BTD4InitEhhb+0x352>
                                goto FailGetConfDescr;
 800ccfe:	bf00      	nop
 800cd00:	e010      	b.n	800cd24 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetDevTblEntry;
 800cd02:	bf00      	nop
 800cd04:	e00e      	b.n	800cd24 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 800cd06:	bf00      	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 800cd08:	e00c      	b.n	800cd24 <_ZN3BTD4InitEhhb+0x352>
                        goto FailUnknownDevice;
 800cd0a:	bf00      	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cd16:	2300      	movs	r3, #0
 800cd18:	2200      	movs	r2, #0
 800cd1a:	f005 f8a5 	bl	8011e68 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800cd1e:	23d1      	movs	r3, #209	; 0xd1
 800cd20:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nBTD Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	3308      	adds	r3, #8
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	4798      	blx	r3
        return rcode;
 800cd30:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3750      	adds	r7, #80	; 0x50
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}

0800cd3c <_ZN3BTD10InitializeEv>:

void BTD::Initialize() {
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b084      	sub	sp, #16
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800cd44:	2300      	movs	r3, #0
 800cd46:	73fb      	strb	r3, [r7, #15]
 800cd48:	7bfb      	ldrb	r3, [r7, #15]
 800cd4a:	2b03      	cmp	r3, #3
 800cd4c:	d845      	bhi.n	800cdda <_ZN3BTD10InitializeEv+0x9e>
                epInfo[i].epAddr = 0;
 800cd4e:	7bfa      	ldrb	r2, [r7, #15]
 800cd50:	6879      	ldr	r1, [r7, #4]
 800cd52:	4613      	mov	r3, r2
 800cd54:	005b      	lsls	r3, r3, #1
 800cd56:	4413      	add	r3, r2
 800cd58:	440b      	add	r3, r1
 800cd5a:	3351      	adds	r3, #81	; 0x51
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	701a      	strb	r2, [r3, #0]
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 800cd60:	7bfb      	ldrb	r3, [r7, #15]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d001      	beq.n	800cd6a <_ZN3BTD10InitializeEv+0x2e>
 800cd66:	2000      	movs	r0, #0
 800cd68:	e000      	b.n	800cd6c <_ZN3BTD10InitializeEv+0x30>
 800cd6a:	2008      	movs	r0, #8
 800cd6c:	7bfa      	ldrb	r2, [r7, #15]
 800cd6e:	6879      	ldr	r1, [r7, #4]
 800cd70:	4613      	mov	r3, r2
 800cd72:	005b      	lsls	r3, r3, #1
 800cd74:	4413      	add	r3, r2
 800cd76:	440b      	add	r3, r1
 800cd78:	3352      	adds	r3, #82	; 0x52
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	701a      	strb	r2, [r3, #0]
                epInfo[i].bmSndToggle = 0;
 800cd7e:	7bfa      	ldrb	r2, [r7, #15]
 800cd80:	6879      	ldr	r1, [r7, #4]
 800cd82:	4613      	mov	r3, r2
 800cd84:	005b      	lsls	r3, r3, #1
 800cd86:	4413      	add	r3, r2
 800cd88:	440b      	add	r3, r1
 800cd8a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800cd8e:	78d3      	ldrb	r3, [r2, #3]
 800cd90:	f36f 0300 	bfc	r3, #0, #1
 800cd94:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmRcvToggle = 0;
 800cd96:	7bfa      	ldrb	r2, [r7, #15]
 800cd98:	6879      	ldr	r1, [r7, #4]
 800cd9a:	4613      	mov	r3, r2
 800cd9c:	005b      	lsls	r3, r3, #1
 800cd9e:	4413      	add	r3, r2
 800cda0:	440b      	add	r3, r1
 800cda2:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800cda6:	78d3      	ldrb	r3, [r2, #3]
 800cda8:	f36f 0341 	bfc	r3, #1, #1
 800cdac:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 800cdae:	7bfb      	ldrb	r3, [r7, #15]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d001      	beq.n	800cdb8 <_ZN3BTD10InitializeEv+0x7c>
 800cdb4:	2101      	movs	r1, #1
 800cdb6:	e000      	b.n	800cdba <_ZN3BTD10InitializeEv+0x7e>
 800cdb8:	210f      	movs	r1, #15
 800cdba:	7bfa      	ldrb	r2, [r7, #15]
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	4613      	mov	r3, r2
 800cdc0:	005b      	lsls	r3, r3, #1
 800cdc2:	4413      	add	r3, r2
 800cdc4:	4403      	add	r3, r0
 800cdc6:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800cdca:	78d3      	ldrb	r3, [r2, #3]
 800cdcc:	f361 0387 	bfi	r3, r1, #2, #6
 800cdd0:	70d3      	strb	r3, [r2, #3]
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800cdd2:	7bfb      	ldrb	r3, [r7, #15]
 800cdd4:	3301      	adds	r3, #1
 800cdd6:	73fb      	strb	r3, [r7, #15]
 800cdd8:	e7b6      	b.n	800cd48 <_ZN3BTD10InitializeEv+0xc>
        }
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800cdda:	2300      	movs	r3, #0
 800cddc:	73fb      	strb	r3, [r7, #15]
 800cdde:	7bfb      	ldrb	r3, [r7, #15]
 800cde0:	2b03      	cmp	r3, #3
 800cde2:	d81c      	bhi.n	800ce1e <_ZN3BTD10InitializeEv+0xe2>
                if(btService[i])
 800cde4:	7bfb      	ldrb	r3, [r7, #15]
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	3318      	adds	r3, #24
 800cdea:	009b      	lsls	r3, r3, #2
 800cdec:	4413      	add	r3, r2
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d010      	beq.n	800ce16 <_ZN3BTD10InitializeEv+0xda>
                        btService[i]->Reset(); // Reset all Bluetooth services
 800cdf4:	7bfb      	ldrb	r3, [r7, #15]
 800cdf6:	687a      	ldr	r2, [r7, #4]
 800cdf8:	3318      	adds	r3, #24
 800cdfa:	009b      	lsls	r3, r3, #2
 800cdfc:	4413      	add	r3, r2
 800cdfe:	6859      	ldr	r1, [r3, #4]
 800ce00:	7bfb      	ldrb	r3, [r7, #15]
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	3318      	adds	r3, #24
 800ce06:	009b      	lsls	r3, r3, #2
 800ce08:	4413      	add	r3, r2
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	3308      	adds	r3, #8
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	4608      	mov	r0, r1
 800ce14:	4798      	blx	r3
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800ce16:	7bfb      	ldrb	r3, [r7, #15]
 800ce18:	3301      	adds	r3, #1
 800ce1a:	73fb      	strb	r3, [r7, #15]
 800ce1c:	e7df      	b.n	800cdde <_ZN3BTD10InitializeEv+0xa2>
        }

        connectToWii = false;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2200      	movs	r2, #0
 800ce22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        incomingWii = false;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        connectToHIDDevice = false;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2200      	movs	r2, #0
 800ce32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        incomingHIDDevice = false;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        incomingPSController = false;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2200      	movs	r2, #0
 800ce42:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        bAddress = 0; // Clear device address
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        bNumEP = 1; // Must have to be reset to 1
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2201      	movs	r2, #1
 800ce52:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        qNextPollTime = 0; // Reset next poll time
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	661a      	str	r2, [r3, #96]	; 0x60
        pollInterval = 0;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bPollEnable = false; // Don't start polling before dongle is connected
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2200      	movs	r2, #0
 800ce68:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        simple_pairing_supported = false;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
}
 800ce74:	bf00      	nop
 800ce76:	3710      	adds	r7, #16
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:

/* Extracts interrupt-IN, bulk-IN, bulk-OUT endpoint information from config descriptor */
void BTD::EndpointXtract(uint8_t conf, uint8_t iface __attribute__((unused)), uint8_t alt, uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *pep) {
 800ce7c:	b480      	push	{r7}
 800ce7e:	b085      	sub	sp, #20
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	4608      	mov	r0, r1
 800ce86:	4611      	mov	r1, r2
 800ce88:	461a      	mov	r2, r3
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	70fb      	strb	r3, [r7, #3]
 800ce8e:	460b      	mov	r3, r1
 800ce90:	70bb      	strb	r3, [r7, #2]
 800ce92:	4613      	mov	r3, r2
 800ce94:	707b      	strb	r3, [r7, #1]
        //ErrorMessage<uint8_t>(PSTR("Conf.Val"),conf);
        //ErrorMessage<uint8_t>(PSTR("Iface Num"),iface);
        //ErrorMessage<uint8_t>(PSTR("Alt.Set"),alt);

        if(alt) // Wrong interface - by BT spec, no alt setting
 800ce96:	787b      	ldrb	r3, [r7, #1]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d15d      	bne.n	800cf58 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xdc>
                return;

        bConfNum = conf;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	78fa      	ldrb	r2, [r7, #3]
 800cea0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) { // Interrupt In endpoint found
 800cea4:	69fb      	ldr	r3, [r7, #28]
 800cea6:	78db      	ldrb	r3, [r3, #3]
 800cea8:	f003 0303 	and.w	r3, r3, #3
 800ceac:	2b03      	cmp	r3, #3
 800ceae:	d114      	bne.n	800ceda <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
 800ceb0:	69fb      	ldr	r3, [r7, #28]
 800ceb2:	789b      	ldrb	r3, [r3, #2]
 800ceb4:	b25b      	sxtb	r3, r3
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	da0f      	bge.n	800ceda <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
                index = BTD_EVENT_PIPE;
 800ceba:	2301      	movs	r3, #1
 800cebc:	73fb      	strb	r3, [r7, #15]
                epInfo[index].bmNakPower = USB_NAK_NOWAIT;
 800cebe:	7bfa      	ldrb	r2, [r7, #15]
 800cec0:	6879      	ldr	r1, [r7, #4]
 800cec2:	4613      	mov	r3, r2
 800cec4:	005b      	lsls	r3, r3, #1
 800cec6:	4413      	add	r3, r2
 800cec8:	440b      	add	r3, r1
 800ceca:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800cece:	78d3      	ldrb	r3, [r2, #3]
 800ced0:	2101      	movs	r1, #1
 800ced2:	f361 0387 	bfi	r3, r1, #2, #6
 800ced6:	70d3      	strb	r3, [r2, #3]
 800ced8:	e00e      	b.n	800cef8 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7c>
        } else if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_BULK) // Bulk endpoint found
 800ceda:	69fb      	ldr	r3, [r7, #28]
 800cedc:	78db      	ldrb	r3, [r3, #3]
 800cede:	f003 0303 	and.w	r3, r3, #3
 800cee2:	2b02      	cmp	r3, #2
 800cee4:	d13a      	bne.n	800cf5c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe0>
                index = ((pep->bEndpointAddress & 0x80) == 0x80) ? BTD_DATAIN_PIPE : BTD_DATAOUT_PIPE;
 800cee6:	69fb      	ldr	r3, [r7, #28]
 800cee8:	789b      	ldrb	r3, [r3, #2]
 800ceea:	b25b      	sxtb	r3, r3
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	da01      	bge.n	800cef4 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x78>
 800cef0:	2302      	movs	r3, #2
 800cef2:	e000      	b.n	800cef6 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7a>
 800cef4:	2303      	movs	r3, #3
 800cef6:	73fb      	strb	r3, [r7, #15]
        else
            return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 800cef8:	69fb      	ldr	r3, [r7, #28]
 800cefa:	789b      	ldrb	r3, [r3, #2]
 800cefc:	7bfa      	ldrb	r2, [r7, #15]
 800cefe:	f003 030f 	and.w	r3, r3, #15
 800cf02:	b2d8      	uxtb	r0, r3
 800cf04:	6879      	ldr	r1, [r7, #4]
 800cf06:	4613      	mov	r3, r2
 800cf08:	005b      	lsls	r3, r3, #1
 800cf0a:	4413      	add	r3, r2
 800cf0c:	440b      	add	r3, r1
 800cf0e:	3351      	adds	r3, #81	; 0x51
 800cf10:	4602      	mov	r2, r0
 800cf12:	701a      	strb	r2, [r3, #0]
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 800cf14:	69fb      	ldr	r3, [r7, #28]
 800cf16:	889b      	ldrh	r3, [r3, #4]
 800cf18:	b29b      	uxth	r3, r3
 800cf1a:	7bfa      	ldrb	r2, [r7, #15]
 800cf1c:	b2d8      	uxtb	r0, r3
 800cf1e:	6879      	ldr	r1, [r7, #4]
 800cf20:	4613      	mov	r3, r2
 800cf22:	005b      	lsls	r3, r3, #1
 800cf24:	4413      	add	r3, r2
 800cf26:	440b      	add	r3, r1
 800cf28:	3352      	adds	r3, #82	; 0x52
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	701a      	strb	r2, [r3, #0]
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800cf34:	69fb      	ldr	r3, [r7, #28]
 800cf36:	799b      	ldrb	r3, [r3, #6]
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	d204      	bcs.n	800cf46 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xca>
                pollInterval = pep->bInterval;
 800cf3c:	69fb      	ldr	r3, [r7, #28]
 800cf3e:	799a      	ldrb	r2, [r3, #6]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bNumEP++;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	b2da      	uxtb	r2, r3
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800cf56:	e002      	b.n	800cf5e <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
                return;
 800cf58:	bf00      	nop
 800cf5a:	e000      	b.n	800cf5e <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
            return;
 800cf5c:	bf00      	nop
}
 800cf5e:	3714      	adds	r7, #20
 800cf60:	46bd      	mov	sp, r7
 800cf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf66:	4770      	bx	lr

0800cf68 <_ZThn4_N3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 800cf68:	f1a0 0004 	sub.w	r0, r0, #4
 800cf6c:	f7ff bf86 	b.w	800ce7c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

0800cf70 <_ZN3BTD7ReleaseEv>:
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}

/* Performs a cleanup after failed Init() attempt */
uint8_t BTD::Release() {
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
        Initialize(); // Set all variables, endpoint structs etc. to default values
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f7ff fedf 	bl	800cd3c <_ZN3BTD10InitializeEv>
        pUsb->GetAddressPool().FreeAddress(bAddress);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7ff fa78 	bl	800c478 <_ZN3USB14GetAddressPoolEv>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	3208      	adds	r2, #8
 800cf8e:	6812      	ldr	r2, [r2, #0]
 800cf90:	6879      	ldr	r1, [r7, #4]
 800cf92:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
 800cf96:	4618      	mov	r0, r3
 800cf98:	4790      	blx	r2
        return 0;
 800cf9a:	2300      	movs	r3, #0
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3708      	adds	r7, #8
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <_ZN3BTD4PollEv>:

uint8_t BTD::Poll() {
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
        if(!bPollEnable)
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800cfb2:	f083 0301 	eor.w	r3, r3, #1
 800cfb6:	b2db      	uxtb	r3, r3
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d001      	beq.n	800cfc0 <_ZN3BTD4PollEv+0x1c>
                return 0;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	e01d      	b.n	800cffc <_ZN3BTD4PollEv+0x58>
        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Don't poll if shorter than polling interval
 800cfc0:	f7f4 ff88 	bl	8001ed4 <HAL_GetTick>
 800cfc4:	4602      	mov	r2, r0
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cfca:	1ad3      	subs	r3, r2, r3
 800cfcc:	43db      	mvns	r3, r3
 800cfce:	0fdb      	lsrs	r3, r3, #31
 800cfd0:	b2db      	uxtb	r3, r3
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d011      	beq.n	800cffa <_ZN3BTD4PollEv+0x56>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 800cfd6:	f7f4 ff7d 	bl	8001ed4 <HAL_GetTick>
 800cfda:	4602      	mov	r2, r0
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800cfe2:	441a      	add	r2, r3
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	661a      	str	r2, [r3, #96]	; 0x60
                HCI_event_task(); // Poll the HCI event pipe
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f000 f80b 	bl	800d004 <_ZN3BTD14HCI_event_taskEv>
                HCI_task(); // HCI state machine
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f000 fb22 	bl	800d638 <_ZN3BTD8HCI_taskEv>
                ACL_event_task(); // Poll the ACL input pipe too
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f000 fe4b 	bl	800dc90 <_ZN3BTD14ACL_event_taskEv>
        }
        return 0;
 800cffa:	2300      	movs	r3, #0
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3708      	adds	r7, #8
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}

0800d004 <_ZN3BTD14HCI_event_taskEv>:
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
                if(btService[i])
                        btService[i]->disconnect();
};

void BTD::HCI_event_task() {
 800d004:	b5b0      	push	{r4, r5, r7, lr}
 800d006:	b088      	sub	sp, #32
 800d008:	af02      	add	r7, sp, #8
 800d00a:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE; // Request more than 16 bytes anyway, the inTransfer routine will take care of this
 800d00c:	2340      	movs	r3, #64	; 0x40
 800d00e:	81bb      	strh	r3, [r7, #12]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_EVENT_PIPE ].epAddr, &length, hcibuf, pollInterval); // Input on endpoint 1
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	3389      	adds	r3, #137	; 0x89
 800d024:	687a      	ldr	r2, [r7, #4]
 800d026:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800d02a:	f107 050c 	add.w	r5, r7, #12
 800d02e:	9201      	str	r2, [sp, #4]
 800d030:	9300      	str	r3, [sp, #0]
 800d032:	462b      	mov	r3, r5
 800d034:	4622      	mov	r2, r4
 800d036:	f003 ff72 	bl	8010f1e <_ZN3USB10inTransferEhhPtPhh>
 800d03a:	4603      	mov	r3, r0
 800d03c:	73fb      	strb	r3, [r7, #15]

        if(!rcode || rcode == hrNAK) { // Check for errors
 800d03e:	7bfb      	ldrb	r3, [r7, #15]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d003      	beq.n	800d04c <_ZN3BTD14HCI_event_taskEv+0x48>
 800d044:	7bfb      	ldrb	r3, [r7, #15]
 800d046:	2b04      	cmp	r3, #4
 800d048:	f040 82f1 	bne.w	800d62e <_ZN3BTD14HCI_event_taskEv+0x62a>
                switch(hcibuf[0]) { // Switch on event type
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800d052:	3b01      	subs	r3, #1
 800d054:	2b35      	cmp	r3, #53	; 0x35
 800d056:	f200 82ea 	bhi.w	800d62e <_ZN3BTD14HCI_event_taskEv+0x62a>
 800d05a:	a201      	add	r2, pc, #4	; (adr r2, 800d060 <_ZN3BTD14HCI_event_taskEv+0x5c>)
 800d05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d060:	0800d241 	.word	0x0800d241
 800d064:	0800d2a1 	.word	0x0800d2a1
 800d068:	0800d3f9 	.word	0x0800d3f9
 800d06c:	0800d4e3 	.word	0x0800d4e3
 800d070:	0800d455 	.word	0x0800d455
 800d074:	0800d5a1 	.word	0x0800d5a1
 800d078:	0800d487 	.word	0x0800d487
 800d07c:	0800d619 	.word	0x0800d619
 800d080:	0800d619 	.word	0x0800d619
 800d084:	0800d62f 	.word	0x0800d62f
 800d088:	0800d62f 	.word	0x0800d62f
 800d08c:	0800d619 	.word	0x0800d619
 800d090:	0800d619 	.word	0x0800d619
 800d094:	0800d139 	.word	0x0800d139
 800d098:	0800d619 	.word	0x0800d619
 800d09c:	0800d62f 	.word	0x0800d62f
 800d0a0:	0800d62f 	.word	0x0800d62f
 800d0a4:	0800d619 	.word	0x0800d619
 800d0a8:	0800d619 	.word	0x0800d619
 800d0ac:	0800d62f 	.word	0x0800d62f
 800d0b0:	0800d62f 	.word	0x0800d62f
 800d0b4:	0800d56f 	.word	0x0800d56f
 800d0b8:	0800d599 	.word	0x0800d599
 800d0bc:	0800d619 	.word	0x0800d619
 800d0c0:	0800d619 	.word	0x0800d619
 800d0c4:	0800d619 	.word	0x0800d619
 800d0c8:	0800d619 	.word	0x0800d619
 800d0cc:	0800d62f 	.word	0x0800d62f
 800d0d0:	0800d62f 	.word	0x0800d62f
 800d0d4:	0800d62f 	.word	0x0800d62f
 800d0d8:	0800d62f 	.word	0x0800d62f
 800d0dc:	0800d619 	.word	0x0800d619
 800d0e0:	0800d62f 	.word	0x0800d62f
 800d0e4:	0800d62f 	.word	0x0800d62f
 800d0e8:	0800d62f 	.word	0x0800d62f
 800d0ec:	0800d62f 	.word	0x0800d62f
 800d0f0:	0800d62f 	.word	0x0800d62f
 800d0f4:	0800d62f 	.word	0x0800d62f
 800d0f8:	0800d62f 	.word	0x0800d62f
 800d0fc:	0800d62f 	.word	0x0800d62f
 800d100:	0800d62f 	.word	0x0800d62f
 800d104:	0800d62f 	.word	0x0800d62f
 800d108:	0800d62f 	.word	0x0800d62f
 800d10c:	0800d62f 	.word	0x0800d62f
 800d110:	0800d62f 	.word	0x0800d62f
 800d114:	0800d62f 	.word	0x0800d62f
 800d118:	0800d62f 	.word	0x0800d62f
 800d11c:	0800d62f 	.word	0x0800d62f
 800d120:	0800d609 	.word	0x0800d609
 800d124:	0800d619 	.word	0x0800d619
 800d128:	0800d611 	.word	0x0800d611
 800d12c:	0800d62f 	.word	0x0800d62f
 800d130:	0800d62f 	.word	0x0800d62f
 800d134:	0800d619 	.word	0x0800d619
                        case EV_COMMAND_COMPLETE:
                                if(!hcibuf[5]) { // Check if command succeeded
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800d13e:	2b00      	cmp	r3, #0
 800d140:	f040 826c 	bne.w	800d61c <_ZN3BTD14HCI_event_taskEv+0x618>
                                        hci_set_flag(HCI_FLAG_CMD_COMPLETE); // Set command complete flag
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d14a:	f043 0301 	orr.w	r3, r3, #1
 800d14e:	b29a      	uxth	r2, r3
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        if((hcibuf[3] == 0x01) && (hcibuf[4] == 0x10)) { // Parameters from read local version information
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d15c:	2b01      	cmp	r3, #1
 800d15e:	d114      	bne.n	800d18a <_ZN3BTD14HCI_event_taskEv+0x186>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d166:	2b10      	cmp	r3, #16
 800d168:	d10f      	bne.n	800d18a <_ZN3BTD14HCI_event_taskEv+0x186>
                                                hci_version = hcibuf[6]; // Used to check if it supports 2.0+EDR - see http://www.bluetooth.org/Technical/AssignedNumbers/hci.htm
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f893 208f 	ldrb.w	r2, [r3, #143]	; 0x8f
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                                if(!hci_check_flag(HCI_FLAG_READ_VERSION)) {
                                                        Notify(PSTR("\r\nHCI version: "), 0x80);
                                                        D_PrintHex<uint8_t > (hci_version, 0x80);
                                                }
#endif
                                                hci_set_flag(HCI_FLAG_READ_VERSION);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d17c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d180:	b29a      	uxth	r2, r3
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800d188:	e059      	b.n	800d23e <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x04) && (hcibuf[4] == 0x10)) { // Parameters from read local extended features
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d190:	2b04      	cmp	r3, #4
 800d192:	d12a      	bne.n	800d1ea <_ZN3BTD14HCI_event_taskEv+0x1e6>
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d19a:	2b10      	cmp	r3, #16
 800d19c:	d125      	bne.n	800d1ea <_ZN3BTD14HCI_event_taskEv+0x1e6>
                                                if(!hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d1a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d114      	bne.n	800d1d6 <_ZN3BTD14HCI_event_taskEv+0x1d2>
                                                        for(uint8_t i = 0; i < 8; i++) {
                                                                Notify(PSTR(" "), 0x80);
                                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                                        }
#endif
                                                        if(hcibuf[6] == 0) { // Page 0
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d10f      	bne.n	800d1d6 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
#endif
                                                                if(hcibuf[8 + 6] & (1U << 3)) {
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800d1bc:	f003 0308 	and.w	r3, r3, #8
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d004      	beq.n	800d1ce <_ZN3BTD14HCI_event_taskEv+0x1ca>
                                                                        simple_pairing_supported = true;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2201      	movs	r2, #1
 800d1c8:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800d1cc:	e003      	b.n	800d1d6 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("supports"), 0x80);
#endif
                                                                } else {
                                                                        simple_pairing_supported = false;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
                                                                Notify(PSTR(" secure simple pairing (host support)"), 0x80);
#endif
                                                        }
                                                }

                                                hci_set_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d1dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d1e0:	b29a      	uxth	r2, r3
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800d1e8:	e029      	b.n	800d23e <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x09) && (hcibuf[4] == 0x10)) { // Parameters from read local bluetooth address
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d1f0:	2b09      	cmp	r3, #9
 800d1f2:	f040 8213 	bne.w	800d61c <_ZN3BTD14HCI_event_taskEv+0x618>
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d1fc:	2b10      	cmp	r3, #16
 800d1fe:	f040 820d 	bne.w	800d61c <_ZN3BTD14HCI_event_taskEv+0x618>
                                                for(uint8_t i = 0; i < 6; i++)
 800d202:	2300      	movs	r3, #0
 800d204:	75fb      	strb	r3, [r7, #23]
 800d206:	7dfb      	ldrb	r3, [r7, #23]
 800d208:	2b05      	cmp	r3, #5
 800d20a:	d80e      	bhi.n	800d22a <_ZN3BTD14HCI_event_taskEv+0x226>
                                                        my_bdaddr[i] = hcibuf[6 + i];
 800d20c:	7dfb      	ldrb	r3, [r7, #23]
 800d20e:	1d9a      	adds	r2, r3, #6
 800d210:	7dfb      	ldrb	r3, [r7, #23]
 800d212:	6879      	ldr	r1, [r7, #4]
 800d214:	440a      	add	r2, r1
 800d216:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d21a:	687a      	ldr	r2, [r7, #4]
 800d21c:	4413      	add	r3, r2
 800d21e:	460a      	mov	r2, r1
 800d220:	751a      	strb	r2, [r3, #20]
                                                for(uint8_t i = 0; i < 6; i++)
 800d222:	7dfb      	ldrb	r3, [r7, #23]
 800d224:	3301      	adds	r3, #1
 800d226:	75fb      	strb	r3, [r7, #23]
 800d228:	e7ed      	b.n	800d206 <_ZN3BTD14HCI_event_taskEv+0x202>
                                                hci_set_flag(HCI_FLAG_READ_BDADDR);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d230:	f043 0320 	orr.w	r3, r3, #32
 800d234:	b29a      	uxth	r2, r3
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        }
                                }
                                break;
 800d23c:	e1ee      	b.n	800d61c <_ZN3BTD14HCI_event_taskEv+0x618>
 800d23e:	e1ed      	b.n	800d61c <_ZN3BTD14HCI_event_taskEv+0x618>
#endif
                                }
                                break;

                        case EV_INQUIRY_COMPLETE:
                                if(inquiry_counter >= 5 && (pairWithWii || pairWithHIDDevice)) {
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800d246:	2b04      	cmp	r3, #4
 800d248:	d921      	bls.n	800d28e <_ZN3BTD14HCI_event_taskEv+0x28a>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d250:	2b00      	cmp	r3, #0
 800d252:	d104      	bne.n	800d25e <_ZN3BTD14HCI_event_taskEv+0x25a>
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d017      	beq.n	800d28e <_ZN3BTD14HCI_event_taskEv+0x28a>
                                        inquiry_counter = 0;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2200      	movs	r2, #0
 800d262:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nCouldn't find Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nCouldn't find HID device"), 0x80);
#endif
                                        connectToWii = false;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2200      	movs	r2, #0
 800d26a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        pairWithWii = false;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                                        connectToHIDDevice = false;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2200      	movs	r2, #0
 800d27a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                        pairWithHIDDevice = false;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2200      	movs	r2, #0
 800d282:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                        hci_state = HCI_SCANNING_STATE;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	220a      	movs	r2, #10
 800d28a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                }
                                inquiry_counter++;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800d294:	3301      	adds	r3, #1
 800d296:	b2da      	uxtb	r2, r3
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                break;
 800d29e:	e1c6      	b.n	800d62e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_INQUIRY_RESULT:
                                if(hcibuf[2]) { // Check that there is more than zero responses
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	f000 81ba 	beq.w	800d620 <_ZN3BTD14HCI_event_taskEv+0x61c>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nNumber of responses: "), 0x80);
                                        Notify(hcibuf[2], 0x80);
#endif
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	75bb      	strb	r3, [r7, #22]
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d2b6:	7dba      	ldrb	r2, [r7, #22]
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	f080 81b1 	bcs.w	800d620 <_ZN3BTD14HCI_event_taskEv+0x61c>
                                                uint8_t offset = 8 * hcibuf[2] + 3 * i;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d2c4:	00db      	lsls	r3, r3, #3
 800d2c6:	b2da      	uxtb	r2, r3
 800d2c8:	7dbb      	ldrb	r3, [r7, #22]
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	0049      	lsls	r1, r1, #1
 800d2ce:	440b      	add	r3, r1
 800d2d0:	b2db      	uxtb	r3, r3
 800d2d2:	4413      	add	r3, r2
 800d2d4:	73bb      	strb	r3, [r7, #14]

                                                for(uint8_t j = 0; j < 3; j++)
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	757b      	strb	r3, [r7, #21]
 800d2da:	7d7b      	ldrb	r3, [r7, #21]
 800d2dc:	2b02      	cmp	r3, #2
 800d2de:	d811      	bhi.n	800d304 <_ZN3BTD14HCI_event_taskEv+0x300>
                                                        classOfDevice[j] = hcibuf[j + 4 + offset];
 800d2e0:	7d7b      	ldrb	r3, [r7, #21]
 800d2e2:	1d1a      	adds	r2, r3, #4
 800d2e4:	7bbb      	ldrb	r3, [r7, #14]
 800d2e6:	441a      	add	r2, r3
 800d2e8:	7d7b      	ldrb	r3, [r7, #21]
 800d2ea:	6879      	ldr	r1, [r7, #4]
 800d2ec:	440a      	add	r2, r1
 800d2ee:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d2f2:	687a      	ldr	r2, [r7, #4]
 800d2f4:	4413      	add	r3, r2
 800d2f6:	460a      	mov	r2, r1
 800d2f8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                                for(uint8_t j = 0; j < 3; j++)
 800d2fc:	7d7b      	ldrb	r3, [r7, #21]
 800d2fe:	3301      	adds	r3, #1
 800d300:	757b      	strb	r3, [r7, #21]
 800d302:	e7ea      	b.n	800d2da <_ZN3BTD14HCI_event_taskEv+0x2d6>
                                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                                Notify(PSTR(" "), 0x80);
                                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif

                                                if(pairWithWii && classOfDevice[2] == 0x00 && (classOfDevice[1] == 0x05) && (classOfDevice[0] & 0x0C)) { // See http://wiibrew.org/wiki/Wiimote#SDP_information
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d038      	beq.n	800d380 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d314:	2b00      	cmp	r3, #0
 800d316:	d133      	bne.n	800d380 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800d31e:	2b05      	cmp	r3, #5
 800d320:	d12e      	bne.n	800d380 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d328:	f003 030c 	and.w	r3, r3, #12
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d027      	beq.n	800d380 <_ZN3BTD14HCI_event_taskEv+0x37c>
                                                        checkRemoteName = true; // Check remote name to distinguish between the different controllers
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2201      	movs	r2, #1
 800d334:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

                                                        for(uint8_t j = 0; j < 6; j++)
 800d338:	2300      	movs	r3, #0
 800d33a:	753b      	strb	r3, [r7, #20]
 800d33c:	7d3b      	ldrb	r3, [r7, #20]
 800d33e:	2b05      	cmp	r3, #5
 800d340:	d814      	bhi.n	800d36c <_ZN3BTD14HCI_event_taskEv+0x368>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800d342:	7d3b      	ldrb	r3, [r7, #20]
 800d344:	1cd9      	adds	r1, r3, #3
 800d346:	7dba      	ldrb	r2, [r7, #22]
 800d348:	4613      	mov	r3, r2
 800d34a:	005b      	lsls	r3, r3, #1
 800d34c:	4413      	add	r3, r2
 800d34e:	005b      	lsls	r3, r3, #1
 800d350:	18ca      	adds	r2, r1, r3
 800d352:	7d3b      	ldrb	r3, [r7, #20]
 800d354:	6879      	ldr	r1, [r7, #4]
 800d356:	440a      	add	r2, r1
 800d358:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d35c:	687a      	ldr	r2, [r7, #4]
 800d35e:	4413      	add	r3, r2
 800d360:	460a      	mov	r2, r1
 800d362:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800d364:	7d3b      	ldrb	r3, [r7, #20]
 800d366:	3301      	adds	r3, #1
 800d368:	753b      	strb	r3, [r7, #20]
 800d36a:	e7e7      	b.n	800d33c <_ZN3BTD14HCI_event_taskEv+0x338>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d376:	b29a      	uxth	r2, r3
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800d37e:	e03a      	b.n	800d3f6 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                                } else if(pairWithHIDDevice && (classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad - see: http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d386:	2b00      	cmp	r3, #0
 800d388:	d031      	beq.n	800d3ee <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800d390:	f003 030f 	and.w	r3, r3, #15
 800d394:	2b05      	cmp	r3, #5
 800d396:	d12a      	bne.n	800d3ee <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d39e:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d023      	beq.n	800d3ee <_ZN3BTD14HCI_event_taskEv+0x3ea>
                                                        if(classOfDevice[0] & 0x40)
                                                                Notify(PSTR("\r\nKeyboard found"), 0x80);
                                                        if(classOfDevice[0] & 0x08)
                                                                Notify(PSTR("\r\nGamepad found"), 0x80);
#endif
                                                        for(uint8_t j = 0; j < 6; j++)
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	74fb      	strb	r3, [r7, #19]
 800d3aa:	7cfb      	ldrb	r3, [r7, #19]
 800d3ac:	2b05      	cmp	r3, #5
 800d3ae:	d814      	bhi.n	800d3da <_ZN3BTD14HCI_event_taskEv+0x3d6>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800d3b0:	7cfb      	ldrb	r3, [r7, #19]
 800d3b2:	1cd9      	adds	r1, r3, #3
 800d3b4:	7dba      	ldrb	r2, [r7, #22]
 800d3b6:	4613      	mov	r3, r2
 800d3b8:	005b      	lsls	r3, r3, #1
 800d3ba:	4413      	add	r3, r2
 800d3bc:	005b      	lsls	r3, r3, #1
 800d3be:	18ca      	adds	r2, r1, r3
 800d3c0:	7cfb      	ldrb	r3, [r7, #19]
 800d3c2:	6879      	ldr	r1, [r7, #4]
 800d3c4:	440a      	add	r2, r1
 800d3c6:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	4413      	add	r3, r2
 800d3ce:	460a      	mov	r2, r1
 800d3d0:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800d3d2:	7cfb      	ldrb	r3, [r7, #19]
 800d3d4:	3301      	adds	r3, #1
 800d3d6:	74fb      	strb	r3, [r7, #19]
 800d3d8:	e7e7      	b.n	800d3aa <_ZN3BTD14HCI_event_taskEv+0x3a6>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d3e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3e4:	b29a      	uxth	r2, r3
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800d3ec:	e003      	b.n	800d3f6 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800d3ee:	7dbb      	ldrb	r3, [r7, #22]
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	75bb      	strb	r3, [r7, #22]
 800d3f4:	e75c      	b.n	800d2b0 <_ZN3BTD14HCI_event_taskEv+0x2ac>
                                                }
                                        }
                                }
                                break;
 800d3f6:	e113      	b.n	800d620 <_ZN3BTD14HCI_event_taskEv+0x61c>

                        case EV_CONNECT_COMPLETE:
                                hci_set_flag(HCI_FLAG_CONNECT_EVENT);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d3fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d402:	b29a      	uxth	r2, r3
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                if(!hcibuf[2]) { // Check if connected OK
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d410:	2b00      	cmp	r3, #0
 800d412:	d11a      	bne.n	800d44a <_ZN3BTD14HCI_event_taskEv+0x446>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nConnection established"), 0x80);
#endif
                                        hci_handle = hcibuf[3] | ((hcibuf[4] & 0x0F) << 8); // Store the handle for the ACL connection
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d41a:	b21a      	sxth	r2, r3
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d422:	021b      	lsls	r3, r3, #8
 800d424:	b21b      	sxth	r3, r3
 800d426:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d42a:	b21b      	sxth	r3, r3
 800d42c:	4313      	orrs	r3, r2
 800d42e:	b21b      	sxth	r3, r3
 800d430:	b29a      	uxth	r2, r3
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	835a      	strh	r2, [r3, #26]
                                        hci_set_flag(HCI_FLAG_CONNECT_COMPLETE); // Set connection complete flag
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d43c:	f043 0302 	orr.w	r3, r3, #2
 800d440:	b29a      	uxth	r2, r3
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                }
                                break;
 800d448:	e0f1      	b.n	800d62e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2206      	movs	r2, #6
 800d44e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800d452:	e0ec      	b.n	800d62e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_DISCONNECT_COMPLETE:
                                if(!hcibuf[2]) { // Check if disconnected OK
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	f040 80e2 	bne.w	800d624 <_ZN3BTD14HCI_event_taskEv+0x620>
                                        hci_set_flag(HCI_FLAG_DISCONNECT_COMPLETE); // Set disconnect command complete flag
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d466:	f043 0304 	orr.w	r3, r3, #4
 800d46a:	b29a      	uxth	r2, r3
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE); // Clear connection complete flag
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d478:	f023 0302 	bic.w	r3, r3, #2
 800d47c:	b29a      	uxth	r2, r3
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800d484:	e0ce      	b.n	800d624 <_ZN3BTD14HCI_event_taskEv+0x620>

                        case EV_REMOTE_NAME_COMPLETE:
                                if(!hcibuf[2]) { // Check if reading is OK
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	f040 80cb 	bne.w	800d628 <_ZN3BTD14HCI_event_taskEv+0x624>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800d492:	2300      	movs	r3, #0
 800d494:	74bb      	strb	r3, [r7, #18]
 800d496:	7cbb      	ldrb	r3, [r7, #18]
 800d498:	2b1d      	cmp	r3, #29
 800d49a:	d818      	bhi.n	800d4ce <_ZN3BTD14HCI_event_taskEv+0x4ca>
                                                remote_name[i] = hcibuf[9 + i];
 800d49c:	7cbb      	ldrb	r3, [r7, #18]
 800d49e:	f103 0209 	add.w	r2, r3, #9
 800d4a2:	7cbb      	ldrb	r3, [r7, #18]
 800d4a4:	6879      	ldr	r1, [r7, #4]
 800d4a6:	440a      	add	r2, r1
 800d4a8:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d4ac:	687a      	ldr	r2, [r7, #4]
 800d4ae:	4413      	add	r3, r2
 800d4b0:	460a      	mov	r2, r1
 800d4b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                                                if(remote_name[i] == '\0') // End of string
 800d4b6:	7cbb      	ldrb	r3, [r7, #18]
 800d4b8:	687a      	ldr	r2, [r7, #4]
 800d4ba:	4413      	add	r3, r2
 800d4bc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d003      	beq.n	800d4cc <_ZN3BTD14HCI_event_taskEv+0x4c8>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800d4c4:	7cbb      	ldrb	r3, [r7, #18]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	74bb      	strb	r3, [r7, #18]
 800d4ca:	e7e4      	b.n	800d496 <_ZN3BTD14HCI_event_taskEv+0x492>
                                                        break;
 800d4cc:	bf00      	nop
                                        }
                                        // TODO: Always set '\0' in remote name!
                                        hci_set_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d4d4:	f043 0308 	orr.w	r3, r3, #8
 800d4d8:	b29a      	uxth	r2, r3
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800d4e0:	e0a2      	b.n	800d628 <_ZN3BTD14HCI_event_taskEv+0x624>

                        case EV_INCOMING_CONNECT:
                                for(uint8_t i = 0; i < 6; i++)
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	747b      	strb	r3, [r7, #17]
 800d4e6:	7c7b      	ldrb	r3, [r7, #17]
 800d4e8:	2b05      	cmp	r3, #5
 800d4ea:	d80e      	bhi.n	800d50a <_ZN3BTD14HCI_event_taskEv+0x506>
                                        disc_bdaddr[i] = hcibuf[i + 2];
 800d4ec:	7c7b      	ldrb	r3, [r7, #17]
 800d4ee:	1c9a      	adds	r2, r3, #2
 800d4f0:	7c7b      	ldrb	r3, [r7, #17]
 800d4f2:	6879      	ldr	r1, [r7, #4]
 800d4f4:	440a      	add	r2, r1
 800d4f6:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d4fa:	687a      	ldr	r2, [r7, #4]
 800d4fc:	4413      	add	r3, r2
 800d4fe:	460a      	mov	r2, r1
 800d500:	771a      	strb	r2, [r3, #28]
                                for(uint8_t i = 0; i < 6; i++)
 800d502:	7c7b      	ldrb	r3, [r7, #17]
 800d504:	3301      	adds	r3, #1
 800d506:	747b      	strb	r3, [r7, #17]
 800d508:	e7ed      	b.n	800d4e6 <_ZN3BTD14HCI_event_taskEv+0x4e2>

                                for(uint8_t i = 0; i < 3; i++)
 800d50a:	2300      	movs	r3, #0
 800d50c:	743b      	strb	r3, [r7, #16]
 800d50e:	7c3b      	ldrb	r3, [r7, #16]
 800d510:	2b02      	cmp	r3, #2
 800d512:	d810      	bhi.n	800d536 <_ZN3BTD14HCI_event_taskEv+0x532>
                                        classOfDevice[i] = hcibuf[i + 8];
 800d514:	7c3b      	ldrb	r3, [r7, #16]
 800d516:	f103 0208 	add.w	r2, r3, #8
 800d51a:	7c3b      	ldrb	r3, [r7, #16]
 800d51c:	6879      	ldr	r1, [r7, #4]
 800d51e:	440a      	add	r2, r1
 800d520:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	4413      	add	r3, r2
 800d528:	460a      	mov	r2, r1
 800d52a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                for(uint8_t i = 0; i < 3; i++)
 800d52e:	7c3b      	ldrb	r3, [r7, #16]
 800d530:	3301      	adds	r3, #1
 800d532:	743b      	strb	r3, [r7, #16]
 800d534:	e7eb      	b.n	800d50e <_ZN3BTD14HCI_event_taskEv+0x50a>

                                if((classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800d53c:	f003 030f 	and.w	r3, r3, #15
 800d540:	2b05      	cmp	r3, #5
 800d542:	d10a      	bne.n	800d55a <_ZN3BTD14HCI_event_taskEv+0x556>
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d54a:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d003      	beq.n	800d55a <_ZN3BTD14HCI_event_taskEv+0x556>
                                        if(classOfDevice[0] & 0x40)
                                                Notify(PSTR("\r\nKeyboard is connecting"), 0x80);
                                        if(classOfDevice[0] & 0x08)
                                                Notify(PSTR("\r\nGamepad is connecting"), 0x80);
#endif
                                        incomingHIDDevice = true;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2201      	movs	r2, #1
 800d556:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif
                                hci_set_flag(HCI_FLAG_INCOMING_REQUEST);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d560:	f043 0310 	orr.w	r3, r3, #16
 800d564:	b29a      	uxth	r2, r3
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                break;
 800d56c:	e05f      	b.n	800d62e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_PIN_CODE_REQUEST:
                                if(pairWithWii) {
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d574:	2b00      	cmp	r3, #0
 800d576:	d003      	beq.n	800d580 <_ZN3BTD14HCI_event_taskEv+0x57c>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPairing with Wiimote"), 0x80);
#endif
                                        hci_pin_code_request_reply();
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f000 feec 	bl	800e356 <_ZN3BTD26hci_pin_code_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
#endif
                                        hci_pin_code_negative_request_reply();
                                }
                                break;
 800d57e:	e056      	b.n	800d62e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                } else if(btdPin != NULL) {
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	691b      	ldr	r3, [r3, #16]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d003      	beq.n	800d590 <_ZN3BTD14HCI_event_taskEv+0x58c>
                                        hci_pin_code_request_reply();
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f000 fee4 	bl	800e356 <_ZN3BTD26hci_pin_code_request_replyEv>
                                break;
 800d58e:	e04e      	b.n	800d62e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_pin_code_negative_request_reply();
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	f000 ff93 	bl	800e4bc <_ZN3BTD35hci_pin_code_negative_request_replyEv>
                                break;
 800d596:	e04a      	b.n	800d62e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_LINK_KEY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived Key Request"), 0x80);
#endif
                                hci_link_key_request_negative_reply();
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f000 ffca 	bl	800e532 <_ZN3BTD35hci_link_key_request_negative_replyEv>
                                break;
 800d59e:	e046      	b.n	800d62e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_AUTHENTICATION_COMPLETE:
                                if(!hcibuf[2]) { // Check if pairing was successful
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d123      	bne.n	800d5f2 <_ZN3BTD14HCI_event_taskEv+0x5ee>
                                        if(pairWithWii && !connectToWii) {
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d00c      	beq.n	800d5ce <_ZN3BTD14HCI_event_taskEv+0x5ca>
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d5ba:	f083 0301 	eor.w	r3, r3, #1
 800d5be:	b2db      	uxtb	r3, r3
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d004      	beq.n	800d5ce <_ZN3BTD14HCI_event_taskEv+0x5ca>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nPairing successful with Wiimote"), 0x80);
#endif
                                                connectToWii = true; // Used to indicate to the Wii service, that it should connect to this device
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                        hci_disconnect(hci_handle);
                                        hci_state = HCI_DISCONNECT_STATE;
                                }
                                break;
 800d5cc:	e02e      	b.n	800d62c <_ZN3BTD14HCI_event_taskEv+0x628>
                                        } else if(pairWithHIDDevice && !connectToHIDDevice) {
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d029      	beq.n	800d62c <_ZN3BTD14HCI_event_taskEv+0x628>
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d5de:	f083 0301 	eor.w	r3, r3, #1
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d021      	beq.n	800d62c <_ZN3BTD14HCI_event_taskEv+0x628>
                                                connectToHIDDevice = true; // Used to indicate to the BTHID service, that it should connect to this device
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2201      	movs	r2, #1
 800d5ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                break;
 800d5f0:	e01c      	b.n	800d62c <_ZN3BTD14HCI_event_taskEv+0x628>
                                        hci_disconnect(hci_handle);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	8b5b      	ldrh	r3, [r3, #26]
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f001 f882 	bl	800e702 <_ZN3BTD14hci_disconnectEt>
                                        hci_state = HCI_DISCONNECT_STATE;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2210      	movs	r2, #16
 800d602:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800d606:	e011      	b.n	800d62c <_ZN3BTD14HCI_event_taskEv+0x628>

                        case EV_IO_CAPABILITY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived IO Capability Request"), 0x80);
#endif
                                hci_io_capability_request_reply();
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 ffcd 	bl	800e5a8 <_ZN3BTD31hci_io_capability_request_replyEv>
                                break;
 800d60e:	e00e      	b.n	800d62e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                }
#endif
#endif
                                // Simply confirm the connection, as the host has no "NoInputNoOutput" capabilities
                                hci_user_confirmation_request_reply();
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f001 f810 	bl	800e636 <_ZN3BTD35hci_user_confirmation_request_replyEv>
                                break;
 800d616:	e00a      	b.n	800d62e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                if(hcibuf[0] != 0x00) {
                                        Notify(PSTR("\r\nIgnore HCI Event: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[0], 0x80);
                                }
#endif
                                break;
 800d618:	bf00      	nop
 800d61a:	e008      	b.n	800d62e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d61c:	bf00      	nop
 800d61e:	e006      	b.n	800d62e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d620:	bf00      	nop
 800d622:	e004      	b.n	800d62e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d624:	bf00      	nop
 800d626:	e002      	b.n	800d62e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d628:	bf00      	nop
 800d62a:	e000      	b.n	800d62e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d62c:	bf00      	nop
        else {
                Notify(PSTR("\r\nHCI event error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
}
 800d62e:	bf00      	nop
 800d630:	3718      	adds	r7, #24
 800d632:	46bd      	mov	sp, r7
 800d634:	bdb0      	pop	{r4, r5, r7, pc}
 800d636:	bf00      	nop

0800d638 <_ZN3BTD8HCI_taskEv>:

/* Poll Bluetooth and print result */
void BTD::HCI_task() {
 800d638:	b580      	push	{r7, lr}
 800d63a:	b082      	sub	sp, #8
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
        switch(hci_state) {
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d646:	2b13      	cmp	r3, #19
 800d648:	f200 82ef 	bhi.w	800dc2a <_ZN3BTD8HCI_taskEv+0x5f2>
 800d64c:	a201      	add	r2, pc, #4	; (adr r2, 800d654 <_ZN3BTD8HCI_taskEv+0x1c>)
 800d64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d652:	bf00      	nop
 800d654:	0800d6a5 	.word	0x0800d6a5
 800d658:	0800d6df 	.word	0x0800d6df
 800d65c:	0800d765 	.word	0x0800d765
 800d660:	0800d785 	.word	0x0800d785
 800d664:	0800d7a5 	.word	0x0800d7a5
 800d668:	0800d7f9 	.word	0x0800d7f9
 800d66c:	0800d89f 	.word	0x0800d89f
 800d670:	0800d8cd 	.word	0x0800d8cd
 800d674:	0800d907 	.word	0x0800d907
 800d678:	0800d92f 	.word	0x0800d92f
 800d67c:	0800d965 	.word	0x0800d965
 800d680:	0800d9c3 	.word	0x0800d9c3
 800d684:	0800da01 	.word	0x0800da01
 800d688:	0800db27 	.word	0x0800db27
 800d68c:	0800dc2b 	.word	0x0800dc2b
 800d690:	0800db6d 	.word	0x0800db6d
 800d694:	0800db9b 	.word	0x0800db9b
 800d698:	0800d82f 	.word	0x0800d82f
 800d69c:	0800d865 	.word	0x0800d865
 800d6a0:	0800d885 	.word	0x0800d885
                case HCI_INIT_STATE:
                        hci_counter++;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800d6aa:	3301      	adds	r3, #1
 800d6ac:	b29a      	uxth	r2, r3
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > hci_num_reset_loops) { // wait until we have looped x times to clear any old events
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	f240 82b4 	bls.w	800dc2e <_ZN3BTD8HCI_taskEv+0x5f6>
                                hci_reset();
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f000 fb7d 	bl	800ddc6 <_ZN3BTD9hci_resetEv>
                                hci_state = HCI_RESET_STATE;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2201      	movs	r2, #1
 800d6d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        }
                        break;
 800d6dc:	e2a7      	b.n	800dc2e <_ZN3BTD8HCI_taskEv+0x5f6>

                case HCI_RESET_STATE:
                        hci_counter++;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800d6e4:	3301      	adds	r3, #1
 800d6e6:	b29a      	uxth	r2, r3
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d6f4:	f003 0301 	and.w	r3, r3, #1
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d00b      	beq.n	800d714 <_ZN3BTD8HCI_taskEv+0xdc>
                                hci_counter = 0;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2200      	movs	r2, #0
 800d700:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Reset complete"), 0x80);
#endif
                                hci_state = HCI_CLASS_STATE;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2202      	movs	r2, #2
 800d708:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_write_class_of_device();
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f001 f830 	bl	800e772 <_ZN3BTD25hci_write_class_of_deviceEv>
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
#endif
                                hci_state = HCI_INIT_STATE;
                                hci_counter = 0;
                        }
                        break;
 800d712:	e28e      	b.n	800dc32 <_ZN3BTD8HCI_taskEv+0x5fa>
                        } else if(hci_counter > hci_num_reset_loops) {
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d720:	429a      	cmp	r2, r3
 800d722:	f240 8286 	bls.w	800dc32 <_ZN3BTD8HCI_taskEv+0x5fa>
                                hci_num_reset_loops *= 10;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d72c:	461a      	mov	r2, r3
 800d72e:	0092      	lsls	r2, r2, #2
 800d730:	4413      	add	r3, r2
 800d732:	005b      	lsls	r3, r3, #1
 800d734:	b29a      	uxth	r2, r3
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                if(hci_num_reset_loops > 2000)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d742:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d746:	d904      	bls.n	800d752 <_ZN3BTD8HCI_taskEv+0x11a>
                                        hci_num_reset_loops = 2000;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d74e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                hci_state = HCI_INIT_STATE;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2200      	movs	r2, #0
 800d756:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2200      	movs	r2, #0
 800d75e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        break;
 800d762:	e266      	b.n	800dc32 <_ZN3BTD8HCI_taskEv+0x5fa>

                case HCI_CLASS_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d76a:	f003 0301 	and.w	r3, r3, #1
 800d76e:	2b00      	cmp	r3, #0
 800d770:	f000 8261 	beq.w	800dc36 <_ZN3BTD8HCI_taskEv+0x5fe>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWrite class of device"), 0x80);
#endif
                                hci_state = HCI_BDADDR_STATE;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2203      	movs	r2, #3
 800d778:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_read_bdaddr();
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f000 fb72 	bl	800de66 <_ZN3BTD15hci_read_bdaddrEv>
                        }
                        break;
 800d782:	e258      	b.n	800dc36 <_ZN3BTD8HCI_taskEv+0x5fe>

                case HCI_BDADDR_STATE:
                        if(hci_check_flag(HCI_FLAG_READ_BDADDR)) {
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d78a:	f003 0320 	and.w	r3, r3, #32
 800d78e:	2b00      	cmp	r3, #0
 800d790:	f000 8253 	beq.w	800dc3a <_ZN3BTD8HCI_taskEv+0x602>
                                        D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                                hci_read_local_version_information();
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f000 fb8a 	bl	800deae <_ZN3BTD34hci_read_local_version_informationEv>
                                hci_state = HCI_LOCAL_VERSION_STATE;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2204      	movs	r2, #4
 800d79e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d7a2:	e24a      	b.n	800dc3a <_ZN3BTD8HCI_taskEv+0x602>

                case HCI_LOCAL_VERSION_STATE: // The local version is used by the PS3BT class
                        if(hci_check_flag(HCI_FLAG_READ_VERSION)) {
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d7aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	f000 8245 	beq.w	800dc3e <_ZN3BTD8HCI_taskEv+0x606>
                                if(btdName != NULL) {
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	68db      	ldr	r3, [r3, #12]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d00a      	beq.n	800d7d2 <_ZN3BTD8HCI_taskEv+0x19a>
                                        hci_write_local_name(btdName);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	68db      	ldr	r3, [r3, #12]
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f000 fc5d 	bl	800e082 <_ZN3BTD20hci_write_local_nameEPKc>
                                        hci_state = HCI_WRITE_NAME_STATE;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2205      	movs	r2, #5
 800d7cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800d7d0:	e235      	b.n	800dc3e <_ZN3BTD8HCI_taskEv+0x606>
                                } else if(useSimplePairing) {
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d008      	beq.n	800d7ee <_ZN3BTD8HCI_taskEv+0x1b6>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800d7dc:	2100      	movs	r1, #0
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f000 fb89 	bl	800def6 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2211      	movs	r2, #17
 800d7e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d7ec:	e227      	b.n	800dc3e <_ZN3BTD8HCI_taskEv+0x606>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2206      	movs	r2, #6
 800d7f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d7f6:	e222      	b.n	800dc3e <_ZN3BTD8HCI_taskEv+0x606>

                case HCI_WRITE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d7fe:	f003 0301 	and.w	r3, r3, #1
 800d802:	2b00      	cmp	r3, #0
 800d804:	f000 821d 	beq.w	800dc42 <_ZN3BTD8HCI_taskEv+0x60a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nThe name was set to: "), 0x80);
                                NotifyStr(btdName, 0x80);
#endif
                                if(useSimplePairing) {
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d008      	beq.n	800d824 <_ZN3BTD8HCI_taskEv+0x1ec>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800d812:	2100      	movs	r1, #0
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f000 fb6e 	bl	800def6 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2211      	movs	r2, #17
 800d81e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800d822:	e20e      	b.n	800dc42 <_ZN3BTD8HCI_taskEv+0x60a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2206      	movs	r2, #6
 800d828:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d82c:	e209      	b.n	800dc42 <_ZN3BTD8HCI_taskEv+0x60a>

                case HCI_LOCAL_EXTENDED_FEATURES_STATE:
                        if(hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d834:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d838:	2b00      	cmp	r3, #0
 800d83a:	f000 8204 	beq.w	800dc46 <_ZN3BTD8HCI_taskEv+0x60e>
                                if(simple_pairing_supported) {
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800d844:	2b00      	cmp	r3, #0
 800d846:	d008      	beq.n	800d85a <_ZN3BTD8HCI_taskEv+0x222>
                                        hci_write_simple_pairing_mode(true);
 800d848:	2101      	movs	r1, #1
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f000 fc9d 	bl	800e18a <_ZN3BTD29hci_write_simple_pairing_modeEb>
                                        hci_state = HCI_WRITE_SIMPLE_PAIRING_STATE;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2212      	movs	r2, #18
 800d854:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800d858:	e1f5      	b.n	800dc46 <_ZN3BTD8HCI_taskEv+0x60e>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2206      	movs	r2, #6
 800d85e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d862:	e1f0      	b.n	800dc46 <_ZN3BTD8HCI_taskEv+0x60e>

                case HCI_WRITE_SIMPLE_PAIRING_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d86a:	f003 0301 	and.w	r3, r3, #1
 800d86e:	2b00      	cmp	r3, #0
 800d870:	f000 81eb 	beq.w	800dc4a <_ZN3BTD8HCI_taskEv+0x612>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSimple pairing was enabled"), 0x80);
#endif
                                hci_set_event_mask();
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f000 fc4d 	bl	800e114 <_ZN3BTD18hci_set_event_maskEv>
                                hci_state = HCI_SET_EVENT_MASK_STATE;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2213      	movs	r2, #19
 800d87e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d882:	e1e2      	b.n	800dc4a <_ZN3BTD8HCI_taskEv+0x612>

                case HCI_SET_EVENT_MASK_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d88a:	f003 0301 	and.w	r3, r3, #1
 800d88e:	2b00      	cmp	r3, #0
 800d890:	f000 81dd 	beq.w	800dc4e <_ZN3BTD8HCI_taskEv+0x616>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSet event mask completed"), 0x80);
#endif
                                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2206      	movs	r2, #6
 800d898:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d89c:	e1d7      	b.n	800dc4e <_ZN3BTD8HCI_taskEv+0x616>

                case HCI_CHECK_DEVICE_SERVICE:
                        if(pairWithHIDDevice || pairWithWii) { // Check if it should try to connect to a Wiimote
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d104      	bne.n	800d8b2 <_ZN3BTD8HCI_taskEv+0x27a>
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d007      	beq.n	800d8c2 <_ZN3BTD8HCI_taskEv+0x28a>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nStarting inquiry\r\nPress 1 & 2 on the Wiimote\r\nOr press the SYNC button if you are using a Wii U Pro Controller or a Wii Balance Board"), 0x80);
                                else
                                        Notify(PSTR("\r\nPlease enable discovery of your device"), 0x80);
#endif
                                hci_inquiry();
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f000 fc8f 	bl	800e1d6 <_ZN3BTD11hci_inquiryEv>
                                hci_state = HCI_INQUIRY_STATE;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2207      	movs	r2, #7
 800d8bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
                        break;
 800d8c0:	e1d8      	b.n	800dc74 <_ZN3BTD8HCI_taskEv+0x63c>
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	220a      	movs	r2, #10
 800d8c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d8ca:	e1d3      	b.n	800dc74 <_ZN3BTD8HCI_taskEv+0x63c>

                case HCI_INQUIRY_STATE:
                        if(hci_check_flag(HCI_FLAG_DEVICE_FOUND)) {
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d8d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	f000 81bb 	beq.w	800dc52 <_ZN3BTD8HCI_taskEv+0x61a>
                                hci_inquiry_cancel(); // Stop inquiry
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f000 fcb2 	bl	800e246 <_ZN3BTD18hci_inquiry_cancelEv>
                                if(pairWithWii)
                                        Notify(PSTR("Wiimote"), 0x80);
                                else
                                        Notify(PSTR("device"), 0x80);
#endif
                                if(checkRemoteName) {
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d007      	beq.n	800d8fc <_ZN3BTD8HCI_taskEv+0x2c4>
                                        hci_remote_name(); // We need to know the name to distinguish between the Wiimote, the new Wiimote with Motion Plus inside, a Wii U Pro Controller and a Wii Balance Board
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f000 fb74 	bl	800dfda <_ZN3BTD15hci_remote_nameEv>
                                        hci_state = HCI_REMOTE_NAME_STATE;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	220c      	movs	r2, #12
 800d8f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
                        }
                        break;
 800d8fa:	e1aa      	b.n	800dc52 <_ZN3BTD8HCI_taskEv+0x61a>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2208      	movs	r2, #8
 800d900:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d904:	e1a5      	b.n	800dc52 <_ZN3BTD8HCI_taskEv+0x61a>

                case HCI_CONNECT_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d90c:	f003 0301 	and.w	r3, r3, #1
 800d910:	2b00      	cmp	r3, #0
 800d912:	f000 81a0 	beq.w	800dc56 <_ZN3BTD8HCI_taskEv+0x61e>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nConnecting to Wiimote"), 0x80);
                                else
                                        Notify(PSTR("\r\nConnecting to HID device"), 0x80);
#endif
                                checkRemoteName = false;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2200      	movs	r2, #0
 800d91a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                                hci_connect();
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f000 fcac 	bl	800e27c <_ZN3BTD11hci_connectEv>
                                hci_state = HCI_CONNECTED_DEVICE_STATE;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2209      	movs	r2, #9
 800d928:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d92c:	e193      	b.n	800dc56 <_ZN3BTD8HCI_taskEv+0x61e>

                case HCI_CONNECTED_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_EVENT)) {
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d938:	2b00      	cmp	r3, #0
 800d93a:	f000 818e 	beq.w	800dc5a <_ZN3BTD8HCI_taskEv+0x622>
                                if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d944:	f003 0302 	and.w	r3, r3, #2
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d007      	beq.n	800d95c <_ZN3BTD8HCI_taskEv+0x324>
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nConnected to Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nConnected to HID device"), 0x80);
#endif
                                        hci_authentication_request(); // This will start the pairing with the device
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f000 fead 	bl	800e6ac <_ZN3BTD26hci_authentication_requestEv>
                                        hci_state = HCI_SCANNING_STATE;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	220a      	movs	r2, #10
 800d956:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
#endif
                                        hci_connect(); // Try to connect one more time
                                }
                        }
                        break;
 800d95a:	e17e      	b.n	800dc5a <_ZN3BTD8HCI_taskEv+0x622>
                                        hci_connect(); // Try to connect one more time
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f000 fc8d 	bl	800e27c <_ZN3BTD11hci_connectEv>
                        break;
 800d962:	e17a      	b.n	800dc5a <_ZN3BTD8HCI_taskEv+0x622>

                case HCI_SCANNING_STATE:
                        if(!connectToWii && !pairWithWii && !connectToHIDDevice && !pairWithHIDDevice) {
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d96a:	f083 0301 	eor.w	r3, r3, #1
 800d96e:	b2db      	uxtb	r3, r3
 800d970:	2b00      	cmp	r3, #0
 800d972:	f000 8174 	beq.w	800dc5e <_ZN3BTD8HCI_taskEv+0x626>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d97c:	f083 0301 	eor.w	r3, r3, #1
 800d980:	b2db      	uxtb	r3, r3
 800d982:	2b00      	cmp	r3, #0
 800d984:	f000 816b 	beq.w	800dc5e <_ZN3BTD8HCI_taskEv+0x626>
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d98e:	f083 0301 	eor.w	r3, r3, #1
 800d992:	b2db      	uxtb	r3, r3
 800d994:	2b00      	cmp	r3, #0
 800d996:	f000 8162 	beq.w	800dc5e <_ZN3BTD8HCI_taskEv+0x626>
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d9a0:	f083 0301 	eor.w	r3, r3, #1
 800d9a4:	b2db      	uxtb	r3, r3
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	f000 8159 	beq.w	800dc5e <_ZN3BTD8HCI_taskEv+0x626>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWait For Incoming Connection Request"), 0x80);
#endif
                                hci_write_scan_enable();
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f000 fa29 	bl	800de04 <_ZN3BTD21hci_write_scan_enableEv>
                                waitingForConnection = true;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2201      	movs	r2, #1
 800d9b6:	721a      	strb	r2, [r3, #8]
                                hci_state = HCI_CONNECT_IN_STATE;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	220b      	movs	r2, #11
 800d9bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d9c0:	e14d      	b.n	800dc5e <_ZN3BTD8HCI_taskEv+0x626>

                case HCI_CONNECT_IN_STATE:
                        if(hci_check_flag(HCI_FLAG_INCOMING_REQUEST)) {
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d9c8:	f003 0310 	and.w	r3, r3, #16
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d00a      	beq.n	800d9e6 <_ZN3BTD8HCI_taskEv+0x3ae>
                                waitingForConnection = false;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	721a      	strb	r2, [r3, #8]
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nIncoming Connection Request"), 0x80);
#endif
                                hci_remote_name();
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f000 faff 	bl	800dfda <_ZN3BTD15hci_remote_nameEv>
                                hci_state = HCI_REMOTE_NAME_STATE;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	220c      	movs	r2, #12
 800d9e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
                                hci_state = HCI_DISCONNECT_STATE;
                        break;
 800d9e4:	e13d      	b.n	800dc62 <_ZN3BTD8HCI_taskEv+0x62a>
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d9ec:	f003 0304 	and.w	r3, r3, #4
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	f000 8136 	beq.w	800dc62 <_ZN3BTD8HCI_taskEv+0x62a>
                                hci_state = HCI_DISCONNECT_STATE;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2210      	movs	r2, #16
 800d9fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d9fe:	e130      	b.n	800dc62 <_ZN3BTD8HCI_taskEv+0x62a>

                case HCI_REMOTE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_REMOTE_NAME_COMPLETE)) {
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800da06:	f003 0308 	and.w	r3, r3, #8
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	f000 812b 	beq.w	800dc66 <_ZN3BTD8HCI_taskEv+0x62e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nRemote Name: "), 0x80);
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
                                        Notifyc(remote_name[i], 0x80);
#endif
                                if(strncmp((const char*)remote_name, "Nintendo", 8) == 0) {
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	3322      	adds	r3, #34	; 0x22
 800da14:	2208      	movs	r2, #8
 800da16:	4999      	ldr	r1, [pc, #612]	; (800dc7c <_ZN3BTD8HCI_taskEv+0x644>)
 800da18:	4618      	mov	r0, r3
 800da1a:	f004 fe27 	bl	801266c <strncmp>
 800da1e:	4603      	mov	r3, r0
 800da20:	2b00      	cmp	r3, #0
 800da22:	d147      	bne.n	800dab4 <_ZN3BTD8HCI_taskEv+0x47c>
                                        incomingWii = true;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2201      	movs	r2, #1
 800da28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                                        motionPlusInside = false;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2200      	movs	r2, #0
 800da30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                                        wiiUProController = false;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2200      	movs	r2, #0
 800da38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                                        pairWiiUsingSync = false;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2200      	movs	r2, #0
 800da40:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nWiimote is connecting"), 0x80);
#endif
                                        if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-TR", 22) == 0) {
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	3322      	adds	r3, #34	; 0x22
 800da48:	2216      	movs	r2, #22
 800da4a:	498d      	ldr	r1, [pc, #564]	; (800dc80 <_ZN3BTD8HCI_taskEv+0x648>)
 800da4c:	4618      	mov	r0, r3
 800da4e:	f004 fe0d 	bl	801266c <strncmp>
 800da52:	4603      	mov	r3, r0
 800da54:	2b00      	cmp	r3, #0
 800da56:	d104      	bne.n	800da62 <_ZN3BTD8HCI_taskEv+0x42a>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" with Motion Plus Inside"), 0x80);
#endif
                                                motionPlusInside = true;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2201      	movs	r2, #1
 800da5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da60:	e028      	b.n	800dab4 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-UC", 22) == 0) {
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	3322      	adds	r3, #34	; 0x22
 800da66:	2216      	movs	r2, #22
 800da68:	4986      	ldr	r1, [pc, #536]	; (800dc84 <_ZN3BTD8HCI_taskEv+0x64c>)
 800da6a:	4618      	mov	r0, r3
 800da6c:	f004 fdfe 	bl	801266c <strncmp>
 800da70:	4603      	mov	r3, r0
 800da72:	2b00      	cmp	r3, #0
 800da74:	d110      	bne.n	800da98 <_ZN3BTD8HCI_taskEv+0x460>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii U Pro Controller"), 0x80);
#endif
                                                wiiUProController = motionPlusInside = pairWiiUsingSync = true;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2201      	movs	r2, #1
 800da7a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da96:	e00d      	b.n	800dab4 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-WBC-01", 19) == 0) {
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	3322      	adds	r3, #34	; 0x22
 800da9c:	2213      	movs	r2, #19
 800da9e:	497a      	ldr	r1, [pc, #488]	; (800dc88 <_ZN3BTD8HCI_taskEv+0x650>)
 800daa0:	4618      	mov	r0, r3
 800daa2:	f004 fde3 	bl	801266c <strncmp>
 800daa6:	4603      	mov	r3, r0
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d103      	bne.n	800dab4 <_ZN3BTD8HCI_taskEv+0x47c>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii Balance Board"), 0x80);
#endif
                                                pairWiiUsingSync = true;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2201      	movs	r2, #1
 800dab0:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
                                        }
                                }
                                if(classOfDevice[2] == 0 && classOfDevice[1] == 0x25 && classOfDevice[0] == 0x08 && strncmp((const char*)remote_name, "Wireless Controller", 19) == 0) {
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d117      	bne.n	800daee <_ZN3BTD8HCI_taskEv+0x4b6>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800dac4:	2b25      	cmp	r3, #37	; 0x25
 800dac6:	d112      	bne.n	800daee <_ZN3BTD8HCI_taskEv+0x4b6>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800dace:	2b08      	cmp	r3, #8
 800dad0:	d10d      	bne.n	800daee <_ZN3BTD8HCI_taskEv+0x4b6>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	3322      	adds	r3, #34	; 0x22
 800dad6:	2213      	movs	r2, #19
 800dad8:	496c      	ldr	r1, [pc, #432]	; (800dc8c <_ZN3BTD8HCI_taskEv+0x654>)
 800dada:	4618      	mov	r0, r3
 800dadc:	f004 fdc6 	bl	801266c <strncmp>
 800dae0:	4603      	mov	r3, r0
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d103      	bne.n	800daee <_ZN3BTD8HCI_taskEv+0x4b6>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPS4/PS5 controller is connecting"), 0x80);
#endif
                                        incomingPSController = true;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2201      	movs	r2, #1
 800daea:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                                }
                                if((pairWithWii || pairWithHIDDevice) && checkRemoteName)
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d104      	bne.n	800db02 <_ZN3BTD8HCI_taskEv+0x4ca>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d009      	beq.n	800db16 <_ZN3BTD8HCI_taskEv+0x4de>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d004      	beq.n	800db16 <_ZN3BTD8HCI_taskEv+0x4de>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2208      	movs	r2, #8
 800db10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                else {
                                        hci_accept_connection();
                                        hci_state = HCI_CONNECTED_STATE;
                                }
                        }
                        break;
 800db14:	e0a7      	b.n	800dc66 <_ZN3BTD8HCI_taskEv+0x62e>
                                        hci_accept_connection();
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f000 fa17 	bl	800df4a <_ZN3BTD21hci_accept_connectionEv>
                                        hci_state = HCI_CONNECTED_STATE;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	220d      	movs	r2, #13
 800db20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800db24:	e09f      	b.n	800dc66 <_ZN3BTD8HCI_taskEv+0x62e>

                case HCI_CONNECTED_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800db2c:	f003 0302 	and.w	r3, r3, #2
 800db30:	2b00      	cmp	r3, #0
 800db32:	f000 809a 	beq.w	800dc6a <_ZN3BTD8HCI_taskEv+0x632>
                                        D_PrintHex<uint8_t > (disc_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (disc_bdaddr[0], 0x80);
#endif
                                if(incomingPSController)
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d003      	beq.n	800db48 <_ZN3BTD8HCI_taskEv+0x510>
                                        connectToHIDDevice = true; // We should always connect to the PS4/PS5 controller
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2201      	movs	r2, #1
 800db44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

                                // Clear these flags for a new connection
                                l2capConnectionClaimed = false;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2200      	movs	r2, #0
 800db4c:	725a      	strb	r2, [r3, #9]
                                sdpConnectionClaimed = false;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2200      	movs	r2, #0
 800db52:	729a      	strb	r2, [r3, #10]
                                rfcommConnectionClaimed = false;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2200      	movs	r2, #0
 800db58:	72da      	strb	r2, [r3, #11]

                                hci_event_flag = 0;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2200      	movs	r2, #0
 800db5e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                hci_state = HCI_DONE_STATE;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	220f      	movs	r2, #15
 800db66:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800db6a:	e07e      	b.n	800dc6a <_ZN3BTD8HCI_taskEv+0x632>

                case HCI_DONE_STATE:
                        hci_counter++;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800db72:	3301      	adds	r3, #1
 800db74:	b29a      	uxth	r2, r3
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > 1000) { // Wait until we have looped 1000 times to make sure that the L2CAP connection has been started
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800db82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800db86:	d972      	bls.n	800dc6e <_ZN3BTD8HCI_taskEv+0x636>
                                hci_counter = 0;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2200      	movs	r2, #0
 800db8c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                                hci_state = HCI_SCANNING_STATE;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	220a      	movs	r2, #10
 800db94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800db98:	e069      	b.n	800dc6e <_ZN3BTD8HCI_taskEv+0x636>

                case HCI_DISCONNECT_STATE:
                        if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE)) {
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dba0:	f003 0304 	and.w	r3, r3, #4
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d064      	beq.n	800dc72 <_ZN3BTD8HCI_taskEv+0x63a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Disconnected from Device"), 0x80);
#endif
                                hci_event_flag = 0; // Clear all flags
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

                                // Reset all buffers
                                memset(hcibuf, 0, BULK_MAXPKTSIZE);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	3389      	adds	r3, #137	; 0x89
 800dbb4:	2240      	movs	r2, #64	; 0x40
 800dbb6:	2100      	movs	r1, #0
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f004 fd0b 	bl	80125d4 <memset>
                                memset(l2capinbuf, 0, BULK_MAXPKTSIZE);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	33c9      	adds	r3, #201	; 0xc9
 800dbc2:	2240      	movs	r2, #64	; 0x40
 800dbc4:	2100      	movs	r1, #0
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f004 fd04 	bl	80125d4 <memset>

                                connectToWii = incomingWii = pairWithWii = false;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                connectToHIDDevice = incomingHIDDevice = pairWithHIDDevice = checkRemoteName = false;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                incomingPSController = false;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

                                hci_state = HCI_SCANNING_STATE;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	220a      	movs	r2, #10
 800dc24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800dc28:	e023      	b.n	800dc72 <_ZN3BTD8HCI_taskEv+0x63a>
                default:
                        break;
 800dc2a:	bf00      	nop
 800dc2c:	e022      	b.n	800dc74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dc2e:	bf00      	nop
 800dc30:	e020      	b.n	800dc74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dc32:	bf00      	nop
 800dc34:	e01e      	b.n	800dc74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dc36:	bf00      	nop
 800dc38:	e01c      	b.n	800dc74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dc3a:	bf00      	nop
 800dc3c:	e01a      	b.n	800dc74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dc3e:	bf00      	nop
 800dc40:	e018      	b.n	800dc74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dc42:	bf00      	nop
 800dc44:	e016      	b.n	800dc74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dc46:	bf00      	nop
 800dc48:	e014      	b.n	800dc74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dc4a:	bf00      	nop
 800dc4c:	e012      	b.n	800dc74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dc4e:	bf00      	nop
 800dc50:	e010      	b.n	800dc74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dc52:	bf00      	nop
 800dc54:	e00e      	b.n	800dc74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dc56:	bf00      	nop
 800dc58:	e00c      	b.n	800dc74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dc5a:	bf00      	nop
 800dc5c:	e00a      	b.n	800dc74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dc5e:	bf00      	nop
 800dc60:	e008      	b.n	800dc74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dc62:	bf00      	nop
 800dc64:	e006      	b.n	800dc74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dc66:	bf00      	nop
 800dc68:	e004      	b.n	800dc74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dc6a:	bf00      	nop
 800dc6c:	e002      	b.n	800dc74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dc6e:	bf00      	nop
 800dc70:	e000      	b.n	800dc74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dc72:	bf00      	nop
        }
}
 800dc74:	bf00      	nop
 800dc76:	3708      	adds	r7, #8
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}
 800dc7c:	080127d0 	.word	0x080127d0
 800dc80:	080127dc 	.word	0x080127dc
 800dc84:	080127f4 	.word	0x080127f4
 800dc88:	0801280c 	.word	0x0801280c
 800dc8c:	08012820 	.word	0x08012820

0800dc90 <_ZN3BTD14ACL_event_taskEv>:

void BTD::ACL_event_task() {
 800dc90:	b5b0      	push	{r4, r5, r7, lr}
 800dc92:	b086      	sub	sp, #24
 800dc94:	af02      	add	r7, sp, #8
 800dc96:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE;
 800dc98:	2340      	movs	r3, #64	; 0x40
 800dc9a:	817b      	strh	r3, [r7, #10]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_DATAIN_PIPE ].epAddr, &length, l2capinbuf, pollInterval); // Input on endpoint 2
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f893 4057 	ldrb.w	r4, [r3, #87]	; 0x57
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	33c9      	adds	r3, #201	; 0xc9
 800dcb0:	687a      	ldr	r2, [r7, #4]
 800dcb2:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800dcb6:	f107 050a 	add.w	r5, r7, #10
 800dcba:	9201      	str	r2, [sp, #4]
 800dcbc:	9300      	str	r3, [sp, #0]
 800dcbe:	462b      	mov	r3, r5
 800dcc0:	4622      	mov	r2, r4
 800dcc2:	f003 f92c 	bl	8010f1e <_ZN3USB10inTransferEhhPtPhh>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	737b      	strb	r3, [r7, #13]

        if(!rcode) { // Check for errors
 800dcca:	7b7b      	ldrb	r3, [r7, #13]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d125      	bne.n	800dd1c <_ZN3BTD14ACL_event_taskEv+0x8c>
                if(length > 0) { // Check if any data was read
 800dcd0:	897b      	ldrh	r3, [r7, #10]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d022      	beq.n	800dd1c <_ZN3BTD14ACL_event_taskEv+0x8c>
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	73fb      	strb	r3, [r7, #15]
 800dcda:	7bfb      	ldrb	r3, [r7, #15]
 800dcdc:	2b03      	cmp	r3, #3
 800dcde:	d81d      	bhi.n	800dd1c <_ZN3BTD14ACL_event_taskEv+0x8c>
                                if(btService[i])
 800dce0:	7bfb      	ldrb	r3, [r7, #15]
 800dce2:	687a      	ldr	r2, [r7, #4]
 800dce4:	3318      	adds	r3, #24
 800dce6:	009b      	lsls	r3, r3, #2
 800dce8:	4413      	add	r3, r2
 800dcea:	685b      	ldr	r3, [r3, #4]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d011      	beq.n	800dd14 <_ZN3BTD14ACL_event_taskEv+0x84>
                                        btService[i]->ACLData(l2capinbuf);
 800dcf0:	7bfb      	ldrb	r3, [r7, #15]
 800dcf2:	687a      	ldr	r2, [r7, #4]
 800dcf4:	3318      	adds	r3, #24
 800dcf6:	009b      	lsls	r3, r3, #2
 800dcf8:	4413      	add	r3, r2
 800dcfa:	6858      	ldr	r0, [r3, #4]
 800dcfc:	7bfb      	ldrb	r3, [r7, #15]
 800dcfe:	687a      	ldr	r2, [r7, #4]
 800dd00:	3318      	adds	r3, #24
 800dd02:	009b      	lsls	r3, r3, #2
 800dd04:	4413      	add	r3, r2
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	687a      	ldr	r2, [r7, #4]
 800dd0e:	32c9      	adds	r2, #201	; 0xc9
 800dd10:	4611      	mov	r1, r2
 800dd12:	4798      	blx	r3
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800dd14:	7bfb      	ldrb	r3, [r7, #15]
 800dd16:	3301      	adds	r3, #1
 800dd18:	73fb      	strb	r3, [r7, #15]
 800dd1a:	e7de      	b.n	800dcda <_ZN3BTD14ACL_event_taskEv+0x4a>
        else if(rcode != hrNAK) {
                Notify(PSTR("\r\nACL data in error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	73bb      	strb	r3, [r7, #14]
 800dd20:	7bbb      	ldrb	r3, [r7, #14]
 800dd22:	2b03      	cmp	r3, #3
 800dd24:	d81c      	bhi.n	800dd60 <_ZN3BTD14ACL_event_taskEv+0xd0>
                if(btService[i])
 800dd26:	7bbb      	ldrb	r3, [r7, #14]
 800dd28:	687a      	ldr	r2, [r7, #4]
 800dd2a:	3318      	adds	r3, #24
 800dd2c:	009b      	lsls	r3, r3, #2
 800dd2e:	4413      	add	r3, r2
 800dd30:	685b      	ldr	r3, [r3, #4]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d010      	beq.n	800dd58 <_ZN3BTD14ACL_event_taskEv+0xc8>
                        btService[i]->Run();
 800dd36:	7bbb      	ldrb	r3, [r7, #14]
 800dd38:	687a      	ldr	r2, [r7, #4]
 800dd3a:	3318      	adds	r3, #24
 800dd3c:	009b      	lsls	r3, r3, #2
 800dd3e:	4413      	add	r3, r2
 800dd40:	6859      	ldr	r1, [r3, #4]
 800dd42:	7bbb      	ldrb	r3, [r7, #14]
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	3318      	adds	r3, #24
 800dd48:	009b      	lsls	r3, r3, #2
 800dd4a:	4413      	add	r3, r2
 800dd4c:	685b      	ldr	r3, [r3, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	3304      	adds	r3, #4
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	4608      	mov	r0, r1
 800dd56:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800dd58:	7bbb      	ldrb	r3, [r7, #14]
 800dd5a:	3301      	adds	r3, #1
 800dd5c:	73bb      	strb	r3, [r7, #14]
 800dd5e:	e7df      	b.n	800dd20 <_ZN3BTD14ACL_event_taskEv+0x90>
}
 800dd60:	bf00      	nop
 800dd62:	3710      	adds	r7, #16
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bdb0      	pop	{r4, r5, r7, pc}

0800dd68 <_ZN3BTD11HCI_CommandEPht>:

/************************************************************/
/*                    HCI Commands                        */

/************************************************************/
void BTD::HCI_Command(uint8_t* data, uint16_t nbytes) {
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b08c      	sub	sp, #48	; 0x30
 800dd6c:	af08      	add	r7, sp, #32
 800dd6e:	60f8      	str	r0, [r7, #12]
 800dd70:	60b9      	str	r1, [r7, #8]
 800dd72:	4613      	mov	r3, r2
 800dd74:	80fb      	strh	r3, [r7, #6]
        hci_clear_flag(HCI_FLAG_CMD_COMPLETE);
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dd7c:	f023 0301 	bic.w	r3, r3, #1
 800dd80:	b29a      	uxth	r2, r3
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        pUsb->ctrlReq(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bmREQ_HCI_OUT, 0x00, 0x00, 0x00, 0x00, nbytes, nbytes, data, NULL);
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800dd98:	2300      	movs	r3, #0
 800dd9a:	9307      	str	r3, [sp, #28]
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	9306      	str	r3, [sp, #24]
 800dda0:	88fb      	ldrh	r3, [r7, #6]
 800dda2:	9305      	str	r3, [sp, #20]
 800dda4:	88fb      	ldrh	r3, [r7, #6]
 800dda6:	9304      	str	r3, [sp, #16]
 800dda8:	2300      	movs	r3, #0
 800ddaa:	9303      	str	r3, [sp, #12]
 800ddac:	2300      	movs	r3, #0
 800ddae:	9302      	str	r3, [sp, #8]
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	9301      	str	r3, [sp, #4]
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	9300      	str	r3, [sp, #0]
 800ddb8:	2320      	movs	r3, #32
 800ddba:	f002 ffd8 	bl	8010d6e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800ddbe:	bf00      	nop
 800ddc0:	3710      	adds	r7, #16
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}

0800ddc6 <_ZN3BTD9hci_resetEv>:

void BTD::hci_reset() {
 800ddc6:	b580      	push	{r7, lr}
 800ddc8:	b082      	sub	sp, #8
 800ddca:	af00      	add	r7, sp, #0
 800ddcc:	6078      	str	r0, [r7, #4]
        hci_event_flag = 0; // Clear all the flags
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x03; // HCI OCF = 3
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2203      	movs	r2, #3
 800ddda:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	220c      	movs	r2, #12
 800dde2:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2200      	movs	r2, #0
 800ddea:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	3389      	adds	r3, #137	; 0x89
 800ddf2:	2203      	movs	r2, #3
 800ddf4:	4619      	mov	r1, r3
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f7ff ffb6 	bl	800dd68 <_ZN3BTD11HCI_CommandEPht>
}
 800ddfc:	bf00      	nop
 800ddfe:	3708      	adds	r7, #8
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <_ZN3BTD21hci_write_scan_enableEv>:

void BTD::hci_write_scan_enable() {
 800de04:	b580      	push	{r7, lr}
 800de06:	b082      	sub	sp, #8
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_INCOMING_REQUEST);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800de12:	f023 0310 	bic.w	r3, r3, #16
 800de16:	b29a      	uxth	r2, r3
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x1A; // HCI OCF = 1A
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	221a      	movs	r2, #26
 800de22:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	220c      	movs	r2, #12
 800de2a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2201      	movs	r2, #1
 800de32:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        if(btdName != NULL)
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	68db      	ldr	r3, [r3, #12]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d004      	beq.n	800de48 <_ZN3BTD21hci_write_scan_enableEv+0x44>
                hcibuf[3] = 0x03; // Inquiry Scan enabled. Page Scan enabled.
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2203      	movs	r2, #3
 800de42:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800de46:	e003      	b.n	800de50 <_ZN3BTD21hci_write_scan_enableEv+0x4c>
        else
                hcibuf[3] = 0x02; // Inquiry Scan disabled. Page Scan enabled.
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2202      	movs	r2, #2
 800de4c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	3389      	adds	r3, #137	; 0x89
 800de54:	2204      	movs	r2, #4
 800de56:	4619      	mov	r1, r3
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f7ff ff85 	bl	800dd68 <_ZN3BTD11HCI_CommandEPht>
}
 800de5e:	bf00      	nop
 800de60:	3708      	adds	r7, #8
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}

0800de66 <_ZN3BTD15hci_read_bdaddrEv>:
        hcibuf[3] = 0x00; // Inquiry Scan disabled. Page Scan disabled.

        HCI_Command(hcibuf, 4);
}

void BTD::hci_read_bdaddr() {
 800de66:	b580      	push	{r7, lr}
 800de68:	b082      	sub	sp, #8
 800de6a:	af00      	add	r7, sp, #0
 800de6c:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_BDADDR);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800de74:	f023 0320 	bic.w	r3, r3, #32
 800de78:	b29a      	uxth	r2, r3
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2209      	movs	r2, #9
 800de84:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2210      	movs	r2, #16
 800de8c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2200      	movs	r2, #0
 800de94:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	3389      	adds	r3, #137	; 0x89
 800de9c:	2203      	movs	r2, #3
 800de9e:	4619      	mov	r1, r3
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f7ff ff61 	bl	800dd68 <_ZN3BTD11HCI_CommandEPht>
}
 800dea6:	bf00      	nop
 800dea8:	3708      	adds	r7, #8
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}

0800deae <_ZN3BTD34hci_read_local_version_informationEv>:

void BTD::hci_read_local_version_information() {
 800deae:	b580      	push	{r7, lr}
 800deb0:	b082      	sub	sp, #8
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_VERSION);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800debc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dec0:	b29a      	uxth	r2, r3
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01; // HCI OCF = 1
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2201      	movs	r2, #1
 800decc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2210      	movs	r2, #16
 800ded4:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2200      	movs	r2, #0
 800dedc:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	3389      	adds	r3, #137	; 0x89
 800dee4:	2203      	movs	r2, #3
 800dee6:	4619      	mov	r1, r3
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f7ff ff3d 	bl	800dd68 <_ZN3BTD11HCI_CommandEPht>
}
 800deee:	bf00      	nop
 800def0:	3708      	adds	r7, #8
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}

0800def6 <_ZN3BTD32hci_read_local_extended_featuresEh>:

void BTD::hci_read_local_extended_features(uint8_t page_number) {
 800def6:	b580      	push	{r7, lr}
 800def8:	b082      	sub	sp, #8
 800defa:	af00      	add	r7, sp, #0
 800defc:	6078      	str	r0, [r7, #4]
 800defe:	460b      	mov	r3, r1
 800df00:	70fb      	strb	r3, [r7, #3]
        hci_clear_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800df08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800df0c:	b29a      	uxth	r2, r3
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x04; // HCI OCF = 4
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2204      	movs	r2, #4
 800df18:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2210      	movs	r2, #16
 800df20:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2201      	movs	r2, #1
 800df28:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = page_number;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	78fa      	ldrb	r2, [r7, #3]
 800df30:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	3389      	adds	r3, #137	; 0x89
 800df38:	2204      	movs	r2, #4
 800df3a:	4619      	mov	r1, r3
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f7ff ff13 	bl	800dd68 <_ZN3BTD11HCI_CommandEPht>
}
 800df42:	bf00      	nop
 800df44:	3708      	adds	r7, #8
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}

0800df4a <_ZN3BTD21hci_accept_connectionEv>:

void BTD::hci_accept_connection() {
 800df4a:	b580      	push	{r7, lr}
 800df4c:	b082      	sub	sp, #8
 800df4e:	af00      	add	r7, sp, #0
 800df50:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800df58:	f023 0302 	bic.w	r3, r3, #2
 800df5c:	b29a      	uxth	r2, r3
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2209      	movs	r2, #9
 800df68:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2204      	movs	r2, #4
 800df70:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x07; // parameter length 7
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2207      	movs	r2, #7
 800df78:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	7f1a      	ldrb	r2, [r3, #28]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	7f5a      	ldrb	r2, [r3, #29]
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	7f9a      	ldrb	r2, [r3, #30]
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	7fda      	ldrb	r2, [r3, #31]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f893 2020 	ldrb.w	r2, [r3, #32]
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x00; // Switch role to master
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

        HCI_Command(hcibuf, 10);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	3389      	adds	r3, #137	; 0x89
 800dfc8:	220a      	movs	r2, #10
 800dfca:	4619      	mov	r1, r3
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f7ff fecb 	bl	800dd68 <_ZN3BTD11HCI_CommandEPht>
}
 800dfd2:	bf00      	nop
 800dfd4:	3708      	adds	r7, #8
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}

0800dfda <_ZN3BTD15hci_remote_nameEv>:

void BTD::hci_remote_name() {
 800dfda:	b580      	push	{r7, lr}
 800dfdc:	b082      	sub	sp, #8
 800dfde:	af00      	add	r7, sp, #0
 800dfe0:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dfe8:	f023 0308 	bic.w	r3, r3, #8
 800dfec:	b29a      	uxth	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x19; // HCI OCF = 19
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2219      	movs	r2, #25
 800dff8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2204      	movs	r2, #4
 800e000:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0A; // parameter length = 10
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	220a      	movs	r2, #10
 800e008:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	7f1a      	ldrb	r2, [r3, #28]
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	7f5a      	ldrb	r2, [r3, #29]
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	7f9a      	ldrb	r2, [r3, #30]
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	7fda      	ldrb	r2, [r3, #31]
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x01; // Page Scan Repetition Mode
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2201      	movs	r2, #1
 800e050:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // Reserved
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2200      	movs	r2, #0
 800e058:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // Clock offset - low byte
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2200      	movs	r2, #0
 800e060:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Clock offset - high byte
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2200      	movs	r2, #0
 800e068:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

        HCI_Command(hcibuf, 13);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	3389      	adds	r3, #137	; 0x89
 800e070:	220d      	movs	r2, #13
 800e072:	4619      	mov	r1, r3
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f7ff fe77 	bl	800dd68 <_ZN3BTD11HCI_CommandEPht>
}
 800e07a:	bf00      	nop
 800e07c:	3708      	adds	r7, #8
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}

0800e082 <_ZN3BTD20hci_write_local_nameEPKc>:

void BTD::hci_write_local_name(const char* name) {
 800e082:	b590      	push	{r4, r7, lr}
 800e084:	b085      	sub	sp, #20
 800e086:	af00      	add	r7, sp, #0
 800e088:	6078      	str	r0, [r7, #4]
 800e08a:	6039      	str	r1, [r7, #0]
        hcibuf[0] = 0x13; // HCI OCF = 13
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2213      	movs	r2, #19
 800e090:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	220c      	movs	r2, #12
 800e098:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = strlen(name) + 1; // parameter length = the length of the string + end byte
 800e09c:	6838      	ldr	r0, [r7, #0]
 800e09e:	f7f2 f8b7 	bl	8000210 <strlen>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	b2db      	uxtb	r3, r3
 800e0a6:	3301      	adds	r3, #1
 800e0a8:	b2da      	uxtb	r2, r3
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        uint8_t i;
        for(i = 0; i < strlen(name); i++)
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	73fb      	strb	r3, [r7, #15]
 800e0b4:	7bfc      	ldrb	r4, [r7, #15]
 800e0b6:	6838      	ldr	r0, [r7, #0]
 800e0b8:	f7f2 f8aa 	bl	8000210 <strlen>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	429c      	cmp	r4, r3
 800e0c0:	d20e      	bcs.n	800e0e0 <_ZN3BTD20hci_write_local_nameEPKc+0x5e>
                hcibuf[i + 3] = name[i];
 800e0c2:	7bfb      	ldrb	r3, [r7, #15]
 800e0c4:	683a      	ldr	r2, [r7, #0]
 800e0c6:	441a      	add	r2, r3
 800e0c8:	7bfb      	ldrb	r3, [r7, #15]
 800e0ca:	3303      	adds	r3, #3
 800e0cc:	7811      	ldrb	r1, [r2, #0]
 800e0ce:	687a      	ldr	r2, [r7, #4]
 800e0d0:	4413      	add	r3, r2
 800e0d2:	460a      	mov	r2, r1
 800e0d4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        for(i = 0; i < strlen(name); i++)
 800e0d8:	7bfb      	ldrb	r3, [r7, #15]
 800e0da:	3301      	adds	r3, #1
 800e0dc:	73fb      	strb	r3, [r7, #15]
 800e0de:	e7e9      	b.n	800e0b4 <_ZN3BTD20hci_write_local_nameEPKc+0x32>
        hcibuf[i + 3] = 0x00; // End of string
 800e0e0:	7bfb      	ldrb	r3, [r7, #15]
 800e0e2:	3303      	adds	r3, #3
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	4413      	add	r3, r2
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

        HCI_Command(hcibuf, 4 + strlen(name));
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f103 0489 	add.w	r4, r3, #137	; 0x89
 800e0f4:	6838      	ldr	r0, [r7, #0]
 800e0f6:	f7f2 f88b 	bl	8000210 <strlen>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	b29b      	uxth	r3, r3
 800e0fe:	3304      	adds	r3, #4
 800e100:	b29b      	uxth	r3, r3
 800e102:	461a      	mov	r2, r3
 800e104:	4621      	mov	r1, r4
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f7ff fe2e 	bl	800dd68 <_ZN3BTD11HCI_CommandEPht>
}
 800e10c:	bf00      	nop
 800e10e:	3714      	adds	r7, #20
 800e110:	46bd      	mov	sp, r7
 800e112:	bd90      	pop	{r4, r7, pc}

0800e114 <_ZN3BTD18hci_set_event_maskEv>:

void BTD::hci_set_event_mask() {
 800e114:	b580      	push	{r7, lr}
 800e116:	b082      	sub	sp, #8
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x01; // HCI OCF = 01
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2201      	movs	r2, #1
 800e120:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	220c      	movs	r2, #12
 800e128:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x08;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2208      	movs	r2, #8
 800e130:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        // The first 6 bytes are the default of 1FFF FFFF FFFF
        // However we need to set bits 48-55 for simple pairing to work
        hcibuf[3] = 0xFF;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	22ff      	movs	r2, #255	; 0xff
 800e138:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0xFF;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	22ff      	movs	r2, #255	; 0xff
 800e140:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0xFF;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	22ff      	movs	r2, #255	; 0xff
 800e148:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0xFF;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	22ff      	movs	r2, #255	; 0xff
 800e150:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0xFF;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	22ff      	movs	r2, #255	; 0xff
 800e158:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = 0x1F;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	221f      	movs	r2, #31
 800e160:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0xFF; // Enable bits 48-55 used for simple pairing
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	22ff      	movs	r2, #255	; 0xff
 800e168:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2200      	movs	r2, #0
 800e170:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

        HCI_Command(hcibuf, 11);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	3389      	adds	r3, #137	; 0x89
 800e178:	220b      	movs	r2, #11
 800e17a:	4619      	mov	r1, r3
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f7ff fdf3 	bl	800dd68 <_ZN3BTD11HCI_CommandEPht>
}
 800e182:	bf00      	nop
 800e184:	3708      	adds	r7, #8
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}

0800e18a <_ZN3BTD29hci_write_simple_pairing_modeEb>:

void BTD::hci_write_simple_pairing_mode(bool enable) {
 800e18a:	b580      	push	{r7, lr}
 800e18c:	b082      	sub	sp, #8
 800e18e:	af00      	add	r7, sp, #0
 800e190:	6078      	str	r0, [r7, #4]
 800e192:	460b      	mov	r3, r1
 800e194:	70fb      	strb	r3, [r7, #3]
        hcibuf[0] = 0x56; // HCI OCF = 56
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2256      	movs	r2, #86	; 0x56
 800e19a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	220c      	movs	r2, #12
 800e1a2:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 1; // parameter length = 1
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = enable ? 1 : 0;
 800e1ae:	78fb      	ldrb	r3, [r7, #3]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d001      	beq.n	800e1b8 <_ZN3BTD29hci_write_simple_pairing_modeEb+0x2e>
 800e1b4:	2201      	movs	r2, #1
 800e1b6:	e000      	b.n	800e1ba <_ZN3BTD29hci_write_simple_pairing_modeEb+0x30>
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	3389      	adds	r3, #137	; 0x89
 800e1c4:	2204      	movs	r2, #4
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	f7ff fdcd 	bl	800dd68 <_ZN3BTD11HCI_CommandEPht>
}
 800e1ce:	bf00      	nop
 800e1d0:	3708      	adds	r7, #8
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}

0800e1d6 <_ZN3BTD11hci_inquiryEv>:

void BTD::hci_inquiry() {
 800e1d6:	b580      	push	{r7, lr}
 800e1d8:	b082      	sub	sp, #8
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_DEVICE_FOUND);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e1e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1e8:	b29a      	uxth	r2, r3
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2201      	movs	r2, #1
 800e1f4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2204      	movs	r2, #4
 800e1fc:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x05; // Parameter Total Length = 5
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2205      	movs	r2, #5
 800e204:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x33; // LAP: Genera/Unlimited Inquiry Access Code (GIAC = 0x9E8B33) - see https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2233      	movs	r2, #51	; 0x33
 800e20c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x8B;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	228b      	movs	r2, #139	; 0x8b
 800e214:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x9E;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	229e      	movs	r2, #158	; 0x9e
 800e21c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0x30; // Inquiry time = 61.44 sec (maximum)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2230      	movs	r2, #48	; 0x30
 800e224:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0x0A; // 10 number of responses
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	220a      	movs	r2, #10
 800e22c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        HCI_Command(hcibuf, 8);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	3389      	adds	r3, #137	; 0x89
 800e234:	2208      	movs	r2, #8
 800e236:	4619      	mov	r1, r3
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f7ff fd95 	bl	800dd68 <_ZN3BTD11HCI_CommandEPht>
}
 800e23e:	bf00      	nop
 800e240:	3708      	adds	r7, #8
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}

0800e246 <_ZN3BTD18hci_inquiry_cancelEv>:

void BTD::hci_inquiry_cancel() {
 800e246:	b580      	push	{r7, lr}
 800e248:	b082      	sub	sp, #8
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x02;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2202      	movs	r2, #2
 800e252:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2204      	movs	r2, #4
 800e25a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00; // Parameter Total Length = 0
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2200      	movs	r2, #0
 800e262:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	3389      	adds	r3, #137	; 0x89
 800e26a:	2203      	movs	r2, #3
 800e26c:	4619      	mov	r1, r3
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f7ff fd7a 	bl	800dd68 <_ZN3BTD11HCI_CommandEPht>
}
 800e274:	bf00      	nop
 800e276:	3708      	adds	r7, #8
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}

0800e27c <_ZN3BTD11hci_connectEv>:

void BTD::hci_connect() {
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
        hci_connect(disc_bdaddr); // Use last discovered device
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	331c      	adds	r3, #28
 800e288:	4619      	mov	r1, r3
 800e28a:	6878      	ldr	r0, [r7, #4]
 800e28c:	f000 f804 	bl	800e298 <_ZN3BTD11hci_connectEPh>
}
 800e290:	bf00      	nop
 800e292:	3708      	adds	r7, #8
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}

0800e298 <_ZN3BTD11hci_connectEPh>:

void BTD::hci_connect(uint8_t *bdaddr) {
 800e298:	b580      	push	{r7, lr}
 800e29a:	b082      	sub	sp, #8
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
 800e2a0:	6039      	str	r1, [r7, #0]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE | HCI_FLAG_CONNECT_EVENT);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e2a8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800e2ac:	b29a      	uxth	r2, r3
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x05; // HCI OCF = 5
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2205      	movs	r2, #5
 800e2b8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2204      	movs	r2, #4
 800e2c0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0D; // parameter Total Length = 13
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	220d      	movs	r2, #13
 800e2c8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = bdaddr[0]; // 6 octet bdaddr (LSB)
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	781a      	ldrb	r2, [r3, #0]
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = bdaddr[1];
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	785a      	ldrb	r2, [r3, #1]
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = bdaddr[2];
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	789a      	ldrb	r2, [r3, #2]
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = bdaddr[3];
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	78da      	ldrb	r2, [r3, #3]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = bdaddr[4];
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	791a      	ldrb	r2, [r3, #4]
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = bdaddr[5];
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	795a      	ldrb	r2, [r3, #5]
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x18; // DM1 or DH1 may be used
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2218      	movs	r2, #24
 800e30c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0xCC; // DM3, DH3, DM5, DH5 may be used
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	22cc      	movs	r2, #204	; 0xcc
 800e314:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x01; // Page repetition mode R1
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2201      	movs	r2, #1
 800e31c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Reserved
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2200      	movs	r2, #0
 800e324:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
        hcibuf[13] = 0x00; // Clock offset
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2200      	movs	r2, #0
 800e32c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
        hcibuf[14] = 0x00; // Invalid clock offset
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2200      	movs	r2, #0
 800e334:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
        hcibuf[15] = 0x00; // Do not allow role switch
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2200      	movs	r2, #0
 800e33c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        HCI_Command(hcibuf, 16);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	3389      	adds	r3, #137	; 0x89
 800e344:	2210      	movs	r2, #16
 800e346:	4619      	mov	r1, r3
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f7ff fd0d 	bl	800dd68 <_ZN3BTD11HCI_CommandEPht>
}
 800e34e:	bf00      	nop
 800e350:	3708      	adds	r7, #8
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}

0800e356 <_ZN3BTD26hci_pin_code_request_replyEv>:

void BTD::hci_pin_code_request_reply() {
 800e356:	b590      	push	{r4, r7, lr}
 800e358:	b085      	sub	sp, #20
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0D; // HCI OCF = 0D
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	220d      	movs	r2, #13
 800e362:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2204      	movs	r2, #4
 800e36a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x17; // parameter length 23
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2217      	movs	r2, #23
 800e372:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	7f1a      	ldrb	r2, [r3, #28]
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	7f5a      	ldrb	r2, [r3, #29]
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	7f9a      	ldrb	r2, [r3, #30]
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	7fda      	ldrb	r2, [r3, #31]
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        if(pairWithWii) {
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d03f      	beq.n	800e440 <_ZN3BTD26hci_pin_code_request_replyEv+0xea>
                hcibuf[9] = 6; // Pin length is the length of the Bluetooth address
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2206      	movs	r2, #6
 800e3c4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                if(pairWiiUsingSync) {
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d013      	beq.n	800e3fa <_ZN3BTD26hci_pin_code_request_replyEv+0xa4>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPairing with Wii controller via SYNC"), 0x80);
#endif
                        for(uint8_t i = 0; i < 6; i++)
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	73fb      	strb	r3, [r7, #15]
 800e3d6:	7bfb      	ldrb	r3, [r7, #15]
 800e3d8:	2b05      	cmp	r3, #5
 800e3da:	d822      	bhi.n	800e422 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = my_bdaddr[i]; // The pin is the Bluetooth dongles Bluetooth address backwards
 800e3dc:	7bfa      	ldrb	r2, [r7, #15]
 800e3de:	7bfb      	ldrb	r3, [r7, #15]
 800e3e0:	330a      	adds	r3, #10
 800e3e2:	6879      	ldr	r1, [r7, #4]
 800e3e4:	440a      	add	r2, r1
 800e3e6:	7d11      	ldrb	r1, [r2, #20]
 800e3e8:	687a      	ldr	r2, [r7, #4]
 800e3ea:	4413      	add	r3, r2
 800e3ec:	460a      	mov	r2, r1
 800e3ee:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800e3f2:	7bfb      	ldrb	r3, [r7, #15]
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	73fb      	strb	r3, [r7, #15]
 800e3f8:	e7ed      	b.n	800e3d6 <_ZN3BTD26hci_pin_code_request_replyEv+0x80>
                } else {
                        for(uint8_t i = 0; i < 6; i++)
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	73bb      	strb	r3, [r7, #14]
 800e3fe:	7bbb      	ldrb	r3, [r7, #14]
 800e400:	2b05      	cmp	r3, #5
 800e402:	d80e      	bhi.n	800e422 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = disc_bdaddr[i]; // The pin is the Wiimote's Bluetooth address backwards
 800e404:	7bba      	ldrb	r2, [r7, #14]
 800e406:	7bbb      	ldrb	r3, [r7, #14]
 800e408:	330a      	adds	r3, #10
 800e40a:	6879      	ldr	r1, [r7, #4]
 800e40c:	440a      	add	r2, r1
 800e40e:	7f11      	ldrb	r1, [r2, #28]
 800e410:	687a      	ldr	r2, [r7, #4]
 800e412:	4413      	add	r3, r2
 800e414:	460a      	mov	r2, r1
 800e416:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800e41a:	7bbb      	ldrb	r3, [r7, #14]
 800e41c:	3301      	adds	r3, #1
 800e41e:	73bb      	strb	r3, [r7, #14]
 800e420:	e7ed      	b.n	800e3fe <_ZN3BTD26hci_pin_code_request_replyEv+0xa8>
                }
                for(uint8_t i = 16; i < 26; i++)
 800e422:	2310      	movs	r3, #16
 800e424:	737b      	strb	r3, [r7, #13]
 800e426:	7b7b      	ldrb	r3, [r7, #13]
 800e428:	2b19      	cmp	r3, #25
 800e42a:	d83c      	bhi.n	800e4a6 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i] = 0x00; // The rest should be 0
 800e42c:	7b7b      	ldrb	r3, [r7, #13]
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	4413      	add	r3, r2
 800e432:	2200      	movs	r2, #0
 800e434:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(uint8_t i = 16; i < 26; i++)
 800e438:	7b7b      	ldrb	r3, [r7, #13]
 800e43a:	3301      	adds	r3, #1
 800e43c:	737b      	strb	r3, [r7, #13]
 800e43e:	e7f2      	b.n	800e426 <_ZN3BTD26hci_pin_code_request_replyEv+0xd0>
        } else {
                hcibuf[9] = strlen(btdPin); // Length of pin
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	691b      	ldr	r3, [r3, #16]
 800e444:	4618      	mov	r0, r3
 800e446:	f7f1 fee3 	bl	8000210 <strlen>
 800e44a:	4603      	mov	r3, r0
 800e44c:	b2da      	uxtb	r2, r3
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                uint8_t i;
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800e454:	2300      	movs	r3, #0
 800e456:	733b      	strb	r3, [r7, #12]
 800e458:	7b3c      	ldrb	r4, [r7, #12]
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	691b      	ldr	r3, [r3, #16]
 800e45e:	4618      	mov	r0, r3
 800e460:	f7f1 fed6 	bl	8000210 <strlen>
 800e464:	4603      	mov	r3, r0
 800e466:	429c      	cmp	r4, r3
 800e468:	d20f      	bcs.n	800e48a <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
                        hcibuf[i + 10] = btdPin[i];
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	691a      	ldr	r2, [r3, #16]
 800e46e:	7b3b      	ldrb	r3, [r7, #12]
 800e470:	441a      	add	r2, r3
 800e472:	7b3b      	ldrb	r3, [r7, #12]
 800e474:	330a      	adds	r3, #10
 800e476:	7811      	ldrb	r1, [r2, #0]
 800e478:	687a      	ldr	r2, [r7, #4]
 800e47a:	4413      	add	r3, r2
 800e47c:	460a      	mov	r2, r1
 800e47e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800e482:	7b3b      	ldrb	r3, [r7, #12]
 800e484:	3301      	adds	r3, #1
 800e486:	733b      	strb	r3, [r7, #12]
 800e488:	e7e6      	b.n	800e458 <_ZN3BTD26hci_pin_code_request_replyEv+0x102>
                for(; i < 16; i++)
 800e48a:	7b3b      	ldrb	r3, [r7, #12]
 800e48c:	2b0f      	cmp	r3, #15
 800e48e:	d80a      	bhi.n	800e4a6 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i + 10] = 0x00; // The rest should be 0
 800e490:	7b3b      	ldrb	r3, [r7, #12]
 800e492:	330a      	adds	r3, #10
 800e494:	687a      	ldr	r2, [r7, #4]
 800e496:	4413      	add	r3, r2
 800e498:	2200      	movs	r2, #0
 800e49a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(; i < 16; i++)
 800e49e:	7b3b      	ldrb	r3, [r7, #12]
 800e4a0:	3301      	adds	r3, #1
 800e4a2:	733b      	strb	r3, [r7, #12]
 800e4a4:	e7f1      	b.n	800e48a <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
        }

        HCI_Command(hcibuf, 26);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	3389      	adds	r3, #137	; 0x89
 800e4aa:	221a      	movs	r2, #26
 800e4ac:	4619      	mov	r1, r3
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	f7ff fc5a 	bl	800dd68 <_ZN3BTD11HCI_CommandEPht>
}
 800e4b4:	bf00      	nop
 800e4b6:	3714      	adds	r7, #20
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd90      	pop	{r4, r7, pc}

0800e4bc <_ZN3BTD35hci_pin_code_negative_request_replyEv>:

void BTD::hci_pin_code_negative_request_reply() {
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b082      	sub	sp, #8
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0E; // HCI OCF = 0E
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	220e      	movs	r2, #14
 800e4c8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2204      	movs	r2, #4
 800e4d0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2206      	movs	r2, #6
 800e4d8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	7f1a      	ldrb	r2, [r3, #28]
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	7f5a      	ldrb	r2, [r3, #29]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	7f9a      	ldrb	r2, [r3, #30]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	7fda      	ldrb	r2, [r3, #31]
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	3389      	adds	r3, #137	; 0x89
 800e520:	2209      	movs	r2, #9
 800e522:	4619      	mov	r1, r3
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f7ff fc1f 	bl	800dd68 <_ZN3BTD11HCI_CommandEPht>
}
 800e52a:	bf00      	nop
 800e52c:	3708      	adds	r7, #8
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}

0800e532 <_ZN3BTD35hci_link_key_request_negative_replyEv>:

void BTD::hci_link_key_request_negative_reply() {
 800e532:	b580      	push	{r7, lr}
 800e534:	b082      	sub	sp, #8
 800e536:	af00      	add	r7, sp, #0
 800e538:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0C; // HCI OCF = 0C
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	220c      	movs	r2, #12
 800e53e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2204      	movs	r2, #4
 800e546:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2206      	movs	r2, #6
 800e54e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	7f1a      	ldrb	r2, [r3, #28]
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	7f5a      	ldrb	r2, [r3, #29]
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	7f9a      	ldrb	r2, [r3, #30]
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	7fda      	ldrb	r2, [r3, #31]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	3389      	adds	r3, #137	; 0x89
 800e596:	2209      	movs	r2, #9
 800e598:	4619      	mov	r1, r3
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f7ff fbe4 	bl	800dd68 <_ZN3BTD11HCI_CommandEPht>
}
 800e5a0:	bf00      	nop
 800e5a2:	3708      	adds	r7, #8
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}

0800e5a8 <_ZN3BTD31hci_io_capability_request_replyEv>:

void BTD::hci_io_capability_request_reply() {
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2B; // HCI OCF = 2B
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	222b      	movs	r2, #43	; 0x2b
 800e5b4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2204      	movs	r2, #4
 800e5bc:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x09;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2209      	movs	r2, #9
 800e5c4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	7f1a      	ldrb	r2, [r3, #28]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	7f5a      	ldrb	r2, [r3, #29]
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	7f9a      	ldrb	r2, [r3, #30]
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	7fda      	ldrb	r2, [r3, #31]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x03; // NoInputNoOutput
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2203      	movs	r2, #3
 800e60c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // OOB authentication data not present
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2200      	movs	r2, #0
 800e614:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // MITM Protection Not Required – No Bonding. Numeric comparison with automatic accept allowed
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2200      	movs	r2, #0
 800e61c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

        HCI_Command(hcibuf, 12);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	3389      	adds	r3, #137	; 0x89
 800e624:	220c      	movs	r2, #12
 800e626:	4619      	mov	r1, r3
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	f7ff fb9d 	bl	800dd68 <_ZN3BTD11HCI_CommandEPht>
}
 800e62e:	bf00      	nop
 800e630:	3708      	adds	r7, #8
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}

0800e636 <_ZN3BTD35hci_user_confirmation_request_replyEv>:

void BTD::hci_user_confirmation_request_reply() {
 800e636:	b580      	push	{r7, lr}
 800e638:	b082      	sub	sp, #8
 800e63a:	af00      	add	r7, sp, #0
 800e63c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2C; // HCI OCF = 2C
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	222c      	movs	r2, #44	; 0x2c
 800e642:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2204      	movs	r2, #4
 800e64a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2206      	movs	r2, #6
 800e652:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	7f1a      	ldrb	r2, [r3, #28]
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	7f5a      	ldrb	r2, [r3, #29]
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	7f9a      	ldrb	r2, [r3, #30]
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	7fda      	ldrb	r2, [r3, #31]
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	3389      	adds	r3, #137	; 0x89
 800e69a:	2209      	movs	r2, #9
 800e69c:	4619      	mov	r1, r3
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f7ff fb62 	bl	800dd68 <_ZN3BTD11HCI_CommandEPht>
}
 800e6a4:	bf00      	nop
 800e6a6:	3708      	adds	r7, #8
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}

0800e6ac <_ZN3BTD26hci_authentication_requestEv>:

void BTD::hci_authentication_request() {
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b082      	sub	sp, #8
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x11; // HCI OCF = 11
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2211      	movs	r2, #17
 800e6b8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2204      	movs	r2, #4
 800e6c0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x02; // parameter length = 2
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2202      	movs	r2, #2
 800e6c8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(hci_handle & 0xFF); //connection handle - low byte
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	8b5b      	ldrh	r3, [r3, #26]
 800e6d0:	b2da      	uxtb	r2, r3
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((hci_handle >> 8) & 0x0F); //connection handle - high byte
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	8b5b      	ldrh	r3, [r3, #26]
 800e6dc:	121b      	asrs	r3, r3, #8
 800e6de:	b2db      	uxtb	r3, r3
 800e6e0:	f003 030f 	and.w	r3, r3, #15
 800e6e4:	b2da      	uxtb	r2, r3
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

        HCI_Command(hcibuf, 5);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	3389      	adds	r3, #137	; 0x89
 800e6f0:	2205      	movs	r2, #5
 800e6f2:	4619      	mov	r1, r3
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f7ff fb37 	bl	800dd68 <_ZN3BTD11HCI_CommandEPht>
}
 800e6fa:	bf00      	nop
 800e6fc:	3708      	adds	r7, #8
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}

0800e702 <_ZN3BTD14hci_disconnectEt>:

void BTD::hci_disconnect(uint16_t handle) { // This is called by the different services
 800e702:	b580      	push	{r7, lr}
 800e704:	b082      	sub	sp, #8
 800e706:	af00      	add	r7, sp, #0
 800e708:	6078      	str	r0, [r7, #4]
 800e70a:	460b      	mov	r3, r1
 800e70c:	807b      	strh	r3, [r7, #2]
        hci_clear_flag(HCI_FLAG_DISCONNECT_COMPLETE);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e714:	f023 0304 	bic.w	r3, r3, #4
 800e718:	b29a      	uxth	r2, r3
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x06; // HCI OCF = 6
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2206      	movs	r2, #6
 800e724:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2204      	movs	r2, #4
 800e72c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2203      	movs	r2, #3
 800e734:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(handle & 0xFF); //connection handle - low byte
 800e738:	887b      	ldrh	r3, [r7, #2]
 800e73a:	b2da      	uxtb	r2, r3
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((handle >> 8) & 0x0F); //connection handle - high byte
 800e742:	887b      	ldrh	r3, [r7, #2]
 800e744:	121b      	asrs	r3, r3, #8
 800e746:	b2db      	uxtb	r3, r3
 800e748:	f003 030f 	and.w	r3, r3, #15
 800e74c:	b2da      	uxtb	r2, r3
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x13; // reason
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2213      	movs	r2, #19
 800e758:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	3389      	adds	r3, #137	; 0x89
 800e760:	2206      	movs	r2, #6
 800e762:	4619      	mov	r1, r3
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f7ff faff 	bl	800dd68 <_ZN3BTD11HCI_CommandEPht>
}
 800e76a:	bf00      	nop
 800e76c:	3708      	adds	r7, #8
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}

0800e772 <_ZN3BTD25hci_write_class_of_deviceEv>:

void BTD::hci_write_class_of_device() { // See http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800e772:	b580      	push	{r7, lr}
 800e774:	b082      	sub	sp, #8
 800e776:	af00      	add	r7, sp, #0
 800e778:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x24; // HCI OCF = 24
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2224      	movs	r2, #36	; 0x24
 800e77e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	220c      	movs	r2, #12
 800e786:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	2203      	movs	r2, #3
 800e78e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x04; // Robot
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2204      	movs	r2, #4
 800e796:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x08; // Toy
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2208      	movs	r2, #8
 800e79e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x00;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	3389      	adds	r3, #137	; 0x89
 800e7ae:	2206      	movs	r2, #6
 800e7b0:	4619      	mov	r1, r3
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f7ff fad8 	bl	800dd68 <_ZN3BTD11HCI_CommandEPht>
}
 800e7b8:	bf00      	nop
 800e7ba:	3708      	adds	r7, #8
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}

0800e7c0 <_ZN3BTD13L2CAP_CommandEtPhhhh>:
 */
/************************************************************/
/*                    L2CAP Commands                        */

/************************************************************/
void BTD::L2CAP_Command(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh) {
 800e7c0:	b5b0      	push	{r4, r5, r7, lr}
 800e7c2:	b08a      	sub	sp, #40	; 0x28
 800e7c4:	af02      	add	r7, sp, #8
 800e7c6:	60f8      	str	r0, [r7, #12]
 800e7c8:	607a      	str	r2, [r7, #4]
 800e7ca:	461a      	mov	r2, r3
 800e7cc:	460b      	mov	r3, r1
 800e7ce:	817b      	strh	r3, [r7, #10]
 800e7d0:	4613      	mov	r3, r2
 800e7d2:	727b      	strb	r3, [r7, #9]
                Notify(PSTR(" - Channel ID: "), 0x80);
                D_PrintHex<uint8_t > (channelHigh, 0x80);
                Notify(PSTR(" "), 0x80);
                D_PrintHex<uint8_t > (channelLow, 0x80);
#endif
        }
 800e7d4:	466b      	mov	r3, sp
 800e7d6:	461d      	mov	r5, r3
        uint8_t buf[8 + nbytes];
 800e7d8:	7a7b      	ldrb	r3, [r7, #9]
 800e7da:	1ddc      	adds	r4, r3, #7
 800e7dc:	61bc      	str	r4, [r7, #24]
 800e7de:	4623      	mov	r3, r4
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f04f 0100 	mov.w	r1, #0
 800e7e8:	f04f 0200 	mov.w	r2, #0
 800e7ec:	f04f 0300 	mov.w	r3, #0
 800e7f0:	00cb      	lsls	r3, r1, #3
 800e7f2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800e7f6:	00c2      	lsls	r2, r0, #3
 800e7f8:	4623      	mov	r3, r4
 800e7fa:	3301      	adds	r3, #1
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f04f 0100 	mov.w	r1, #0
 800e802:	f04f 0200 	mov.w	r2, #0
 800e806:	f04f 0300 	mov.w	r3, #0
 800e80a:	00cb      	lsls	r3, r1, #3
 800e80c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800e810:	00c2      	lsls	r2, r0, #3
 800e812:	4623      	mov	r3, r4
 800e814:	3301      	adds	r3, #1
 800e816:	3307      	adds	r3, #7
 800e818:	08db      	lsrs	r3, r3, #3
 800e81a:	00db      	lsls	r3, r3, #3
 800e81c:	ebad 0d03 	sub.w	sp, sp, r3
 800e820:	ab02      	add	r3, sp, #8
 800e822:	3300      	adds	r3, #0
 800e824:	617b      	str	r3, [r7, #20]
        buf[0] = (uint8_t)(handle & 0xff); // HCI handle with PB,BC flag
 800e826:	897b      	ldrh	r3, [r7, #10]
 800e828:	b2da      	uxtb	r2, r3
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	701a      	strb	r2, [r3, #0]
        buf[1] = (uint8_t)(((handle >> 8) & 0x0f) | 0x20);
 800e82e:	897b      	ldrh	r3, [r7, #10]
 800e830:	121b      	asrs	r3, r3, #8
 800e832:	b25b      	sxtb	r3, r3
 800e834:	f003 030f 	and.w	r3, r3, #15
 800e838:	b25b      	sxtb	r3, r3
 800e83a:	f043 0320 	orr.w	r3, r3, #32
 800e83e:	b25b      	sxtb	r3, r3
 800e840:	b2da      	uxtb	r2, r3
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	705a      	strb	r2, [r3, #1]
        buf[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
 800e846:	7a7b      	ldrb	r3, [r7, #9]
 800e848:	3304      	adds	r3, #4
 800e84a:	b2da      	uxtb	r2, r3
 800e84c:	697b      	ldr	r3, [r7, #20]
 800e84e:	709a      	strb	r2, [r3, #2]
        buf[3] = (uint8_t)((4 + nbytes) >> 8);
 800e850:	7a7b      	ldrb	r3, [r7, #9]
 800e852:	3304      	adds	r3, #4
 800e854:	121b      	asrs	r3, r3, #8
 800e856:	b2da      	uxtb	r2, r3
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	70da      	strb	r2, [r3, #3]
        buf[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
 800e85c:	697b      	ldr	r3, [r7, #20]
 800e85e:	7a7a      	ldrb	r2, [r7, #9]
 800e860:	711a      	strb	r2, [r3, #4]
        buf[5] = (uint8_t)(nbytes >> 8);
 800e862:	7a7b      	ldrb	r3, [r7, #9]
 800e864:	121b      	asrs	r3, r3, #8
 800e866:	b2da      	uxtb	r2, r3
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	715a      	strb	r2, [r3, #5]
        buf[6] = channelLow;
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800e872:	719a      	strb	r2, [r3, #6]
        buf[7] = channelHigh;
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800e87a:	71da      	strb	r2, [r3, #7]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800e87c:	2300      	movs	r3, #0
 800e87e:	83fb      	strh	r3, [r7, #30]
 800e880:	7a7b      	ldrb	r3, [r7, #9]
 800e882:	b29b      	uxth	r3, r3
 800e884:	8bfa      	ldrh	r2, [r7, #30]
 800e886:	429a      	cmp	r2, r3
 800e888:	d20b      	bcs.n	800e8a2 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xe2>
                buf[8 + i] = data[i];
 800e88a:	8bfb      	ldrh	r3, [r7, #30]
 800e88c:	687a      	ldr	r2, [r7, #4]
 800e88e:	441a      	add	r2, r3
 800e890:	8bfb      	ldrh	r3, [r7, #30]
 800e892:	3308      	adds	r3, #8
 800e894:	7811      	ldrb	r1, [r2, #0]
 800e896:	697a      	ldr	r2, [r7, #20]
 800e898:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800e89a:	8bfb      	ldrh	r3, [r7, #30]
 800e89c:	3301      	adds	r3, #1
 800e89e:	83fb      	strh	r3, [r7, #30]
 800e8a0:	e7ee      	b.n	800e880 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xc0>
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ BTD_DATAOUT_PIPE ].epAddr, (8 + nbytes), buf);
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800e8b2:	7a7b      	ldrb	r3, [r7, #9]
 800e8b4:	b29b      	uxth	r3, r3
 800e8b6:	3308      	adds	r3, #8
 800e8b8:	b29c      	uxth	r4, r3
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	9300      	str	r3, [sp, #0]
 800e8be:	4623      	mov	r3, r4
 800e8c0:	f002 fc34 	bl	801112c <_ZN3USB11outTransferEhhtPh>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	74fb      	strb	r3, [r7, #19]
        if(rcode) {
 800e8c8:	7cfb      	ldrb	r3, [r7, #19]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d002      	beq.n	800e8d4 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x114>
                delay(100); // This small delay prevents it from overflowing if it fails
 800e8ce:	2064      	movs	r0, #100	; 0x64
 800e8d0:	f7f3 fb0c 	bl	8001eec <HAL_Delay>
 800e8d4:	46ad      	mov	sp, r5
}
 800e8d6:	bf00      	nop
 800e8d8:	3720      	adds	r7, #32
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bdb0      	pop	{r4, r5, r7, pc}

0800e8de <_ZN3BTD24l2cap_connection_requestEthPht>:

void BTD::l2cap_connection_request(uint16_t handle, uint8_t rxid, uint8_t* scid, uint16_t psm) {
 800e8de:	b580      	push	{r7, lr}
 800e8e0:	b086      	sub	sp, #24
 800e8e2:	af02      	add	r7, sp, #8
 800e8e4:	60f8      	str	r0, [r7, #12]
 800e8e6:	607b      	str	r3, [r7, #4]
 800e8e8:	460b      	mov	r3, r1
 800e8ea:	817b      	strh	r3, [r7, #10]
 800e8ec:	4613      	mov	r3, r2
 800e8ee:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_REQUEST; // Code
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	2202      	movs	r2, #2
 800e8f4:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	7a7a      	ldrb	r2, [r7, #9]
 800e8fc:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	2204      	movs	r2, #4
 800e904:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	2200      	movs	r2, #0
 800e90c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = (uint8_t)(psm & 0xff); // PSM
 800e910:	8b3b      	ldrh	r3, [r7, #24]
 800e912:	b2da      	uxtb	r2, r3
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = (uint8_t)(psm >> 8);
 800e91a:	8b3b      	ldrh	r3, [r7, #24]
 800e91c:	121b      	asrs	r3, r3, #8
 800e91e:	b2da      	uxtb	r2, r3
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	781a      	ldrb	r2, [r3, #0]
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	785a      	ldrb	r2, [r3, #1]
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	f203 1209 	addw	r2, r3, #265	; 0x109
 800e940:	8979      	ldrh	r1, [r7, #10]
 800e942:	2300      	movs	r3, #0
 800e944:	9301      	str	r3, [sp, #4]
 800e946:	2301      	movs	r3, #1
 800e948:	9300      	str	r3, [sp, #0]
 800e94a:	2308      	movs	r3, #8
 800e94c:	68f8      	ldr	r0, [r7, #12]
 800e94e:	f7ff ff37 	bl	800e7c0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e952:	bf00      	nop
 800e954:	3710      	adds	r7, #16
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}

0800e95a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>:

void BTD::l2cap_connection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid, uint8_t result) {
 800e95a:	b580      	push	{r7, lr}
 800e95c:	b086      	sub	sp, #24
 800e95e:	af02      	add	r7, sp, #8
 800e960:	60f8      	str	r0, [r7, #12]
 800e962:	607b      	str	r3, [r7, #4]
 800e964:	460b      	mov	r3, r1
 800e966:	817b      	strh	r3, [r7, #10]
 800e968:	4613      	mov	r3, r2
 800e96a:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_RESPONSE; // Code
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	2203      	movs	r2, #3
 800e970:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	7a7a      	ldrb	r2, [r7, #9]
 800e978:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	2208      	movs	r2, #8
 800e980:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2200      	movs	r2, #0
 800e988:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	781a      	ldrb	r2, [r3, #0]
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	785a      	ldrb	r2, [r3, #1]
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800e9a0:	69bb      	ldr	r3, [r7, #24]
 800e9a2:	781a      	ldrb	r2, [r3, #0]
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800e9aa:	69bb      	ldr	r3, [r7, #24]
 800e9ac:	785a      	ldrb	r2, [r3, #1]
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = result; // Result: Pending or Success
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	7f3a      	ldrb	r2, [r7, #28]
 800e9b8:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	2200      	movs	r2, #0
 800e9c0:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00; // No further information
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	f203 1209 	addw	r2, r3, #265	; 0x109
 800e9da:	8979      	ldrh	r1, [r7, #10]
 800e9dc:	2300      	movs	r3, #0
 800e9de:	9301      	str	r3, [sp, #4]
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	9300      	str	r3, [sp, #0]
 800e9e4:	230c      	movs	r3, #12
 800e9e6:	68f8      	ldr	r0, [r7, #12]
 800e9e8:	f7ff feea 	bl	800e7c0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e9ec:	bf00      	nop
 800e9ee:	3710      	adds	r7, #16
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}

0800e9f4 <_ZN3BTD20l2cap_config_requestEthPh>:

void BTD::l2cap_config_request(uint16_t handle, uint8_t rxid, uint8_t* dcid) {
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b086      	sub	sp, #24
 800e9f8:	af02      	add	r7, sp, #8
 800e9fa:	60f8      	str	r0, [r7, #12]
 800e9fc:	607b      	str	r3, [r7, #4]
 800e9fe:	460b      	mov	r3, r1
 800ea00:	817b      	strh	r3, [r7, #10]
 800ea02:	4613      	mov	r3, r2
 800ea04:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_REQUEST; // Code
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	2204      	movs	r2, #4
 800ea0a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	7a7a      	ldrb	r2, [r7, #9]
 800ea12:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	2208      	movs	r2, #8
 800ea1a:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	2200      	movs	r2, #0
 800ea22:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	781a      	ldrb	r2, [r3, #0]
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	785a      	ldrb	r2, [r3, #1]
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flags
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	2200      	movs	r2, #0
 800ea46:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x01; // Config Opt: type = MTU (Maximum Transmission Unit) - Hint
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	2201      	movs	r2, #1
 800ea4e:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x02; // Config Opt: length
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	2202      	movs	r2, #2
 800ea56:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0xFF; // MTU
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	22ff      	movs	r2, #255	; 0xff
 800ea5e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0xFF;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	22ff      	movs	r2, #255	; 0xff
 800ea66:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	f203 1209 	addw	r2, r3, #265	; 0x109
 800ea70:	8979      	ldrh	r1, [r7, #10]
 800ea72:	2300      	movs	r3, #0
 800ea74:	9301      	str	r3, [sp, #4]
 800ea76:	2301      	movs	r3, #1
 800ea78:	9300      	str	r3, [sp, #0]
 800ea7a:	230c      	movs	r3, #12
 800ea7c:	68f8      	ldr	r0, [r7, #12]
 800ea7e:	f7ff fe9f 	bl	800e7c0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800ea82:	bf00      	nop
 800ea84:	3710      	adds	r7, #16
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}

0800ea8a <_ZN3BTD21l2cap_config_responseEthPh>:

void BTD::l2cap_config_response(uint16_t handle, uint8_t rxid, uint8_t* scid) {
 800ea8a:	b580      	push	{r7, lr}
 800ea8c:	b086      	sub	sp, #24
 800ea8e:	af02      	add	r7, sp, #8
 800ea90:	60f8      	str	r0, [r7, #12]
 800ea92:	607b      	str	r3, [r7, #4]
 800ea94:	460b      	mov	r3, r1
 800ea96:	817b      	strh	r3, [r7, #10]
 800ea98:	4613      	mov	r3, r2
 800ea9a:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_RESPONSE; // Code
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	2205      	movs	r2, #5
 800eaa0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	7a7a      	ldrb	r2, [r7, #9]
 800eaa8:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x0A; // Length
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	220a      	movs	r2, #10
 800eab0:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2200      	movs	r2, #0
 800eab8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = scid[0]; // Source CID
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	781a      	ldrb	r2, [r3, #0]
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = scid[1];
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	785a      	ldrb	r2, [r3, #1]
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flag
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	2200      	movs	r2, #0
 800ead4:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2200      	movs	r2, #0
 800eadc:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00; // Result
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	2200      	movs	r2, #0
 800eae4:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	2200      	movs	r2, #0
 800eaec:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x01; // Config
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	2201      	movs	r2, #1
 800eaf4:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x02;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	2202      	movs	r2, #2
 800eafc:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
        l2capoutbuf[12] = 0xA0;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	22a0      	movs	r2, #160	; 0xa0
 800eb04:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
        l2capoutbuf[13] = 0x02;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	2202      	movs	r2, #2
 800eb0c:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

        L2CAP_Command(handle, l2capoutbuf, 14);
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	f203 1209 	addw	r2, r3, #265	; 0x109
 800eb16:	8979      	ldrh	r1, [r7, #10]
 800eb18:	2300      	movs	r3, #0
 800eb1a:	9301      	str	r3, [sp, #4]
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	9300      	str	r3, [sp, #0]
 800eb20:	230e      	movs	r3, #14
 800eb22:	68f8      	ldr	r0, [r7, #12]
 800eb24:	f7ff fe4c 	bl	800e7c0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800eb28:	bf00      	nop
 800eb2a:	3710      	adds	r7, #16
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}

0800eb30 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>:

void BTD::l2cap_disconnection_request(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b086      	sub	sp, #24
 800eb34:	af02      	add	r7, sp, #8
 800eb36:	60f8      	str	r0, [r7, #12]
 800eb38:	607b      	str	r3, [r7, #4]
 800eb3a:	460b      	mov	r3, r1
 800eb3c:	817b      	strh	r3, [r7, #10]
 800eb3e:	4613      	mov	r3, r2
 800eb40:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_REQUEST; // Code
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	2206      	movs	r2, #6
 800eb46:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	7a7a      	ldrb	r2, [r7, #9]
 800eb4e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	2204      	movs	r2, #4
 800eb56:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	781a      	ldrb	r2, [r3, #0]
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	785a      	ldrb	r2, [r3, #1]
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800eb76:	69bb      	ldr	r3, [r7, #24]
 800eb78:	781a      	ldrb	r2, [r3, #0]
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800eb80:	69bb      	ldr	r3, [r7, #24]
 800eb82:	785a      	ldrb	r2, [r3, #1]
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	f203 1209 	addw	r2, r3, #265	; 0x109
 800eb90:	8979      	ldrh	r1, [r7, #10]
 800eb92:	2300      	movs	r3, #0
 800eb94:	9301      	str	r3, [sp, #4]
 800eb96:	2301      	movs	r3, #1
 800eb98:	9300      	str	r3, [sp, #0]
 800eb9a:	2308      	movs	r3, #8
 800eb9c:	68f8      	ldr	r0, [r7, #12]
 800eb9e:	f7ff fe0f 	bl	800e7c0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800eba2:	bf00      	nop
 800eba4:	3710      	adds	r7, #16
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}

0800ebaa <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>:

void BTD::l2cap_disconnection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800ebaa:	b580      	push	{r7, lr}
 800ebac:	b086      	sub	sp, #24
 800ebae:	af02      	add	r7, sp, #8
 800ebb0:	60f8      	str	r0, [r7, #12]
 800ebb2:	607b      	str	r3, [r7, #4]
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	817b      	strh	r3, [r7, #10]
 800ebb8:	4613      	mov	r3, r2
 800ebba:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_RESPONSE; // Code
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	2207      	movs	r2, #7
 800ebc0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	7a7a      	ldrb	r2, [r7, #9]
 800ebc8:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	2204      	movs	r2, #4
 800ebd0:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	781a      	ldrb	r2, [r3, #0]
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	785a      	ldrb	r2, [r3, #1]
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800ebf0:	69bb      	ldr	r3, [r7, #24]
 800ebf2:	781a      	ldrb	r2, [r3, #0]
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800ebfa:	69bb      	ldr	r3, [r7, #24]
 800ebfc:	785a      	ldrb	r2, [r3, #1]
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f203 1209 	addw	r2, r3, #265	; 0x109
 800ec0a:	8979      	ldrh	r1, [r7, #10]
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	9301      	str	r3, [sp, #4]
 800ec10:	2301      	movs	r3, #1
 800ec12:	9300      	str	r3, [sp, #0]
 800ec14:	2308      	movs	r3, #8
 800ec16:	68f8      	ldr	r0, [r7, #12]
 800ec18:	f7ff fdd2 	bl	800e7c0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800ec1c:	bf00      	nop
 800ec1e:	3710      	adds	r7, #16
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}

0800ec24 <_ZN3BTD26l2cap_information_responseEthhh>:

void BTD::l2cap_information_response(uint16_t handle, uint8_t rxid, uint8_t infoTypeLow, uint8_t infoTypeHigh) {
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b084      	sub	sp, #16
 800ec28:	af02      	add	r7, sp, #8
 800ec2a:	6078      	str	r0, [r7, #4]
 800ec2c:	4608      	mov	r0, r1
 800ec2e:	4611      	mov	r1, r2
 800ec30:	461a      	mov	r2, r3
 800ec32:	4603      	mov	r3, r0
 800ec34:	807b      	strh	r3, [r7, #2]
 800ec36:	460b      	mov	r3, r1
 800ec38:	707b      	strb	r3, [r7, #1]
 800ec3a:	4613      	mov	r3, r2
 800ec3c:	703b      	strb	r3, [r7, #0]
        l2capoutbuf[0] = L2CAP_CMD_INFORMATION_RESPONSE; // Code
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	220b      	movs	r2, #11
 800ec42:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	787a      	ldrb	r2, [r7, #1]
 800ec4a:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2208      	movs	r2, #8
 800ec52:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2200      	movs	r2, #0
 800ec5a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = infoTypeLow;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	783a      	ldrb	r2, [r7, #0]
 800ec62:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = infoTypeHigh;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	7c3a      	ldrb	r2, [r7, #16]
 800ec6a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Result = success
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2200      	movs	r2, #0
 800ec72:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00; // Result = success
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2200      	movs	r2, #0
 800ec7a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2200      	movs	r2, #0
 800ec82:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2200      	movs	r2, #0
 800ec92:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f203 1209 	addw	r2, r3, #265	; 0x109
 800eca4:	8879      	ldrh	r1, [r7, #2]
 800eca6:	2300      	movs	r3, #0
 800eca8:	9301      	str	r3, [sp, #4]
 800ecaa:	2301      	movs	r3, #1
 800ecac:	9300      	str	r3, [sp, #0]
 800ecae:	230c      	movs	r3, #12
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f7ff fd85 	bl	800e7c0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800ecb6:	bf00      	nop
 800ecb8:	3708      	adds	r7, #8
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}

0800ecbe <_ZN3BTD9setBdaddrEPh>:

/* PS3 Commands - only set Bluetooth address is implemented in this library */
void BTD::setBdaddr(uint8_t* bdaddr) {
 800ecbe:	b580      	push	{r7, lr}
 800ecc0:	b08e      	sub	sp, #56	; 0x38
 800ecc2:	af08      	add	r7, sp, #32
 800ecc4:	6078      	str	r0, [r7, #4]
 800ecc6:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[8];
        buf[0] = 0x01;
 800ecc8:	2301      	movs	r3, #1
 800ecca:	733b      	strb	r3, [r7, #12]
        buf[1] = 0x00;
 800eccc:	2300      	movs	r3, #0
 800ecce:	737b      	strb	r3, [r7, #13]

        for(uint8_t i = 0; i < 6; i++)
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	75fb      	strb	r3, [r7, #23]
 800ecd4:	7dfb      	ldrb	r3, [r7, #23]
 800ecd6:	2b05      	cmp	r3, #5
 800ecd8:	d811      	bhi.n	800ecfe <_ZN3BTD9setBdaddrEPh+0x40>
                buf[i + 2] = bdaddr[5 - i]; // Copy into buffer, has to be written reversed, so it is MSB first
 800ecda:	7dfb      	ldrb	r3, [r7, #23]
 800ecdc:	f1c3 0305 	rsb	r3, r3, #5
 800ece0:	461a      	mov	r2, r3
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	441a      	add	r2, r3
 800ece6:	7dfb      	ldrb	r3, [r7, #23]
 800ece8:	3302      	adds	r3, #2
 800ecea:	7812      	ldrb	r2, [r2, #0]
 800ecec:	f107 0118 	add.w	r1, r7, #24
 800ecf0:	440b      	add	r3, r1
 800ecf2:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800ecf6:	7dfb      	ldrb	r3, [r7, #23]
 800ecf8:	3301      	adds	r3, #1
 800ecfa:	75fb      	strb	r3, [r7, #23]
 800ecfc:	e7ea      	b.n	800ecd4 <_ZN3BTD9setBdaddrEPh+0x16>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0xF5, 0x03, 0x00, 8, 8, buf, NULL);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ed0e:	2300      	movs	r3, #0
 800ed10:	9307      	str	r3, [sp, #28]
 800ed12:	f107 030c 	add.w	r3, r7, #12
 800ed16:	9306      	str	r3, [sp, #24]
 800ed18:	2308      	movs	r3, #8
 800ed1a:	9305      	str	r3, [sp, #20]
 800ed1c:	2308      	movs	r3, #8
 800ed1e:	9304      	str	r3, [sp, #16]
 800ed20:	2300      	movs	r3, #0
 800ed22:	9303      	str	r3, [sp, #12]
 800ed24:	2303      	movs	r3, #3
 800ed26:	9302      	str	r3, [sp, #8]
 800ed28:	23f5      	movs	r3, #245	; 0xf5
 800ed2a:	9301      	str	r3, [sp, #4]
 800ed2c:	2309      	movs	r3, #9
 800ed2e:	9300      	str	r3, [sp, #0]
 800ed30:	2321      	movs	r3, #33	; 0x21
 800ed32:	f002 f81c 	bl	8010d6e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800ed36:	bf00      	nop
 800ed38:	3718      	adds	r7, #24
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}

0800ed3e <_ZN3BTD13setMoveBdaddrEPh>:

void BTD::setMoveBdaddr(uint8_t* bdaddr) {
 800ed3e:	b580      	push	{r7, lr}
 800ed40:	b08e      	sub	sp, #56	; 0x38
 800ed42:	af08      	add	r7, sp, #32
 800ed44:	6078      	str	r0, [r7, #4]
 800ed46:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[11];
        buf[0] = 0x05;
 800ed48:	2305      	movs	r3, #5
 800ed4a:	733b      	strb	r3, [r7, #12]
        buf[7] = 0x10;
 800ed4c:	2310      	movs	r3, #16
 800ed4e:	74fb      	strb	r3, [r7, #19]
        buf[8] = 0x01;
 800ed50:	2301      	movs	r3, #1
 800ed52:	753b      	strb	r3, [r7, #20]
        buf[9] = 0x02;
 800ed54:	2302      	movs	r3, #2
 800ed56:	757b      	strb	r3, [r7, #21]
        buf[10] = 0x12;
 800ed58:	2312      	movs	r3, #18
 800ed5a:	75bb      	strb	r3, [r7, #22]

        for(uint8_t i = 0; i < 6; i++)
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	75fb      	strb	r3, [r7, #23]
 800ed60:	7dfb      	ldrb	r3, [r7, #23]
 800ed62:	2b05      	cmp	r3, #5
 800ed64:	d80e      	bhi.n	800ed84 <_ZN3BTD13setMoveBdaddrEPh+0x46>
                buf[i + 1] = bdaddr[i];
 800ed66:	7dfb      	ldrb	r3, [r7, #23]
 800ed68:	683a      	ldr	r2, [r7, #0]
 800ed6a:	441a      	add	r2, r3
 800ed6c:	7dfb      	ldrb	r3, [r7, #23]
 800ed6e:	3301      	adds	r3, #1
 800ed70:	7812      	ldrb	r2, [r2, #0]
 800ed72:	f107 0118 	add.w	r1, r7, #24
 800ed76:	440b      	add	r3, r1
 800ed78:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800ed7c:	7dfb      	ldrb	r3, [r7, #23]
 800ed7e:	3301      	adds	r3, #1
 800ed80:	75fb      	strb	r3, [r7, #23]
 800ed82:	e7ed      	b.n	800ed60 <_ZN3BTD13setMoveBdaddrEPh+0x22>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0x05), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0x05, 0x03, 0x00, 11, 11, buf, NULL);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ed94:	2300      	movs	r3, #0
 800ed96:	9307      	str	r3, [sp, #28]
 800ed98:	f107 030c 	add.w	r3, r7, #12
 800ed9c:	9306      	str	r3, [sp, #24]
 800ed9e:	230b      	movs	r3, #11
 800eda0:	9305      	str	r3, [sp, #20]
 800eda2:	230b      	movs	r3, #11
 800eda4:	9304      	str	r3, [sp, #16]
 800eda6:	2300      	movs	r3, #0
 800eda8:	9303      	str	r3, [sp, #12]
 800edaa:	2303      	movs	r3, #3
 800edac:	9302      	str	r3, [sp, #8]
 800edae:	2305      	movs	r3, #5
 800edb0:	9301      	str	r3, [sp, #4]
 800edb2:	2309      	movs	r3, #9
 800edb4:	9300      	str	r3, [sp, #0]
 800edb6:	2321      	movs	r3, #33	; 0x21
 800edb8:	f001 ffd9 	bl	8010d6e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800edbc:	bf00      	nop
 800edbe:	3718      	adds	r7, #24
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd80      	pop	{r7, pc}

0800edc4 <_ZN13USBReadParserC1Ev>:
class USBReadParser {
 800edc4:	b480      	push	{r7}
 800edc6:	b083      	sub	sp, #12
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
 800edcc:	4a04      	ldr	r2, [pc, #16]	; (800ede0 <_ZN13USBReadParserC1Ev+0x1c>)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	601a      	str	r2, [r3, #0]
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	4618      	mov	r0, r3
 800edd6:	370c      	adds	r7, #12
 800edd8:	46bd      	mov	sp, r7
 800edda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edde:	4770      	bx	lr
 800ede0:	080129bc 	.word	0x080129bc

0800ede4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b082      	sub	sp, #8
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
 800edec:	6039      	str	r1, [r7, #0]
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7ff ffe7 	bl	800edc4 <_ZN13USBReadParserC1Ev>
 800edf6:	4a21      	ldr	r2, [pc, #132]	; (800ee7c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	601a      	str	r2, [r3, #0]
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	683a      	ldr	r2, [r7, #0]
 800ee00:	605a      	str	r2, [r3, #4]
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	3308      	adds	r3, #8
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7fd fb65 	bl	800c4d6 <_ZN16MultiValueBufferC1Ev>
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	3310      	adds	r3, #16
 800ee10:	4618      	mov	r0, r3
 800ee12:	f7fd fb77 	bl	800c504 <_ZN20MultiByteValueParserC1Ev>
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	3318      	adds	r3, #24
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7fd fb9e 	bl	800c55c <_ZN11ByteSkipperC1Ev>
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2200      	movs	r2, #0
 800ee24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2200      	movs	r2, #0
 800ee34:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f103 0220 	add.w	r2, r3, #32
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f103 0210 	add.w	r2, r3, #16
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	3308      	adds	r3, #8
 800ee56:	4619      	mov	r1, r3
 800ee58:	4610      	mov	r0, r2
 800ee5a:	f7fd fb67 	bl	800c52c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	f103 0218 	add.w	r2, r3, #24
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	3308      	adds	r3, #8
 800ee68:	4619      	mov	r1, r3
 800ee6a:	4610      	mov	r0, r2
 800ee6c:	f7fd fb8a 	bl	800c584 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	4618      	mov	r0, r3
 800ee74:	3708      	adds	r7, #8
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}
 800ee7a:	bf00      	nop
 800ee7c:	08012964 	.word	0x08012964

0800ee80 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b082      	sub	sp, #8
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
 800ee88:	6039      	str	r1, [r7, #0]
UseOr(false) {
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7ff ff99 	bl	800edc4 <_ZN13USBReadParserC1Ev>
 800ee92:	4a21      	ldr	r2, [pc, #132]	; (800ef18 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	601a      	str	r2, [r3, #0]
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	683a      	ldr	r2, [r7, #0]
 800ee9c:	605a      	str	r2, [r3, #4]
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	3308      	adds	r3, #8
 800eea2:	4618      	mov	r0, r3
 800eea4:	f7fd fb17 	bl	800c4d6 <_ZN16MultiValueBufferC1Ev>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	3310      	adds	r3, #16
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7fd fb29 	bl	800c504 <_ZN20MultiByteValueParserC1Ev>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	3318      	adds	r3, #24
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f7fd fb50 	bl	800c55c <_ZN11ByteSkipperC1Ev>
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2200      	movs	r2, #0
 800eec0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2200      	movs	r2, #0
 800eec8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2200      	movs	r2, #0
 800eed0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2200      	movs	r2, #0
 800eed8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f103 0220 	add.w	r2, r3, #32
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f103 0210 	add.w	r2, r3, #16
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	3308      	adds	r3, #8
 800eef2:	4619      	mov	r1, r3
 800eef4:	4610      	mov	r0, r2
 800eef6:	f7fd fb19 	bl	800c52c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f103 0218 	add.w	r2, r3, #24
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	3308      	adds	r3, #8
 800ef04:	4619      	mov	r1, r3
 800ef06:	4610      	mov	r0, r2
 800ef08:	f7fd fb3c 	bl	800c584 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3708      	adds	r7, #8
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}
 800ef16:	bf00      	nop
 800ef18:	08012958 	.word	0x08012958

0800ef1c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b086      	sub	sp, #24
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	60f8      	str	r0, [r7, #12]
 800ef24:	607a      	str	r2, [r7, #4]
 800ef26:	603b      	str	r3, [r7, #0]
 800ef28:	460b      	mov	r3, r1
 800ef2a:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800ef2c:	897b      	ldrh	r3, [r7, #10]
 800ef2e:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	613b      	str	r3, [r7, #16]

        while(cntdn)
 800ef34:	8afb      	ldrh	r3, [r7, #22]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d00f      	beq.n	800ef5a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800ef3a:	f107 0216 	add.w	r2, r7, #22
 800ef3e:	f107 0310 	add.w	r3, r7, #16
 800ef42:	4619      	mov	r1, r3
 800ef44:	68f8      	ldr	r0, [r7, #12]
 800ef46:	f000 f82d 	bl	800efa4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	f083 0301 	eor.w	r3, r3, #1
 800ef50:	b2db      	uxtb	r3, r3
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d100      	bne.n	800ef58 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800ef56:	e7ed      	b.n	800ef34 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800ef58:	bf00      	nop
}
 800ef5a:	3718      	adds	r7, #24
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}

0800ef60 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt>:
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b086      	sub	sp, #24
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	60f8      	str	r0, [r7, #12]
 800ef68:	607a      	str	r2, [r7, #4]
 800ef6a:	603b      	str	r3, [r7, #0]
 800ef6c:	460b      	mov	r3, r1
 800ef6e:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800ef70:	897b      	ldrh	r3, [r7, #10]
 800ef72:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	613b      	str	r3, [r7, #16]
        while(cntdn)
 800ef78:	8afb      	ldrh	r3, [r7, #22]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d00f      	beq.n	800ef9e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800ef7e:	f107 0216 	add.w	r2, r7, #22
 800ef82:	f107 0310 	add.w	r3, r7, #16
 800ef86:	4619      	mov	r1, r3
 800ef88:	68f8      	ldr	r0, [r7, #12]
 800ef8a:	f000 f981 	bl	800f290 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	f083 0301 	eor.w	r3, r3, #1
 800ef94:	b2db      	uxtb	r3, r3
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d100      	bne.n	800ef9c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800ef9a:	e7ed      	b.n	800ef78 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800ef9c:	bf00      	nop
}
 800ef9e:	3718      	adds	r7, #24
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}

0800efa4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800efa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efa6:	b089      	sub	sp, #36	; 0x24
 800efa8:	af02      	add	r7, sp, #8
 800efaa:	60f8      	str	r0, [r7, #12]
 800efac:	60b9      	str	r1, [r7, #8]
 800efae:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	3320      	adds	r3, #32
 800efb4:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	3320      	adds	r3, #32
 800efba:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800efc2:	2b04      	cmp	r3, #4
 800efc4:	f200 815e 	bhi.w	800f284 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800efc8:	a201      	add	r2, pc, #4	; (adr r2, 800efd0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800efca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efce:	bf00      	nop
 800efd0:	0800efe5 	.word	0x0800efe5
 800efd4:	0800f005 	.word	0x0800f005
 800efd8:	0800f047 	.word	0x0800f047
 800efdc:	0800f05b 	.word	0x0800f05b
 800efe0:	0800f11f 	.word	0x0800f11f
                case 0:
                        theBuffer.valueSize = 2;
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	2202      	movs	r2, #2
 800efe8:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	f103 0210 	add.w	r2, r3, #16
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	3308      	adds	r3, #8
 800eff4:	4619      	mov	r1, r3
 800eff6:	4610      	mov	r0, r2
 800eff8:	f7fd fa98 	bl	800c52c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	2201      	movs	r2, #1
 800f000:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	3310      	adds	r3, #16
 800f008:	687a      	ldr	r2, [r7, #4]
 800f00a:	68b9      	ldr	r1, [r7, #8]
 800f00c:	4618      	mov	r0, r3
 800f00e:	f003 fa49 	bl	80124a4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f012:	4603      	mov	r3, r0
 800f014:	f083 0301 	eor.w	r3, r3, #1
 800f018:	b2db      	uxtb	r3, r3
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d001      	beq.n	800f022 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800f01e:	2300      	movs	r3, #0
 800f020:	e131      	b.n	800f286 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800f028:	781a      	ldrb	r2, [r3, #0]
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800f036:	785a      	ldrb	r2, [r3, #1]
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	2202      	movs	r2, #2
 800f042:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	3320      	adds	r3, #32
 800f04a:	1c9a      	adds	r2, r3, #2
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	2203      	movs	r2, #3
 800f056:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 3:
                        switch(dscrType) {
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f060:	3b02      	subs	r3, #2
 800f062:	2b1f      	cmp	r3, #31
 800f064:	d847      	bhi.n	800f0f6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800f066:	a201      	add	r2, pc, #4	; (adr r2, 800f06c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800f068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f06c:	0800f0f7 	.word	0x0800f0f7
 800f070:	0800f0f7 	.word	0x0800f0f7
 800f074:	0800f0ed 	.word	0x0800f0ed
 800f078:	0800f0f7 	.word	0x0800f0f7
 800f07c:	0800f0f7 	.word	0x0800f0f7
 800f080:	0800f0f7 	.word	0x0800f0f7
 800f084:	0800f0f7 	.word	0x0800f0f7
 800f088:	0800f0f7 	.word	0x0800f0f7
 800f08c:	0800f0f7 	.word	0x0800f0f7
 800f090:	0800f0f7 	.word	0x0800f0f7
 800f094:	0800f0f7 	.word	0x0800f0f7
 800f098:	0800f0f7 	.word	0x0800f0f7
 800f09c:	0800f0f7 	.word	0x0800f0f7
 800f0a0:	0800f0f7 	.word	0x0800f0f7
 800f0a4:	0800f0f7 	.word	0x0800f0f7
 800f0a8:	0800f0f7 	.word	0x0800f0f7
 800f0ac:	0800f0f7 	.word	0x0800f0f7
 800f0b0:	0800f0f7 	.word	0x0800f0f7
 800f0b4:	0800f0f7 	.word	0x0800f0f7
 800f0b8:	0800f0f7 	.word	0x0800f0f7
 800f0bc:	0800f0f7 	.word	0x0800f0f7
 800f0c0:	0800f0f7 	.word	0x0800f0f7
 800f0c4:	0800f0f7 	.word	0x0800f0f7
 800f0c8:	0800f0f7 	.word	0x0800f0f7
 800f0cc:	0800f0f7 	.word	0x0800f0f7
 800f0d0:	0800f0f7 	.word	0x0800f0f7
 800f0d4:	0800f0f7 	.word	0x0800f0f7
 800f0d8:	0800f0f7 	.word	0x0800f0f7
 800f0dc:	0800f0f7 	.word	0x0800f0f7
 800f0e0:	0800f0f7 	.word	0x0800f0f7
 800f0e4:	0800f0f7 	.word	0x0800f0f7
 800f0e8:	0800f0f7 	.word	0x0800f0f7
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800f0f4:	bf00      	nop
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
                        }
                        theBuffer.valueSize = dscrLen - 2;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f0fc:	3b02      	subs	r3, #2
 800f0fe:	b2da      	uxtb	r2, r3
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	f103 0210 	add.w	r2, r3, #16
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	3308      	adds	r3, #8
 800f10e:	4619      	mov	r1, r3
 800f110:	4610      	mov	r0, r2
 800f112:	f7fd fa0b 	bl	800c52c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	2204      	movs	r2, #4
 800f11a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 4:
                        switch(dscrType) {
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f124:	2b05      	cmp	r3, #5
 800f126:	d055      	beq.n	800f1d4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800f128:	2b05      	cmp	r3, #5
 800f12a:	f300 8085 	bgt.w	800f238 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800f12e:	2b02      	cmp	r3, #2
 800f130:	d002      	beq.n	800f138 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800f132:	2b04      	cmp	r3, #4
 800f134:	d015      	beq.n	800f162 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800f136:	e07f      	b.n	800f238 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	3310      	adds	r3, #16
 800f13c:	687a      	ldr	r2, [r7, #4]
 800f13e:	68b9      	ldr	r1, [r7, #8]
 800f140:	4618      	mov	r0, r3
 800f142:	f003 f9af 	bl	80124a4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f146:	4603      	mov	r3, r0
 800f148:	f083 0301 	eor.w	r3, r3, #1
 800f14c:	b2db      	uxtb	r3, r3
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d001      	beq.n	800f156 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800f152:	2300      	movs	r3, #0
 800f154:	e097      	b.n	800f286 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800f156:	697b      	ldr	r3, [r7, #20]
 800f158:	795a      	ldrb	r2, [r3, #5]
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800f160:	e086      	b.n	800f270 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	3310      	adds	r3, #16
 800f166:	687a      	ldr	r2, [r7, #4]
 800f168:	68b9      	ldr	r1, [r7, #8]
 800f16a:	4618      	mov	r0, r3
 800f16c:	f003 f99a 	bl	80124a4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f170:	4603      	mov	r3, r0
 800f172:	f083 0301 	eor.w	r3, r3, #1
 800f176:	b2db      	uxtb	r3, r3
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d001      	beq.n	800f180 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800f17c:	2300      	movs	r3, #0
 800f17e:	e082      	b.n	800f286 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800f180:	693b      	ldr	r3, [r7, #16]
 800f182:	795b      	ldrb	r3, [r3, #5]
 800f184:	2be0      	cmp	r3, #224	; 0xe0
 800f186:	d16c      	bne.n	800f262 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800f188:	693b      	ldr	r3, [r7, #16]
 800f18a:	799b      	ldrb	r3, [r3, #6]
 800f18c:	2b01      	cmp	r3, #1
 800f18e:	d16a      	bne.n	800f266 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                                break;
                                        if(UseOr) {
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f196:	2b00      	cmp	r3, #0
 800f198:	d004      	beq.n	800f1a4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800f19a:	693b      	ldr	r3, [r7, #16]
 800f19c:	79db      	ldrb	r3, [r3, #7]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d104      	bne.n	800f1ac <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800f1a2:	e065      	b.n	800f270 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	79db      	ldrb	r3, [r3, #7]
 800f1a8:	2b01      	cmp	r3, #1
 800f1aa:	d15e      	bne.n	800f26a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                                        break;
                                        }
                                        isGoodInterface = true;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	2201      	movs	r2, #1
 800f1b0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800f1b4:	693b      	ldr	r3, [r7, #16]
 800f1b6:	789a      	ldrb	r2, [r3, #2]
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800f1be:	693b      	ldr	r3, [r7, #16]
 800f1c0:	78da      	ldrb	r2, [r3, #3]
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800f1c8:	693b      	ldr	r3, [r7, #16]
 800f1ca:	79da      	ldrb	r2, [r3, #7]
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800f1d2:	e04d      	b.n	800f270 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	3310      	adds	r3, #16
 800f1d8:	687a      	ldr	r2, [r7, #4]
 800f1da:	68b9      	ldr	r1, [r7, #8]
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f003 f961 	bl	80124a4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	f083 0301 	eor.w	r3, r3, #1
 800f1e8:	b2db      	uxtb	r3, r3
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d001      	beq.n	800f1f2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	e049      	b.n	800f286 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d038      	beq.n	800f26e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	685b      	ldr	r3, [r3, #4]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d034      	beq.n	800f26e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	6858      	ldr	r0, [r3, #4]
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	685b      	ldr	r3, [r3, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	681c      	ldr	r4, [r3, #0]
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f228:	68fa      	ldr	r2, [r7, #12]
 800f22a:	3220      	adds	r2, #32
 800f22c:	9201      	str	r2, [sp, #4]
 800f22e:	9300      	str	r3, [sp, #0]
 800f230:	4633      	mov	r3, r6
 800f232:	462a      	mov	r2, r5
 800f234:	47a0      	blx	r4
                                        break;
 800f236:	e01a      	b.n	800f26e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f103 0018 	add.w	r0, r3, #24
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f244:	b29b      	uxth	r3, r3
 800f246:	3b02      	subs	r3, #2
 800f248:	b29b      	uxth	r3, r3
 800f24a:	687a      	ldr	r2, [r7, #4]
 800f24c:	68b9      	ldr	r1, [r7, #8]
 800f24e:	f7fd f9ac 	bl	800c5aa <_ZN11ByteSkipper4SkipEPPhPtt>
 800f252:	4603      	mov	r3, r0
 800f254:	f083 0301 	eor.w	r3, r3, #1
 800f258:	b2db      	uxtb	r3, r3
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d008      	beq.n	800f270 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800f25e:	2300      	movs	r3, #0
 800f260:	e011      	b.n	800f286 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800f262:	bf00      	nop
 800f264:	e004      	b.n	800f270 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800f266:	bf00      	nop
 800f268:	e002      	b.n	800f270 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800f26a:	bf00      	nop
 800f26c:	e000      	b.n	800f270 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800f26e:	bf00      	nop
                        }
                        theBuffer.pValue = varBuffer;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	f103 0220 	add.w	r2, r3, #32
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	2200      	movs	r2, #0
 800f280:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
        return true;
 800f284:	2301      	movs	r3, #1
}
 800f286:	4618      	mov	r0, r3
 800f288:	371c      	adds	r7, #28
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f28e:	bf00      	nop

0800f290 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800f290:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f292:	b089      	sub	sp, #36	; 0x24
 800f294:	af02      	add	r7, sp, #8
 800f296:	60f8      	str	r0, [r7, #12]
 800f298:	60b9      	str	r1, [r7, #8]
 800f29a:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	3320      	adds	r3, #32
 800f2a0:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	3320      	adds	r3, #32
 800f2a6:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f2ae:	2b04      	cmp	r3, #4
 800f2b0:	f200 815e 	bhi.w	800f570 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800f2b4:	a201      	add	r2, pc, #4	; (adr r2, 800f2bc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800f2b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2ba:	bf00      	nop
 800f2bc:	0800f2d1 	.word	0x0800f2d1
 800f2c0:	0800f2f1 	.word	0x0800f2f1
 800f2c4:	0800f333 	.word	0x0800f333
 800f2c8:	0800f347 	.word	0x0800f347
 800f2cc:	0800f40b 	.word	0x0800f40b
                        theBuffer.valueSize = 2;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	2202      	movs	r2, #2
 800f2d4:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	f103 0210 	add.w	r2, r3, #16
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	3308      	adds	r3, #8
 800f2e0:	4619      	mov	r1, r3
 800f2e2:	4610      	mov	r0, r2
 800f2e4:	f7fd f922 	bl	800c52c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	2201      	movs	r2, #1
 800f2ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        if(!valParser.Parse(pp, pcntdn))
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	3310      	adds	r3, #16
 800f2f4:	687a      	ldr	r2, [r7, #4]
 800f2f6:	68b9      	ldr	r1, [r7, #8]
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f003 f8d3 	bl	80124a4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f2fe:	4603      	mov	r3, r0
 800f300:	f083 0301 	eor.w	r3, r3, #1
 800f304:	b2db      	uxtb	r3, r3
 800f306:	2b00      	cmp	r3, #0
 800f308:	d001      	beq.n	800f30e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800f30a:	2300      	movs	r3, #0
 800f30c:	e131      	b.n	800f572 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800f314:	781a      	ldrb	r2, [r3, #0]
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800f322:	785a      	ldrb	r2, [r3, #1]
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	2202      	movs	r2, #2
 800f32e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        theBuffer.pValue = varBuffer + 2;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	3320      	adds	r3, #32
 800f336:	1c9a      	adds	r2, r3, #2
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	2203      	movs	r2, #3
 800f342:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f34c:	3b02      	subs	r3, #2
 800f34e:	2b1f      	cmp	r3, #31
 800f350:	d847      	bhi.n	800f3e2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800f352:	a201      	add	r2, pc, #4	; (adr r2, 800f358 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800f354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f358:	0800f3e3 	.word	0x0800f3e3
 800f35c:	0800f3e3 	.word	0x0800f3e3
 800f360:	0800f3d9 	.word	0x0800f3d9
 800f364:	0800f3e3 	.word	0x0800f3e3
 800f368:	0800f3e3 	.word	0x0800f3e3
 800f36c:	0800f3e3 	.word	0x0800f3e3
 800f370:	0800f3e3 	.word	0x0800f3e3
 800f374:	0800f3e3 	.word	0x0800f3e3
 800f378:	0800f3e3 	.word	0x0800f3e3
 800f37c:	0800f3e3 	.word	0x0800f3e3
 800f380:	0800f3e3 	.word	0x0800f3e3
 800f384:	0800f3e3 	.word	0x0800f3e3
 800f388:	0800f3e3 	.word	0x0800f3e3
 800f38c:	0800f3e3 	.word	0x0800f3e3
 800f390:	0800f3e3 	.word	0x0800f3e3
 800f394:	0800f3e3 	.word	0x0800f3e3
 800f398:	0800f3e3 	.word	0x0800f3e3
 800f39c:	0800f3e3 	.word	0x0800f3e3
 800f3a0:	0800f3e3 	.word	0x0800f3e3
 800f3a4:	0800f3e3 	.word	0x0800f3e3
 800f3a8:	0800f3e3 	.word	0x0800f3e3
 800f3ac:	0800f3e3 	.word	0x0800f3e3
 800f3b0:	0800f3e3 	.word	0x0800f3e3
 800f3b4:	0800f3e3 	.word	0x0800f3e3
 800f3b8:	0800f3e3 	.word	0x0800f3e3
 800f3bc:	0800f3e3 	.word	0x0800f3e3
 800f3c0:	0800f3e3 	.word	0x0800f3e3
 800f3c4:	0800f3e3 	.word	0x0800f3e3
 800f3c8:	0800f3e3 	.word	0x0800f3e3
 800f3cc:	0800f3e3 	.word	0x0800f3e3
 800f3d0:	0800f3e3 	.word	0x0800f3e3
 800f3d4:	0800f3e3 	.word	0x0800f3e3
                                        isGoodInterface = false;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800f3e0:	bf00      	nop
                        theBuffer.valueSize = dscrLen - 2;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f3e8:	3b02      	subs	r3, #2
 800f3ea:	b2da      	uxtb	r2, r3
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	f103 0210 	add.w	r2, r3, #16
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	3308      	adds	r3, #8
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	4610      	mov	r0, r2
 800f3fe:	f7fd f895 	bl	800c52c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	2204      	movs	r2, #4
 800f406:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f410:	2b05      	cmp	r3, #5
 800f412:	d055      	beq.n	800f4c0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800f414:	2b05      	cmp	r3, #5
 800f416:	f300 8085 	bgt.w	800f524 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800f41a:	2b02      	cmp	r3, #2
 800f41c:	d002      	beq.n	800f424 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800f41e:	2b04      	cmp	r3, #4
 800f420:	d015      	beq.n	800f44e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800f422:	e07f      	b.n	800f524 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                        if(!valParser.Parse(pp, pcntdn))
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	3310      	adds	r3, #16
 800f428:	687a      	ldr	r2, [r7, #4]
 800f42a:	68b9      	ldr	r1, [r7, #8]
 800f42c:	4618      	mov	r0, r3
 800f42e:	f003 f839 	bl	80124a4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f432:	4603      	mov	r3, r0
 800f434:	f083 0301 	eor.w	r3, r3, #1
 800f438:	b2db      	uxtb	r3, r3
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d001      	beq.n	800f442 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800f43e:	2300      	movs	r3, #0
 800f440:	e097      	b.n	800f572 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	795a      	ldrb	r2, [r3, #5]
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800f44c:	e086      	b.n	800f55c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	3310      	adds	r3, #16
 800f452:	687a      	ldr	r2, [r7, #4]
 800f454:	68b9      	ldr	r1, [r7, #8]
 800f456:	4618      	mov	r0, r3
 800f458:	f003 f824 	bl	80124a4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f45c:	4603      	mov	r3, r0
 800f45e:	f083 0301 	eor.w	r3, r3, #1
 800f462:	b2db      	uxtb	r3, r3
 800f464:	2b00      	cmp	r3, #0
 800f466:	d001      	beq.n	800f46c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800f468:	2300      	movs	r3, #0
 800f46a:	e082      	b.n	800f572 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800f46c:	693b      	ldr	r3, [r7, #16]
 800f46e:	795b      	ldrb	r3, [r3, #5]
 800f470:	2bff      	cmp	r3, #255	; 0xff
 800f472:	d16c      	bne.n	800f54e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800f474:	693b      	ldr	r3, [r7, #16]
 800f476:	799b      	ldrb	r3, [r3, #6]
 800f478:	2b01      	cmp	r3, #1
 800f47a:	d16a      	bne.n	800f552 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                        if(UseOr) {
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f482:	2b00      	cmp	r3, #0
 800f484:	d004      	beq.n	800f490 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800f486:	693b      	ldr	r3, [r7, #16]
 800f488:	79db      	ldrb	r3, [r3, #7]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d104      	bne.n	800f498 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800f48e:	e065      	b.n	800f55c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800f490:	693b      	ldr	r3, [r7, #16]
 800f492:	79db      	ldrb	r3, [r3, #7]
 800f494:	2b01      	cmp	r3, #1
 800f496:	d15e      	bne.n	800f556 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                        isGoodInterface = true;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	2201      	movs	r2, #1
 800f49c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800f4a0:	693b      	ldr	r3, [r7, #16]
 800f4a2:	789a      	ldrb	r2, [r3, #2]
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	78da      	ldrb	r2, [r3, #3]
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800f4b4:	693b      	ldr	r3, [r7, #16]
 800f4b6:	79da      	ldrb	r2, [r3, #7]
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800f4be:	e04d      	b.n	800f55c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	3310      	adds	r3, #16
 800f4c4:	687a      	ldr	r2, [r7, #4]
 800f4c6:	68b9      	ldr	r1, [r7, #8]
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f002 ffeb 	bl	80124a4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	f083 0301 	eor.w	r3, r3, #1
 800f4d4:	b2db      	uxtb	r3, r3
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d001      	beq.n	800f4de <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800f4da:	2300      	movs	r3, #0
 800f4dc:	e049      	b.n	800f572 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d038      	beq.n	800f55a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	685b      	ldr	r3, [r3, #4]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d034      	beq.n	800f55a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	6858      	ldr	r0, [r3, #4]
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	685b      	ldr	r3, [r3, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	681c      	ldr	r4, [r3, #0]
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f514:	68fa      	ldr	r2, [r7, #12]
 800f516:	3220      	adds	r2, #32
 800f518:	9201      	str	r2, [sp, #4]
 800f51a:	9300      	str	r3, [sp, #0]
 800f51c:	4633      	mov	r3, r6
 800f51e:	462a      	mov	r2, r5
 800f520:	47a0      	blx	r4
                                        break;
 800f522:	e01a      	b.n	800f55a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	f103 0018 	add.w	r0, r3, #24
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f530:	b29b      	uxth	r3, r3
 800f532:	3b02      	subs	r3, #2
 800f534:	b29b      	uxth	r3, r3
 800f536:	687a      	ldr	r2, [r7, #4]
 800f538:	68b9      	ldr	r1, [r7, #8]
 800f53a:	f7fd f836 	bl	800c5aa <_ZN11ByteSkipper4SkipEPPhPtt>
 800f53e:	4603      	mov	r3, r0
 800f540:	f083 0301 	eor.w	r3, r3, #1
 800f544:	b2db      	uxtb	r3, r3
 800f546:	2b00      	cmp	r3, #0
 800f548:	d008      	beq.n	800f55c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800f54a:	2300      	movs	r3, #0
 800f54c:	e011      	b.n	800f572 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800f54e:	bf00      	nop
 800f550:	e004      	b.n	800f55c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800f552:	bf00      	nop
 800f554:	e002      	b.n	800f55c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800f556:	bf00      	nop
 800f558:	e000      	b.n	800f55c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800f55a:	bf00      	nop
                        theBuffer.pValue = varBuffer;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	f103 0220 	add.w	r2, r3, #32
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	2200      	movs	r2, #0
 800f56c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return true;
 800f570:	2301      	movs	r3, #1
}
 800f572:	4618      	mov	r0, r3
 800f574:	371c      	adds	r7, #28
 800f576:	46bd      	mov	sp, r7
 800f578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f57a:	bf00      	nop

0800f57c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>:
        int8_t registerBluetoothService(BluetoothService *pService) {
 800f57c:	b480      	push	{r7}
 800f57e:	b085      	sub	sp, #20
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
 800f584:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800f586:	2300      	movs	r3, #0
 800f588:	73fb      	strb	r3, [r7, #15]
 800f58a:	7bfb      	ldrb	r3, [r7, #15]
 800f58c:	2b03      	cmp	r3, #3
 800f58e:	d815      	bhi.n	800f5bc <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x40>
                        if(!btService[i]) {
 800f590:	7bfb      	ldrb	r3, [r7, #15]
 800f592:	687a      	ldr	r2, [r7, #4]
 800f594:	3318      	adds	r3, #24
 800f596:	009b      	lsls	r3, r3, #2
 800f598:	4413      	add	r3, r2
 800f59a:	685b      	ldr	r3, [r3, #4]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d109      	bne.n	800f5b4 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x38>
                                btService[i] = pService;
 800f5a0:	7bfb      	ldrb	r3, [r7, #15]
 800f5a2:	687a      	ldr	r2, [r7, #4]
 800f5a4:	3318      	adds	r3, #24
 800f5a6:	009b      	lsls	r3, r3, #2
 800f5a8:	4413      	add	r3, r2
 800f5aa:	683a      	ldr	r2, [r7, #0]
 800f5ac:	605a      	str	r2, [r3, #4]
                                return i; // Return ID
 800f5ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5b2:	e005      	b.n	800f5c0 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x44>
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800f5b4:	7bfb      	ldrb	r3, [r7, #15]
 800f5b6:	3301      	adds	r3, #1
 800f5b8:	73fb      	strb	r3, [r7, #15]
 800f5ba:	e7e6      	b.n	800f58a <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0xe>
                return -1; // Error registering BluetoothService
 800f5bc:	f04f 33ff 	mov.w	r3, #4294967295
        };
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	3714      	adds	r7, #20
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ca:	4770      	bx	lr

0800f5cc <_ZN16BluetoothServiceC1EP3BTD>:
};

/** All Bluetooth services should inherit this class. */
class BluetoothService {
public:
        BluetoothService(BTD *p) : pBtd(p) {
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b082      	sub	sp, #8
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
 800f5d4:	6039      	str	r1, [r7, #0]
 800f5d6:	4a0a      	ldr	r2, [pc, #40]	; (800f600 <_ZN16BluetoothServiceC1EP3BTD+0x34>)
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	601a      	str	r2, [r3, #0]
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	683a      	ldr	r2, [r7, #0]
 800f5e0:	609a      	str	r2, [r3, #8]
                if(pBtd)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	689b      	ldr	r3, [r3, #8]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d005      	beq.n	800f5f6 <_ZN16BluetoothServiceC1EP3BTD+0x2a>
                        pBtd->registerBluetoothService(this); // Register it as a Bluetooth service
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	689b      	ldr	r3, [r3, #8]
 800f5ee:	6879      	ldr	r1, [r7, #4]
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	f7ff ffc3 	bl	800f57c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>
        };
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3708      	adds	r7, #8
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}
 800f600:	08012a20 	.word	0x08012a20

0800f604 <_ZN16BluetoothService14checkHciHandleEPht>:
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void onInit() = 0;

        /** Used to check if the incoming L2CAP data matches the HCI Handle */
        bool checkHciHandle(uint8_t *buf, uint16_t handle) {
 800f604:	b480      	push	{r7}
 800f606:	b085      	sub	sp, #20
 800f608:	af00      	add	r7, sp, #0
 800f60a:	60f8      	str	r0, [r7, #12]
 800f60c:	60b9      	str	r1, [r7, #8]
 800f60e:	4613      	mov	r3, r2
 800f610:	80fb      	strh	r3, [r7, #6]
                return (buf[0] == (handle & 0xFF)) && (buf[1] == ((handle >> 8) | 0x20));
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	781b      	ldrb	r3, [r3, #0]
 800f616:	461a      	mov	r2, r3
 800f618:	88fb      	ldrh	r3, [r7, #6]
 800f61a:	b2db      	uxtb	r3, r3
 800f61c:	429a      	cmp	r2, r3
 800f61e:	d10b      	bne.n	800f638 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	3301      	adds	r3, #1
 800f624:	781b      	ldrb	r3, [r3, #0]
 800f626:	461a      	mov	r2, r3
 800f628:	88fb      	ldrh	r3, [r7, #6]
 800f62a:	121b      	asrs	r3, r3, #8
 800f62c:	f043 0320 	orr.w	r3, r3, #32
 800f630:	429a      	cmp	r2, r3
 800f632:	d101      	bne.n	800f638 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800f634:	2301      	movs	r3, #1
 800f636:	e000      	b.n	800f63a <_ZN16BluetoothService14checkHciHandleEPht+0x36>
 800f638:	2300      	movs	r3, #0
        }
 800f63a:	4618      	mov	r0, r3
 800f63c:	3714      	adds	r7, #20
 800f63e:	46bd      	mov	sp, r7
 800f640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f644:	4770      	bx	lr

0800f646 <_ZN5BTHID14ParseBTHIDDataEhPh>:
        virtual void ParseBTHIDData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 800f646:	b480      	push	{r7}
 800f648:	b085      	sub	sp, #20
 800f64a:	af00      	add	r7, sp, #0
 800f64c:	60f8      	str	r0, [r7, #12]
 800f64e:	460b      	mov	r3, r1
 800f650:	607a      	str	r2, [r7, #4]
 800f652:	72fb      	strb	r3, [r7, #11]
                return;
 800f654:	bf00      	nop
        };
 800f656:	3714      	adds	r7, #20
 800f658:	46bd      	mov	sp, r7
 800f65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65e:	4770      	bx	lr

0800f660 <_ZN5BTHID11OnInitBTHIDEv>:
        /** Called when a device is connected */
        virtual void OnInitBTHID() {
 800f660:	b480      	push	{r7}
 800f662:	b083      	sub	sp, #12
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
                return;
 800f668:	bf00      	nop
        };
 800f66a:	370c      	adds	r7, #12
 800f66c:	46bd      	mov	sp, r7
 800f66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f672:	4770      	bx	lr

0800f674 <_ZN5BTHID10ResetBTHIDEv>:
        /** Used to reset any buffers in the class that inherits this */
        virtual void ResetBTHID() {
 800f674:	b480      	push	{r7}
 800f676:	b083      	sub	sp, #12
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
                return;
 800f67c:	bf00      	nop
        }
 800f67e:	370c      	adds	r7, #12
 800f680:	46bd      	mov	sp, r7
 800f682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f686:	4770      	bx	lr

0800f688 <_ZN5BTHIDC1EP3BTDbPKc>:
#include "BTHID.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the HID device

BTHID::BTHID(BTD *p, bool pair, const char *pin) :
 800f688:	b580      	push	{r7, lr}
 800f68a:	b086      	sub	sp, #24
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	60f8      	str	r0, [r7, #12]
 800f690:	60b9      	str	r1, [r7, #8]
 800f692:	603b      	str	r3, [r7, #0]
 800f694:	4613      	mov	r3, r2
 800f696:	71fb      	strb	r3, [r7, #7]
BluetoothService(p), // Pointer to USB class instance - mandatory
protocolMode(USB_HID_BOOT_PROTOCOL) {
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	68b9      	ldr	r1, [r7, #8]
 800f69c:	4618      	mov	r0, r3
 800f69e:	f7ff ff95 	bl	800f5cc <_ZN16BluetoothServiceC1EP3BTD>
 800f6a2:	4a1f      	ldr	r2, [pc, #124]	; (800f720 <_ZN5BTHIDC1EP3BTDbPKc+0x98>)
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	601a      	str	r2, [r3, #0]
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	75fb      	strb	r3, [r7, #23]
 800f6b4:	7dfb      	ldrb	r3, [r7, #23]
 800f6b6:	2b01      	cmp	r3, #1
 800f6b8:	d809      	bhi.n	800f6ce <_ZN5BTHIDC1EP3BTDbPKc+0x46>
                pRptParser[i] = NULL;
 800f6ba:	7dfa      	ldrb	r2, [r7, #23]
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	3208      	adds	r2, #8
 800f6c0:	2100      	movs	r1, #0
 800f6c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800f6c6:	7dfb      	ldrb	r3, [r7, #23]
 800f6c8:	3301      	adds	r3, #1
 800f6ca:	75fb      	strb	r3, [r7, #23]
 800f6cc:	e7f2      	b.n	800f6b4 <_ZN5BTHIDC1EP3BTDbPKc+0x2c>

        pBtd->pairWithHIDDevice = pair;
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	689b      	ldr	r3, [r3, #8]
 800f6d2:	79fa      	ldrb	r2, [r7, #7]
 800f6d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        pBtd->btdPin = pin;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	689b      	ldr	r3, [r3, #8]
 800f6dc:	683a      	ldr	r2, [r7, #0]
 800f6de:	611a      	str	r2, [r3, #16]

        /* Set device cid for the control and intterrupt channelse - LSB */
        sdp_dcid[0] = 0x50; // 0x0050
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	2250      	movs	r2, #80	; 0x50
 800f6e4:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        sdp_dcid[1] = 0x00;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        control_dcid[0] = 0x70; // 0x0070
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	2270      	movs	r2, #112	; 0x70
 800f6f4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        control_dcid[1] = 0x00;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        interrupt_dcid[0] = 0x71; // 0x0071
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	2271      	movs	r2, #113	; 0x71
 800f704:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        interrupt_dcid[1] = 0x00;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	2200      	movs	r2, #0
 800f70c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

        Reset();
 800f710:	68f8      	ldr	r0, [r7, #12]
 800f712:	f000 f807 	bl	800f724 <_ZN5BTHID5ResetEv>
}
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	4618      	mov	r0, r3
 800f71a:	3718      	adds	r7, #24
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}
 800f720:	080129f4 	.word	0x080129f4

0800f724 <_ZN5BTHID5ResetEv>:

void BTHID::Reset() {
 800f724:	b580      	push	{r7, lr}
 800f726:	b082      	sub	sp, #8
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
        connected = false;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2200      	movs	r2, #0
 800f730:	755a      	strb	r2, [r3, #21]
        activeConnection = false;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2200      	movs	r2, #0
 800f736:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDPConnected = false;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	2200      	movs	r2, #0
 800f73e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        l2cap_event_flag = 0; // Reset flags
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	2200      	movs	r2, #0
 800f746:	611a      	str	r2, [r3, #16]
        l2cap_sdp_state = L2CAP_SDP_WAIT;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	220a      	movs	r2, #10
 800f74c:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_WAIT;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	2200      	movs	r2, #0
 800f752:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ResetBTHID();
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	3320      	adds	r3, #32
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	6878      	ldr	r0, [r7, #4]
 800f760:	4798      	blx	r3
}
 800f762:	bf00      	nop
 800f764:	3708      	adds	r7, #8
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}

0800f76a <_ZN5BTHID10disconnectEv>:

void BTHID::disconnect() { // Use this void to disconnect the device
 800f76a:	b590      	push	{r4, r7, lr}
 800f76c:	b085      	sub	sp, #20
 800f76e:	af02      	add	r7, sp, #8
 800f770:	6078      	str	r0, [r7, #4]
        if(SDPConnected)
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d014      	beq.n	800f7a6 <_ZN5BTHID10disconnectEv+0x3c>
                pBtd->l2cap_disconnection_request(hci_handle, ++identifier, sdp_scid, sdp_dcid);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	6898      	ldr	r0, [r3, #8]
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	8999      	ldrh	r1, [r3, #12]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	7d1b      	ldrb	r3, [r3, #20]
 800f788:	3301      	adds	r3, #1
 800f78a:	b2da      	uxtb	r2, r3
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	751a      	strb	r2, [r3, #20]
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	7d1a      	ldrb	r2, [r3, #20]
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f103 041b 	add.w	r4, r3, #27
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	336f      	adds	r3, #111	; 0x6f
 800f79e:	9300      	str	r3, [sp, #0]
 800f7a0:	4623      	mov	r3, r4
 800f7a2:	f7ff f9c5 	bl	800eb30 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        // First the HID interrupt channel has to be disconnected, then the HID control channel and finally the HCI connection
        pBtd->l2cap_disconnection_request(hci_handle, ++identifier, interrupt_scid, interrupt_dcid);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6898      	ldr	r0, [r3, #8]
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	8999      	ldrh	r1, [r3, #12]
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	7d1b      	ldrb	r3, [r3, #20]
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	b2da      	uxtb	r2, r3
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	751a      	strb	r2, [r3, #20]
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	7d1a      	ldrb	r2, [r3, #20]
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f103 0418 	add.w	r4, r3, #24
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	336d      	adds	r3, #109	; 0x6d
 800f7c8:	9300      	str	r3, [sp, #0]
 800f7ca:	4623      	mov	r3, r4
 800f7cc:	f7ff f9b0 	bl	800eb30 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        Reset();
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	3308      	adds	r3, #8
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	4798      	blx	r3
        l2cap_sdp_state = L2CAP_DISCONNECT_RESPONSE;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	220e      	movs	r2, #14
 800f7e0:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_INTERRUPT_DISCONNECT;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	2209      	movs	r2, #9
 800f7e6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 800f7ea:	bf00      	nop
 800f7ec:	370c      	adds	r7, #12
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	bd90      	pop	{r4, r7, pc}

0800f7f2 <_ZN5BTHID7ACLDataEPh>:

void BTHID::ACLData(uint8_t* l2capinbuf) {
 800f7f2:	b590      	push	{r4, r7, lr}
 800f7f4:	b087      	sub	sp, #28
 800f7f6:	af02      	add	r7, sp, #8
 800f7f8:	6078      	str	r0, [r7, #4]
 800f7fa:	6039      	str	r1, [r7, #0]
        if(!connected) {
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	7d5b      	ldrb	r3, [r3, #21]
 800f800:	f083 0301 	eor.w	r3, r3, #1
 800f804:	b2db      	uxtb	r3, r3
 800f806:	2b00      	cmp	r3, #0
 800f808:	d023      	beq.n	800f852 <_ZN5BTHID7ACLDataEPh+0x60>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	3308      	adds	r3, #8
 800f80e:	781b      	ldrb	r3, [r3, #0]
 800f810:	2b02      	cmp	r3, #2
 800f812:	d11e      	bne.n	800f852 <_ZN5BTHID7ACLDataEPh+0x60>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM && !pBtd->sdpConnectionClaimed) {
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	330c      	adds	r3, #12
 800f818:	781b      	ldrb	r3, [r3, #0]
 800f81a:	461a      	mov	r2, r3
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	330d      	adds	r3, #13
 800f820:	781b      	ldrb	r3, [r3, #0]
 800f822:	021b      	lsls	r3, r3, #8
 800f824:	4313      	orrs	r3, r2
 800f826:	2b01      	cmp	r3, #1
 800f828:	d113      	bne.n	800f852 <_ZN5BTHID7ACLDataEPh+0x60>
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	689b      	ldr	r3, [r3, #8]
 800f82e:	7a9b      	ldrb	r3, [r3, #10]
 800f830:	f083 0301 	eor.w	r3, r3, #1
 800f834:	b2db      	uxtb	r3, r3
 800f836:	2b00      	cmp	r3, #0
 800f838:	d00b      	beq.n	800f852 <_ZN5BTHID7ACLDataEPh+0x60>
                                pBtd->sdpConnectionClaimed = true;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	689b      	ldr	r3, [r3, #8]
 800f83e:	2201      	movs	r2, #1
 800f840:	729a      	strb	r2, [r3, #10]
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	689b      	ldr	r3, [r3, #8]
 800f846:	8b5a      	ldrh	r2, [r3, #26]
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	819a      	strh	r2, [r3, #12]
                                l2cap_sdp_state = L2CAP_SDP_WAIT; // Reset state
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	220a      	movs	r2, #10
 800f850:	769a      	strb	r2, [r3, #26]
                        }
                }
        }

        if(!pBtd->l2capConnectionClaimed && pBtd->incomingHIDDevice && !connected && !activeConnection) {
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	689b      	ldr	r3, [r3, #8]
 800f856:	7a5b      	ldrb	r3, [r3, #9]
 800f858:	f083 0301 	eor.w	r3, r3, #1
 800f85c:	b2db      	uxtb	r3, r3
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d03a      	beq.n	800f8d8 <_ZN5BTHID7ACLDataEPh+0xe6>
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	689b      	ldr	r3, [r3, #8]
 800f866:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d034      	beq.n	800f8d8 <_ZN5BTHID7ACLDataEPh+0xe6>
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	7d5b      	ldrb	r3, [r3, #21]
 800f872:	f083 0301 	eor.w	r3, r3, #1
 800f876:	b2db      	uxtb	r3, r3
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d02d      	beq.n	800f8d8 <_ZN5BTHID7ACLDataEPh+0xe6>
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800f882:	f083 0301 	eor.w	r3, r3, #1
 800f886:	b2db      	uxtb	r3, r3
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d025      	beq.n	800f8d8 <_ZN5BTHID7ACLDataEPh+0xe6>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	3308      	adds	r3, #8
 800f890:	781b      	ldrb	r3, [r3, #0]
 800f892:	2b02      	cmp	r3, #2
 800f894:	d120      	bne.n	800f8d8 <_ZN5BTHID7ACLDataEPh+0xe6>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	330c      	adds	r3, #12
 800f89a:	781b      	ldrb	r3, [r3, #0]
 800f89c:	461a      	mov	r2, r3
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	330d      	adds	r3, #13
 800f8a2:	781b      	ldrb	r3, [r3, #0]
 800f8a4:	021b      	lsls	r3, r3, #8
 800f8a6:	4313      	orrs	r3, r2
 800f8a8:	2b11      	cmp	r3, #17
 800f8aa:	d115      	bne.n	800f8d8 <_ZN5BTHID7ACLDataEPh+0xe6>
                                pBtd->incomingHIDDevice = false;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	689b      	ldr	r3, [r3, #8]
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                pBtd->l2capConnectionClaimed = true; // Claim that the incoming connection belongs to this service
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	689b      	ldr	r3, [r3, #8]
 800f8ba:	2201      	movs	r2, #1
 800f8bc:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2201      	movs	r2, #1
 800f8c2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	689b      	ldr	r3, [r3, #8]
 800f8ca:	8b5a      	ldrh	r2, [r3, #26]
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	819a      	strh	r2, [r3, #12]
                                l2cap_state = L2CAP_WAIT;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                }
        }

        if(checkHciHandle(l2capinbuf, hci_handle)) { // acl_handle_ok
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	899b      	ldrh	r3, [r3, #12]
 800f8de:	461a      	mov	r2, r3
 800f8e0:	6839      	ldr	r1, [r7, #0]
 800f8e2:	f7ff fe8f 	bl	800f604 <_ZN16BluetoothService14checkHciHandleEPht>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	f000 83d9 	beq.w	80100a0 <_ZN5BTHID7ACLDataEPh+0x8ae>
                if((l2capinbuf[6] | (l2capinbuf[7] << 8)) == 0x0001U) { // l2cap_control - Channel ID for ACL-U
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	3306      	adds	r3, #6
 800f8f2:	781b      	ldrb	r3, [r3, #0]
 800f8f4:	461a      	mov	r2, r3
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	3307      	adds	r3, #7
 800f8fa:	781b      	ldrb	r3, [r3, #0]
 800f8fc:	021b      	lsls	r3, r3, #8
 800f8fe:	4313      	orrs	r3, r2
 800f900:	2b01      	cmp	r3, #1
 800f902:	f040 829b 	bne.w	800fe3c <_ZN5BTHID7ACLDataEPh+0x64a>
                        if(l2capinbuf[8] == L2CAP_CMD_COMMAND_REJECT) {
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	3308      	adds	r3, #8
 800f90a:	781b      	ldrb	r3, [r3, #0]
 800f90c:	2b01      	cmp	r3, #1
 800f90e:	f000 83c1 	beq.w	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[15], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
#endif
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_RESPONSE) {
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	3308      	adds	r3, #8
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	2b03      	cmp	r3, #3
 800f91a:	f040 808d 	bne.w	800fa38 <_ZN5BTHID7ACLDataEPh+0x246>
                                if(((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) && ((l2capinbuf[18] | (l2capinbuf[19] << 8)) == SUCCESSFUL)) { // Success
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	3310      	adds	r3, #16
 800f922:	781b      	ldrb	r3, [r3, #0]
 800f924:	461a      	mov	r2, r3
 800f926:	683b      	ldr	r3, [r7, #0]
 800f928:	3311      	adds	r3, #17
 800f92a:	781b      	ldrb	r3, [r3, #0]
 800f92c:	021b      	lsls	r3, r3, #8
 800f92e:	4313      	orrs	r3, r2
 800f930:	2b00      	cmp	r3, #0
 800f932:	f040 83af 	bne.w	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	3312      	adds	r3, #18
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	461a      	mov	r2, r3
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	3313      	adds	r3, #19
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	021b      	lsls	r3, r3, #8
 800f946:	4313      	orrs	r3, r2
 800f948:	2b00      	cmp	r3, #0
 800f94a:	f040 83a3 	bne.w	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[14] == sdp_dcid[0] && l2capinbuf[15] == sdp_dcid[1]) {
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	330e      	adds	r3, #14
 800f952:	781a      	ldrb	r2, [r3, #0]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800f95a:	429a      	cmp	r2, r3
 800f95c:	d124      	bne.n	800f9a8 <_ZN5BTHID7ACLDataEPh+0x1b6>
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	330f      	adds	r3, #15
 800f962:	781a      	ldrb	r2, [r3, #0]
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800f96a:	429a      	cmp	r2, r3
 800f96c:	d11c      	bne.n	800f9a8 <_ZN5BTHID7ACLDataEPh+0x1b6>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	7a5a      	ldrb	r2, [r3, #9]
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	751a      	strb	r2, [r3, #20]
                                                sdp_scid[0] = l2capinbuf[12];
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	7b1a      	ldrb	r2, [r3, #12]
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	76da      	strb	r2, [r3, #27]
                                                sdp_scid[1] = l2capinbuf[13];
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	7b5a      	ldrb	r2, [r3, #13]
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	771a      	strb	r2, [r3, #28]
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nSend SDP Config Request"), 0x80);
#endif
                                                identifier++;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	7d1b      	ldrb	r3, [r3, #20]
 800f98a:	3301      	adds	r3, #1
 800f98c:	b2da      	uxtb	r2, r3
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	751a      	strb	r2, [r3, #20]
                                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	6898      	ldr	r0, [r3, #8]
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	8999      	ldrh	r1, [r3, #12]
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	7d1a      	ldrb	r2, [r3, #20]
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	331b      	adds	r3, #27
 800f9a2:	f7ff f827 	bl	800e9f4 <_ZN3BTD20l2cap_config_requestEthPh>
 800f9a6:	e375      	b.n	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == control_dcid[0] && l2capinbuf[15] == control_dcid[1]) {
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	330e      	adds	r3, #14
 800f9ac:	781a      	ldrb	r2, [r3, #0]
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800f9b4:	429a      	cmp	r2, r3
 800f9b6:	d11a      	bne.n	800f9ee <_ZN5BTHID7ACLDataEPh+0x1fc>
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	330f      	adds	r3, #15
 800f9bc:	781a      	ldrb	r2, [r3, #0]
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800f9c4:	429a      	cmp	r2, r3
 800f9c6:	d112      	bne.n	800f9ee <_ZN5BTHID7ACLDataEPh+0x1fc>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	7a5a      	ldrb	r2, [r3, #9]
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	751a      	strb	r2, [r3, #20]
                                                control_scid[0] = l2capinbuf[12];
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	7b1a      	ldrb	r2, [r3, #12]
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	759a      	strb	r2, [r3, #22]
                                                control_scid[1] = l2capinbuf[13];
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	7b5a      	ldrb	r2, [r3, #13]
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	75da      	strb	r2, [r3, #23]
                                                l2cap_set_flag(L2CAP_FLAG_CONTROL_CONNECTED);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	691b      	ldr	r3, [r3, #16]
 800f9e4:	f043 0204 	orr.w	r2, r3, #4
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	611a      	str	r2, [r3, #16]
 800f9ec:	e352      	b.n	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == interrupt_dcid[0] && l2capinbuf[15] == interrupt_dcid[1]) {
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	330e      	adds	r3, #14
 800f9f2:	781a      	ldrb	r2, [r3, #0]
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	f040 834a 	bne.w	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	330f      	adds	r3, #15
 800fa04:	781a      	ldrb	r2, [r3, #0]
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	f040 8341 	bne.w	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	7a5a      	ldrb	r2, [r3, #9]
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	751a      	strb	r2, [r3, #20]
                                                interrupt_scid[0] = l2capinbuf[12];
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	7b1a      	ldrb	r2, [r3, #12]
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	761a      	strb	r2, [r3, #24]
                                                interrupt_scid[1] = l2capinbuf[13];
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	7b5a      	ldrb	r2, [r3, #13]
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	765a      	strb	r2, [r3, #25]
                                                l2cap_set_flag(L2CAP_FLAG_INTERRUPT_CONNECTED);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	691b      	ldr	r3, [r3, #16]
 800fa2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	611a      	str	r2, [r3, #16]
 800fa36:	e32d      	b.n	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	3308      	adds	r3, #8
 800fa3c:	781b      	ldrb	r3, [r3, #0]
 800fa3e:	2b02      	cmp	r3, #2
 800fa40:	d15a      	bne.n	800faf8 <_ZN5BTHID7ACLDataEPh+0x306>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
                                Notify(PSTR(" Identifier: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[9], 0x80);
#endif
                                if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM) {
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	330c      	adds	r3, #12
 800fa46:	781b      	ldrb	r3, [r3, #0]
 800fa48:	461a      	mov	r2, r3
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	330d      	adds	r3, #13
 800fa4e:	781b      	ldrb	r3, [r3, #0]
 800fa50:	021b      	lsls	r3, r3, #8
 800fa52:	4313      	orrs	r3, r2
 800fa54:	2b01      	cmp	r3, #1
 800fa56:	d112      	bne.n	800fa7e <_ZN5BTHID7ACLDataEPh+0x28c>
                                        identifier = l2capinbuf[9];
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	7a5a      	ldrb	r2, [r3, #9]
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	751a      	strb	r2, [r3, #20]
                                        sdp_scid[0] = l2capinbuf[14];
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	7b9a      	ldrb	r2, [r3, #14]
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	76da      	strb	r2, [r3, #27]
                                        sdp_scid[1] = l2capinbuf[15];
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	7bda      	ldrb	r2, [r3, #15]
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	771a      	strb	r2, [r3, #28]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST);
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	691b      	ldr	r3, [r3, #16]
 800fa74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	611a      	str	r2, [r3, #16]
 800fa7c:	e30a      	b.n	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	330c      	adds	r3, #12
 800fa82:	781b      	ldrb	r3, [r3, #0]
 800fa84:	461a      	mov	r2, r3
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	330d      	adds	r3, #13
 800fa8a:	781b      	ldrb	r3, [r3, #0]
 800fa8c:	021b      	lsls	r3, r3, #8
 800fa8e:	4313      	orrs	r3, r2
 800fa90:	2b11      	cmp	r3, #17
 800fa92:	d112      	bne.n	800faba <_ZN5BTHID7ACLDataEPh+0x2c8>
                                        identifier = l2capinbuf[9];
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	7a5a      	ldrb	r2, [r3, #9]
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	751a      	strb	r2, [r3, #20]
                                        control_scid[0] = l2capinbuf[14];
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	7b9a      	ldrb	r2, [r3, #14]
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	759a      	strb	r2, [r3, #22]
                                        control_scid[1] = l2capinbuf[15];
 800faa4:	683b      	ldr	r3, [r7, #0]
 800faa6:	7bda      	ldrb	r2, [r3, #15]
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	75da      	strb	r2, [r3, #23]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	691b      	ldr	r3, [r3, #16]
 800fab0:	f043 0201 	orr.w	r2, r3, #1
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	611a      	str	r2, [r3, #16]
 800fab8:	e2ec      	b.n	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_INTR_PSM) {
 800faba:	683b      	ldr	r3, [r7, #0]
 800fabc:	330c      	adds	r3, #12
 800fabe:	781b      	ldrb	r3, [r3, #0]
 800fac0:	461a      	mov	r2, r3
 800fac2:	683b      	ldr	r3, [r7, #0]
 800fac4:	330d      	adds	r3, #13
 800fac6:	781b      	ldrb	r3, [r3, #0]
 800fac8:	021b      	lsls	r3, r3, #8
 800faca:	4313      	orrs	r3, r2
 800facc:	2b13      	cmp	r3, #19
 800face:	f040 82e1 	bne.w	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        identifier = l2capinbuf[9];
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	7a5a      	ldrb	r2, [r3, #9]
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	751a      	strb	r2, [r3, #20]
                                        interrupt_scid[0] = l2capinbuf[14];
 800fada:	683b      	ldr	r3, [r7, #0]
 800fadc:	7b9a      	ldrb	r2, [r3, #14]
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	761a      	strb	r2, [r3, #24]
                                        interrupt_scid[1] = l2capinbuf[15];
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	7bda      	ldrb	r2, [r3, #15]
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	765a      	strb	r2, [r3, #25]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	691b      	ldr	r3, [r3, #16]
 800faee:	f043 0210 	orr.w	r2, r3, #16
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	611a      	str	r2, [r3, #16]
 800faf6:	e2cd      	b.n	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_RESPONSE) {
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	3308      	adds	r3, #8
 800fafc:	781b      	ldrb	r3, [r3, #0]
 800fafe:	2b05      	cmp	r3, #5
 800fb00:	d15e      	bne.n	800fbc0 <_ZN5BTHID7ACLDataEPh+0x3ce>
                                if((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) { // Success
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	3310      	adds	r3, #16
 800fb06:	781b      	ldrb	r3, [r3, #0]
 800fb08:	461a      	mov	r2, r3
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	3311      	adds	r3, #17
 800fb0e:	781b      	ldrb	r3, [r3, #0]
 800fb10:	021b      	lsls	r3, r3, #8
 800fb12:	4313      	orrs	r3, r2
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	f040 82bd 	bne.w	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	330c      	adds	r3, #12
 800fb1e:	781a      	ldrb	r2, [r3, #0]
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800fb26:	429a      	cmp	r2, r3
 800fb28:	d112      	bne.n	800fb50 <_ZN5BTHID7ACLDataEPh+0x35e>
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	330d      	adds	r3, #13
 800fb2e:	781a      	ldrb	r2, [r3, #0]
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d10a      	bne.n	800fb50 <_ZN5BTHID7ACLDataEPh+0x35e>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	7a5a      	ldrb	r2, [r3, #9]
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS);
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	691b      	ldr	r3, [r3, #16]
 800fb46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	611a      	str	r2, [r3, #16]
 800fb4e:	e2a1      	b.n	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	330c      	adds	r3, #12
 800fb54:	781a      	ldrb	r2, [r3, #0]
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d112      	bne.n	800fb86 <_ZN5BTHID7ACLDataEPh+0x394>
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	330d      	adds	r3, #13
 800fb64:	781a      	ldrb	r2, [r3, #0]
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	d10a      	bne.n	800fb86 <_ZN5BTHID7ACLDataEPh+0x394>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	7a5a      	ldrb	r2, [r3, #9]
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	691b      	ldr	r3, [r3, #16]
 800fb7c:	f043 0202 	orr.w	r2, r3, #2
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	611a      	str	r2, [r3, #16]
 800fb84:	e286      	b.n	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	330c      	adds	r3, #12
 800fb8a:	781a      	ldrb	r2, [r3, #0]
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800fb92:	429a      	cmp	r2, r3
 800fb94:	f040 827e 	bne.w	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	330d      	adds	r3, #13
 800fb9c:	781a      	ldrb	r2, [r3, #0]
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800fba4:	429a      	cmp	r2, r3
 800fba6:	f040 8275 	bne.w	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	7a5a      	ldrb	r2, [r3, #9]
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	691b      	ldr	r3, [r3, #16]
 800fbb6:	f043 0220 	orr.w	r2, r3, #32
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	611a      	str	r2, [r3, #16]
 800fbbe:	e269      	b.n	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_REQUEST) {
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	3308      	adds	r3, #8
 800fbc4:	781b      	ldrb	r3, [r3, #0]
 800fbc6:	2b04      	cmp	r3, #4
 800fbc8:	d155      	bne.n	800fc76 <_ZN5BTHID7ACLDataEPh+0x484>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	330c      	adds	r3, #12
 800fbce:	781a      	ldrb	r2, [r3, #0]
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800fbd6:	429a      	cmp	r2, r3
 800fbd8:	d113      	bne.n	800fc02 <_ZN5BTHID7ACLDataEPh+0x410>
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	330d      	adds	r3, #13
 800fbde:	781a      	ldrb	r2, [r3, #0]
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fbe6:	429a      	cmp	r2, r3
 800fbe8:	d10b      	bne.n	800fc02 <_ZN5BTHID7ACLDataEPh+0x410>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nSDP Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], sdp_scid);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	6898      	ldr	r0, [r3, #8]
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	8999      	ldrh	r1, [r3, #12]
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	3309      	adds	r3, #9
 800fbf6:	781a      	ldrb	r2, [r3, #0]
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	331b      	adds	r3, #27
 800fbfc:	f7fe ff45 	bl	800ea8a <_ZN3BTD21l2cap_config_responseEthPh>
 800fc00:	e248      	b.n	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	330c      	adds	r3, #12
 800fc06:	781a      	ldrb	r2, [r3, #0]
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800fc0e:	429a      	cmp	r2, r3
 800fc10:	d113      	bne.n	800fc3a <_ZN5BTHID7ACLDataEPh+0x448>
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	330d      	adds	r3, #13
 800fc16:	781a      	ldrb	r2, [r3, #0]
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800fc1e:	429a      	cmp	r2, r3
 800fc20:	d10b      	bne.n	800fc3a <_ZN5BTHID7ACLDataEPh+0x448>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Control Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], control_scid);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6898      	ldr	r0, [r3, #8]
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	8999      	ldrh	r1, [r3, #12]
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	3309      	adds	r3, #9
 800fc2e:	781a      	ldrb	r2, [r3, #0]
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	3316      	adds	r3, #22
 800fc34:	f7fe ff29 	bl	800ea8a <_ZN3BTD21l2cap_config_responseEthPh>
 800fc38:	e22c      	b.n	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	330c      	adds	r3, #12
 800fc3e:	781a      	ldrb	r2, [r3, #0]
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800fc46:	429a      	cmp	r2, r3
 800fc48:	f040 8224 	bne.w	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	330d      	adds	r3, #13
 800fc50:	781a      	ldrb	r2, [r3, #0]
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800fc58:	429a      	cmp	r2, r3
 800fc5a:	f040 821b 	bne.w	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Interrupt Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], interrupt_scid);
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	6898      	ldr	r0, [r3, #8]
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	8999      	ldrh	r1, [r3, #12]
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	3309      	adds	r3, #9
 800fc6a:	781a      	ldrb	r2, [r3, #0]
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	3318      	adds	r3, #24
 800fc70:	f7fe ff0b 	bl	800ea8a <_ZN3BTD21l2cap_config_responseEthPh>
 800fc74:	e20e      	b.n	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_REQUEST) {
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	3308      	adds	r3, #8
 800fc7a:	781b      	ldrb	r3, [r3, #0]
 800fc7c:	2b06      	cmp	r3, #6
 800fc7e:	d170      	bne.n	800fd62 <_ZN5BTHID7ACLDataEPh+0x570>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	330c      	adds	r3, #12
 800fc84:	781a      	ldrb	r2, [r3, #0]
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	d112      	bne.n	800fcb6 <_ZN5BTHID7ACLDataEPh+0x4c4>
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	330d      	adds	r3, #13
 800fc94:	781a      	ldrb	r2, [r3, #0]
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fc9c:	429a      	cmp	r2, r3
 800fc9e:	d10a      	bne.n	800fcb6 <_ZN5BTHID7ACLDataEPh+0x4c4>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	7a5a      	ldrb	r2, [r3, #9]
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	691b      	ldr	r3, [r3, #16]
 800fcac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	611a      	str	r2, [r3, #16]
 800fcb4:	e1ee      	b.n	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	330c      	adds	r3, #12
 800fcba:	781a      	ldrb	r2, [r3, #0]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800fcc2:	429a      	cmp	r2, r3
 800fcc4:	d121      	bne.n	800fd0a <_ZN5BTHID7ACLDataEPh+0x518>
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	330d      	adds	r3, #13
 800fcca:	781a      	ldrb	r2, [r3, #0]
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800fcd2:	429a      	cmp	r2, r3
 800fcd4:	d119      	bne.n	800fd0a <_ZN5BTHID7ACLDataEPh+0x518>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	7a5a      	ldrb	r2, [r3, #9]
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, control_dcid, control_scid);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	6898      	ldr	r0, [r3, #8]
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	8999      	ldrh	r1, [r3, #12]
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	7d1a      	ldrb	r2, [r3, #20]
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	3316      	adds	r3, #22
 800fcf4:	9300      	str	r3, [sp, #0]
 800fcf6:	4623      	mov	r3, r4
 800fcf8:	f7fe ff57 	bl	800ebaa <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	3308      	adds	r3, #8
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	6878      	ldr	r0, [r7, #4]
 800fd06:	4798      	blx	r3
 800fd08:	e1c4      	b.n	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	330c      	adds	r3, #12
 800fd0e:	781a      	ldrb	r2, [r3, #0]
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800fd16:	429a      	cmp	r2, r3
 800fd18:	f040 81bc 	bne.w	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	330d      	adds	r3, #13
 800fd20:	781a      	ldrb	r2, [r3, #0]
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800fd28:	429a      	cmp	r2, r3
 800fd2a:	f040 81b3 	bne.w	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	7a5a      	ldrb	r2, [r3, #9]
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6898      	ldr	r0, [r3, #8]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	8999      	ldrh	r1, [r3, #12]
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	7d1a      	ldrb	r2, [r3, #20]
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	3318      	adds	r3, #24
 800fd4c:	9300      	str	r3, [sp, #0]
 800fd4e:	4623      	mov	r3, r4
 800fd50:	f7fe ff2b 	bl	800ebaa <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	3308      	adds	r3, #8
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	6878      	ldr	r0, [r7, #4]
 800fd5e:	4798      	blx	r3
 800fd60:	e198      	b.n	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_RESPONSE) {
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	3308      	adds	r3, #8
 800fd66:	781b      	ldrb	r3, [r3, #0]
 800fd68:	2b07      	cmp	r3, #7
 800fd6a:	d14c      	bne.n	800fe06 <_ZN5BTHID7ACLDataEPh+0x614>
                                if(l2capinbuf[12] == sdp_scid[0] && l2capinbuf[13] == sdp_scid[1]) {
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	330c      	adds	r3, #12
 800fd70:	781a      	ldrb	r2, [r3, #0]
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	7edb      	ldrb	r3, [r3, #27]
 800fd76:	429a      	cmp	r2, r3
 800fd78:	d111      	bne.n	800fd9e <_ZN5BTHID7ACLDataEPh+0x5ac>
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	330d      	adds	r3, #13
 800fd7e:	781a      	ldrb	r2, [r3, #0]
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	7f1b      	ldrb	r3, [r3, #28]
 800fd84:	429a      	cmp	r2, r3
 800fd86:	d10a      	bne.n	800fd9e <_ZN5BTHID7ACLDataEPh+0x5ac>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	7a5a      	ldrb	r2, [r3, #9]
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_RESPONSE);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	691b      	ldr	r3, [r3, #16]
 800fd94:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	611a      	str	r2, [r3, #16]
 800fd9c:	e17a      	b.n	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_scid[0] && l2capinbuf[13] == control_scid[1]) {
 800fd9e:	683b      	ldr	r3, [r7, #0]
 800fda0:	330c      	adds	r3, #12
 800fda2:	781a      	ldrb	r2, [r3, #0]
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	7d9b      	ldrb	r3, [r3, #22]
 800fda8:	429a      	cmp	r2, r3
 800fdaa:	d111      	bne.n	800fdd0 <_ZN5BTHID7ACLDataEPh+0x5de>
 800fdac:	683b      	ldr	r3, [r7, #0]
 800fdae:	330d      	adds	r3, #13
 800fdb0:	781a      	ldrb	r2, [r3, #0]
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	7ddb      	ldrb	r3, [r3, #23]
 800fdb6:	429a      	cmp	r2, r3
 800fdb8:	d10a      	bne.n	800fdd0 <_ZN5BTHID7ACLDataEPh+0x5de>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	7a5a      	ldrb	r2, [r3, #9]
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE);
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	691b      	ldr	r3, [r3, #16]
 800fdc6:	f043 0208 	orr.w	r2, r3, #8
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	611a      	str	r2, [r3, #16]
 800fdce:	e161      	b.n	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_scid[0] && l2capinbuf[13] == interrupt_scid[1]) {
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	330c      	adds	r3, #12
 800fdd4:	781a      	ldrb	r2, [r3, #0]
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	7e1b      	ldrb	r3, [r3, #24]
 800fdda:	429a      	cmp	r2, r3
 800fddc:	f040 815a 	bne.w	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	330d      	adds	r3, #13
 800fde4:	781a      	ldrb	r2, [r3, #0]
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	7e5b      	ldrb	r3, [r3, #25]
 800fdea:	429a      	cmp	r2, r3
 800fdec:	f040 8152 	bne.w	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	7a5a      	ldrb	r2, [r3, #9]
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	691b      	ldr	r3, [r3, #16]
 800fdfc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	611a      	str	r2, [r3, #16]
 800fe04:	e146      	b.n	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_INFORMATION_REQUEST) {
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	3308      	adds	r3, #8
 800fe0a:	781b      	ldrb	r3, [r3, #0]
 800fe0c:	2b0a      	cmp	r3, #10
 800fe0e:	f040 8141 	bne.w	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nInformation request"), 0x80);
#endif
                                identifier = l2capinbuf[9];
 800fe12:	683b      	ldr	r3, [r7, #0]
 800fe14:	7a5a      	ldrb	r2, [r3, #9]
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_information_response(hci_handle, identifier, l2capinbuf[12], l2capinbuf[13]);
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	6898      	ldr	r0, [r3, #8]
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	8999      	ldrh	r1, [r3, #12]
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	7d1a      	ldrb	r2, [r3, #20]
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	330c      	adds	r3, #12
 800fe2a:	781c      	ldrb	r4, [r3, #0]
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	330d      	adds	r3, #13
 800fe30:	781b      	ldrb	r3, [r3, #0]
 800fe32:	9300      	str	r3, [sp, #0]
 800fe34:	4623      	mov	r3, r4
 800fe36:	f7fe fef5 	bl	800ec24 <_ZN3BTD26l2cap_information_responseEthhh>
 800fe3a:	e12b      	b.n	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                identifier = l2capinbuf[9];
                                Notify(PSTR("\r\nL2CAP Unknown Signaling Command: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == sdp_dcid[0] && l2capinbuf[7] == sdp_dcid[1]) { // SDP
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	3306      	adds	r3, #6
 800fe40:	781a      	ldrb	r2, [r3, #0]
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800fe48:	429a      	cmp	r2, r3
 800fe4a:	f040 8087 	bne.w	800ff5c <_ZN5BTHID7ACLDataEPh+0x76a>
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	3307      	adds	r3, #7
 800fe52:	781a      	ldrb	r2, [r3, #0]
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fe5a:	429a      	cmp	r2, r3
 800fe5c:	d17e      	bne.n	800ff5c <_ZN5BTHID7ACLDataEPh+0x76a>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	3308      	adds	r3, #8
 800fe62:	781b      	ldrb	r3, [r3, #0]
 800fe64:	2b02      	cmp	r3, #2
 800fe66:	d131      	bne.n	800fecc <_ZN5BTHID7ACLDataEPh+0x6da>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_SEARCH_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_SEARCH_RESPONSE;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2203      	movs	r2, #3
 800fe6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	7a5a      	ldrb	r2, [r3, #9]
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	7a9a      	ldrb	r2, [r3, #10]
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2200      	movs	r2, #0
 800fe88:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2205      	movs	r2, #5
 800fe90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB TotalServiceRecordCount
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2200      	movs	r2, #0
 800fe98:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x00; // LSB TotalServiceRecordCount = 0
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2200      	movs	r2, #0
 800fea0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                l2capoutbuf[7] = 0x00; // MSB CurrentServiceRecordCount
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2200      	movs	r2, #0
 800fea8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // LSB CurrentServiceRecordCount = 0
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2200      	movs	r2, #0
 800feb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2200      	movs	r2, #0
 800feb8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	3328      	adds	r3, #40	; 0x28
 800fec0:	220a      	movs	r2, #10
 800fec2:	4619      	mov	r1, r3
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f000 fb6d 	bl	80105a4 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800feca:	e0e0      	b.n	801008e <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_ATTRIBUTE_REQUEST) {
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	3308      	adds	r3, #8
 800fed0:	781b      	ldrb	r3, [r3, #0]
 800fed2:	2b04      	cmp	r3, #4
 800fed4:	d131      	bne.n	800ff3a <_ZN5BTHID7ACLDataEPh+0x748>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_ATTRIBUTE_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_ATTRIBUTE_RESPONSE;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2205      	movs	r2, #5
 800feda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	7a5a      	ldrb	r2, [r3, #9]
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	7a9a      	ldrb	r2, [r3, #10]
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	2200      	movs	r2, #0
 800fef6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	2205      	movs	r2, #5
 800fefe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB AttributeListByteCount
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2200      	movs	r2, #0
 800ff06:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x02; // LSB AttributeListByteCount = 2
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2202      	movs	r2, #2
 800ff0e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                // TODO: What to send?
                                l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	2235      	movs	r2, #53	; 0x35
 800ff16:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // Length = 0
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	2200      	movs	r2, #0
 800ff26:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	3328      	adds	r3, #40	; 0x28
 800ff2e:	220a      	movs	r2, #10
 800ff30:	4619      	mov	r1, r3
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	f000 fb36 	bl	80105a4 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800ff38:	e0a9      	b.n	801008e <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST) {
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	3308      	adds	r3, #8
 800ff3e:	781b      	ldrb	r3, [r3, #0]
 800ff40:	2b06      	cmp	r3, #6
 800ff42:	f040 80a4 	bne.w	801008e <_ZN5BTHID7ACLDataEPh+0x89c>
                                for(uint8_t i = 0; i < length; i++) {
                                        D_PrintHex<uint8_t > (l2capinbuf[13 + i], 0x80);
                                        Notify(PSTR(" "), 0x80);
                                }
#endif
                                serviceNotSupported(l2capinbuf[9], l2capinbuf[10]); // The service is not supported
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	3309      	adds	r3, #9
 800ff4a:	7819      	ldrb	r1, [r3, #0]
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	330a      	adds	r3, #10
 800ff50:	781b      	ldrb	r3, [r3, #0]
 800ff52:	461a      	mov	r2, r3
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f000 fb3f 	bl	80105d8 <_ZN5BTHID19serviceNotSupportedEhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800ff5a:	e098      	b.n	801008e <_ZN5BTHID7ACLDataEPh+0x89c>
                        else {
                                Notify(PSTR("\r\nUnknown PDU: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == interrupt_dcid[0] && l2capinbuf[7] == interrupt_dcid[1]) { // l2cap_interrupt
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	3306      	adds	r3, #6
 800ff60:	781a      	ldrb	r2, [r3, #0]
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800ff68:	429a      	cmp	r2, r3
 800ff6a:	d162      	bne.n	8010032 <_ZN5BTHID7ACLDataEPh+0x840>
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	3307      	adds	r3, #7
 800ff70:	781a      	ldrb	r2, [r3, #0]
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	d15a      	bne.n	8010032 <_ZN5BTHID7ACLDataEPh+0x840>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA1) { // HID BT DATA (0xA0) | Report Type (Input 0x01)
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	3308      	adds	r3, #8
 800ff80:	781b      	ldrb	r3, [r3, #0]
 800ff82:	2ba1      	cmp	r3, #161	; 0xa1
 800ff84:	f040 8085 	bne.w	8010092 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                lastBtDataInputIntMillis = (uint32_t)millis(); // Store the timestamp of the report
 800ff88:	f7f1 ffa4 	bl	8001ed4 <HAL_GetTick>
 800ff8c:	4602      	mov	r2, r0
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	675a      	str	r2, [r3, #116]	; 0x74

                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	3305      	adds	r3, #5
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	021b      	lsls	r3, r3, #8
 800ff9a:	b21a      	sxth	r2, r3
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	3304      	adds	r3, #4
 800ffa0:	781b      	ldrb	r3, [r3, #0]
 800ffa2:	b21b      	sxth	r3, r3
 800ffa4:	4313      	orrs	r3, r2
 800ffa6:	b21b      	sxth	r3, r3
 800ffa8:	81fb      	strh	r3, [r7, #14]
                                ParseBTHIDData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	3314      	adds	r3, #20
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	89fa      	ldrh	r2, [r7, #14]
 800ffb4:	b2d2      	uxtb	r2, r2
 800ffb6:	3a01      	subs	r2, #1
 800ffb8:	b2d1      	uxtb	r1, r2
 800ffba:	683a      	ldr	r2, [r7, #0]
 800ffbc:	3209      	adds	r2, #9
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	4798      	blx	r3

                                switch(l2capinbuf[9]) { // Report ID
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	3309      	adds	r3, #9
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	2b01      	cmp	r3, #1
 800ffca:	d002      	beq.n	800ffd2 <_ZN5BTHID7ACLDataEPh+0x7e0>
 800ffcc:	2b02      	cmp	r3, #2
 800ffce:	d016      	beq.n	800fffe <_ZN5BTHID7ACLDataEPh+0x80c>
                        } else {
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nUnhandled L2CAP interrupt report: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
#endif
                        }
 800ffd0:	e05f      	b.n	8010092 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                if(pRptParser[KEYBOARD_PARSER_ID])
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	6a1b      	ldr	r3, [r3, #32]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d027      	beq.n	801002a <_ZN5BTHID7ACLDataEPh+0x838>
                                                        pRptParser[KEYBOARD_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	6a18      	ldr	r0, [r3, #32]
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6a1b      	ldr	r3, [r3, #32]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	681c      	ldr	r4, [r3, #0]
 800ffe6:	89fb      	ldrh	r3, [r7, #14]
 800ffe8:	b2db      	uxtb	r3, r3
 800ffea:	3b02      	subs	r3, #2
 800ffec:	b2da      	uxtb	r2, r3
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	330a      	adds	r3, #10
 800fff2:	9300      	str	r3, [sp, #0]
 800fff4:	4613      	mov	r3, r2
 800fff6:	2200      	movs	r2, #0
 800fff8:	6879      	ldr	r1, [r7, #4]
 800fffa:	47a0      	blx	r4
                                                break;
 800fffc:	e015      	b.n	801002a <_ZN5BTHID7ACLDataEPh+0x838>
                                                if(pRptParser[MOUSE_PARSER_ID])
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010002:	2b00      	cmp	r3, #0
 8010004:	d013      	beq.n	801002e <_ZN5BTHID7ACLDataEPh+0x83c>
                                                        pRptParser[MOUSE_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	681c      	ldr	r4, [r3, #0]
 8010012:	89fb      	ldrh	r3, [r7, #14]
 8010014:	b2db      	uxtb	r3, r3
 8010016:	3b02      	subs	r3, #2
 8010018:	b2da      	uxtb	r2, r3
 801001a:	683b      	ldr	r3, [r7, #0]
 801001c:	330a      	adds	r3, #10
 801001e:	9300      	str	r3, [sp, #0]
 8010020:	4613      	mov	r3, r2
 8010022:	2200      	movs	r2, #0
 8010024:	6879      	ldr	r1, [r7, #4]
 8010026:	47a0      	blx	r4
                                                break;
 8010028:	e001      	b.n	801002e <_ZN5BTHID7ACLDataEPh+0x83c>
                                                break;
 801002a:	bf00      	nop
 801002c:	e031      	b.n	8010092 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                break;
 801002e:	bf00      	nop
                        }
 8010030:	e02f      	b.n	8010092 <_ZN5BTHID7ACLDataEPh+0x8a0>
                } else if(l2capinbuf[6] == control_dcid[0] && l2capinbuf[7] == control_dcid[1]) { // l2cap_control
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	3306      	adds	r3, #6
 8010036:	781a      	ldrb	r2, [r3, #0]
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 801003e:	429a      	cmp	r2, r3
 8010040:	d128      	bne.n	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	3307      	adds	r3, #7
 8010046:	781a      	ldrb	r2, [r3, #0]
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801004e:	429a      	cmp	r2, r3
 8010050:	d120      	bne.n	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA3) { // HID BT DATA (0xA0) | Report Type (Feature 0x03)
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	3308      	adds	r3, #8
 8010056:	781b      	ldrb	r3, [r3, #0]
 8010058:	2ba3      	cmp	r3, #163	; 0xa3
 801005a:	d11b      	bne.n	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	3305      	adds	r3, #5
 8010060:	781b      	ldrb	r3, [r3, #0]
 8010062:	021b      	lsls	r3, r3, #8
 8010064:	b21a      	sxth	r2, r3
 8010066:	683b      	ldr	r3, [r7, #0]
 8010068:	3304      	adds	r3, #4
 801006a:	781b      	ldrb	r3, [r3, #0]
 801006c:	b21b      	sxth	r3, r3
 801006e:	4313      	orrs	r3, r2
 8010070:	b21b      	sxth	r3, r3
 8010072:	81bb      	strh	r3, [r7, #12]
                                ParseBTHIDControlData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	3318      	adds	r3, #24
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	89ba      	ldrh	r2, [r7, #12]
 801007e:	b2d2      	uxtb	r2, r2
 8010080:	3a01      	subs	r2, #1
 8010082:	b2d1      	uxtb	r1, r2
 8010084:	683a      	ldr	r2, [r7, #0]
 8010086:	3209      	adds	r2, #9
 8010088:	6878      	ldr	r0, [r7, #4]
 801008a:	4798      	blx	r3
 801008c:	e002      	b.n	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 801008e:	bf00      	nop
 8010090:	e000      	b.n	8010094 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        }
 8010092:	bf00      	nop
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
                }
#endif
                SDP_task();
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f000 f807 	bl	80100a8 <_ZN5BTHID8SDP_taskEv>
                L2CAP_task();
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f000 f8b4 	bl	8010208 <_ZN5BTHID10L2CAP_taskEv>
        }
}
 80100a0:	bf00      	nop
 80100a2:	3714      	adds	r7, #20
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd90      	pop	{r4, r7, pc}

080100a8 <_ZN5BTHID8SDP_taskEv>:

void BTHID::SDP_task() {
 80100a8:	b5b0      	push	{r4, r5, r7, lr}
 80100aa:	b084      	sub	sp, #16
 80100ac:	af02      	add	r7, sp, #8
 80100ae:	6078      	str	r0, [r7, #4]
        switch(l2cap_sdp_state) {
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	7e9b      	ldrb	r3, [r3, #26]
 80100b4:	2b0e      	cmp	r3, #14
 80100b6:	f000 8084 	beq.w	80101c2 <_ZN5BTHID8SDP_taskEv+0x11a>
 80100ba:	2b0e      	cmp	r3, #14
 80100bc:	f300 809f 	bgt.w	80101fe <_ZN5BTHID8SDP_taskEv+0x156>
 80100c0:	2b0a      	cmp	r3, #10
 80100c2:	d002      	beq.n	80100ca <_ZN5BTHID8SDP_taskEv+0x22>
 80100c4:	2b0b      	cmp	r3, #11
 80100c6:	d068      	beq.n	801019a <_ZN5BTHID8SDP_taskEv+0xf2>
                                hci_handle = -1; // Reset handle
                                Reset();
                        }
                        break;
        }
}
 80100c8:	e099      	b.n	80101fe <_ZN5BTHID8SDP_taskEv+0x156>
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST)) {
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	691b      	ldr	r3, [r3, #16]
 80100ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d041      	beq.n	801015a <_ZN5BTHID8SDP_taskEv+0xb2>
                                l2cap_clear_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST); // Clear flag
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	691b      	ldr	r3, [r3, #16]
 80100da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	611a      	str	r2, [r3, #16]
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, PENDING);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	6898      	ldr	r0, [r3, #8]
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	8999      	ldrh	r1, [r3, #12]
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	7d1a      	ldrb	r2, [r3, #20]
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	331b      	adds	r3, #27
 80100f8:	2501      	movs	r5, #1
 80100fa:	9501      	str	r5, [sp, #4]
 80100fc:	9300      	str	r3, [sp, #0]
 80100fe:	4623      	mov	r3, r4
 8010100:	f7fe fc2b 	bl	800e95a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8010104:	2001      	movs	r0, #1
 8010106:	f7f1 fef1 	bl	8001eec <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, SUCCESSFUL);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6898      	ldr	r0, [r3, #8]
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	8999      	ldrh	r1, [r3, #12]
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	7d1a      	ldrb	r2, [r3, #20]
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	331b      	adds	r3, #27
 8010120:	2500      	movs	r5, #0
 8010122:	9501      	str	r5, [sp, #4]
 8010124:	9300      	str	r3, [sp, #0]
 8010126:	4623      	mov	r3, r4
 8010128:	f7fe fc17 	bl	800e95a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	7d1b      	ldrb	r3, [r3, #20]
 8010130:	3301      	adds	r3, #1
 8010132:	b2da      	uxtb	r2, r3
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	751a      	strb	r2, [r3, #20]
                                delay(1);
 8010138:	2001      	movs	r0, #1
 801013a:	f7f1 fed7 	bl	8001eec <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	6898      	ldr	r0, [r3, #8]
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	8999      	ldrh	r1, [r3, #12]
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	7d1a      	ldrb	r2, [r3, #20]
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	331b      	adds	r3, #27
 801014e:	f7fe fc51 	bl	800e9f4 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_sdp_state = L2CAP_SDP_SUCCESS;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	220b      	movs	r2, #11
 8010156:	769a      	strb	r2, [r3, #26]
                        break;
 8010158:	e04c      	b.n	80101f4 <_ZN5BTHID8SDP_taskEv+0x14c>
                        } else if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST)) {
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	691b      	ldr	r3, [r3, #16]
 801015e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010162:	2b00      	cmp	r3, #0
 8010164:	d046      	beq.n	80101f4 <_ZN5BTHID8SDP_taskEv+0x14c>
                                l2cap_clear_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST); // Clear flag
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	691b      	ldr	r3, [r3, #16]
 801016a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	611a      	str	r2, [r3, #16]
                                SDPConnected = false;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	2200      	movs	r2, #0
 8010176:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                pBtd->l2cap_disconnection_response(hci_handle, identifier, sdp_dcid, sdp_scid);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	6898      	ldr	r0, [r3, #8]
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	8999      	ldrh	r1, [r3, #12]
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	7d1a      	ldrb	r2, [r3, #20]
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	331b      	adds	r3, #27
 8010190:	9300      	str	r3, [sp, #0]
 8010192:	4623      	mov	r3, r4
 8010194:	f7fe fd09 	bl	800ebaa <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                        break;
 8010198:	e02c      	b.n	80101f4 <_ZN5BTHID8SDP_taskEv+0x14c>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS)) {
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	691b      	ldr	r3, [r3, #16]
 801019e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d028      	beq.n	80101f8 <_ZN5BTHID8SDP_taskEv+0x150>
                                l2cap_clear_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS); // Clear flag
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	691b      	ldr	r3, [r3, #16]
 80101aa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	611a      	str	r2, [r3, #16]
                                SDPConnected = true;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	2201      	movs	r2, #1
 80101b6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                l2cap_sdp_state = L2CAP_SDP_WAIT;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	220a      	movs	r2, #10
 80101be:	769a      	strb	r2, [r3, #26]
                        break;
 80101c0:	e01a      	b.n	80101f8 <_ZN5BTHID8SDP_taskEv+0x150>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_RESPONSE)) {
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	691b      	ldr	r3, [r3, #16]
 80101c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d016      	beq.n	80101fc <_ZN5BTHID8SDP_taskEv+0x154>
                                pBtd->hci_disconnect(hci_handle);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	689a      	ldr	r2, [r3, #8]
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	899b      	ldrh	r3, [r3, #12]
 80101d6:	4619      	mov	r1, r3
 80101d8:	4610      	mov	r0, r2
 80101da:	f7fe fa92 	bl	800e702 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80101e4:	819a      	strh	r2, [r3, #12]
                                Reset();
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	3308      	adds	r3, #8
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	4798      	blx	r3
                        break;
 80101f2:	e003      	b.n	80101fc <_ZN5BTHID8SDP_taskEv+0x154>
                        break;
 80101f4:	bf00      	nop
 80101f6:	e002      	b.n	80101fe <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 80101f8:	bf00      	nop
 80101fa:	e000      	b.n	80101fe <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 80101fc:	bf00      	nop
}
 80101fe:	bf00      	nop
 8010200:	3708      	adds	r7, #8
 8010202:	46bd      	mov	sp, r7
 8010204:	bdb0      	pop	{r4, r5, r7, pc}
	...

08010208 <_ZN5BTHID10L2CAP_taskEv>:

void BTHID::L2CAP_task() {
 8010208:	b5b0      	push	{r4, r5, r7, lr}
 801020a:	b084      	sub	sp, #16
 801020c:	af02      	add	r7, sp, #8
 801020e:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8010216:	3b01      	subs	r3, #1
 8010218:	2b08      	cmp	r3, #8
 801021a:	f200 812c 	bhi.w	8010476 <_ZN5BTHID10L2CAP_taskEv+0x26e>
 801021e:	a201      	add	r2, pc, #4	; (adr r2, 8010224 <_ZN5BTHID10L2CAP_taskEv+0x1c>)
 8010220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010224:	08010455 	.word	0x08010455
 8010228:	080102ef 	.word	0x080102ef
 801022c:	08010327 	.word	0x08010327
 8010230:	08010249 	.word	0x08010249
 8010234:	08010421 	.word	0x08010421
 8010238:	08010267 	.word	0x08010267
 801023c:	0801036f 	.word	0x0801036f
 8010240:	080103a5 	.word	0x080103a5
 8010244:	080103e1 	.word	0x080103e1
                        /* These states are used if the HID device is the host */
                case L2CAP_CONTROL_SUCCESS:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	691b      	ldr	r3, [r3, #16]
 801024c:	f003 0302 	and.w	r3, r3, #2
 8010250:	2b00      	cmp	r3, #0
 8010252:	f000 8101 	beq.w	8010458 <_ZN5BTHID10L2CAP_taskEv+0x250>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Control Successfully Configured"), 0x80);
#endif
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f000 f9f9 	bl	801064e <_ZN5BTHID11setProtocolEv>
                                l2cap_state = L2CAP_INTERRUPT_SETUP;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2206      	movs	r2, #6
 8010260:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8010264:	e0f8      	b.n	8010458 <_ZN5BTHID10L2CAP_taskEv+0x250>

                case L2CAP_INTERRUPT_SETUP:
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST)) {
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	691b      	ldr	r3, [r3, #16]
 801026a:	f003 0310 	and.w	r3, r3, #16
 801026e:	2b00      	cmp	r3, #0
 8010270:	f000 80f4 	beq.w	801045c <_ZN5BTHID10L2CAP_taskEv+0x254>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Interrupt Incoming Connection Request"), 0x80);
#endif
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, PENDING);
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	6898      	ldr	r0, [r3, #8]
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	8999      	ldrh	r1, [r3, #12]
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	7d1a      	ldrb	r2, [r3, #20]
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	3318      	adds	r3, #24
 801028a:	2501      	movs	r5, #1
 801028c:	9501      	str	r5, [sp, #4]
 801028e:	9300      	str	r3, [sp, #0]
 8010290:	4623      	mov	r3, r4
 8010292:	f7fe fb62 	bl	800e95a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8010296:	2001      	movs	r0, #1
 8010298:	f7f1 fe28 	bl	8001eec <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, SUCCESSFUL);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	6898      	ldr	r0, [r3, #8]
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	8999      	ldrh	r1, [r3, #12]
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	7d1a      	ldrb	r2, [r3, #20]
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	3318      	adds	r3, #24
 80102b2:	2500      	movs	r5, #0
 80102b4:	9501      	str	r5, [sp, #4]
 80102b6:	9300      	str	r3, [sp, #0]
 80102b8:	4623      	mov	r3, r4
 80102ba:	f7fe fb4e 	bl	800e95a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	7d1b      	ldrb	r3, [r3, #20]
 80102c2:	3301      	adds	r3, #1
 80102c4:	b2da      	uxtb	r2, r3
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	751a      	strb	r2, [r3, #20]
                                delay(1);
 80102ca:	2001      	movs	r0, #1
 80102cc:	f7f1 fe0e 	bl	8001eec <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	6898      	ldr	r0, [r3, #8]
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	8999      	ldrh	r1, [r3, #12]
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	7d1a      	ldrb	r2, [r3, #20]
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	3318      	adds	r3, #24
 80102e0:	f7fe fb88 	bl	800e9f4 <_ZN3BTD20l2cap_config_requestEthPh>

                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2208      	movs	r2, #8
 80102e8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80102ec:	e0b6      	b.n	801045c <_ZN5BTHID10L2CAP_taskEv+0x254>

                        /* These states are used if the Arduino is the host */
                case L2CAP_CONTROL_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONTROL_CONNECTED)) {
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	691b      	ldr	r3, [r3, #16]
 80102f2:	f003 0304 	and.w	r3, r3, #4
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	f000 80b2 	beq.w	8010460 <_ZN5BTHID10L2CAP_taskEv+0x258>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Config Request"), 0x80);
#endif
                                identifier++;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	7d1b      	ldrb	r3, [r3, #20]
 8010300:	3301      	adds	r3, #1
 8010302:	b2da      	uxtb	r2, r3
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	6898      	ldr	r0, [r3, #8]
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	8999      	ldrh	r1, [r3, #12]
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	7d1a      	ldrb	r2, [r3, #20]
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	3316      	adds	r3, #22
 8010318:	f7fe fb6c 	bl	800e9f4 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_CONFIG_REQUEST;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2203      	movs	r2, #3
 8010320:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8010324:	e09c      	b.n	8010460 <_ZN5BTHID10L2CAP_taskEv+0x258>

                case L2CAP_CONTROL_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	691b      	ldr	r3, [r3, #16]
 801032a:	f003 0302 	and.w	r3, r3, #2
 801032e:	2b00      	cmp	r3, #0
 8010330:	f000 8098 	beq.w	8010464 <_ZN5BTHID10L2CAP_taskEv+0x25c>
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f000 f98a 	bl	801064e <_ZN5BTHID11setProtocolEv>
                                delay(1); // Short delay between commands - just to be sure
 801033a:	2001      	movs	r0, #1
 801033c:	f7f1 fdd6 	bl	8001eec <HAL_Delay>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Connection Request"), 0x80);
#endif
                                identifier++;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	7d1b      	ldrb	r3, [r3, #20]
 8010344:	3301      	adds	r3, #1
 8010346:	b2da      	uxtb	r2, r3
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, interrupt_dcid, HID_INTR_PSM);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	6898      	ldr	r0, [r3, #8]
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	8999      	ldrh	r1, [r3, #12]
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	7d1a      	ldrb	r2, [r3, #20]
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	336d      	adds	r3, #109	; 0x6d
 801035c:	2413      	movs	r4, #19
 801035e:	9400      	str	r4, [sp, #0]
 8010360:	f7fe fabd 	bl	800e8de <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_INTERRUPT_CONNECT_REQUEST;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	2207      	movs	r2, #7
 8010368:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801036c:	e07a      	b.n	8010464 <_ZN5BTHID10L2CAP_taskEv+0x25c>

                case L2CAP_INTERRUPT_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_INTERRUPT_CONNECTED)) {
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	691b      	ldr	r3, [r3, #16]
 8010372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010376:	2b00      	cmp	r3, #0
 8010378:	d076      	beq.n	8010468 <_ZN5BTHID10L2CAP_taskEv+0x260>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Config Request"), 0x80);
#endif
                                identifier++;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	7d1b      	ldrb	r3, [r3, #20]
 801037e:	3301      	adds	r3, #1
 8010380:	b2da      	uxtb	r2, r3
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	6898      	ldr	r0, [r3, #8]
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	8999      	ldrh	r1, [r3, #12]
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	7d1a      	ldrb	r2, [r3, #20]
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	3318      	adds	r3, #24
 8010396:	f7fe fb2d 	bl	800e9f4 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	2208      	movs	r2, #8
 801039e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80103a2:	e061      	b.n	8010468 <_ZN5BTHID10L2CAP_taskEv+0x260>

                case L2CAP_INTERRUPT_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS)) { // Now the HID channels is established
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	691b      	ldr	r3, [r3, #16]
 80103a8:	f003 0320 	and.w	r3, r3, #32
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d05d      	beq.n	801046c <_ZN5BTHID10L2CAP_taskEv+0x264>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Channels Established"), 0x80);
#endif
                                pBtd->connectToHIDDevice = false;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	689b      	ldr	r3, [r3, #8]
 80103b4:	2200      	movs	r2, #0
 80103b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                pBtd->pairWithHIDDevice = false;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	689b      	ldr	r3, [r3, #8]
 80103be:	2200      	movs	r2, #0
 80103c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                connected = true;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2201      	movs	r2, #1
 80103c8:	755a      	strb	r2, [r3, #21]
                                onInit();
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	3310      	adds	r3, #16
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	6878      	ldr	r0, [r7, #4]
 80103d4:	4798      	blx	r3
                                l2cap_state = L2CAP_DONE;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	2201      	movs	r2, #1
 80103da:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80103de:	e045      	b.n	801046c <_ZN5BTHID10L2CAP_taskEv+0x264>

                case L2CAP_DONE:
                        break;

                case L2CAP_INTERRUPT_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE)) {
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	691b      	ldr	r3, [r3, #16]
 80103e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d041      	beq.n	8010470 <_ZN5BTHID10L2CAP_taskEv+0x268>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Interrupt Channel"), 0x80);
#endif
                                identifier++;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	7d1b      	ldrb	r3, [r3, #20]
 80103f0:	3301      	adds	r3, #1
 80103f2:	b2da      	uxtb	r2, r3
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_disconnection_request(hci_handle, identifier, control_scid, control_dcid);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	6898      	ldr	r0, [r3, #8]
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	8999      	ldrh	r1, [r3, #12]
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	7d1a      	ldrb	r2, [r3, #20]
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f103 0416 	add.w	r4, r3, #22
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	336b      	adds	r3, #107	; 0x6b
 801040e:	9300      	str	r3, [sp, #0]
 8010410:	4623      	mov	r3, r4
 8010412:	f7fe fb8d 	bl	800eb30 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
                                l2cap_state = L2CAP_CONTROL_DISCONNECT;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	2205      	movs	r2, #5
 801041a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801041e:	e027      	b.n	8010470 <_ZN5BTHID10L2CAP_taskEv+0x268>

                case L2CAP_CONTROL_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE)) {
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	691b      	ldr	r3, [r3, #16]
 8010424:	f003 0308 	and.w	r3, r3, #8
 8010428:	2b00      	cmp	r3, #0
 801042a:	d023      	beq.n	8010474 <_ZN5BTHID10L2CAP_taskEv+0x26c>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Control Channel"), 0x80);
#endif
                                pBtd->hci_disconnect(hci_handle);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	689a      	ldr	r2, [r3, #8]
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	899b      	ldrh	r3, [r3, #12]
 8010434:	4619      	mov	r1, r3
 8010436:	4610      	mov	r0, r2
 8010438:	f7fe f963 	bl	800e702 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010442:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2200      	movs	r2, #0
 8010448:	611a      	str	r2, [r3, #16]
                                l2cap_state = L2CAP_WAIT;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	2200      	movs	r2, #0
 801044e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8010452:	e00f      	b.n	8010474 <_ZN5BTHID10L2CAP_taskEv+0x26c>
                        break;
 8010454:	bf00      	nop
 8010456:	e00e      	b.n	8010476 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010458:	bf00      	nop
 801045a:	e00c      	b.n	8010476 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 801045c:	bf00      	nop
 801045e:	e00a      	b.n	8010476 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010460:	bf00      	nop
 8010462:	e008      	b.n	8010476 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010464:	bf00      	nop
 8010466:	e006      	b.n	8010476 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010468:	bf00      	nop
 801046a:	e004      	b.n	8010476 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 801046c:	bf00      	nop
 801046e:	e002      	b.n	8010476 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010470:	bf00      	nop
 8010472:	e000      	b.n	8010476 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010474:	bf00      	nop
        }
}
 8010476:	bf00      	nop
 8010478:	3708      	adds	r7, #8
 801047a:	46bd      	mov	sp, r7
 801047c:	bdb0      	pop	{r4, r5, r7, pc}
 801047e:	bf00      	nop

08010480 <_ZN5BTHID3RunEv>:

void BTHID::Run() {
 8010480:	b5b0      	push	{r4, r5, r7, lr}
 8010482:	b084      	sub	sp, #16
 8010484:	af02      	add	r7, sp, #8
 8010486:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 801048e:	2b00      	cmp	r3, #0
 8010490:	f040 8084 	bne.w	801059c <_ZN5BTHID3RunEv+0x11c>
                case L2CAP_WAIT:
                        if(pBtd->connectToHIDDevice && !pBtd->l2capConnectionClaimed && !connected && !activeConnection) {
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	689b      	ldr	r3, [r3, #8]
 8010498:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801049c:	2b00      	cmp	r3, #0
 801049e:	d03a      	beq.n	8010516 <_ZN5BTHID3RunEv+0x96>
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	689b      	ldr	r3, [r3, #8]
 80104a4:	7a5b      	ldrb	r3, [r3, #9]
 80104a6:	f083 0301 	eor.w	r3, r3, #1
 80104aa:	b2db      	uxtb	r3, r3
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d032      	beq.n	8010516 <_ZN5BTHID3RunEv+0x96>
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	7d5b      	ldrb	r3, [r3, #21]
 80104b4:	f083 0301 	eor.w	r3, r3, #1
 80104b8:	b2db      	uxtb	r3, r3
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d02b      	beq.n	8010516 <_ZN5BTHID3RunEv+0x96>
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80104c4:	f083 0301 	eor.w	r3, r3, #1
 80104c8:	b2db      	uxtb	r3, r3
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d023      	beq.n	8010516 <_ZN5BTHID3RunEv+0x96>
                                pBtd->l2capConnectionClaimed = true;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	689b      	ldr	r3, [r3, #8]
 80104d2:	2201      	movs	r2, #1
 80104d4:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	2201      	movs	r2, #1
 80104da:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Connection Request"), 0x80);
#endif
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	689b      	ldr	r3, [r3, #8]
 80104e2:	8b5a      	ldrh	r2, [r3, #26]
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2200      	movs	r2, #0
 80104ec:	611a      	str	r2, [r3, #16]
                                identifier = 0;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2200      	movs	r2, #0
 80104f2:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, control_dcid, HID_CTRL_PSM);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6898      	ldr	r0, [r3, #8]
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	8999      	ldrh	r1, [r3, #12]
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	7d1a      	ldrb	r2, [r3, #20]
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	336b      	adds	r3, #107	; 0x6b
 8010504:	2411      	movs	r4, #17
 8010506:	9400      	str	r4, [sp, #0]
 8010508:	f7fe f9e9 	bl	800e8de <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_CONTROL_CONNECT_REQUEST;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	2202      	movs	r2, #2
 8010510:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                                identifier++;
                                delay(1);
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
                        }
                        break;
 8010514:	e041      	b.n	801059a <_ZN5BTHID3RunEv+0x11a>
                        } else if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST)) {
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	691b      	ldr	r3, [r3, #16]
 801051a:	f003 0301 	and.w	r3, r3, #1
 801051e:	2b00      	cmp	r3, #0
 8010520:	d03b      	beq.n	801059a <_ZN5BTHID3RunEv+0x11a>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, PENDING);
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	6898      	ldr	r0, [r3, #8]
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	8999      	ldrh	r1, [r3, #12]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	7d1a      	ldrb	r2, [r3, #20]
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	3316      	adds	r3, #22
 8010538:	2501      	movs	r5, #1
 801053a:	9501      	str	r5, [sp, #4]
 801053c:	9300      	str	r3, [sp, #0]
 801053e:	4623      	mov	r3, r4
 8010540:	f7fe fa0b 	bl	800e95a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8010544:	2001      	movs	r0, #1
 8010546:	f7f1 fcd1 	bl	8001eec <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, SUCCESSFUL);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6898      	ldr	r0, [r3, #8]
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	8999      	ldrh	r1, [r3, #12]
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	7d1a      	ldrb	r2, [r3, #20]
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	3316      	adds	r3, #22
 8010560:	2500      	movs	r5, #0
 8010562:	9501      	str	r5, [sp, #4]
 8010564:	9300      	str	r3, [sp, #0]
 8010566:	4623      	mov	r3, r4
 8010568:	f7fe f9f7 	bl	800e95a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	7d1b      	ldrb	r3, [r3, #20]
 8010570:	3301      	adds	r3, #1
 8010572:	b2da      	uxtb	r2, r3
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	751a      	strb	r2, [r3, #20]
                                delay(1);
 8010578:	2001      	movs	r0, #1
 801057a:	f7f1 fcb7 	bl	8001eec <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	6898      	ldr	r0, [r3, #8]
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	8999      	ldrh	r1, [r3, #12]
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	7d1a      	ldrb	r2, [r3, #20]
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	3316      	adds	r3, #22
 801058e:	f7fe fa31 	bl	800e9f4 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	2204      	movs	r2, #4
 8010596:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        break;
 801059a:	bf00      	nop
        }
}
 801059c:	bf00      	nop
 801059e:	3708      	adds	r7, #8
 80105a0:	46bd      	mov	sp, r7
 80105a2:	bdb0      	pop	{r4, r5, r7, pc}

080105a4 <_ZN5BTHID11SDP_CommandEPhh>:

void BTHID::SDP_Command(uint8_t* data, uint8_t nbytes) { // See page 223 in the Bluetooth specs
 80105a4:	b590      	push	{r4, r7, lr}
 80105a6:	b087      	sub	sp, #28
 80105a8:	af02      	add	r7, sp, #8
 80105aa:	60f8      	str	r0, [r7, #12]
 80105ac:	60b9      	str	r1, [r7, #8]
 80105ae:	4613      	mov	r3, r2
 80105b0:	71fb      	strb	r3, [r7, #7]
        pBtd->L2CAP_Command(hci_handle, data, nbytes, sdp_scid[0], sdp_scid[1]);
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	6898      	ldr	r0, [r3, #8]
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	8999      	ldrh	r1, [r3, #12]
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	7edb      	ldrb	r3, [r3, #27]
 80105be:	68fa      	ldr	r2, [r7, #12]
 80105c0:	7f12      	ldrb	r2, [r2, #28]
 80105c2:	79fc      	ldrb	r4, [r7, #7]
 80105c4:	9201      	str	r2, [sp, #4]
 80105c6:	9300      	str	r3, [sp, #0]
 80105c8:	4623      	mov	r3, r4
 80105ca:	68ba      	ldr	r2, [r7, #8]
 80105cc:	f7fe f8f8 	bl	800e7c0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 80105d0:	bf00      	nop
 80105d2:	3714      	adds	r7, #20
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd90      	pop	{r4, r7, pc}

080105d8 <_ZN5BTHID19serviceNotSupportedEhh>:

void BTHID::serviceNotSupported(uint8_t transactionIDHigh, uint8_t transactionIDLow) { // See page 235 in the Bluetooth specs
 80105d8:	b580      	push	{r7, lr}
 80105da:	b082      	sub	sp, #8
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
 80105e0:	460b      	mov	r3, r1
 80105e2:	70fb      	strb	r3, [r7, #3]
 80105e4:	4613      	mov	r3, r2
 80105e6:	70bb      	strb	r3, [r7, #2]
        l2capoutbuf[0] = SDP_SERVICE_SEARCH_ATTRIBUTE_RESPONSE;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2207      	movs	r2, #7
 80105ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        l2capoutbuf[1] = transactionIDHigh;
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	78fa      	ldrb	r2, [r7, #3]
 80105f4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        l2capoutbuf[2] = transactionIDLow;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	78ba      	ldrb	r2, [r7, #2]
 80105fc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        l2capoutbuf[3] = 0x00; // MSB Parameter Length
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2200      	movs	r2, #0
 8010604:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	2205      	movs	r2, #5
 801060c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        l2capoutbuf[5] = 0x00; // MSB AttributeListsByteCount
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2200      	movs	r2, #0
 8010614:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        l2capoutbuf[6] = 0x02; // LSB AttributeListsByteCount = 2
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	2202      	movs	r2, #2
 801061c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

        /* Attribute ID/Value Sequence: */
        l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2235      	movs	r2, #53	; 0x35
 8010624:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        l2capoutbuf[8] = 0x00; // Length = 0
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2200      	movs	r2, #0
 801062c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        l2capoutbuf[9] = 0x00; // No continuation state
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2200      	movs	r2, #0
 8010634:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        SDP_Command(l2capoutbuf, 10);
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	3328      	adds	r3, #40	; 0x28
 801063c:	220a      	movs	r2, #10
 801063e:	4619      	mov	r1, r3
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	f7ff ffaf 	bl	80105a4 <_ZN5BTHID11SDP_CommandEPhh>
}
 8010646:	bf00      	nop
 8010648:	3708      	adds	r7, #8
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}

0801064e <_ZN5BTHID11setProtocolEv>:

/************************************************************/
/*                    HID Commands                          */

/************************************************************/
void BTHID::setProtocol() {
 801064e:	b590      	push	{r4, r7, lr}
 8010650:	b087      	sub	sp, #28
 8010652:	af02      	add	r7, sp, #8
 8010654:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nSet protocol mode: "), 0x80);
        D_PrintHex<uint8_t > (protocolMode, 0x80);
#endif
        if (protocolMode != USB_HID_BOOT_PROTOCOL && protocolMode != HID_RPT_PROTOCOL) {
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801065c:	2b00      	cmp	r3, #0
 801065e:	d008      	beq.n	8010672 <_ZN5BTHID11setProtocolEv+0x24>
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8010666:	2b01      	cmp	r3, #1
 8010668:	d003      	beq.n	8010672 <_ZN5BTHID11setProtocolEv+0x24>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nNot a valid protocol mode. Using Boot protocol instead."), 0x80);
#endif
                protocolMode = USB_HID_BOOT_PROTOCOL; // Use Boot Protocol by default
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	2200      	movs	r2, #0
 801066e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        }
        uint8_t command = 0x70 | protocolMode; // Set Protocol, see Bluetooth HID specs page 33
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8010678:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 801067c:	b2db      	uxtb	r3, r3
 801067e:	73fb      	strb	r3, [r7, #15]
        pBtd->L2CAP_Command(hci_handle, &command, 1, control_scid[0], control_scid[1]);
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	6898      	ldr	r0, [r3, #8]
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	8999      	ldrh	r1, [r3, #12]
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	7d9b      	ldrb	r3, [r3, #22]
 801068c:	687a      	ldr	r2, [r7, #4]
 801068e:	7dd2      	ldrb	r2, [r2, #23]
 8010690:	f107 040f 	add.w	r4, r7, #15
 8010694:	9201      	str	r2, [sp, #4]
 8010696:	9300      	str	r3, [sp, #0]
 8010698:	2301      	movs	r3, #1
 801069a:	4622      	mov	r2, r4
 801069c:	f7fe f890 	bl	800e7c0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 80106a0:	bf00      	nop
 80106a2:	3714      	adds	r7, #20
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bd90      	pop	{r4, r7, pc}

080106a8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>:
};

// To enable serial debugging see "settings.h"
//#define PRINTREPORT // Uncomment to print the report send by the PS4 Controller

bool PS4Parser::checkDpad(ButtonEnum b) {
 80106a8:	b480      	push	{r7}
 80106aa:	b083      	sub	sp, #12
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
 80106b0:	460b      	mov	r3, r1
 80106b2:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 80106b4:	78fb      	ldrb	r3, [r7, #3]
 80106b6:	2b03      	cmp	r3, #3
 80106b8:	d86e      	bhi.n	8010798 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf0>
 80106ba:	a201      	add	r2, pc, #4	; (adr r2, 80106c0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x18>)
 80106bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106c0:	080106d1 	.word	0x080106d1
 80106c4:	08010703 	.word	0x08010703
 80106c8:	08010735 	.word	0x08010735
 80106cc:	08010767 	.word	0x08010767
                case UP:
                        return ps4Data.btn.dpad == DPAD_LEFT_UP || ps4Data.btn.dpad == DPAD_UP || ps4Data.btn.dpad == DPAD_UP_RIGHT;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	7a1b      	ldrb	r3, [r3, #8]
 80106d4:	f003 030f 	and.w	r3, r3, #15
 80106d8:	b2db      	uxtb	r3, r3
 80106da:	2b07      	cmp	r3, #7
 80106dc:	d00d      	beq.n	80106fa <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	7a1b      	ldrb	r3, [r3, #8]
 80106e2:	f003 030f 	and.w	r3, r3, #15
 80106e6:	b2db      	uxtb	r3, r3
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d006      	beq.n	80106fa <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	7a1b      	ldrb	r3, [r3, #8]
 80106f0:	f003 030f 	and.w	r3, r3, #15
 80106f4:	b2db      	uxtb	r3, r3
 80106f6:	2b01      	cmp	r3, #1
 80106f8:	d101      	bne.n	80106fe <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x56>
 80106fa:	2301      	movs	r3, #1
 80106fc:	e04d      	b.n	801079a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 80106fe:	2300      	movs	r3, #0
 8010700:	e04b      	b.n	801079a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return ps4Data.btn.dpad == DPAD_UP_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT_DOWN;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	7a1b      	ldrb	r3, [r3, #8]
 8010706:	f003 030f 	and.w	r3, r3, #15
 801070a:	b2db      	uxtb	r3, r3
 801070c:	2b01      	cmp	r3, #1
 801070e:	d00d      	beq.n	801072c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	7a1b      	ldrb	r3, [r3, #8]
 8010714:	f003 030f 	and.w	r3, r3, #15
 8010718:	b2db      	uxtb	r3, r3
 801071a:	2b02      	cmp	r3, #2
 801071c:	d006      	beq.n	801072c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	7a1b      	ldrb	r3, [r3, #8]
 8010722:	f003 030f 	and.w	r3, r3, #15
 8010726:	b2db      	uxtb	r3, r3
 8010728:	2b03      	cmp	r3, #3
 801072a:	d101      	bne.n	8010730 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x88>
 801072c:	2301      	movs	r3, #1
 801072e:	e034      	b.n	801079a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8010730:	2300      	movs	r3, #0
 8010732:	e032      	b.n	801079a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return ps4Data.btn.dpad == DPAD_RIGHT_DOWN || ps4Data.btn.dpad == DPAD_DOWN || ps4Data.btn.dpad == DPAD_DOWN_LEFT;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	7a1b      	ldrb	r3, [r3, #8]
 8010738:	f003 030f 	and.w	r3, r3, #15
 801073c:	b2db      	uxtb	r3, r3
 801073e:	2b03      	cmp	r3, #3
 8010740:	d00d      	beq.n	801075e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	7a1b      	ldrb	r3, [r3, #8]
 8010746:	f003 030f 	and.w	r3, r3, #15
 801074a:	b2db      	uxtb	r3, r3
 801074c:	2b04      	cmp	r3, #4
 801074e:	d006      	beq.n	801075e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	7a1b      	ldrb	r3, [r3, #8]
 8010754:	f003 030f 	and.w	r3, r3, #15
 8010758:	b2db      	uxtb	r3, r3
 801075a:	2b05      	cmp	r3, #5
 801075c:	d101      	bne.n	8010762 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xba>
 801075e:	2301      	movs	r3, #1
 8010760:	e01b      	b.n	801079a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8010762:	2300      	movs	r3, #0
 8010764:	e019      	b.n	801079a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return ps4Data.btn.dpad == DPAD_DOWN_LEFT || ps4Data.btn.dpad == DPAD_LEFT || ps4Data.btn.dpad == DPAD_LEFT_UP;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	7a1b      	ldrb	r3, [r3, #8]
 801076a:	f003 030f 	and.w	r3, r3, #15
 801076e:	b2db      	uxtb	r3, r3
 8010770:	2b05      	cmp	r3, #5
 8010772:	d00d      	beq.n	8010790 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	7a1b      	ldrb	r3, [r3, #8]
 8010778:	f003 030f 	and.w	r3, r3, #15
 801077c:	b2db      	uxtb	r3, r3
 801077e:	2b06      	cmp	r3, #6
 8010780:	d006      	beq.n	8010790 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	7a1b      	ldrb	r3, [r3, #8]
 8010786:	f003 030f 	and.w	r3, r3, #15
 801078a:	b2db      	uxtb	r3, r3
 801078c:	2b07      	cmp	r3, #7
 801078e:	d101      	bne.n	8010794 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xec>
 8010790:	2301      	movs	r3, #1
 8010792:	e002      	b.n	801079a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8010794:	2300      	movs	r3, #0
 8010796:	e000      	b.n	801079a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 8010798:	2300      	movs	r3, #0
        }
}
 801079a:	4618      	mov	r0, r3
 801079c:	370c      	adds	r7, #12
 801079e:	46bd      	mov	sp, r7
 80107a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a4:	4770      	bx	lr
 80107a6:	bf00      	nop

080107a8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>:

bool PS4Parser::getButtonPress(ButtonEnum b) {
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b082      	sub	sp, #8
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
 80107b0:	460b      	mov	r3, r1
 80107b2:	70fb      	strb	r3, [r7, #3]
        if (b <= LEFT) // Dpad
 80107b4:	78fb      	ldrb	r3, [r7, #3]
 80107b6:	2b03      	cmp	r3, #3
 80107b8:	d806      	bhi.n	80107c8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x20>
                return checkDpad(b);
 80107ba:	78fb      	ldrb	r3, [r7, #3]
 80107bc:	4619      	mov	r1, r3
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	f7ff ff72 	bl	80106a8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 80107c4:	4603      	mov	r3, r0
 80107c6:	e011      	b.n	80107ec <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x44>
        else
                return ps4Data.btn.val & (1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]));
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	689b      	ldr	r3, [r3, #8]
 80107cc:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80107d0:	4619      	mov	r1, r3
 80107d2:	78fb      	ldrb	r3, [r7, #3]
 80107d4:	4a07      	ldr	r2, [pc, #28]	; (80107f4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x4c>)
 80107d6:	4413      	add	r3, r2
 80107d8:	781b      	ldrb	r3, [r3, #0]
 80107da:	fa21 f303 	lsr.w	r3, r1, r3
 80107de:	f003 0301 	and.w	r3, r3, #1
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	bf14      	ite	ne
 80107e6:	2301      	movne	r3, #1
 80107e8:	2300      	moveq	r3, #0
 80107ea:	b2db      	uxtb	r3, r3
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	3708      	adds	r7, #8
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}
 80107f4:	08012a34 	.word	0x08012a34

080107f8 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>:

bool PS4Parser::getButtonClick(ButtonEnum b) {
 80107f8:	b480      	push	{r7}
 80107fa:	b085      	sub	sp, #20
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
 8010800:	460b      	mov	r3, r1
 8010802:	70fb      	strb	r3, [r7, #3]
        uint32_t mask = 1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]);
 8010804:	78fb      	ldrb	r3, [r7, #3]
 8010806:	4a1b      	ldr	r2, [pc, #108]	; (8010874 <_ZN9PS4Parser14getButtonClickE10ButtonEnum+0x7c>)
 8010808:	4413      	add	r3, r2
 801080a:	781b      	ldrb	r3, [r3, #0]
 801080c:	461a      	mov	r2, r3
 801080e:	2301      	movs	r3, #1
 8010810:	4093      	lsls	r3, r2
 8010812:	60fb      	str	r3, [r7, #12]
        bool click = buttonClickState.val & mask;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 801081a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801081e:	021b      	lsls	r3, r3, #8
 8010820:	4313      	orrs	r3, r2
 8010822:	461a      	mov	r2, r3
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	4013      	ands	r3, r2
 8010828:	2b00      	cmp	r3, #0
 801082a:	bf14      	ite	ne
 801082c:	2301      	movne	r3, #1
 801082e:	2300      	moveq	r3, #0
 8010830:	72fb      	strb	r3, [r7, #11]
        buttonClickState.val &= ~mask; // Clear "click" event
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8010838:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801083c:	021b      	lsls	r3, r3, #8
 801083e:	4313      	orrs	r3, r2
 8010840:	461a      	mov	r2, r3
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	43db      	mvns	r3, r3
 8010846:	4013      	ands	r3, r2
 8010848:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	b2d1      	uxtb	r1, r2
 8010850:	2000      	movs	r0, #0
 8010852:	4301      	orrs	r1, r0
 8010854:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 8010858:	0a12      	lsrs	r2, r2, #8
 801085a:	b292      	uxth	r2, r2
 801085c:	2100      	movs	r1, #0
 801085e:	430a      	orrs	r2, r1
 8010860:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        return click;
 8010864:	7afb      	ldrb	r3, [r7, #11]
}
 8010866:	4618      	mov	r0, r3
 8010868:	3714      	adds	r7, #20
 801086a:	46bd      	mov	sp, r7
 801086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010870:	4770      	bx	lr
 8010872:	bf00      	nop
 8010874:	08012a34 	.word	0x08012a34

08010878 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>:

uint8_t PS4Parser::getAnalogButton(ButtonEnum b) {
 8010878:	b480      	push	{r7}
 801087a:	b083      	sub	sp, #12
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
 8010880:	460b      	mov	r3, r1
 8010882:	70fb      	strb	r3, [r7, #3]
        if (b == L2) // These are the only analog buttons on the controller
 8010884:	78fb      	ldrb	r3, [r7, #3]
 8010886:	2b08      	cmp	r3, #8
 8010888:	d102      	bne.n	8010890 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x18>
                return ps4Data.trigger[0];
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	7adb      	ldrb	r3, [r3, #11]
 801088e:	e006      	b.n	801089e <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        else if (b == R2)
 8010890:	78fb      	ldrb	r3, [r7, #3]
 8010892:	2b09      	cmp	r3, #9
 8010894:	d102      	bne.n	801089c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x24>
                return ps4Data.trigger[1];
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	7b1b      	ldrb	r3, [r3, #12]
 801089a:	e000      	b.n	801089e <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        return 0;
 801089c:	2300      	movs	r3, #0
}
 801089e:	4618      	mov	r0, r3
 80108a0:	370c      	adds	r7, #12
 80108a2:	46bd      	mov	sp, r7
 80108a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a8:	4770      	bx	lr

080108aa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>:

uint8_t PS4Parser::getAnalogHat(AnalogHatEnum a) {
 80108aa:	b480      	push	{r7}
 80108ac:	b083      	sub	sp, #12
 80108ae:	af00      	add	r7, sp, #0
 80108b0:	6078      	str	r0, [r7, #4]
 80108b2:	460b      	mov	r3, r1
 80108b4:	70fb      	strb	r3, [r7, #3]
        return ps4Data.hatValue[(uint8_t)a];
 80108b6:	78fb      	ldrb	r3, [r7, #3]
 80108b8:	687a      	ldr	r2, [r7, #4]
 80108ba:	4413      	add	r3, r2
 80108bc:	791b      	ldrb	r3, [r3, #4]
}
 80108be:	4618      	mov	r0, r3
 80108c0:	370c      	adds	r7, #12
 80108c2:	46bd      	mov	sp, r7
 80108c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c8:	4770      	bx	lr

080108ca <_ZN9PS4Parser5ParseEhPh>:

void PS4Parser::Parse(uint8_t len, uint8_t *buf) {
 80108ca:	b580      	push	{r7, lr}
 80108cc:	b086      	sub	sp, #24
 80108ce:	af00      	add	r7, sp, #0
 80108d0:	60f8      	str	r0, [r7, #12]
 80108d2:	460b      	mov	r3, r1
 80108d4:	607a      	str	r2, [r7, #4]
 80108d6:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 80108d8:	7afb      	ldrb	r3, [r7, #11]
 80108da:	2b01      	cmp	r3, #1
 80108dc:	f240 80a6 	bls.w	8010a2c <_ZN9PS4Parser5ParseEhPh+0x162>
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	f000 80a2 	beq.w	8010a2c <_ZN9PS4Parser5ParseEhPh+0x162>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	781b      	ldrb	r3, [r3, #0]
 80108ec:	2b01      	cmp	r3, #1
 80108ee:	d10e      	bne.n	801090e <_ZN9PS4Parser5ParseEhPh+0x44>
                        memcpy(&ps4Data, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(ps4Data)));
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	1d18      	adds	r0, r3, #4
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	1c59      	adds	r1, r3, #1
 80108f8:	7afb      	ldrb	r3, [r7, #11]
 80108fa:	3b01      	subs	r3, #1
 80108fc:	b2db      	uxtb	r3, r3
 80108fe:	2b3c      	cmp	r3, #60	; 0x3c
 8010900:	bf28      	it	cs
 8010902:	233c      	movcs	r3, #60	; 0x3c
 8010904:	b2db      	uxtb	r3, r3
 8010906:	461a      	mov	r2, r3
 8010908:	f001 fe56 	bl	80125b8 <memcpy>
 801090c:	e016      	b.n	801093c <_ZN9PS4Parser5ParseEhPh+0x72>
                else if (buf[0] == 0x11) { // This report is send via Bluetooth, it has an offset of 2 compared to the USB data
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	781b      	ldrb	r3, [r3, #0]
 8010912:	2b11      	cmp	r3, #17
 8010914:	f040 8098 	bne.w	8010a48 <_ZN9PS4Parser5ParseEhPh+0x17e>
                        if (len < 4) {
 8010918:	7afb      	ldrb	r3, [r7, #11]
 801091a:	2b03      	cmp	r3, #3
 801091c:	f240 8096 	bls.w	8010a4c <_ZN9PS4Parser5ParseEhPh+0x182>
                                Notify(PSTR("\r\nReport is too short: "), 0x80);
                                D_PrintHex<uint8_t > (len, 0x80);
#endif
                                return;
                        }
                        memcpy(&ps4Data, buf + 3, min((uint8_t)(len - 3), MFK_CASTUINT8T sizeof(ps4Data)));
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	1d18      	adds	r0, r3, #4
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	1cd9      	adds	r1, r3, #3
 8010928:	7afb      	ldrb	r3, [r7, #11]
 801092a:	3b03      	subs	r3, #3
 801092c:	b2db      	uxtb	r3, r3
 801092e:	2b3c      	cmp	r3, #60	; 0x3c
 8010930:	bf28      	it	cs
 8010932:	233c      	movcs	r3, #60	; 0x3c
 8010934:	b2db      	uxtb	r3, r3
 8010936:	461a      	mov	r2, r3
 8010938:	f001 fe3e 	bl	80125b8 <memcpy>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
#endif
                        return;
                }

                if (ps4Data.btn.val != oldButtonState.val) { // Check if anything has changed
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	689b      	ldr	r3, [r3, #8]
 8010940:	f3c3 0217 	ubfx	r2, r3, #0, #24
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010948:	f3c3 0317 	ubfx	r3, r3, #0, #24
 801094c:	429a      	cmp	r2, r3
 801094e:	d06d      	beq.n	8010a2c <_ZN9PS4Parser5ParseEhPh+0x162>
                        buttonClickState.val = ps4Data.btn.val & ~oldButtonState.val; // Update click state variable
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	689b      	ldr	r3, [r3, #8]
 8010954:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8010958:	461a      	mov	r2, r3
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801095e:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8010962:	43db      	mvns	r3, r3
 8010964:	4013      	ands	r3, r2
 8010966:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	b2d1      	uxtb	r1, r2
 801096e:	2000      	movs	r0, #0
 8010970:	4301      	orrs	r1, r0
 8010972:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 8010976:	0a12      	lsrs	r2, r2, #8
 8010978:	b292      	uxth	r2, r2
 801097a:	2100      	movs	r1, #0
 801097c:	430a      	orrs	r2, r1
 801097e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                        oldButtonState.val = ps4Data.btn.val;
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	689b      	ldr	r3, [r3, #8]
 8010986:	f3c3 0117 	ubfx	r1, r3, #0, #24
 801098a:	68fa      	ldr	r2, [r7, #12]
 801098c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801098e:	f361 0317 	bfi	r3, r1, #0, #24
 8010992:	6413      	str	r3, [r2, #64]	; 0x40

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 8010994:	2300      	movs	r3, #0
 8010996:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 8010998:	2100      	movs	r1, #0
 801099a:	68f8      	ldr	r0, [r7, #12]
 801099c:	f7ff fe84 	bl	80106a8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 80109a0:	4603      	mov	r3, r0
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d003      	beq.n	80109ae <_ZN9PS4Parser5ParseEhPh+0xe4>
                                newDpad |= 1 << UP;
 80109a6:	7dfb      	ldrb	r3, [r7, #23]
 80109a8:	f043 0301 	orr.w	r3, r3, #1
 80109ac:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 80109ae:	2101      	movs	r1, #1
 80109b0:	68f8      	ldr	r0, [r7, #12]
 80109b2:	f7ff fe79 	bl	80106a8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 80109b6:	4603      	mov	r3, r0
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d003      	beq.n	80109c4 <_ZN9PS4Parser5ParseEhPh+0xfa>
                                newDpad |= 1 << RIGHT;
 80109bc:	7dfb      	ldrb	r3, [r7, #23]
 80109be:	f043 0302 	orr.w	r3, r3, #2
 80109c2:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 80109c4:	2102      	movs	r1, #2
 80109c6:	68f8      	ldr	r0, [r7, #12]
 80109c8:	f7ff fe6e 	bl	80106a8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 80109cc:	4603      	mov	r3, r0
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d003      	beq.n	80109da <_ZN9PS4Parser5ParseEhPh+0x110>
                                newDpad |= 1 << DOWN;
 80109d2:	7dfb      	ldrb	r3, [r7, #23]
 80109d4:	f043 0304 	orr.w	r3, r3, #4
 80109d8:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 80109da:	2103      	movs	r1, #3
 80109dc:	68f8      	ldr	r0, [r7, #12]
 80109de:	f7ff fe63 	bl	80106a8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 80109e2:	4603      	mov	r3, r0
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d003      	beq.n	80109f0 <_ZN9PS4Parser5ParseEhPh+0x126>
                                newDpad |= 1 << LEFT;
 80109e8:	7dfb      	ldrb	r3, [r7, #23]
 80109ea:	f043 0308 	orr.w	r3, r3, #8
 80109ee:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80109f6:	7dfa      	ldrb	r2, [r7, #23]
 80109f8:	429a      	cmp	r2, r3
 80109fa:	d017      	beq.n	8010a2c <_ZN9PS4Parser5ParseEhPh+0x162>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8010a02:	b25b      	sxtb	r3, r3
 8010a04:	43db      	mvns	r3, r3
 8010a06:	b25a      	sxtb	r2, r3
 8010a08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010a0c:	4013      	ands	r3, r2
 8010a0e:	b25b      	sxtb	r3, r3
 8010a10:	f003 030f 	and.w	r3, r3, #15
 8010a14:	b2d9      	uxtb	r1, r3
 8010a16:	68fa      	ldr	r2, [r7, #12]
 8010a18:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8010a1c:	f361 0303 	bfi	r3, r1, #0, #4
 8010a20:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
                                oldDpad = newDpad;
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	7dfa      	ldrb	r2, [r7, #23]
 8010a28:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                        }
                }
        }

        if (ps4Output.reportChanged)
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d00b      	beq.n	8010a4e <_ZN9PS4Parser5ParseEhPh+0x184>
                sendOutputReport(&ps4Output); // Send output report
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	68fa      	ldr	r2, [r7, #12]
 8010a3e:	3246      	adds	r2, #70	; 0x46
 8010a40:	4611      	mov	r1, r2
 8010a42:	68f8      	ldr	r0, [r7, #12]
 8010a44:	4798      	blx	r3
 8010a46:	e002      	b.n	8010a4e <_ZN9PS4Parser5ParseEhPh+0x184>
                        return;
 8010a48:	bf00      	nop
 8010a4a:	e000      	b.n	8010a4e <_ZN9PS4Parser5ParseEhPh+0x184>
                                return;
 8010a4c:	bf00      	nop
}
 8010a4e:	3718      	adds	r7, #24
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}

08010a54 <_ZN9PS4Parser5ResetEv>:

void PS4Parser::Reset() {
 8010a54:	b480      	push	{r7}
 8010a56:	b085      	sub	sp, #20
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	73fb      	strb	r3, [r7, #15]
 8010a60:	7bfb      	ldrb	r3, [r7, #15]
 8010a62:	2b03      	cmp	r3, #3
 8010a64:	d808      	bhi.n	8010a78 <_ZN9PS4Parser5ResetEv+0x24>
                ps4Data.hatValue[i] = 127; // Center value
 8010a66:	7bfb      	ldrb	r3, [r7, #15]
 8010a68:	687a      	ldr	r2, [r7, #4]
 8010a6a:	4413      	add	r3, r2
 8010a6c:	227f      	movs	r2, #127	; 0x7f
 8010a6e:	711a      	strb	r2, [r3, #4]
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 8010a70:	7bfb      	ldrb	r3, [r7, #15]
 8010a72:	3301      	adds	r3, #1
 8010a74:	73fb      	strb	r3, [r7, #15]
 8010a76:	e7f3      	b.n	8010a60 <_ZN9PS4Parser5ResetEv+0xc>
        ps4Data.btn.val = 0;
 8010a78:	687a      	ldr	r2, [r7, #4]
 8010a7a:	6893      	ldr	r3, [r2, #8]
 8010a7c:	f36f 0317 	bfc	r3, #0, #24
 8010a80:	6093      	str	r3, [r2, #8]
        oldButtonState.val = 0;
 8010a82:	687a      	ldr	r2, [r7, #4]
 8010a84:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010a86:	f36f 0317 	bfc	r3, #0, #24
 8010a8a:	6413      	str	r3, [r2, #64]	; 0x40
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	73fb      	strb	r3, [r7, #15]
 8010a90:	7bfb      	ldrb	r3, [r7, #15]
 8010a92:	2b01      	cmp	r3, #1
 8010a94:	d808      	bhi.n	8010aa8 <_ZN9PS4Parser5ResetEv+0x54>
                ps4Data.trigger[i] = 0;
 8010a96:	7bfb      	ldrb	r3, [r7, #15]
 8010a98:	687a      	ldr	r2, [r7, #4]
 8010a9a:	4413      	add	r3, r2
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	72da      	strb	r2, [r3, #11]
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 8010aa0:	7bfb      	ldrb	r3, [r7, #15]
 8010aa2:	3301      	adds	r3, #1
 8010aa4:	73fb      	strb	r3, [r7, #15]
 8010aa6:	e7f3      	b.n	8010a90 <_ZN9PS4Parser5ResetEv+0x3c>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	73fb      	strb	r3, [r7, #15]
 8010aac:	7bfb      	ldrb	r3, [r7, #15]
 8010aae:	2b02      	cmp	r3, #2
 8010ab0:	d81b      	bhi.n	8010aea <_ZN9PS4Parser5ResetEv+0x96>
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	73bb      	strb	r3, [r7, #14]
 8010ab6:	7bbb      	ldrb	r3, [r7, #14]
 8010ab8:	2b01      	cmp	r3, #1
 8010aba:	d812      	bhi.n	8010ae2 <_ZN9PS4Parser5ResetEv+0x8e>
                        ps4Data.xy[i].finger[j].touching = 1; // The bit is cleared if the finger is touching the touchpad
 8010abc:	7bfa      	ldrb	r2, [r7, #15]
 8010abe:	7bbb      	ldrb	r3, [r7, #14]
 8010ac0:	6879      	ldr	r1, [r7, #4]
 8010ac2:	0098      	lsls	r0, r3, #2
 8010ac4:	4613      	mov	r3, r2
 8010ac6:	00db      	lsls	r3, r3, #3
 8010ac8:	4413      	add	r3, r2
 8010aca:	4403      	add	r3, r0
 8010acc:	440b      	add	r3, r1
 8010ace:	f103 0220 	add.w	r2, r3, #32
 8010ad2:	7993      	ldrb	r3, [r2, #6]
 8010ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ad8:	7193      	strb	r3, [r2, #6]
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 8010ada:	7bbb      	ldrb	r3, [r7, #14]
 8010adc:	3301      	adds	r3, #1
 8010ade:	73bb      	strb	r3, [r7, #14]
 8010ae0:	e7e9      	b.n	8010ab6 <_ZN9PS4Parser5ResetEv+0x62>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 8010ae2:	7bfb      	ldrb	r3, [r7, #15]
 8010ae4:	3301      	adds	r3, #1
 8010ae6:	73fb      	strb	r3, [r7, #15]
 8010ae8:	e7e0      	b.n	8010aac <_ZN9PS4Parser5ResetEv+0x58>
        }

        ps4Data.btn.dpad = DPAD_OFF;
 8010aea:	687a      	ldr	r2, [r7, #4]
 8010aec:	7a13      	ldrb	r3, [r2, #8]
 8010aee:	2108      	movs	r1, #8
 8010af0:	f361 0303 	bfi	r3, r1, #0, #4
 8010af4:	7213      	strb	r3, [r2, #8]
        oldButtonState.dpad = DPAD_OFF;
 8010af6:	687a      	ldr	r2, [r7, #4]
 8010af8:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 8010afc:	2108      	movs	r1, #8
 8010afe:	f361 0303 	bfi	r3, r1, #0, #4
 8010b02:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
        buttonClickState.dpad = 0;
 8010b06:	687a      	ldr	r2, [r7, #4]
 8010b08:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8010b0c:	f36f 0303 	bfc	r3, #0, #4
 8010b10:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
        oldDpad = 0;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	2200      	movs	r2, #0
 8010b18:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

        ps4Output.bigRumble = ps4Output.smallRumble = 0;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2200      	movs	r2, #0
 8010b20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        ps4Output.r = ps4Output.g = ps4Output.b = 0;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2200      	movs	r2, #0
 8010b34:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        ps4Output.flashOn = ps4Output.flashOff = 0;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	2200      	movs	r2, #0
 8010b54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        ps4Output.reportChanged = false;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	2200      	movs	r2, #0
 8010b68:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
};
 8010b6c:	bf00      	nop
 8010b6e:	3714      	adds	r7, #20
 8010b70:	46bd      	mov	sp, r7
 8010b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b76:	4770      	bx	lr

08010b78 <_ZN2P95IsSetEv>:
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	af00      	add	r7, sp, #0
 8010b7c:	2180      	movs	r1, #128	; 0x80
 8010b7e:	4803      	ldr	r0, [pc, #12]	; (8010b8c <_ZN2P95IsSetEv+0x14>)
 8010b80:	f7f1 fc4e 	bl	8002420 <HAL_GPIO_ReadPin>
 8010b84:	4603      	mov	r3, r0
 8010b86:	4618      	mov	r0, r3
 8010b88:	bd80      	pop	{r7, pc}
 8010b8a:	bf00      	nop
 8010b8c:	40020800 	.word	0x40020800

08010b90 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b082      	sub	sp, #8
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
 8010b98:	6878      	ldr	r0, [r7, #4]
 8010b9a:	f001 f9bb 	bl	8011f14 <_ZN8MAX3421eI3P102P9EC1Ev>
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f001 f9d3 	bl	8011f4c <_ZN15AddressPoolImplILh16EEC1Ev>
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	2200      	movs	r2, #0
 8010baa:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 8010bae:	4b05      	ldr	r3, [pc, #20]	; (8010bc4 <_ZN3USBC1Ev+0x34>)
 8010bb0:	2211      	movs	r2, #17
 8010bb2:	701a      	strb	r2, [r3, #0]
        init();
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f000 f807 	bl	8010bc8 <_ZN3USB4initEv>
}
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	3708      	adds	r7, #8
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}
 8010bc4:	20004f89 	.word	0x20004f89

08010bc8 <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 8010bc8:	b480      	push	{r7}
 8010bca:	b083      	sub	sp, #12
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
        //devConfigIndex = 0;
        bmHubPre = 0;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 8010bd8:	bf00      	nop
 8010bda:	370c      	adds	r7, #12
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be2:	4770      	bx	lr

08010be4 <_ZN3USB14getEpInfoEntryEhh>:

void USB::setUsbTaskState(uint8_t state) {
        usb_task_state = state;
}

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b086      	sub	sp, #24
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
 8010bec:	460b      	mov	r3, r1
 8010bee:	70fb      	strb	r3, [r7, #3]
 8010bf0:	4613      	mov	r3, r2
 8010bf2:	70bb      	strb	r3, [r7, #2]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	78fa      	ldrb	r2, [r7, #3]
 8010bf8:	4611      	mov	r1, r2
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f001 f9e0 	bl	8011fc0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8010c00:	60f8      	str	r0, [r7, #12]

        if(!p || !p->epinfo)
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d003      	beq.n	8010c10 <_ZN3USB14getEpInfoEntryEhh+0x2c>
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d101      	bne.n	8010c14 <_ZN3USB14getEpInfoEntryEhh+0x30>
                return NULL;
 8010c10:	2300      	movs	r3, #0
 8010c12:	e018      	b.n	8010c46 <_ZN3USB14getEpInfoEntryEhh+0x62>

        EpInfo *pep = p->epinfo;
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	617b      	str	r3, [r7, #20]

        for(uint8_t i = 0; i < p->epcount; i++) {
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	74fb      	strb	r3, [r7, #19]
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	795b      	ldrb	r3, [r3, #5]
 8010c22:	7cfa      	ldrb	r2, [r7, #19]
 8010c24:	429a      	cmp	r2, r3
 8010c26:	d20d      	bcs.n	8010c44 <_ZN3USB14getEpInfoEntryEhh+0x60>
                if((pep)->epAddr == ep)
 8010c28:	697b      	ldr	r3, [r7, #20]
 8010c2a:	781b      	ldrb	r3, [r3, #0]
 8010c2c:	78ba      	ldrb	r2, [r7, #2]
 8010c2e:	429a      	cmp	r2, r3
 8010c30:	d101      	bne.n	8010c36 <_ZN3USB14getEpInfoEntryEhh+0x52>
                        return pep;
 8010c32:	697b      	ldr	r3, [r7, #20]
 8010c34:	e007      	b.n	8010c46 <_ZN3USB14getEpInfoEntryEhh+0x62>

                pep++;
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	3303      	adds	r3, #3
 8010c3a:	617b      	str	r3, [r7, #20]
        for(uint8_t i = 0; i < p->epcount; i++) {
 8010c3c:	7cfb      	ldrb	r3, [r7, #19]
 8010c3e:	3301      	adds	r3, #1
 8010c40:	74fb      	strb	r3, [r7, #19]
 8010c42:	e7ec      	b.n	8010c1e <_ZN3USB14getEpInfoEntryEhh+0x3a>
        }
        return NULL;
 8010c44:	2300      	movs	r3, #0
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	3718      	adds	r7, #24
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}

08010c4e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 8010c4e:	b580      	push	{r7, lr}
 8010c50:	b086      	sub	sp, #24
 8010c52:	af00      	add	r7, sp, #0
 8010c54:	60f8      	str	r0, [r7, #12]
 8010c56:	607b      	str	r3, [r7, #4]
 8010c58:	460b      	mov	r3, r1
 8010c5a:	72fb      	strb	r3, [r7, #11]
 8010c5c:	4613      	mov	r3, r2
 8010c5e:	72bb      	strb	r3, [r7, #10]
        if(!eprecord_ptr)
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d101      	bne.n	8010c6a <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x1c>
                return USB_ERROR_INVALID_ARGUMENT;
 8010c66:	23d8      	movs	r3, #216	; 0xd8
 8010c68:	e015      	b.n	8010c96 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	7afa      	ldrb	r2, [r7, #11]
 8010c6e:	4611      	mov	r1, r2
 8010c70:	4618      	mov	r0, r3
 8010c72:	f001 f9a5 	bl	8011fc0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8010c76:	6178      	str	r0, [r7, #20]

        if(!p)
 8010c78:	697b      	ldr	r3, [r7, #20]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d101      	bne.n	8010c82 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x34>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8010c7e:	23d6      	movs	r3, #214	; 0xd6
 8010c80:	e009      	b.n	8010c96 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        p->address.devAddress = addr;
 8010c82:	697b      	ldr	r3, [r7, #20]
 8010c84:	7afa      	ldrb	r2, [r7, #11]
 8010c86:	711a      	strb	r2, [r3, #4]
        p->epinfo = eprecord_ptr;
 8010c88:	697b      	ldr	r3, [r7, #20]
 8010c8a:	687a      	ldr	r2, [r7, #4]
 8010c8c:	601a      	str	r2, [r3, #0]
        p->epcount = epcount;
 8010c8e:	697b      	ldr	r3, [r7, #20]
 8010c90:	7aba      	ldrb	r2, [r7, #10]
 8010c92:	715a      	strb	r2, [r3, #5]

        return 0;
 8010c94:	2300      	movs	r3, #0
}
 8010c96:	4618      	mov	r0, r3
 8010c98:	3718      	adds	r7, #24
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bd80      	pop	{r7, pc}

08010c9e <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 8010c9e:	b580      	push	{r7, lr}
 8010ca0:	b086      	sub	sp, #24
 8010ca2:	af00      	add	r7, sp, #0
 8010ca4:	60f8      	str	r0, [r7, #12]
 8010ca6:	607b      	str	r3, [r7, #4]
 8010ca8:	460b      	mov	r3, r1
 8010caa:	72fb      	strb	r3, [r7, #11]
 8010cac:	4613      	mov	r3, r2
 8010cae:	72bb      	strb	r3, [r7, #10]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	7afa      	ldrb	r2, [r7, #11]
 8010cb4:	4611      	mov	r1, r2
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f001 f982 	bl	8011fc0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8010cbc:	6178      	str	r0, [r7, #20]

        if(!p)
 8010cbe:	697b      	ldr	r3, [r7, #20]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d101      	bne.n	8010cc8 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x2a>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8010cc4:	23d6      	movs	r3, #214	; 0xd6
 8010cc6:	e04e      	b.n	8010d66 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        if(!p->epinfo)
 8010cc8:	697b      	ldr	r3, [r7, #20]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d101      	bne.n	8010cd4 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x36>
                return USB_ERROR_EPINFO_IS_NULL;
 8010cd0:	23d7      	movs	r3, #215	; 0xd7
 8010cd2:	e048      	b.n	8010d66 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *ppep = getEpInfoEntry(addr, ep);
 8010cd4:	7aba      	ldrb	r2, [r7, #10]
 8010cd6:	7afb      	ldrb	r3, [r7, #11]
 8010cd8:	4619      	mov	r1, r3
 8010cda:	68f8      	ldr	r0, [r7, #12]
 8010cdc:	f7ff ff82 	bl	8010be4 <_ZN3USB14getEpInfoEntryEhh>
 8010ce0:	4602      	mov	r2, r0
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	601a      	str	r2, [r3, #0]

        if(!*ppep)
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d101      	bne.n	8010cf2 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x54>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 8010cee:	23db      	movs	r3, #219	; 0xdb
 8010cf0:	e039      	b.n	8010d66 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	789b      	ldrb	r3, [r3, #2]
 8010cf8:	f3c3 0385 	ubfx	r3, r3, #2, #6
 8010cfc:	b2db      	uxtb	r3, r3
 8010cfe:	2b0f      	cmp	r3, #15
 8010d00:	bf28      	it	cs
 8010d02:	230f      	movcs	r3, #15
 8010d04:	b2db      	uxtb	r3, r3
 8010d06:	461a      	mov	r2, r3
 8010d08:	2301      	movs	r3, #1
 8010d0a:	4093      	lsls	r3, r2
 8010d0c:	b29a      	uxth	r2, r3
 8010d0e:	6a3b      	ldr	r3, [r7, #32]
 8010d10:	801a      	strh	r2, [r3, #0]
        (*nak_limit)--;
 8010d12:	6a3b      	ldr	r3, [r7, #32]
 8010d14:	881b      	ldrh	r3, [r3, #0]
 8010d16:	3b01      	subs	r3, #1
 8010d18:	b29a      	uxth	r2, r3
 8010d1a:	6a3b      	ldr	r3, [r7, #32]
 8010d1c:	801a      	strh	r2, [r3, #0]
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 8010d1e:	7afb      	ldrb	r3, [r7, #11]
 8010d20:	461a      	mov	r2, r3
 8010d22:	21e0      	movs	r1, #224	; 0xe0
 8010d24:	68f8      	ldr	r0, [r7, #12]
 8010d26:	f7f0 fdb1 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>

        uint8_t mode = regRd(rMODE);
 8010d2a:	21d8      	movs	r1, #216	; 0xd8
 8010d2c:	68f8      	ldr	r0, [r7, #12]
 8010d2e:	f7f0 fdff 	bl	8001930 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010d32:	4603      	mov	r3, r0
 8010d34:	74fb      	strb	r3, [r7, #19]
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 8010d36:	697b      	ldr	r3, [r7, #20]
 8010d38:	799b      	ldrb	r3, [r3, #6]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d009      	beq.n	8010d52 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xb4>
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8010d44:	7cfb      	ldrb	r3, [r7, #19]
 8010d46:	4313      	orrs	r3, r2
 8010d48:	b2db      	uxtb	r3, r3
 8010d4a:	f043 0302 	orr.w	r3, r3, #2
 8010d4e:	b2db      	uxtb	r3, r3
 8010d50:	e003      	b.n	8010d5a <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xbc>
 8010d52:	7cfb      	ldrb	r3, [r7, #19]
 8010d54:	f023 0306 	bic.w	r3, r3, #6
 8010d58:	b2db      	uxtb	r3, r3
 8010d5a:	461a      	mov	r2, r3
 8010d5c:	21d8      	movs	r1, #216	; 0xd8
 8010d5e:	68f8      	ldr	r0, [r7, #12]
 8010d60:	f7f0 fd94 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return 0;
 8010d64:	2300      	movs	r3, #0
}
 8010d66:	4618      	mov	r0, r3
 8010d68:	3718      	adds	r7, #24
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd80      	pop	{r7, pc}

08010d6e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 8010d6e:	b590      	push	{r4, r7, lr}
 8010d70:	b08b      	sub	sp, #44	; 0x2c
 8010d72:	af02      	add	r7, sp, #8
 8010d74:	6078      	str	r0, [r7, #4]
 8010d76:	4608      	mov	r0, r1
 8010d78:	4611      	mov	r1, r2
 8010d7a:	461a      	mov	r2, r3
 8010d7c:	4603      	mov	r3, r0
 8010d7e:	70fb      	strb	r3, [r7, #3]
 8010d80:	460b      	mov	r3, r1
 8010d82:	70bb      	strb	r3, [r7, #2]
 8010d84:	4613      	mov	r3, r2
 8010d86:	707b      	strb	r3, [r7, #1]
        bool direction = false; //request direction, IN or OUT
 8010d88:	2300      	movs	r3, #0
 8010d8a:	76fb      	strb	r3, [r7, #27]
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	60fb      	str	r3, [r7, #12]
        uint16_t nak_limit = 0;
 8010d90:	2300      	movs	r3, #0
 8010d92:	817b      	strh	r3, [r7, #10]

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8010d94:	f107 000c 	add.w	r0, r7, #12
 8010d98:	78ba      	ldrb	r2, [r7, #2]
 8010d9a:	78f9      	ldrb	r1, [r7, #3]
 8010d9c:	f107 030a 	add.w	r3, r7, #10
 8010da0:	9300      	str	r3, [sp, #0]
 8010da2:	4603      	mov	r3, r0
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f7ff ff7a 	bl	8010c9e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8010daa:	4603      	mov	r3, r0
 8010dac:	77fb      	strb	r3, [r7, #31]

        if(rcode)
 8010dae:	7ffb      	ldrb	r3, [r7, #31]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d001      	beq.n	8010db8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x4a>
                return rcode;
 8010db4:	7ffb      	ldrb	r3, [r7, #31]
 8010db6:	e0ae      	b.n	8010f16 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        direction = ((bmReqType & 0x80) > 0);
 8010db8:	787b      	ldrb	r3, [r7, #1]
 8010dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	bfcc      	ite	gt
 8010dc2:	2301      	movgt	r3, #1
 8010dc4:	2300      	movle	r3, #0
 8010dc6:	76fb      	strb	r3, [r7, #27]

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 8010dc8:	787b      	ldrb	r3, [r7, #1]
 8010dca:	743b      	strb	r3, [r7, #16]
        setup_pkt.bRequest = bRequest;
 8010dcc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8010dd0:	747b      	strb	r3, [r7, #17]
        setup_pkt.wVal_u.wValueLo = wValLo;
 8010dd2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8010dd6:	74bb      	strb	r3, [r7, #18]
        setup_pkt.wVal_u.wValueHi = wValHi;
 8010dd8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010ddc:	74fb      	strb	r3, [r7, #19]
        setup_pkt.wIndex = wInd;
 8010dde:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010de0:	82bb      	strh	r3, [r7, #20]
        setup_pkt.wLength = total;
 8010de2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010de6:	82fb      	strh	r3, [r7, #22]

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 8010de8:	f107 0310 	add.w	r3, r7, #16
 8010dec:	2208      	movs	r2, #8
 8010dee:	2120      	movs	r1, #32
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	f001 f90b 	bl	801200c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 8010df6:	897b      	ldrh	r3, [r7, #10]
 8010df8:	78ba      	ldrb	r2, [r7, #2]
 8010dfa:	2110      	movs	r1, #16
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f000 faf2 	bl	80113e6 <_ZN3USB11dispatchPktEhht>
 8010e02:	4603      	mov	r3, r0
 8010e04:	77fb      	strb	r3, [r7, #31]

        if(rcode) //return HRSLT if not zero
 8010e06:	7ffb      	ldrb	r3, [r7, #31]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d001      	beq.n	8010e10 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa2>
                return ( rcode);
 8010e0c:	7ffb      	ldrb	r3, [r7, #31]
 8010e0e:	e082      	b.n	8010f16 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        if(dataptr != NULL) //data stage, if present
 8010e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d072      	beq.n	8010efc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
        {
                if(direction) //IN transfer
 8010e16:	7efb      	ldrb	r3, [r7, #27]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d057      	beq.n	8010ecc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x15e>
                {
                        uint16_t left = total;
 8010e1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010e20:	83bb      	strh	r3, [r7, #28]

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 8010e22:	68fa      	ldr	r2, [r7, #12]
 8010e24:	7893      	ldrb	r3, [r2, #2]
 8010e26:	f043 0302 	orr.w	r3, r3, #2
 8010e2a:	7093      	strb	r3, [r2, #2]

                        while(left) {
 8010e2c:	8bbb      	ldrh	r3, [r7, #28]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d05f      	beq.n	8010ef2 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 8010e32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010e36:	813b      	strh	r3, [r7, #8]
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 8010e38:	68f9      	ldr	r1, [r7, #12]
 8010e3a:	897a      	ldrh	r2, [r7, #10]
 8010e3c:	f107 0008 	add.w	r0, r7, #8
 8010e40:	2300      	movs	r3, #0
 8010e42:	9301      	str	r3, [sp, #4]
 8010e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e46:	9300      	str	r3, [sp, #0]
 8010e48:	4603      	mov	r3, r0
 8010e4a:	6878      	ldr	r0, [r7, #4]
 8010e4c:	f000 f8a6 	bl	8010f9c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8010e50:	4603      	mov	r3, r0
 8010e52:	77fb      	strb	r3, [r7, #31]
                                if(rcode == hrTOGERR) {
 8010e54:	7ffb      	ldrb	r3, [r7, #31]
 8010e56:	2b06      	cmp	r3, #6
 8010e58:	d114      	bne.n	8010e84 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x116>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 8010e5a:	21f8      	movs	r1, #248	; 0xf8
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f7f0 fd67 	bl	8001930 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010e62:	4603      	mov	r3, r0
 8010e64:	f003 0320 	and.w	r3, r3, #32
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	bf0c      	ite	eq
 8010e6c:	2301      	moveq	r3, #1
 8010e6e:	2300      	movne	r3, #0
 8010e70:	b2db      	uxtb	r3, r3
 8010e72:	68fa      	ldr	r2, [r7, #12]
 8010e74:	f003 0301 	and.w	r3, r3, #1
 8010e78:	b2d9      	uxtb	r1, r3
 8010e7a:	7893      	ldrb	r3, [r2, #2]
 8010e7c:	f361 0341 	bfi	r3, r1, #1, #1
 8010e80:	7093      	strb	r3, [r2, #2]
 8010e82:	e7d3      	b.n	8010e2c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        continue;
                                }

                                if(rcode)
 8010e84:	7ffb      	ldrb	r3, [r7, #31]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d001      	beq.n	8010e8e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x120>
                                        return rcode;
 8010e8a:	7ffb      	ldrb	r3, [r7, #31]
 8010e8c:	e043      	b.n	8010f16 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 8010e8e:	7ffb      	ldrb	r3, [r7, #31]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d111      	bne.n	8010eb8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
 8010e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d00e      	beq.n	8010eb8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 8010e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	681c      	ldr	r4, [r3, #0]
 8010ea0:	8939      	ldrh	r1, [r7, #8]
 8010ea2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010ea6:	8bbb      	ldrh	r3, [r7, #28]
 8010ea8:	1ad3      	subs	r3, r2, r3
 8010eaa:	b29b      	uxth	r3, r3
 8010eac:	833b      	strh	r3, [r7, #24]
 8010eae:	f107 0318 	add.w	r3, r7, #24
 8010eb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010eb4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010eb6:	47a0      	blx	r4

                                left -= read;
 8010eb8:	893b      	ldrh	r3, [r7, #8]
 8010eba:	8bba      	ldrh	r2, [r7, #28]
 8010ebc:	1ad3      	subs	r3, r2, r3
 8010ebe:	83bb      	strh	r3, [r7, #28]

                                if(read < nbytes)
 8010ec0:	893b      	ldrh	r3, [r7, #8]
 8010ec2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010ec6:	429a      	cmp	r2, r3
 8010ec8:	d812      	bhi.n	8010ef0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x182>
                        while(left) {
 8010eca:	e7af      	b.n	8010e2c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 8010ecc:	68fa      	ldr	r2, [r7, #12]
 8010ece:	7893      	ldrb	r3, [r2, #2]
 8010ed0:	f043 0301 	orr.w	r3, r3, #1
 8010ed4:	7093      	strb	r3, [r2, #2]
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 8010ed6:	68f9      	ldr	r1, [r7, #12]
 8010ed8:	897a      	ldrh	r2, [r7, #10]
 8010eda:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 8010ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ee0:	9300      	str	r3, [sp, #0]
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	6878      	ldr	r0, [r7, #4]
 8010ee6:	f000 f953 	bl	8011190 <_ZN3USB11OutTransferEP6EpInfottPh>
 8010eea:	4603      	mov	r3, r0
 8010eec:	77fb      	strb	r3, [r7, #31]
 8010eee:	e000      	b.n	8010ef2 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                        break;
 8010ef0:	bf00      	nop
                }
                if(rcode) //return error
 8010ef2:	7ffb      	ldrb	r3, [r7, #31]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d001      	beq.n	8010efc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
                        return ( rcode);
 8010ef8:	7ffb      	ldrb	r3, [r7, #31]
 8010efa:	e00c      	b.n	8010f16 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 8010efc:	7efb      	ldrb	r3, [r7, #27]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d001      	beq.n	8010f06 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x198>
 8010f02:	21a0      	movs	r1, #160	; 0xa0
 8010f04:	e000      	b.n	8010f08 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x19a>
 8010f06:	2180      	movs	r1, #128	; 0x80
 8010f08:	897b      	ldrh	r3, [r7, #10]
 8010f0a:	78ba      	ldrb	r2, [r7, #2]
 8010f0c:	6878      	ldr	r0, [r7, #4]
 8010f0e:	f000 fa6a 	bl	80113e6 <_ZN3USB11dispatchPktEhht>
 8010f12:	4603      	mov	r3, r0
 8010f14:	bf00      	nop
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	3724      	adds	r7, #36	; 0x24
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd90      	pop	{r4, r7, pc}

08010f1e <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 8010f1e:	b580      	push	{r7, lr}
 8010f20:	b08a      	sub	sp, #40	; 0x28
 8010f22:	af02      	add	r7, sp, #8
 8010f24:	60f8      	str	r0, [r7, #12]
 8010f26:	607b      	str	r3, [r7, #4]
 8010f28:	460b      	mov	r3, r1
 8010f2a:	72fb      	strb	r3, [r7, #11]
 8010f2c:	4613      	mov	r3, r2
 8010f2e:	72bb      	strb	r3, [r7, #10]
        EpInfo *pep = NULL;
 8010f30:	2300      	movs	r3, #0
 8010f32:	61bb      	str	r3, [r7, #24]
        uint16_t nak_limit = 0;
 8010f34:	2300      	movs	r3, #0
 8010f36:	82fb      	strh	r3, [r7, #22]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8010f38:	f107 0018 	add.w	r0, r7, #24
 8010f3c:	7aba      	ldrb	r2, [r7, #10]
 8010f3e:	7af9      	ldrb	r1, [r7, #11]
 8010f40:	f107 0316 	add.w	r3, r7, #22
 8010f44:	9300      	str	r3, [sp, #0]
 8010f46:	4603      	mov	r3, r0
 8010f48:	68f8      	ldr	r0, [r7, #12]
 8010f4a:	f7ff fea8 	bl	8010c9e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	77fb      	strb	r3, [r7, #31]

        if(rcode) {
 8010f52:	7ffb      	ldrb	r3, [r7, #31]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d010      	beq.n	8010f7a <_ZN3USB10inTransferEhhPtPhh+0x5c>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 8010f58:	7ffb      	ldrb	r3, [r7, #31]
 8010f5a:	2181      	movs	r1, #129	; 0x81
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f001 f883 	bl	8012068 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 8010f62:	7afb      	ldrb	r3, [r7, #11]
 8010f64:	2181      	movs	r1, #129	; 0x81
 8010f66:	4618      	mov	r0, r3
 8010f68:	f001 f87e 	bl	8012068 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 8010f6c:	7abb      	ldrb	r3, [r7, #10]
 8010f6e:	2181      	movs	r1, #129	; 0x81
 8010f70:	4618      	mov	r0, r3
 8010f72:	f001 f879 	bl	8012068 <_Z10D_PrintHexIhEvT_i>
                return rcode;
 8010f76:	7ffb      	ldrb	r3, [r7, #31]
 8010f78:	e00c      	b.n	8010f94 <_ZN3USB10inTransferEhhPtPhh+0x76>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 8010f7a:	69b9      	ldr	r1, [r7, #24]
 8010f7c:	8afa      	ldrh	r2, [r7, #22]
 8010f7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010f82:	9301      	str	r3, [sp, #4]
 8010f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f86:	9300      	str	r3, [sp, #0]
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	68f8      	ldr	r0, [r7, #12]
 8010f8c:	f000 f806 	bl	8010f9c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8010f90:	4603      	mov	r3, r0
 8010f92:	bf00      	nop
}
 8010f94:	4618      	mov	r0, r3
 8010f96:	3720      	adds	r7, #32
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd80      	pop	{r7, pc}

08010f9c <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b086      	sub	sp, #24
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	60f8      	str	r0, [r7, #12]
 8010fa4:	60b9      	str	r1, [r7, #8]
 8010fa6:	603b      	str	r3, [r7, #0]
 8010fa8:	4613      	mov	r3, r2
 8010faa:	80fb      	strh	r3, [r7, #6]
        uint8_t rcode = 0;
 8010fac:	2300      	movs	r3, #0
 8010fae:	75fb      	strb	r3, [r7, #23]
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 8010fb0:	683b      	ldr	r3, [r7, #0]
 8010fb2:	881b      	ldrh	r3, [r3, #0]
 8010fb4:	827b      	strh	r3, [r7, #18]
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 8010fb6:	68bb      	ldr	r3, [r7, #8]
 8010fb8:	785b      	ldrb	r3, [r3, #1]
 8010fba:	747b      	strb	r3, [r7, #17]

        *nbytesptr = 0;
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	801a      	strh	r2, [r3, #0]
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 8010fc2:	68bb      	ldr	r3, [r7, #8]
 8010fc4:	789b      	ldrb	r3, [r3, #2]
 8010fc6:	f003 0302 	and.w	r3, r3, #2
 8010fca:	b2db      	uxtb	r3, r3
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d001      	beq.n	8010fd4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x38>
 8010fd0:	2320      	movs	r3, #32
 8010fd2:	e000      	b.n	8010fd6 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x3a>
 8010fd4:	2310      	movs	r3, #16
 8010fd6:	461a      	mov	r2, r3
 8010fd8:	21e8      	movs	r1, #232	; 0xe8
 8010fda:	68f8      	ldr	r0, [r7, #12]
 8010fdc:	f7f0 fc56 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 8010fe0:	68bb      	ldr	r3, [r7, #8]
 8010fe2:	781a      	ldrb	r2, [r3, #0]
 8010fe4:	88fb      	ldrh	r3, [r7, #6]
 8010fe6:	2100      	movs	r1, #0
 8010fe8:	68f8      	ldr	r0, [r7, #12]
 8010fea:	f000 f9fc 	bl	80113e6 <_ZN3USB11dispatchPktEhht>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	75fb      	strb	r3, [r7, #23]
                if(rcode == hrTOGERR) {
 8010ff2:	7dfb      	ldrb	r3, [r7, #23]
 8010ff4:	2b06      	cmp	r3, #6
 8010ff6:	d123      	bne.n	8011040 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xa4>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 8010ff8:	21f8      	movs	r1, #248	; 0xf8
 8010ffa:	68f8      	ldr	r0, [r7, #12]
 8010ffc:	f7f0 fc98 	bl	8001930 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011000:	4603      	mov	r3, r0
 8011002:	f003 0310 	and.w	r3, r3, #16
 8011006:	2b00      	cmp	r3, #0
 8011008:	bf0c      	ite	eq
 801100a:	2301      	moveq	r3, #1
 801100c:	2300      	movne	r3, #0
 801100e:	b2db      	uxtb	r3, r3
 8011010:	f003 0301 	and.w	r3, r3, #1
 8011014:	b2d9      	uxtb	r1, r3
 8011016:	68ba      	ldr	r2, [r7, #8]
 8011018:	7893      	ldrb	r3, [r2, #2]
 801101a:	f361 0341 	bfi	r3, r1, #1, #1
 801101e:	7093      	strb	r3, [r2, #2]
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 8011020:	68bb      	ldr	r3, [r7, #8]
 8011022:	789b      	ldrb	r3, [r3, #2]
 8011024:	f003 0302 	and.w	r3, r3, #2
 8011028:	b2db      	uxtb	r3, r3
 801102a:	2b00      	cmp	r3, #0
 801102c:	d001      	beq.n	8011032 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x96>
 801102e:	2320      	movs	r3, #32
 8011030:	e000      	b.n	8011034 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x98>
 8011032:	2310      	movs	r3, #16
 8011034:	461a      	mov	r2, r3
 8011036:	21e8      	movs	r1, #232	; 0xe8
 8011038:	68f8      	ldr	r0, [r7, #12]
 801103a:	f7f0 fc27 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        continue;
 801103e:	e06e      	b.n	801111e <_ZN3USB10InTransferEP6EpInfotPtPhh+0x182>
                }
                if(rcode) {
 8011040:	7dfb      	ldrb	r3, [r7, #23]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d16c      	bne.n	8011120 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x184>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 8011046:	21c8      	movs	r1, #200	; 0xc8
 8011048:	68f8      	ldr	r0, [r7, #12]
 801104a:	f7f0 fc71 	bl	8001930 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801104e:	4603      	mov	r3, r0
 8011050:	f003 0304 	and.w	r3, r3, #4
 8011054:	2b00      	cmp	r3, #0
 8011056:	bf0c      	ite	eq
 8011058:	2301      	moveq	r3, #1
 801105a:	2300      	movne	r3, #0
 801105c:	b2db      	uxtb	r3, r3
 801105e:	2b00      	cmp	r3, #0
 8011060:	d002      	beq.n	8011068 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xcc>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 8011062:	23f0      	movs	r3, #240	; 0xf0
 8011064:	75fb      	strb	r3, [r7, #23]
                        break;
 8011066:	e05c      	b.n	8011122 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 8011068:	2130      	movs	r1, #48	; 0x30
 801106a:	68f8      	ldr	r0, [r7, #12]
 801106c:	f7f0 fc60 	bl	8001930 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011070:	4603      	mov	r3, r0
 8011072:	75bb      	strb	r3, [r7, #22]
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 8011074:	7dba      	ldrb	r2, [r7, #22]
 8011076:	8a7b      	ldrh	r3, [r7, #18]
 8011078:	429a      	cmp	r2, r3
 801107a:	dd01      	ble.n	8011080 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xe4>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 801107c:	8a7b      	ldrh	r3, [r7, #18]
 801107e:	75bb      	strb	r3, [r7, #22]
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011086:	b29b      	uxth	r3, r3
 8011088:	8a7a      	ldrh	r2, [r7, #18]
 801108a:	1ad3      	subs	r3, r2, r3
 801108c:	b29b      	uxth	r3, r3
 801108e:	82bb      	strh	r3, [r7, #20]

                if(mem_left < 0)
 8011090:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011094:	2b00      	cmp	r3, #0
 8011096:	da01      	bge.n	801109c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x100>
                        mem_left = 0;
 8011098:	2300      	movs	r3, #0
 801109a:	82bb      	strh	r3, [r7, #20]

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 801109c:	7dba      	ldrb	r2, [r7, #22]
 801109e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80110a2:	4293      	cmp	r3, r2
 80110a4:	bfa8      	it	ge
 80110a6:	4613      	movge	r3, r2
 80110a8:	b2da      	uxtb	r2, r3
 80110aa:	6a3b      	ldr	r3, [r7, #32]
 80110ac:	2108      	movs	r1, #8
 80110ae:	68f8      	ldr	r0, [r7, #12]
 80110b0:	f000 ffe6 	bl	8012080 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>
 80110b4:	6238      	str	r0, [r7, #32]

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 80110b6:	2204      	movs	r2, #4
 80110b8:	21c8      	movs	r1, #200	; 0xc8
 80110ba:	68f8      	ldr	r0, [r7, #12]
 80110bc:	f7f0 fbe6 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	881a      	ldrh	r2, [r3, #0]
 80110c4:	7dbb      	ldrb	r3, [r7, #22]
 80110c6:	b29b      	uxth	r3, r3
 80110c8:	4413      	add	r3, r2
 80110ca:	b29a      	uxth	r2, r3
 80110cc:	683b      	ldr	r3, [r7, #0]
 80110ce:	801a      	strh	r2, [r3, #0]

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 80110d0:	7dba      	ldrb	r2, [r7, #22]
 80110d2:	7c7b      	ldrb	r3, [r7, #17]
 80110d4:	429a      	cmp	r2, r3
 80110d6:	d304      	bcc.n	80110e2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x146>
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	881b      	ldrh	r3, [r3, #0]
 80110dc:	8a7a      	ldrh	r2, [r7, #18]
 80110de:	429a      	cmp	r2, r3
 80110e0:	d813      	bhi.n	801110a <_ZN3USB10InTransferEP6EpInfotPtPhh+0x16e>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 80110e2:	21f8      	movs	r1, #248	; 0xf8
 80110e4:	68f8      	ldr	r0, [r7, #12]
 80110e6:	f7f0 fc23 	bl	8001930 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80110ea:	4603      	mov	r3, r0
 80110ec:	f003 0310 	and.w	r3, r3, #16
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d001      	beq.n	80110f8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15c>
 80110f4:	2101      	movs	r1, #1
 80110f6:	e000      	b.n	80110fa <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15e>
 80110f8:	2100      	movs	r1, #0
 80110fa:	68ba      	ldr	r2, [r7, #8]
 80110fc:	7893      	ldrb	r3, [r2, #2]
 80110fe:	f361 0341 	bfi	r3, r1, #1, #1
 8011102:	7093      	strb	r3, [r2, #2]
                        //printf("\r\n");
                        rcode = 0;
 8011104:	2300      	movs	r3, #0
 8011106:	75fb      	strb	r3, [r7, #23]
                        break;
 8011108:	e00b      	b.n	8011122 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                } else if(bInterval > 0)
 801110a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801110e:	2b00      	cmp	r3, #0
 8011110:	f43f af66 	beq.w	8010fe0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        delay(bInterval); // Delay according to polling interval
 8011114:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011118:	4618      	mov	r0, r3
 801111a:	f7f0 fee7 	bl	8001eec <HAL_Delay>
        } //while( 1 )
 801111e:	e75f      	b.n	8010fe0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        break; //should be 0, indicating ACK. Else return error code.
 8011120:	bf00      	nop
        return ( rcode);
 8011122:	7dfb      	ldrb	r3, [r7, #23]
}
 8011124:	4618      	mov	r0, r3
 8011126:	3718      	adds	r7, #24
 8011128:	46bd      	mov	sp, r7
 801112a:	bd80      	pop	{r7, pc}

0801112c <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 801112c:	b580      	push	{r7, lr}
 801112e:	b088      	sub	sp, #32
 8011130:	af02      	add	r7, sp, #8
 8011132:	6078      	str	r0, [r7, #4]
 8011134:	4608      	mov	r0, r1
 8011136:	4611      	mov	r1, r2
 8011138:	461a      	mov	r2, r3
 801113a:	4603      	mov	r3, r0
 801113c:	70fb      	strb	r3, [r7, #3]
 801113e:	460b      	mov	r3, r1
 8011140:	70bb      	strb	r3, [r7, #2]
 8011142:	4613      	mov	r3, r2
 8011144:	803b      	strh	r3, [r7, #0]
        EpInfo *pep = NULL;
 8011146:	2300      	movs	r3, #0
 8011148:	613b      	str	r3, [r7, #16]
        uint16_t nak_limit = 0;
 801114a:	2300      	movs	r3, #0
 801114c:	81fb      	strh	r3, [r7, #14]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 801114e:	f107 0010 	add.w	r0, r7, #16
 8011152:	78ba      	ldrb	r2, [r7, #2]
 8011154:	78f9      	ldrb	r1, [r7, #3]
 8011156:	f107 030e 	add.w	r3, r7, #14
 801115a:	9300      	str	r3, [sp, #0]
 801115c:	4603      	mov	r3, r0
 801115e:	6878      	ldr	r0, [r7, #4]
 8011160:	f7ff fd9d 	bl	8010c9e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8011164:	4603      	mov	r3, r0
 8011166:	75fb      	strb	r3, [r7, #23]

        if(rcode)
 8011168:	7dfb      	ldrb	r3, [r7, #23]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d001      	beq.n	8011172 <_ZN3USB11outTransferEhhtPh+0x46>
                return rcode;
 801116e:	7dfb      	ldrb	r3, [r7, #23]
 8011170:	e00a      	b.n	8011188 <_ZN3USB11outTransferEhhtPh+0x5c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 8011172:	6939      	ldr	r1, [r7, #16]
 8011174:	89fa      	ldrh	r2, [r7, #14]
 8011176:	8838      	ldrh	r0, [r7, #0]
 8011178:	6a3b      	ldr	r3, [r7, #32]
 801117a:	9300      	str	r3, [sp, #0]
 801117c:	4603      	mov	r3, r0
 801117e:	6878      	ldr	r0, [r7, #4]
 8011180:	f000 f806 	bl	8011190 <_ZN3USB11OutTransferEP6EpInfottPh>
 8011184:	4603      	mov	r3, r0
 8011186:	bf00      	nop
}
 8011188:	4618      	mov	r0, r3
 801118a:	3718      	adds	r7, #24
 801118c:	46bd      	mov	sp, r7
 801118e:	bd80      	pop	{r7, pc}

08011190 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 8011190:	b580      	push	{r7, lr}
 8011192:	b08a      	sub	sp, #40	; 0x28
 8011194:	af00      	add	r7, sp, #0
 8011196:	60f8      	str	r0, [r7, #12]
 8011198:	60b9      	str	r1, [r7, #8]
 801119a:	4611      	mov	r1, r2
 801119c:	461a      	mov	r2, r3
 801119e:	460b      	mov	r3, r1
 80111a0:	80fb      	strh	r3, [r7, #6]
 80111a2:	4613      	mov	r3, r2
 80111a4:	80bb      	strh	r3, [r7, #4]
        uint8_t rcode = hrSUCCESS, retry_count;
 80111a6:	2300      	movs	r3, #0
 80111a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uint8_t *data_p = data; //local copy of the data pointer
 80111ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ae:	623b      	str	r3, [r7, #32]
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 80111b0:	88bb      	ldrh	r3, [r7, #4]
 80111b2:	83bb      	strh	r3, [r7, #28]

        uint8_t maxpktsize = pep->maxPktSize;
 80111b4:	68bb      	ldr	r3, [r7, #8]
 80111b6:	785b      	ldrb	r3, [r3, #1]
 80111b8:	76fb      	strb	r3, [r7, #27]

        if(maxpktsize < 1 || maxpktsize > 64)
 80111ba:	7efb      	ldrb	r3, [r7, #27]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d002      	beq.n	80111c6 <_ZN3USB11OutTransferEP6EpInfottPh+0x36>
 80111c0:	7efb      	ldrb	r3, [r7, #27]
 80111c2:	2b40      	cmp	r3, #64	; 0x40
 80111c4:	d901      	bls.n	80111ca <_ZN3USB11OutTransferEP6EpInfottPh+0x3a>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 80111c6:	23da      	movs	r3, #218	; 0xda
 80111c8:	e109      	b.n	80113de <_ZN3USB11OutTransferEP6EpInfottPh+0x24e>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 80111ca:	f7f0 fe83 	bl	8001ed4 <HAL_GetTick>
 80111ce:	4603      	mov	r3, r0
 80111d0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80111d4:	3308      	adds	r3, #8
 80111d6:	617b      	str	r3, [r7, #20]

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 80111d8:	68bb      	ldr	r3, [r7, #8]
 80111da:	789b      	ldrb	r3, [r3, #2]
 80111dc:	f003 0301 	and.w	r3, r3, #1
 80111e0:	b2db      	uxtb	r3, r3
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d001      	beq.n	80111ea <_ZN3USB11OutTransferEP6EpInfottPh+0x5a>
 80111e6:	2380      	movs	r3, #128	; 0x80
 80111e8:	e000      	b.n	80111ec <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
 80111ea:	2340      	movs	r3, #64	; 0x40
 80111ec:	461a      	mov	r2, r3
 80111ee:	21e8      	movs	r1, #232	; 0xe8
 80111f0:	68f8      	ldr	r0, [r7, #12]
 80111f2:	f7f0 fb4b 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>

        while(bytes_left) {
 80111f6:	8bbb      	ldrh	r3, [r7, #28]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	f000 80da 	beq.w	80113b2 <_ZN3USB11OutTransferEP6EpInfottPh+0x222>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 80111fe:	2300      	movs	r3, #0
 8011200:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                nak_count = 0;
 8011204:	2300      	movs	r3, #0
 8011206:	83fb      	strh	r3, [r7, #30]
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 8011208:	7efb      	ldrb	r3, [r7, #27]
 801120a:	b29b      	uxth	r3, r3
 801120c:	8bba      	ldrh	r2, [r7, #28]
 801120e:	4293      	cmp	r3, r2
 8011210:	bf28      	it	cs
 8011212:	4613      	movcs	r3, r2
 8011214:	827b      	strh	r3, [r7, #18]
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 8011216:	8a7b      	ldrh	r3, [r7, #18]
 8011218:	b2da      	uxtb	r2, r3
 801121a:	6a3b      	ldr	r3, [r7, #32]
 801121c:	2110      	movs	r1, #16
 801121e:	68f8      	ldr	r0, [r7, #12]
 8011220:	f000 fef4 	bl	801200c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 8011224:	8a7b      	ldrh	r3, [r7, #18]
 8011226:	b2db      	uxtb	r3, r3
 8011228:	461a      	mov	r2, r3
 801122a:	2138      	movs	r1, #56	; 0x38
 801122c:	68f8      	ldr	r0, [r7, #12]
 801122e:	f7f0 fb2d 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 8011232:	68bb      	ldr	r3, [r7, #8]
 8011234:	781b      	ldrb	r3, [r3, #0]
 8011236:	f043 0320 	orr.w	r3, r3, #32
 801123a:	b2db      	uxtb	r3, r3
 801123c:	461a      	mov	r2, r3
 801123e:	21f0      	movs	r1, #240	; 0xf0
 8011240:	68f8      	ldr	r0, [r7, #12]
 8011242:	f7f0 fb23 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 8011246:	21c8      	movs	r1, #200	; 0xc8
 8011248:	68f8      	ldr	r0, [r7, #12]
 801124a:	f7f0 fb71 	bl	8001930 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801124e:	4603      	mov	r3, r0
 8011250:	b25b      	sxtb	r3, r3
 8011252:	43db      	mvns	r3, r3
 8011254:	b2db      	uxtb	r3, r3
 8011256:	09db      	lsrs	r3, r3, #7
 8011258:	b2db      	uxtb	r3, r3
 801125a:	2b00      	cmp	r3, #0
 801125c:	d000      	beq.n	8011260 <_ZN3USB11OutTransferEP6EpInfottPh+0xd0>
 801125e:	e7f2      	b.n	8011246 <_ZN3USB11OutTransferEP6EpInfottPh+0xb6>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 8011260:	2280      	movs	r2, #128	; 0x80
 8011262:	21c8      	movs	r1, #200	; 0xc8
 8011264:	68f8      	ldr	r0, [r7, #12]
 8011266:	f7f0 fb11 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 801126a:	21f8      	movs	r1, #248	; 0xf8
 801126c:	68f8      	ldr	r0, [r7, #12]
 801126e:	f7f0 fb5f 	bl	8001930 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011272:	4603      	mov	r3, r0
 8011274:	f003 030f 	and.w	r3, r3, #15
 8011278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 801127c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011280:	2b00      	cmp	r3, #0
 8011282:	d008      	beq.n	8011296 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 8011284:	f7f0 fe26 	bl	8001ed4 <HAL_GetTick>
 8011288:	4602      	mov	r2, r0
 801128a:	697b      	ldr	r3, [r7, #20]
 801128c:	1ad3      	subs	r3, r2, r3
 801128e:	2b00      	cmp	r3, #0
 8011290:	da01      	bge.n	8011296 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 8011292:	2301      	movs	r3, #1
 8011294:	e000      	b.n	8011298 <_ZN3USB11OutTransferEP6EpInfottPh+0x108>
 8011296:	2300      	movs	r3, #0
 8011298:	2b00      	cmp	r3, #0
 801129a:	f000 8081 	beq.w	80113a0 <_ZN3USB11OutTransferEP6EpInfottPh+0x210>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 801129e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80112a2:	2b0e      	cmp	r3, #14
 80112a4:	d012      	beq.n	80112cc <_ZN3USB11OutTransferEP6EpInfottPh+0x13c>
 80112a6:	2b0e      	cmp	r3, #14
 80112a8:	f300 8085 	bgt.w	80113b6 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
 80112ac:	2b04      	cmp	r3, #4
 80112ae:	d002      	beq.n	80112b6 <_ZN3USB11OutTransferEP6EpInfottPh+0x126>
 80112b0:	2b06      	cmp	r3, #6
 80112b2:	d015      	beq.n	80112e0 <_ZN3USB11OutTransferEP6EpInfottPh+0x150>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 80112b4:	e07f      	b.n	80113b6 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
                                        nak_count++;
 80112b6:	8bfb      	ldrh	r3, [r7, #30]
 80112b8:	3301      	adds	r3, #1
 80112ba:	83fb      	strh	r3, [r7, #30]
                                        if(nak_limit && (nak_count == nak_limit))
 80112bc:	88fb      	ldrh	r3, [r7, #6]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d032      	beq.n	8011328 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
 80112c2:	8bfa      	ldrh	r2, [r7, #30]
 80112c4:	88fb      	ldrh	r3, [r7, #6]
 80112c6:	429a      	cmp	r2, r3
 80112c8:	d12e      	bne.n	8011328 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
                                                goto breakout;
 80112ca:	e075      	b.n	80113b8 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        retry_count++;
 80112cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80112d0:	3301      	adds	r3, #1
 80112d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        if(retry_count == USB_RETRY_LIMIT)
 80112d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80112da:	2b03      	cmp	r3, #3
 80112dc:	d126      	bne.n	801132c <_ZN3USB11OutTransferEP6EpInfottPh+0x19c>
                                                goto breakout;
 80112de:	e06b      	b.n	80113b8 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 80112e0:	21f8      	movs	r1, #248	; 0xf8
 80112e2:	68f8      	ldr	r0, [r7, #12]
 80112e4:	f7f0 fb24 	bl	8001930 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80112e8:	4603      	mov	r3, r0
 80112ea:	f003 0320 	and.w	r3, r3, #32
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	bf0c      	ite	eq
 80112f2:	2301      	moveq	r3, #1
 80112f4:	2300      	movne	r3, #0
 80112f6:	b2db      	uxtb	r3, r3
 80112f8:	f003 0301 	and.w	r3, r3, #1
 80112fc:	b2d9      	uxtb	r1, r3
 80112fe:	68ba      	ldr	r2, [r7, #8]
 8011300:	7893      	ldrb	r3, [r2, #2]
 8011302:	f361 0300 	bfi	r3, r1, #0, #1
 8011306:	7093      	strb	r3, [r2, #2]
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 8011308:	68bb      	ldr	r3, [r7, #8]
 801130a:	789b      	ldrb	r3, [r3, #2]
 801130c:	f003 0301 	and.w	r3, r3, #1
 8011310:	b2db      	uxtb	r3, r3
 8011312:	2b00      	cmp	r3, #0
 8011314:	d001      	beq.n	801131a <_ZN3USB11OutTransferEP6EpInfottPh+0x18a>
 8011316:	2380      	movs	r3, #128	; 0x80
 8011318:	e000      	b.n	801131c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 801131a:	2340      	movs	r3, #64	; 0x40
 801131c:	461a      	mov	r2, r3
 801131e:	21e8      	movs	r1, #232	; 0xe8
 8011320:	68f8      	ldr	r0, [r7, #12]
 8011322:	f7f0 fab3 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                        break;
 8011326:	e002      	b.n	801132e <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 8011328:	bf00      	nop
 801132a:	e000      	b.n	801132e <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 801132c:	bf00      	nop
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 801132e:	2200      	movs	r2, #0
 8011330:	2138      	movs	r1, #56	; 0x38
 8011332:	68f8      	ldr	r0, [r7, #12]
 8011334:	f7f0 faaa 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 8011338:	6a3b      	ldr	r3, [r7, #32]
 801133a:	781b      	ldrb	r3, [r3, #0]
 801133c:	461a      	mov	r2, r3
 801133e:	2110      	movs	r1, #16
 8011340:	68f8      	ldr	r0, [r7, #12]
 8011342:	f7f0 faa3 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 8011346:	8a7b      	ldrh	r3, [r7, #18]
 8011348:	b2db      	uxtb	r3, r3
 801134a:	461a      	mov	r2, r3
 801134c:	2138      	movs	r1, #56	; 0x38
 801134e:	68f8      	ldr	r0, [r7, #12]
 8011350:	f7f0 fa9c 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 8011354:	68bb      	ldr	r3, [r7, #8]
 8011356:	781b      	ldrb	r3, [r3, #0]
 8011358:	f043 0320 	orr.w	r3, r3, #32
 801135c:	b2db      	uxtb	r3, r3
 801135e:	461a      	mov	r2, r3
 8011360:	21f0      	movs	r1, #240	; 0xf0
 8011362:	68f8      	ldr	r0, [r7, #12]
 8011364:	f7f0 fa92 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 8011368:	21c8      	movs	r1, #200	; 0xc8
 801136a:	68f8      	ldr	r0, [r7, #12]
 801136c:	f7f0 fae0 	bl	8001930 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011370:	4603      	mov	r3, r0
 8011372:	b25b      	sxtb	r3, r3
 8011374:	43db      	mvns	r3, r3
 8011376:	b2db      	uxtb	r3, r3
 8011378:	09db      	lsrs	r3, r3, #7
 801137a:	b2db      	uxtb	r3, r3
 801137c:	2b00      	cmp	r3, #0
 801137e:	d000      	beq.n	8011382 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f2>
 8011380:	e7f2      	b.n	8011368 <_ZN3USB11OutTransferEP6EpInfottPh+0x1d8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 8011382:	2280      	movs	r2, #128	; 0x80
 8011384:	21c8      	movs	r1, #200	; 0xc8
 8011386:	68f8      	ldr	r0, [r7, #12]
 8011388:	f7f0 fa80 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 801138c:	21f8      	movs	r1, #248	; 0xf8
 801138e:	68f8      	ldr	r0, [r7, #12]
 8011390:	f7f0 face 	bl	8001930 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011394:	4603      	mov	r3, r0
 8011396:	f003 030f 	and.w	r3, r3, #15
 801139a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 801139e:	e76d      	b.n	801127c <_ZN3USB11OutTransferEP6EpInfottPh+0xec>
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 80113a0:	8bba      	ldrh	r2, [r7, #28]
 80113a2:	8a7b      	ldrh	r3, [r7, #18]
 80113a4:	1ad3      	subs	r3, r2, r3
 80113a6:	83bb      	strh	r3, [r7, #28]
                data_p += bytes_tosend;
 80113a8:	8a7b      	ldrh	r3, [r7, #18]
 80113aa:	6a3a      	ldr	r2, [r7, #32]
 80113ac:	4413      	add	r3, r2
 80113ae:	623b      	str	r3, [r7, #32]
        while(bytes_left) {
 80113b0:	e721      	b.n	80111f6 <_ZN3USB11OutTransferEP6EpInfottPh+0x66>
        }//while( bytes_left...
breakout:
 80113b2:	bf00      	nop
 80113b4:	e000      	b.n	80113b8 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        goto breakout;
 80113b6:	bf00      	nop

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 80113b8:	21f8      	movs	r1, #248	; 0xf8
 80113ba:	68f8      	ldr	r0, [r7, #12]
 80113bc:	f7f0 fab8 	bl	8001930 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80113c0:	4603      	mov	r3, r0
 80113c2:	f003 0320 	and.w	r3, r3, #32
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d001      	beq.n	80113ce <_ZN3USB11OutTransferEP6EpInfottPh+0x23e>
 80113ca:	2101      	movs	r1, #1
 80113cc:	e000      	b.n	80113d0 <_ZN3USB11OutTransferEP6EpInfottPh+0x240>
 80113ce:	2100      	movs	r1, #0
 80113d0:	68ba      	ldr	r2, [r7, #8]
 80113d2:	7893      	ldrb	r3, [r2, #2]
 80113d4:	f361 0300 	bfi	r3, r1, #0, #1
 80113d8:	7093      	strb	r3, [r2, #2]
        return ( rcode); //should be 0 in all cases
 80113da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80113de:	4618      	mov	r0, r3
 80113e0:	3728      	adds	r7, #40	; 0x28
 80113e2:	46bd      	mov	sp, r7
 80113e4:	bd80      	pop	{r7, pc}

080113e6 <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 80113e6:	b580      	push	{r7, lr}
 80113e8:	b086      	sub	sp, #24
 80113ea:	af00      	add	r7, sp, #0
 80113ec:	6078      	str	r0, [r7, #4]
 80113ee:	4608      	mov	r0, r1
 80113f0:	4611      	mov	r1, r2
 80113f2:	461a      	mov	r2, r3
 80113f4:	4603      	mov	r3, r0
 80113f6:	70fb      	strb	r3, [r7, #3]
 80113f8:	460b      	mov	r3, r1
 80113fa:	70bb      	strb	r3, [r7, #2]
 80113fc:	4613      	mov	r3, r2
 80113fe:	803b      	strh	r3, [r7, #0]
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 8011400:	f7f0 fd68 	bl	8001ed4 <HAL_GetTick>
 8011404:	4603      	mov	r3, r0
 8011406:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 801140a:	3308      	adds	r3, #8
 801140c:	613b      	str	r3, [r7, #16]
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 801140e:	2300      	movs	r3, #0
 8011410:	75fb      	strb	r3, [r7, #23]
        uint8_t retry_count = 0;
 8011412:	2300      	movs	r3, #0
 8011414:	75bb      	strb	r3, [r7, #22]
        uint16_t nak_count = 0;
 8011416:	2300      	movs	r3, #0
 8011418:	82bb      	strh	r3, [r7, #20]

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 801141a:	f7f0 fd5b 	bl	8001ed4 <HAL_GetTick>
 801141e:	4602      	mov	r2, r0
 8011420:	693b      	ldr	r3, [r7, #16]
 8011422:	1ad3      	subs	r3, r2, r3
 8011424:	0fdb      	lsrs	r3, r3, #31
 8011426:	b2db      	uxtb	r3, r3
 8011428:	2b00      	cmp	r3, #0
 801142a:	d04c      	beq.n	80114c6 <_ZN3USB11dispatchPktEhht+0xe0>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 801142c:	78fa      	ldrb	r2, [r7, #3]
 801142e:	78bb      	ldrb	r3, [r7, #2]
 8011430:	4313      	orrs	r3, r2
 8011432:	b2db      	uxtb	r3, r3
 8011434:	461a      	mov	r2, r3
 8011436:	21f0      	movs	r1, #240	; 0xf0
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	f7f0 fa27 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 801143e:	23ff      	movs	r3, #255	; 0xff
 8011440:	75fb      	strb	r3, [r7, #23]

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 8011442:	f7f0 fd47 	bl	8001ed4 <HAL_GetTick>
 8011446:	4602      	mov	r2, r0
 8011448:	693b      	ldr	r3, [r7, #16]
 801144a:	1ad3      	subs	r3, r2, r3
 801144c:	0fdb      	lsrs	r3, r3, #31
 801144e:	b2db      	uxtb	r3, r3
 8011450:	2b00      	cmp	r3, #0
 8011452:	d010      	beq.n	8011476 <_ZN3USB11dispatchPktEhht+0x90>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 8011454:	21c8      	movs	r1, #200	; 0xc8
 8011456:	6878      	ldr	r0, [r7, #4]
 8011458:	f7f0 fa6a 	bl	8001930 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801145c:	4603      	mov	r3, r0
 801145e:	73fb      	strb	r3, [r7, #15]

                        if(tmpdata & bmHXFRDNIRQ) {
 8011460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011464:	2b00      	cmp	r3, #0
 8011466:	daec      	bge.n	8011442 <_ZN3USB11dispatchPktEhht+0x5c>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 8011468:	2280      	movs	r2, #128	; 0x80
 801146a:	21c8      	movs	r1, #200	; 0xc8
 801146c:	6878      	ldr	r0, [r7, #4]
 801146e:	f7f0 fa0d 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                rcode = 0x00;
 8011472:	2300      	movs	r3, #0
 8011474:	75fb      	strb	r3, [r7, #23]
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 8011476:	21f8      	movs	r1, #248	; 0xf8
 8011478:	6878      	ldr	r0, [r7, #4]
 801147a:	f7f0 fa59 	bl	8001930 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801147e:	4603      	mov	r3, r0
 8011480:	f003 030f 	and.w	r3, r3, #15
 8011484:	75fb      	strb	r3, [r7, #23]

                switch(rcode) {
 8011486:	7dfb      	ldrb	r3, [r7, #23]
 8011488:	2b04      	cmp	r3, #4
 801148a:	d002      	beq.n	8011492 <_ZN3USB11dispatchPktEhht+0xac>
 801148c:	2b0e      	cmp	r3, #14
 801148e:	d00c      	beq.n	80114aa <_ZN3USB11dispatchPktEhht+0xc4>
 8011490:	e013      	b.n	80114ba <_ZN3USB11dispatchPktEhht+0xd4>
                        case hrNAK:
                                nak_count++;
 8011492:	8abb      	ldrh	r3, [r7, #20]
 8011494:	3301      	adds	r3, #1
 8011496:	82bb      	strh	r3, [r7, #20]
                                if(nak_limit && (nak_count == nak_limit))
 8011498:	883b      	ldrh	r3, [r7, #0]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d00f      	beq.n	80114be <_ZN3USB11dispatchPktEhht+0xd8>
 801149e:	8aba      	ldrh	r2, [r7, #20]
 80114a0:	883b      	ldrh	r3, [r7, #0]
 80114a2:	429a      	cmp	r2, r3
 80114a4:	d10b      	bne.n	80114be <_ZN3USB11dispatchPktEhht+0xd8>
                                        return (rcode);
 80114a6:	7dfb      	ldrb	r3, [r7, #23]
 80114a8:	e00e      	b.n	80114c8 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 80114aa:	7dbb      	ldrb	r3, [r7, #22]
 80114ac:	3301      	adds	r3, #1
 80114ae:	75bb      	strb	r3, [r7, #22]
                                if(retry_count == USB_RETRY_LIMIT)
 80114b0:	7dbb      	ldrb	r3, [r7, #22]
 80114b2:	2b03      	cmp	r3, #3
 80114b4:	d105      	bne.n	80114c2 <_ZN3USB11dispatchPktEhht+0xdc>
                                        return (rcode);
 80114b6:	7dfb      	ldrb	r3, [r7, #23]
 80114b8:	e006      	b.n	80114c8 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        default:
                                return (rcode);
 80114ba:	7dfb      	ldrb	r3, [r7, #23]
 80114bc:	e004      	b.n	80114c8 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
 80114be:	bf00      	nop
 80114c0:	e7ab      	b.n	801141a <_ZN3USB11dispatchPktEhht+0x34>
                                break;
 80114c2:	bf00      	nop
        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 80114c4:	e7a9      	b.n	801141a <_ZN3USB11dispatchPktEhht+0x34>
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 80114c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80114c8:	4618      	mov	r0, r3
 80114ca:	3718      	adds	r7, #24
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bd80      	pop	{r7, pc}

080114d0 <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b084      	sub	sp, #16
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 80114d8:	2300      	movs	r3, #0
 80114da:	73fb      	strb	r3, [r7, #15]

        MAX3421E::Task();
 80114dc:	6878      	ldr	r0, [r7, #4]
 80114de:	f000 fdfd 	bl	80120dc <_ZN8MAX3421eI3P102P9E4TaskEv>

        tmpdata = getVbusState();
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f000 fe12 	bl	801210c <_ZN8MAX3421eI3P102P9E12getVbusStateEv>
 80114e8:	4603      	mov	r3, r0
 80114ea:	733b      	strb	r3, [r7, #12]

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 80114ec:	7b3b      	ldrb	r3, [r7, #12]
 80114ee:	2b03      	cmp	r3, #3
 80114f0:	d82e      	bhi.n	8011550 <_ZN3USB4TaskEv+0x80>
 80114f2:	a201      	add	r2, pc, #4	; (adr r2, 80114f8 <_ZN3USB4TaskEv+0x28>)
 80114f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114f8:	08011515 	.word	0x08011515
 80114fc:	08011509 	.word	0x08011509
 8011500:	08011531 	.word	0x08011531
 8011504:	0801152d 	.word	0x0801152d
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 8011508:	4bbf      	ldr	r3, [pc, #764]	; (8011808 <_ZN3USB4TaskEv+0x338>)
 801150a:	2213      	movs	r2, #19
 801150c:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 801150e:	2300      	movs	r3, #0
 8011510:	73fb      	strb	r3, [r7, #15]
                        break;
 8011512:	e01d      	b.n	8011550 <_ZN3USB4TaskEv+0x80>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 8011514:	4bbc      	ldr	r3, [pc, #752]	; (8011808 <_ZN3USB4TaskEv+0x338>)
 8011516:	781b      	ldrb	r3, [r3, #0]
 8011518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801151c:	2b10      	cmp	r3, #16
 801151e:	d002      	beq.n	8011526 <_ZN3USB4TaskEv+0x56>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 8011520:	4bb9      	ldr	r3, [pc, #740]	; (8011808 <_ZN3USB4TaskEv+0x338>)
 8011522:	2211      	movs	r2, #17
 8011524:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 8011526:	2300      	movs	r3, #0
 8011528:	73fb      	strb	r3, [r7, #15]
                        break;
 801152a:	e011      	b.n	8011550 <_ZN3USB4TaskEv+0x80>
                case LSHOST:

                        lowspeed = true;
 801152c:	2301      	movs	r3, #1
 801152e:	73fb      	strb	r3, [r7, #15]
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 8011530:	4bb5      	ldr	r3, [pc, #724]	; (8011808 <_ZN3USB4TaskEv+0x338>)
 8011532:	781b      	ldrb	r3, [r3, #0]
 8011534:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011538:	2b10      	cmp	r3, #16
 801153a:	d108      	bne.n	801154e <_ZN3USB4TaskEv+0x7e>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 801153c:	f7f0 fcca 	bl	8001ed4 <HAL_GetTick>
 8011540:	4603      	mov	r3, r0
 8011542:	33c8      	adds	r3, #200	; 0xc8
 8011544:	4ab1      	ldr	r2, [pc, #708]	; (801180c <_ZN3USB4TaskEv+0x33c>)
 8011546:	6013      	str	r3, [r2, #0]
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 8011548:	4baf      	ldr	r3, [pc, #700]	; (8011808 <_ZN3USB4TaskEv+0x338>)
 801154a:	2220      	movs	r2, #32
 801154c:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 801154e:	bf00      	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 8011550:	2300      	movs	r3, #0
 8011552:	73bb      	strb	r3, [r7, #14]
 8011554:	7bbb      	ldrb	r3, [r7, #14]
 8011556:	2b0f      	cmp	r3, #15
 8011558:	d81b      	bhi.n	8011592 <_ZN3USB4TaskEv+0xc2>
                if(devConfig[i])
 801155a:	7bba      	ldrb	r2, [r7, #14]
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	321e      	adds	r2, #30
 8011560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d010      	beq.n	801158a <_ZN3USB4TaskEv+0xba>
                        rcode = devConfig[i]->Poll();
 8011568:	7bba      	ldrb	r2, [r7, #14]
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	321e      	adds	r2, #30
 801156e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011572:	7bba      	ldrb	r2, [r7, #14]
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	321e      	adds	r2, #30
 8011578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	330c      	adds	r3, #12
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	4608      	mov	r0, r1
 8011584:	4798      	blx	r3
 8011586:	4603      	mov	r3, r0
 8011588:	72fb      	strb	r3, [r7, #11]
        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 801158a:	7bbb      	ldrb	r3, [r7, #14]
 801158c:	3301      	adds	r3, #1
 801158e:	73bb      	strb	r3, [r7, #14]
 8011590:	e7e0      	b.n	8011554 <_ZN3USB4TaskEv+0x84>

        switch(usb_task_state) {
 8011592:	4b9d      	ldr	r3, [pc, #628]	; (8011808 <_ZN3USB4TaskEv+0x338>)
 8011594:	781b      	ldrb	r3, [r3, #0]
 8011596:	2ba0      	cmp	r3, #160	; 0xa0
 8011598:	f000 8123 	beq.w	80117e2 <_ZN3USB4TaskEv+0x312>
 801159c:	2ba0      	cmp	r3, #160	; 0xa0
 801159e:	f300 812f 	bgt.w	8011800 <_ZN3USB4TaskEv+0x330>
 80115a2:	2b90      	cmp	r3, #144	; 0x90
 80115a4:	f000 811f 	beq.w	80117e6 <_ZN3USB4TaskEv+0x316>
 80115a8:	2b90      	cmp	r3, #144	; 0x90
 80115aa:	f300 8129 	bgt.w	8011800 <_ZN3USB4TaskEv+0x330>
 80115ae:	2b80      	cmp	r3, #128	; 0x80
 80115b0:	f000 80fe 	beq.w	80117b0 <_ZN3USB4TaskEv+0x2e0>
 80115b4:	2b80      	cmp	r3, #128	; 0x80
 80115b6:	f300 8123 	bgt.w	8011800 <_ZN3USB4TaskEv+0x330>
 80115ba:	2b51      	cmp	r3, #81	; 0x51
 80115bc:	f000 80ea 	beq.w	8011794 <_ZN3USB4TaskEv+0x2c4>
 80115c0:	2b51      	cmp	r3, #81	; 0x51
 80115c2:	f300 811d 	bgt.w	8011800 <_ZN3USB4TaskEv+0x330>
 80115c6:	2b40      	cmp	r3, #64	; 0x40
 80115c8:	dc6a      	bgt.n	80116a0 <_ZN3USB4TaskEv+0x1d0>
 80115ca:	2b11      	cmp	r3, #17
 80115cc:	f2c0 8118 	blt.w	8011800 <_ZN3USB4TaskEv+0x330>
 80115d0:	3b11      	subs	r3, #17
 80115d2:	2b2f      	cmp	r3, #47	; 0x2f
 80115d4:	f200 8114 	bhi.w	8011800 <_ZN3USB4TaskEv+0x330>
 80115d8:	a201      	add	r2, pc, #4	; (adr r2, 80115e0 <_ZN3USB4TaskEv+0x110>)
 80115da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115de:	bf00      	nop
 80115e0:	080116a7 	.word	0x080116a7
 80115e4:	080117eb 	.word	0x080117eb
 80115e8:	080117eb 	.word	0x080117eb
 80115ec:	08011801 	.word	0x08011801
 80115f0:	08011801 	.word	0x08011801
 80115f4:	08011801 	.word	0x08011801
 80115f8:	08011801 	.word	0x08011801
 80115fc:	08011801 	.word	0x08011801
 8011600:	08011801 	.word	0x08011801
 8011604:	08011801 	.word	0x08011801
 8011608:	08011801 	.word	0x08011801
 801160c:	08011801 	.word	0x08011801
 8011610:	08011801 	.word	0x08011801
 8011614:	08011801 	.word	0x08011801
 8011618:	08011801 	.word	0x08011801
 801161c:	080116f7 	.word	0x080116f7
 8011620:	08011801 	.word	0x08011801
 8011624:	08011801 	.word	0x08011801
 8011628:	08011801 	.word	0x08011801
 801162c:	08011801 	.word	0x08011801
 8011630:	08011801 	.word	0x08011801
 8011634:	08011801 	.word	0x08011801
 8011638:	08011801 	.word	0x08011801
 801163c:	08011801 	.word	0x08011801
 8011640:	08011801 	.word	0x08011801
 8011644:	08011801 	.word	0x08011801
 8011648:	08011801 	.word	0x08011801
 801164c:	08011801 	.word	0x08011801
 8011650:	08011801 	.word	0x08011801
 8011654:	08011801 	.word	0x08011801
 8011658:	08011801 	.word	0x08011801
 801165c:	08011713 	.word	0x08011713
 8011660:	08011801 	.word	0x08011801
 8011664:	08011801 	.word	0x08011801
 8011668:	08011801 	.word	0x08011801
 801166c:	08011801 	.word	0x08011801
 8011670:	08011801 	.word	0x08011801
 8011674:	08011801 	.word	0x08011801
 8011678:	08011801 	.word	0x08011801
 801167c:	08011801 	.word	0x08011801
 8011680:	08011801 	.word	0x08011801
 8011684:	08011801 	.word	0x08011801
 8011688:	08011801 	.word	0x08011801
 801168c:	08011801 	.word	0x08011801
 8011690:	08011801 	.word	0x08011801
 8011694:	08011801 	.word	0x08011801
 8011698:	08011801 	.word	0x08011801
 801169c:	08011725 	.word	0x08011725
 80116a0:	2b50      	cmp	r3, #80	; 0x50
 80116a2:	d05f      	beq.n	8011764 <_ZN3USB4TaskEv+0x294>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 80116a4:	e0ac      	b.n	8011800 <_ZN3USB4TaskEv+0x330>
                        init();
 80116a6:	6878      	ldr	r0, [r7, #4]
 80116a8:	f7ff fa8e 	bl	8010bc8 <_ZN3USB4initEv>
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 80116ac:	2300      	movs	r3, #0
 80116ae:	737b      	strb	r3, [r7, #13]
 80116b0:	7b7b      	ldrb	r3, [r7, #13]
 80116b2:	2b0f      	cmp	r3, #15
 80116b4:	d81b      	bhi.n	80116ee <_ZN3USB4TaskEv+0x21e>
                                if(devConfig[i])
 80116b6:	7b7a      	ldrb	r2, [r7, #13]
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	321e      	adds	r2, #30
 80116bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d010      	beq.n	80116e6 <_ZN3USB4TaskEv+0x216>
                                        rcode = devConfig[i]->Release();
 80116c4:	7b7a      	ldrb	r2, [r7, #13]
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	321e      	adds	r2, #30
 80116ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80116ce:	7b7a      	ldrb	r2, [r7, #13]
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	321e      	adds	r2, #30
 80116d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	3308      	adds	r3, #8
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	4608      	mov	r0, r1
 80116e0:	4798      	blx	r3
 80116e2:	4603      	mov	r3, r0
 80116e4:	72fb      	strb	r3, [r7, #11]
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 80116e6:	7b7b      	ldrb	r3, [r7, #13]
 80116e8:	3301      	adds	r3, #1
 80116ea:	737b      	strb	r3, [r7, #13]
 80116ec:	e7e0      	b.n	80116b0 <_ZN3USB4TaskEv+0x1e0>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 80116ee:	4b46      	ldr	r3, [pc, #280]	; (8011808 <_ZN3USB4TaskEv+0x338>)
 80116f0:	2212      	movs	r2, #18
 80116f2:	701a      	strb	r2, [r3, #0]
                        break;
 80116f4:	e084      	b.n	8011800 <_ZN3USB4TaskEv+0x330>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 80116f6:	f7f0 fbed 	bl	8001ed4 <HAL_GetTick>
 80116fa:	4602      	mov	r2, r0
 80116fc:	4b43      	ldr	r3, [pc, #268]	; (801180c <_ZN3USB4TaskEv+0x33c>)
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	1ad3      	subs	r3, r2, r3
 8011702:	43db      	mvns	r3, r3
 8011704:	0fdb      	lsrs	r3, r3, #31
 8011706:	b2db      	uxtb	r3, r3
 8011708:	2b00      	cmp	r3, #0
 801170a:	d070      	beq.n	80117ee <_ZN3USB4TaskEv+0x31e>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 801170c:	4b3e      	ldr	r3, [pc, #248]	; (8011808 <_ZN3USB4TaskEv+0x338>)
 801170e:	2230      	movs	r2, #48	; 0x30
 8011710:	701a      	strb	r2, [r3, #0]
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8011712:	2201      	movs	r2, #1
 8011714:	21e8      	movs	r1, #232	; 0xe8
 8011716:	6878      	ldr	r0, [r7, #4]
 8011718:	f7f0 f8b8 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 801171c:	4b3a      	ldr	r3, [pc, #232]	; (8011808 <_ZN3USB4TaskEv+0x338>)
 801171e:	2240      	movs	r2, #64	; 0x40
 8011720:	701a      	strb	r2, [r3, #0]
                        break;
 8011722:	e06d      	b.n	8011800 <_ZN3USB4TaskEv+0x330>
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 8011724:	21e8      	movs	r1, #232	; 0xe8
 8011726:	6878      	ldr	r0, [r7, #4]
 8011728:	f7f0 f902 	bl	8001930 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801172c:	4603      	mov	r3, r0
 801172e:	f003 0301 	and.w	r3, r3, #1
 8011732:	2b00      	cmp	r3, #0
 8011734:	bf0c      	ite	eq
 8011736:	2301      	moveq	r3, #1
 8011738:	2300      	movne	r3, #0
 801173a:	b2db      	uxtb	r3, r3
 801173c:	2b00      	cmp	r3, #0
 801173e:	d058      	beq.n	80117f2 <_ZN3USB4TaskEv+0x322>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 8011740:	21d8      	movs	r1, #216	; 0xd8
 8011742:	6878      	ldr	r0, [r7, #4]
 8011744:	f7f0 f8f4 	bl	8001930 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011748:	4603      	mov	r3, r0
 801174a:	f043 0308 	orr.w	r3, r3, #8
 801174e:	733b      	strb	r3, [r7, #12]
                                regWr(rMODE, tmpdata);
 8011750:	7b3b      	ldrb	r3, [r7, #12]
 8011752:	461a      	mov	r2, r3
 8011754:	21d8      	movs	r1, #216	; 0xd8
 8011756:	6878      	ldr	r0, [r7, #4]
 8011758:	f7f0 f898 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 801175c:	4b2a      	ldr	r3, [pc, #168]	; (8011808 <_ZN3USB4TaskEv+0x338>)
 801175e:	2250      	movs	r2, #80	; 0x50
 8011760:	701a      	strb	r2, [r3, #0]
                        break;
 8011762:	e046      	b.n	80117f2 <_ZN3USB4TaskEv+0x322>
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 8011764:	21c8      	movs	r1, #200	; 0xc8
 8011766:	6878      	ldr	r0, [r7, #4]
 8011768:	f7f0 f8e2 	bl	8001930 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801176c:	4603      	mov	r3, r0
 801176e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011772:	2b00      	cmp	r3, #0
 8011774:	bf14      	ite	ne
 8011776:	2301      	movne	r3, #1
 8011778:	2300      	moveq	r3, #0
 801177a:	b2db      	uxtb	r3, r3
 801177c:	2b00      	cmp	r3, #0
 801177e:	d03a      	beq.n	80117f6 <_ZN3USB4TaskEv+0x326>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 8011780:	4b21      	ldr	r3, [pc, #132]	; (8011808 <_ZN3USB4TaskEv+0x338>)
 8011782:	2251      	movs	r2, #81	; 0x51
 8011784:	701a      	strb	r2, [r3, #0]
                                delay = (uint32_t)millis() + 20;
 8011786:	f7f0 fba5 	bl	8001ed4 <HAL_GetTick>
 801178a:	4603      	mov	r3, r0
 801178c:	3314      	adds	r3, #20
 801178e:	4a1f      	ldr	r2, [pc, #124]	; (801180c <_ZN3USB4TaskEv+0x33c>)
 8011790:	6013      	str	r3, [r2, #0]
                        break;
 8011792:	e030      	b.n	80117f6 <_ZN3USB4TaskEv+0x326>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 8011794:	f7f0 fb9e 	bl	8001ed4 <HAL_GetTick>
 8011798:	4602      	mov	r2, r0
 801179a:	4b1c      	ldr	r3, [pc, #112]	; (801180c <_ZN3USB4TaskEv+0x33c>)
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	1ad3      	subs	r3, r2, r3
 80117a0:	43db      	mvns	r3, r3
 80117a2:	0fdb      	lsrs	r3, r3, #31
 80117a4:	b2db      	uxtb	r3, r3
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d027      	beq.n	80117fa <_ZN3USB4TaskEv+0x32a>
 80117aa:	4b17      	ldr	r3, [pc, #92]	; (8011808 <_ZN3USB4TaskEv+0x338>)
 80117ac:	2280      	movs	r2, #128	; 0x80
 80117ae:	701a      	strb	r2, [r3, #0]
                        rcode = Configuring(0, 0, lowspeed);
 80117b0:	7bfb      	ldrb	r3, [r7, #15]
 80117b2:	2200      	movs	r2, #0
 80117b4:	2100      	movs	r1, #0
 80117b6:	6878      	ldr	r0, [r7, #4]
 80117b8:	f000 f920 	bl	80119fc <_ZN3USB11ConfiguringEhhb>
 80117bc:	4603      	mov	r3, r0
 80117be:	72fb      	strb	r3, [r7, #11]
                        if(rcode) {
 80117c0:	7afb      	ldrb	r3, [r7, #11]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d009      	beq.n	80117da <_ZN3USB4TaskEv+0x30a>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 80117c6:	7afb      	ldrb	r3, [r7, #11]
 80117c8:	2bd2      	cmp	r3, #210	; 0xd2
 80117ca:	d018      	beq.n	80117fe <_ZN3USB4TaskEv+0x32e>
                                        usb_error = rcode;
 80117cc:	4a10      	ldr	r2, [pc, #64]	; (8011810 <_ZN3USB4TaskEv+0x340>)
 80117ce:	7afb      	ldrb	r3, [r7, #11]
 80117d0:	7013      	strb	r3, [r2, #0]
                                        usb_task_state = USB_STATE_ERROR;
 80117d2:	4b0d      	ldr	r3, [pc, #52]	; (8011808 <_ZN3USB4TaskEv+0x338>)
 80117d4:	22a0      	movs	r2, #160	; 0xa0
 80117d6:	701a      	strb	r2, [r3, #0]
                        break;
 80117d8:	e011      	b.n	80117fe <_ZN3USB4TaskEv+0x32e>
                                usb_task_state = USB_STATE_RUNNING;
 80117da:	4b0b      	ldr	r3, [pc, #44]	; (8011808 <_ZN3USB4TaskEv+0x338>)
 80117dc:	2290      	movs	r2, #144	; 0x90
 80117de:	701a      	strb	r2, [r3, #0]
                        break;
 80117e0:	e00d      	b.n	80117fe <_ZN3USB4TaskEv+0x32e>
                        break;
 80117e2:	bf00      	nop
 80117e4:	e00c      	b.n	8011800 <_ZN3USB4TaskEv+0x330>
                        break;
 80117e6:	bf00      	nop
 80117e8:	e00a      	b.n	8011800 <_ZN3USB4TaskEv+0x330>
                        break;
 80117ea:	bf00      	nop
 80117ec:	e008      	b.n	8011800 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 80117ee:	bf00      	nop
 80117f0:	e006      	b.n	8011800 <_ZN3USB4TaskEv+0x330>
                        break;
 80117f2:	bf00      	nop
 80117f4:	e004      	b.n	8011800 <_ZN3USB4TaskEv+0x330>
                        break;
 80117f6:	bf00      	nop
 80117f8:	e002      	b.n	8011800 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 80117fa:	bf00      	nop
 80117fc:	e000      	b.n	8011800 <_ZN3USB4TaskEv+0x330>
                        break;
 80117fe:	bf00      	nop
}
 8011800:	bf00      	nop
 8011802:	3710      	adds	r7, #16
 8011804:	46bd      	mov	sp, r7
 8011806:	bd80      	pop	{r7, pc}
 8011808:	20004f89 	.word	0x20004f89
 801180c:	20004f8c 	.word	0x20004f8c
 8011810:	20004f88 	.word	0x20004f88

08011814 <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 8011814:	b580      	push	{r7, lr}
 8011816:	b086      	sub	sp, #24
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
 801181c:	4608      	mov	r0, r1
 801181e:	4611      	mov	r1, r2
 8011820:	461a      	mov	r2, r3
 8011822:	4603      	mov	r3, r0
 8011824:	70fb      	strb	r3, [r7, #3]
 8011826:	460b      	mov	r3, r1
 8011828:	70bb      	strb	r3, [r7, #2]
 801182a:	4613      	mov	r3, r2
 801182c:	707b      	strb	r3, [r7, #1]
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 801182e:	2300      	movs	r3, #0
 8011830:	617b      	str	r3, [r7, #20]
 8011832:	2300      	movs	r3, #0
 8011834:	613b      	str	r3, [r7, #16]

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	2100      	movs	r1, #0
 801183a:	4618      	mov	r0, r3
 801183c:	f000 fbc0 	bl	8011fc0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8011840:	6178      	str	r0, [r7, #20]

        if(!p0)
 8011842:	697b      	ldr	r3, [r7, #20]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d101      	bne.n	801184c <_ZN3USB17DefaultAddressingEhhb+0x38>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8011848:	23d6      	movs	r3, #214	; 0xd6
 801184a:	e03a      	b.n	80118c2 <_ZN3USB17DefaultAddressingEhhb+0xae>

        if(!p0->epinfo)
 801184c:	697b      	ldr	r3, [r7, #20]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d101      	bne.n	8011858 <_ZN3USB17DefaultAddressingEhhb+0x44>
                return USB_ERROR_EPINFO_IS_NULL;
 8011854:	23d7      	movs	r3, #215	; 0xd7
 8011856:	e034      	b.n	80118c2 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p0->lowspeed = (lowspeed) ? true : false;
 8011858:	697b      	ldr	r3, [r7, #20]
 801185a:	787a      	ldrb	r2, [r7, #1]
 801185c:	719a      	strb	r2, [r3, #6]

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 801185e:	6878      	ldr	r0, [r7, #4]
 8011860:	78bb      	ldrb	r3, [r7, #2]
 8011862:	78f9      	ldrb	r1, [r7, #3]
 8011864:	2200      	movs	r2, #0
 8011866:	f000 fc5f 	bl	8012128 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 801186a:	4603      	mov	r3, r0
 801186c:	73fb      	strb	r3, [r7, #15]

        if(!bAddress)
 801186e:	7bfb      	ldrb	r3, [r7, #15]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d101      	bne.n	8011878 <_ZN3USB17DefaultAddressingEhhb+0x64>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 8011874:	23d4      	movs	r3, #212	; 0xd4
 8011876:	e024      	b.n	80118c2 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p = addrPool.GetUsbDevicePtr(bAddress);
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	7bfa      	ldrb	r2, [r7, #15]
 801187c:	4611      	mov	r1, r2
 801187e:	4618      	mov	r0, r3
 8011880:	f000 fb9e 	bl	8011fc0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8011884:	6138      	str	r0, [r7, #16]

        if(!p)
 8011886:	693b      	ldr	r3, [r7, #16]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d101      	bne.n	8011890 <_ZN3USB17DefaultAddressingEhhb+0x7c>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 801188c:	23d6      	movs	r3, #214	; 0xd6
 801188e:	e018      	b.n	80118c2 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p->lowspeed = lowspeed;
 8011890:	693b      	ldr	r3, [r7, #16]
 8011892:	787a      	ldrb	r2, [r7, #1]
 8011894:	719a      	strb	r2, [r3, #6]

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 8011896:	7bfb      	ldrb	r3, [r7, #15]
 8011898:	2200      	movs	r2, #0
 801189a:	2100      	movs	r1, #0
 801189c:	6878      	ldr	r0, [r7, #4]
 801189e:	f000 fae3 	bl	8011e68 <_ZN3USB7setAddrEhhh>
 80118a2:	4603      	mov	r3, r0
 80118a4:	73bb      	strb	r3, [r7, #14]

        if(rcode) {
 80118a6:	7bbb      	ldrb	r3, [r7, #14]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d009      	beq.n	80118c0 <_ZN3USB17DefaultAddressingEhhb+0xac>
                addrPool.FreeAddress(bAddress);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	7bfa      	ldrb	r2, [r7, #15]
 80118b0:	4611      	mov	r1, r2
 80118b2:	4618      	mov	r0, r3
 80118b4:	f000 fcd0 	bl	8012258 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 80118b8:	2300      	movs	r3, #0
 80118ba:	73fb      	strb	r3, [r7, #15]
                return rcode;
 80118bc:	7bbb      	ldrb	r3, [r7, #14]
 80118be:	e000      	b.n	80118c2 <_ZN3USB17DefaultAddressingEhhb+0xae>
        }
        return 0;
 80118c0:	2300      	movs	r3, #0
};
 80118c2:	4618      	mov	r0, r3
 80118c4:	3718      	adds	r7, #24
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bd80      	pop	{r7, pc}

080118ca <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 80118ca:	b590      	push	{r4, r7, lr}
 80118cc:	b085      	sub	sp, #20
 80118ce:	af00      	add	r7, sp, #0
 80118d0:	6078      	str	r0, [r7, #4]
 80118d2:	4608      	mov	r0, r1
 80118d4:	4611      	mov	r1, r2
 80118d6:	461a      	mov	r2, r3
 80118d8:	4603      	mov	r3, r0
 80118da:	70fb      	strb	r3, [r7, #3]
 80118dc:	460b      	mov	r3, r1
 80118de:	70bb      	strb	r3, [r7, #2]
 80118e0:	4613      	mov	r3, r2
 80118e2:	707b      	strb	r3, [r7, #1]
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 80118e4:	2300      	movs	r3, #0
 80118e6:	73fb      	strb	r3, [r7, #15]

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 80118e8:	78fa      	ldrb	r2, [r7, #3]
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	321e      	adds	r2, #30
 80118ee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80118f2:	78fa      	ldrb	r2, [r7, #3]
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	321e      	adds	r2, #30
 80118f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	3304      	adds	r3, #4
 8011900:	681c      	ldr	r4, [r3, #0]
 8011902:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011906:	787a      	ldrb	r2, [r7, #1]
 8011908:	78b9      	ldrb	r1, [r7, #2]
 801190a:	47a0      	blx	r4
 801190c:	4603      	mov	r3, r0
 801190e:	73bb      	strb	r3, [r7, #14]
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 8011910:	7bbb      	ldrb	r3, [r7, #14]
 8011912:	2be0      	cmp	r3, #224	; 0xe0
 8011914:	d11c      	bne.n	8011950 <_ZN3USB13AttemptConfigEhhhb+0x86>
                if(parent == 0) {
 8011916:	78bb      	ldrb	r3, [r7, #2]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d108      	bne.n	801192e <_ZN3USB13AttemptConfigEhhhb+0x64>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 801191c:	2201      	movs	r2, #1
 801191e:	21e8      	movs	r1, #232	; 0xe8
 8011920:	6878      	ldr	r0, [r7, #4]
 8011922:	f7ef ffb3 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 8011926:	2066      	movs	r0, #102	; 0x66
 8011928:	f7f0 fae0 	bl	8001eec <HAL_Delay>
 801192c:	e022      	b.n	8011974 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 801192e:	78ba      	ldrb	r2, [r7, #2]
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	321e      	adds	r2, #30
 8011934:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011938:	78ba      	ldrb	r2, [r7, #2]
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	321e      	adds	r2, #30
 801193e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	3314      	adds	r3, #20
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	787a      	ldrb	r2, [r7, #1]
 801194a:	4611      	mov	r1, r2
 801194c:	4798      	blx	r3
 801194e:	e011      	b.n	8011974 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 8011950:	7bbb      	ldrb	r3, [r7, #14]
 8011952:	2b0d      	cmp	r3, #13
 8011954:	d109      	bne.n	801196a <_ZN3USB13AttemptConfigEhhhb+0xa0>
 8011956:	7bfb      	ldrb	r3, [r7, #15]
 8011958:	2b02      	cmp	r3, #2
 801195a:	d806      	bhi.n	801196a <_ZN3USB13AttemptConfigEhhhb+0xa0>
                delay(100);
 801195c:	2064      	movs	r0, #100	; 0x64
 801195e:	f7f0 fac5 	bl	8001eec <HAL_Delay>
                retries++;
 8011962:	7bfb      	ldrb	r3, [r7, #15]
 8011964:	3301      	adds	r3, #1
 8011966:	73fb      	strb	r3, [r7, #15]
                goto again;
 8011968:	e7be      	b.n	80118e8 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        } else if(rcode)
 801196a:	7bbb      	ldrb	r3, [r7, #14]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d001      	beq.n	8011974 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                return rcode;
 8011970:	7bbb      	ldrb	r3, [r7, #14]
 8011972:	e03f      	b.n	80119f4 <_ZN3USB13AttemptConfigEhhhb+0x12a>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 8011974:	78fa      	ldrb	r2, [r7, #3]
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	321e      	adds	r2, #30
 801197a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801197e:	78fa      	ldrb	r2, [r7, #3]
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	321e      	adds	r2, #30
 8011984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	681c      	ldr	r4, [r3, #0]
 801198c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011990:	787a      	ldrb	r2, [r7, #1]
 8011992:	78b9      	ldrb	r1, [r7, #2]
 8011994:	47a0      	blx	r4
 8011996:	4603      	mov	r3, r0
 8011998:	73bb      	strb	r3, [r7, #14]
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 801199a:	7bbb      	ldrb	r3, [r7, #14]
 801199c:	2b0d      	cmp	r3, #13
 801199e:	d109      	bne.n	80119b4 <_ZN3USB13AttemptConfigEhhhb+0xea>
 80119a0:	7bfb      	ldrb	r3, [r7, #15]
 80119a2:	2b02      	cmp	r3, #2
 80119a4:	d806      	bhi.n	80119b4 <_ZN3USB13AttemptConfigEhhhb+0xea>
                delay(100);
 80119a6:	2064      	movs	r0, #100	; 0x64
 80119a8:	f7f0 faa0 	bl	8001eec <HAL_Delay>
                retries++;
 80119ac:	7bfb      	ldrb	r3, [r7, #15]
 80119ae:	3301      	adds	r3, #1
 80119b0:	73fb      	strb	r3, [r7, #15]
                goto again;
 80119b2:	e799      	b.n	80118e8 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        }
        if(rcode) {
 80119b4:	7bbb      	ldrb	r3, [r7, #14]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d01b      	beq.n	80119f2 <_ZN3USB13AttemptConfigEhhhb+0x128>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 80119ba:	78bb      	ldrb	r3, [r7, #2]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d108      	bne.n	80119d2 <_ZN3USB13AttemptConfigEhhhb+0x108>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 80119c0:	2201      	movs	r2, #1
 80119c2:	21e8      	movs	r1, #232	; 0xe8
 80119c4:	6878      	ldr	r0, [r7, #4]
 80119c6:	f7ef ff61 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 80119ca:	2066      	movs	r0, #102	; 0x66
 80119cc:	f7f0 fa8e 	bl	8001eec <HAL_Delay>
 80119d0:	e00f      	b.n	80119f2 <_ZN3USB13AttemptConfigEhhhb+0x128>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 80119d2:	78ba      	ldrb	r2, [r7, #2]
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	321e      	adds	r2, #30
 80119d8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80119dc:	78ba      	ldrb	r2, [r7, #2]
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	321e      	adds	r2, #30
 80119e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	3314      	adds	r3, #20
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	787a      	ldrb	r2, [r7, #1]
 80119ee:	4611      	mov	r1, r2
 80119f0:	4798      	blx	r3
                }
        }
        return rcode;
 80119f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80119f4:	4618      	mov	r0, r3
 80119f6:	3714      	adds	r7, #20
 80119f8:	46bd      	mov	sp, r7
 80119fa:	bd90      	pop	{r4, r7, pc}

080119fc <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b090      	sub	sp, #64	; 0x40
 8011a00:	af02      	add	r7, sp, #8
 8011a02:	6078      	str	r0, [r7, #4]
 8011a04:	4608      	mov	r0, r1
 8011a06:	4611      	mov	r1, r2
 8011a08:	461a      	mov	r2, r3
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	70fb      	strb	r3, [r7, #3]
 8011a0e:	460b      	mov	r3, r1
 8011a10:	70bb      	strb	r3, [r7, #2]
 8011a12:	4613      	mov	r3, r2
 8011a14:	707b      	strb	r3, [r7, #1]
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 8011a16:	2300      	movs	r3, #0
 8011a18:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 8011a1c:	f107 030c 	add.w	r3, r7, #12
 8011a20:	633b      	str	r3, [r7, #48]	; 0x30
        UsbDevice *p = NULL;
 8011a22:	2300      	movs	r3, #0
 8011a24:	62fb      	str	r3, [r7, #44]	; 0x2c
        EpInfo *oldep_ptr = NULL;
 8011a26:	2300      	movs	r3, #0
 8011a28:	62bb      	str	r3, [r7, #40]	; 0x28
        EpInfo epInfo;

        epInfo.epAddr = 0;
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	723b      	strb	r3, [r7, #8]
        epInfo.maxPktSize = 8;
 8011a2e:	2308      	movs	r3, #8
 8011a30:	727b      	strb	r3, [r7, #9]
        epInfo.bmSndToggle = 0;
 8011a32:	7abb      	ldrb	r3, [r7, #10]
 8011a34:	f36f 0300 	bfc	r3, #0, #1
 8011a38:	72bb      	strb	r3, [r7, #10]
        epInfo.bmRcvToggle = 0;
 8011a3a:	7abb      	ldrb	r3, [r7, #10]
 8011a3c:	f36f 0341 	bfc	r3, #1, #1
 8011a40:	72bb      	strb	r3, [r7, #10]
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 8011a42:	7abb      	ldrb	r3, [r7, #10]
 8011a44:	220f      	movs	r2, #15
 8011a46:	f362 0387 	bfi	r3, r2, #2, #6
 8011a4a:	72bb      	strb	r3, [r7, #10]

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 8011a4c:	6878      	ldr	r0, [r7, #4]
 8011a4e:	f7fa fd13 	bl	800c478 <_ZN3USB14GetAddressPoolEv>
 8011a52:	6278      	str	r0, [r7, #36]	; 0x24
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 8011a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	2100      	movs	r1, #0
 8011a5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011a5e:	4798      	blx	r3
 8011a60:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(!p) {
 8011a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d101      	bne.n	8011a6c <_ZN3USB11ConfiguringEhhb+0x70>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8011a68:	23d6      	movs	r3, #214	; 0xd6
 8011a6a:	e15c      	b.n	8011d26 <_ZN3USB11ConfiguringEhhb+0x32a>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 8011a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	62bb      	str	r3, [r7, #40]	; 0x28

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 8011a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a74:	f107 0208 	add.w	r2, r7, #8
 8011a78:	601a      	str	r2, [r3, #0]

        p->lowspeed = lowspeed;
 8011a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a7c:	787a      	ldrb	r2, [r7, #1]
 8011a7e:	719a      	strb	r2, [r3, #6]
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 8011a80:	f107 030c 	add.w	r3, r7, #12
 8011a84:	9300      	str	r3, [sp, #0]
 8011a86:	2312      	movs	r3, #18
 8011a88:	2200      	movs	r2, #0
 8011a8a:	2100      	movs	r1, #0
 8011a8c:	6878      	ldr	r0, [r7, #4]
 8011a8e:	f000 f94e 	bl	8011d2e <_ZN3USB11getDevDescrEhhtPh>
 8011a92:	4603      	mov	r3, r0
 8011a94:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 8011a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a9c:	601a      	str	r2, [r3, #0]

        if(rcode) {
 8011a9e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d002      	beq.n	8011aac <_ZN3USB11ConfiguringEhhb+0xb0>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 8011aa6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011aaa:	e13c      	b.n	8011d26 <_ZN3USB11ConfiguringEhhb+0x32a>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 8011aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aae:	7a1a      	ldrb	r2, [r3, #8]
 8011ab0:	7a5b      	ldrb	r3, [r3, #9]
 8011ab2:	021b      	lsls	r3, r3, #8
 8011ab4:	4313      	orrs	r3, r2
 8011ab6:	847b      	strh	r3, [r7, #34]	; 0x22
        uint16_t pid = udd->idProduct;
 8011ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aba:	7a9a      	ldrb	r2, [r3, #10]
 8011abc:	7adb      	ldrb	r3, [r3, #11]
 8011abe:	021b      	lsls	r3, r3, #8
 8011ac0:	4313      	orrs	r3, r2
 8011ac2:	843b      	strh	r3, [r7, #32]
        uint8_t klass = udd->bDeviceClass;
 8011ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ac6:	791b      	ldrb	r3, [r3, #4]
 8011ac8:	77fb      	strb	r3, [r7, #31]
        uint8_t subklass = udd->bDeviceSubClass;
 8011aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011acc:	795b      	ldrb	r3, [r3, #5]
 8011ace:	77bb      	strb	r3, [r7, #30]
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011ad6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ada:	2b0f      	cmp	r3, #15
 8011adc:	f200 8081 	bhi.w	8011be2 <_ZN3USB11ConfiguringEhhb+0x1e6>
                if(!devConfig[devConfigIndex]) continue; // no driver
 8011ae0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	321e      	adds	r2, #30
 8011ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d06e      	beq.n	8011bce <_ZN3USB11ConfiguringEhhb+0x1d2>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8011af0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	321e      	adds	r2, #30
 8011af8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011afc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	321e      	adds	r2, #30
 8011b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	3310      	adds	r3, #16
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	4608      	mov	r0, r1
 8011b10:	4798      	blx	r3
 8011b12:	4603      	mov	r3, r0
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	bf14      	ite	ne
 8011b18:	2301      	movne	r3, #1
 8011b1a:	2300      	moveq	r3, #0
 8011b1c:	b2db      	uxtb	r3, r3
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d157      	bne.n	8011bd2 <_ZN3USB11ConfiguringEhhb+0x1d6>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 8011b22:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	321e      	adds	r2, #30
 8011b2a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011b2e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	321e      	adds	r2, #30
 8011b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	3320      	adds	r3, #32
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	7fba      	ldrb	r2, [r7, #30]
 8011b42:	4611      	mov	r1, r2
 8011b44:	4798      	blx	r3
 8011b46:	4603      	mov	r3, r0
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d02b      	beq.n	8011ba4 <_ZN3USB11ConfiguringEhhb+0x1a8>
 8011b4c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	321e      	adds	r2, #30
 8011b54:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011b58:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	321e      	adds	r2, #30
 8011b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	3318      	adds	r3, #24
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	8c3a      	ldrh	r2, [r7, #32]
 8011b6c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8011b6e:	4798      	blx	r3
 8011b70:	4603      	mov	r3, r0
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d114      	bne.n	8011ba0 <_ZN3USB11ConfiguringEhhb+0x1a4>
 8011b76:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	321e      	adds	r2, #30
 8011b7e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011b82:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	321e      	adds	r2, #30
 8011b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	331c      	adds	r3, #28
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	7ffa      	ldrb	r2, [r7, #31]
 8011b96:	4611      	mov	r1, r2
 8011b98:	4798      	blx	r3
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d001      	beq.n	8011ba4 <_ZN3USB11ConfiguringEhhb+0x1a8>
 8011ba0:	2301      	movs	r3, #1
 8011ba2:	e000      	b.n	8011ba6 <_ZN3USB11ConfiguringEhhb+0x1aa>
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d014      	beq.n	8011bd4 <_ZN3USB11ConfiguringEhhb+0x1d8>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8011baa:	78b8      	ldrb	r0, [r7, #2]
 8011bac:	78fa      	ldrb	r2, [r7, #3]
 8011bae:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8011bb2:	787b      	ldrb	r3, [r7, #1]
 8011bb4:	9300      	str	r3, [sp, #0]
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	f7ff fe86 	bl	80118ca <_ZN3USB13AttemptConfigEhhhb>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 8011bc4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011bc8:	2bd1      	cmp	r3, #209	; 0xd1
 8011bca:	d109      	bne.n	8011be0 <_ZN3USB11ConfiguringEhhb+0x1e4>
 8011bcc:	e002      	b.n	8011bd4 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(!devConfig[devConfigIndex]) continue; // no driver
 8011bce:	bf00      	nop
 8011bd0:	e000      	b.n	8011bd4 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8011bd2:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8011bd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011bd8:	3301      	adds	r3, #1
 8011bda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011bde:	e77a      	b.n	8011ad6 <_ZN3USB11ConfiguringEhhb+0xda>
                                break;
 8011be0:	bf00      	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 8011be2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011be6:	2b0f      	cmp	r3, #15
 8011be8:	d802      	bhi.n	8011bf0 <_ZN3USB11ConfiguringEhhb+0x1f4>
                return rcode;
 8011bea:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011bee:	e09a      	b.n	8011d26 <_ZN3USB11ConfiguringEhhb+0x32a>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011bf6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011bfa:	2b0f      	cmp	r3, #15
 8011bfc:	f200 8088 	bhi.w	8011d10 <_ZN3USB11ConfiguringEhhb+0x314>
                if(!devConfig[devConfigIndex]) continue;
 8011c00:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	321e      	adds	r2, #30
 8011c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d074      	beq.n	8011cfa <_ZN3USB11ConfiguringEhhb+0x2fe>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8011c10:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	321e      	adds	r2, #30
 8011c18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011c1c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	321e      	adds	r2, #30
 8011c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	3310      	adds	r3, #16
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	4608      	mov	r0, r1
 8011c30:	4798      	blx	r3
 8011c32:	4603      	mov	r3, r0
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	bf14      	ite	ne
 8011c38:	2301      	movne	r3, #1
 8011c3a:	2300      	moveq	r3, #0
 8011c3c:	b2db      	uxtb	r3, r3
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d15d      	bne.n	8011cfe <_ZN3USB11ConfiguringEhhb+0x302>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8011c42:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	321e      	adds	r2, #30
 8011c4a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011c4e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	321e      	adds	r2, #30
 8011c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	3320      	adds	r3, #32
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	7fba      	ldrb	r2, [r7, #30]
 8011c62:	4611      	mov	r1, r2
 8011c64:	4798      	blx	r3
 8011c66:	4603      	mov	r3, r0
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d02b      	beq.n	8011cc4 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8011c6c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	321e      	adds	r2, #30
 8011c74:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011c78:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	321e      	adds	r2, #30
 8011c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	3318      	adds	r3, #24
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	8c3a      	ldrh	r2, [r7, #32]
 8011c8c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8011c8e:	4798      	blx	r3
 8011c90:	4603      	mov	r3, r0
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d114      	bne.n	8011cc0 <_ZN3USB11ConfiguringEhhb+0x2c4>
 8011c96:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	321e      	adds	r2, #30
 8011c9e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011ca2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	321e      	adds	r2, #30
 8011caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	331c      	adds	r3, #28
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	7ffa      	ldrb	r2, [r7, #31]
 8011cb6:	4611      	mov	r1, r2
 8011cb8:	4798      	blx	r3
 8011cba:	4603      	mov	r3, r0
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d001      	beq.n	8011cc4 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8011cc0:	2301      	movs	r3, #1
 8011cc2:	e000      	b.n	8011cc6 <_ZN3USB11ConfiguringEhhb+0x2ca>
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d11b      	bne.n	8011d02 <_ZN3USB11ConfiguringEhhb+0x306>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8011cca:	78b8      	ldrb	r0, [r7, #2]
 8011ccc:	78fa      	ldrb	r2, [r7, #3]
 8011cce:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8011cd2:	787b      	ldrb	r3, [r7, #1]
 8011cd4:	9300      	str	r3, [sp, #0]
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f7ff fdf6 	bl	80118ca <_ZN3USB13AttemptConfigEhhhb>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 8011ce4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011ce8:	2bd1      	cmp	r3, #209	; 0xd1
 8011cea:	d00b      	beq.n	8011d04 <_ZN3USB11ConfiguringEhhb+0x308>
 8011cec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011cf0:	2bd9      	cmp	r3, #217	; 0xd9
 8011cf2:	d007      	beq.n	8011d04 <_ZN3USB11ConfiguringEhhb+0x308>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 8011cf4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011cf8:	e015      	b.n	8011d26 <_ZN3USB11ConfiguringEhhb+0x32a>
                if(!devConfig[devConfigIndex]) continue;
 8011cfa:	bf00      	nop
 8011cfc:	e002      	b.n	8011d04 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8011cfe:	bf00      	nop
 8011d00:	e000      	b.n	8011d04 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8011d02:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8011d04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d08:	3301      	adds	r3, #1
 8011d0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011d0e:	e772      	b.n	8011bf6 <_ZN3USB11ConfiguringEhhb+0x1fa>
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 8011d10:	787b      	ldrb	r3, [r7, #1]
 8011d12:	78ba      	ldrb	r2, [r7, #2]
 8011d14:	78f9      	ldrb	r1, [r7, #3]
 8011d16:	6878      	ldr	r0, [r7, #4]
 8011d18:	f7ff fd7c 	bl	8011814 <_ZN3USB17DefaultAddressingEhhb>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        return rcode;
 8011d22:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 8011d26:	4618      	mov	r0, r3
 8011d28:	3738      	adds	r7, #56	; 0x38
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	bd80      	pop	{r7, pc}

08011d2e <_ZN3USB11getDevDescrEhhtPh>:
}

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 8011d2e:	b580      	push	{r7, lr}
 8011d30:	b08a      	sub	sp, #40	; 0x28
 8011d32:	af08      	add	r7, sp, #32
 8011d34:	6078      	str	r0, [r7, #4]
 8011d36:	4608      	mov	r0, r1
 8011d38:	4611      	mov	r1, r2
 8011d3a:	461a      	mov	r2, r3
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	70fb      	strb	r3, [r7, #3]
 8011d40:	460b      	mov	r3, r1
 8011d42:	70bb      	strb	r3, [r7, #2]
 8011d44:	4613      	mov	r3, r2
 8011d46:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 8011d48:	78ba      	ldrb	r2, [r7, #2]
 8011d4a:	78f9      	ldrb	r1, [r7, #3]
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	9307      	str	r3, [sp, #28]
 8011d50:	693b      	ldr	r3, [r7, #16]
 8011d52:	9306      	str	r3, [sp, #24]
 8011d54:	883b      	ldrh	r3, [r7, #0]
 8011d56:	9305      	str	r3, [sp, #20]
 8011d58:	883b      	ldrh	r3, [r7, #0]
 8011d5a:	9304      	str	r3, [sp, #16]
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	9303      	str	r3, [sp, #12]
 8011d60:	2301      	movs	r3, #1
 8011d62:	9302      	str	r3, [sp, #8]
 8011d64:	2300      	movs	r3, #0
 8011d66:	9301      	str	r3, [sp, #4]
 8011d68:	2306      	movs	r3, #6
 8011d6a:	9300      	str	r3, [sp, #0]
 8011d6c:	2380      	movs	r3, #128	; 0x80
 8011d6e:	6878      	ldr	r0, [r7, #4]
 8011d70:	f7fe fffd 	bl	8010d6e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011d74:	4603      	mov	r3, r0
}
 8011d76:	4618      	mov	r0, r3
 8011d78:	3708      	adds	r7, #8
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	bd80      	pop	{r7, pc}

08011d7e <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 8011d7e:	b580      	push	{r7, lr}
 8011d80:	b08a      	sub	sp, #40	; 0x28
 8011d82:	af08      	add	r7, sp, #32
 8011d84:	6078      	str	r0, [r7, #4]
 8011d86:	4608      	mov	r0, r1
 8011d88:	4611      	mov	r1, r2
 8011d8a:	461a      	mov	r2, r3
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	70fb      	strb	r3, [r7, #3]
 8011d90:	460b      	mov	r3, r1
 8011d92:	70bb      	strb	r3, [r7, #2]
 8011d94:	4613      	mov	r3, r2
 8011d96:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 8011d98:	78ba      	ldrb	r2, [r7, #2]
 8011d9a:	78f9      	ldrb	r1, [r7, #3]
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	9307      	str	r3, [sp, #28]
 8011da0:	697b      	ldr	r3, [r7, #20]
 8011da2:	9306      	str	r3, [sp, #24]
 8011da4:	883b      	ldrh	r3, [r7, #0]
 8011da6:	9305      	str	r3, [sp, #20]
 8011da8:	883b      	ldrh	r3, [r7, #0]
 8011daa:	9304      	str	r3, [sp, #16]
 8011dac:	2300      	movs	r3, #0
 8011dae:	9303      	str	r3, [sp, #12]
 8011db0:	2302      	movs	r3, #2
 8011db2:	9302      	str	r3, [sp, #8]
 8011db4:	7c3b      	ldrb	r3, [r7, #16]
 8011db6:	9301      	str	r3, [sp, #4]
 8011db8:	2306      	movs	r3, #6
 8011dba:	9300      	str	r3, [sp, #0]
 8011dbc:	2380      	movs	r3, #128	; 0x80
 8011dbe:	6878      	ldr	r0, [r7, #4]
 8011dc0:	f7fe ffd5 	bl	8010d6e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011dc4:	4603      	mov	r3, r0
}
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	3708      	adds	r7, #8
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	bd80      	pop	{r7, pc}

08011dce <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 8011dce:	b580      	push	{r7, lr}
 8011dd0:	b09e      	sub	sp, #120	; 0x78
 8011dd2:	af08      	add	r7, sp, #32
 8011dd4:	6078      	str	r0, [r7, #4]
 8011dd6:	4608      	mov	r0, r1
 8011dd8:	4611      	mov	r1, r2
 8011dda:	461a      	mov	r2, r3
 8011ddc:	4603      	mov	r3, r0
 8011dde:	70fb      	strb	r3, [r7, #3]
 8011de0:	460b      	mov	r3, r1
 8011de2:	70bb      	strb	r3, [r7, #2]
 8011de4:	4613      	mov	r3, r2
 8011de6:	707b      	strb	r3, [r7, #1]
        const uint8_t bufSize = 64;
 8011de8:	2340      	movs	r3, #64	; 0x40
 8011dea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 8011dee:	f107 030c 	add.w	r3, r7, #12
 8011df2:	653b      	str	r3, [r7, #80]	; 0x50

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 8011df4:	78ba      	ldrb	r2, [r7, #2]
 8011df6:	78f9      	ldrb	r1, [r7, #3]
 8011df8:	f107 030c 	add.w	r3, r7, #12
 8011dfc:	9301      	str	r3, [sp, #4]
 8011dfe:	787b      	ldrb	r3, [r7, #1]
 8011e00:	9300      	str	r3, [sp, #0]
 8011e02:	2309      	movs	r3, #9
 8011e04:	6878      	ldr	r0, [r7, #4]
 8011e06:	f7ff ffba 	bl	8011d7e <_ZN3USB12getConfDescrEhhthPh>
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if(ret)
 8011e10:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d002      	beq.n	8011e1e <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x50>
                return ret;
 8011e18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011e1c:	e020      	b.n	8011e60 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x92>

        uint16_t total = ucd->wTotalLength;
 8011e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e20:	789a      	ldrb	r2, [r3, #2]
 8011e22:	78db      	ldrb	r3, [r3, #3]
 8011e24:	021b      	lsls	r3, r3, #8
 8011e26:	4313      	orrs	r3, r2
 8011e28:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 8011e2c:	78ba      	ldrb	r2, [r7, #2]
 8011e2e:	78f9      	ldrb	r1, [r7, #3]
 8011e30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011e32:	9307      	str	r3, [sp, #28]
 8011e34:	f107 030c 	add.w	r3, r7, #12
 8011e38:	9306      	str	r3, [sp, #24]
 8011e3a:	2340      	movs	r3, #64	; 0x40
 8011e3c:	9305      	str	r3, [sp, #20]
 8011e3e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8011e42:	9304      	str	r3, [sp, #16]
 8011e44:	2300      	movs	r3, #0
 8011e46:	9303      	str	r3, [sp, #12]
 8011e48:	2302      	movs	r3, #2
 8011e4a:	9302      	str	r3, [sp, #8]
 8011e4c:	787b      	ldrb	r3, [r7, #1]
 8011e4e:	9301      	str	r3, [sp, #4]
 8011e50:	2306      	movs	r3, #6
 8011e52:	9300      	str	r3, [sp, #0]
 8011e54:	2380      	movs	r3, #128	; 0x80
 8011e56:	6878      	ldr	r0, [r7, #4]
 8011e58:	f7fe ff89 	bl	8010d6e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	bf00      	nop
}
 8011e60:	4618      	mov	r0, r3
 8011e62:	3758      	adds	r7, #88	; 0x58
 8011e64:	46bd      	mov	sp, r7
 8011e66:	bd80      	pop	{r7, pc}

08011e68 <_ZN3USB7setAddrEhhh>:
uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
}
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b08c      	sub	sp, #48	; 0x30
 8011e6c:	af08      	add	r7, sp, #32
 8011e6e:	6078      	str	r0, [r7, #4]
 8011e70:	4608      	mov	r0, r1
 8011e72:	4611      	mov	r1, r2
 8011e74:	461a      	mov	r2, r3
 8011e76:	4603      	mov	r3, r0
 8011e78:	70fb      	strb	r3, [r7, #3]
 8011e7a:	460b      	mov	r3, r1
 8011e7c:	70bb      	strb	r3, [r7, #2]
 8011e7e:	4613      	mov	r3, r2
 8011e80:	707b      	strb	r3, [r7, #1]
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 8011e82:	78ba      	ldrb	r2, [r7, #2]
 8011e84:	78f9      	ldrb	r1, [r7, #3]
 8011e86:	2300      	movs	r3, #0
 8011e88:	9307      	str	r3, [sp, #28]
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	9306      	str	r3, [sp, #24]
 8011e8e:	2300      	movs	r3, #0
 8011e90:	9305      	str	r3, [sp, #20]
 8011e92:	2300      	movs	r3, #0
 8011e94:	9304      	str	r3, [sp, #16]
 8011e96:	2300      	movs	r3, #0
 8011e98:	9303      	str	r3, [sp, #12]
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	9302      	str	r3, [sp, #8]
 8011e9e:	787b      	ldrb	r3, [r7, #1]
 8011ea0:	9301      	str	r3, [sp, #4]
 8011ea2:	2305      	movs	r3, #5
 8011ea4:	9300      	str	r3, [sp, #0]
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	6878      	ldr	r0, [r7, #4]
 8011eaa:	f7fe ff60 	bl	8010d6e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	73fb      	strb	r3, [r7, #15]
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 8011eb2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8011eb6:	f7f0 f819 	bl	8001eec <HAL_Delay>
        return rcode;
 8011eba:	7bfb      	ldrb	r3, [r7, #15]
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	3710      	adds	r7, #16
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bd80      	pop	{r7, pc}

08011ec4 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b08a      	sub	sp, #40	; 0x28
 8011ec8:	af08      	add	r7, sp, #32
 8011eca:	6078      	str	r0, [r7, #4]
 8011ecc:	4608      	mov	r0, r1
 8011ece:	4611      	mov	r1, r2
 8011ed0:	461a      	mov	r2, r3
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	70fb      	strb	r3, [r7, #3]
 8011ed6:	460b      	mov	r3, r1
 8011ed8:	70bb      	strb	r3, [r7, #2]
 8011eda:	4613      	mov	r3, r2
 8011edc:	707b      	strb	r3, [r7, #1]
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 8011ede:	78ba      	ldrb	r2, [r7, #2]
 8011ee0:	78f9      	ldrb	r1, [r7, #3]
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	9307      	str	r3, [sp, #28]
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	9306      	str	r3, [sp, #24]
 8011eea:	2300      	movs	r3, #0
 8011eec:	9305      	str	r3, [sp, #20]
 8011eee:	2300      	movs	r3, #0
 8011ef0:	9304      	str	r3, [sp, #16]
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	9303      	str	r3, [sp, #12]
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	9302      	str	r3, [sp, #8]
 8011efa:	787b      	ldrb	r3, [r7, #1]
 8011efc:	9301      	str	r3, [sp, #4]
 8011efe:	2309      	movs	r3, #9
 8011f00:	9300      	str	r3, [sp, #0]
 8011f02:	2300      	movs	r3, #0
 8011f04:	6878      	ldr	r0, [r7, #4]
 8011f06:	f7fe ff32 	bl	8010d6e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011f0a:	4603      	mov	r3, r0
}
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	3708      	adds	r7, #8
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bd80      	pop	{r7, pc}

08011f14 <_ZN8MAX3421eI3P102P9EC1Ev>:
MAX3421e< SPI_SS, INTR >::MAX3421e() {
 8011f14:	b480      	push	{r7}
 8011f16:	b083      	sub	sp, #12
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
};
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	4618      	mov	r0, r3
 8011f20:	370c      	adds	r7, #12
 8011f22:	46bd      	mov	sp, r7
 8011f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f28:	4770      	bx	lr
	...

08011f2c <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 8011f2c:	b480      	push	{r7}
 8011f2e:	b083      	sub	sp, #12
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
 8011f34:	4a04      	ldr	r2, [pc, #16]	; (8011f48 <_ZN11AddressPoolC1Ev+0x1c>)
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	601a      	str	r2, [r3, #0]
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	370c      	adds	r7, #12
 8011f40:	46bd      	mov	sp, r7
 8011f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f46:	4770      	bx	lr
 8011f48:	08012a64 	.word	0x08012a64

08011f4c <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b082      	sub	sp, #8
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	4618      	mov	r0, r3
 8011f58:	f7ff ffe8 	bl	8011f2c <_ZN11AddressPoolC1Ev>
 8011f5c:	4a17      	ldr	r2, [pc, #92]	; (8011fbc <_ZN15AddressPoolImplILh16EEC1Ev+0x70>)
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	601a      	str	r2, [r3, #0]
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	2200      	movs	r2, #0
 8011f66:	71da      	strb	r2, [r3, #7]
                // Zero address is reserved
                InitEntry(0);
 8011f68:	2100      	movs	r1, #0
 8011f6a:	6878      	ldr	r0, [r7, #4]
 8011f6c:	f000 f990 	bl	8012290 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	2200      	movs	r2, #0
 8011f74:	731a      	strb	r2, [r3, #12]
                thePool[0].epinfo = &dev0ep;
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	1d1a      	adds	r2, r3, #4
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	609a      	str	r2, [r3, #8]
                dev0ep.epAddr = 0;
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	2200      	movs	r2, #0
 8011f82:	711a      	strb	r2, [r3, #4]
                dev0ep.maxPktSize = 8;
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	2208      	movs	r2, #8
 8011f88:	715a      	strb	r2, [r3, #5]
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 8011f8a:	687a      	ldr	r2, [r7, #4]
 8011f8c:	7993      	ldrb	r3, [r2, #6]
 8011f8e:	f36f 0300 	bfc	r3, #0, #1
 8011f92:	7193      	strb	r3, [r2, #6]
                dev0ep.bmRcvToggle = 0;
 8011f94:	687a      	ldr	r2, [r7, #4]
 8011f96:	7993      	ldrb	r3, [r2, #6]
 8011f98:	f36f 0341 	bfc	r3, #1, #1
 8011f9c:	7193      	strb	r3, [r2, #6]
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 8011f9e:	687a      	ldr	r2, [r7, #4]
 8011fa0:	7993      	ldrb	r3, [r2, #6]
 8011fa2:	210f      	movs	r1, #15
 8011fa4:	f361 0387 	bfi	r3, r1, #2, #6
 8011fa8:	7193      	strb	r3, [r2, #6]

                InitAllAddresses();
 8011faa:	6878      	ldr	r0, [r7, #4]
 8011fac:	f000 f9a1 	bl	80122f2 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	3708      	adds	r7, #8
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	bd80      	pop	{r7, pc}
 8011fba:	bf00      	nop
 8011fbc:	08012a50 	.word	0x08012a50

08011fc0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b084      	sub	sp, #16
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
 8011fc8:	460b      	mov	r3, r1
 8011fca:	70fb      	strb	r3, [r7, #3]
                if(!addr)
 8011fcc:	78fb      	ldrb	r3, [r7, #3]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d102      	bne.n	8011fd8 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x18>
                        return thePool;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	3308      	adds	r3, #8
 8011fd6:	e014      	b.n	8012002 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x42>

                uint8_t index = FindAddressIndex(addr);
 8011fd8:	78fb      	ldrb	r3, [r7, #3]
 8011fda:	4619      	mov	r1, r3
 8011fdc:	6878      	ldr	r0, [r7, #4]
 8011fde:	f000 f9a1 	bl	8012324 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	73fb      	strb	r3, [r7, #15]

                return (!index) ? NULL : thePool + index;
 8011fe6:	7bfb      	ldrb	r3, [r7, #15]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d008      	beq.n	8011ffe <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x3e>
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	f103 0108 	add.w	r1, r3, #8
 8011ff2:	7bfa      	ldrb	r2, [r7, #15]
 8011ff4:	4613      	mov	r3, r2
 8011ff6:	00db      	lsls	r3, r3, #3
 8011ff8:	1a9b      	subs	r3, r3, r2
 8011ffa:	440b      	add	r3, r1
 8011ffc:	e000      	b.n	8012000 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x40>
 8011ffe:	2300      	movs	r3, #0
 8012000:	bf00      	nop
        };
 8012002:	4618      	mov	r0, r3
 8012004:	3710      	adds	r7, #16
 8012006:	46bd      	mov	sp, r7
 8012008:	bd80      	pop	{r7, pc}
	...

0801200c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 801200c:	b580      	push	{r7, lr}
 801200e:	b086      	sub	sp, #24
 8012010:	af00      	add	r7, sp, #0
 8012012:	60f8      	str	r0, [r7, #12]
 8012014:	607b      	str	r3, [r7, #4]
 8012016:	460b      	mov	r3, r1
 8012018:	72fb      	strb	r3, [r7, #11]
 801201a:	4613      	mov	r3, r2
 801201c:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 801201e:	f7ee fc3f 	bl	80008a0 <_ZN3P105ClearEv>
        uint8_t data = reg | 0x02;
 8012022:	7afb      	ldrb	r3, [r7, #11]
 8012024:	f043 0302 	orr.w	r3, r3, #2
 8012028:	b2db      	uxtb	r3, r3
 801202a:	75fb      	strb	r3, [r7, #23]
        HAL_SPI_Transmit(&SPI_Handle, &data, 1, HAL_MAX_DELAY);
 801202c:	f107 0117 	add.w	r1, r7, #23
 8012030:	f04f 33ff 	mov.w	r3, #4294967295
 8012034:	2201      	movs	r2, #1
 8012036:	480b      	ldr	r0, [pc, #44]	; (8012064 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 8012038:	f7f2 fd29 	bl	8004a8e <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 801203c:	7abb      	ldrb	r3, [r7, #10]
 801203e:	b29a      	uxth	r2, r3
 8012040:	f04f 33ff 	mov.w	r3, #4294967295
 8012044:	6879      	ldr	r1, [r7, #4]
 8012046:	4807      	ldr	r0, [pc, #28]	; (8012064 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 8012048:	f7f2 fd21 	bl	8004a8e <HAL_SPI_Transmit>
        data_p += nbytes;
 801204c:	7abb      	ldrb	r3, [r7, #10]
 801204e:	687a      	ldr	r2, [r7, #4]
 8012050:	4413      	add	r3, r2
 8012052:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 8012054:	f7ee fc18 	bl	8000888 <_ZN3P103SetEv>
        return ( data_p);
 8012058:	687b      	ldr	r3, [r7, #4]
}
 801205a:	4618      	mov	r0, r3
 801205c:	3718      	adds	r7, #24
 801205e:	46bd      	mov	sp, r7
 8012060:	bd80      	pop	{r7, pc}
 8012062:	bf00      	nop
 8012064:	200002d8 	.word	0x200002d8

08012068 <_Z10D_PrintHexIhEvT_i>:
                mask >>= 4;
        }
        prn->print((T)val, HEX);
}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 8012068:	b480      	push	{r7}
 801206a:	b083      	sub	sp, #12
 801206c:	af00      	add	r7, sp, #0
 801206e:	4603      	mov	r3, r0
 8012070:	6039      	str	r1, [r7, #0]
 8012072:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 8012074:	bf00      	nop
 8012076:	370c      	adds	r7, #12
 8012078:	46bd      	mov	sp, r7
 801207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801207e:	4770      	bx	lr

08012080 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 8012080:	b580      	push	{r7, lr}
 8012082:	b084      	sub	sp, #16
 8012084:	af00      	add	r7, sp, #0
 8012086:	60f8      	str	r0, [r7, #12]
 8012088:	607b      	str	r3, [r7, #4]
 801208a:	460b      	mov	r3, r1
 801208c:	72fb      	strb	r3, [r7, #11]
 801208e:	4613      	mov	r3, r2
 8012090:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 8012092:	f7ee fc05 	bl	80008a0 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8012096:	f107 010b 	add.w	r1, r7, #11
 801209a:	f04f 33ff 	mov.w	r3, #4294967295
 801209e:	2201      	movs	r2, #1
 80120a0:	480d      	ldr	r0, [pc, #52]	; (80120d8 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 80120a2:	f7f2 fcf4 	bl	8004a8e <HAL_SPI_Transmit>
        memset(data_p, 0, nbytes); // Make sure we send out empty bytes
 80120a6:	7abb      	ldrb	r3, [r7, #10]
 80120a8:	461a      	mov	r2, r3
 80120aa:	2100      	movs	r1, #0
 80120ac:	6878      	ldr	r0, [r7, #4]
 80120ae:	f000 fa91 	bl	80125d4 <memset>
        HAL_SPI_Receive(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 80120b2:	7abb      	ldrb	r3, [r7, #10]
 80120b4:	b29a      	uxth	r2, r3
 80120b6:	f04f 33ff 	mov.w	r3, #4294967295
 80120ba:	6879      	ldr	r1, [r7, #4]
 80120bc:	4806      	ldr	r0, [pc, #24]	; (80120d8 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 80120be:	f7f2 fe22 	bl	8004d06 <HAL_SPI_Receive>
        data_p += nbytes;
 80120c2:	7abb      	ldrb	r3, [r7, #10]
 80120c4:	687a      	ldr	r2, [r7, #4]
 80120c6:	4413      	add	r3, r2
 80120c8:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 80120ca:	f7ee fbdd 	bl	8000888 <_ZN3P103SetEv>
        return ( data_p);
 80120ce:	687b      	ldr	r3, [r7, #4]
}
 80120d0:	4618      	mov	r0, r3
 80120d2:	3710      	adds	r7, #16
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bd80      	pop	{r7, pc}
 80120d8:	200002d8 	.word	0x200002d8

080120dc <_ZN8MAX3421eI3P102P9E4TaskEv>:

/* MAX3421 state change task and interrupt handler */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::Task(void) {
 80120dc:	b580      	push	{r7, lr}
 80120de:	b084      	sub	sp, #16
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
        uint8_t rcode = 0;
 80120e4:	2300      	movs	r3, #0
 80120e6:	73fb      	strb	r3, [r7, #15]
        uint8_t pinvalue;
        //USB_HOST_SERIAL.print("Vbus state: ");
        //USB_HOST_SERIAL.println( vbusState, HEX );
        pinvalue = INTR::IsSet(); //Read();
 80120e8:	f7fe fd46 	bl	8010b78 <_ZN2P95IsSetEv>
 80120ec:	4603      	mov	r3, r0
 80120ee:	73bb      	strb	r3, [r7, #14]
        //pinvalue = digitalRead( MAX_INT );
        if(pinvalue == 0) {
 80120f0:	7bbb      	ldrb	r3, [r7, #14]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d104      	bne.n	8012100 <_ZN8MAX3421eI3P102P9E4TaskEv+0x24>
                rcode = IntHandler();
 80120f6:	6878      	ldr	r0, [r7, #4]
 80120f8:	f000 f937 	bl	801236a <_ZN8MAX3421eI3P102P9E10IntHandlerEv>
 80120fc:	4603      	mov	r3, r0
 80120fe:	73fb      	strb	r3, [r7, #15]
        //    pinvalue = digitalRead( MAX_GPX );
        //    if( pinvalue == LOW ) {
        //        GpxHandler();
        //    }
        //    usbSM();                                //USB state machine
        return ( rcode);
 8012100:	7bfb      	ldrb	r3, [r7, #15]
}
 8012102:	4618      	mov	r0, r3
 8012104:	3710      	adds	r7, #16
 8012106:	46bd      	mov	sp, r7
 8012108:	bd80      	pop	{r7, pc}
	...

0801210c <_ZN8MAX3421eI3P102P9E12getVbusStateEv>:
        uint8_t getVbusState(void) {
 801210c:	b480      	push	{r7}
 801210e:	b083      	sub	sp, #12
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
                return vbusState;
 8012114:	4b03      	ldr	r3, [pc, #12]	; (8012124 <_ZN8MAX3421eI3P102P9E12getVbusStateEv+0x18>)
 8012116:	781b      	ldrb	r3, [r3, #0]
        };
 8012118:	4618      	mov	r0, r3
 801211a:	370c      	adds	r7, #12
 801211c:	46bd      	mov	sp, r7
 801211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012122:	4770      	bx	lr
 8012124:	20000654 	.word	0x20000654

08012128 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 8012128:	b580      	push	{r7, lr}
 801212a:	b084      	sub	sp, #16
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
 8012130:	4608      	mov	r0, r1
 8012132:	4611      	mov	r1, r2
 8012134:	461a      	mov	r2, r3
 8012136:	4603      	mov	r3, r0
 8012138:	70fb      	strb	r3, [r7, #3]
 801213a:	460b      	mov	r3, r1
 801213c:	70bb      	strb	r3, [r7, #2]
 801213e:	4613      	mov	r3, r2
 8012140:	707b      	strb	r3, [r7, #1]
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 8012142:	78fb      	ldrb	r3, [r7, #3]
 8012144:	733b      	strb	r3, [r7, #12]
                if(_parent.bmReserved || port > 7)
 8012146:	7b3b      	ldrb	r3, [r7, #12]
 8012148:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801214c:	b2db      	uxtb	r3, r3
 801214e:	2b00      	cmp	r3, #0
 8012150:	d102      	bne.n	8012158 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x30>
 8012152:	787b      	ldrb	r3, [r7, #1]
 8012154:	2b07      	cmp	r3, #7
 8012156:	d901      	bls.n	801215c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x34>
                        //if(parent > 127 || port > 7)
                        return 0;
 8012158:	2300      	movs	r3, #0
 801215a:	e079      	b.n	8012250 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(is_hub && hubCounter == 7)
 801215c:	78bb      	ldrb	r3, [r7, #2]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d005      	beq.n	801216e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	79db      	ldrb	r3, [r3, #7]
 8012166:	2b07      	cmp	r3, #7
 8012168:	d101      	bne.n	801216e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
                        return 0;
 801216a:	2300      	movs	r3, #0
 801216c:	e070      	b.n	8012250 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 801216e:	2100      	movs	r1, #0
 8012170:	6878      	ldr	r0, [r7, #4]
 8012172:	f000 f8d7 	bl	8012324 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8012176:	4603      	mov	r3, r0
 8012178:	73fb      	strb	r3, [r7, #15]

                if(!index) // if empty entry is not found
 801217a:	7bfb      	ldrb	r3, [r7, #15]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d101      	bne.n	8012184 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x5c>
                        return 0;
 8012180:	2300      	movs	r3, #0
 8012182:	e065      	b.n	8012250 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(_parent.devAddress == 0) {
 8012184:	7b3b      	ldrb	r3, [r7, #12]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d124      	bne.n	80121d4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
                        if(is_hub) {
 801218a:	78bb      	ldrb	r3, [r7, #2]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d00f      	beq.n	80121b0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x88>
                                thePool[index].address.devAddress = 0x41;
 8012190:	7bfa      	ldrb	r2, [r7, #15]
 8012192:	6879      	ldr	r1, [r7, #4]
 8012194:	4613      	mov	r3, r2
 8012196:	00db      	lsls	r3, r3, #3
 8012198:	1a9b      	subs	r3, r3, r2
 801219a:	440b      	add	r3, r1
 801219c:	330c      	adds	r3, #12
 801219e:	2241      	movs	r2, #65	; 0x41
 80121a0:	701a      	strb	r2, [r3, #0]
                                hubCounter++;
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	79db      	ldrb	r3, [r3, #7]
 80121a6:	3301      	adds	r3, #1
 80121a8:	b2da      	uxtb	r2, r3
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	71da      	strb	r2, [r3, #7]
 80121ae:	e008      	b.n	80121c2 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                        } else
                                thePool[index].address.devAddress = 1;
 80121b0:	7bfa      	ldrb	r2, [r7, #15]
 80121b2:	6879      	ldr	r1, [r7, #4]
 80121b4:	4613      	mov	r3, r2
 80121b6:	00db      	lsls	r3, r3, #3
 80121b8:	1a9b      	subs	r3, r3, r2
 80121ba:	440b      	add	r3, r1
 80121bc:	330c      	adds	r3, #12
 80121be:	2201      	movs	r2, #1
 80121c0:	701a      	strb	r2, [r3, #0]

                        return thePool[index].address.devAddress;
 80121c2:	7bfa      	ldrb	r2, [r7, #15]
 80121c4:	6879      	ldr	r1, [r7, #4]
 80121c6:	4613      	mov	r3, r2
 80121c8:	00db      	lsls	r3, r3, #3
 80121ca:	1a9b      	subs	r3, r3, r2
 80121cc:	440b      	add	r3, r1
 80121ce:	330c      	adds	r3, #12
 80121d0:	781b      	ldrb	r3, [r3, #0]
 80121d2:	e03d      	b.n	8012250 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 80121d4:	2300      	movs	r3, #0
 80121d6:	723b      	strb	r3, [r7, #8]
                addr.bmParent = _parent.bmAddress;
 80121d8:	7b3b      	ldrb	r3, [r7, #12]
 80121da:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80121de:	b2da      	uxtb	r2, r3
 80121e0:	7a3b      	ldrb	r3, [r7, #8]
 80121e2:	f362 03c5 	bfi	r3, r2, #3, #3
 80121e6:	723b      	strb	r3, [r7, #8]
                if(is_hub) {
 80121e8:	78bb      	ldrb	r3, [r7, #2]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d013      	beq.n	8012216 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xee>
                        addr.bmHub = 1;
 80121ee:	7a3b      	ldrb	r3, [r7, #8]
 80121f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121f4:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = ++hubCounter;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	79db      	ldrb	r3, [r3, #7]
 80121fa:	3301      	adds	r3, #1
 80121fc:	b2da      	uxtb	r2, r3
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	71da      	strb	r2, [r3, #7]
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	79db      	ldrb	r3, [r3, #7]
 8012206:	f003 0307 	and.w	r3, r3, #7
 801220a:	b2da      	uxtb	r2, r3
 801220c:	7a3b      	ldrb	r3, [r7, #8]
 801220e:	f362 0302 	bfi	r3, r2, #0, #3
 8012212:	723b      	strb	r3, [r7, #8]
 8012214:	e00b      	b.n	801222e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x106>
                } else {
                        addr.bmHub = 0;
 8012216:	7a3b      	ldrb	r3, [r7, #8]
 8012218:	f36f 1386 	bfc	r3, #6, #1
 801221c:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = port;
 801221e:	787b      	ldrb	r3, [r7, #1]
 8012220:	f003 0307 	and.w	r3, r3, #7
 8012224:	b2da      	uxtb	r2, r3
 8012226:	7a3b      	ldrb	r3, [r7, #8]
 8012228:	f362 0302 	bfi	r3, r2, #0, #3
 801222c:	723b      	strb	r3, [r7, #8]
                }
                thePool[index].address = addr;
 801222e:	7bfa      	ldrb	r2, [r7, #15]
 8012230:	6879      	ldr	r1, [r7, #4]
 8012232:	4613      	mov	r3, r2
 8012234:	00db      	lsls	r3, r3, #3
 8012236:	1a9b      	subs	r3, r3, r2
 8012238:	440b      	add	r3, r1
 801223a:	330c      	adds	r3, #12
 801223c:	7a3a      	ldrb	r2, [r7, #8]
 801223e:	701a      	strb	r2, [r3, #0]
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 8012240:	7bfa      	ldrb	r2, [r7, #15]
 8012242:	6879      	ldr	r1, [r7, #4]
 8012244:	4613      	mov	r3, r2
 8012246:	00db      	lsls	r3, r3, #3
 8012248:	1a9b      	subs	r3, r3, r2
 801224a:	440b      	add	r3, r1
 801224c:	330c      	adds	r3, #12
 801224e:	781b      	ldrb	r3, [r3, #0]
        };
 8012250:	4618      	mov	r0, r3
 8012252:	3710      	adds	r7, #16
 8012254:	46bd      	mov	sp, r7
 8012256:	bd80      	pop	{r7, pc}

08012258 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 8012258:	b580      	push	{r7, lr}
 801225a:	b084      	sub	sp, #16
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
 8012260:	460b      	mov	r3, r1
 8012262:	70fb      	strb	r3, [r7, #3]
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 8012264:	78fb      	ldrb	r3, [r7, #3]
 8012266:	2b41      	cmp	r3, #65	; 0x41
 8012268:	d103      	bne.n	8012272 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x1a>
                        InitAllAddresses();
 801226a:	6878      	ldr	r0, [r7, #4]
 801226c:	f000 f841 	bl	80122f2 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 8012270:	e00b      	b.n	801228a <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x32>
                }
                uint8_t index = FindAddressIndex(addr);
 8012272:	78fb      	ldrb	r3, [r7, #3]
 8012274:	4619      	mov	r1, r3
 8012276:	6878      	ldr	r0, [r7, #4]
 8012278:	f000 f854 	bl	8012324 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 801227c:	4603      	mov	r3, r0
 801227e:	73fb      	strb	r3, [r7, #15]
                FreeAddressByIndex(index);
 8012280:	7bfb      	ldrb	r3, [r7, #15]
 8012282:	4619      	mov	r1, r3
 8012284:	6878      	ldr	r0, [r7, #4]
 8012286:	f000 f893 	bl	80123b0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 801228a:	3710      	adds	r7, #16
 801228c:	46bd      	mov	sp, r7
 801228e:	bd80      	pop	{r7, pc}

08012290 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:
        void InitEntry(uint8_t index) {
 8012290:	b480      	push	{r7}
 8012292:	b083      	sub	sp, #12
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
 8012298:	460b      	mov	r3, r1
 801229a:	70fb      	strb	r3, [r7, #3]
                thePool[index].address.devAddress = 0;
 801229c:	78fa      	ldrb	r2, [r7, #3]
 801229e:	6879      	ldr	r1, [r7, #4]
 80122a0:	4613      	mov	r3, r2
 80122a2:	00db      	lsls	r3, r3, #3
 80122a4:	1a9b      	subs	r3, r3, r2
 80122a6:	440b      	add	r3, r1
 80122a8:	330c      	adds	r3, #12
 80122aa:	2200      	movs	r2, #0
 80122ac:	701a      	strb	r2, [r3, #0]
                thePool[index].epcount = 1;
 80122ae:	78fa      	ldrb	r2, [r7, #3]
 80122b0:	6879      	ldr	r1, [r7, #4]
 80122b2:	4613      	mov	r3, r2
 80122b4:	00db      	lsls	r3, r3, #3
 80122b6:	1a9b      	subs	r3, r3, r2
 80122b8:	440b      	add	r3, r1
 80122ba:	330d      	adds	r3, #13
 80122bc:	2201      	movs	r2, #1
 80122be:	701a      	strb	r2, [r3, #0]
                thePool[index].lowspeed = 0;
 80122c0:	78fa      	ldrb	r2, [r7, #3]
 80122c2:	6879      	ldr	r1, [r7, #4]
 80122c4:	4613      	mov	r3, r2
 80122c6:	00db      	lsls	r3, r3, #3
 80122c8:	1a9b      	subs	r3, r3, r2
 80122ca:	440b      	add	r3, r1
 80122cc:	330e      	adds	r3, #14
 80122ce:	2200      	movs	r2, #0
 80122d0:	701a      	strb	r2, [r3, #0]
                thePool[index].epinfo = &dev0ep;
 80122d2:	78fa      	ldrb	r2, [r7, #3]
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	1d19      	adds	r1, r3, #4
 80122d8:	6878      	ldr	r0, [r7, #4]
 80122da:	4613      	mov	r3, r2
 80122dc:	00db      	lsls	r3, r3, #3
 80122de:	1a9b      	subs	r3, r3, r2
 80122e0:	4403      	add	r3, r0
 80122e2:	3308      	adds	r3, #8
 80122e4:	6019      	str	r1, [r3, #0]
        };
 80122e6:	bf00      	nop
 80122e8:	370c      	adds	r7, #12
 80122ea:	46bd      	mov	sp, r7
 80122ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f0:	4770      	bx	lr

080122f2 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
        void InitAllAddresses() {
 80122f2:	b580      	push	{r7, lr}
 80122f4:	b084      	sub	sp, #16
 80122f6:	af00      	add	r7, sp, #0
 80122f8:	6078      	str	r0, [r7, #4]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 80122fa:	2301      	movs	r3, #1
 80122fc:	73fb      	strb	r3, [r7, #15]
 80122fe:	7bfb      	ldrb	r3, [r7, #15]
 8012300:	2b0f      	cmp	r3, #15
 8012302:	d808      	bhi.n	8012316 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x24>
                        InitEntry(i);
 8012304:	7bfb      	ldrb	r3, [r7, #15]
 8012306:	4619      	mov	r1, r3
 8012308:	6878      	ldr	r0, [r7, #4]
 801230a:	f7ff ffc1 	bl	8012290 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 801230e:	7bfb      	ldrb	r3, [r7, #15]
 8012310:	3301      	adds	r3, #1
 8012312:	73fb      	strb	r3, [r7, #15]
 8012314:	e7f3      	b.n	80122fe <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0xc>
                hubCounter = 0;
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	2200      	movs	r2, #0
 801231a:	71da      	strb	r2, [r3, #7]
        };
 801231c:	bf00      	nop
 801231e:	3710      	adds	r7, #16
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}

08012324 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
        uint8_t FindAddressIndex(uint8_t address = 0) {
 8012324:	b480      	push	{r7}
 8012326:	b085      	sub	sp, #20
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
 801232c:	460b      	mov	r3, r1
 801232e:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 8012330:	2301      	movs	r3, #1
 8012332:	73fb      	strb	r3, [r7, #15]
 8012334:	7bfb      	ldrb	r3, [r7, #15]
 8012336:	2b0f      	cmp	r3, #15
 8012338:	d810      	bhi.n	801235c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x38>
                        if(thePool[i].address.devAddress == address)
 801233a:	7bfa      	ldrb	r2, [r7, #15]
 801233c:	6879      	ldr	r1, [r7, #4]
 801233e:	4613      	mov	r3, r2
 8012340:	00db      	lsls	r3, r3, #3
 8012342:	1a9b      	subs	r3, r3, r2
 8012344:	440b      	add	r3, r1
 8012346:	330c      	adds	r3, #12
 8012348:	781b      	ldrb	r3, [r3, #0]
 801234a:	78fa      	ldrb	r2, [r7, #3]
 801234c:	429a      	cmp	r2, r3
 801234e:	d101      	bne.n	8012354 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x30>
                                return i;
 8012350:	7bfb      	ldrb	r3, [r7, #15]
 8012352:	e004      	b.n	801235e <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x3a>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 8012354:	7bfb      	ldrb	r3, [r7, #15]
 8012356:	3301      	adds	r3, #1
 8012358:	73fb      	strb	r3, [r7, #15]
 801235a:	e7eb      	b.n	8012334 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x10>
                return 0;
 801235c:	2300      	movs	r3, #0
        };
 801235e:	4618      	mov	r0, r3
 8012360:	3714      	adds	r7, #20
 8012362:	46bd      	mov	sp, r7
 8012364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012368:	4770      	bx	lr

0801236a <_ZN8MAX3421eI3P102P9E10IntHandlerEv>:

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
 801236a:	b580      	push	{r7, lr}
 801236c:	b084      	sub	sp, #16
 801236e:	af00      	add	r7, sp, #0
 8012370:	6078      	str	r0, [r7, #4]
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
 8012372:	2300      	movs	r3, #0
 8012374:	73fb      	strb	r3, [r7, #15]
        HIRQ = regRd(rHIRQ); //determine interrupt source
 8012376:	21c8      	movs	r1, #200	; 0xc8
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	f7ef fad9 	bl	8001930 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801237e:	4603      	mov	r3, r0
 8012380:	73bb      	strb	r3, [r7, #14]
        //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
        //    HIRQ_sendback |= bmFRAMEIRQ;
        //}//end FRAMEIRQ handling
        if(HIRQ & bmCONDETIRQ) {
 8012382:	7bbb      	ldrb	r3, [r7, #14]
 8012384:	f003 0320 	and.w	r3, r3, #32
 8012388:	2b00      	cmp	r3, #0
 801238a:	d006      	beq.n	801239a <_ZN8MAX3421eI3P102P9E10IntHandlerEv+0x30>
                busprobe();
 801238c:	6878      	ldr	r0, [r7, #4]
 801238e:	f7ef faf1 	bl	8001974 <_ZN8MAX3421eI3P102P9E8busprobeEv>
                HIRQ_sendback |= bmCONDETIRQ;
 8012392:	7bfb      	ldrb	r3, [r7, #15]
 8012394:	f043 0320 	orr.w	r3, r3, #32
 8012398:	73fb      	strb	r3, [r7, #15]
        }
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        regWr(rHIRQ, HIRQ_sendback);
 801239a:	7bfb      	ldrb	r3, [r7, #15]
 801239c:	461a      	mov	r2, r3
 801239e:	21c8      	movs	r1, #200	; 0xc8
 80123a0:	6878      	ldr	r0, [r7, #4]
 80123a2:	f7ef fa73 	bl	800188c <_ZN8MAX3421eI3P102P9E5regWrEhh>
        return ( HIRQ_sendback);
 80123a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80123a8:	4618      	mov	r0, r3
 80123aa:	3710      	adds	r7, #16
 80123ac:	46bd      	mov	sp, r7
 80123ae:	bd80      	pop	{r7, pc}

080123b0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
        void FreeAddressByIndex(uint8_t index) {
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b084      	sub	sp, #16
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
 80123b8:	460b      	mov	r3, r1
 80123ba:	70fb      	strb	r3, [r7, #3]
                if(index == 0)
 80123bc:	78fb      	ldrb	r3, [r7, #3]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d03a      	beq.n	8012438 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x88>
                UsbDeviceAddress uda = thePool[index].address;
 80123c2:	78fa      	ldrb	r2, [r7, #3]
 80123c4:	6879      	ldr	r1, [r7, #4]
 80123c6:	4613      	mov	r3, r2
 80123c8:	00db      	lsls	r3, r3, #3
 80123ca:	1a9b      	subs	r3, r3, r2
 80123cc:	440b      	add	r3, r1
 80123ce:	330c      	adds	r3, #12
 80123d0:	781b      	ldrb	r3, [r3, #0]
 80123d2:	733b      	strb	r3, [r7, #12]
                if(uda.bmHub == 1) {
 80123d4:	7b3b      	ldrb	r3, [r7, #12]
 80123d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80123da:	b2db      	uxtb	r3, r3
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d025      	beq.n	801242c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 80123e0:	2301      	movs	r3, #1
 80123e2:	73fb      	strb	r3, [r7, #15]
 80123e4:	7bfb      	ldrb	r3, [r7, #15]
 80123e6:	461a      	mov	r2, r3
 80123e8:	7b39      	ldrb	r1, [r7, #12]
 80123ea:	6878      	ldr	r0, [r7, #4]
 80123ec:	f000 f828 	bl	8012440 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 80123f0:	4603      	mov	r3, r0
 80123f2:	73fb      	strb	r3, [r7, #15]
 80123f4:	7bfb      	ldrb	r3, [r7, #15]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	bf14      	ite	ne
 80123fa:	2301      	movne	r3, #1
 80123fc:	2300      	moveq	r3, #0
 80123fe:	b2db      	uxtb	r3, r3
 8012400:	2b00      	cmp	r3, #0
 8012402:	d005      	beq.n	8012410 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x60>
                                FreeAddressByIndex(i);
 8012404:	7bfb      	ldrb	r3, [r7, #15]
 8012406:	4619      	mov	r1, r3
 8012408:	6878      	ldr	r0, [r7, #4]
 801240a:	f7ff ffd1 	bl	80123b0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 801240e:	e7e9      	b.n	80123e4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x34>
                        if(hubCounter == uda.bmAddress)
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	79db      	ldrb	r3, [r3, #7]
 8012414:	7b3a      	ldrb	r2, [r7, #12]
 8012416:	f3c2 0202 	ubfx	r2, r2, #0, #3
 801241a:	b2d2      	uxtb	r2, r2
 801241c:	4293      	cmp	r3, r2
 801241e:	d105      	bne.n	801242c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                                hubCounter--;
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	79db      	ldrb	r3, [r3, #7]
 8012424:	3b01      	subs	r3, #1
 8012426:	b2da      	uxtb	r2, r3
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	71da      	strb	r2, [r3, #7]
                InitEntry(index);
 801242c:	78fb      	ldrb	r3, [r7, #3]
 801242e:	4619      	mov	r1, r3
 8012430:	6878      	ldr	r0, [r7, #4]
 8012432:	f7ff ff2d 	bl	8012290 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 8012436:	e000      	b.n	801243a <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x8a>
                        return;
 8012438:	bf00      	nop
        }
 801243a:	3710      	adds	r7, #16
 801243c:	46bd      	mov	sp, r7
 801243e:	bd80      	pop	{r7, pc}

08012440 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 8012440:	b480      	push	{r7}
 8012442:	b085      	sub	sp, #20
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
 8012448:	7039      	strb	r1, [r7, #0]
 801244a:	4613      	mov	r3, r2
 801244c:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 801244e:	78fb      	ldrb	r3, [r7, #3]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d004      	beq.n	801245e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 8012454:	78fb      	ldrb	r3, [r7, #3]
 8012456:	2b0f      	cmp	r3, #15
 8012458:	d801      	bhi.n	801245e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 801245a:	78fb      	ldrb	r3, [r7, #3]
 801245c:	e000      	b.n	8012460 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x20>
 801245e:	2301      	movs	r3, #1
 8012460:	73fb      	strb	r3, [r7, #15]
 8012462:	7bfb      	ldrb	r3, [r7, #15]
 8012464:	2b0f      	cmp	r3, #15
 8012466:	d816      	bhi.n	8012496 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x56>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 8012468:	7bfa      	ldrb	r2, [r7, #15]
 801246a:	6879      	ldr	r1, [r7, #4]
 801246c:	4613      	mov	r3, r2
 801246e:	00db      	lsls	r3, r3, #3
 8012470:	1a9b      	subs	r3, r3, r2
 8012472:	440b      	add	r3, r1
 8012474:	3308      	adds	r3, #8
 8012476:	791b      	ldrb	r3, [r3, #4]
 8012478:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 801247c:	b2da      	uxtb	r2, r3
 801247e:	783b      	ldrb	r3, [r7, #0]
 8012480:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8012484:	b2db      	uxtb	r3, r3
 8012486:	429a      	cmp	r2, r3
 8012488:	d101      	bne.n	801248e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x4e>
                                return i;
 801248a:	7bfb      	ldrb	r3, [r7, #15]
 801248c:	e004      	b.n	8012498 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x58>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 801248e:	7bfb      	ldrb	r3, [r7, #15]
 8012490:	3301      	adds	r3, #1
 8012492:	73fb      	strb	r3, [r7, #15]
 8012494:	e7e5      	b.n	8012462 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x22>
                return 0;
 8012496:	2300      	movs	r3, #0
        };
 8012498:	4618      	mov	r0, r3
 801249a:	3714      	adds	r7, #20
 801249c:	46bd      	mov	sp, r7
 801249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a2:	4770      	bx	lr

080124a4 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 80124a4:	b480      	push	{r7}
 80124a6:	b085      	sub	sp, #20
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	60f8      	str	r0, [r7, #12]
 80124ac:	60b9      	str	r1, [r7, #8]
 80124ae:	607a      	str	r2, [r7, #4]
        if(!pBuf) {
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d101      	bne.n	80124bc <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
 80124b8:	2300      	movs	r3, #0
 80124ba:	e031      	b.n	8012520 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	791b      	ldrb	r3, [r3, #4]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d022      	beq.n	801250a <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	881b      	ldrh	r3, [r3, #0]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d01e      	beq.n	801250a <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
                pBuf[valueSize - countDown] = (**pp);
 80124cc:	68bb      	ldr	r3, [r7, #8]
 80124ce:	681a      	ldr	r2, [r3, #0]
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	68f9      	ldr	r1, [r7, #12]
 80124d6:	7949      	ldrb	r1, [r1, #5]
 80124d8:	4608      	mov	r0, r1
 80124da:	68f9      	ldr	r1, [r7, #12]
 80124dc:	7909      	ldrb	r1, [r1, #4]
 80124de:	1a41      	subs	r1, r0, r1
 80124e0:	440b      	add	r3, r1
 80124e2:	7812      	ldrb	r2, [r2, #0]
 80124e4:	701a      	strb	r2, [r3, #0]
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	791b      	ldrb	r3, [r3, #4]
 80124ea:	3b01      	subs	r3, #1
 80124ec:	b2da      	uxtb	r2, r3
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	711a      	strb	r2, [r3, #4]
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	881b      	ldrh	r3, [r3, #0]
 80124f6:	3b01      	subs	r3, #1
 80124f8:	b29a      	uxth	r2, r3
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	801a      	strh	r2, [r3, #0]
 80124fe:	68bb      	ldr	r3, [r7, #8]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	1c5a      	adds	r2, r3, #1
 8012504:	68bb      	ldr	r3, [r7, #8]
 8012506:	601a      	str	r2, [r3, #0]
 8012508:	e7d8      	b.n	80124bc <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>

        if(countDown)
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	791b      	ldrb	r3, [r3, #4]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d001      	beq.n	8012516 <_ZN20MultiByteValueParser5ParseEPPhPt+0x72>
                return false;
 8012512:	2300      	movs	r3, #0
 8012514:	e004      	b.n	8012520 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>

        countDown = valueSize;
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	795a      	ldrb	r2, [r3, #5]
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	711a      	strb	r2, [r3, #4]
        return true;
 801251e:	2301      	movs	r3, #1
}
 8012520:	4618      	mov	r0, r3
 8012522:	3714      	adds	r7, #20
 8012524:	46bd      	mov	sp, r7
 8012526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252a:	4770      	bx	lr

0801252c <__cxa_pure_virtual>:
 801252c:	b508      	push	{r3, lr}
 801252e:	f000 f80d 	bl	801254c <_ZSt9terminatev>

08012532 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8012532:	b508      	push	{r3, lr}
 8012534:	4780      	blx	r0
 8012536:	f000 f80e 	bl	8012556 <abort>
	...

0801253c <_ZSt13get_terminatev>:
 801253c:	4b02      	ldr	r3, [pc, #8]	; (8012548 <_ZSt13get_terminatev+0xc>)
 801253e:	6818      	ldr	r0, [r3, #0]
 8012540:	f3bf 8f5b 	dmb	ish
 8012544:	4770      	bx	lr
 8012546:	bf00      	nop
 8012548:	2000013c 	.word	0x2000013c

0801254c <_ZSt9terminatev>:
 801254c:	b508      	push	{r3, lr}
 801254e:	f7ff fff5 	bl	801253c <_ZSt13get_terminatev>
 8012552:	f7ff ffee 	bl	8012532 <_ZN10__cxxabiv111__terminateEPFvvE>

08012556 <abort>:
 8012556:	b508      	push	{r3, lr}
 8012558:	2006      	movs	r0, #6
 801255a:	f000 f86b 	bl	8012634 <raise>
 801255e:	2001      	movs	r0, #1
 8012560:	f7ef fc38 	bl	8001dd4 <_exit>

08012564 <__errno>:
 8012564:	4b01      	ldr	r3, [pc, #4]	; (801256c <__errno+0x8>)
 8012566:	6818      	ldr	r0, [r3, #0]
 8012568:	4770      	bx	lr
 801256a:	bf00      	nop
 801256c:	20000140 	.word	0x20000140

08012570 <__libc_init_array>:
 8012570:	b570      	push	{r4, r5, r6, lr}
 8012572:	4d0d      	ldr	r5, [pc, #52]	; (80125a8 <__libc_init_array+0x38>)
 8012574:	4c0d      	ldr	r4, [pc, #52]	; (80125ac <__libc_init_array+0x3c>)
 8012576:	1b64      	subs	r4, r4, r5
 8012578:	10a4      	asrs	r4, r4, #2
 801257a:	2600      	movs	r6, #0
 801257c:	42a6      	cmp	r6, r4
 801257e:	d109      	bne.n	8012594 <__libc_init_array+0x24>
 8012580:	4d0b      	ldr	r5, [pc, #44]	; (80125b0 <__libc_init_array+0x40>)
 8012582:	4c0c      	ldr	r4, [pc, #48]	; (80125b4 <__libc_init_array+0x44>)
 8012584:	f000 f884 	bl	8012690 <_init>
 8012588:	1b64      	subs	r4, r4, r5
 801258a:	10a4      	asrs	r4, r4, #2
 801258c:	2600      	movs	r6, #0
 801258e:	42a6      	cmp	r6, r4
 8012590:	d105      	bne.n	801259e <__libc_init_array+0x2e>
 8012592:	bd70      	pop	{r4, r5, r6, pc}
 8012594:	f855 3b04 	ldr.w	r3, [r5], #4
 8012598:	4798      	blx	r3
 801259a:	3601      	adds	r6, #1
 801259c:	e7ee      	b.n	801257c <__libc_init_array+0xc>
 801259e:	f855 3b04 	ldr.w	r3, [r5], #4
 80125a2:	4798      	blx	r3
 80125a4:	3601      	adds	r6, #1
 80125a6:	e7f2      	b.n	801258e <__libc_init_array+0x1e>
 80125a8:	08012ad8 	.word	0x08012ad8
 80125ac:	08012ad8 	.word	0x08012ad8
 80125b0:	08012ad8 	.word	0x08012ad8
 80125b4:	08012ae0 	.word	0x08012ae0

080125b8 <memcpy>:
 80125b8:	440a      	add	r2, r1
 80125ba:	4291      	cmp	r1, r2
 80125bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80125c0:	d100      	bne.n	80125c4 <memcpy+0xc>
 80125c2:	4770      	bx	lr
 80125c4:	b510      	push	{r4, lr}
 80125c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80125ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80125ce:	4291      	cmp	r1, r2
 80125d0:	d1f9      	bne.n	80125c6 <memcpy+0xe>
 80125d2:	bd10      	pop	{r4, pc}

080125d4 <memset>:
 80125d4:	4402      	add	r2, r0
 80125d6:	4603      	mov	r3, r0
 80125d8:	4293      	cmp	r3, r2
 80125da:	d100      	bne.n	80125de <memset+0xa>
 80125dc:	4770      	bx	lr
 80125de:	f803 1b01 	strb.w	r1, [r3], #1
 80125e2:	e7f9      	b.n	80125d8 <memset+0x4>

080125e4 <_raise_r>:
 80125e4:	291f      	cmp	r1, #31
 80125e6:	b538      	push	{r3, r4, r5, lr}
 80125e8:	4604      	mov	r4, r0
 80125ea:	460d      	mov	r5, r1
 80125ec:	d904      	bls.n	80125f8 <_raise_r+0x14>
 80125ee:	2316      	movs	r3, #22
 80125f0:	6003      	str	r3, [r0, #0]
 80125f2:	f04f 30ff 	mov.w	r0, #4294967295
 80125f6:	bd38      	pop	{r3, r4, r5, pc}
 80125f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80125fa:	b112      	cbz	r2, 8012602 <_raise_r+0x1e>
 80125fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012600:	b94b      	cbnz	r3, 8012616 <_raise_r+0x32>
 8012602:	4620      	mov	r0, r4
 8012604:	f000 f830 	bl	8012668 <_getpid_r>
 8012608:	462a      	mov	r2, r5
 801260a:	4601      	mov	r1, r0
 801260c:	4620      	mov	r0, r4
 801260e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012612:	f000 b817 	b.w	8012644 <_kill_r>
 8012616:	2b01      	cmp	r3, #1
 8012618:	d00a      	beq.n	8012630 <_raise_r+0x4c>
 801261a:	1c59      	adds	r1, r3, #1
 801261c:	d103      	bne.n	8012626 <_raise_r+0x42>
 801261e:	2316      	movs	r3, #22
 8012620:	6003      	str	r3, [r0, #0]
 8012622:	2001      	movs	r0, #1
 8012624:	e7e7      	b.n	80125f6 <_raise_r+0x12>
 8012626:	2400      	movs	r4, #0
 8012628:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801262c:	4628      	mov	r0, r5
 801262e:	4798      	blx	r3
 8012630:	2000      	movs	r0, #0
 8012632:	e7e0      	b.n	80125f6 <_raise_r+0x12>

08012634 <raise>:
 8012634:	4b02      	ldr	r3, [pc, #8]	; (8012640 <raise+0xc>)
 8012636:	4601      	mov	r1, r0
 8012638:	6818      	ldr	r0, [r3, #0]
 801263a:	f7ff bfd3 	b.w	80125e4 <_raise_r>
 801263e:	bf00      	nop
 8012640:	20000140 	.word	0x20000140

08012644 <_kill_r>:
 8012644:	b538      	push	{r3, r4, r5, lr}
 8012646:	4d07      	ldr	r5, [pc, #28]	; (8012664 <_kill_r+0x20>)
 8012648:	2300      	movs	r3, #0
 801264a:	4604      	mov	r4, r0
 801264c:	4608      	mov	r0, r1
 801264e:	4611      	mov	r1, r2
 8012650:	602b      	str	r3, [r5, #0]
 8012652:	f7ef fbaf 	bl	8001db4 <_kill>
 8012656:	1c43      	adds	r3, r0, #1
 8012658:	d102      	bne.n	8012660 <_kill_r+0x1c>
 801265a:	682b      	ldr	r3, [r5, #0]
 801265c:	b103      	cbz	r3, 8012660 <_kill_r+0x1c>
 801265e:	6023      	str	r3, [r4, #0]
 8012660:	bd38      	pop	{r3, r4, r5, pc}
 8012662:	bf00      	nop
 8012664:	200058f4 	.word	0x200058f4

08012668 <_getpid_r>:
 8012668:	f7ef bb9c 	b.w	8001da4 <_getpid>

0801266c <strncmp>:
 801266c:	b510      	push	{r4, lr}
 801266e:	b16a      	cbz	r2, 801268c <strncmp+0x20>
 8012670:	3901      	subs	r1, #1
 8012672:	1884      	adds	r4, r0, r2
 8012674:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012678:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801267c:	4293      	cmp	r3, r2
 801267e:	d103      	bne.n	8012688 <strncmp+0x1c>
 8012680:	42a0      	cmp	r0, r4
 8012682:	d001      	beq.n	8012688 <strncmp+0x1c>
 8012684:	2b00      	cmp	r3, #0
 8012686:	d1f5      	bne.n	8012674 <strncmp+0x8>
 8012688:	1a98      	subs	r0, r3, r2
 801268a:	bd10      	pop	{r4, pc}
 801268c:	4610      	mov	r0, r2
 801268e:	e7fc      	b.n	801268a <strncmp+0x1e>

08012690 <_init>:
 8012690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012692:	bf00      	nop
 8012694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012696:	bc08      	pop	{r3}
 8012698:	469e      	mov	lr, r3
 801269a:	4770      	bx	lr

0801269c <_fini>:
 801269c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801269e:	bf00      	nop
 80126a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126a2:	bc08      	pop	{r3}
 80126a4:	469e      	mov	lr, r3
 80126a6:	4770      	bx	lr
