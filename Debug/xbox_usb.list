
xbox_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123a8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08012578  08012578  00022578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012968  08012968  000301a4  2**0
                  CONTENTS
  4 .ARM          00000008  08012968  08012968  00022968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012970  08012970  000301a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012970  08012970  00022970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012978  08012978  00022978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0801297c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000574c  200001a4  08012b20  000301a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200058f0  08012b20  000358f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005d43f  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000086ae  00000000  00000000  0008d613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002518  00000000  00000000  00095cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002348  00000000  00000000  000981e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c2e4  00000000  00000000  0009a528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c1b5  00000000  00000000  000c680c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f577f  00000000  00000000  000f29c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e8140  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1b0  00000000  00000000  001e8194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001a4 	.word	0x200001a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012560 	.word	0x08012560

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001a8 	.word	0x200001a8
 800020c:	08012560 	.word	0x08012560

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d101      	bne.n	800052c <_ZN5Print5writeEPKc+0x14>
 8000528:	2300      	movs	r3, #0
 800052a:	e00d      	b.n	8000548 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	3304      	adds	r3, #4
 8000532:	681c      	ldr	r4, [r3, #0]
 8000534:	6838      	ldr	r0, [r7, #0]
 8000536:	f7ff fe6b 	bl	8000210 <strlen>
 800053a:	4603      	mov	r3, r0
 800053c:	461a      	mov	r2, r3
 800053e:	6839      	ldr	r1, [r7, #0]
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	47a0      	blx	r4
 8000544:	4603      	mov	r3, r0
 8000546:	bf00      	nop
    }
 8000548:	4618      	mov	r0, r3
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bd90      	pop	{r4, r7, pc}

08000550 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	1e5a      	subs	r2, r3, #1
 8000564:	607a      	str	r2, [r7, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	bf14      	ite	ne
 800056a:	2301      	movne	r3, #1
 800056c:	2300      	moveq	r3, #0
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00e      	beq.n	8000592 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	1c59      	adds	r1, r3, #1
 800057e:	60b9      	str	r1, [r7, #8]
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	4619      	mov	r1, r3
 8000584:	68f8      	ldr	r0, [r7, #12]
 8000586:	4790      	blx	r2
 8000588:	4602      	mov	r2, r0
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	4413      	add	r3, r2
 800058e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000590:	e7e6      	b.n	8000560 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8000592:	697b      	ldr	r3, [r7, #20]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3718      	adds	r7, #24
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 80005a6:	6839      	ldr	r1, [r7, #0]
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f000 f805 	bl	80005b8 <_ZN5Print5printEPKc>
 80005ae:	4603      	mov	r3, r0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
  return write(str);
 80005c2:	6839      	ldr	r1, [r7, #0]
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff ffa7 	bl	8000518 <_ZN5Print5writeEPKc>
 80005ca:	4603      	mov	r3, r0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	70fb      	strb	r3, [r7, #3]
  return write(c);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	78fa      	ldrb	r2, [r7, #3]
 80005e8:	4611      	mov	r1, r2
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	4798      	blx	r3
 80005ee:	4603      	mov	r3, r0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	68b9      	ldr	r1, [r7, #8]
 8000608:	68f8      	ldr	r0, [r7, #12]
 800060a:	f000 f805 	bl	8000618 <_ZN5Print5printEli>
 800060e:	4603      	mov	r3, r0
}
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d109      	bne.n	800063e <_ZN5Print5printEli+0x26>
    return write(n);
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	b2d2      	uxtb	r2, r2
 8000634:	4611      	mov	r1, r2
 8000636:	68f8      	ldr	r0, [r7, #12]
 8000638:	4798      	blx	r3
 800063a:	4603      	mov	r3, r0
 800063c:	e029      	b.n	8000692 <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b0a      	cmp	r3, #10
 8000642:	d11d      	bne.n	8000680 <_ZN5Print5printEli+0x68>
    if (n < 0) {
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	2b00      	cmp	r3, #0
 8000648:	da12      	bge.n	8000670 <_ZN5Print5printEli+0x58>
      int t = print('-');
 800064a:	212d      	movs	r1, #45	; 0x2d
 800064c:	68f8      	ldr	r0, [r7, #12]
 800064e:	f7ff ffc1 	bl	80005d4 <_ZN5Print5printEc>
 8000652:	4603      	mov	r3, r0
 8000654:	617b      	str	r3, [r7, #20]
      n = -n;
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	425b      	negs	r3, r3
 800065a:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	220a      	movs	r2, #10
 8000660:	4619      	mov	r1, r3
 8000662:	68f8      	ldr	r0, [r7, #12]
 8000664:	f000 f819 	bl	800069a <_ZN5Print11printNumberEmh>
 8000668:	4602      	mov	r2, r0
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	4413      	add	r3, r2
 800066e:	e010      	b.n	8000692 <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	220a      	movs	r2, #10
 8000674:	4619      	mov	r1, r3
 8000676:	68f8      	ldr	r0, [r7, #12]
 8000678:	f000 f80f 	bl	800069a <_ZN5Print11printNumberEmh>
 800067c:	4603      	mov	r3, r0
 800067e:	e008      	b.n	8000692 <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	4619      	mov	r1, r3
 8000688:	68f8      	ldr	r0, [r7, #12]
 800068a:	f000 f806 	bl	800069a <_ZN5Print11printNumberEmh>
 800068e:	4603      	mov	r3, r0
 8000690:	bf00      	nop
  }
}
 8000692:	4618      	mov	r0, r3
 8000694:	3718      	adds	r7, #24
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 800069a:	b580      	push	{r7, lr}
 800069c:	b090      	sub	sp, #64	; 0x40
 800069e:	af00      	add	r7, sp, #0
 80006a0:	60f8      	str	r0, [r7, #12]
 80006a2:	60b9      	str	r1, [r7, #8]
 80006a4:	4613      	mov	r3, r2
 80006a6:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	3320      	adds	r3, #32
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 80006b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d801      	bhi.n	80006c0 <_ZN5Print11printNumberEmh+0x26>
 80006bc:	230a      	movs	r3, #10
 80006be:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006cc:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 80006ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	79f9      	ldrb	r1, [r7, #7]
 80006d8:	fb11 f303 	smulbb	r3, r1, r3
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80006e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d804      	bhi.n	80006f6 <_ZN5Print11printNumberEmh+0x5c>
 80006ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006f0:	3330      	adds	r3, #48	; 0x30
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	e003      	b.n	80006fe <_ZN5Print11printNumberEmh+0x64>
 80006f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006fa:	3337      	adds	r3, #55	; 0x37
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000700:	3a01      	subs	r2, #1
 8000702:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000704:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000706:	7013      	strb	r3, [r2, #0]
  } while(n);
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d000      	beq.n	8000710 <_ZN5Print11printNumberEmh+0x76>
  do {
 800070e:	e7d7      	b.n	80006c0 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 8000710:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000712:	68f8      	ldr	r0, [r7, #12]
 8000714:	f7ff ff00 	bl	8000518 <_ZN5Print5writeEPKc>
 8000718:	4603      	mov	r3, r0
}
 800071a:	4618      	mov	r0, r3
 800071c:	3740      	adds	r7, #64	; 0x40
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <_ZN11SerialClass5writeEh>:
#include "SerialClass.h"

size_t SerialClass::write(uint8_t data) {
 8000722:	b580      	push	{r7, lr}
 8000724:	b082      	sub	sp, #8
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	460b      	mov	r3, r1
 800072c:	70fb      	strb	r3, [r7, #3]
	return write(&data, 1);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	3304      	adds	r3, #4
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	1cf9      	adds	r1, r7, #3
 8000738:	2201      	movs	r2, #1
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	4798      	blx	r3
 800073e:	4603      	mov	r3, r0
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <_ZN11SerialClass5writeEPKhj>:

size_t SerialClass::write(const uint8_t *buffer, size_t size) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
	uint8_t *pBuffer = (uint8_t*)buffer;
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(pUART_Handle, pBuffer, size, HAL_MAX_DELAY);
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	6918      	ldr	r0, [r3, #16]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	b29a      	uxth	r2, r3
 8000760:	f04f 33ff 	mov.w	r3, #4294967295
 8000764:	6979      	ldr	r1, [r7, #20]
 8000766:	f005 f92c 	bl	80059c2 <HAL_UART_Transmit>
	return size;
 800076a:	687b      	ldr	r3, [r7, #4]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3718      	adds	r7, #24
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <_ZN11SerialClass4readEv>:

int SerialClass::read() {
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	uint8_t data;
	HAL_UART_Receive(pUART_Handle, &data, 1, HAL_MAX_DELAY);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6918      	ldr	r0, [r3, #16]
 8000780:	f107 010f 	add.w	r1, r7, #15
 8000784:	f04f 33ff 	mov.w	r3, #4294967295
 8000788:	2201      	movs	r2, #1
 800078a:	f005 f9ac 	bl	8005ae6 <HAL_UART_Receive>
	return data;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <_ZN11SerialClass9availableEv>:

int SerialClass::available() {
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	return -1;
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <_ZN11SerialClass4peekEv>:

int SerialClass::peek() {
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	return -1;
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007bc:	4618      	mov	r0, r3
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <_ZN11SerialClass5flushEv>:

void SerialClass::flush() {
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	4a06      	ldr	r2, [pc, #24]	; (8000800 <_ZN5PrintC1Ev+0x24>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2200      	movs	r2, #0
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4618      	mov	r0, r3
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	080126f8 	.word	0x080126f8

08000804 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ffe4 	bl	80007dc <_ZN5PrintC1Ev>
 8000814:	4a05      	ldr	r2, [pc, #20]	; (800082c <_ZN6StreamC1Ev+0x28>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4618      	mov	r0, r3
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	080127b8 	.word	0x080127b8

08000830 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>:
#include "Stream.h"
#include "stm32f4xx_hal.h"

class SerialClass : public Stream {
public:
	SerialClass(UART_HandleTypeDef *UART_Handle) : pUART_Handle(UART_Handle) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ffe1 	bl	8000804 <_ZN6StreamC1Ev>
 8000842:	4a05      	ldr	r2, [pc, #20]	; (8000858 <_ZN11SerialClassC1EP20__UART_HandleTypeDef+0x28>)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	683a      	ldr	r2, [r7, #0]
 800084c:	611a      	str	r2, [r3, #16]
	};
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	08012708 	.word	0x08012708

0800085c <_ZN2P910SetDirReadEv>:
MAKE_PIN(P4, GPIOB, GPIO_PIN_5); // D4
MAKE_PIN(P5, GPIOB, GPIO_PIN_4); // D5
MAKE_PIN(P6, GPIOB, GPIO_PIN_10); // D6
MAKE_PIN(P7, GPIOA, GPIO_PIN_8); // D7
MAKE_PIN(P8, GPIOA, GPIO_PIN_9); // D8
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <_ZN2P910SetDirReadEv+0x24>)
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <_ZN2P910SetDirReadEv+0x24>)
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <_ZN2P910SetDirReadEv+0x24>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	4903      	ldr	r1, [pc, #12]	; (8000880 <_ZN2P910SetDirReadEv+0x24>)
 8000874:	4803      	ldr	r0, [pc, #12]	; (8000884 <_ZN2P910SetDirReadEv+0x28>)
 8000876:	f001 fbc9 	bl	800200c <HAL_GPIO_Init>
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200001c0 	.word	0x200001c0
 8000884:	40020800 	.word	0x40020800

08000888 <_ZN3P103SetEv>:
MAKE_PIN(P10, GPIOB, GPIO_PIN_6); // D10
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
 800088c:	2201      	movs	r2, #1
 800088e:	2140      	movs	r1, #64	; 0x40
 8000890:	4802      	ldr	r0, [pc, #8]	; (800089c <_ZN3P103SetEv+0x14>)
 8000892:	f001 fd67 	bl	8002364 <HAL_GPIO_WritePin>
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40020400 	.word	0x40020400

080008a0 <_ZN3P105ClearEv>:
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	2200      	movs	r2, #0
 80008a6:	2140      	movs	r1, #64	; 0x40
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <_ZN3P105ClearEv+0x14>)
 80008aa:	f001 fd5b 	bl	8002364 <HAL_GPIO_WritePin>
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40020400 	.word	0x40020400

080008b8 <_ZN3P1011SetDirWriteEv>:
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008be:	2240      	movs	r2, #64	; 0x40
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008d0:	2203      	movs	r2, #3
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	4902      	ldr	r1, [pc, #8]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008d6:	4803      	ldr	r0, [pc, #12]	; (80008e4 <_ZN3P1011SetDirWriteEv+0x2c>)
 80008d8:	f001 fb98 	bl	800200c <HAL_GPIO_Init>
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	200001d4 	.word	0x200001d4
 80008e4:	40020400 	.word	0x40020400

080008e8 <_ZN3BTD11pairWithHIDEv>:
        bool motionPlusInside;
        /** True if it's a Wii U Pro Controller. */
        bool wiiUProController;

        /** Call this function to pair with a HID device */
        void pairWithHID() {
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
                waitingForConnection = false;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2200      	movs	r2, #0
 80008f4:	721a      	strb	r2, [r3, #8]
                pairWithHIDDevice = true;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2201      	movs	r2, #1
 80008fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                hci_state = HCI_CHECK_DEVICE_SERVICE;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2206      	movs	r2, #6
 8000902:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        };
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <_ZN5BTHID4pairEv>:

        /** True if a device is connected */
        bool connected;

        /** Call this to start the pairing sequence with a device */
        void pair(void) {
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
                if(pBtd)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d004      	beq.n	800092c <_ZN5BTHID4pairEv+0x1a>
                        pBtd->pairWithHID();
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff ffde 	bl	80008e8 <_ZN3BTD11pairWithHIDEv>
        };
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <_ZN5BTHID6onInitEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        void onInit() {
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
                if(pFuncOnInit)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d002      	beq.n	800094a <_ZN5BTHID6onInitEv+0x16>
                        pFuncOnInit(); // Call the user function
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	4798      	blx	r3
                OnInitBTHID();
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	331c      	adds	r3, #28
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	4798      	blx	r3
        };
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <_ZN5BTHID21ParseBTHIDControlDataEhPh>:
        };
        /**
         * Same as ParseBTHIDData for reports that are sent through the
         * interrupt pipe (in response to a GET_REPORT).
         */
        virtual void ParseBTHIDControlData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 800095e:	b480      	push	{r7}
 8000960:	b085      	sub	sp, #20
 8000962:	af00      	add	r7, sp, #0
 8000964:	60f8      	str	r0, [r7, #12]
 8000966:	460b      	mov	r3, r1
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	72fb      	strb	r3, [r7, #11]
                return;
 800096c:	bf00      	nop
        }
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <_ZN9PS4ParserC1Ev>:

/** This class parses all the data sent by the PS4 controller */
class PS4Parser {
public:
        /** Constructor for the PS4Parser class. */
        PS4Parser() {
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	4a05      	ldr	r2, [pc, #20]	; (8000998 <_ZN9PS4ParserC1Ev+0x20>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	601a      	str	r2, [r3, #0]
                Reset();
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f00f ffcc 	bl	8010924 <_ZN9PS4Parser5ResetEv>
        };
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	080127ac 	.word	0x080127ac

0800099c <_ZN9PS4Parser6setLedEhhh>:

        /**
         * Use this to set the color using RGB values.
         * @param r,g,b RGB value.
         */
        void setLed(uint8_t r, uint8_t g, uint8_t b) {
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	4608      	mov	r0, r1
 80009a6:	4611      	mov	r1, r2
 80009a8:	461a      	mov	r2, r3
 80009aa:	4603      	mov	r3, r0
 80009ac:	70fb      	strb	r3, [r7, #3]
 80009ae:	460b      	mov	r3, r1
 80009b0:	70bb      	strb	r3, [r7, #2]
 80009b2:	4613      	mov	r3, r2
 80009b4:	707b      	strb	r3, [r7, #1]
                ps4Output.r = r;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	78fa      	ldrb	r2, [r7, #3]
 80009ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                ps4Output.g = g;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	78ba      	ldrb	r2, [r7, #2]
 80009c2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                ps4Output.b = b;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	787a      	ldrb	r2, [r7, #1]
 80009ca:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                ps4Output.reportChanged = true;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2201      	movs	r2, #1
 80009d2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <_ZN9PS4Parser6setLedE10ColorsEnum>:

        /**
         * Use this to set the color using the predefined colors in ::ColorsEnum.
         * @param color The desired color.
         */
        void setLed(ColorsEnum color) {
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	6039      	str	r1, [r7, #0]
                setLed((uint8_t)(color >> 16), (uint8_t)(color >> 8), (uint8_t)(color));
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	141b      	asrs	r3, r3, #16
 80009f0:	b2d9      	uxtb	r1, r3
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	121b      	asrs	r3, r3, #8
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ffcd 	bl	800099c <_ZN9PS4Parser6setLedEhhh>
        };
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <_ZN5PS4BTC1EP3BTDbPKc>:
         * Constructor for the PS4BT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         * @param  pin   Write the pin to BTD#btdPin. If argument is omitted, then "0000" will be used.
         */
        PS4BT(BTD *p, bool pair = false, const char *pin = "0000") :
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair, pin) {
 8000a1c:	68f8      	ldr	r0, [r7, #12]
 8000a1e:	79fa      	ldrb	r2, [r7, #7]
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	68b9      	ldr	r1, [r7, #8]
 8000a24:	f00e fd98 	bl	800f558 <_ZN5BTHIDC1EP3BTDbPKc>
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	3378      	adds	r3, #120	; 0x78
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ffa3 	bl	8000978 <_ZN9PS4ParserC1Ev>
 8000a32:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <_ZN5PS4BTC1EP3BTDbPKc+0x48>)
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <_ZN5PS4BTC1EP3BTDbPKc+0x4c>)
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	679a      	str	r2, [r3, #120]	; 0x78
                PS4Parser::Reset();
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	3378      	adds	r3, #120	; 0x78
 8000a42:	4618      	mov	r0, r3
 8000a44:	f00f ff6e 	bl	8010924 <_ZN9PS4Parser5ResetEv>
        };
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	08012770 	.word	0x08012770
 8000a58:	080127a0 	.word	0x080127a0

08000a5c <_ZN5PS4BT9connectedEv>:

        /**
         * Used to check if a PS4 controller is connected.
         * @return Returns true if it is connected.
         */
        bool connected() {
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
                return BTHID::connected;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	7d5b      	ldrb	r3, [r3, #21]
        };
 8000a68:	4618      	mov	r0, r3
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <_ZN5PS4BT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	607a      	str	r2, [r7, #4]
 8000a80:	72fb      	strb	r3, [r7, #11]
                PS4Parser::Parse(len, buf);
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	3378      	adds	r3, #120	; 0x78
 8000a86:	7af9      	ldrb	r1, [r7, #11]
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f00f fe85 	bl	801079a <_ZN9PS4Parser5ParseEhPh>
        };
 8000a90:	bf00      	nop
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <_ZN5PS4BT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3378      	adds	r3, #120	; 0x78
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f00f ff3d 	bl	8010924 <_ZN9PS4Parser5ResetEv>
                enable_sixaxis(); // Make the controller send out the entire output report
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f000 f855 	bl	8000b5a <_ZN5PS4BT14enable_sixaxisEv>
                if (!pFuncOnInit)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d105      	bne.n	8000ac4 <_ZN5PS4BT11OnInitBTHIDEv+0x2c>
                        setLed(Blue); // Only call this is a user function has not been set
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3378      	adds	r3, #120	; 0x78
 8000abc:	21ff      	movs	r1, #255	; 0xff
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ff8f 	bl	80009e2 <_ZN9PS4Parser6setLedE10ColorsEnum>
        };
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <_ZN5PS4BT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3378      	adds	r3, #120	; 0x78
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f00f ff23 	bl	8010924 <_ZN9PS4Parser5ResetEv>
        };
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <_ZN5PS4BT16sendOutputReportEP9PS4Output>:
        /**@}*/

        /** @name PS4Parser implementation */
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b096      	sub	sp, #88	; 0x58
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
                uint8_t buf[79];
                memset(buf, 0, sizeof(buf));
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	224f      	movs	r2, #79	; 0x4f
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f011 fcd3 	bl	80124a4 <memset>

                buf[0] = 0x52; // HID BT Set_report (0x50) | Report Type (Output 0x02)
 8000afe:	2352      	movs	r3, #82	; 0x52
 8000b00:	723b      	strb	r3, [r7, #8]
                buf[1] = 0x11; // Report ID
 8000b02:	2311      	movs	r3, #17
 8000b04:	727b      	strb	r3, [r7, #9]
                buf[2] = 0x80;
 8000b06:	2380      	movs	r3, #128	; 0x80
 8000b08:	72bb      	strb	r3, [r7, #10]
                buf[4]= 0xFF;
 8000b0a:	23ff      	movs	r3, #255	; 0xff
 8000b0c:	733b      	strb	r3, [r7, #12]

                buf[7] = output->smallRumble; // Small Rumble
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	785b      	ldrb	r3, [r3, #1]
 8000b12:	73fb      	strb	r3, [r7, #15]
                buf[8] = output->bigRumble; // Big rumble
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	743b      	strb	r3, [r7, #16]

                buf[9] = output->r; // Red
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	789b      	ldrb	r3, [r3, #2]
 8000b1e:	747b      	strb	r3, [r7, #17]
                buf[10] = output->g; // Green
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	78db      	ldrb	r3, [r3, #3]
 8000b24:	74bb      	strb	r3, [r7, #18]
                buf[11] = output->b; // Blue
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	791b      	ldrb	r3, [r3, #4]
 8000b2a:	74fb      	strb	r3, [r7, #19]

                buf[12] = output->flashOn; // Time to flash bright (255 = 2.5 seconds)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	795b      	ldrb	r3, [r3, #5]
 8000b30:	753b      	strb	r3, [r7, #20]
                buf[13] = output->flashOff; // Time to flash dark (255 = 2.5 seconds)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	799b      	ldrb	r3, [r3, #6]
 8000b36:	757b      	strb	r3, [r7, #21]

                output->reportChanged = false;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	71da      	strb	r2, [r3, #7]

                // The PS4 console actually set the four last bytes to a CRC32 checksum, but it seems like it is actually not needed

                HID_Command(buf, sizeof(buf));
 8000b3e:	f107 0308 	add.w	r3, r7, #8
 8000b42:	224f      	movs	r2, #79	; 0x4f
 8000b44:	4619      	mov	r1, r3
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f000 f81a 	bl	8000b80 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000b4c:	bf00      	nop
 8000b4e:	3758      	adds	r7, #88	; 0x58
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <_ZThn120_N5PS4BT16sendOutputReportEP9PS4Output>:
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000b54:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 8000b58:	e7c5      	b.n	8000ae6 <_ZN5PS4BT16sendOutputReportEP9PS4Output>

08000b5a <_ZN5PS4BT14enable_sixaxisEv>:
        /**@}*/

private:
        void enable_sixaxis() { // Command used to make the PS4 controller send out the entire output report
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b084      	sub	sp, #16
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
                uint8_t buf[2];
                buf[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
 8000b62:	2343      	movs	r3, #67	; 0x43
 8000b64:	733b      	strb	r3, [r7, #12]
                buf[1] = 0x02; // Report ID
 8000b66:	2302      	movs	r3, #2
 8000b68:	737b      	strb	r3, [r7, #13]

                HID_Command(buf, 2);
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	2202      	movs	r2, #2
 8000b70:	4619      	mov	r1, r3
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f000 f804 	bl	8000b80 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <_ZN5PS4BT11HID_CommandEPhh>:

        void HID_Command(uint8_t *data, uint8_t nbytes) {
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b087      	sub	sp, #28
 8000b84:	af02      	add	r7, sp, #8
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	71fb      	strb	r3, [r7, #7]
                pBtd->L2CAP_Command(hci_handle, data, nbytes, control_scid[0], control_scid[1]);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	6898      	ldr	r0, [r3, #8]
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	8999      	ldrh	r1, [r3, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	7d9b      	ldrb	r3, [r3, #22]
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	7dd2      	ldrb	r2, [r2, #23]
 8000b9e:	79fc      	ldrb	r4, [r7, #7]
 8000ba0:	9201      	str	r2, [sp, #4]
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	4623      	mov	r3, r4
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	f00d fd72 	bl	800e690 <_ZN3BTD13L2CAP_CommandEtPhhhh>
        };
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd90      	pop	{r4, r7, pc}

08000bb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb8:	f001 f8e0 	bl	8001d7c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bbc:	f000 f8ac 	bl	8000d18 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc0:	f000 f9d6 	bl	8000f70 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000bc4:	f000 f9a6 	bl	8000f14 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8000bc8:	f000 f968 	bl	8000e9c <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8000bcc:	f00a feae 	bl	800b92c <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 8000bd0:	f000 f93a 	bl	8000e48 <_ZL13MX_TIM14_Initv>
  //MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
  SPI_Handle = hspi1;
 8000bd4:	4a39      	ldr	r2, [pc, #228]	; (8000cbc <main+0x108>)
 8000bd6:	4b3a      	ldr	r3, [pc, #232]	; (8000cc0 <main+0x10c>)
 8000bd8:	4610      	mov	r0, r2
 8000bda:	4619      	mov	r1, r3
 8000bdc:	2358      	movs	r3, #88	; 0x58
 8000bde:	461a      	mov	r2, r3
 8000be0:	f011 fc52 	bl	8012488 <memcpy>
  UART_Handle = huart2;
 8000be4:	4a37      	ldr	r2, [pc, #220]	; (8000cc4 <main+0x110>)
 8000be6:	4b38      	ldr	r3, [pc, #224]	; (8000cc8 <main+0x114>)
 8000be8:	4610      	mov	r0, r2
 8000bea:	4619      	mov	r1, r3
 8000bec:	2344      	movs	r3, #68	; 0x44
 8000bee:	461a      	mov	r2, r3
 8000bf0:	f011 fc4a 	bl	8012488 <memcpy>



  HAL_TIM_Base_Start_IT(&htim14);
 8000bf4:	4835      	ldr	r0, [pc, #212]	; (8000ccc <main+0x118>)
 8000bf6:	f004 fc43 	bl	8005480 <HAL_TIM_Base_Start_IT>
//  uint8_t L2_val;
//  uint8_t R2_val;
  Serial.print(F("\r\nCPU Frequency is: "));
 8000bfa:	4935      	ldr	r1, [pc, #212]	; (8000cd0 <main+0x11c>)
 8000bfc:	4835      	ldr	r0, [pc, #212]	; (8000cd4 <main+0x120>)
 8000bfe:	f7ff fccd 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
  cpu_freq = HAL_RCC_GetHCLKFreq()/1000000;
 8000c02:	f002 fe65 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4a33      	ldr	r2, [pc, #204]	; (8000cd8 <main+0x124>)
 8000c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0e:	0c9b      	lsrs	r3, r3, #18
 8000c10:	4a32      	ldr	r2, [pc, #200]	; (8000cdc <main+0x128>)
 8000c12:	6013      	str	r3, [r2, #0]
  Serial.print((int)cpu_freq);
 8000c14:	4b31      	ldr	r3, [pc, #196]	; (8000cdc <main+0x128>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	220a      	movs	r2, #10
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	482d      	ldr	r0, [pc, #180]	; (8000cd4 <main+0x120>)
 8000c1e:	f7ff fceb 	bl	80005f8 <_ZN5Print5printEii>
  Serial.print("MHz");
 8000c22:	492f      	ldr	r1, [pc, #188]	; (8000ce0 <main+0x12c>)
 8000c24:	482b      	ldr	r0, [pc, #172]	; (8000cd4 <main+0x120>)
 8000c26:	f7ff fcc7 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print("\r\nStart");
 8000c2a:	492e      	ldr	r1, [pc, #184]	; (8000ce4 <main+0x130>)
 8000c2c:	4829      	ldr	r0, [pc, #164]	; (8000cd4 <main+0x120>)
 8000c2e:	f7ff fcc3 	bl	80005b8 <_ZN5Print5printEPKc>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14);
 8000c32:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <main+0x118>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <main+0x134>)
 8000c3c:	801a      	strh	r2, [r3, #0]
  HAL_Delay(500); //500ms
 8000c3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c42:	f001 f8dd 	bl	8001e00 <HAL_Delay>
  timer_val2 = __HAL_TIM_GET_COUNTER(&htim14) - timer_val;
 8000c46:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <main+0x118>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	4b26      	ldr	r3, [pc, #152]	; (8000ce8 <main+0x134>)
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	4b25      	ldr	r3, [pc, #148]	; (8000cec <main+0x138>)
 8000c58:	801a      	strh	r2, [r3, #0]
  Serial.print("\r\nTime Elapsed is: ");
 8000c5a:	4925      	ldr	r1, [pc, #148]	; (8000cf0 <main+0x13c>)
 8000c5c:	481d      	ldr	r0, [pc, #116]	; (8000cd4 <main+0x120>)
 8000c5e:	f7ff fcab 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print((int)timer_val2/10);
 8000c62:	4b22      	ldr	r3, [pc, #136]	; (8000cec <main+0x138>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	4a23      	ldr	r2, [pc, #140]	; (8000cf4 <main+0x140>)
 8000c68:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6c:	08db      	lsrs	r3, r3, #3
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	220a      	movs	r2, #10
 8000c72:	4619      	mov	r1, r3
 8000c74:	4817      	ldr	r0, [pc, #92]	; (8000cd4 <main+0x120>)
 8000c76:	f7ff fcbf 	bl	80005f8 <_ZN5Print5printEii>
  Serial.print(" ms");
 8000c7a:	491f      	ldr	r1, [pc, #124]	; (8000cf8 <main+0x144>)
 8000c7c:	4815      	ldr	r0, [pc, #84]	; (8000cd4 <main+0x120>)
 8000c7e:	f7ff fc9b 	bl	80005b8 <_ZN5Print5printEPKc>
//  hal_gettick = HAL_GetTick();
//  hal_gettick/1000;

  Serial.print((int)hal_gettick);
 8000c82:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <main+0x148>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	220a      	movs	r2, #10
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4812      	ldr	r0, [pc, #72]	; (8000cd4 <main+0x120>)
 8000c8c:	f7ff fcb4 	bl	80005f8 <_ZN5Print5printEii>



  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 8000c90:	f008 f8fc 	bl	8008e8c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of getBT */
  getBTHandle = osThreadNew(StartGetBT, NULL, &getBT_attributes);
 8000c94:	4a1a      	ldr	r2, [pc, #104]	; (8000d00 <main+0x14c>)
 8000c96:	2100      	movs	r1, #0
 8000c98:	481a      	ldr	r0, [pc, #104]	; (8000d04 <main+0x150>)
 8000c9a:	f008 f941 	bl	8008f20 <osThreadNew>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4a19      	ldr	r2, [pc, #100]	; (8000d08 <main+0x154>)
 8000ca2:	6013      	str	r3, [r2, #0]

  /* creation of sendUSB */
  sendUSBHandle = osThreadNew(StartSendUSB, NULL, &sendUSB_attributes);
 8000ca4:	4a19      	ldr	r2, [pc, #100]	; (8000d0c <main+0x158>)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4819      	ldr	r0, [pc, #100]	; (8000d10 <main+0x15c>)
 8000caa:	f008 f939 	bl	8008f20 <osThreadNew>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4a18      	ldr	r2, [pc, #96]	; (8000d14 <main+0x160>)
 8000cb2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000cb4:	f008 f90e 	bl	8008ed4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <main+0x104>
 8000cba:	bf00      	nop
 8000cbc:	200002d4 	.word	0x200002d4
 8000cc0:	200001e8 	.word	0x200001e8
 8000cc4:	2000032c 	.word	0x2000032c
 8000cc8:	20000240 	.word	0x20000240
 8000ccc:	20000284 	.word	0x20000284
 8000cd0:	08012588 	.word	0x08012588
 8000cd4:	20000370 	.word	0x20000370
 8000cd8:	431bde83 	.word	0x431bde83
 8000cdc:	20000628 	.word	0x20000628
 8000ce0:	080125a0 	.word	0x080125a0
 8000ce4:	080125a4 	.word	0x080125a4
 8000ce8:	2000062c 	.word	0x2000062c
 8000cec:	2000062e 	.word	0x2000062e
 8000cf0:	080125ac 	.word	0x080125ac
 8000cf4:	cccccccd 	.word	0xcccccccd
 8000cf8:	080125c0 	.word	0x080125c0
 8000cfc:	20000630 	.word	0x20000630
 8000d00:	08012720 	.word	0x08012720
 8000d04:	08001025 	.word	0x08001025
 8000d08:	200002cc 	.word	0x200002cc
 8000d0c:	08012744 	.word	0x08012744
 8000d10:	0800168d 	.word	0x0800168d
 8000d14:	200002d0 	.word	0x200002d0

08000d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b0ac      	sub	sp, #176	; 0xb0
 8000d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d22:	2234      	movs	r2, #52	; 0x34
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f011 fbbc 	bl	80124a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d2c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	225c      	movs	r2, #92	; 0x5c
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f011 fbad 	bl	80124a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	4b3c      	ldr	r3, [pc, #240]	; (8000e40 <SystemClock_Config+0x128>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a3b      	ldr	r2, [pc, #236]	; (8000e40 <SystemClock_Config+0x128>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b39      	ldr	r3, [pc, #228]	; (8000e40 <SystemClock_Config+0x128>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	4b36      	ldr	r3, [pc, #216]	; (8000e44 <SystemClock_Config+0x12c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a35      	ldr	r2, [pc, #212]	; (8000e44 <SystemClock_Config+0x12c>)
 8000d70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	4b33      	ldr	r3, [pc, #204]	; (8000e44 <SystemClock_Config+0x12c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d82:	2301      	movs	r3, #1
 8000d84:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000da2:	23a8      	movs	r3, #168	; 0xa8
 8000da4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000da8:	2302      	movs	r3, #2
 8000daa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dae:	2307      	movs	r3, #7
 8000db0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000db4:	2302      	movs	r3, #2
 8000db6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f003 fac8 	bl	8004354 <HAL_RCC_OscConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	bf14      	ite	ne
 8000dca:	2301      	movne	r3, #1
 8000dcc:	2300      	moveq	r3, #0
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000dd4:	f000 fc80 	bl	80016d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd8:	230f      	movs	r3, #15
 8000dda:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000de4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000de8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dee:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000df0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000df4:	2105      	movs	r1, #5
 8000df6:	4618      	mov	r0, r3
 8000df8:	f002 fc84 	bl	8003704 <HAL_RCC_ClockConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	bf14      	ite	ne
 8000e02:	2301      	movne	r3, #1
 8000e04:	2300      	moveq	r3, #0
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000e0c:	f000 fc64 	bl	80016d8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e14:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000e16:	2300      	movs	r3, #0
 8000e18:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f002 fdbc 	bl	800399c <HAL_RCCEx_PeriphCLKConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	bf14      	ite	ne
 8000e2a:	2301      	movne	r3, #1
 8000e2c:	2300      	moveq	r3, #0
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000e34:	f000 fc50 	bl	80016d8 <Error_Handler>
  }
}
 8000e38:	bf00      	nop
 8000e3a:	37b0      	adds	r7, #176	; 0xb0
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40007000 	.word	0x40007000

08000e48 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <_ZL13MX_TIM14_Initv+0x4c>)
 8000e4e:	4a12      	ldr	r2, [pc, #72]	; (8000e98 <_ZL13MX_TIM14_Initv+0x50>)
 8000e50:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (168/2)*100 -1;
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <_ZL13MX_TIM14_Initv+0x4c>)
 8000e54:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000e58:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <_ZL13MX_TIM14_Initv+0x4c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <_ZL13MX_TIM14_Initv+0x4c>)
 8000e62:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e66:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <_ZL13MX_TIM14_Initv+0x4c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <_ZL13MX_TIM14_Initv+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000e74:	4807      	ldr	r0, [pc, #28]	; (8000e94 <_ZL13MX_TIM14_Initv+0x4c>)
 8000e76:	f004 fab3 	bl	80053e0 <HAL_TIM_Base_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	bf14      	ite	ne
 8000e80:	2301      	movne	r3, #1
 8000e82:	2300      	moveq	r3, #0
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <_ZL13MX_TIM14_Initv+0x46>
  {
    Error_Handler();
 8000e8a:	f000 fc25 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000284 	.word	0x20000284
 8000e98:	40002000 	.word	0x40002000

08000e9c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ea0:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000ea2:	4a1b      	ldr	r2, [pc, #108]	; (8000f10 <_ZL12MX_SPI1_Initv+0x74>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ea6:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000ea8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000eac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eb4:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ecc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000ed0:	2218      	movs	r2, #24
 8000ed2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000ee8:	220a      	movs	r2, #10
 8000eea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eec:	4807      	ldr	r0, [pc, #28]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000eee:	f003 fccf 	bl	8004890 <HAL_SPI_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	bf14      	ite	ne
 8000ef8:	2301      	movne	r3, #1
 8000efa:	2300      	moveq	r3, #0
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8000f02:	f000 fbe9 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200001e8 	.word	0x200001e8
 8000f10:	40013000 	.word	0x40013000

08000f14 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f1a:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <_ZL19MX_USART2_UART_Initv+0x58>)
 8000f1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f1e:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f4a:	4807      	ldr	r0, [pc, #28]	; (8000f68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f4c:	f004 fcec 	bl	8005928 <HAL_UART_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	bf14      	ite	ne
 8000f56:	2301      	movne	r3, #1
 8000f58:	2300      	moveq	r3, #0
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000f60:	f000 fbba 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000240 	.word	0x20000240
 8000f6c:	40004400 	.word	0x40004400

08000f70 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	4b23      	ldr	r3, [pc, #140]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a22      	ldr	r2, [pc, #136]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a1b      	ldr	r2, [pc, #108]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b19      	ldr	r3, [pc, #100]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a14      	ldr	r2, [pc, #80]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ff6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <_ZL12MX_GPIO_Initv+0xac>)
 8000ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <_ZL12MX_GPIO_Initv+0xb0>)
 800100c:	f000 fffe 	bl	800200c <HAL_GPIO_Init>

}
 8001010:	bf00      	nop
 8001012:	3728      	adds	r7, #40	; 0x28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40023800 	.word	0x40023800
 800101c:	10210000 	.word	0x10210000
 8001020:	40020800 	.word	0x40020800

08001024 <_Z10StartGetBTPv>:
//	}
//}

/* USER CODE END 4 */
void StartGetBT(void *argument)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */

  /* USER CODE BEGIN 5 */
  if (Usb.Init() == -1) {
 800102c:	48ac      	ldr	r0, [pc, #688]	; (80012e0 <_Z10StartGetBTPv+0x2bc>)
 800102e:	f000 fb61 	bl	80016f4 <_ZN8MAX3421eI3P102P9E4InitEv>
 8001032:	4603      	mov	r3, r0
 8001034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001038:	bf0c      	ite	eq
 800103a:	2301      	moveq	r3, #1
 800103c:	2300      	movne	r3, #0
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d004      	beq.n	800104e <_Z10StartGetBTPv+0x2a>
  		Serial.print(F("\r\nOSC did not start"));
 8001044:	49a7      	ldr	r1, [pc, #668]	; (80012e4 <_Z10StartGetBTPv+0x2c0>)
 8001046:	48a8      	ldr	r0, [pc, #672]	; (80012e8 <_Z10StartGetBTPv+0x2c4>)
 8001048:	f7ff faa8 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
  		while (1); // Halt
 800104c:	e7fe      	b.n	800104c <_Z10StartGetBTPv+0x28>
  }
  Serial.print(F("\r\nPS4 Bluetooth Library Started"));
 800104e:	49a7      	ldr	r1, [pc, #668]	; (80012ec <_Z10StartGetBTPv+0x2c8>)
 8001050:	48a5      	ldr	r0, [pc, #660]	; (80012e8 <_Z10StartGetBTPv+0x2c4>)
 8001052:	f7ff faa3 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>

  /*Initialize our gamepad, this is for use on a PC*/
  gameHID.JoyX = 0;
 8001056:	4ba6      	ldr	r3, [pc, #664]	; (80012f0 <_Z10StartGetBTPv+0x2cc>)
 8001058:	2200      	movs	r2, #0
 800105a:	709a      	strb	r2, [r3, #2]
  gameHID.JoyY = 0;
 800105c:	4ba4      	ldr	r3, [pc, #656]	; (80012f0 <_Z10StartGetBTPv+0x2cc>)
 800105e:	2200      	movs	r2, #0
 8001060:	70da      	strb	r2, [r3, #3]
  gameHID.Joy2X = 0;
 8001062:	4ba3      	ldr	r3, [pc, #652]	; (80012f0 <_Z10StartGetBTPv+0x2cc>)
 8001064:	2200      	movs	r2, #0
 8001066:	711a      	strb	r2, [r3, #4]
  gameHID.Joy2Y = 0;
 8001068:	4ba1      	ldr	r3, [pc, #644]	; (80012f0 <_Z10StartGetBTPv+0x2cc>)
 800106a:	2200      	movs	r2, #0
 800106c:	715a      	strb	r2, [r3, #5]
  gameHID.Joy_LT = 0;
 800106e:	4ba0      	ldr	r3, [pc, #640]	; (80012f0 <_Z10StartGetBTPv+0x2cc>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
  gameHID.Joy_RT = 0;
 8001074:	4b9e      	ldr	r3, [pc, #632]	; (80012f0 <_Z10StartGetBTPv+0x2cc>)
 8001076:	2200      	movs	r2, #0
 8001078:	705a      	strb	r2, [r3, #1]
  gameHID.ps4ButtonsTag.dummy = 0;
 800107a:	4a9d      	ldr	r2, [pc, #628]	; (80012f0 <_Z10StartGetBTPv+0x2cc>)
 800107c:	7993      	ldrb	r3, [r2, #6]
 800107e:	f36f 0300 	bfc	r3, #0, #1
 8001082:	7193      	strb	r3, [r2, #6]


  /* Initalize our Xbox Controller data that we will send in our hid reports */
  xboxHID.startByte = 0x00;
 8001084:	4b9b      	ldr	r3, [pc, #620]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
  xboxHID.bLength = 20;
 800108a:	4b9a      	ldr	r3, [pc, #616]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 800108c:	2214      	movs	r2, #20
 800108e:	705a      	strb	r2, [r3, #1]
  xboxHID.dButtons = 0x00;
 8001090:	4b98      	ldr	r3, [pc, #608]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 8001092:	2200      	movs	r2, #0
 8001094:	709a      	strb	r2, [r3, #2]
  xboxHID.A = 0;
 8001096:	4b97      	ldr	r3, [pc, #604]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 8001098:	2200      	movs	r2, #0
 800109a:	711a      	strb	r2, [r3, #4]
  xboxHID.B = 0;
 800109c:	4b95      	ldr	r3, [pc, #596]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 800109e:	2200      	movs	r2, #0
 80010a0:	715a      	strb	r2, [r3, #5]
  xboxHID.X = 0;
 80010a2:	4b94      	ldr	r3, [pc, #592]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	719a      	strb	r2, [r3, #6]
  xboxHID.Y = 0;
 80010a8:	4b92      	ldr	r3, [pc, #584]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	71da      	strb	r2, [r3, #7]
  xboxHID.BLACK = 0;
 80010ae:	4b91      	ldr	r3, [pc, #580]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	721a      	strb	r2, [r3, #8]
  xboxHID.WHITE = 0;
 80010b4:	4b8f      	ldr	r3, [pc, #572]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	725a      	strb	r2, [r3, #9]
  xboxHID.L = 0;
 80010ba:	4b8e      	ldr	r3, [pc, #568]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	729a      	strb	r2, [r3, #10]
  xboxHID.R = 0;
 80010c0:	4b8c      	ldr	r3, [pc, #560]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	72da      	strb	r2, [r3, #11]
  xboxHID.leftStickX = 0;
 80010c6:	4b8b      	ldr	r3, [pc, #556]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	819a      	strh	r2, [r3, #12]
  xboxHID.leftStickY = 0;
 80010cc:	4b89      	ldr	r3, [pc, #548]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	81da      	strh	r2, [r3, #14]
  xboxHID.rightStickX = 0;
 80010d2:	4b88      	ldr	r3, [pc, #544]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	821a      	strh	r2, [r3, #16]
  xboxHID.rightStickY = 0;
 80010d8:	4b86      	ldr	r3, [pc, #536]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	825a      	strh	r2, [r3, #18]
//		}
//		if(usb_failed || usb_failed2) {
//			Serial.print("\r\nUSBd failed");
//		}

		Usb.Task();
 80010de:	4880      	ldr	r0, [pc, #512]	; (80012e0 <_Z10StartGetBTPv+0x2bc>)
 80010e0:	f010 f95e 	bl	80113a0 <_ZN3USB4TaskEv>
		if (PS4.connected()) {
 80010e4:	4884      	ldr	r0, [pc, #528]	; (80012f8 <_Z10StartGetBTPv+0x2d4>)
 80010e6:	f7ff fcb9 	bl	8000a5c <_ZN5PS4BT9connectedEv>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 8298 	beq.w	8001622 <_Z10StartGetBTPv+0x5fe>
			ps4_connected = 1;
 80010f2:	4b82      	ldr	r3, [pc, #520]	; (80012fc <_Z10StartGetBTPv+0x2d8>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]
			LeftHatX_val = PS4.getAnalogHat(LeftHatX);
 80010f8:	2100      	movs	r1, #0
 80010fa:	4881      	ldr	r0, [pc, #516]	; (8001300 <_Z10StartGetBTPv+0x2dc>)
 80010fc:	f00f fb3d 	bl	801077a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	4b7f      	ldr	r3, [pc, #508]	; (8001304 <_Z10StartGetBTPv+0x2e0>)
 8001106:	701a      	strb	r2, [r3, #0]
			LeftHatY_val = PS4.getAnalogHat(LeftHatY);
 8001108:	2101      	movs	r1, #1
 800110a:	487d      	ldr	r0, [pc, #500]	; (8001300 <_Z10StartGetBTPv+0x2dc>)
 800110c:	f00f fb35 	bl	801077a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	4b7c      	ldr	r3, [pc, #496]	; (8001308 <_Z10StartGetBTPv+0x2e4>)
 8001116:	701a      	strb	r2, [r3, #0]
			RightHatX_val = PS4.getAnalogHat(RightHatX);
 8001118:	2102      	movs	r1, #2
 800111a:	4879      	ldr	r0, [pc, #484]	; (8001300 <_Z10StartGetBTPv+0x2dc>)
 800111c:	f00f fb2d 	bl	801077a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	4b79      	ldr	r3, [pc, #484]	; (800130c <_Z10StartGetBTPv+0x2e8>)
 8001126:	701a      	strb	r2, [r3, #0]
			RightHatY_val = PS4.getAnalogHat(RightHatY);
 8001128:	2103      	movs	r1, #3
 800112a:	4875      	ldr	r0, [pc, #468]	; (8001300 <_Z10StartGetBTPv+0x2dc>)
 800112c:	f00f fb25 	bl	801077a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	4b76      	ldr	r3, [pc, #472]	; (8001310 <_Z10StartGetBTPv+0x2ec>)
 8001136:	701a      	strb	r2, [r3, #0]

			/* Let's have a builtin deadzone */
			if (LeftHatX_val > 137 || LeftHatX_val < 117 || LeftHatY_val > 137 || LeftHatY_val < 117) {// || RightHatX_val > 137 || RightHatX_val < 117 || RightHatY_val > 137 || RightHatY_val < 117) {
 8001138:	4b72      	ldr	r3, [pc, #456]	; (8001304 <_Z10StartGetBTPv+0x2e0>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b89      	cmp	r3, #137	; 0x89
 800113e:	d80b      	bhi.n	8001158 <_Z10StartGetBTPv+0x134>
 8001140:	4b70      	ldr	r3, [pc, #448]	; (8001304 <_Z10StartGetBTPv+0x2e0>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b74      	cmp	r3, #116	; 0x74
 8001146:	d907      	bls.n	8001158 <_Z10StartGetBTPv+0x134>
 8001148:	4b6f      	ldr	r3, [pc, #444]	; (8001308 <_Z10StartGetBTPv+0x2e4>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b89      	cmp	r3, #137	; 0x89
 800114e:	d803      	bhi.n	8001158 <_Z10StartGetBTPv+0x134>
 8001150:	4b6d      	ldr	r3, [pc, #436]	; (8001308 <_Z10StartGetBTPv+0x2e4>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b74      	cmp	r3, #116	; 0x74
 8001156:	d82d      	bhi.n	80011b4 <_Z10StartGetBTPv+0x190>
				gameHID.JoyX = PS4.getAnalogHat(LeftHatX) - 128;
 8001158:	2100      	movs	r1, #0
 800115a:	4869      	ldr	r0, [pc, #420]	; (8001300 <_Z10StartGetBTPv+0x2dc>)
 800115c:	f00f fb0d 	bl	801077a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001160:	4603      	mov	r3, r0
 8001162:	3b80      	subs	r3, #128	; 0x80
 8001164:	b2db      	uxtb	r3, r3
 8001166:	b25a      	sxtb	r2, r3
 8001168:	4b61      	ldr	r3, [pc, #388]	; (80012f0 <_Z10StartGetBTPv+0x2cc>)
 800116a:	709a      	strb	r2, [r3, #2]
				gameHID.JoyY = PS4.getAnalogHat(LeftHatY) - 128;
 800116c:	2101      	movs	r1, #1
 800116e:	4864      	ldr	r0, [pc, #400]	; (8001300 <_Z10StartGetBTPv+0x2dc>)
 8001170:	f00f fb03 	bl	801077a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001174:	4603      	mov	r3, r0
 8001176:	3b80      	subs	r3, #128	; 0x80
 8001178:	b2db      	uxtb	r3, r3
 800117a:	b25a      	sxtb	r2, r3
 800117c:	4b5c      	ldr	r3, [pc, #368]	; (80012f0 <_Z10StartGetBTPv+0x2cc>)
 800117e:	70da      	strb	r2, [r3, #3]
				xboxHID.leftStickX = gameHID.JoyX << 8;	//only getting 8 bit value from bt
 8001180:	4b5b      	ldr	r3, [pc, #364]	; (80012f0 <_Z10StartGetBTPv+0x2cc>)
 8001182:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	b21a      	sxth	r2, r3
 800118a:	4b5a      	ldr	r3, [pc, #360]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 800118c:	819a      	strh	r2, [r3, #12]
				xboxHID.leftStickY = gameHID.JoyY << 8;	//xbox uses 16 bit signed
 800118e:	4b58      	ldr	r3, [pc, #352]	; (80012f0 <_Z10StartGetBTPv+0x2cc>)
 8001190:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	b21a      	sxth	r2, r3
 8001198:	4b56      	ldr	r3, [pc, #344]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 800119a:	81da      	strh	r2, [r3, #14]
				/* The Y axis by default is inverted on the Xbox */
				xboxHID.leftStickY = -xboxHID.leftStickY-128;
 800119c:	4b55      	ldr	r3, [pc, #340]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 800119e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80011a8:	1a9b      	subs	r3, r3, r2
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	4b51      	ldr	r3, [pc, #324]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 80011b0:	81da      	strh	r2, [r3, #14]
 80011b2:	e00b      	b.n	80011cc <_Z10StartGetBTPv+0x1a8>

			} else {
				gameHID.JoyX = 0;
 80011b4:	4b4e      	ldr	r3, [pc, #312]	; (80012f0 <_Z10StartGetBTPv+0x2cc>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	709a      	strb	r2, [r3, #2]
				gameHID.JoyY = 0;
 80011ba:	4b4d      	ldr	r3, [pc, #308]	; (80012f0 <_Z10StartGetBTPv+0x2cc>)
 80011bc:	2200      	movs	r2, #0
 80011be:	70da      	strb	r2, [r3, #3]
				xboxHID.leftStickX = 0;
 80011c0:	4b4c      	ldr	r3, [pc, #304]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	819a      	strh	r2, [r3, #12]
				xboxHID.leftStickY = 0;
 80011c6:	4b4b      	ldr	r3, [pc, #300]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	81da      	strh	r2, [r3, #14]
			}
			if(RightHatX_val > 137 || RightHatX_val < 117 || RightHatY_val > 137 || RightHatY_val < 117) {
 80011cc:	4b4f      	ldr	r3, [pc, #316]	; (800130c <_Z10StartGetBTPv+0x2e8>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b89      	cmp	r3, #137	; 0x89
 80011d2:	d80b      	bhi.n	80011ec <_Z10StartGetBTPv+0x1c8>
 80011d4:	4b4d      	ldr	r3, [pc, #308]	; (800130c <_Z10StartGetBTPv+0x2e8>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b74      	cmp	r3, #116	; 0x74
 80011da:	d907      	bls.n	80011ec <_Z10StartGetBTPv+0x1c8>
 80011dc:	4b4c      	ldr	r3, [pc, #304]	; (8001310 <_Z10StartGetBTPv+0x2ec>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b89      	cmp	r3, #137	; 0x89
 80011e2:	d803      	bhi.n	80011ec <_Z10StartGetBTPv+0x1c8>
 80011e4:	4b4a      	ldr	r3, [pc, #296]	; (8001310 <_Z10StartGetBTPv+0x2ec>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b74      	cmp	r3, #116	; 0x74
 80011ea:	d82d      	bhi.n	8001248 <_Z10StartGetBTPv+0x224>
				gameHID.Joy2X = PS4.getAnalogHat(RightHatX) - 128;
 80011ec:	2102      	movs	r1, #2
 80011ee:	4844      	ldr	r0, [pc, #272]	; (8001300 <_Z10StartGetBTPv+0x2dc>)
 80011f0:	f00f fac3 	bl	801077a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80011f4:	4603      	mov	r3, r0
 80011f6:	3b80      	subs	r3, #128	; 0x80
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	b25a      	sxtb	r2, r3
 80011fc:	4b3c      	ldr	r3, [pc, #240]	; (80012f0 <_Z10StartGetBTPv+0x2cc>)
 80011fe:	711a      	strb	r2, [r3, #4]
				gameHID.Joy2Y = PS4.getAnalogHat(RightHatY) - 128;
 8001200:	2103      	movs	r1, #3
 8001202:	483f      	ldr	r0, [pc, #252]	; (8001300 <_Z10StartGetBTPv+0x2dc>)
 8001204:	f00f fab9 	bl	801077a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001208:	4603      	mov	r3, r0
 800120a:	3b80      	subs	r3, #128	; 0x80
 800120c:	b2db      	uxtb	r3, r3
 800120e:	b25a      	sxtb	r2, r3
 8001210:	4b37      	ldr	r3, [pc, #220]	; (80012f0 <_Z10StartGetBTPv+0x2cc>)
 8001212:	715a      	strb	r2, [r3, #5]
				xboxHID.rightStickX = gameHID.Joy2X << 8;
 8001214:	4b36      	ldr	r3, [pc, #216]	; (80012f0 <_Z10StartGetBTPv+0x2cc>)
 8001216:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	b21a      	sxth	r2, r3
 800121e:	4b35      	ldr	r3, [pc, #212]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 8001220:	821a      	strh	r2, [r3, #16]
				xboxHID.rightStickY = gameHID.Joy2Y << 8;
 8001222:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <_Z10StartGetBTPv+0x2cc>)
 8001224:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	b21a      	sxth	r2, r3
 800122c:	4b31      	ldr	r3, [pc, #196]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 800122e:	825a      	strh	r2, [r3, #18]

				/* The Y axis by default is inverted on the Xbox */
				xboxHID.rightStickY = -xboxHID.rightStickY - 128;
 8001230:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 8001232:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001236:	b29a      	uxth	r2, r3
 8001238:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800123c:	1a9b      	subs	r3, r3, r2
 800123e:	b29b      	uxth	r3, r3
 8001240:	b21a      	sxth	r2, r3
 8001242:	4b2c      	ldr	r3, [pc, #176]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 8001244:	825a      	strh	r2, [r3, #18]
 8001246:	e00b      	b.n	8001260 <_Z10StartGetBTPv+0x23c>

			} else {
				gameHID.Joy2X = 0;
 8001248:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <_Z10StartGetBTPv+0x2cc>)
 800124a:	2200      	movs	r2, #0
 800124c:	711a      	strb	r2, [r3, #4]
				gameHID.Joy2Y = 0;
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <_Z10StartGetBTPv+0x2cc>)
 8001250:	2200      	movs	r2, #0
 8001252:	715a      	strb	r2, [r3, #5]
				xboxHID.rightStickX = 0;
 8001254:	4b27      	ldr	r3, [pc, #156]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 8001256:	2200      	movs	r2, #0
 8001258:	821a      	strh	r2, [r3, #16]
				xboxHID.rightStickY = 0;
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 800125c:	2200      	movs	r2, #0
 800125e:	825a      	strh	r2, [r3, #18]
			}

			xboxHID.L = PS4.getAnalogButton(L2);
 8001260:	2108      	movs	r1, #8
 8001262:	4827      	ldr	r0, [pc, #156]	; (8001300 <_Z10StartGetBTPv+0x2dc>)
 8001264:	f00f fa70 	bl	8010748 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 800126e:	729a      	strb	r2, [r3, #10]
			xboxHID.R = PS4.getAnalogButton(R2);
 8001270:	2109      	movs	r1, #9
 8001272:	4823      	ldr	r0, [pc, #140]	; (8001300 <_Z10StartGetBTPv+0x2dc>)
 8001274:	f00f fa68 	bl	8010748 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 800127e:	72da      	strb	r2, [r3, #11]
			gameHID.Joy_LT = xboxHID.L - 128;
 8001280:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 8001282:	7a9b      	ldrb	r3, [r3, #10]
 8001284:	3b80      	subs	r3, #128	; 0x80
 8001286:	b2db      	uxtb	r3, r3
 8001288:	b25a      	sxtb	r2, r3
 800128a:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <_Z10StartGetBTPv+0x2cc>)
 800128c:	701a      	strb	r2, [r3, #0]
			gameHID.Joy_RT = xboxHID.R - 128;
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 8001290:	7adb      	ldrb	r3, [r3, #11]
 8001292:	3b80      	subs	r3, #128	; 0x80
 8001294:	b2db      	uxtb	r3, r3
 8001296:	b25a      	sxtb	r2, r3
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <_Z10StartGetBTPv+0x2cc>)
 800129a:	705a      	strb	r2, [r3, #1]

			//Serial.print(gameHID.Joy_LT);

			if (PS4.getButtonClick(PS)) {
 800129c:	2110      	movs	r1, #16
 800129e:	4818      	ldr	r0, [pc, #96]	; (8001300 <_Z10StartGetBTPv+0x2dc>)
 80012a0:	f00f fa12 	bl	80106c8 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d005      	beq.n	80012b6 <_Z10StartGetBTPv+0x292>
				gameHID.ps4ButtonsTag.button_ps = 1;
 80012aa:	4a11      	ldr	r2, [pc, #68]	; (80012f0 <_Z10StartGetBTPv+0x2cc>)
 80012ac:	7993      	ldrb	r3, [r2, #6]
 80012ae:	f043 0302 	orr.w	r3, r3, #2
 80012b2:	7193      	strb	r3, [r2, #6]
 80012b4:	e004      	b.n	80012c0 <_Z10StartGetBTPv+0x29c>
			} else {
				gameHID.ps4ButtonsTag.button_ps = 0;
 80012b6:	4a0e      	ldr	r2, [pc, #56]	; (80012f0 <_Z10StartGetBTPv+0x2cc>)
 80012b8:	7993      	ldrb	r3, [r2, #6]
 80012ba:	f36f 0341 	bfc	r3, #1, #1
 80012be:	7193      	strb	r3, [r2, #6]
			}

			if (PS4.getButtonPress(TRIANGLE)) {
 80012c0:	210c      	movs	r1, #12
 80012c2:	480f      	ldr	r0, [pc, #60]	; (8001300 <_Z10StartGetBTPv+0x2dc>)
 80012c4:	f00f f9d8 	bl	8010678 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d022      	beq.n	8001314 <_Z10StartGetBTPv+0x2f0>
				gameHID.ps4ButtonsTag.button_triangle = 1;
 80012ce:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <_Z10StartGetBTPv+0x2cc>)
 80012d0:	79d3      	ldrb	r3, [r2, #7]
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	71d3      	strb	r3, [r2, #7]
				xboxHID.Y = 0xFF;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <_Z10StartGetBTPv+0x2d0>)
 80012da:	22ff      	movs	r2, #255	; 0xff
 80012dc:	71da      	strb	r2, [r3, #7]
 80012de:	e021      	b.n	8001324 <_Z10StartGetBTPv+0x300>
 80012e0:	20000384 	.word	0x20000384
 80012e4:	080125c4 	.word	0x080125c4
 80012e8:	20000370 	.word	0x20000370
 80012ec:	080125d8 	.word	0x080125d8
 80012f0:	20000634 	.word	0x20000634
 80012f4:	2000063c 	.word	0x2000063c
 80012f8:	20000558 	.word	0x20000558
 80012fc:	20000621 	.word	0x20000621
 8001300:	200005d0 	.word	0x200005d0
 8001304:	20000622 	.word	0x20000622
 8001308:	20000623 	.word	0x20000623
 800130c:	20000624 	.word	0x20000624
 8001310:	20000625 	.word	0x20000625
			} else {
				gameHID.ps4ButtonsTag.button_triangle = 0;
 8001314:	4ab9      	ldr	r2, [pc, #740]	; (80015fc <_Z10StartGetBTPv+0x5d8>)
 8001316:	79d3      	ldrb	r3, [r2, #7]
 8001318:	f36f 0300 	bfc	r3, #0, #1
 800131c:	71d3      	strb	r3, [r2, #7]
				xboxHID.Y = 0;
 800131e:	4bb8      	ldr	r3, [pc, #736]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 8001320:	2200      	movs	r2, #0
 8001322:	71da      	strb	r2, [r3, #7]
			}

			if (PS4.getButtonPress(CIRCLE)) {
 8001324:	210d      	movs	r1, #13
 8001326:	48b7      	ldr	r0, [pc, #732]	; (8001604 <_Z10StartGetBTPv+0x5e0>)
 8001328:	f00f f9a6 	bl	8010678 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d008      	beq.n	8001344 <_Z10StartGetBTPv+0x320>
				gameHID.ps4ButtonsTag.button_circle = 1;
 8001332:	4ab2      	ldr	r2, [pc, #712]	; (80015fc <_Z10StartGetBTPv+0x5d8>)
 8001334:	7993      	ldrb	r3, [r2, #6]
 8001336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800133a:	7193      	strb	r3, [r2, #6]
				xboxHID.B = 0xFF;
 800133c:	4bb0      	ldr	r3, [pc, #704]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 800133e:	22ff      	movs	r2, #255	; 0xff
 8001340:	715a      	strb	r2, [r3, #5]
 8001342:	e007      	b.n	8001354 <_Z10StartGetBTPv+0x330>
			} else {
				gameHID.ps4ButtonsTag.button_circle = 0;
 8001344:	4aad      	ldr	r2, [pc, #692]	; (80015fc <_Z10StartGetBTPv+0x5d8>)
 8001346:	7993      	ldrb	r3, [r2, #6]
 8001348:	f36f 13c7 	bfc	r3, #7, #1
 800134c:	7193      	strb	r3, [r2, #6]
				xboxHID.B = 0;
 800134e:	4bac      	ldr	r3, [pc, #688]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 8001350:	2200      	movs	r2, #0
 8001352:	715a      	strb	r2, [r3, #5]
			}

			if (PS4.getButtonPress(CROSS)) {
 8001354:	210e      	movs	r1, #14
 8001356:	48ab      	ldr	r0, [pc, #684]	; (8001604 <_Z10StartGetBTPv+0x5e0>)
 8001358:	f00f f98e 	bl	8010678 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d008      	beq.n	8001374 <_Z10StartGetBTPv+0x350>
				gameHID.ps4ButtonsTag.button_cross = 1;
 8001362:	4aa6      	ldr	r2, [pc, #664]	; (80015fc <_Z10StartGetBTPv+0x5d8>)
 8001364:	7993      	ldrb	r3, [r2, #6]
 8001366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800136a:	7193      	strb	r3, [r2, #6]
				xboxHID.A = 0xFF;
 800136c:	4ba4      	ldr	r3, [pc, #656]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 800136e:	22ff      	movs	r2, #255	; 0xff
 8001370:	711a      	strb	r2, [r3, #4]
 8001372:	e007      	b.n	8001384 <_Z10StartGetBTPv+0x360>
			} else {
				gameHID.ps4ButtonsTag.button_cross = 0;
 8001374:	4aa1      	ldr	r2, [pc, #644]	; (80015fc <_Z10StartGetBTPv+0x5d8>)
 8001376:	7993      	ldrb	r3, [r2, #6]
 8001378:	f36f 1386 	bfc	r3, #6, #1
 800137c:	7193      	strb	r3, [r2, #6]
				xboxHID.A = 0;
 800137e:	4ba0      	ldr	r3, [pc, #640]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 8001380:	2200      	movs	r2, #0
 8001382:	711a      	strb	r2, [r3, #4]
			}

			if (PS4.getButtonPress(SQUARE)) {
 8001384:	210f      	movs	r1, #15
 8001386:	489f      	ldr	r0, [pc, #636]	; (8001604 <_Z10StartGetBTPv+0x5e0>)
 8001388:	f00f f976 	bl	8010678 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d008      	beq.n	80013a4 <_Z10StartGetBTPv+0x380>
				gameHID.ps4ButtonsTag.button_square = 1;
 8001392:	4a9a      	ldr	r2, [pc, #616]	; (80015fc <_Z10StartGetBTPv+0x5d8>)
 8001394:	79d3      	ldrb	r3, [r2, #7]
 8001396:	f043 0302 	orr.w	r3, r3, #2
 800139a:	71d3      	strb	r3, [r2, #7]
				xboxHID.X = 0xFF;
 800139c:	4b98      	ldr	r3, [pc, #608]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 800139e:	22ff      	movs	r2, #255	; 0xff
 80013a0:	719a      	strb	r2, [r3, #6]
 80013a2:	e007      	b.n	80013b4 <_Z10StartGetBTPv+0x390>
			} else {
				gameHID.ps4ButtonsTag.button_square = 0;
 80013a4:	4a95      	ldr	r2, [pc, #596]	; (80015fc <_Z10StartGetBTPv+0x5d8>)
 80013a6:	79d3      	ldrb	r3, [r2, #7]
 80013a8:	f36f 0341 	bfc	r3, #1, #1
 80013ac:	71d3      	strb	r3, [r2, #7]
				xboxHID.X = 0;
 80013ae:	4b94      	ldr	r3, [pc, #592]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	719a      	strb	r2, [r3, #6]
			}

			if (PS4.getButtonPress(UP)) {
 80013b4:	2100      	movs	r1, #0
 80013b6:	4893      	ldr	r0, [pc, #588]	; (8001604 <_Z10StartGetBTPv+0x5e0>)
 80013b8:	f00f f95e 	bl	8010678 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00c      	beq.n	80013dc <_Z10StartGetBTPv+0x3b8>
				gameHID.ps4ButtonsTag.button_dpad_up = 1;
 80013c2:	4a8e      	ldr	r2, [pc, #568]	; (80015fc <_Z10StartGetBTPv+0x5d8>)
 80013c4:	79d3      	ldrb	r3, [r2, #7]
 80013c6:	f043 0304 	orr.w	r3, r3, #4
 80013ca:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DUP;
 80013cc:	4b8c      	ldr	r3, [pc, #560]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 80013ce:	789b      	ldrb	r3, [r3, #2]
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4b8a      	ldr	r3, [pc, #552]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 80013d8:	709a      	strb	r2, [r3, #2]
 80013da:	e00b      	b.n	80013f4 <_Z10StartGetBTPv+0x3d0>
			} else {
				gameHID.ps4ButtonsTag.button_dpad_up = 0;
 80013dc:	4a87      	ldr	r2, [pc, #540]	; (80015fc <_Z10StartGetBTPv+0x5d8>)
 80013de:	79d3      	ldrb	r3, [r2, #7]
 80013e0:	f36f 0382 	bfc	r3, #2, #1
 80013e4:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DUP;
 80013e6:	4b86      	ldr	r3, [pc, #536]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 80013e8:	789b      	ldrb	r3, [r3, #2]
 80013ea:	f023 0301 	bic.w	r3, r3, #1
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	4b83      	ldr	r3, [pc, #524]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 80013f2:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(RIGHT)) {
 80013f4:	2101      	movs	r1, #1
 80013f6:	4883      	ldr	r0, [pc, #524]	; (8001604 <_Z10StartGetBTPv+0x5e0>)
 80013f8:	f00f f93e 	bl	8010678 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00c      	beq.n	800141c <_Z10StartGetBTPv+0x3f8>
				gameHID.ps4ButtonsTag.button_dpad_right = 1;
 8001402:	4a7e      	ldr	r2, [pc, #504]	; (80015fc <_Z10StartGetBTPv+0x5d8>)
 8001404:	79d3      	ldrb	r3, [r2, #7]
 8001406:	f043 0308 	orr.w	r3, r3, #8
 800140a:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DRIGHT;
 800140c:	4b7c      	ldr	r3, [pc, #496]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 800140e:	789b      	ldrb	r3, [r3, #2]
 8001410:	f043 0308 	orr.w	r3, r3, #8
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4b7a      	ldr	r3, [pc, #488]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 8001418:	709a      	strb	r2, [r3, #2]
 800141a:	e00b      	b.n	8001434 <_Z10StartGetBTPv+0x410>
			} else {
				gameHID.ps4ButtonsTag.button_dpad_right = 0;
 800141c:	4a77      	ldr	r2, [pc, #476]	; (80015fc <_Z10StartGetBTPv+0x5d8>)
 800141e:	79d3      	ldrb	r3, [r2, #7]
 8001420:	f36f 03c3 	bfc	r3, #3, #1
 8001424:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DRIGHT;
 8001426:	4b76      	ldr	r3, [pc, #472]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 8001428:	789b      	ldrb	r3, [r3, #2]
 800142a:	f023 0308 	bic.w	r3, r3, #8
 800142e:	b2da      	uxtb	r2, r3
 8001430:	4b73      	ldr	r3, [pc, #460]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 8001432:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(DOWN)) {
 8001434:	2102      	movs	r1, #2
 8001436:	4873      	ldr	r0, [pc, #460]	; (8001604 <_Z10StartGetBTPv+0x5e0>)
 8001438:	f00f f91e 	bl	8010678 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00c      	beq.n	800145c <_Z10StartGetBTPv+0x438>
				gameHID.ps4ButtonsTag.button_dpad_down = 1;
 8001442:	4a6e      	ldr	r2, [pc, #440]	; (80015fc <_Z10StartGetBTPv+0x5d8>)
 8001444:	79d3      	ldrb	r3, [r2, #7]
 8001446:	f043 0320 	orr.w	r3, r3, #32
 800144a:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DDOWN;
 800144c:	4b6c      	ldr	r3, [pc, #432]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 800144e:	789b      	ldrb	r3, [r3, #2]
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4b6a      	ldr	r3, [pc, #424]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 8001458:	709a      	strb	r2, [r3, #2]
 800145a:	e00b      	b.n	8001474 <_Z10StartGetBTPv+0x450>
			} else {
				gameHID.ps4ButtonsTag.button_dpad_down = 0;
 800145c:	4a67      	ldr	r2, [pc, #412]	; (80015fc <_Z10StartGetBTPv+0x5d8>)
 800145e:	79d3      	ldrb	r3, [r2, #7]
 8001460:	f36f 1345 	bfc	r3, #5, #1
 8001464:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DDOWN;
 8001466:	4b66      	ldr	r3, [pc, #408]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 8001468:	789b      	ldrb	r3, [r3, #2]
 800146a:	f023 0302 	bic.w	r3, r3, #2
 800146e:	b2da      	uxtb	r2, r3
 8001470:	4b63      	ldr	r3, [pc, #396]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 8001472:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(LEFT)) {
 8001474:	2103      	movs	r1, #3
 8001476:	4863      	ldr	r0, [pc, #396]	; (8001604 <_Z10StartGetBTPv+0x5e0>)
 8001478:	f00f f8fe 	bl	8010678 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00c      	beq.n	800149c <_Z10StartGetBTPv+0x478>
				gameHID.ps4ButtonsTag.button_dpad_left = 1;
 8001482:	4a5e      	ldr	r2, [pc, #376]	; (80015fc <_Z10StartGetBTPv+0x5d8>)
 8001484:	79d3      	ldrb	r3, [r2, #7]
 8001486:	f043 0310 	orr.w	r3, r3, #16
 800148a:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DLEFT;
 800148c:	4b5c      	ldr	r3, [pc, #368]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 800148e:	789b      	ldrb	r3, [r3, #2]
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4b5a      	ldr	r3, [pc, #360]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 8001498:	709a      	strb	r2, [r3, #2]
 800149a:	e00b      	b.n	80014b4 <_Z10StartGetBTPv+0x490>

			} else {
				gameHID.ps4ButtonsTag.button_dpad_left = 0;
 800149c:	4a57      	ldr	r2, [pc, #348]	; (80015fc <_Z10StartGetBTPv+0x5d8>)
 800149e:	79d3      	ldrb	r3, [r2, #7]
 80014a0:	f36f 1304 	bfc	r3, #4, #1
 80014a4:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DLEFT;
 80014a6:	4b56      	ldr	r3, [pc, #344]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 80014a8:	789b      	ldrb	r3, [r3, #2]
 80014aa:	f023 0304 	bic.w	r3, r3, #4
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	4b53      	ldr	r3, [pc, #332]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 80014b2:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(L1)) {
 80014b4:	210a      	movs	r1, #10
 80014b6:	4853      	ldr	r0, [pc, #332]	; (8001604 <_Z10StartGetBTPv+0x5e0>)
 80014b8:	f00f f8de 	bl	8010678 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d008      	beq.n	80014d4 <_Z10StartGetBTPv+0x4b0>
				gameHID.ps4ButtonsTag.button_left_trigger = 1;
 80014c2:	4a4e      	ldr	r2, [pc, #312]	; (80015fc <_Z10StartGetBTPv+0x5d8>)
 80014c4:	7993      	ldrb	r3, [r2, #6]
 80014c6:	f043 0320 	orr.w	r3, r3, #32
 80014ca:	7193      	strb	r3, [r2, #6]
				xboxHID.BLACK = 0xFF;
 80014cc:	4b4c      	ldr	r3, [pc, #304]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 80014ce:	22ff      	movs	r2, #255	; 0xff
 80014d0:	721a      	strb	r2, [r3, #8]
 80014d2:	e007      	b.n	80014e4 <_Z10StartGetBTPv+0x4c0>

			} else {
				gameHID.ps4ButtonsTag.button_left_trigger = 0;
 80014d4:	4a49      	ldr	r2, [pc, #292]	; (80015fc <_Z10StartGetBTPv+0x5d8>)
 80014d6:	7993      	ldrb	r3, [r2, #6]
 80014d8:	f36f 1345 	bfc	r3, #5, #1
 80014dc:	7193      	strb	r3, [r2, #6]
				xboxHID.BLACK = 0;
 80014de:	4b48      	ldr	r3, [pc, #288]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	721a      	strb	r2, [r3, #8]
			}

			if (PS4.getButtonPress(L3)) {
 80014e4:	2106      	movs	r1, #6
 80014e6:	4847      	ldr	r0, [pc, #284]	; (8001604 <_Z10StartGetBTPv+0x5e0>)
 80014e8:	f00f f8c6 	bl	8010678 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00c      	beq.n	800150c <_Z10StartGetBTPv+0x4e8>
				gameHID.ps4ButtonsTag.button_left_thumb = 1;
 80014f2:	4a42      	ldr	r2, [pc, #264]	; (80015fc <_Z10StartGetBTPv+0x5d8>)
 80014f4:	79d3      	ldrb	r3, [r2, #7]
 80014f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014fa:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_LS_BTN;
 80014fc:	4b40      	ldr	r3, [pc, #256]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 80014fe:	789b      	ldrb	r3, [r3, #2]
 8001500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4b3e      	ldr	r3, [pc, #248]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 8001508:	709a      	strb	r2, [r3, #2]
 800150a:	e00b      	b.n	8001524 <_Z10StartGetBTPv+0x500>
			} else {
				gameHID.ps4ButtonsTag.button_left_thumb = 0;
 800150c:	4a3b      	ldr	r2, [pc, #236]	; (80015fc <_Z10StartGetBTPv+0x5d8>)
 800150e:	79d3      	ldrb	r3, [r2, #7]
 8001510:	f36f 1386 	bfc	r3, #6, #1
 8001514:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_LS_BTN;
 8001516:	4b3a      	ldr	r3, [pc, #232]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 8001518:	789b      	ldrb	r3, [r3, #2]
 800151a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800151e:	b2da      	uxtb	r2, r3
 8001520:	4b37      	ldr	r3, [pc, #220]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 8001522:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(R1)) {
 8001524:	210b      	movs	r1, #11
 8001526:	4837      	ldr	r0, [pc, #220]	; (8001604 <_Z10StartGetBTPv+0x5e0>)
 8001528:	f00f f8a6 	bl	8010678 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d008      	beq.n	8001544 <_Z10StartGetBTPv+0x520>
				gameHID.ps4ButtonsTag.button_right_trigger = 1;
 8001532:	4a32      	ldr	r2, [pc, #200]	; (80015fc <_Z10StartGetBTPv+0x5d8>)
 8001534:	7993      	ldrb	r3, [r2, #6]
 8001536:	f043 0310 	orr.w	r3, r3, #16
 800153a:	7193      	strb	r3, [r2, #6]
				xboxHID.WHITE = 0xFF;
 800153c:	4b30      	ldr	r3, [pc, #192]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 800153e:	22ff      	movs	r2, #255	; 0xff
 8001540:	725a      	strb	r2, [r3, #9]
 8001542:	e007      	b.n	8001554 <_Z10StartGetBTPv+0x530>
			} else {
				gameHID.ps4ButtonsTag.button_right_trigger = 0;
 8001544:	4a2d      	ldr	r2, [pc, #180]	; (80015fc <_Z10StartGetBTPv+0x5d8>)
 8001546:	7993      	ldrb	r3, [r2, #6]
 8001548:	f36f 1304 	bfc	r3, #4, #1
 800154c:	7193      	strb	r3, [r2, #6]
				xboxHID.WHITE = 0;
 800154e:	4b2c      	ldr	r3, [pc, #176]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 8001550:	2200      	movs	r2, #0
 8001552:	725a      	strb	r2, [r3, #9]
			}

			if (PS4.getButtonPress(R3)) {
 8001554:	2107      	movs	r1, #7
 8001556:	482b      	ldr	r0, [pc, #172]	; (8001604 <_Z10StartGetBTPv+0x5e0>)
 8001558:	f00f f88e 	bl	8010678 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00c      	beq.n	800157c <_Z10StartGetBTPv+0x558>
				gameHID.ps4ButtonsTag.button_right_thumb = 1;
 8001562:	4a26      	ldr	r2, [pc, #152]	; (80015fc <_Z10StartGetBTPv+0x5d8>)
 8001564:	79d3      	ldrb	r3, [r2, #7]
 8001566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800156a:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_RS_BTN;
 800156c:	4b24      	ldr	r3, [pc, #144]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 800156e:	789b      	ldrb	r3, [r3, #2]
 8001570:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4b22      	ldr	r3, [pc, #136]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 8001578:	709a      	strb	r2, [r3, #2]
 800157a:	e00b      	b.n	8001594 <_Z10StartGetBTPv+0x570>
			} else {
				gameHID.ps4ButtonsTag.button_right_thumb = 0;
 800157c:	4a1f      	ldr	r2, [pc, #124]	; (80015fc <_Z10StartGetBTPv+0x5d8>)
 800157e:	79d3      	ldrb	r3, [r2, #7]
 8001580:	f36f 13c7 	bfc	r3, #7, #1
 8001584:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_RS_BTN;
 8001586:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 8001588:	789b      	ldrb	r3, [r3, #2]
 800158a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800158e:	b2da      	uxtb	r2, r3
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 8001592:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(SHARE)) {
 8001594:	2104      	movs	r1, #4
 8001596:	481b      	ldr	r0, [pc, #108]	; (8001604 <_Z10StartGetBTPv+0x5e0>)
 8001598:	f00f f86e 	bl	8010678 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00c      	beq.n	80015bc <_Z10StartGetBTPv+0x598>
				gameHID.ps4ButtonsTag.button_share = 1;
 80015a2:	4a16      	ldr	r2, [pc, #88]	; (80015fc <_Z10StartGetBTPv+0x5d8>)
 80015a4:	7993      	ldrb	r3, [r2, #6]
 80015a6:	f043 0308 	orr.w	r3, r3, #8
 80015aa:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons |= XBOX_BACK_BTN;
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 80015ae:	789b      	ldrb	r3, [r3, #2]
 80015b0:	f043 0320 	orr.w	r3, r3, #32
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4b12      	ldr	r3, [pc, #72]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 80015b8:	709a      	strb	r2, [r3, #2]
 80015ba:	e00b      	b.n	80015d4 <_Z10StartGetBTPv+0x5b0>
			} else {
				gameHID.ps4ButtonsTag.button_share = 0;
 80015bc:	4a0f      	ldr	r2, [pc, #60]	; (80015fc <_Z10StartGetBTPv+0x5d8>)
 80015be:	7993      	ldrb	r3, [r2, #6]
 80015c0:	f36f 03c3 	bfc	r3, #3, #1
 80015c4:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_BACK_BTN;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 80015c8:	789b      	ldrb	r3, [r3, #2]
 80015ca:	f023 0320 	bic.w	r3, r3, #32
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 80015d2:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(OPTIONS)) {
 80015d4:	2105      	movs	r1, #5
 80015d6:	480b      	ldr	r0, [pc, #44]	; (8001604 <_Z10StartGetBTPv+0x5e0>)
 80015d8:	f00f f84e 	bl	8010678 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d012      	beq.n	8001608 <_Z10StartGetBTPv+0x5e4>
				gameHID.ps4ButtonsTag.button_start = 1;
 80015e2:	4a06      	ldr	r2, [pc, #24]	; (80015fc <_Z10StartGetBTPv+0x5d8>)
 80015e4:	7993      	ldrb	r3, [r2, #6]
 80015e6:	f043 0304 	orr.w	r3, r3, #4
 80015ea:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons |= XBOX_START_BTN;
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 80015ee:	789b      	ldrb	r3, [r3, #2]
 80015f0:	f043 0310 	orr.w	r3, r3, #16
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4b02      	ldr	r3, [pc, #8]	; (8001600 <_Z10StartGetBTPv+0x5dc>)
 80015f8:	709a      	strb	r2, [r3, #2]
 80015fa:	e034      	b.n	8001666 <_Z10StartGetBTPv+0x642>
 80015fc:	20000634 	.word	0x20000634
 8001600:	2000063c 	.word	0x2000063c
 8001604:	200005d0 	.word	0x200005d0
			} else {
				gameHID.ps4ButtonsTag.button_start = 0;
 8001608:	4a19      	ldr	r2, [pc, #100]	; (8001670 <_Z10StartGetBTPv+0x64c>)
 800160a:	7993      	ldrb	r3, [r2, #6]
 800160c:	f36f 0382 	bfc	r3, #2, #1
 8001610:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_START_BTN;
 8001612:	4b18      	ldr	r3, [pc, #96]	; (8001674 <_Z10StartGetBTPv+0x650>)
 8001614:	789b      	ldrb	r3, [r3, #2]
 8001616:	f023 0310 	bic.w	r3, r3, #16
 800161a:	b2da      	uxtb	r2, r3
 800161c:	4b15      	ldr	r3, [pc, #84]	; (8001674 <_Z10StartGetBTPv+0x650>)
 800161e:	709a      	strb	r2, [r3, #2]
 8001620:	e021      	b.n	8001666 <_Z10StartGetBTPv+0x642>
			}

		} else if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8001622:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001626:	4814      	ldr	r0, [pc, #80]	; (8001678 <_Z10StartGetBTPv+0x654>)
 8001628:	f000 fe84 	bl	8002334 <HAL_GPIO_ReadPin>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	bf0c      	ite	eq
 8001632:	2301      	moveq	r3, #1
 8001634:	2300      	movne	r3, #0
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	d011      	beq.n	8001660 <_Z10StartGetBTPv+0x63c>
			if (!buttonPressed) {
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <_Z10StartGetBTPv+0x658>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	f083 0301 	eor.w	r3, r3, #1
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d006      	beq.n	8001658 <_Z10StartGetBTPv+0x634>
				Serial.print(F("\r\nButton Pressed"));
 800164a:	490d      	ldr	r1, [pc, #52]	; (8001680 <_Z10StartGetBTPv+0x65c>)
 800164c:	480d      	ldr	r0, [pc, #52]	; (8001684 <_Z10StartGetBTPv+0x660>)
 800164e:	f7fe ffa5 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
				PS4.pair(); // Start paring routine if user button was just pressed
 8001652:	480d      	ldr	r0, [pc, #52]	; (8001688 <_Z10StartGetBTPv+0x664>)
 8001654:	f7ff f95d 	bl	8000912 <_ZN5BTHID4pairEv>
			}
			buttonPressed = true;
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <_Z10StartGetBTPv+0x658>)
 800165a:	2201      	movs	r2, #1
 800165c:	701a      	strb	r2, [r3, #0]
 800165e:	e002      	b.n	8001666 <_Z10StartGetBTPv+0x642>
		} else
			buttonPressed = false;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <_Z10StartGetBTPv+0x658>)
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
    osDelay(1);
 8001666:	2001      	movs	r0, #1
 8001668:	f007 fcec 	bl	8009044 <osDelay>
		Usb.Task();
 800166c:	e537      	b.n	80010de <_Z10StartGetBTPv+0xba>
 800166e:	bf00      	nop
 8001670:	20000634 	.word	0x20000634
 8001674:	2000063c 	.word	0x2000063c
 8001678:	40020800 	.word	0x40020800
 800167c:	20000620 	.word	0x20000620
 8001680:	080125f8 	.word	0x080125f8
 8001684:	20000370 	.word	0x20000370
 8001688:	20000558 	.word	0x20000558

0800168c <_Z12StartSendUSBPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendUSB */
void StartSendUSB(void *argument)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendUSB */
	MX_USB_DEVICE_Init();
 8001694:	f00a f94a 	bl	800b92c <MX_USB_DEVICE_Init>
#endif

#if OG_XBOX_SETUP
	//Serial.print(xboxHID.leftStickX);

	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &xboxHID, sizeof(struct xboxHID_t));
 8001698:	2214      	movs	r2, #20
 800169a:	4904      	ldr	r1, [pc, #16]	; (80016ac <_Z12StartSendUSBPv+0x20>)
 800169c:	4804      	ldr	r0, [pc, #16]	; (80016b0 <_Z12StartSendUSBPv+0x24>)
 800169e:	f006 f997 	bl	80079d0 <USBD_HID_SendReport>
#endif
    osDelay(1);
 80016a2:	2001      	movs	r0, #1
 80016a4:	f007 fcce 	bl	8009044 <osDelay>
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &xboxHID, sizeof(struct xboxHID_t));
 80016a8:	e7f6      	b.n	8001698 <_Z12StartSendUSBPv+0xc>
 80016aa:	bf00      	nop
 80016ac:	2000063c 	.word	0x2000063c
 80016b0:	20005014 	.word	0x20005014

080016b4 <HAL_TIM_PeriodElapsedCallback>:
  }
  /* USER CODE END StartSendUSB */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d101      	bne.n	80016ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016c6:	f000 fb7b 	bl	8001dc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40001c00 	.word	0x40001c00

080016d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	Serial.print("\r\nSomething went wrong!");
 80016dc:	4903      	ldr	r1, [pc, #12]	; (80016ec <Error_Handler+0x14>)
 80016de:	4804      	ldr	r0, [pc, #16]	; (80016f0 <Error_Handler+0x18>)
 80016e0:	f7fe ff6a 	bl	80005b8 <_ZN5Print5printEPKc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e4:	b672      	cpsid	i
}
 80016e6:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <Error_Handler+0x10>
 80016ea:	bf00      	nop
 80016ec:	0801260c 	.word	0x0801260c
 80016f0:	20000370 	.word	0x20000370

080016f4 <_ZN8MAX3421eI3P102P9E4InitEv>:
        return ( i);
}

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
template< typename SPI_SS, typename INTR >
int8_t MAX3421e< SPI_SS, INTR >::Init() {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
        XMEM_ACQUIRE_SPI();
        // Moved here.
        // you really should not init hardware in the constructor when it involves locks.
        // Also avoids the vbus flicker issue confusing some devices.
        /* pin and peripheral setup */
        SPI_SS::SetDirWrite();
 80016fc:	f7ff f8dc 	bl	80008b8 <_ZN3P1011SetDirWriteEv>
        SPI_SS::Set();
 8001700:	f7ff f8c2 	bl	8000888 <_ZN3P103SetEv>
        spi::init();
 8001704:	f000 f845 	bl	8001792 <_ZN3SPiI3P133P113P123P10E4initEv>
        INTR::SetDirRead();
 8001708:	f7ff f8a8 	bl	800085c <_ZN2P910SetDirReadEv>
        XMEM_RELEASE_SPI();
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 800170c:	2218      	movs	r2, #24
 800170e:	2188      	movs	r1, #136	; 0x88
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 f845 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f864 	bl	80017e4 <_ZN8MAX3421eI3P102P9E5resetEv>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	bf0c      	ite	eq
 8001722:	2301      	moveq	r3, #1
 8001724:	2300      	movne	r3, #0
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	d002      	beq.n	8001732 <_ZN8MAX3421eI3P102P9E4InitEv+0x3e>
                return ( -1);
 800172c:	f04f 33ff 	mov.w	r3, #4294967295
 8001730:	e02b      	b.n	800178a <_ZN8MAX3421eI3P102P9E4InitEv+0x96>
        }

        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 8001732:	22c1      	movs	r2, #193	; 0xc1
 8001734:	21d8      	movs	r1, #216	; 0xd8
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 f832 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 800173c:	2260      	movs	r2, #96	; 0x60
 800173e:	21d0      	movs	r1, #208	; 0xd0
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 f82d 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        /* check if device is connected */
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 8001746:	2204      	movs	r2, #4
 8001748:	21e8      	movs	r1, #232	; 0xe8
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 f828 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 8001750:	21e8      	movs	r1, #232	; 0xe8
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 f876 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001758:	4603      	mov	r3, r0
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	2b00      	cmp	r3, #0
 8001760:	bf0c      	ite	eq
 8001762:	2301      	moveq	r3, #1
 8001764:	2300      	movne	r3, #0
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b00      	cmp	r3, #0
 800176a:	d000      	beq.n	800176e <_ZN8MAX3421eI3P102P9E4InitEv+0x7a>
 800176c:	e7f0      	b.n	8001750 <_ZN8MAX3421eI3P102P9E4InitEv+0x5c>

        busprobe(); //check if anything is connected
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 f88a 	bl	8001888 <_ZN8MAX3421eI3P102P9E8busprobeEv>

        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 8001774:	2220      	movs	r2, #32
 8001776:	21c8      	movs	r1, #200	; 0xc8
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 f811 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
 800177e:	2201      	movs	r2, #1
 8001780:	2180      	movs	r1, #128	; 0x80
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f80c 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return ( 0);
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <_ZN3SPiI3P133P113P123P10E4initEv>:
        static void init() {
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
        }
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>:
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	70fb      	strb	r3, [r7, #3]
 80017ac:	4613      	mov	r3, r2
 80017ae:	70bb      	strb	r3, [r7, #2]
        SPI_SS::Clear();
 80017b0:	f7ff f876 	bl	80008a0 <_ZN3P105ClearEv>
        c[0] = reg | 0x02;
 80017b4:	78fb      	ldrb	r3, [r7, #3]
 80017b6:	f043 0302 	orr.w	r3, r3, #2
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	733b      	strb	r3, [r7, #12]
        c[1] = data;
 80017be:	78bb      	ldrb	r3, [r7, #2]
 80017c0:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(&SPI_Handle, c, 2, HAL_MAX_DELAY);
 80017c2:	f107 010c 	add.w	r1, r7, #12
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ca:	2202      	movs	r2, #2
 80017cc:	4804      	ldr	r0, [pc, #16]	; (80017e0 <_ZN8MAX3421eI3P102P9E5regWrEhh+0x40>)
 80017ce:	f003 f8e8 	bl	80049a2 <HAL_SPI_Transmit>
        SPI_SS::Set();
 80017d2:	f7ff f859 	bl	8000888 <_ZN3P103SetEv>
        return;
 80017d6:	bf00      	nop
};
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200002d4 	.word	0x200002d4

080017e4 <_ZN8MAX3421eI3P102P9E5resetEv>:
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
        uint16_t i = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	81fb      	strh	r3, [r7, #14]
        regWr(rUSBCTL, bmCHIPRES);
 80017f0:	2220      	movs	r2, #32
 80017f2:	2178      	movs	r1, #120	; 0x78
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ffd3 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rUSBCTL, 0x00);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2178      	movs	r1, #120	; 0x78
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff ffce 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(++i) {
 8001804:	89fb      	ldrh	r3, [r7, #14]
 8001806:	3301      	adds	r3, #1
 8001808:	81fb      	strh	r3, [r7, #14]
 800180a:	89fb      	ldrh	r3, [r7, #14]
 800180c:	2b00      	cmp	r3, #0
 800180e:	bf14      	ite	ne
 8001810:	2301      	movne	r3, #1
 8001812:	2300      	moveq	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00f      	beq.n	800183a <_ZN8MAX3421eI3P102P9E5resetEv+0x56>
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 800181a:	2168      	movs	r1, #104	; 0x68
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 f811 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001822:	4603      	mov	r3, r0
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	bf14      	ite	ne
 800182c:	2301      	movne	r3, #1
 800182e:	2300      	moveq	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d100      	bne.n	8001838 <_ZN8MAX3421eI3P102P9E5resetEv+0x54>
        while(++i) {
 8001836:	e7e5      	b.n	8001804 <_ZN8MAX3421eI3P102P9E5resetEv+0x20>
                        break;
 8001838:	bf00      	nop
        return ( i);
 800183a:	89fb      	ldrh	r3, [r7, #14]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <_ZN8MAX3421eI3P102P9E5regRdEh>:
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	70fb      	strb	r3, [r7, #3]
        SPI_SS::Clear();
 8001850:	f7ff f826 	bl	80008a0 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8001854:	1cf9      	adds	r1, r7, #3
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	2201      	movs	r2, #1
 800185c:	4809      	ldr	r0, [pc, #36]	; (8001884 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 800185e:	f003 f8a0 	bl	80049a2 <HAL_SPI_Transmit>
        uint8_t rv = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	73fb      	strb	r3, [r7, #15]
        HAL_SPI_Receive(&SPI_Handle, &rv, 1, HAL_MAX_DELAY);
 8001866:	f107 010f 	add.w	r1, r7, #15
 800186a:	f04f 33ff 	mov.w	r3, #4294967295
 800186e:	2201      	movs	r2, #1
 8001870:	4804      	ldr	r0, [pc, #16]	; (8001884 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 8001872:	f003 f9d2 	bl	8004c1a <HAL_SPI_Receive>
        SPI_SS::Set();
 8001876:	f7ff f807 	bl	8000888 <_ZN3P103SetEv>
        return (rv);
 800187a:	7bfb      	ldrb	r3, [r7, #15]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	200002d4 	.word	0x200002d4

08001888 <_ZN8MAX3421eI3P102P9E8busprobeEv>:
        return ( 0);
}

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
 8001890:	21f8      	movs	r1, #248	; 0xf8
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ffd6 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001898:	4603      	mov	r3, r0
 800189a:	73fb      	strb	r3, [r7, #15]
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018a2:	73fb      	strb	r3, [r7, #15]
        switch(bus_sample) { //start full-speed or low-speed host
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	2bc0      	cmp	r3, #192	; 0xc0
 80018a8:	d04a      	beq.n	8001940 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xb8>
 80018aa:	2bc0      	cmp	r3, #192	; 0xc0
 80018ac:	dc55      	bgt.n	800195a <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 80018ae:	2b80      	cmp	r3, #128	; 0x80
 80018b0:	d006      	beq.n	80018c0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x38>
 80018b2:	2b80      	cmp	r3, #128	; 0x80
 80018b4:	dc51      	bgt.n	800195a <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d046      	beq.n	8001948 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xc0>
 80018ba:	2b40      	cmp	r3, #64	; 0x40
 80018bc:	d020      	beq.n	8001900 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x78>
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
                        vbusState = SE0;
                        break;
        }//end switch( bus_sample )
}
 80018be:	e04c      	b.n	800195a <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 80018c0:	21d8      	movs	r1, #216	; 0xd8
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ffbe 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	bf0c      	ite	eq
 80018d2:	2301      	moveq	r3, #1
 80018d4:	2300      	movne	r3, #0
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d008      	beq.n	80018ee <_ZN8MAX3421eI3P102P9E8busprobeEv+0x66>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 80018dc:	22c9      	movs	r2, #201	; 0xc9
 80018de:	21d8      	movs	r1, #216	; 0xd8
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff ff5d 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 80018e6:	4b1f      	ldr	r3, [pc, #124]	; (8001964 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80018e8:	2202      	movs	r2, #2
 80018ea:	701a      	strb	r2, [r3, #0]
                        break;
 80018ec:	e035      	b.n	800195a <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 80018ee:	22cb      	movs	r2, #203	; 0xcb
 80018f0:	21d8      	movs	r1, #216	; 0xd8
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ff54 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 80018f8:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80018fa:	2203      	movs	r2, #3
 80018fc:	701a      	strb	r2, [r3, #0]
                        break;
 80018fe:	e02c      	b.n	800195a <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8001900:	21d8      	movs	r1, #216	; 0xd8
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff ff9e 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001908:	4603      	mov	r3, r0
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	bf0c      	ite	eq
 8001912:	2301      	moveq	r3, #1
 8001914:	2300      	movne	r3, #0
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	d008      	beq.n	800192e <_ZN8MAX3421eI3P102P9E8busprobeEv+0xa6>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 800191c:	22cb      	movs	r2, #203	; 0xcb
 800191e:	21d8      	movs	r1, #216	; 0xd8
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff3d 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001928:	2203      	movs	r2, #3
 800192a:	701a      	strb	r2, [r3, #0]
                        break;
 800192c:	e015      	b.n	800195a <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 800192e:	22c9      	movs	r2, #201	; 0xc9
 8001930:	21d8      	movs	r1, #216	; 0xd8
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff ff34 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 8001938:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800193a:	2202      	movs	r2, #2
 800193c:	701a      	strb	r2, [r3, #0]
                        break;
 800193e:	e00c      	b.n	800195a <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        vbusState = SE1;
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001942:	2201      	movs	r2, #1
 8001944:	701a      	strb	r2, [r3, #0]
                        break;
 8001946:	e008      	b.n	800195a <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 8001948:	22d1      	movs	r2, #209	; 0xd1
 800194a:	21d8      	movs	r1, #216	; 0xd8
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ff27 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        vbusState = SE0;
 8001952:	4b04      	ldr	r3, [pc, #16]	; (8001964 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
                        break;
 8001958:	bf00      	nop
}
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000650 	.word	0x20000650

08001968 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d115      	bne.n	80019a4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800197e:	4293      	cmp	r3, r2
 8001980:	d110      	bne.n	80019a4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
SerialClass Serial(&huart2);
 8001982:	490a      	ldr	r1, [pc, #40]	; (80019ac <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001984:	480a      	ldr	r0, [pc, #40]	; (80019b0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001986:	f7fe ff53 	bl	8000830 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>
USB Usb;
 800198a:	480a      	ldr	r0, [pc, #40]	; (80019b4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800198c:	f00f f868 	bl	8010a60 <_ZN3USBC1Ev>
BTD Btd(&Usb);
 8001990:	4908      	ldr	r1, [pc, #32]	; (80019b4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001992:	4809      	ldr	r0, [pc, #36]	; (80019b8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001994:	f00a fe68 	bl	800c668 <_ZN3BTDC1EP3USB>
PS4BT PS4(&Btd);
 8001998:	4b08      	ldr	r3, [pc, #32]	; (80019bc <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800199a:	2200      	movs	r2, #0
 800199c:	4906      	ldr	r1, [pc, #24]	; (80019b8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800199e:	4808      	ldr	r0, [pc, #32]	; (80019c0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80019a0:	f7ff f834 	bl	8000a0c <_ZN5PS4BTC1EP3BTDbPKc>
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000240 	.word	0x20000240
 80019b0:	20000370 	.word	0x20000370
 80019b4:	20000384 	.word	0x20000384
 80019b8:	20000440 	.word	0x20000440
 80019bc:	08012624 	.word	0x08012624
 80019c0:	20000558 	.word	0x20000558

080019c4 <_GLOBAL__sub_I_hspi1>:
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019cc:	2001      	movs	r0, #1
 80019ce:	f7ff ffcb 	bl	8001968 <_Z41__static_initialization_and_destruction_0ii>
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_MspInit+0x54>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	4a11      	ldr	r2, [pc, #68]	; (8001a28 <HAL_MspInit+0x54>)
 80019e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ea:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <HAL_MspInit+0x54>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_MspInit+0x54>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <HAL_MspInit+0x54>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a04:	6413      	str	r3, [r2, #64]	; 0x40
 8001a06:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <HAL_MspInit+0x54>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	210f      	movs	r1, #15
 8001a16:	f06f 0001 	mvn.w	r0, #1
 8001a1a:	f000 facd 	bl	8001fb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800

08001a2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a19      	ldr	r2, [pc, #100]	; (8001ab0 <HAL_SPI_MspInit+0x84>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d12b      	bne.n	8001aa6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <HAL_SPI_MspInit+0x88>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	4a17      	ldr	r2, [pc, #92]	; (8001ab4 <HAL_SPI_MspInit+0x88>)
 8001a58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5e:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <HAL_SPI_MspInit+0x88>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <HAL_SPI_MspInit+0x88>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a10      	ldr	r2, [pc, #64]	; (8001ab4 <HAL_SPI_MspInit+0x88>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <HAL_SPI_MspInit+0x88>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a86:	23e0      	movs	r3, #224	; 0xe0
 8001a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a92:	2303      	movs	r3, #3
 8001a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a96:	2305      	movs	r3, #5
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9a:	f107 0314 	add.w	r3, r7, #20
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <HAL_SPI_MspInit+0x8c>)
 8001aa2:	f000 fab3 	bl	800200c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001aa6:	bf00      	nop
 8001aa8:	3728      	adds	r7, #40	; 0x28
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40013000 	.word	0x40013000
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40020000 	.word	0x40020000

08001abc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a0e      	ldr	r2, [pc, #56]	; (8001b04 <HAL_TIM_Base_MspInit+0x48>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d115      	bne.n	8001afa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <HAL_TIM_Base_MspInit+0x4c>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	4a0c      	ldr	r2, [pc, #48]	; (8001b08 <HAL_TIM_Base_MspInit+0x4c>)
 8001ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <HAL_TIM_Base_MspInit+0x4c>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2105      	movs	r1, #5
 8001aee:	202d      	movs	r0, #45	; 0x2d
 8001af0:	f000 fa62 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001af4:	202d      	movs	r0, #45	; 0x2d
 8001af6:	f000 fa7b 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40002000 	.word	0x40002000
 8001b08:	40023800 	.word	0x40023800

08001b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	; 0x28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a19      	ldr	r2, [pc, #100]	; (8001b90 <HAL_UART_MspInit+0x84>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d12b      	bne.n	8001b86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <HAL_UART_MspInit+0x88>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	4a17      	ldr	r2, [pc, #92]	; (8001b94 <HAL_UART_MspInit+0x88>)
 8001b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <HAL_UART_MspInit+0x88>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_UART_MspInit+0x88>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a10      	ldr	r2, [pc, #64]	; (8001b94 <HAL_UART_MspInit+0x88>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <HAL_UART_MspInit+0x88>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b66:	230c      	movs	r3, #12
 8001b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b72:	2303      	movs	r3, #3
 8001b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b76:	2307      	movs	r3, #7
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4805      	ldr	r0, [pc, #20]	; (8001b98 <HAL_UART_MspInit+0x8c>)
 8001b82:	f000 fa43 	bl	800200c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b86:	bf00      	nop
 8001b88:	3728      	adds	r7, #40	; 0x28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40004400 	.word	0x40004400
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40020000 	.word	0x40020000

08001b9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08c      	sub	sp, #48	; 0x30
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8001bac:	2200      	movs	r2, #0
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	202c      	movs	r0, #44	; 0x2c
 8001bb2:	f000 fa01 	bl	8001fb8 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001bb6:	202c      	movs	r0, #44	; 0x2c
 8001bb8:	f000 fa1a 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <HAL_InitTick+0xa4>)
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	4a1e      	ldr	r2, [pc, #120]	; (8001c40 <HAL_InitTick+0xa4>)
 8001bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bca:	6413      	str	r3, [r2, #64]	; 0x40
 8001bcc:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <HAL_InitTick+0xa4>)
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bd8:	f107 0210 	add.w	r2, r7, #16
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4611      	mov	r1, r2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f001 fea8 	bl	8003938 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001be8:	f001 fe7e 	bl	80038e8 <HAL_RCC_GetPCLK1Freq>
 8001bec:	4603      	mov	r3, r0
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf4:	4a13      	ldr	r2, [pc, #76]	; (8001c44 <HAL_InitTick+0xa8>)
 8001bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfa:	0c9b      	lsrs	r3, r3, #18
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8001c00:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <HAL_InitTick+0xac>)
 8001c02:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <HAL_InitTick+0xb0>)
 8001c04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <HAL_InitTick+0xac>)
 8001c08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c0c:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8001c0e:	4a0e      	ldr	r2, [pc, #56]	; (8001c48 <HAL_InitTick+0xac>)
 8001c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c12:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <HAL_InitTick+0xac>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_InitTick+0xac>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8001c20:	4809      	ldr	r0, [pc, #36]	; (8001c48 <HAL_InitTick+0xac>)
 8001c22:	f003 fbdd 	bl	80053e0 <HAL_TIM_Base_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d104      	bne.n	8001c36 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8001c2c:	4806      	ldr	r0, [pc, #24]	; (8001c48 <HAL_InitTick+0xac>)
 8001c2e:	f003 fc27 	bl	8005480 <HAL_TIM_Base_Start_IT>
 8001c32:	4603      	mov	r3, r0
 8001c34:	e000      	b.n	8001c38 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3730      	adds	r7, #48	; 0x30
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40023800 	.word	0x40023800
 8001c44:	431bde83 	.word	0x431bde83
 8001c48:	20004f88 	.word	0x20004f88
 8001c4c:	40001c00 	.word	0x40001c00

08001c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <NMI_Handler+0x4>

08001c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5a:	e7fe      	b.n	8001c5a <HardFault_Handler+0x4>

08001c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <MemManage_Handler+0x4>

08001c62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c66:	e7fe      	b.n	8001c66 <BusFault_Handler+0x4>

08001c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <UsageFault_Handler+0x4>

08001c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001c82:	f003 fc6d 	bl	8005560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20004f88 	.word	0x20004f88

08001c90 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001c94:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001c96:	f003 fc63 	bl	8005560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000284 	.word	0x20000284

08001ca4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ca8:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <OTG_FS_IRQHandler+0x10>)
 8001caa:	f000 fccb 	bl	8002644 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200054e4 	.word	0x200054e4

08001cb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
	return 1;
 8001cbc:	2301      	movs	r3, #1
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <_kill>:

int _kill(int pid, int sig)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cd2:	f010 fbaf 	bl	8012434 <__errno>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2216      	movs	r2, #22
 8001cda:	601a      	str	r2, [r3, #0]
	return -1;
 8001cdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <_exit>:

void _exit (int status)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff ffe7 	bl	8001cc8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cfa:	e7fe      	b.n	8001cfa <_exit+0x12>

08001cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d00:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <SystemInit+0x28>)
 8001d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d06:	4a07      	ldr	r2, [pc, #28]	; (8001d24 <SystemInit+0x28>)
 8001d08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d10:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <SystemInit+0x28>)
 8001d12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d16:	609a      	str	r2, [r3, #8]
#endif
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d2e:	e003      	b.n	8001d38 <LoopCopyDataInit>

08001d30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d36:	3104      	adds	r1, #4

08001d38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d38:	480b      	ldr	r0, [pc, #44]	; (8001d68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d40:	d3f6      	bcc.n	8001d30 <CopyDataInit>
  ldr  r2, =_sbss
 8001d42:	4a0b      	ldr	r2, [pc, #44]	; (8001d70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d44:	e002      	b.n	8001d4c <LoopFillZerobss>

08001d46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d48:	f842 3b04 	str.w	r3, [r2], #4

08001d4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d4c:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d50:	d3f9      	bcc.n	8001d46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d52:	f7ff ffd3 	bl	8001cfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d56:	f010 fb73 	bl	8012440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d5a:	f7fe ff2b 	bl	8000bb4 <main>
  bx  lr    
 8001d5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d60:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d64:	0801297c 	.word	0x0801297c
  ldr  r0, =_sdata
 8001d68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d6c:	200001a4 	.word	0x200001a4
  ldr  r2, =_sbss
 8001d70:	200001a4 	.word	0x200001a4
  ldr  r3, = _ebss
 8001d74:	200058f0 	.word	0x200058f0

08001d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d78:	e7fe      	b.n	8001d78 <ADC_IRQHandler>
	...

08001d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d80:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <HAL_Init+0x40>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a0d      	ldr	r2, [pc, #52]	; (8001dbc <HAL_Init+0x40>)
 8001d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <HAL_Init+0x40>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <HAL_Init+0x40>)
 8001d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <HAL_Init+0x40>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a07      	ldr	r2, [pc, #28]	; (8001dbc <HAL_Init+0x40>)
 8001d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da4:	2003      	movs	r0, #3
 8001da6:	f000 f8fc 	bl	8001fa2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001daa:	2000      	movs	r0, #0
 8001dac:	f7ff fef6 	bl	8001b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db0:	f7ff fe10 	bl	80019d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40023c00 	.word	0x40023c00

08001dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_IncTick+0x20>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_IncTick+0x24>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	4a04      	ldr	r2, [pc, #16]	; (8001de4 <HAL_IncTick+0x24>)
 8001dd2:	6013      	str	r3, [r2, #0]
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20000008 	.word	0x20000008
 8001de4:	20004fd0 	.word	0x20004fd0

08001de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return uwTick;
 8001dec:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <HAL_GetTick+0x14>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20004fd0 	.word	0x20004fd0

08001e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e08:	f7ff ffee 	bl	8001de8 <HAL_GetTick>
 8001e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e18:	d005      	beq.n	8001e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <HAL_Delay+0x44>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4413      	add	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e26:	bf00      	nop
 8001e28:	f7ff ffde 	bl	8001de8 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d8f7      	bhi.n	8001e28 <HAL_Delay+0x28>
  {
  }
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000008 	.word	0x20000008

08001e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <__NVIC_SetPriorityGrouping+0x44>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e64:	4013      	ands	r3, r2
 8001e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e7a:	4a04      	ldr	r2, [pc, #16]	; (8001e8c <__NVIC_SetPriorityGrouping+0x44>)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	60d3      	str	r3, [r2, #12]
}
 8001e80:	bf00      	nop
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	f003 0307 	and.w	r3, r3, #7
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	db0b      	blt.n	8001ed6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	f003 021f 	and.w	r2, r3, #31
 8001ec4:	4907      	ldr	r1, [pc, #28]	; (8001ee4 <__NVIC_EnableIRQ+0x38>)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	095b      	lsrs	r3, r3, #5
 8001ecc:	2001      	movs	r0, #1
 8001ece:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000e100 	.word	0xe000e100

08001ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	6039      	str	r1, [r7, #0]
 8001ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	db0a      	blt.n	8001f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	490c      	ldr	r1, [pc, #48]	; (8001f34 <__NVIC_SetPriority+0x4c>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	0112      	lsls	r2, r2, #4
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f10:	e00a      	b.n	8001f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	4908      	ldr	r1, [pc, #32]	; (8001f38 <__NVIC_SetPriority+0x50>)
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	3b04      	subs	r3, #4
 8001f20:	0112      	lsls	r2, r2, #4
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	440b      	add	r3, r1
 8001f26:	761a      	strb	r2, [r3, #24]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000e100 	.word	0xe000e100
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	; 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f1c3 0307 	rsb	r3, r3, #7
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	bf28      	it	cs
 8001f5a:	2304      	movcs	r3, #4
 8001f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3304      	adds	r3, #4
 8001f62:	2b06      	cmp	r3, #6
 8001f64:	d902      	bls.n	8001f6c <NVIC_EncodePriority+0x30>
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3b03      	subs	r3, #3
 8001f6a:	e000      	b.n	8001f6e <NVIC_EncodePriority+0x32>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	f04f 32ff 	mov.w	r2, #4294967295
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	401a      	ands	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f84:	f04f 31ff 	mov.w	r1, #4294967295
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	43d9      	mvns	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	4313      	orrs	r3, r2
         );
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3724      	adds	r7, #36	; 0x24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ff4c 	bl	8001e48 <__NVIC_SetPriorityGrouping>
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fca:	f7ff ff61 	bl	8001e90 <__NVIC_GetPriorityGrouping>
 8001fce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	68b9      	ldr	r1, [r7, #8]
 8001fd4:	6978      	ldr	r0, [r7, #20]
 8001fd6:	f7ff ffb1 	bl	8001f3c <NVIC_EncodePriority>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ff80 	bl	8001ee8 <__NVIC_SetPriority>
}
 8001fe8:	bf00      	nop
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff ff54 	bl	8001eac <__NVIC_EnableIRQ>
}
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	; 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800201e:	2300      	movs	r3, #0
 8002020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
 8002026:	e165      	b.n	80022f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002028:	2201      	movs	r2, #1
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	429a      	cmp	r2, r3
 8002042:	f040 8154 	bne.w	80022ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	2b01      	cmp	r3, #1
 8002050:	d005      	beq.n	800205e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800205a:	2b02      	cmp	r3, #2
 800205c:	d130      	bne.n	80020c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	2203      	movs	r2, #3
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002094:	2201      	movs	r2, #1
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	f003 0201 	and.w	r2, r3, #1
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	d017      	beq.n	80020fc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	2203      	movs	r2, #3
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d123      	bne.n	8002150 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	08da      	lsrs	r2, r3, #3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3208      	adds	r2, #8
 8002110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	220f      	movs	r2, #15
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	08da      	lsrs	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3208      	adds	r2, #8
 800214a:	69b9      	ldr	r1, [r7, #24]
 800214c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0203 	and.w	r2, r3, #3
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 80ae 	beq.w	80022ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	4b5d      	ldr	r3, [pc, #372]	; (800230c <HAL_GPIO_Init+0x300>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	4a5c      	ldr	r2, [pc, #368]	; (800230c <HAL_GPIO_Init+0x300>)
 800219c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a0:	6453      	str	r3, [r2, #68]	; 0x44
 80021a2:	4b5a      	ldr	r3, [pc, #360]	; (800230c <HAL_GPIO_Init+0x300>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ae:	4a58      	ldr	r2, [pc, #352]	; (8002310 <HAL_GPIO_Init+0x304>)
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	089b      	lsrs	r3, r3, #2
 80021b4:	3302      	adds	r3, #2
 80021b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	220f      	movs	r2, #15
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43db      	mvns	r3, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4013      	ands	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a4f      	ldr	r2, [pc, #316]	; (8002314 <HAL_GPIO_Init+0x308>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d025      	beq.n	8002226 <HAL_GPIO_Init+0x21a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a4e      	ldr	r2, [pc, #312]	; (8002318 <HAL_GPIO_Init+0x30c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d01f      	beq.n	8002222 <HAL_GPIO_Init+0x216>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a4d      	ldr	r2, [pc, #308]	; (800231c <HAL_GPIO_Init+0x310>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d019      	beq.n	800221e <HAL_GPIO_Init+0x212>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a4c      	ldr	r2, [pc, #304]	; (8002320 <HAL_GPIO_Init+0x314>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d013      	beq.n	800221a <HAL_GPIO_Init+0x20e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a4b      	ldr	r2, [pc, #300]	; (8002324 <HAL_GPIO_Init+0x318>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d00d      	beq.n	8002216 <HAL_GPIO_Init+0x20a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a4a      	ldr	r2, [pc, #296]	; (8002328 <HAL_GPIO_Init+0x31c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d007      	beq.n	8002212 <HAL_GPIO_Init+0x206>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a49      	ldr	r2, [pc, #292]	; (800232c <HAL_GPIO_Init+0x320>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d101      	bne.n	800220e <HAL_GPIO_Init+0x202>
 800220a:	2306      	movs	r3, #6
 800220c:	e00c      	b.n	8002228 <HAL_GPIO_Init+0x21c>
 800220e:	2307      	movs	r3, #7
 8002210:	e00a      	b.n	8002228 <HAL_GPIO_Init+0x21c>
 8002212:	2305      	movs	r3, #5
 8002214:	e008      	b.n	8002228 <HAL_GPIO_Init+0x21c>
 8002216:	2304      	movs	r3, #4
 8002218:	e006      	b.n	8002228 <HAL_GPIO_Init+0x21c>
 800221a:	2303      	movs	r3, #3
 800221c:	e004      	b.n	8002228 <HAL_GPIO_Init+0x21c>
 800221e:	2302      	movs	r3, #2
 8002220:	e002      	b.n	8002228 <HAL_GPIO_Init+0x21c>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <HAL_GPIO_Init+0x21c>
 8002226:	2300      	movs	r3, #0
 8002228:	69fa      	ldr	r2, [r7, #28]
 800222a:	f002 0203 	and.w	r2, r2, #3
 800222e:	0092      	lsls	r2, r2, #2
 8002230:	4093      	lsls	r3, r2
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002238:	4935      	ldr	r1, [pc, #212]	; (8002310 <HAL_GPIO_Init+0x304>)
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	089b      	lsrs	r3, r3, #2
 800223e:	3302      	adds	r3, #2
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002246:	4b3a      	ldr	r3, [pc, #232]	; (8002330 <HAL_GPIO_Init+0x324>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800226a:	4a31      	ldr	r2, [pc, #196]	; (8002330 <HAL_GPIO_Init+0x324>)
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002270:	4b2f      	ldr	r3, [pc, #188]	; (8002330 <HAL_GPIO_Init+0x324>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002294:	4a26      	ldr	r2, [pc, #152]	; (8002330 <HAL_GPIO_Init+0x324>)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800229a:	4b25      	ldr	r3, [pc, #148]	; (8002330 <HAL_GPIO_Init+0x324>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022be:	4a1c      	ldr	r2, [pc, #112]	; (8002330 <HAL_GPIO_Init+0x324>)
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022c4:	4b1a      	ldr	r3, [pc, #104]	; (8002330 <HAL_GPIO_Init+0x324>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e8:	4a11      	ldr	r2, [pc, #68]	; (8002330 <HAL_GPIO_Init+0x324>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3301      	adds	r3, #1
 80022f2:	61fb      	str	r3, [r7, #28]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	2b0f      	cmp	r3, #15
 80022f8:	f67f ae96 	bls.w	8002028 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022fc:	bf00      	nop
 80022fe:	bf00      	nop
 8002300:	3724      	adds	r7, #36	; 0x24
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40023800 	.word	0x40023800
 8002310:	40013800 	.word	0x40013800
 8002314:	40020000 	.word	0x40020000
 8002318:	40020400 	.word	0x40020400
 800231c:	40020800 	.word	0x40020800
 8002320:	40020c00 	.word	0x40020c00
 8002324:	40021000 	.word	0x40021000
 8002328:	40021400 	.word	0x40021400
 800232c:	40021800 	.word	0x40021800
 8002330:	40013c00 	.word	0x40013c00

08002334 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	887b      	ldrh	r3, [r7, #2]
 8002346:	4013      	ands	r3, r2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d002      	beq.n	8002352 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800234c:	2301      	movs	r3, #1
 800234e:	73fb      	strb	r3, [r7, #15]
 8002350:	e001      	b.n	8002356 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002352:	2300      	movs	r3, #0
 8002354:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002356:	7bfb      	ldrb	r3, [r7, #15]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	807b      	strh	r3, [r7, #2]
 8002370:	4613      	mov	r3, r2
 8002372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002374:	787b      	ldrb	r3, [r7, #1]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800237a:	887a      	ldrh	r2, [r7, #2]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002380:	e003      	b.n	800238a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002382:	887b      	ldrh	r3, [r7, #2]
 8002384:	041a      	lsls	r2, r3, #16
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	619a      	str	r2, [r3, #24]
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002396:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002398:	b08f      	sub	sp, #60	; 0x3c
 800239a:	af0a      	add	r7, sp, #40	; 0x28
 800239c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e116      	b.n	80025d6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d106      	bne.n	80023c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f009 fbf2 	bl	800bbac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2203      	movs	r2, #3
 80023cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d102      	bne.n	80023e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f003 ff47 	bl	800627a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	603b      	str	r3, [r7, #0]
 80023f2:	687e      	ldr	r6, [r7, #4]
 80023f4:	466d      	mov	r5, sp
 80023f6:	f106 0410 	add.w	r4, r6, #16
 80023fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002402:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002406:	e885 0003 	stmia.w	r5, {r0, r1}
 800240a:	1d33      	adds	r3, r6, #4
 800240c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800240e:	6838      	ldr	r0, [r7, #0]
 8002410:	f003 fe1e 	bl	8006050 <USB_CoreInit>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d005      	beq.n	8002426 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2202      	movs	r2, #2
 800241e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e0d7      	b.n	80025d6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2100      	movs	r1, #0
 800242c:	4618      	mov	r0, r3
 800242e:	f003 ff35 	bl	800629c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002432:	2300      	movs	r3, #0
 8002434:	73fb      	strb	r3, [r7, #15]
 8002436:	e04a      	b.n	80024ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002438:	7bfa      	ldrb	r2, [r7, #15]
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	1a9b      	subs	r3, r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	333d      	adds	r3, #61	; 0x3d
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800244c:	7bfa      	ldrb	r2, [r7, #15]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	1a9b      	subs	r3, r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	333c      	adds	r3, #60	; 0x3c
 800245c:	7bfa      	ldrb	r2, [r7, #15]
 800245e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002460:	7bfa      	ldrb	r2, [r7, #15]
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	b298      	uxth	r0, r3
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	3342      	adds	r3, #66	; 0x42
 8002474:	4602      	mov	r2, r0
 8002476:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002478:	7bfa      	ldrb	r2, [r7, #15]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	333f      	adds	r3, #63	; 0x3f
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800248c:	7bfa      	ldrb	r2, [r7, #15]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	1a9b      	subs	r3, r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	3344      	adds	r3, #68	; 0x44
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024a0:	7bfa      	ldrb	r2, [r7, #15]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	1a9b      	subs	r3, r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	3348      	adds	r3, #72	; 0x48
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024b4:	7bfa      	ldrb	r2, [r7, #15]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	3350      	adds	r3, #80	; 0x50
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	3301      	adds	r3, #1
 80024cc:	73fb      	strb	r3, [r7, #15]
 80024ce:	7bfa      	ldrb	r2, [r7, #15]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d3af      	bcc.n	8002438 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024d8:	2300      	movs	r3, #0
 80024da:	73fb      	strb	r3, [r7, #15]
 80024dc:	e044      	b.n	8002568 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024de:	7bfa      	ldrb	r2, [r7, #15]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024f4:	7bfa      	ldrb	r2, [r7, #15]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002506:	7bfa      	ldrb	r2, [r7, #15]
 8002508:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800250a:	7bfa      	ldrb	r2, [r7, #15]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002520:	7bfa      	ldrb	r2, [r7, #15]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	1a9b      	subs	r3, r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800254c:	7bfa      	ldrb	r2, [r7, #15]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	3301      	adds	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
 8002568:	7bfa      	ldrb	r2, [r7, #15]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	429a      	cmp	r2, r3
 8002570:	d3b5      	bcc.n	80024de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	687e      	ldr	r6, [r7, #4]
 800257a:	466d      	mov	r5, sp
 800257c:	f106 0410 	add.w	r4, r6, #16
 8002580:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002582:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002586:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002588:	e894 0003 	ldmia.w	r4, {r0, r1}
 800258c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002590:	1d33      	adds	r3, r6, #4
 8002592:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002594:	6838      	ldr	r0, [r7, #0]
 8002596:	f003 feab 	bl	80062f0 <USB_DevInit>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e014      	b.n	80025d6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d102      	bne.n	80025ca <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f001 f879 	bl	80036bc <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f004 fee6 	bl	80073a0 <USB_DevDisconnect>

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025de <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b084      	sub	sp, #16
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d101      	bne.n	80025fa <HAL_PCD_Start+0x1c>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e020      	b.n	800263c <HAL_PCD_Start+0x5e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002606:	2b01      	cmp	r3, #1
 8002608:	d109      	bne.n	800261e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800260e:	2b01      	cmp	r3, #1
 8002610:	d005      	beq.n	800261e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002616:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f003 fe18 	bl	8006258 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f004 fe96 	bl	800735e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002644:	b590      	push	{r4, r7, lr}
 8002646:	b08d      	sub	sp, #52	; 0x34
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f004 ff54 	bl	8007508 <USB_GetMode>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	f040 83ca 	bne.w	8002dfc <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f004 feb8 	bl	80073e2 <USB_ReadInterrupts>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 83c0 	beq.w	8002dfa <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f004 feaf 	bl	80073e2 <USB_ReadInterrupts>
 8002684:	4603      	mov	r3, r0
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b02      	cmp	r3, #2
 800268c:	d107      	bne.n	800269e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695a      	ldr	r2, [r3, #20]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f002 0202 	and.w	r2, r2, #2
 800269c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f004 fe9d 	bl	80073e2 <USB_ReadInterrupts>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	2b10      	cmp	r3, #16
 80026b0:	d161      	bne.n	8002776 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	699a      	ldr	r2, [r3, #24]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0210 	bic.w	r2, r2, #16
 80026c0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	f003 020f 	and.w	r2, r3, #15
 80026ce:	4613      	mov	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	1a9b      	subs	r3, r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	4413      	add	r3, r2
 80026de:	3304      	adds	r3, #4
 80026e0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	0c5b      	lsrs	r3, r3, #17
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d124      	bne.n	8002738 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d035      	beq.n	8002766 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002704:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002708:	b29b      	uxth	r3, r3
 800270a:	461a      	mov	r2, r3
 800270c:	6a38      	ldr	r0, [r7, #32]
 800270e:	f004 fd03 	bl	8007118 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	091b      	lsrs	r3, r3, #4
 800271a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800271e:	441a      	add	r2, r3
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	699a      	ldr	r2, [r3, #24]
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	091b      	lsrs	r3, r3, #4
 800272c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002730:	441a      	add	r2, r3
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	619a      	str	r2, [r3, #24]
 8002736:	e016      	b.n	8002766 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	0c5b      	lsrs	r3, r3, #17
 800273c:	f003 030f 	and.w	r3, r3, #15
 8002740:	2b06      	cmp	r3, #6
 8002742:	d110      	bne.n	8002766 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800274a:	2208      	movs	r2, #8
 800274c:	4619      	mov	r1, r3
 800274e:	6a38      	ldr	r0, [r7, #32]
 8002750:	f004 fce2 	bl	8007118 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	699a      	ldr	r2, [r3, #24]
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	091b      	lsrs	r3, r3, #4
 800275c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002760:	441a      	add	r2, r3
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	699a      	ldr	r2, [r3, #24]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f042 0210 	orr.w	r2, r2, #16
 8002774:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f004 fe31 	bl	80073e2 <USB_ReadInterrupts>
 8002780:	4603      	mov	r3, r0
 8002782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002786:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800278a:	d16e      	bne.n	800286a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f004 fe37 	bl	8007408 <USB_ReadDevAllOutEpInterrupt>
 800279a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800279c:	e062      	b.n	8002864 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d057      	beq.n	8002858 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	4611      	mov	r1, r2
 80027b2:	4618      	mov	r0, r3
 80027b4:	f004 fe5c 	bl	8007470 <USB_ReadDevOutEPInterrupt>
 80027b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00c      	beq.n	80027de <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027d0:	461a      	mov	r2, r3
 80027d2:	2301      	movs	r3, #1
 80027d4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80027d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 fdc5 	bl	8003368 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00c      	beq.n	8002802 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	015a      	lsls	r2, r3, #5
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	4413      	add	r3, r2
 80027f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027f4:	461a      	mov	r2, r3
 80027f6:	2308      	movs	r3, #8
 80027f8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80027fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 febf 	bl	8003580 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	015a      	lsls	r2, r3, #5
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	4413      	add	r3, r2
 8002814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002818:	461a      	mov	r2, r3
 800281a:	2310      	movs	r3, #16
 800281c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b00      	cmp	r3, #0
 8002826:	d008      	beq.n	800283a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	4413      	add	r3, r2
 8002830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002834:	461a      	mov	r2, r3
 8002836:	2320      	movs	r3, #32
 8002838:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d009      	beq.n	8002858 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	4413      	add	r3, r2
 800284c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002850:	461a      	mov	r2, r3
 8002852:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002856:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	3301      	adds	r3, #1
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800285e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002860:	085b      	lsrs	r3, r3, #1
 8002862:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002866:	2b00      	cmp	r3, #0
 8002868:	d199      	bne.n	800279e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f004 fdb7 	bl	80073e2 <USB_ReadInterrupts>
 8002874:	4603      	mov	r3, r0
 8002876:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800287a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800287e:	f040 80c0 	bne.w	8002a02 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f004 fdd8 	bl	800743c <USB_ReadDevAllInEpInterrupt>
 800288c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002892:	e0b2      	b.n	80029fa <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 80a7 	beq.w	80029ee <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	4611      	mov	r1, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f004 fdfe 	bl	80074ac <USB_ReadDevInEPInterrupt>
 80028b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d057      	beq.n	800296c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	2201      	movs	r2, #1
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69f9      	ldr	r1, [r7, #28]
 80028d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028dc:	4013      	ands	r3, r2
 80028de:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028ec:	461a      	mov	r2, r3
 80028ee:	2301      	movs	r3, #1
 80028f0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d132      	bne.n	8002960 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028fe:	4613      	mov	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	1a9b      	subs	r3, r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	3348      	adds	r3, #72	; 0x48
 800290a:	6819      	ldr	r1, [r3, #0]
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002910:	4613      	mov	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	1a9b      	subs	r3, r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4403      	add	r3, r0
 800291a:	3344      	adds	r3, #68	; 0x44
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4419      	add	r1, r3
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002924:	4613      	mov	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	1a9b      	subs	r3, r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4403      	add	r3, r0
 800292e:	3348      	adds	r3, #72	; 0x48
 8002930:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	2b00      	cmp	r3, #0
 8002936:	d113      	bne.n	8002960 <HAL_PCD_IRQHandler+0x31c>
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800293c:	4613      	mov	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	1a9b      	subs	r3, r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	3350      	adds	r3, #80	; 0x50
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d108      	bne.n	8002960 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6818      	ldr	r0, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002958:	461a      	mov	r2, r3
 800295a:	2101      	movs	r1, #1
 800295c:	f004 fe06 	bl	800756c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	b2db      	uxtb	r3, r3
 8002964:	4619      	mov	r1, r3
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f009 f9a1 	bl	800bcae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d008      	beq.n	8002988 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	015a      	lsls	r2, r3, #5
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	4413      	add	r3, r2
 800297e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002982:	461a      	mov	r2, r3
 8002984:	2308      	movs	r3, #8
 8002986:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	f003 0310 	and.w	r3, r3, #16
 800298e:	2b00      	cmp	r3, #0
 8002990:	d008      	beq.n	80029a4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	4413      	add	r3, r2
 800299a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800299e:	461a      	mov	r2, r3
 80029a0:	2310      	movs	r3, #16
 80029a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d008      	beq.n	80029c0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029ba:	461a      	mov	r2, r3
 80029bc:	2340      	movs	r3, #64	; 0x40
 80029be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d008      	beq.n	80029dc <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	015a      	lsls	r2, r3, #5
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029d6:	461a      	mov	r2, r3
 80029d8:	2302      	movs	r3, #2
 80029da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80029e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fc30 	bl	800324e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	3301      	adds	r3, #1
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80029f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f6:	085b      	lsrs	r3, r3, #1
 80029f8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80029fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f47f af49 	bne.w	8002894 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f004 fceb 	bl	80073e2 <USB_ReadInterrupts>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a16:	d122      	bne.n	8002a5e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	69fa      	ldr	r2, [r7, #28]
 8002a22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a26:	f023 0301 	bic.w	r3, r3, #1
 8002a2a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d108      	bne.n	8002a48 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a3e:	2100      	movs	r1, #0
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f009 fb71 	bl	800c128 <HAL_PCDEx_LPM_Callback>
 8002a46:	e002      	b.n	8002a4e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f009 f9a7 	bl	800bd9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695a      	ldr	r2, [r3, #20]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002a5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f004 fcbd 	bl	80073e2 <USB_ReadInterrupts>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a72:	d112      	bne.n	8002a9a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d102      	bne.n	8002a8a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f009 f963 	bl	800bd50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695a      	ldr	r2, [r3, #20]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002a98:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f004 fc9f 	bl	80073e2 <USB_ReadInterrupts>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aae:	d121      	bne.n	8002af4 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695a      	ldr	r2, [r3, #20]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002abe:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d111      	bne.n	8002aee <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad8:	089b      	lsrs	r3, r3, #2
 8002ada:	f003 020f 	and.w	r2, r3, #15
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f009 fb1e 	bl	800c128 <HAL_PCDEx_LPM_Callback>
 8002aec:	e002      	b.n	8002af4 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f009 f92e 	bl	800bd50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f004 fc72 	bl	80073e2 <USB_ReadInterrupts>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b08:	f040 80c7 	bne.w	8002c9a <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	69fa      	ldr	r2, [r7, #28]
 8002b16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b1a:	f023 0301 	bic.w	r3, r3, #1
 8002b1e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2110      	movs	r1, #16
 8002b26:	4618      	mov	r0, r3
 8002b28:	f003 fd40 	bl	80065ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b30:	e056      	b.n	8002be0 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b34:	015a      	lsls	r2, r3, #5
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	4413      	add	r3, r2
 8002b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b3e:	461a      	mov	r2, r3
 8002b40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b44:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b56:	0151      	lsls	r1, r2, #5
 8002b58:	69fa      	ldr	r2, [r7, #28]
 8002b5a:	440a      	add	r2, r1
 8002b5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b64:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b68:	015a      	lsls	r2, r3, #5
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b76:	0151      	lsls	r1, r2, #5
 8002b78:	69fa      	ldr	r2, [r7, #28]
 8002b7a:	440a      	add	r2, r1
 8002b7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002b84:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b92:	461a      	mov	r2, r3
 8002b94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b98:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9c:	015a      	lsls	r2, r3, #5
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002baa:	0151      	lsls	r1, r2, #5
 8002bac:	69fa      	ldr	r2, [r7, #28]
 8002bae:	440a      	add	r2, r1
 8002bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002bb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002bb8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bca:	0151      	lsls	r1, r2, #5
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	440a      	add	r2, r1
 8002bd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002bd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002bd8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	3301      	adds	r3, #1
 8002bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d3a3      	bcc.n	8002b32 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	69fa      	ldr	r2, [r7, #28]
 8002bf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bf8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002bfc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d016      	beq.n	8002c34 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c10:	69fa      	ldr	r2, [r7, #28]
 8002c12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c16:	f043 030b 	orr.w	r3, r3, #11
 8002c1a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	69fa      	ldr	r2, [r7, #28]
 8002c28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c2c:	f043 030b 	orr.w	r3, r3, #11
 8002c30:	6453      	str	r3, [r2, #68]	; 0x44
 8002c32:	e015      	b.n	8002c60 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	69fa      	ldr	r2, [r7, #28]
 8002c3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c46:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002c4a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	69fa      	ldr	r2, [r7, #28]
 8002c56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c5a:	f043 030b 	orr.w	r3, r3, #11
 8002c5e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c6e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002c72:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6818      	ldr	r0, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c84:	461a      	mov	r2, r3
 8002c86:	f004 fc71 	bl	800756c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695a      	ldr	r2, [r3, #20]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002c98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f004 fb9f 	bl	80073e2 <USB_ReadInterrupts>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cae:	d124      	bne.n	8002cfa <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f004 fc35 	bl	8007524 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f003 fcd5 	bl	800666e <USB_GetDevSpeed>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681c      	ldr	r4, [r3, #0]
 8002cd0:	f000 fdfe 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
 8002cd4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4620      	mov	r0, r4
 8002ce0:	f003 fa18 	bl	8006114 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f009 f80a 	bl	800bcfe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695a      	ldr	r2, [r3, #20]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002cf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f004 fb6f 	bl	80073e2 <USB_ReadInterrupts>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d10a      	bne.n	8002d24 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f008 ffe7 	bl	800bce2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695a      	ldr	r2, [r3, #20]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f002 0208 	and.w	r2, r2, #8
 8002d22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f004 fb5a 	bl	80073e2 <USB_ReadInterrupts>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d38:	d10f      	bne.n	8002d5a <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	4619      	mov	r1, r3
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f009 f849 	bl	800bddc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695a      	ldr	r2, [r3, #20]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002d58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f004 fb3f 	bl	80073e2 <USB_ReadInterrupts>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d6e:	d10f      	bne.n	8002d90 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	4619      	mov	r1, r3
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f009 f81c 	bl	800bdb8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695a      	ldr	r2, [r3, #20]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f004 fb24 	bl	80073e2 <USB_ReadInterrupts>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da4:	d10a      	bne.n	8002dbc <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f009 f82a 	bl	800be00 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695a      	ldr	r2, [r3, #20]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002dba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f004 fb0e 	bl	80073e2 <USB_ReadInterrupts>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d115      	bne.n	8002dfc <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f009 f81a 	bl	800be1c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6859      	ldr	r1, [r3, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	605a      	str	r2, [r3, #4]
 8002df8:	e000      	b.n	8002dfc <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002dfa:	bf00      	nop
    }
  }
}
 8002dfc:	3734      	adds	r7, #52	; 0x34
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd90      	pop	{r4, r7, pc}

08002e02 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <HAL_PCD_SetAddress+0x1a>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e013      	b.n	8002e44 <HAL_PCD_SetAddress+0x42>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	78fa      	ldrb	r2, [r7, #3]
 8002e28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	78fa      	ldrb	r2, [r7, #3]
 8002e32:	4611      	mov	r1, r2
 8002e34:	4618      	mov	r0, r3
 8002e36:	f004 fa6c 	bl	8007312 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	4608      	mov	r0, r1
 8002e56:	4611      	mov	r1, r2
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	70fb      	strb	r3, [r7, #3]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	803b      	strh	r3, [r7, #0]
 8002e62:	4613      	mov	r3, r2
 8002e64:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	da0f      	bge.n	8002e92 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e72:	78fb      	ldrb	r3, [r7, #3]
 8002e74:	f003 020f 	and.w	r2, r3, #15
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	1a9b      	subs	r3, r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	3338      	adds	r3, #56	; 0x38
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	4413      	add	r3, r2
 8002e86:	3304      	adds	r3, #4
 8002e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	705a      	strb	r2, [r3, #1]
 8002e90:	e00f      	b.n	8002eb2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	f003 020f 	and.w	r2, r3, #15
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
 8002eb4:	f003 030f 	and.w	r3, r3, #15
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ebe:	883a      	ldrh	r2, [r7, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	78ba      	ldrb	r2, [r7, #2]
 8002ec8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	785b      	ldrb	r3, [r3, #1]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d004      	beq.n	8002edc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002edc:	78bb      	ldrb	r3, [r7, #2]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d102      	bne.n	8002ee8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <HAL_PCD_EP_Open+0xaa>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e00e      	b.n	8002f14 <HAL_PCD_EP_Open+0xc8>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68f9      	ldr	r1, [r7, #12]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f003 fbd7 	bl	80066b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002f12:	7afb      	ldrb	r3, [r7, #11]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	da0f      	bge.n	8002f50 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f30:	78fb      	ldrb	r3, [r7, #3]
 8002f32:	f003 020f 	and.w	r2, r3, #15
 8002f36:	4613      	mov	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	1a9b      	subs	r3, r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	3338      	adds	r3, #56	; 0x38
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	4413      	add	r3, r2
 8002f44:	3304      	adds	r3, #4
 8002f46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	705a      	strb	r2, [r3, #1]
 8002f4e:	e00f      	b.n	8002f70 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	f003 020f 	and.w	r2, r3, #15
 8002f56:	4613      	mov	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	1a9b      	subs	r3, r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	4413      	add	r3, r2
 8002f66:	3304      	adds	r3, #4
 8002f68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f70:	78fb      	ldrb	r3, [r7, #3]
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d101      	bne.n	8002f8a <HAL_PCD_EP_Close+0x6e>
 8002f86:	2302      	movs	r3, #2
 8002f88:	e00e      	b.n	8002fa8 <HAL_PCD_EP_Close+0x8c>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68f9      	ldr	r1, [r7, #12]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f003 fc15 	bl	80067c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	607a      	str	r2, [r7, #4]
 8002fba:	603b      	str	r3, [r7, #0]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fc0:	7afb      	ldrb	r3, [r7, #11]
 8002fc2:	f003 020f 	and.w	r2, r3, #15
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ff2:	7afb      	ldrb	r3, [r7, #11]
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d102      	bne.n	800300c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800300c:	7afb      	ldrb	r3, [r7, #11]
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	2b00      	cmp	r3, #0
 8003014:	d109      	bne.n	800302a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6818      	ldr	r0, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	461a      	mov	r2, r3
 8003022:	6979      	ldr	r1, [r7, #20]
 8003024:	f003 fef0 	bl	8006e08 <USB_EP0StartXfer>
 8003028:	e008      	b.n	800303c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	6979      	ldr	r1, [r7, #20]
 8003038:	f003 fca2 	bl	8006980 <USB_EPStartXfer>
  }

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b086      	sub	sp, #24
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	607a      	str	r2, [r7, #4]
 8003050:	603b      	str	r3, [r7, #0]
 8003052:	460b      	mov	r3, r1
 8003054:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003056:	7afb      	ldrb	r3, [r7, #11]
 8003058:	f003 020f 	and.w	r2, r3, #15
 800305c:	4613      	mov	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	3338      	adds	r3, #56	; 0x38
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	4413      	add	r3, r2
 800306a:	3304      	adds	r3, #4
 800306c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	2200      	movs	r2, #0
 800307e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	2201      	movs	r2, #1
 8003084:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003086:	7afb      	ldrb	r3, [r7, #11]
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	b2da      	uxtb	r2, r3
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d102      	bne.n	80030a0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030a0:	7afb      	ldrb	r3, [r7, #11]
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d109      	bne.n	80030be <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	461a      	mov	r2, r3
 80030b6:	6979      	ldr	r1, [r7, #20]
 80030b8:	f003 fea6 	bl	8006e08 <USB_EP0StartXfer>
 80030bc:	e008      	b.n	80030d0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	461a      	mov	r2, r3
 80030ca:	6979      	ldr	r1, [r7, #20]
 80030cc:	f003 fc58 	bl	8006980 <USB_EPStartXfer>
  }

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b084      	sub	sp, #16
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	460b      	mov	r3, r1
 80030e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	f003 020f 	and.w	r2, r3, #15
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d901      	bls.n	80030f8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e050      	b.n	800319a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	da0f      	bge.n	8003120 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	f003 020f 	and.w	r2, r3, #15
 8003106:	4613      	mov	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	1a9b      	subs	r3, r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	3338      	adds	r3, #56	; 0x38
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	4413      	add	r3, r2
 8003114:	3304      	adds	r3, #4
 8003116:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2201      	movs	r2, #1
 800311c:	705a      	strb	r2, [r3, #1]
 800311e:	e00d      	b.n	800313c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	4613      	mov	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	1a9b      	subs	r3, r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	4413      	add	r3, r2
 8003132:	3304      	adds	r3, #4
 8003134:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2201      	movs	r2, #1
 8003140:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003142:	78fb      	ldrb	r3, [r7, #3]
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	b2da      	uxtb	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_PCD_EP_SetStall+0x82>
 8003158:	2302      	movs	r3, #2
 800315a:	e01e      	b.n	800319a <HAL_PCD_EP_SetStall+0xc0>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68f9      	ldr	r1, [r7, #12]
 800316a:	4618      	mov	r0, r3
 800316c:	f003 fffd 	bl	800716a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10a      	bne.n	8003190 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	b2d9      	uxtb	r1, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800318a:	461a      	mov	r2, r3
 800318c:	f004 f9ee 	bl	800756c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	460b      	mov	r3, r1
 80031ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031ae:	78fb      	ldrb	r3, [r7, #3]
 80031b0:	f003 020f 	and.w	r2, r3, #15
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d901      	bls.n	80031c0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e042      	b.n	8003246 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	da0f      	bge.n	80031e8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031c8:	78fb      	ldrb	r3, [r7, #3]
 80031ca:	f003 020f 	and.w	r2, r3, #15
 80031ce:	4613      	mov	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	1a9b      	subs	r3, r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	3338      	adds	r3, #56	; 0x38
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	4413      	add	r3, r2
 80031dc:	3304      	adds	r3, #4
 80031de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	705a      	strb	r2, [r3, #1]
 80031e6:	e00f      	b.n	8003208 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	f003 020f 	and.w	r2, r3, #15
 80031ee:	4613      	mov	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	4413      	add	r3, r2
 80031fe:	3304      	adds	r3, #4
 8003200:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800320e:	78fb      	ldrb	r3, [r7, #3]
 8003210:	f003 030f 	and.w	r3, r3, #15
 8003214:	b2da      	uxtb	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_PCD_EP_ClrStall+0x86>
 8003224:	2302      	movs	r3, #2
 8003226:	e00e      	b.n	8003246 <HAL_PCD_EP_ClrStall+0xa4>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68f9      	ldr	r1, [r7, #12]
 8003236:	4618      	mov	r0, r3
 8003238:	f004 f805 	bl	8007246 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b08a      	sub	sp, #40	; 0x28
 8003252:	af02      	add	r7, sp, #8
 8003254:	6078      	str	r0, [r7, #4]
 8003256:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	1a9b      	subs	r3, r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	3338      	adds	r3, #56	; 0x38
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	4413      	add	r3, r2
 8003272:	3304      	adds	r3, #4
 8003274:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	699a      	ldr	r2, [r3, #24]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	429a      	cmp	r2, r3
 8003280:	d901      	bls.n	8003286 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e06c      	b.n	8003360 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	695a      	ldr	r2, [r3, #20]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	69fa      	ldr	r2, [r7, #28]
 8003298:	429a      	cmp	r2, r3
 800329a:	d902      	bls.n	80032a2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	3303      	adds	r3, #3
 80032a6:	089b      	lsrs	r3, r3, #2
 80032a8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032aa:	e02b      	b.n	8003304 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	69fa      	ldr	r2, [r7, #28]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d902      	bls.n	80032c8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	3303      	adds	r3, #3
 80032cc:	089b      	lsrs	r3, r3, #2
 80032ce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	68d9      	ldr	r1, [r3, #12]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	4603      	mov	r3, r0
 80032e6:	6978      	ldr	r0, [r7, #20]
 80032e8:	f003 fee1 	bl	80070ae <USB_WritePacket>

    ep->xfer_buff  += len;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	441a      	add	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	699a      	ldr	r2, [r3, #24]
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	441a      	add	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	4413      	add	r3, r2
 800330c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	b29b      	uxth	r3, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	429a      	cmp	r2, r3
 8003318:	d809      	bhi.n	800332e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003322:	429a      	cmp	r2, r3
 8003324:	d203      	bcs.n	800332e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1be      	bne.n	80032ac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	429a      	cmp	r2, r3
 8003338:	d811      	bhi.n	800335e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	f003 030f 	and.w	r3, r3, #15
 8003340:	2201      	movs	r2, #1
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800334e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	43db      	mvns	r3, r3
 8003354:	6939      	ldr	r1, [r7, #16]
 8003356:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800335a:	4013      	ands	r3, r2
 800335c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3720      	adds	r7, #32
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	333c      	adds	r3, #60	; 0x3c
 8003380:	3304      	adds	r3, #4
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	015a      	lsls	r2, r3, #5
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	4413      	add	r3, r2
 800338e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	2b01      	cmp	r3, #1
 800339c:	f040 80a0 	bne.w	80034e0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d015      	beq.n	80033d6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4a72      	ldr	r2, [pc, #456]	; (8003578 <PCD_EP_OutXfrComplete_int+0x210>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	f240 80dd 	bls.w	800356e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 80d7 	beq.w	800356e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033cc:	461a      	mov	r2, r3
 80033ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033d2:	6093      	str	r3, [r2, #8]
 80033d4:	e0cb      	b.n	800356e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d009      	beq.n	80033f4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ec:	461a      	mov	r2, r3
 80033ee:	2320      	movs	r3, #32
 80033f0:	6093      	str	r3, [r2, #8]
 80033f2:	e0bc      	b.n	800356e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f040 80b7 	bne.w	800356e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4a5d      	ldr	r2, [pc, #372]	; (8003578 <PCD_EP_OutXfrComplete_int+0x210>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d90f      	bls.n	8003428 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	015a      	lsls	r2, r3, #5
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	4413      	add	r3, r2
 800341a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800341e:	461a      	mov	r2, r3
 8003420:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003424:	6093      	str	r3, [r2, #8]
 8003426:	e0a2      	b.n	800356e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	4613      	mov	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800343a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	0159      	lsls	r1, r3, #5
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	440b      	add	r3, r1
 8003444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800344e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	4613      	mov	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4403      	add	r3, r0
 800345e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003462:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003476:	6819      	ldr	r1, [r3, #0]
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	4613      	mov	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4403      	add	r3, r0
 8003486:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4419      	add	r1, r3
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	4613      	mov	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	1a9b      	subs	r3, r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4403      	add	r3, r0
 800349c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034a0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d114      	bne.n	80034d2 <PCD_EP_OutXfrComplete_int+0x16a>
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	4613      	mov	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d108      	bne.n	80034d2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034ca:	461a      	mov	r2, r3
 80034cc:	2101      	movs	r1, #1
 80034ce:	f004 f84d 	bl	800756c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	4619      	mov	r1, r3
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f008 fbcd 	bl	800bc78 <HAL_PCD_DataOutStageCallback>
 80034de:	e046      	b.n	800356e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4a26      	ldr	r2, [pc, #152]	; (800357c <PCD_EP_OutXfrComplete_int+0x214>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d124      	bne.n	8003532 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	015a      	lsls	r2, r3, #5
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034fe:	461a      	mov	r2, r3
 8003500:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003504:	6093      	str	r3, [r2, #8]
 8003506:	e032      	b.n	800356e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f003 0320 	and.w	r3, r3, #32
 800350e:	2b00      	cmp	r3, #0
 8003510:	d008      	beq.n	8003524 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	4413      	add	r3, r2
 800351a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800351e:	461a      	mov	r2, r3
 8003520:	2320      	movs	r3, #32
 8003522:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	b2db      	uxtb	r3, r3
 8003528:	4619      	mov	r1, r3
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f008 fba4 	bl	800bc78 <HAL_PCD_DataOutStageCallback>
 8003530:	e01d      	b.n	800356e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d114      	bne.n	8003562 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	4613      	mov	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d108      	bne.n	8003562 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6818      	ldr	r0, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800355a:	461a      	mov	r2, r3
 800355c:	2100      	movs	r1, #0
 800355e:	f004 f805 	bl	800756c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	4619      	mov	r1, r3
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f008 fb85 	bl	800bc78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	4f54300a 	.word	0x4f54300a
 800357c:	4f54310a 	.word	0x4f54310a

08003580 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	333c      	adds	r3, #60	; 0x3c
 8003598:	3304      	adds	r3, #4
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	015a      	lsls	r2, r3, #5
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	4413      	add	r3, r2
 80035a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4a15      	ldr	r2, [pc, #84]	; (8003608 <PCD_EP_OutSetupPacket_int+0x88>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d90e      	bls.n	80035d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d009      	beq.n	80035d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035cc:	461a      	mov	r2, r3
 80035ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f008 fb3d 	bl	800bc54 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4a0a      	ldr	r2, [pc, #40]	; (8003608 <PCD_EP_OutSetupPacket_int+0x88>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d90c      	bls.n	80035fc <PCD_EP_OutSetupPacket_int+0x7c>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d108      	bne.n	80035fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6818      	ldr	r0, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035f4:	461a      	mov	r2, r3
 80035f6:	2101      	movs	r1, #1
 80035f8:	f003 ffb8 	bl	800756c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	4f54300a 	.word	0x4f54300a

0800360c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	70fb      	strb	r3, [r7, #3]
 8003618:	4613      	mov	r3, r2
 800361a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d107      	bne.n	800363a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800362a:	883b      	ldrh	r3, [r7, #0]
 800362c:	0419      	lsls	r1, r3, #16
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	430a      	orrs	r2, r1
 8003636:	629a      	str	r2, [r3, #40]	; 0x28
 8003638:	e028      	b.n	800368c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003640:	0c1b      	lsrs	r3, r3, #16
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	4413      	add	r3, r2
 8003646:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003648:	2300      	movs	r3, #0
 800364a:	73fb      	strb	r3, [r7, #15]
 800364c:	e00d      	b.n	800366a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	7bfb      	ldrb	r3, [r7, #15]
 8003654:	3340      	adds	r3, #64	; 0x40
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	0c1b      	lsrs	r3, r3, #16
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	4413      	add	r3, r2
 8003662:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	3301      	adds	r3, #1
 8003668:	73fb      	strb	r3, [r7, #15]
 800366a:	7bfa      	ldrb	r2, [r7, #15]
 800366c:	78fb      	ldrb	r3, [r7, #3]
 800366e:	3b01      	subs	r3, #1
 8003670:	429a      	cmp	r2, r3
 8003672:	d3ec      	bcc.n	800364e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003674:	883b      	ldrh	r3, [r7, #0]
 8003676:	0418      	lsls	r0, r3, #16
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6819      	ldr	r1, [r3, #0]
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	3b01      	subs	r3, #1
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	4302      	orrs	r2, r0
 8003684:	3340      	adds	r3, #64	; 0x40
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	460b      	mov	r3, r1
 80036a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	887a      	ldrh	r2, [r7, #2]
 80036ac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ee:	f043 0303 	orr.w	r3, r3, #3
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e0cc      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003718:	4b68      	ldr	r3, [pc, #416]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 030f 	and.w	r3, r3, #15
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d90c      	bls.n	8003740 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003726:	4b65      	ldr	r3, [pc, #404]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800372e:	4b63      	ldr	r3, [pc, #396]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d001      	beq.n	8003740 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0b8      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d020      	beq.n	800378e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003758:	4b59      	ldr	r3, [pc, #356]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	4a58      	ldr	r2, [pc, #352]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003762:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003770:	4b53      	ldr	r3, [pc, #332]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4a52      	ldr	r2, [pc, #328]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800377a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800377c:	4b50      	ldr	r3, [pc, #320]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	494d      	ldr	r1, [pc, #308]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	4313      	orrs	r3, r2
 800378c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d044      	beq.n	8003824 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d107      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a2:	4b47      	ldr	r3, [pc, #284]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d119      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e07f      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d003      	beq.n	80037c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d107      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c2:	4b3f      	ldr	r3, [pc, #252]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d109      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e06f      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d2:	4b3b      	ldr	r3, [pc, #236]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e067      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037e2:	4b37      	ldr	r3, [pc, #220]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f023 0203 	bic.w	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	4934      	ldr	r1, [pc, #208]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037f4:	f7fe faf8 	bl	8001de8 <HAL_GetTick>
 80037f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fa:	e00a      	b.n	8003812 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037fc:	f7fe faf4 	bl	8001de8 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	f241 3288 	movw	r2, #5000	; 0x1388
 800380a:	4293      	cmp	r3, r2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e04f      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003812:	4b2b      	ldr	r3, [pc, #172]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 020c 	and.w	r2, r3, #12
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	429a      	cmp	r2, r3
 8003822:	d1eb      	bne.n	80037fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003824:	4b25      	ldr	r3, [pc, #148]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 030f 	and.w	r3, r3, #15
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d20c      	bcs.n	800384c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003832:	4b22      	ldr	r3, [pc, #136]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800383a:	4b20      	ldr	r3, [pc, #128]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d001      	beq.n	800384c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e032      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003858:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	4916      	ldr	r1, [pc, #88]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	4313      	orrs	r3, r2
 8003868:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d009      	beq.n	800388a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003876:	4b12      	ldr	r3, [pc, #72]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	490e      	ldr	r1, [pc, #56]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	4313      	orrs	r3, r2
 8003888:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800388a:	f000 fbb1 	bl	8003ff0 <HAL_RCC_GetSysClockFreq>
 800388e:	4602      	mov	r2, r0
 8003890:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	490a      	ldr	r1, [pc, #40]	; (80038c4 <HAL_RCC_ClockConfig+0x1c0>)
 800389c:	5ccb      	ldrb	r3, [r1, r3]
 800389e:	fa22 f303 	lsr.w	r3, r2, r3
 80038a2:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <HAL_RCC_ClockConfig+0x1c4>)
 80038a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038a6:	4b09      	ldr	r3, [pc, #36]	; (80038cc <HAL_RCC_ClockConfig+0x1c8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe f976 	bl	8001b9c <HAL_InitTick>

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40023c00 	.word	0x40023c00
 80038c0:	40023800 	.word	0x40023800
 80038c4:	080127d0 	.word	0x080127d0
 80038c8:	20000000 	.word	0x20000000
 80038cc:	20000004 	.word	0x20000004

080038d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038d4:	4b03      	ldr	r3, [pc, #12]	; (80038e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038d6:	681b      	ldr	r3, [r3, #0]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	20000000 	.word	0x20000000

080038e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038ec:	f7ff fff0 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
 80038f0:	4602      	mov	r2, r0
 80038f2:	4b05      	ldr	r3, [pc, #20]	; (8003908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	0a9b      	lsrs	r3, r3, #10
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	4903      	ldr	r1, [pc, #12]	; (800390c <HAL_RCC_GetPCLK1Freq+0x24>)
 80038fe:	5ccb      	ldrb	r3, [r1, r3]
 8003900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003904:	4618      	mov	r0, r3
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40023800 	.word	0x40023800
 800390c:	080127e0 	.word	0x080127e0

08003910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003914:	f7ff ffdc 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
 8003918:	4602      	mov	r2, r0
 800391a:	4b05      	ldr	r3, [pc, #20]	; (8003930 <HAL_RCC_GetPCLK2Freq+0x20>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	0b5b      	lsrs	r3, r3, #13
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	4903      	ldr	r1, [pc, #12]	; (8003934 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003926:	5ccb      	ldrb	r3, [r1, r3]
 8003928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800392c:	4618      	mov	r0, r3
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40023800 	.word	0x40023800
 8003934:	080127e0 	.word	0x080127e0

08003938 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	220f      	movs	r2, #15
 8003946:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003948:	4b12      	ldr	r3, [pc, #72]	; (8003994 <HAL_RCC_GetClockConfig+0x5c>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 0203 	and.w	r2, r3, #3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003954:	4b0f      	ldr	r3, [pc, #60]	; (8003994 <HAL_RCC_GetClockConfig+0x5c>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003960:	4b0c      	ldr	r3, [pc, #48]	; (8003994 <HAL_RCC_GetClockConfig+0x5c>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800396c:	4b09      	ldr	r3, [pc, #36]	; (8003994 <HAL_RCC_GetClockConfig+0x5c>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	08db      	lsrs	r3, r3, #3
 8003972:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800397a:	4b07      	ldr	r3, [pc, #28]	; (8003998 <HAL_RCC_GetClockConfig+0x60>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 020f 	and.w	r2, r3, #15
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	601a      	str	r2, [r3, #0]
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40023800 	.word	0x40023800
 8003998:	40023c00 	.word	0x40023c00

0800399c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08c      	sub	sp, #48	; 0x30
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d010      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80039d4:	4b6f      	ldr	r3, [pc, #444]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039da:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e2:	496c      	ldr	r1, [pc, #432]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80039f2:	2301      	movs	r3, #1
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d010      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003a02:	4b64      	ldr	r3, [pc, #400]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a08:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a10:	4960      	ldr	r1, [pc, #384]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003a20:	2301      	movs	r3, #1
 8003a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d017      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a30:	4b58      	ldr	r3, [pc, #352]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	4955      	ldr	r1, [pc, #340]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a4e:	d101      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003a50:	2301      	movs	r3, #1
 8003a52:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d017      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a6c:	4b49      	ldr	r3, [pc, #292]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7a:	4946      	ldr	r1, [pc, #280]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a8a:	d101      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 808a 	beq.w	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	4b39      	ldr	r3, [pc, #228]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	4a38      	ldr	r2, [pc, #224]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8003aba:	4b36      	ldr	r3, [pc, #216]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	60bb      	str	r3, [r7, #8]
 8003ac4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003ac6:	4b34      	ldr	r3, [pc, #208]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a33      	ldr	r2, [pc, #204]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ad2:	f7fe f989 	bl	8001de8 <HAL_GetTick>
 8003ad6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ad8:	e008      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003ada:	f7fe f985 	bl	8001de8 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e278      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003aec:	4b2a      	ldr	r3, [pc, #168]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0f0      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003af8:	4b26      	ldr	r3, [pc, #152]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b00:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d02f      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b10:	6a3a      	ldr	r2, [r7, #32]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d028      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b16:	4b1f      	ldr	r3, [pc, #124]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b1e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b20:	4b1e      	ldr	r3, [pc, #120]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003b22:	2201      	movs	r2, #1
 8003b24:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b26:	4b1d      	ldr	r3, [pc, #116]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003b2c:	4a19      	ldr	r2, [pc, #100]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b32:	4b18      	ldr	r3, [pc, #96]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d114      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003b3e:	f7fe f953 	bl	8001de8 <HAL_GetTick>
 8003b42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b44:	e00a      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b46:	f7fe f94f 	bl	8001de8 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e240      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b5c:	4b0d      	ldr	r3, [pc, #52]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0ee      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b74:	d114      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003b76:	4b07      	ldr	r3, [pc, #28]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b8a:	4902      	ldr	r1, [pc, #8]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	608b      	str	r3, [r1, #8]
 8003b90:	e00c      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003b92:	bf00      	nop
 8003b94:	40023800 	.word	0x40023800
 8003b98:	40007000 	.word	0x40007000
 8003b9c:	42470e40 	.word	0x42470e40
 8003ba0:	4b4a      	ldr	r3, [pc, #296]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	4a49      	ldr	r2, [pc, #292]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ba6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003baa:	6093      	str	r3, [r2, #8]
 8003bac:	4b47      	ldr	r3, [pc, #284]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb8:	4944      	ldr	r1, [pc, #272]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0310 	and.w	r3, r3, #16
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d004      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003bd0:	4b3f      	ldr	r3, [pc, #252]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003bd2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003be0:	4b3a      	ldr	r3, [pc, #232]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003be6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bee:	4937      	ldr	r1, [pc, #220]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c02:	4b32      	ldr	r3, [pc, #200]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c08:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c10:	492e      	ldr	r1, [pc, #184]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d011      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c24:	4b29      	ldr	r3, [pc, #164]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c2a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c32:	4926      	ldr	r1, [pc, #152]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c42:	d101      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003c44:	2301      	movs	r3, #1
 8003c46:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003c54:	4b1d      	ldr	r3, [pc, #116]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	491a      	ldr	r1, [pc, #104]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d011      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003c76:	4b15      	ldr	r3, [pc, #84]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c7c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c84:	4911      	ldr	r1, [pc, #68]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c94:	d101      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003c96:	2301      	movs	r3, #1
 8003c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d005      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ca8:	f040 80ff 	bne.w	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003cac:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cb2:	f7fe f899 	bl	8001de8 <HAL_GetTick>
 8003cb6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cb8:	e00e      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003cba:	f7fe f895 	bl	8001de8 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d907      	bls.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e188      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	424711e0 	.word	0x424711e0
 8003cd4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cd8:	4b7e      	ldr	r3, [pc, #504]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1ea      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d009      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d028      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d124      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003d0c:	4b71      	ldr	r3, [pc, #452]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d12:	0c1b      	lsrs	r3, r3, #16
 8003d14:	f003 0303 	and.w	r3, r3, #3
 8003d18:	3301      	adds	r3, #1
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d1e:	4b6d      	ldr	r3, [pc, #436]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d24:	0e1b      	lsrs	r3, r3, #24
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	019b      	lsls	r3, r3, #6
 8003d36:	431a      	orrs	r2, r3
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	085b      	lsrs	r3, r3, #1
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	041b      	lsls	r3, r3, #16
 8003d40:	431a      	orrs	r2, r3
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	061b      	lsls	r3, r3, #24
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	071b      	lsls	r3, r3, #28
 8003d4e:	4961      	ldr	r1, [pc, #388]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0304 	and.w	r3, r3, #4
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d004      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d6a:	d00a      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d035      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d80:	d130      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003d82:	4b54      	ldr	r3, [pc, #336]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d88:	0c1b      	lsrs	r3, r3, #16
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	3301      	adds	r3, #1
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d94:	4b4f      	ldr	r3, [pc, #316]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d9a:	0f1b      	lsrs	r3, r3, #28
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	019b      	lsls	r3, r3, #6
 8003dac:	431a      	orrs	r2, r3
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	085b      	lsrs	r3, r3, #1
 8003db2:	3b01      	subs	r3, #1
 8003db4:	041b      	lsls	r3, r3, #16
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	061b      	lsls	r3, r3, #24
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	071b      	lsls	r3, r3, #28
 8003dc4:	4943      	ldr	r1, [pc, #268]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003dcc:	4b41      	ldr	r3, [pc, #260]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dd2:	f023 021f 	bic.w	r2, r3, #31
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	493d      	ldr	r1, [pc, #244]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d029      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003df8:	d124      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003dfa:	4b36      	ldr	r3, [pc, #216]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e00:	0c1b      	lsrs	r3, r3, #16
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	3301      	adds	r3, #1
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e0c:	4b31      	ldr	r3, [pc, #196]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e12:	0f1b      	lsrs	r3, r3, #28
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	019b      	lsls	r3, r3, #6
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	085b      	lsrs	r3, r3, #1
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	041b      	lsls	r3, r3, #16
 8003e30:	431a      	orrs	r2, r3
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	061b      	lsls	r3, r3, #24
 8003e36:	431a      	orrs	r2, r3
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	071b      	lsls	r3, r3, #28
 8003e3c:	4925      	ldr	r1, [pc, #148]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d016      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	019b      	lsls	r3, r3, #6
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	085b      	lsrs	r3, r3, #1
 8003e62:	3b01      	subs	r3, #1
 8003e64:	041b      	lsls	r3, r3, #16
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	061b      	lsls	r3, r3, #24
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	071b      	lsls	r3, r3, #28
 8003e76:	4917      	ldr	r1, [pc, #92]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e7e:	4b16      	ldr	r3, [pc, #88]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003e80:	2201      	movs	r2, #1
 8003e82:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e84:	f7fd ffb0 	bl	8001de8 <HAL_GetTick>
 8003e88:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e8c:	f7fd ffac 	bl	8001de8 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e09f      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e9e:	4b0d      	ldr	r3, [pc, #52]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0f0      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	f040 8095 	bne.w	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003eb2:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003eb8:	f7fd ff96 	bl	8001de8 <HAL_GetTick>
 8003ebc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ebe:	e00f      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003ec0:	f7fd ff92 	bl	8001de8 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d908      	bls.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e085      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003ed2:	bf00      	nop
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	42470068 	.word	0x42470068
 8003edc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ee0:	4b41      	ldr	r3, [pc, #260]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eec:	d0e8      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d009      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d02b      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d127      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003f16:	4b34      	ldr	r3, [pc, #208]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1c:	0c1b      	lsrs	r3, r3, #16
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	3301      	adds	r3, #1
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699a      	ldr	r2, [r3, #24]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	019b      	lsls	r3, r3, #6
 8003f32:	431a      	orrs	r2, r3
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	085b      	lsrs	r3, r3, #1
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	041b      	lsls	r3, r3, #16
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	061b      	lsls	r3, r3, #24
 8003f44:	4928      	ldr	r1, [pc, #160]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f4c:	4b26      	ldr	r3, [pc, #152]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f52:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	021b      	lsls	r3, r3, #8
 8003f5e:	4922      	ldr	r1, [pc, #136]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d01d      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f7a:	d118      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f7c:	4b1a      	ldr	r3, [pc, #104]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f82:	0e1b      	lsrs	r3, r3, #24
 8003f84:	f003 030f 	and.w	r3, r3, #15
 8003f88:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699a      	ldr	r2, [r3, #24]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	019b      	lsls	r3, r3, #6
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	085b      	lsrs	r3, r3, #1
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	041b      	lsls	r3, r3, #16
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	061b      	lsls	r3, r3, #24
 8003fa6:	4910      	ldr	r1, [pc, #64]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003fae:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fb4:	f7fd ff18 	bl	8001de8 <HAL_GetTick>
 8003fb8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003fbc:	f7fd ff14 	bl	8001de8 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e007      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003fce:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fda:	d1ef      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3730      	adds	r7, #48	; 0x30
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	42470070 	.word	0x42470070

08003ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ff4:	b088      	sub	sp, #32
 8003ff6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004000:	2300      	movs	r3, #0
 8004002:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800400c:	4bce      	ldr	r3, [pc, #824]	; (8004348 <HAL_RCC_GetSysClockFreq+0x358>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f003 030c 	and.w	r3, r3, #12
 8004014:	2b0c      	cmp	r3, #12
 8004016:	f200 818d 	bhi.w	8004334 <HAL_RCC_GetSysClockFreq+0x344>
 800401a:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <HAL_RCC_GetSysClockFreq+0x30>)
 800401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004020:	08004055 	.word	0x08004055
 8004024:	08004335 	.word	0x08004335
 8004028:	08004335 	.word	0x08004335
 800402c:	08004335 	.word	0x08004335
 8004030:	0800405b 	.word	0x0800405b
 8004034:	08004335 	.word	0x08004335
 8004038:	08004335 	.word	0x08004335
 800403c:	08004335 	.word	0x08004335
 8004040:	08004061 	.word	0x08004061
 8004044:	08004335 	.word	0x08004335
 8004048:	08004335 	.word	0x08004335
 800404c:	08004335 	.word	0x08004335
 8004050:	080041d5 	.word	0x080041d5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004054:	4bbd      	ldr	r3, [pc, #756]	; (800434c <HAL_RCC_GetSysClockFreq+0x35c>)
 8004056:	61bb      	str	r3, [r7, #24]
       break;
 8004058:	e16f      	b.n	800433a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800405a:	4bbd      	ldr	r3, [pc, #756]	; (8004350 <HAL_RCC_GetSysClockFreq+0x360>)
 800405c:	61bb      	str	r3, [r7, #24]
      break;
 800405e:	e16c      	b.n	800433a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004060:	4bb9      	ldr	r3, [pc, #740]	; (8004348 <HAL_RCC_GetSysClockFreq+0x358>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004068:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800406a:	4bb7      	ldr	r3, [pc, #732]	; (8004348 <HAL_RCC_GetSysClockFreq+0x358>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d053      	beq.n	800411e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004076:	4bb4      	ldr	r3, [pc, #720]	; (8004348 <HAL_RCC_GetSysClockFreq+0x358>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	099b      	lsrs	r3, r3, #6
 800407c:	461a      	mov	r2, r3
 800407e:	f04f 0300 	mov.w	r3, #0
 8004082:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004086:	f04f 0100 	mov.w	r1, #0
 800408a:	ea02 0400 	and.w	r4, r2, r0
 800408e:	603c      	str	r4, [r7, #0]
 8004090:	400b      	ands	r3, r1
 8004092:	607b      	str	r3, [r7, #4]
 8004094:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004098:	4620      	mov	r0, r4
 800409a:	4629      	mov	r1, r5
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	014b      	lsls	r3, r1, #5
 80040a6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040aa:	0142      	lsls	r2, r0, #5
 80040ac:	4610      	mov	r0, r2
 80040ae:	4619      	mov	r1, r3
 80040b0:	4623      	mov	r3, r4
 80040b2:	1ac0      	subs	r0, r0, r3
 80040b4:	462b      	mov	r3, r5
 80040b6:	eb61 0103 	sbc.w	r1, r1, r3
 80040ba:	f04f 0200 	mov.w	r2, #0
 80040be:	f04f 0300 	mov.w	r3, #0
 80040c2:	018b      	lsls	r3, r1, #6
 80040c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040c8:	0182      	lsls	r2, r0, #6
 80040ca:	1a12      	subs	r2, r2, r0
 80040cc:	eb63 0301 	sbc.w	r3, r3, r1
 80040d0:	f04f 0000 	mov.w	r0, #0
 80040d4:	f04f 0100 	mov.w	r1, #0
 80040d8:	00d9      	lsls	r1, r3, #3
 80040da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040de:	00d0      	lsls	r0, r2, #3
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4621      	mov	r1, r4
 80040e6:	1852      	adds	r2, r2, r1
 80040e8:	4629      	mov	r1, r5
 80040ea:	eb43 0101 	adc.w	r1, r3, r1
 80040ee:	460b      	mov	r3, r1
 80040f0:	f04f 0000 	mov.w	r0, #0
 80040f4:	f04f 0100 	mov.w	r1, #0
 80040f8:	0259      	lsls	r1, r3, #9
 80040fa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80040fe:	0250      	lsls	r0, r2, #9
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4610      	mov	r0, r2
 8004106:	4619      	mov	r1, r3
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	461a      	mov	r2, r3
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	f7fc f886 	bl	8000220 <__aeabi_uldivmod>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4613      	mov	r3, r2
 800411a:	61fb      	str	r3, [r7, #28]
 800411c:	e04c      	b.n	80041b8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800411e:	4b8a      	ldr	r3, [pc, #552]	; (8004348 <HAL_RCC_GetSysClockFreq+0x358>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	099b      	lsrs	r3, r3, #6
 8004124:	461a      	mov	r2, r3
 8004126:	f04f 0300 	mov.w	r3, #0
 800412a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800412e:	f04f 0100 	mov.w	r1, #0
 8004132:	ea02 0a00 	and.w	sl, r2, r0
 8004136:	ea03 0b01 	and.w	fp, r3, r1
 800413a:	4650      	mov	r0, sl
 800413c:	4659      	mov	r1, fp
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	f04f 0300 	mov.w	r3, #0
 8004146:	014b      	lsls	r3, r1, #5
 8004148:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800414c:	0142      	lsls	r2, r0, #5
 800414e:	4610      	mov	r0, r2
 8004150:	4619      	mov	r1, r3
 8004152:	ebb0 000a 	subs.w	r0, r0, sl
 8004156:	eb61 010b 	sbc.w	r1, r1, fp
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	018b      	lsls	r3, r1, #6
 8004164:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004168:	0182      	lsls	r2, r0, #6
 800416a:	1a12      	subs	r2, r2, r0
 800416c:	eb63 0301 	sbc.w	r3, r3, r1
 8004170:	f04f 0000 	mov.w	r0, #0
 8004174:	f04f 0100 	mov.w	r1, #0
 8004178:	00d9      	lsls	r1, r3, #3
 800417a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800417e:	00d0      	lsls	r0, r2, #3
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	eb12 020a 	adds.w	r2, r2, sl
 8004188:	eb43 030b 	adc.w	r3, r3, fp
 800418c:	f04f 0000 	mov.w	r0, #0
 8004190:	f04f 0100 	mov.w	r1, #0
 8004194:	0299      	lsls	r1, r3, #10
 8004196:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800419a:	0290      	lsls	r0, r2, #10
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	4610      	mov	r0, r2
 80041a2:	4619      	mov	r1, r3
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	461a      	mov	r2, r3
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	f7fc f838 	bl	8000220 <__aeabi_uldivmod>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4613      	mov	r3, r2
 80041b6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041b8:	4b63      	ldr	r3, [pc, #396]	; (8004348 <HAL_RCC_GetSysClockFreq+0x358>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	0c1b      	lsrs	r3, r3, #16
 80041be:	f003 0303 	and.w	r3, r3, #3
 80041c2:	3301      	adds	r3, #1
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80041c8:	69fa      	ldr	r2, [r7, #28]
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d0:	61bb      	str	r3, [r7, #24]
      break;
 80041d2:	e0b2      	b.n	800433a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041d4:	4b5c      	ldr	r3, [pc, #368]	; (8004348 <HAL_RCC_GetSysClockFreq+0x358>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041dc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041de:	4b5a      	ldr	r3, [pc, #360]	; (8004348 <HAL_RCC_GetSysClockFreq+0x358>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d04d      	beq.n	8004286 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ea:	4b57      	ldr	r3, [pc, #348]	; (8004348 <HAL_RCC_GetSysClockFreq+0x358>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	099b      	lsrs	r3, r3, #6
 80041f0:	461a      	mov	r2, r3
 80041f2:	f04f 0300 	mov.w	r3, #0
 80041f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041fa:	f04f 0100 	mov.w	r1, #0
 80041fe:	ea02 0800 	and.w	r8, r2, r0
 8004202:	ea03 0901 	and.w	r9, r3, r1
 8004206:	4640      	mov	r0, r8
 8004208:	4649      	mov	r1, r9
 800420a:	f04f 0200 	mov.w	r2, #0
 800420e:	f04f 0300 	mov.w	r3, #0
 8004212:	014b      	lsls	r3, r1, #5
 8004214:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004218:	0142      	lsls	r2, r0, #5
 800421a:	4610      	mov	r0, r2
 800421c:	4619      	mov	r1, r3
 800421e:	ebb0 0008 	subs.w	r0, r0, r8
 8004222:	eb61 0109 	sbc.w	r1, r1, r9
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	f04f 0300 	mov.w	r3, #0
 800422e:	018b      	lsls	r3, r1, #6
 8004230:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004234:	0182      	lsls	r2, r0, #6
 8004236:	1a12      	subs	r2, r2, r0
 8004238:	eb63 0301 	sbc.w	r3, r3, r1
 800423c:	f04f 0000 	mov.w	r0, #0
 8004240:	f04f 0100 	mov.w	r1, #0
 8004244:	00d9      	lsls	r1, r3, #3
 8004246:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800424a:	00d0      	lsls	r0, r2, #3
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	eb12 0208 	adds.w	r2, r2, r8
 8004254:	eb43 0309 	adc.w	r3, r3, r9
 8004258:	f04f 0000 	mov.w	r0, #0
 800425c:	f04f 0100 	mov.w	r1, #0
 8004260:	0259      	lsls	r1, r3, #9
 8004262:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004266:	0250      	lsls	r0, r2, #9
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4610      	mov	r0, r2
 800426e:	4619      	mov	r1, r3
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	461a      	mov	r2, r3
 8004274:	f04f 0300 	mov.w	r3, #0
 8004278:	f7fb ffd2 	bl	8000220 <__aeabi_uldivmod>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	4613      	mov	r3, r2
 8004282:	61fb      	str	r3, [r7, #28]
 8004284:	e04a      	b.n	800431c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004286:	4b30      	ldr	r3, [pc, #192]	; (8004348 <HAL_RCC_GetSysClockFreq+0x358>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	099b      	lsrs	r3, r3, #6
 800428c:	461a      	mov	r2, r3
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004296:	f04f 0100 	mov.w	r1, #0
 800429a:	ea02 0400 	and.w	r4, r2, r0
 800429e:	ea03 0501 	and.w	r5, r3, r1
 80042a2:	4620      	mov	r0, r4
 80042a4:	4629      	mov	r1, r5
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	f04f 0300 	mov.w	r3, #0
 80042ae:	014b      	lsls	r3, r1, #5
 80042b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042b4:	0142      	lsls	r2, r0, #5
 80042b6:	4610      	mov	r0, r2
 80042b8:	4619      	mov	r1, r3
 80042ba:	1b00      	subs	r0, r0, r4
 80042bc:	eb61 0105 	sbc.w	r1, r1, r5
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	018b      	lsls	r3, r1, #6
 80042ca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042ce:	0182      	lsls	r2, r0, #6
 80042d0:	1a12      	subs	r2, r2, r0
 80042d2:	eb63 0301 	sbc.w	r3, r3, r1
 80042d6:	f04f 0000 	mov.w	r0, #0
 80042da:	f04f 0100 	mov.w	r1, #0
 80042de:	00d9      	lsls	r1, r3, #3
 80042e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042e4:	00d0      	lsls	r0, r2, #3
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	1912      	adds	r2, r2, r4
 80042ec:	eb45 0303 	adc.w	r3, r5, r3
 80042f0:	f04f 0000 	mov.w	r0, #0
 80042f4:	f04f 0100 	mov.w	r1, #0
 80042f8:	0299      	lsls	r1, r3, #10
 80042fa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80042fe:	0290      	lsls	r0, r2, #10
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	4610      	mov	r0, r2
 8004306:	4619      	mov	r1, r3
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	461a      	mov	r2, r3
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	f7fb ff86 	bl	8000220 <__aeabi_uldivmod>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4613      	mov	r3, r2
 800431a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800431c:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <HAL_RCC_GetSysClockFreq+0x358>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	0f1b      	lsrs	r3, r3, #28
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004328:	69fa      	ldr	r2, [r7, #28]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004330:	61bb      	str	r3, [r7, #24]
      break;
 8004332:	e002      	b.n	800433a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004334:	4b05      	ldr	r3, [pc, #20]	; (800434c <HAL_RCC_GetSysClockFreq+0x35c>)
 8004336:	61bb      	str	r3, [r7, #24]
      break;
 8004338:	bf00      	nop
    }
  }
  return sysclockfreq;
 800433a:	69bb      	ldr	r3, [r7, #24]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3720      	adds	r7, #32
 8004340:	46bd      	mov	sp, r7
 8004342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004346:	bf00      	nop
 8004348:	40023800 	.word	0x40023800
 800434c:	00f42400 	.word	0x00f42400
 8004350:	007a1200 	.word	0x007a1200

08004354 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e28d      	b.n	8004882 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 8083 	beq.w	800447a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004374:	4b94      	ldr	r3, [pc, #592]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 030c 	and.w	r3, r3, #12
 800437c:	2b04      	cmp	r3, #4
 800437e:	d019      	beq.n	80043b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004380:	4b91      	ldr	r3, [pc, #580]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004388:	2b08      	cmp	r3, #8
 800438a:	d106      	bne.n	800439a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800438c:	4b8e      	ldr	r3, [pc, #568]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004394:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004398:	d00c      	beq.n	80043b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800439a:	4b8b      	ldr	r3, [pc, #556]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043a2:	2b0c      	cmp	r3, #12
 80043a4:	d112      	bne.n	80043cc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043a6:	4b88      	ldr	r3, [pc, #544]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043b2:	d10b      	bne.n	80043cc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b4:	4b84      	ldr	r3, [pc, #528]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d05b      	beq.n	8004478 <HAL_RCC_OscConfig+0x124>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d157      	bne.n	8004478 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e25a      	b.n	8004882 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d4:	d106      	bne.n	80043e4 <HAL_RCC_OscConfig+0x90>
 80043d6:	4b7c      	ldr	r3, [pc, #496]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a7b      	ldr	r2, [pc, #492]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 80043dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	e01d      	b.n	8004420 <HAL_RCC_OscConfig+0xcc>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043ec:	d10c      	bne.n	8004408 <HAL_RCC_OscConfig+0xb4>
 80043ee:	4b76      	ldr	r3, [pc, #472]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a75      	ldr	r2, [pc, #468]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 80043f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	4b73      	ldr	r3, [pc, #460]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a72      	ldr	r2, [pc, #456]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 8004400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	e00b      	b.n	8004420 <HAL_RCC_OscConfig+0xcc>
 8004408:	4b6f      	ldr	r3, [pc, #444]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a6e      	ldr	r2, [pc, #440]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 800440e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	4b6c      	ldr	r3, [pc, #432]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a6b      	ldr	r2, [pc, #428]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 800441a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800441e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d013      	beq.n	8004450 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004428:	f7fd fcde 	bl	8001de8 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004430:	f7fd fcda 	bl	8001de8 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b64      	cmp	r3, #100	; 0x64
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e21f      	b.n	8004882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004442:	4b61      	ldr	r3, [pc, #388]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0f0      	beq.n	8004430 <HAL_RCC_OscConfig+0xdc>
 800444e:	e014      	b.n	800447a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004450:	f7fd fcca 	bl	8001de8 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004458:	f7fd fcc6 	bl	8001de8 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b64      	cmp	r3, #100	; 0x64
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e20b      	b.n	8004882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800446a:	4b57      	ldr	r3, [pc, #348]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0x104>
 8004476:	e000      	b.n	800447a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d06f      	beq.n	8004566 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004486:	4b50      	ldr	r3, [pc, #320]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 030c 	and.w	r3, r3, #12
 800448e:	2b00      	cmp	r3, #0
 8004490:	d017      	beq.n	80044c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004492:	4b4d      	ldr	r3, [pc, #308]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800449a:	2b08      	cmp	r3, #8
 800449c:	d105      	bne.n	80044aa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800449e:	4b4a      	ldr	r3, [pc, #296]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00b      	beq.n	80044c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044aa:	4b47      	ldr	r3, [pc, #284]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044b2:	2b0c      	cmp	r3, #12
 80044b4:	d11c      	bne.n	80044f0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044b6:	4b44      	ldr	r3, [pc, #272]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d116      	bne.n	80044f0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044c2:	4b41      	ldr	r3, [pc, #260]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d005      	beq.n	80044da <HAL_RCC_OscConfig+0x186>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d001      	beq.n	80044da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e1d3      	b.n	8004882 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044da:	4b3b      	ldr	r3, [pc, #236]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	4937      	ldr	r1, [pc, #220]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ee:	e03a      	b.n	8004566 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d020      	beq.n	800453a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044f8:	4b34      	ldr	r3, [pc, #208]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 80044fa:	2201      	movs	r2, #1
 80044fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fe:	f7fd fc73 	bl	8001de8 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004506:	f7fd fc6f 	bl	8001de8 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e1b4      	b.n	8004882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004518:	4b2b      	ldr	r3, [pc, #172]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0f0      	beq.n	8004506 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004524:	4b28      	ldr	r3, [pc, #160]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	4925      	ldr	r1, [pc, #148]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 8004534:	4313      	orrs	r3, r2
 8004536:	600b      	str	r3, [r1, #0]
 8004538:	e015      	b.n	8004566 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800453a:	4b24      	ldr	r3, [pc, #144]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004540:	f7fd fc52 	bl	8001de8 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004548:	f7fd fc4e 	bl	8001de8 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e193      	b.n	8004882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800455a:	4b1b      	ldr	r3, [pc, #108]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1f0      	bne.n	8004548 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d036      	beq.n	80045e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d016      	beq.n	80045a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800457a:	4b15      	ldr	r3, [pc, #84]	; (80045d0 <HAL_RCC_OscConfig+0x27c>)
 800457c:	2201      	movs	r2, #1
 800457e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004580:	f7fd fc32 	bl	8001de8 <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004588:	f7fd fc2e 	bl	8001de8 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e173      	b.n	8004882 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800459a:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <HAL_RCC_OscConfig+0x274>)
 800459c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0f0      	beq.n	8004588 <HAL_RCC_OscConfig+0x234>
 80045a6:	e01b      	b.n	80045e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045a8:	4b09      	ldr	r3, [pc, #36]	; (80045d0 <HAL_RCC_OscConfig+0x27c>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ae:	f7fd fc1b 	bl	8001de8 <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b4:	e00e      	b.n	80045d4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045b6:	f7fd fc17 	bl	8001de8 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d907      	bls.n	80045d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e15c      	b.n	8004882 <HAL_RCC_OscConfig+0x52e>
 80045c8:	40023800 	.word	0x40023800
 80045cc:	42470000 	.word	0x42470000
 80045d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d4:	4b8a      	ldr	r3, [pc, #552]	; (8004800 <HAL_RCC_OscConfig+0x4ac>)
 80045d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1ea      	bne.n	80045b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 8097 	beq.w	800471c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ee:	2300      	movs	r3, #0
 80045f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045f2:	4b83      	ldr	r3, [pc, #524]	; (8004800 <HAL_RCC_OscConfig+0x4ac>)
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10f      	bne.n	800461e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045fe:	2300      	movs	r3, #0
 8004600:	60bb      	str	r3, [r7, #8]
 8004602:	4b7f      	ldr	r3, [pc, #508]	; (8004800 <HAL_RCC_OscConfig+0x4ac>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	4a7e      	ldr	r2, [pc, #504]	; (8004800 <HAL_RCC_OscConfig+0x4ac>)
 8004608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800460c:	6413      	str	r3, [r2, #64]	; 0x40
 800460e:	4b7c      	ldr	r3, [pc, #496]	; (8004800 <HAL_RCC_OscConfig+0x4ac>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004616:	60bb      	str	r3, [r7, #8]
 8004618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800461a:	2301      	movs	r3, #1
 800461c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800461e:	4b79      	ldr	r3, [pc, #484]	; (8004804 <HAL_RCC_OscConfig+0x4b0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004626:	2b00      	cmp	r3, #0
 8004628:	d118      	bne.n	800465c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800462a:	4b76      	ldr	r3, [pc, #472]	; (8004804 <HAL_RCC_OscConfig+0x4b0>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a75      	ldr	r2, [pc, #468]	; (8004804 <HAL_RCC_OscConfig+0x4b0>)
 8004630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004636:	f7fd fbd7 	bl	8001de8 <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800463e:	f7fd fbd3 	bl	8001de8 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e118      	b.n	8004882 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004650:	4b6c      	ldr	r3, [pc, #432]	; (8004804 <HAL_RCC_OscConfig+0x4b0>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f0      	beq.n	800463e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d106      	bne.n	8004672 <HAL_RCC_OscConfig+0x31e>
 8004664:	4b66      	ldr	r3, [pc, #408]	; (8004800 <HAL_RCC_OscConfig+0x4ac>)
 8004666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004668:	4a65      	ldr	r2, [pc, #404]	; (8004800 <HAL_RCC_OscConfig+0x4ac>)
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	6713      	str	r3, [r2, #112]	; 0x70
 8004670:	e01c      	b.n	80046ac <HAL_RCC_OscConfig+0x358>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b05      	cmp	r3, #5
 8004678:	d10c      	bne.n	8004694 <HAL_RCC_OscConfig+0x340>
 800467a:	4b61      	ldr	r3, [pc, #388]	; (8004800 <HAL_RCC_OscConfig+0x4ac>)
 800467c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467e:	4a60      	ldr	r2, [pc, #384]	; (8004800 <HAL_RCC_OscConfig+0x4ac>)
 8004680:	f043 0304 	orr.w	r3, r3, #4
 8004684:	6713      	str	r3, [r2, #112]	; 0x70
 8004686:	4b5e      	ldr	r3, [pc, #376]	; (8004800 <HAL_RCC_OscConfig+0x4ac>)
 8004688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468a:	4a5d      	ldr	r2, [pc, #372]	; (8004800 <HAL_RCC_OscConfig+0x4ac>)
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	6713      	str	r3, [r2, #112]	; 0x70
 8004692:	e00b      	b.n	80046ac <HAL_RCC_OscConfig+0x358>
 8004694:	4b5a      	ldr	r3, [pc, #360]	; (8004800 <HAL_RCC_OscConfig+0x4ac>)
 8004696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004698:	4a59      	ldr	r2, [pc, #356]	; (8004800 <HAL_RCC_OscConfig+0x4ac>)
 800469a:	f023 0301 	bic.w	r3, r3, #1
 800469e:	6713      	str	r3, [r2, #112]	; 0x70
 80046a0:	4b57      	ldr	r3, [pc, #348]	; (8004800 <HAL_RCC_OscConfig+0x4ac>)
 80046a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a4:	4a56      	ldr	r2, [pc, #344]	; (8004800 <HAL_RCC_OscConfig+0x4ac>)
 80046a6:	f023 0304 	bic.w	r3, r3, #4
 80046aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d015      	beq.n	80046e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b4:	f7fd fb98 	bl	8001de8 <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ba:	e00a      	b.n	80046d2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046bc:	f7fd fb94 	bl	8001de8 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e0d7      	b.n	8004882 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d2:	4b4b      	ldr	r3, [pc, #300]	; (8004800 <HAL_RCC_OscConfig+0x4ac>)
 80046d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0ee      	beq.n	80046bc <HAL_RCC_OscConfig+0x368>
 80046de:	e014      	b.n	800470a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e0:	f7fd fb82 	bl	8001de8 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046e6:	e00a      	b.n	80046fe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046e8:	f7fd fb7e 	bl	8001de8 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e0c1      	b.n	8004882 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046fe:	4b40      	ldr	r3, [pc, #256]	; (8004800 <HAL_RCC_OscConfig+0x4ac>)
 8004700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1ee      	bne.n	80046e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800470a:	7dfb      	ldrb	r3, [r7, #23]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d105      	bne.n	800471c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004710:	4b3b      	ldr	r3, [pc, #236]	; (8004800 <HAL_RCC_OscConfig+0x4ac>)
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	4a3a      	ldr	r2, [pc, #232]	; (8004800 <HAL_RCC_OscConfig+0x4ac>)
 8004716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800471a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 80ad 	beq.w	8004880 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004726:	4b36      	ldr	r3, [pc, #216]	; (8004800 <HAL_RCC_OscConfig+0x4ac>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 030c 	and.w	r3, r3, #12
 800472e:	2b08      	cmp	r3, #8
 8004730:	d060      	beq.n	80047f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	2b02      	cmp	r3, #2
 8004738:	d145      	bne.n	80047c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800473a:	4b33      	ldr	r3, [pc, #204]	; (8004808 <HAL_RCC_OscConfig+0x4b4>)
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004740:	f7fd fb52 	bl	8001de8 <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004748:	f7fd fb4e 	bl	8001de8 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e093      	b.n	8004882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800475a:	4b29      	ldr	r3, [pc, #164]	; (8004800 <HAL_RCC_OscConfig+0x4ac>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1f0      	bne.n	8004748 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	69da      	ldr	r2, [r3, #28]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	019b      	lsls	r3, r3, #6
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477c:	085b      	lsrs	r3, r3, #1
 800477e:	3b01      	subs	r3, #1
 8004780:	041b      	lsls	r3, r3, #16
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004788:	061b      	lsls	r3, r3, #24
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004790:	071b      	lsls	r3, r3, #28
 8004792:	491b      	ldr	r1, [pc, #108]	; (8004800 <HAL_RCC_OscConfig+0x4ac>)
 8004794:	4313      	orrs	r3, r2
 8004796:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004798:	4b1b      	ldr	r3, [pc, #108]	; (8004808 <HAL_RCC_OscConfig+0x4b4>)
 800479a:	2201      	movs	r2, #1
 800479c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479e:	f7fd fb23 	bl	8001de8 <HAL_GetTick>
 80047a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047a4:	e008      	b.n	80047b8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a6:	f7fd fb1f 	bl	8001de8 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d901      	bls.n	80047b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e064      	b.n	8004882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b8:	4b11      	ldr	r3, [pc, #68]	; (8004800 <HAL_RCC_OscConfig+0x4ac>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0f0      	beq.n	80047a6 <HAL_RCC_OscConfig+0x452>
 80047c4:	e05c      	b.n	8004880 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c6:	4b10      	ldr	r3, [pc, #64]	; (8004808 <HAL_RCC_OscConfig+0x4b4>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047cc:	f7fd fb0c 	bl	8001de8 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047d4:	f7fd fb08 	bl	8001de8 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e04d      	b.n	8004882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047e6:	4b06      	ldr	r3, [pc, #24]	; (8004800 <HAL_RCC_OscConfig+0x4ac>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f0      	bne.n	80047d4 <HAL_RCC_OscConfig+0x480>
 80047f2:	e045      	b.n	8004880 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d107      	bne.n	800480c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e040      	b.n	8004882 <HAL_RCC_OscConfig+0x52e>
 8004800:	40023800 	.word	0x40023800
 8004804:	40007000 	.word	0x40007000
 8004808:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800480c:	4b1f      	ldr	r3, [pc, #124]	; (800488c <HAL_RCC_OscConfig+0x538>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d030      	beq.n	800487c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004824:	429a      	cmp	r2, r3
 8004826:	d129      	bne.n	800487c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004832:	429a      	cmp	r2, r3
 8004834:	d122      	bne.n	800487c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800483c:	4013      	ands	r3, r2
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004842:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004844:	4293      	cmp	r3, r2
 8004846:	d119      	bne.n	800487c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004852:	085b      	lsrs	r3, r3, #1
 8004854:	3b01      	subs	r3, #1
 8004856:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004858:	429a      	cmp	r2, r3
 800485a:	d10f      	bne.n	800487c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004866:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004868:	429a      	cmp	r2, r3
 800486a:	d107      	bne.n	800487c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004876:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004878:	429a      	cmp	r2, r3
 800487a:	d001      	beq.n	8004880 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e000      	b.n	8004882 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	40023800 	.word	0x40023800

08004890 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e07b      	b.n	800499a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d108      	bne.n	80048bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048b2:	d009      	beq.n	80048c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	61da      	str	r2, [r3, #28]
 80048ba:	e005      	b.n	80048c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fd f8a2 	bl	8001a2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2202      	movs	r2, #2
 80048ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004910:	431a      	orrs	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	431a      	orrs	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494c:	ea42 0103 	orr.w	r1, r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004954:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	0c1b      	lsrs	r3, r3, #16
 8004966:	f003 0104 	and.w	r1, r3, #4
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	f003 0210 	and.w	r2, r3, #16
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	69da      	ldr	r2, [r3, #28]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004988:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b088      	sub	sp, #32
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	60f8      	str	r0, [r7, #12]
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	603b      	str	r3, [r7, #0]
 80049ae:	4613      	mov	r3, r2
 80049b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <HAL_SPI_Transmit+0x22>
 80049c0:	2302      	movs	r3, #2
 80049c2:	e126      	b.n	8004c12 <HAL_SPI_Transmit+0x270>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049cc:	f7fd fa0c 	bl	8001de8 <HAL_GetTick>
 80049d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049d2:	88fb      	ldrh	r3, [r7, #6]
 80049d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d002      	beq.n	80049e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049e2:	2302      	movs	r3, #2
 80049e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049e6:	e10b      	b.n	8004c00 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d002      	beq.n	80049f4 <HAL_SPI_Transmit+0x52>
 80049ee:	88fb      	ldrh	r3, [r7, #6]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d102      	bne.n	80049fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049f8:	e102      	b.n	8004c00 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2203      	movs	r2, #3
 80049fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	88fa      	ldrh	r2, [r7, #6]
 8004a12:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	88fa      	ldrh	r2, [r7, #6]
 8004a18:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a40:	d10f      	bne.n	8004a62 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6c:	2b40      	cmp	r3, #64	; 0x40
 8004a6e:	d007      	beq.n	8004a80 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a88:	d14b      	bne.n	8004b22 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <HAL_SPI_Transmit+0xf6>
 8004a92:	8afb      	ldrh	r3, [r7, #22]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d13e      	bne.n	8004b16 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9c:	881a      	ldrh	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa8:	1c9a      	adds	r2, r3, #2
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004abc:	e02b      	b.n	8004b16 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d112      	bne.n	8004af2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad0:	881a      	ldrh	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004adc:	1c9a      	adds	r2, r3, #2
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	86da      	strh	r2, [r3, #54]	; 0x36
 8004af0:	e011      	b.n	8004b16 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004af2:	f7fd f979 	bl	8001de8 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d803      	bhi.n	8004b0a <HAL_SPI_Transmit+0x168>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b08:	d102      	bne.n	8004b10 <HAL_SPI_Transmit+0x16e>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d102      	bne.n	8004b16 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b14:	e074      	b.n	8004c00 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1ce      	bne.n	8004abe <HAL_SPI_Transmit+0x11c>
 8004b20:	e04c      	b.n	8004bbc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <HAL_SPI_Transmit+0x18e>
 8004b2a:	8afb      	ldrh	r3, [r7, #22]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d140      	bne.n	8004bb2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	330c      	adds	r3, #12
 8004b3a:	7812      	ldrb	r2, [r2, #0]
 8004b3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b56:	e02c      	b.n	8004bb2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d113      	bne.n	8004b8e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	330c      	adds	r3, #12
 8004b70:	7812      	ldrb	r2, [r2, #0]
 8004b72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	1c5a      	adds	r2, r3, #1
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b8c:	e011      	b.n	8004bb2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b8e:	f7fd f92b 	bl	8001de8 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d803      	bhi.n	8004ba6 <HAL_SPI_Transmit+0x204>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba4:	d102      	bne.n	8004bac <HAL_SPI_Transmit+0x20a>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d102      	bne.n	8004bb2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bb0:	e026      	b.n	8004c00 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1cd      	bne.n	8004b58 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	6839      	ldr	r1, [r7, #0]
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 fbcb 	bl	800535c <SPI_EndRxTxTransaction>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d002      	beq.n	8004bd2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10a      	bne.n	8004bf0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bda:	2300      	movs	r3, #0
 8004bdc:	613b      	str	r3, [r7, #16]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	613b      	str	r3, [r7, #16]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	613b      	str	r3, [r7, #16]
 8004bee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	77fb      	strb	r3, [r7, #31]
 8004bfc:	e000      	b.n	8004c00 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004bfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c10:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3720      	adds	r7, #32
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b088      	sub	sp, #32
 8004c1e:	af02      	add	r7, sp, #8
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	60b9      	str	r1, [r7, #8]
 8004c24:	603b      	str	r3, [r7, #0]
 8004c26:	4613      	mov	r3, r2
 8004c28:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c36:	d112      	bne.n	8004c5e <HAL_SPI_Receive+0x44>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10e      	bne.n	8004c5e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2204      	movs	r2, #4
 8004c44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c48:	88fa      	ldrh	r2, [r7, #6]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	68b9      	ldr	r1, [r7, #8]
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 f8f1 	bl	8004e3c <HAL_SPI_TransmitReceive>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	e0ea      	b.n	8004e34 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d101      	bne.n	8004c6c <HAL_SPI_Receive+0x52>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e0e3      	b.n	8004e34 <HAL_SPI_Receive+0x21a>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c74:	f7fd f8b8 	bl	8001de8 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d002      	beq.n	8004c8c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004c86:	2302      	movs	r3, #2
 8004c88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c8a:	e0ca      	b.n	8004e22 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <HAL_SPI_Receive+0x7e>
 8004c92:	88fb      	ldrh	r3, [r7, #6]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d102      	bne.n	8004c9e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c9c:	e0c1      	b.n	8004e22 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2204      	movs	r2, #4
 8004ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	88fa      	ldrh	r2, [r7, #6]
 8004cb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	88fa      	ldrh	r2, [r7, #6]
 8004cbc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce4:	d10f      	bne.n	8004d06 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cf4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d04:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d10:	2b40      	cmp	r3, #64	; 0x40
 8004d12:	d007      	beq.n	8004d24 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d22:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d162      	bne.n	8004df2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d2c:	e02e      	b.n	8004d8c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d115      	bne.n	8004d68 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f103 020c 	add.w	r2, r3, #12
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d48:	7812      	ldrb	r2, [r2, #0]
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d66:	e011      	b.n	8004d8c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d68:	f7fd f83e 	bl	8001de8 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d803      	bhi.n	8004d80 <HAL_SPI_Receive+0x166>
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7e:	d102      	bne.n	8004d86 <HAL_SPI_Receive+0x16c>
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d102      	bne.n	8004d8c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d8a:	e04a      	b.n	8004e22 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1cb      	bne.n	8004d2e <HAL_SPI_Receive+0x114>
 8004d96:	e031      	b.n	8004dfc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d113      	bne.n	8004dce <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db0:	b292      	uxth	r2, r2
 8004db2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db8:	1c9a      	adds	r2, r3, #2
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dcc:	e011      	b.n	8004df2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dce:	f7fd f80b 	bl	8001de8 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d803      	bhi.n	8004de6 <HAL_SPI_Receive+0x1cc>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de4:	d102      	bne.n	8004dec <HAL_SPI_Receive+0x1d2>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d102      	bne.n	8004df2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004df0:	e017      	b.n	8004e22 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1cd      	bne.n	8004d98 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	6839      	ldr	r1, [r7, #0]
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 fa45 	bl	8005290 <SPI_EndRxTransaction>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	75fb      	strb	r3, [r7, #23]
 8004e1e:	e000      	b.n	8004e22 <HAL_SPI_Receive+0x208>
  }

error :
 8004e20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3718      	adds	r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08c      	sub	sp, #48	; 0x30
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
 8004e48:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d101      	bne.n	8004e62 <HAL_SPI_TransmitReceive+0x26>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	e18a      	b.n	8005178 <HAL_SPI_TransmitReceive+0x33c>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e6a:	f7fc ffbd 	bl	8001de8 <HAL_GetTick>
 8004e6e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004e80:	887b      	ldrh	r3, [r7, #2]
 8004e82:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d00f      	beq.n	8004eac <HAL_SPI_TransmitReceive+0x70>
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e92:	d107      	bne.n	8004ea4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d103      	bne.n	8004ea4 <HAL_SPI_TransmitReceive+0x68>
 8004e9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d003      	beq.n	8004eac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004eaa:	e15b      	b.n	8005164 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d005      	beq.n	8004ebe <HAL_SPI_TransmitReceive+0x82>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <HAL_SPI_TransmitReceive+0x82>
 8004eb8:	887b      	ldrh	r3, [r7, #2]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d103      	bne.n	8004ec6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ec4:	e14e      	b.n	8005164 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d003      	beq.n	8004eda <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2205      	movs	r2, #5
 8004ed6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	887a      	ldrh	r2, [r7, #2]
 8004eea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	887a      	ldrh	r2, [r7, #2]
 8004ef0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	887a      	ldrh	r2, [r7, #2]
 8004efc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	887a      	ldrh	r2, [r7, #2]
 8004f02:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1a:	2b40      	cmp	r3, #64	; 0x40
 8004f1c:	d007      	beq.n	8004f2e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f36:	d178      	bne.n	800502a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <HAL_SPI_TransmitReceive+0x10a>
 8004f40:	8b7b      	ldrh	r3, [r7, #26]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d166      	bne.n	8005014 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4a:	881a      	ldrh	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f56:	1c9a      	adds	r2, r3, #2
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f6a:	e053      	b.n	8005014 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d11b      	bne.n	8004fb2 <HAL_SPI_TransmitReceive+0x176>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d016      	beq.n	8004fb2 <HAL_SPI_TransmitReceive+0x176>
 8004f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d113      	bne.n	8004fb2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	881a      	ldrh	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9a:	1c9a      	adds	r2, r3, #2
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d119      	bne.n	8004ff4 <HAL_SPI_TransmitReceive+0x1b8>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d014      	beq.n	8004ff4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	b292      	uxth	r2, r2
 8004fd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fdc:	1c9a      	adds	r2, r3, #2
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ff4:	f7fc fef8 	bl	8001de8 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005000:	429a      	cmp	r2, r3
 8005002:	d807      	bhi.n	8005014 <HAL_SPI_TransmitReceive+0x1d8>
 8005004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500a:	d003      	beq.n	8005014 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005012:	e0a7      	b.n	8005164 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005018:	b29b      	uxth	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1a6      	bne.n	8004f6c <HAL_SPI_TransmitReceive+0x130>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005022:	b29b      	uxth	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1a1      	bne.n	8004f6c <HAL_SPI_TransmitReceive+0x130>
 8005028:	e07c      	b.n	8005124 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d002      	beq.n	8005038 <HAL_SPI_TransmitReceive+0x1fc>
 8005032:	8b7b      	ldrh	r3, [r7, #26]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d16b      	bne.n	8005110 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	330c      	adds	r3, #12
 8005042:	7812      	ldrb	r2, [r2, #0]
 8005044:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005054:	b29b      	uxth	r3, r3
 8005056:	3b01      	subs	r3, #1
 8005058:	b29a      	uxth	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800505e:	e057      	b.n	8005110 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b02      	cmp	r3, #2
 800506c:	d11c      	bne.n	80050a8 <HAL_SPI_TransmitReceive+0x26c>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005072:	b29b      	uxth	r3, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	d017      	beq.n	80050a8 <HAL_SPI_TransmitReceive+0x26c>
 8005078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507a:	2b01      	cmp	r3, #1
 800507c:	d114      	bne.n	80050a8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	330c      	adds	r3, #12
 8005088:	7812      	ldrb	r2, [r2, #0]
 800508a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800509a:	b29b      	uxth	r3, r3
 800509c:	3b01      	subs	r3, #1
 800509e:	b29a      	uxth	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d119      	bne.n	80050ea <HAL_SPI_TransmitReceive+0x2ae>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d014      	beq.n	80050ea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050dc:	b29b      	uxth	r3, r3
 80050de:	3b01      	subs	r3, #1
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050e6:	2301      	movs	r3, #1
 80050e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050ea:	f7fc fe7d 	bl	8001de8 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d803      	bhi.n	8005102 <HAL_SPI_TransmitReceive+0x2c6>
 80050fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005100:	d102      	bne.n	8005108 <HAL_SPI_TransmitReceive+0x2cc>
 8005102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005104:	2b00      	cmp	r3, #0
 8005106:	d103      	bne.n	8005110 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800510e:	e029      	b.n	8005164 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1a2      	bne.n	8005060 <HAL_SPI_TransmitReceive+0x224>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800511e:	b29b      	uxth	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d19d      	bne.n	8005060 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005126:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 f917 	bl	800535c <SPI_EndRxTxTransaction>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d006      	beq.n	8005142 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2220      	movs	r2, #32
 800513e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005140:	e010      	b.n	8005164 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10b      	bne.n	8005162 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800514a:	2300      	movs	r3, #0
 800514c:	617b      	str	r3, [r7, #20]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	617b      	str	r3, [r7, #20]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	617b      	str	r3, [r7, #20]
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	e000      	b.n	8005164 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005162:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005174:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005178:	4618      	mov	r0, r3
 800517a:	3730      	adds	r7, #48	; 0x30
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b088      	sub	sp, #32
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	603b      	str	r3, [r7, #0]
 800518c:	4613      	mov	r3, r2
 800518e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005190:	f7fc fe2a 	bl	8001de8 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005198:	1a9b      	subs	r3, r3, r2
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	4413      	add	r3, r2
 800519e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051a0:	f7fc fe22 	bl	8001de8 <HAL_GetTick>
 80051a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051a6:	4b39      	ldr	r3, [pc, #228]	; (800528c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	015b      	lsls	r3, r3, #5
 80051ac:	0d1b      	lsrs	r3, r3, #20
 80051ae:	69fa      	ldr	r2, [r7, #28]
 80051b0:	fb02 f303 	mul.w	r3, r2, r3
 80051b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051b6:	e054      	b.n	8005262 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051be:	d050      	beq.n	8005262 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051c0:	f7fc fe12 	bl	8001de8 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	69fa      	ldr	r2, [r7, #28]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d902      	bls.n	80051d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d13d      	bne.n	8005252 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051ee:	d111      	bne.n	8005214 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051f8:	d004      	beq.n	8005204 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005202:	d107      	bne.n	8005214 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005212:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800521c:	d10f      	bne.n	800523e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800523c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e017      	b.n	8005282 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	3b01      	subs	r3, #1
 8005260:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	4013      	ands	r3, r2
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	429a      	cmp	r2, r3
 8005270:	bf0c      	ite	eq
 8005272:	2301      	moveq	r3, #1
 8005274:	2300      	movne	r3, #0
 8005276:	b2db      	uxtb	r3, r3
 8005278:	461a      	mov	r2, r3
 800527a:	79fb      	ldrb	r3, [r7, #7]
 800527c:	429a      	cmp	r2, r3
 800527e:	d19b      	bne.n	80051b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3720      	adds	r7, #32
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20000000 	.word	0x20000000

08005290 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af02      	add	r7, sp, #8
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052a4:	d111      	bne.n	80052ca <SPI_EndRxTransaction+0x3a>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ae:	d004      	beq.n	80052ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b8:	d107      	bne.n	80052ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052c8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052d2:	d12a      	bne.n	800532a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052dc:	d012      	beq.n	8005304 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2200      	movs	r2, #0
 80052e6:	2180      	movs	r1, #128	; 0x80
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f7ff ff49 	bl	8005180 <SPI_WaitFlagStateUntilTimeout>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d02d      	beq.n	8005350 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f8:	f043 0220 	orr.w	r2, r3, #32
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e026      	b.n	8005352 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	9300      	str	r3, [sp, #0]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2200      	movs	r2, #0
 800530c:	2101      	movs	r1, #1
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f7ff ff36 	bl	8005180 <SPI_WaitFlagStateUntilTimeout>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d01a      	beq.n	8005350 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531e:	f043 0220 	orr.w	r2, r3, #32
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e013      	b.n	8005352 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2200      	movs	r2, #0
 8005332:	2101      	movs	r1, #1
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f7ff ff23 	bl	8005180 <SPI_WaitFlagStateUntilTimeout>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d007      	beq.n	8005350 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005344:	f043 0220 	orr.w	r2, r3, #32
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e000      	b.n	8005352 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
	...

0800535c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af02      	add	r7, sp, #8
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005368:	4b1b      	ldr	r3, [pc, #108]	; (80053d8 <SPI_EndRxTxTransaction+0x7c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a1b      	ldr	r2, [pc, #108]	; (80053dc <SPI_EndRxTxTransaction+0x80>)
 800536e:	fba2 2303 	umull	r2, r3, r2, r3
 8005372:	0d5b      	lsrs	r3, r3, #21
 8005374:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005378:	fb02 f303 	mul.w	r3, r2, r3
 800537c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005386:	d112      	bne.n	80053ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2200      	movs	r2, #0
 8005390:	2180      	movs	r1, #128	; 0x80
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f7ff fef4 	bl	8005180 <SPI_WaitFlagStateUntilTimeout>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d016      	beq.n	80053cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a2:	f043 0220 	orr.w	r2, r3, #32
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e00f      	b.n	80053ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00a      	beq.n	80053ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	3b01      	subs	r3, #1
 80053b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c4:	2b80      	cmp	r3, #128	; 0x80
 80053c6:	d0f2      	beq.n	80053ae <SPI_EndRxTxTransaction+0x52>
 80053c8:	e000      	b.n	80053cc <SPI_EndRxTxTransaction+0x70>
        break;
 80053ca:	bf00      	nop
  }

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	20000000 	.word	0x20000000
 80053dc:	165e9f81 	.word	0x165e9f81

080053e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e041      	b.n	8005476 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7fc fb58 	bl	8001abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3304      	adds	r3, #4
 800541c:	4619      	mov	r1, r3
 800541e:	4610      	mov	r0, r2
 8005420:	f000 f9ce 	bl	80057c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b01      	cmp	r3, #1
 8005492:	d001      	beq.n	8005498 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e04e      	b.n	8005536 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0201 	orr.w	r2, r2, #1
 80054ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a23      	ldr	r2, [pc, #140]	; (8005544 <HAL_TIM_Base_Start_IT+0xc4>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d022      	beq.n	8005500 <HAL_TIM_Base_Start_IT+0x80>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c2:	d01d      	beq.n	8005500 <HAL_TIM_Base_Start_IT+0x80>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a1f      	ldr	r2, [pc, #124]	; (8005548 <HAL_TIM_Base_Start_IT+0xc8>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d018      	beq.n	8005500 <HAL_TIM_Base_Start_IT+0x80>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a1e      	ldr	r2, [pc, #120]	; (800554c <HAL_TIM_Base_Start_IT+0xcc>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d013      	beq.n	8005500 <HAL_TIM_Base_Start_IT+0x80>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a1c      	ldr	r2, [pc, #112]	; (8005550 <HAL_TIM_Base_Start_IT+0xd0>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d00e      	beq.n	8005500 <HAL_TIM_Base_Start_IT+0x80>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a1b      	ldr	r2, [pc, #108]	; (8005554 <HAL_TIM_Base_Start_IT+0xd4>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d009      	beq.n	8005500 <HAL_TIM_Base_Start_IT+0x80>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a19      	ldr	r2, [pc, #100]	; (8005558 <HAL_TIM_Base_Start_IT+0xd8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d004      	beq.n	8005500 <HAL_TIM_Base_Start_IT+0x80>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a18      	ldr	r2, [pc, #96]	; (800555c <HAL_TIM_Base_Start_IT+0xdc>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d111      	bne.n	8005524 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2b06      	cmp	r3, #6
 8005510:	d010      	beq.n	8005534 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f042 0201 	orr.w	r2, r2, #1
 8005520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005522:	e007      	b.n	8005534 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0201 	orr.w	r2, r2, #1
 8005532:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40010000 	.word	0x40010000
 8005548:	40000400 	.word	0x40000400
 800554c:	40000800 	.word	0x40000800
 8005550:	40000c00 	.word	0x40000c00
 8005554:	40010400 	.word	0x40010400
 8005558:	40014000 	.word	0x40014000
 800555c:	40001800 	.word	0x40001800

08005560 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b02      	cmp	r3, #2
 8005574:	d122      	bne.n	80055bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b02      	cmp	r3, #2
 8005582:	d11b      	bne.n	80055bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f06f 0202 	mvn.w	r2, #2
 800558c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	f003 0303 	and.w	r3, r3, #3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f8ee 	bl	8005784 <HAL_TIM_IC_CaptureCallback>
 80055a8:	e005      	b.n	80055b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f8e0 	bl	8005770 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f8f1 	bl	8005798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f003 0304 	and.w	r3, r3, #4
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	d122      	bne.n	8005610 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d11b      	bne.n	8005610 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f06f 0204 	mvn.w	r2, #4
 80055e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2202      	movs	r2, #2
 80055e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f8c4 	bl	8005784 <HAL_TIM_IC_CaptureCallback>
 80055fc:	e005      	b.n	800560a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f8b6 	bl	8005770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f8c7 	bl	8005798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f003 0308 	and.w	r3, r3, #8
 800561a:	2b08      	cmp	r3, #8
 800561c:	d122      	bne.n	8005664 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f003 0308 	and.w	r3, r3, #8
 8005628:	2b08      	cmp	r3, #8
 800562a:	d11b      	bne.n	8005664 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f06f 0208 	mvn.w	r2, #8
 8005634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2204      	movs	r2, #4
 800563a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	f003 0303 	and.w	r3, r3, #3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f89a 	bl	8005784 <HAL_TIM_IC_CaptureCallback>
 8005650:	e005      	b.n	800565e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f88c 	bl	8005770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f89d 	bl	8005798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f003 0310 	and.w	r3, r3, #16
 800566e:	2b10      	cmp	r3, #16
 8005670:	d122      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f003 0310 	and.w	r3, r3, #16
 800567c:	2b10      	cmp	r3, #16
 800567e:	d11b      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f06f 0210 	mvn.w	r2, #16
 8005688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2208      	movs	r2, #8
 800568e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f870 	bl	8005784 <HAL_TIM_IC_CaptureCallback>
 80056a4:	e005      	b.n	80056b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f862 	bl	8005770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f873 	bl	8005798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d10e      	bne.n	80056e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d107      	bne.n	80056e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f06f 0201 	mvn.w	r2, #1
 80056dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7fb ffe8 	bl	80016b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ee:	2b80      	cmp	r3, #128	; 0x80
 80056f0:	d10e      	bne.n	8005710 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056fc:	2b80      	cmp	r3, #128	; 0x80
 80056fe:	d107      	bne.n	8005710 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f902 	bl	8005914 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571a:	2b40      	cmp	r3, #64	; 0x40
 800571c:	d10e      	bne.n	800573c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005728:	2b40      	cmp	r3, #64	; 0x40
 800572a:	d107      	bne.n	800573c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f838 	bl	80057ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f003 0320 	and.w	r3, r3, #32
 8005746:	2b20      	cmp	r3, #32
 8005748:	d10e      	bne.n	8005768 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f003 0320 	and.w	r3, r3, #32
 8005754:	2b20      	cmp	r3, #32
 8005756:	d107      	bne.n	8005768 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f06f 0220 	mvn.w	r2, #32
 8005760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f8cc 	bl	8005900 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005768:	bf00      	nop
 800576a:	3708      	adds	r7, #8
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a40      	ldr	r2, [pc, #256]	; (80058d4 <TIM_Base_SetConfig+0x114>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d013      	beq.n	8005800 <TIM_Base_SetConfig+0x40>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057de:	d00f      	beq.n	8005800 <TIM_Base_SetConfig+0x40>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a3d      	ldr	r2, [pc, #244]	; (80058d8 <TIM_Base_SetConfig+0x118>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d00b      	beq.n	8005800 <TIM_Base_SetConfig+0x40>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a3c      	ldr	r2, [pc, #240]	; (80058dc <TIM_Base_SetConfig+0x11c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d007      	beq.n	8005800 <TIM_Base_SetConfig+0x40>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a3b      	ldr	r2, [pc, #236]	; (80058e0 <TIM_Base_SetConfig+0x120>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d003      	beq.n	8005800 <TIM_Base_SetConfig+0x40>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a3a      	ldr	r2, [pc, #232]	; (80058e4 <TIM_Base_SetConfig+0x124>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d108      	bne.n	8005812 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4313      	orrs	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a2f      	ldr	r2, [pc, #188]	; (80058d4 <TIM_Base_SetConfig+0x114>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d02b      	beq.n	8005872 <TIM_Base_SetConfig+0xb2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005820:	d027      	beq.n	8005872 <TIM_Base_SetConfig+0xb2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a2c      	ldr	r2, [pc, #176]	; (80058d8 <TIM_Base_SetConfig+0x118>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d023      	beq.n	8005872 <TIM_Base_SetConfig+0xb2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a2b      	ldr	r2, [pc, #172]	; (80058dc <TIM_Base_SetConfig+0x11c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d01f      	beq.n	8005872 <TIM_Base_SetConfig+0xb2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a2a      	ldr	r2, [pc, #168]	; (80058e0 <TIM_Base_SetConfig+0x120>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d01b      	beq.n	8005872 <TIM_Base_SetConfig+0xb2>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a29      	ldr	r2, [pc, #164]	; (80058e4 <TIM_Base_SetConfig+0x124>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d017      	beq.n	8005872 <TIM_Base_SetConfig+0xb2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a28      	ldr	r2, [pc, #160]	; (80058e8 <TIM_Base_SetConfig+0x128>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d013      	beq.n	8005872 <TIM_Base_SetConfig+0xb2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a27      	ldr	r2, [pc, #156]	; (80058ec <TIM_Base_SetConfig+0x12c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d00f      	beq.n	8005872 <TIM_Base_SetConfig+0xb2>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a26      	ldr	r2, [pc, #152]	; (80058f0 <TIM_Base_SetConfig+0x130>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d00b      	beq.n	8005872 <TIM_Base_SetConfig+0xb2>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a25      	ldr	r2, [pc, #148]	; (80058f4 <TIM_Base_SetConfig+0x134>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d007      	beq.n	8005872 <TIM_Base_SetConfig+0xb2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a24      	ldr	r2, [pc, #144]	; (80058f8 <TIM_Base_SetConfig+0x138>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d003      	beq.n	8005872 <TIM_Base_SetConfig+0xb2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a23      	ldr	r2, [pc, #140]	; (80058fc <TIM_Base_SetConfig+0x13c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d108      	bne.n	8005884 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	4313      	orrs	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	4313      	orrs	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a0a      	ldr	r2, [pc, #40]	; (80058d4 <TIM_Base_SetConfig+0x114>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d003      	beq.n	80058b8 <TIM_Base_SetConfig+0xf8>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a0c      	ldr	r2, [pc, #48]	; (80058e4 <TIM_Base_SetConfig+0x124>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d103      	bne.n	80058c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	691a      	ldr	r2, [r3, #16]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	615a      	str	r2, [r3, #20]
}
 80058c6:	bf00      	nop
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	40010000 	.word	0x40010000
 80058d8:	40000400 	.word	0x40000400
 80058dc:	40000800 	.word	0x40000800
 80058e0:	40000c00 	.word	0x40000c00
 80058e4:	40010400 	.word	0x40010400
 80058e8:	40014000 	.word	0x40014000
 80058ec:	40014400 	.word	0x40014400
 80058f0:	40014800 	.word	0x40014800
 80058f4:	40001800 	.word	0x40001800
 80058f8:	40001c00 	.word	0x40001c00
 80058fc:	40002000 	.word	0x40002000

08005900 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e03f      	b.n	80059ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d106      	bne.n	8005954 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7fc f8dc 	bl	8001b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2224      	movs	r2, #36	; 0x24
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68da      	ldr	r2, [r3, #12]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800596a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f9a7 	bl	8005cc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	691a      	ldr	r2, [r3, #16]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005980:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	695a      	ldr	r2, [r3, #20]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005990:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2220      	movs	r2, #32
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2220      	movs	r2, #32
 80059b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3708      	adds	r7, #8
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b08a      	sub	sp, #40	; 0x28
 80059c6:	af02      	add	r7, sp, #8
 80059c8:	60f8      	str	r0, [r7, #12]
 80059ca:	60b9      	str	r1, [r7, #8]
 80059cc:	603b      	str	r3, [r7, #0]
 80059ce:	4613      	mov	r3, r2
 80059d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059d2:	2300      	movs	r3, #0
 80059d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b20      	cmp	r3, #32
 80059e0:	d17c      	bne.n	8005adc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <HAL_UART_Transmit+0x2c>
 80059e8:	88fb      	ldrh	r3, [r7, #6]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e075      	b.n	8005ade <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_UART_Transmit+0x3e>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e06e      	b.n	8005ade <HAL_UART_Transmit+0x11c>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2221      	movs	r2, #33	; 0x21
 8005a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a16:	f7fc f9e7 	bl	8001de8 <HAL_GetTick>
 8005a1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	88fa      	ldrh	r2, [r7, #6]
 8005a20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	88fa      	ldrh	r2, [r7, #6]
 8005a26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a30:	d108      	bne.n	8005a44 <HAL_UART_Transmit+0x82>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d104      	bne.n	8005a44 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	61bb      	str	r3, [r7, #24]
 8005a42:	e003      	b.n	8005a4c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005a54:	e02a      	b.n	8005aac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	2180      	movs	r1, #128	; 0x80
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 f8e2 	bl	8005c2a <UART_WaitOnFlagUntilTimeout>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e036      	b.n	8005ade <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10b      	bne.n	8005a8e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	881b      	ldrh	r3, [r3, #0]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	3302      	adds	r3, #2
 8005a8a:	61bb      	str	r3, [r7, #24]
 8005a8c:	e007      	b.n	8005a9e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	781a      	ldrb	r2, [r3, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1cf      	bne.n	8005a56 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2200      	movs	r2, #0
 8005abe:	2140      	movs	r1, #64	; 0x40
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 f8b2 	bl	8005c2a <UART_WaitOnFlagUntilTimeout>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e006      	b.n	8005ade <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	e000      	b.n	8005ade <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005adc:	2302      	movs	r3, #2
  }
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3720      	adds	r7, #32
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b08a      	sub	sp, #40	; 0x28
 8005aea:	af02      	add	r7, sp, #8
 8005aec:	60f8      	str	r0, [r7, #12]
 8005aee:	60b9      	str	r1, [r7, #8]
 8005af0:	603b      	str	r3, [r7, #0]
 8005af2:	4613      	mov	r3, r2
 8005af4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005af6:	2300      	movs	r3, #0
 8005af8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b20      	cmp	r3, #32
 8005b04:	f040 808c 	bne.w	8005c20 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <HAL_UART_Receive+0x2e>
 8005b0e:	88fb      	ldrh	r3, [r7, #6]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e084      	b.n	8005c22 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d101      	bne.n	8005b26 <HAL_UART_Receive+0x40>
 8005b22:	2302      	movs	r3, #2
 8005b24:	e07d      	b.n	8005c22 <HAL_UART_Receive+0x13c>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2222      	movs	r2, #34	; 0x22
 8005b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b42:	f7fc f951 	bl	8001de8 <HAL_GetTick>
 8005b46:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	88fa      	ldrh	r2, [r7, #6]
 8005b4c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	88fa      	ldrh	r2, [r7, #6]
 8005b52:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b5c:	d108      	bne.n	8005b70 <HAL_UART_Receive+0x8a>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d104      	bne.n	8005b70 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005b66:	2300      	movs	r3, #0
 8005b68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	61bb      	str	r3, [r7, #24]
 8005b6e:	e003      	b.n	8005b78 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b74:	2300      	movs	r3, #0
 8005b76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005b80:	e043      	b.n	8005c0a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	2120      	movs	r1, #32
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 f84c 	bl	8005c2a <UART_WaitOnFlagUntilTimeout>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e042      	b.n	8005c22 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10c      	bne.n	8005bbc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	3302      	adds	r3, #2
 8005bb8:	61bb      	str	r3, [r7, #24]
 8005bba:	e01f      	b.n	8005bfc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bc4:	d007      	beq.n	8005bd6 <HAL_UART_Receive+0xf0>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10a      	bne.n	8005be4 <HAL_UART_Receive+0xfe>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d106      	bne.n	8005be4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	701a      	strb	r2, [r3, #0]
 8005be2:	e008      	b.n	8005bf6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	3b01      	subs	r3, #1
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1b6      	bne.n	8005b82 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	e000      	b.n	8005c22 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005c20:	2302      	movs	r3, #2
  }
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3720      	adds	r7, #32
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b084      	sub	sp, #16
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	60f8      	str	r0, [r7, #12]
 8005c32:	60b9      	str	r1, [r7, #8]
 8005c34:	603b      	str	r3, [r7, #0]
 8005c36:	4613      	mov	r3, r2
 8005c38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c3a:	e02c      	b.n	8005c96 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c42:	d028      	beq.n	8005c96 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d007      	beq.n	8005c5a <UART_WaitOnFlagUntilTimeout+0x30>
 8005c4a:	f7fc f8cd 	bl	8001de8 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d21d      	bcs.n	8005c96 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68da      	ldr	r2, [r3, #12]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c68:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	695a      	ldr	r2, [r3, #20]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 0201 	bic.w	r2, r2, #1
 8005c78:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e00f      	b.n	8005cb6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	bf0c      	ite	eq
 8005ca6:	2301      	moveq	r3, #1
 8005ca8:	2300      	movne	r3, #0
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	461a      	mov	r2, r3
 8005cae:	79fb      	ldrb	r3, [r7, #7]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d0c3      	beq.n	8005c3c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
	...

08005cc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc4:	b09f      	sub	sp, #124	; 0x7c
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd6:	68d9      	ldr	r1, [r3, #12]
 8005cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	ea40 0301 	orr.w	r3, r0, r1
 8005ce0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ce4:	689a      	ldr	r2, [r3, #8]
 8005ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	431a      	orrs	r2, r3
 8005cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d04:	f021 010c 	bic.w	r1, r1, #12
 8005d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d0e:	430b      	orrs	r3, r1
 8005d10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d1e:	6999      	ldr	r1, [r3, #24]
 8005d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	ea40 0301 	orr.w	r3, r0, r1
 8005d28:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	4bc5      	ldr	r3, [pc, #788]	; (8006044 <UART_SetConfig+0x384>)
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d004      	beq.n	8005d3e <UART_SetConfig+0x7e>
 8005d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	4bc3      	ldr	r3, [pc, #780]	; (8006048 <UART_SetConfig+0x388>)
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d103      	bne.n	8005d46 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d3e:	f7fd fde7 	bl	8003910 <HAL_RCC_GetPCLK2Freq>
 8005d42:	6778      	str	r0, [r7, #116]	; 0x74
 8005d44:	e002      	b.n	8005d4c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d46:	f7fd fdcf 	bl	80038e8 <HAL_RCC_GetPCLK1Freq>
 8005d4a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d54:	f040 80b6 	bne.w	8005ec4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d5a:	461c      	mov	r4, r3
 8005d5c:	f04f 0500 	mov.w	r5, #0
 8005d60:	4622      	mov	r2, r4
 8005d62:	462b      	mov	r3, r5
 8005d64:	1891      	adds	r1, r2, r2
 8005d66:	6439      	str	r1, [r7, #64]	; 0x40
 8005d68:	415b      	adcs	r3, r3
 8005d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d70:	1912      	adds	r2, r2, r4
 8005d72:	eb45 0303 	adc.w	r3, r5, r3
 8005d76:	f04f 0000 	mov.w	r0, #0
 8005d7a:	f04f 0100 	mov.w	r1, #0
 8005d7e:	00d9      	lsls	r1, r3, #3
 8005d80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d84:	00d0      	lsls	r0, r2, #3
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	1911      	adds	r1, r2, r4
 8005d8c:	6639      	str	r1, [r7, #96]	; 0x60
 8005d8e:	416b      	adcs	r3, r5
 8005d90:	667b      	str	r3, [r7, #100]	; 0x64
 8005d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	461a      	mov	r2, r3
 8005d98:	f04f 0300 	mov.w	r3, #0
 8005d9c:	1891      	adds	r1, r2, r2
 8005d9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005da0:	415b      	adcs	r3, r3
 8005da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005da4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005da8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005dac:	f7fa fa38 	bl	8000220 <__aeabi_uldivmod>
 8005db0:	4602      	mov	r2, r0
 8005db2:	460b      	mov	r3, r1
 8005db4:	4ba5      	ldr	r3, [pc, #660]	; (800604c <UART_SetConfig+0x38c>)
 8005db6:	fba3 2302 	umull	r2, r3, r3, r2
 8005dba:	095b      	lsrs	r3, r3, #5
 8005dbc:	011e      	lsls	r6, r3, #4
 8005dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dc0:	461c      	mov	r4, r3
 8005dc2:	f04f 0500 	mov.w	r5, #0
 8005dc6:	4622      	mov	r2, r4
 8005dc8:	462b      	mov	r3, r5
 8005dca:	1891      	adds	r1, r2, r2
 8005dcc:	6339      	str	r1, [r7, #48]	; 0x30
 8005dce:	415b      	adcs	r3, r3
 8005dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8005dd2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005dd6:	1912      	adds	r2, r2, r4
 8005dd8:	eb45 0303 	adc.w	r3, r5, r3
 8005ddc:	f04f 0000 	mov.w	r0, #0
 8005de0:	f04f 0100 	mov.w	r1, #0
 8005de4:	00d9      	lsls	r1, r3, #3
 8005de6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005dea:	00d0      	lsls	r0, r2, #3
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	1911      	adds	r1, r2, r4
 8005df2:	65b9      	str	r1, [r7, #88]	; 0x58
 8005df4:	416b      	adcs	r3, r5
 8005df6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	f04f 0300 	mov.w	r3, #0
 8005e02:	1891      	adds	r1, r2, r2
 8005e04:	62b9      	str	r1, [r7, #40]	; 0x28
 8005e06:	415b      	adcs	r3, r3
 8005e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e0e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005e12:	f7fa fa05 	bl	8000220 <__aeabi_uldivmod>
 8005e16:	4602      	mov	r2, r0
 8005e18:	460b      	mov	r3, r1
 8005e1a:	4b8c      	ldr	r3, [pc, #560]	; (800604c <UART_SetConfig+0x38c>)
 8005e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e20:	095b      	lsrs	r3, r3, #5
 8005e22:	2164      	movs	r1, #100	; 0x64
 8005e24:	fb01 f303 	mul.w	r3, r1, r3
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	3332      	adds	r3, #50	; 0x32
 8005e2e:	4a87      	ldr	r2, [pc, #540]	; (800604c <UART_SetConfig+0x38c>)
 8005e30:	fba2 2303 	umull	r2, r3, r2, r3
 8005e34:	095b      	lsrs	r3, r3, #5
 8005e36:	005b      	lsls	r3, r3, #1
 8005e38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e3c:	441e      	add	r6, r3
 8005e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e40:	4618      	mov	r0, r3
 8005e42:	f04f 0100 	mov.w	r1, #0
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	1894      	adds	r4, r2, r2
 8005e4c:	623c      	str	r4, [r7, #32]
 8005e4e:	415b      	adcs	r3, r3
 8005e50:	627b      	str	r3, [r7, #36]	; 0x24
 8005e52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e56:	1812      	adds	r2, r2, r0
 8005e58:	eb41 0303 	adc.w	r3, r1, r3
 8005e5c:	f04f 0400 	mov.w	r4, #0
 8005e60:	f04f 0500 	mov.w	r5, #0
 8005e64:	00dd      	lsls	r5, r3, #3
 8005e66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e6a:	00d4      	lsls	r4, r2, #3
 8005e6c:	4622      	mov	r2, r4
 8005e6e:	462b      	mov	r3, r5
 8005e70:	1814      	adds	r4, r2, r0
 8005e72:	653c      	str	r4, [r7, #80]	; 0x50
 8005e74:	414b      	adcs	r3, r1
 8005e76:	657b      	str	r3, [r7, #84]	; 0x54
 8005e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	f04f 0300 	mov.w	r3, #0
 8005e82:	1891      	adds	r1, r2, r2
 8005e84:	61b9      	str	r1, [r7, #24]
 8005e86:	415b      	adcs	r3, r3
 8005e88:	61fb      	str	r3, [r7, #28]
 8005e8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e8e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005e92:	f7fa f9c5 	bl	8000220 <__aeabi_uldivmod>
 8005e96:	4602      	mov	r2, r0
 8005e98:	460b      	mov	r3, r1
 8005e9a:	4b6c      	ldr	r3, [pc, #432]	; (800604c <UART_SetConfig+0x38c>)
 8005e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8005ea0:	095b      	lsrs	r3, r3, #5
 8005ea2:	2164      	movs	r1, #100	; 0x64
 8005ea4:	fb01 f303 	mul.w	r3, r1, r3
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	00db      	lsls	r3, r3, #3
 8005eac:	3332      	adds	r3, #50	; 0x32
 8005eae:	4a67      	ldr	r2, [pc, #412]	; (800604c <UART_SetConfig+0x38c>)
 8005eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb4:	095b      	lsrs	r3, r3, #5
 8005eb6:	f003 0207 	and.w	r2, r3, #7
 8005eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4432      	add	r2, r6
 8005ec0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ec2:	e0b9      	b.n	8006038 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ec6:	461c      	mov	r4, r3
 8005ec8:	f04f 0500 	mov.w	r5, #0
 8005ecc:	4622      	mov	r2, r4
 8005ece:	462b      	mov	r3, r5
 8005ed0:	1891      	adds	r1, r2, r2
 8005ed2:	6139      	str	r1, [r7, #16]
 8005ed4:	415b      	adcs	r3, r3
 8005ed6:	617b      	str	r3, [r7, #20]
 8005ed8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005edc:	1912      	adds	r2, r2, r4
 8005ede:	eb45 0303 	adc.w	r3, r5, r3
 8005ee2:	f04f 0000 	mov.w	r0, #0
 8005ee6:	f04f 0100 	mov.w	r1, #0
 8005eea:	00d9      	lsls	r1, r3, #3
 8005eec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ef0:	00d0      	lsls	r0, r2, #3
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	eb12 0804 	adds.w	r8, r2, r4
 8005efa:	eb43 0905 	adc.w	r9, r3, r5
 8005efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f04f 0100 	mov.w	r1, #0
 8005f08:	f04f 0200 	mov.w	r2, #0
 8005f0c:	f04f 0300 	mov.w	r3, #0
 8005f10:	008b      	lsls	r3, r1, #2
 8005f12:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f16:	0082      	lsls	r2, r0, #2
 8005f18:	4640      	mov	r0, r8
 8005f1a:	4649      	mov	r1, r9
 8005f1c:	f7fa f980 	bl	8000220 <__aeabi_uldivmod>
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	4b49      	ldr	r3, [pc, #292]	; (800604c <UART_SetConfig+0x38c>)
 8005f26:	fba3 2302 	umull	r2, r3, r3, r2
 8005f2a:	095b      	lsrs	r3, r3, #5
 8005f2c:	011e      	lsls	r6, r3, #4
 8005f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f30:	4618      	mov	r0, r3
 8005f32:	f04f 0100 	mov.w	r1, #0
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	1894      	adds	r4, r2, r2
 8005f3c:	60bc      	str	r4, [r7, #8]
 8005f3e:	415b      	adcs	r3, r3
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f46:	1812      	adds	r2, r2, r0
 8005f48:	eb41 0303 	adc.w	r3, r1, r3
 8005f4c:	f04f 0400 	mov.w	r4, #0
 8005f50:	f04f 0500 	mov.w	r5, #0
 8005f54:	00dd      	lsls	r5, r3, #3
 8005f56:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f5a:	00d4      	lsls	r4, r2, #3
 8005f5c:	4622      	mov	r2, r4
 8005f5e:	462b      	mov	r3, r5
 8005f60:	1814      	adds	r4, r2, r0
 8005f62:	64bc      	str	r4, [r7, #72]	; 0x48
 8005f64:	414b      	adcs	r3, r1
 8005f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f04f 0100 	mov.w	r1, #0
 8005f72:	f04f 0200 	mov.w	r2, #0
 8005f76:	f04f 0300 	mov.w	r3, #0
 8005f7a:	008b      	lsls	r3, r1, #2
 8005f7c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f80:	0082      	lsls	r2, r0, #2
 8005f82:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005f86:	f7fa f94b 	bl	8000220 <__aeabi_uldivmod>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4b2f      	ldr	r3, [pc, #188]	; (800604c <UART_SetConfig+0x38c>)
 8005f90:	fba3 1302 	umull	r1, r3, r3, r2
 8005f94:	095b      	lsrs	r3, r3, #5
 8005f96:	2164      	movs	r1, #100	; 0x64
 8005f98:	fb01 f303 	mul.w	r3, r1, r3
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	011b      	lsls	r3, r3, #4
 8005fa0:	3332      	adds	r3, #50	; 0x32
 8005fa2:	4a2a      	ldr	r2, [pc, #168]	; (800604c <UART_SetConfig+0x38c>)
 8005fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa8:	095b      	lsrs	r3, r3, #5
 8005faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fae:	441e      	add	r6, r3
 8005fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f04f 0100 	mov.w	r1, #0
 8005fb8:	4602      	mov	r2, r0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	1894      	adds	r4, r2, r2
 8005fbe:	603c      	str	r4, [r7, #0]
 8005fc0:	415b      	adcs	r3, r3
 8005fc2:	607b      	str	r3, [r7, #4]
 8005fc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fc8:	1812      	adds	r2, r2, r0
 8005fca:	eb41 0303 	adc.w	r3, r1, r3
 8005fce:	f04f 0400 	mov.w	r4, #0
 8005fd2:	f04f 0500 	mov.w	r5, #0
 8005fd6:	00dd      	lsls	r5, r3, #3
 8005fd8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005fdc:	00d4      	lsls	r4, r2, #3
 8005fde:	4622      	mov	r2, r4
 8005fe0:	462b      	mov	r3, r5
 8005fe2:	eb12 0a00 	adds.w	sl, r2, r0
 8005fe6:	eb43 0b01 	adc.w	fp, r3, r1
 8005fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f04f 0100 	mov.w	r1, #0
 8005ff4:	f04f 0200 	mov.w	r2, #0
 8005ff8:	f04f 0300 	mov.w	r3, #0
 8005ffc:	008b      	lsls	r3, r1, #2
 8005ffe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006002:	0082      	lsls	r2, r0, #2
 8006004:	4650      	mov	r0, sl
 8006006:	4659      	mov	r1, fp
 8006008:	f7fa f90a 	bl	8000220 <__aeabi_uldivmod>
 800600c:	4602      	mov	r2, r0
 800600e:	460b      	mov	r3, r1
 8006010:	4b0e      	ldr	r3, [pc, #56]	; (800604c <UART_SetConfig+0x38c>)
 8006012:	fba3 1302 	umull	r1, r3, r3, r2
 8006016:	095b      	lsrs	r3, r3, #5
 8006018:	2164      	movs	r1, #100	; 0x64
 800601a:	fb01 f303 	mul.w	r3, r1, r3
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	011b      	lsls	r3, r3, #4
 8006022:	3332      	adds	r3, #50	; 0x32
 8006024:	4a09      	ldr	r2, [pc, #36]	; (800604c <UART_SetConfig+0x38c>)
 8006026:	fba2 2303 	umull	r2, r3, r2, r3
 800602a:	095b      	lsrs	r3, r3, #5
 800602c:	f003 020f 	and.w	r2, r3, #15
 8006030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4432      	add	r2, r6
 8006036:	609a      	str	r2, [r3, #8]
}
 8006038:	bf00      	nop
 800603a:	377c      	adds	r7, #124	; 0x7c
 800603c:	46bd      	mov	sp, r7
 800603e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006042:	bf00      	nop
 8006044:	40011000 	.word	0x40011000
 8006048:	40011400 	.word	0x40011400
 800604c:	51eb851f 	.word	0x51eb851f

08006050 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006050:	b084      	sub	sp, #16
 8006052:	b580      	push	{r7, lr}
 8006054:	b084      	sub	sp, #16
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
 800605a:	f107 001c 	add.w	r0, r7, #28
 800605e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	2b01      	cmp	r3, #1
 8006066:	d122      	bne.n	80060ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800607c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006092:	2b01      	cmp	r3, #1
 8006094:	d105      	bne.n	80060a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f001 fac0 	bl	8007628 <USB_CoreReset>
 80060a8:	4603      	mov	r3, r0
 80060aa:	73fb      	strb	r3, [r7, #15]
 80060ac:	e01a      	b.n	80060e4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f001 fab4 	bl	8007628 <USB_CoreReset>
 80060c0:	4603      	mov	r3, r0
 80060c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80060c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d106      	bne.n	80060d8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	639a      	str	r2, [r3, #56]	; 0x38
 80060d6:	e005      	b.n	80060e4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80060e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d10b      	bne.n	8006102 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f043 0206 	orr.w	r2, r3, #6
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f043 0220 	orr.w	r2, r3, #32
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006102:	7bfb      	ldrb	r3, [r7, #15]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800610e:	b004      	add	sp, #16
 8006110:	4770      	bx	lr
	...

08006114 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	4613      	mov	r3, r2
 8006120:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006122:	79fb      	ldrb	r3, [r7, #7]
 8006124:	2b02      	cmp	r3, #2
 8006126:	d165      	bne.n	80061f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	4a41      	ldr	r2, [pc, #260]	; (8006230 <USB_SetTurnaroundTime+0x11c>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d906      	bls.n	800613e <USB_SetTurnaroundTime+0x2a>
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	4a40      	ldr	r2, [pc, #256]	; (8006234 <USB_SetTurnaroundTime+0x120>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d202      	bcs.n	800613e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006138:	230f      	movs	r3, #15
 800613a:	617b      	str	r3, [r7, #20]
 800613c:	e062      	b.n	8006204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	4a3c      	ldr	r2, [pc, #240]	; (8006234 <USB_SetTurnaroundTime+0x120>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d306      	bcc.n	8006154 <USB_SetTurnaroundTime+0x40>
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	4a3b      	ldr	r2, [pc, #236]	; (8006238 <USB_SetTurnaroundTime+0x124>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d202      	bcs.n	8006154 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800614e:	230e      	movs	r3, #14
 8006150:	617b      	str	r3, [r7, #20]
 8006152:	e057      	b.n	8006204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	4a38      	ldr	r2, [pc, #224]	; (8006238 <USB_SetTurnaroundTime+0x124>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d306      	bcc.n	800616a <USB_SetTurnaroundTime+0x56>
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	4a37      	ldr	r2, [pc, #220]	; (800623c <USB_SetTurnaroundTime+0x128>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d202      	bcs.n	800616a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006164:	230d      	movs	r3, #13
 8006166:	617b      	str	r3, [r7, #20]
 8006168:	e04c      	b.n	8006204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	4a33      	ldr	r2, [pc, #204]	; (800623c <USB_SetTurnaroundTime+0x128>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d306      	bcc.n	8006180 <USB_SetTurnaroundTime+0x6c>
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	4a32      	ldr	r2, [pc, #200]	; (8006240 <USB_SetTurnaroundTime+0x12c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d802      	bhi.n	8006180 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800617a:	230c      	movs	r3, #12
 800617c:	617b      	str	r3, [r7, #20]
 800617e:	e041      	b.n	8006204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	4a2f      	ldr	r2, [pc, #188]	; (8006240 <USB_SetTurnaroundTime+0x12c>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d906      	bls.n	8006196 <USB_SetTurnaroundTime+0x82>
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	4a2e      	ldr	r2, [pc, #184]	; (8006244 <USB_SetTurnaroundTime+0x130>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d802      	bhi.n	8006196 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006190:	230b      	movs	r3, #11
 8006192:	617b      	str	r3, [r7, #20]
 8006194:	e036      	b.n	8006204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	4a2a      	ldr	r2, [pc, #168]	; (8006244 <USB_SetTurnaroundTime+0x130>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d906      	bls.n	80061ac <USB_SetTurnaroundTime+0x98>
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	4a29      	ldr	r2, [pc, #164]	; (8006248 <USB_SetTurnaroundTime+0x134>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d802      	bhi.n	80061ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80061a6:	230a      	movs	r3, #10
 80061a8:	617b      	str	r3, [r7, #20]
 80061aa:	e02b      	b.n	8006204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	4a26      	ldr	r2, [pc, #152]	; (8006248 <USB_SetTurnaroundTime+0x134>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d906      	bls.n	80061c2 <USB_SetTurnaroundTime+0xae>
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	4a25      	ldr	r2, [pc, #148]	; (800624c <USB_SetTurnaroundTime+0x138>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d202      	bcs.n	80061c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80061bc:	2309      	movs	r3, #9
 80061be:	617b      	str	r3, [r7, #20]
 80061c0:	e020      	b.n	8006204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	4a21      	ldr	r2, [pc, #132]	; (800624c <USB_SetTurnaroundTime+0x138>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d306      	bcc.n	80061d8 <USB_SetTurnaroundTime+0xc4>
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	4a20      	ldr	r2, [pc, #128]	; (8006250 <USB_SetTurnaroundTime+0x13c>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d802      	bhi.n	80061d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80061d2:	2308      	movs	r3, #8
 80061d4:	617b      	str	r3, [r7, #20]
 80061d6:	e015      	b.n	8006204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	4a1d      	ldr	r2, [pc, #116]	; (8006250 <USB_SetTurnaroundTime+0x13c>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d906      	bls.n	80061ee <USB_SetTurnaroundTime+0xda>
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	4a1c      	ldr	r2, [pc, #112]	; (8006254 <USB_SetTurnaroundTime+0x140>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d202      	bcs.n	80061ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80061e8:	2307      	movs	r3, #7
 80061ea:	617b      	str	r3, [r7, #20]
 80061ec:	e00a      	b.n	8006204 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80061ee:	2306      	movs	r3, #6
 80061f0:	617b      	str	r3, [r7, #20]
 80061f2:	e007      	b.n	8006204 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80061f4:	79fb      	ldrb	r3, [r7, #7]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d102      	bne.n	8006200 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80061fa:	2309      	movs	r3, #9
 80061fc:	617b      	str	r3, [r7, #20]
 80061fe:	e001      	b.n	8006204 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006200:	2309      	movs	r3, #9
 8006202:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	68da      	ldr	r2, [r3, #12]
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	029b      	lsls	r3, r3, #10
 8006218:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800621c:	431a      	orrs	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	371c      	adds	r7, #28
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	00d8acbf 	.word	0x00d8acbf
 8006234:	00e4e1c0 	.word	0x00e4e1c0
 8006238:	00f42400 	.word	0x00f42400
 800623c:	01067380 	.word	0x01067380
 8006240:	011a499f 	.word	0x011a499f
 8006244:	01312cff 	.word	0x01312cff
 8006248:	014ca43f 	.word	0x014ca43f
 800624c:	016e3600 	.word	0x016e3600
 8006250:	01a6ab1f 	.word	0x01a6ab1f
 8006254:	01e84800 	.word	0x01e84800

08006258 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f043 0201 	orr.w	r2, r3, #1
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800627a:	b480      	push	{r7}
 800627c:	b083      	sub	sp, #12
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f023 0201 	bic.w	r2, r3, #1
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	460b      	mov	r3, r1
 80062a6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80062b4:	78fb      	ldrb	r3, [r7, #3]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d106      	bne.n	80062c8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	60da      	str	r2, [r3, #12]
 80062c6:	e00b      	b.n	80062e0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80062c8:	78fb      	ldrb	r3, [r7, #3]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d106      	bne.n	80062dc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	60da      	str	r2, [r3, #12]
 80062da:	e001      	b.n	80062e0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e003      	b.n	80062e8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80062e0:	2032      	movs	r0, #50	; 0x32
 80062e2:	f7fb fd8d 	bl	8001e00 <HAL_Delay>

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3708      	adds	r7, #8
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062f0:	b084      	sub	sp, #16
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b086      	sub	sp, #24
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80062fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006302:	2300      	movs	r3, #0
 8006304:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800630a:	2300      	movs	r3, #0
 800630c:	613b      	str	r3, [r7, #16]
 800630e:	e009      	b.n	8006324 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	3340      	adds	r3, #64	; 0x40
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4413      	add	r3, r2
 800631a:	2200      	movs	r2, #0
 800631c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	3301      	adds	r3, #1
 8006322:	613b      	str	r3, [r7, #16]
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	2b0e      	cmp	r3, #14
 8006328:	d9f2      	bls.n	8006310 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800632a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800632c:	2b00      	cmp	r3, #0
 800632e:	d11c      	bne.n	800636a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800633e:	f043 0302 	orr.w	r3, r3, #2
 8006342:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006348:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	601a      	str	r2, [r3, #0]
 8006368:	e005      	b.n	8006376 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800637c:	461a      	mov	r2, r3
 800637e:	2300      	movs	r3, #0
 8006380:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006388:	4619      	mov	r1, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006390:	461a      	mov	r2, r3
 8006392:	680b      	ldr	r3, [r1, #0]
 8006394:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006398:	2b01      	cmp	r3, #1
 800639a:	d10c      	bne.n	80063b6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800639c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d104      	bne.n	80063ac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80063a2:	2100      	movs	r1, #0
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f949 	bl	800663c <USB_SetDevSpeed>
 80063aa:	e008      	b.n	80063be <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80063ac:	2101      	movs	r1, #1
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f944 	bl	800663c <USB_SetDevSpeed>
 80063b4:	e003      	b.n	80063be <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80063b6:	2103      	movs	r1, #3
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 f93f 	bl	800663c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80063be:	2110      	movs	r1, #16
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f8f3 	bl	80065ac <USB_FlushTxFifo>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f911 	bl	80065f8 <USB_FlushRxFifo>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e6:	461a      	mov	r2, r3
 80063e8:	2300      	movs	r3, #0
 80063ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f2:	461a      	mov	r2, r3
 80063f4:	2300      	movs	r3, #0
 80063f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063fe:	461a      	mov	r2, r3
 8006400:	2300      	movs	r3, #0
 8006402:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006404:	2300      	movs	r3, #0
 8006406:	613b      	str	r3, [r7, #16]
 8006408:	e043      	b.n	8006492 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800641c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006420:	d118      	bne.n	8006454 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10a      	bne.n	800643e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006434:	461a      	mov	r2, r3
 8006436:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800643a:	6013      	str	r3, [r2, #0]
 800643c:	e013      	b.n	8006466 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800644a:	461a      	mov	r2, r3
 800644c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006450:	6013      	str	r3, [r2, #0]
 8006452:	e008      	b.n	8006466 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4413      	add	r3, r2
 800645c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006460:	461a      	mov	r2, r3
 8006462:	2300      	movs	r3, #0
 8006464:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006472:	461a      	mov	r2, r3
 8006474:	2300      	movs	r3, #0
 8006476:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	4413      	add	r3, r2
 8006480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006484:	461a      	mov	r2, r3
 8006486:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800648a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	3301      	adds	r3, #1
 8006490:	613b      	str	r3, [r7, #16]
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	429a      	cmp	r2, r3
 8006498:	d3b7      	bcc.n	800640a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800649a:	2300      	movs	r3, #0
 800649c:	613b      	str	r3, [r7, #16]
 800649e:	e043      	b.n	8006528 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064b6:	d118      	bne.n	80064ea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10a      	bne.n	80064d4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ca:	461a      	mov	r2, r3
 80064cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064d0:	6013      	str	r3, [r2, #0]
 80064d2:	e013      	b.n	80064fc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e0:	461a      	mov	r2, r3
 80064e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80064e6:	6013      	str	r3, [r2, #0]
 80064e8:	e008      	b.n	80064fc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f6:	461a      	mov	r2, r3
 80064f8:	2300      	movs	r3, #0
 80064fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006508:	461a      	mov	r2, r3
 800650a:	2300      	movs	r3, #0
 800650c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	4413      	add	r3, r2
 8006516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651a:	461a      	mov	r2, r3
 800651c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006520:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	3301      	adds	r3, #1
 8006526:	613b      	str	r3, [r7, #16]
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	429a      	cmp	r2, r3
 800652e:	d3b7      	bcc.n	80064a0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800653e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006542:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006550:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006554:	2b00      	cmp	r3, #0
 8006556:	d105      	bne.n	8006564 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	f043 0210 	orr.w	r2, r3, #16
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	699a      	ldr	r2, [r3, #24]
 8006568:	4b0f      	ldr	r3, [pc, #60]	; (80065a8 <USB_DevInit+0x2b8>)
 800656a:	4313      	orrs	r3, r2
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006572:	2b00      	cmp	r3, #0
 8006574:	d005      	beq.n	8006582 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	f043 0208 	orr.w	r2, r3, #8
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006584:	2b01      	cmp	r3, #1
 8006586:	d107      	bne.n	8006598 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006590:	f043 0304 	orr.w	r3, r3, #4
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006598:	7dfb      	ldrb	r3, [r7, #23]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3718      	adds	r7, #24
 800659e:	46bd      	mov	sp, r7
 80065a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065a4:	b004      	add	sp, #16
 80065a6:	4770      	bx	lr
 80065a8:	803c3800 	.word	0x803c3800

080065ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80065b6:	2300      	movs	r3, #0
 80065b8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	019b      	lsls	r3, r3, #6
 80065be:	f043 0220 	orr.w	r2, r3, #32
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	3301      	adds	r3, #1
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4a09      	ldr	r2, [pc, #36]	; (80065f4 <USB_FlushTxFifo+0x48>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d901      	bls.n	80065d8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e006      	b.n	80065e6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	f003 0320 	and.w	r3, r3, #32
 80065e0:	2b20      	cmp	r3, #32
 80065e2:	d0f0      	beq.n	80065c6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	00030d40 	.word	0x00030d40

080065f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006600:	2300      	movs	r3, #0
 8006602:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2210      	movs	r2, #16
 8006608:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	3301      	adds	r3, #1
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	4a09      	ldr	r2, [pc, #36]	; (8006638 <USB_FlushRxFifo+0x40>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d901      	bls.n	800661c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e006      	b.n	800662a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	f003 0310 	and.w	r3, r3, #16
 8006624:	2b10      	cmp	r3, #16
 8006626:	d0f0      	beq.n	800660a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	00030d40 	.word	0x00030d40

0800663c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	460b      	mov	r3, r1
 8006646:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	68f9      	ldr	r1, [r7, #12]
 8006658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800665c:	4313      	orrs	r3, r2
 800665e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800666e:	b480      	push	{r7}
 8006670:	b087      	sub	sp, #28
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f003 0306 	and.w	r3, r3, #6
 8006686:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d102      	bne.n	8006694 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800668e:	2300      	movs	r3, #0
 8006690:	75fb      	strb	r3, [r7, #23]
 8006692:	e00a      	b.n	80066aa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b02      	cmp	r3, #2
 8006698:	d002      	beq.n	80066a0 <USB_GetDevSpeed+0x32>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2b06      	cmp	r3, #6
 800669e:	d102      	bne.n	80066a6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80066a0:	2302      	movs	r3, #2
 80066a2:	75fb      	strb	r3, [r7, #23]
 80066a4:	e001      	b.n	80066aa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80066a6:	230f      	movs	r3, #15
 80066a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80066aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	371c      	adds	r7, #28
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	785b      	ldrb	r3, [r3, #1]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d13a      	bne.n	800674a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066da:	69da      	ldr	r2, [r3, #28]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	f003 030f 	and.w	r3, r3, #15
 80066e4:	2101      	movs	r1, #1
 80066e6:	fa01 f303 	lsl.w	r3, r1, r3
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	68f9      	ldr	r1, [r7, #12]
 80066ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066f2:	4313      	orrs	r3, r2
 80066f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	015a      	lsls	r2, r3, #5
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	4413      	add	r3, r2
 80066fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d155      	bne.n	80067b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4413      	add	r3, r2
 8006714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	78db      	ldrb	r3, [r3, #3]
 8006726:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006728:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	059b      	lsls	r3, r3, #22
 800672e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006730:	4313      	orrs	r3, r2
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	0151      	lsls	r1, r2, #5
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	440a      	add	r2, r1
 800673a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800673e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006746:	6013      	str	r3, [r2, #0]
 8006748:	e036      	b.n	80067b8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006750:	69da      	ldr	r2, [r3, #28]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	f003 030f 	and.w	r3, r3, #15
 800675a:	2101      	movs	r1, #1
 800675c:	fa01 f303 	lsl.w	r3, r1, r3
 8006760:	041b      	lsls	r3, r3, #16
 8006762:	68f9      	ldr	r1, [r7, #12]
 8006764:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006768:	4313      	orrs	r3, r2
 800676a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d11a      	bne.n	80067b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	015a      	lsls	r2, r3, #5
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	4413      	add	r3, r2
 800678a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	78db      	ldrb	r3, [r3, #3]
 800679c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800679e:	430b      	orrs	r3, r1
 80067a0:	4313      	orrs	r3, r2
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	0151      	lsls	r1, r2, #5
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	440a      	add	r2, r1
 80067aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067b6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
	...

080067c8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	785b      	ldrb	r3, [r3, #1]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d161      	bne.n	80068a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067fa:	d11f      	bne.n	800683c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4413      	add	r3, r2
 8006804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	0151      	lsls	r1, r2, #5
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	440a      	add	r2, r1
 8006812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006816:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800681a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4413      	add	r3, r2
 8006824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	0151      	lsls	r1, r2, #5
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	440a      	add	r2, r1
 8006832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006836:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800683a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	f003 030f 	and.w	r3, r3, #15
 800684c:	2101      	movs	r1, #1
 800684e:	fa01 f303 	lsl.w	r3, r1, r3
 8006852:	b29b      	uxth	r3, r3
 8006854:	43db      	mvns	r3, r3
 8006856:	68f9      	ldr	r1, [r7, #12]
 8006858:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800685c:	4013      	ands	r3, r2
 800685e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006866:	69da      	ldr	r2, [r3, #28]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	f003 030f 	and.w	r3, r3, #15
 8006870:	2101      	movs	r1, #1
 8006872:	fa01 f303 	lsl.w	r3, r1, r3
 8006876:	b29b      	uxth	r3, r3
 8006878:	43db      	mvns	r3, r3
 800687a:	68f9      	ldr	r1, [r7, #12]
 800687c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006880:	4013      	ands	r3, r2
 8006882:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4413      	add	r3, r2
 800688c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	0159      	lsls	r1, r3, #5
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	440b      	add	r3, r1
 800689a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689e:	4619      	mov	r1, r3
 80068a0:	4b35      	ldr	r3, [pc, #212]	; (8006978 <USB_DeactivateEndpoint+0x1b0>)
 80068a2:	4013      	ands	r3, r2
 80068a4:	600b      	str	r3, [r1, #0]
 80068a6:	e060      	b.n	800696a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068be:	d11f      	bne.n	8006900 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	0151      	lsls	r1, r2, #5
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	440a      	add	r2, r1
 80068d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80068de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	0151      	lsls	r1, r2, #5
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	440a      	add	r2, r1
 80068f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006906:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	f003 030f 	and.w	r3, r3, #15
 8006910:	2101      	movs	r1, #1
 8006912:	fa01 f303 	lsl.w	r3, r1, r3
 8006916:	041b      	lsls	r3, r3, #16
 8006918:	43db      	mvns	r3, r3
 800691a:	68f9      	ldr	r1, [r7, #12]
 800691c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006920:	4013      	ands	r3, r2
 8006922:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692a:	69da      	ldr	r2, [r3, #28]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	f003 030f 	and.w	r3, r3, #15
 8006934:	2101      	movs	r1, #1
 8006936:	fa01 f303 	lsl.w	r3, r1, r3
 800693a:	041b      	lsls	r3, r3, #16
 800693c:	43db      	mvns	r3, r3
 800693e:	68f9      	ldr	r1, [r7, #12]
 8006940:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006944:	4013      	ands	r3, r2
 8006946:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	0159      	lsls	r1, r3, #5
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	440b      	add	r3, r1
 800695e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006962:	4619      	mov	r1, r3
 8006964:	4b05      	ldr	r3, [pc, #20]	; (800697c <USB_DeactivateEndpoint+0x1b4>)
 8006966:	4013      	ands	r3, r2
 8006968:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	ec337800 	.word	0xec337800
 800697c:	eff37800 	.word	0xeff37800

08006980 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b08a      	sub	sp, #40	; 0x28
 8006984:	af02      	add	r7, sp, #8
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	4613      	mov	r3, r2
 800698c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	785b      	ldrb	r3, [r3, #1]
 800699c:	2b01      	cmp	r3, #1
 800699e:	f040 815c 	bne.w	8006c5a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d132      	bne.n	8006a10 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	0151      	lsls	r1, r2, #5
 80069bc:	69fa      	ldr	r2, [r7, #28]
 80069be:	440a      	add	r2, r1
 80069c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	015a      	lsls	r2, r3, #5
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	4413      	add	r3, r2
 80069d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	0151      	lsls	r1, r2, #5
 80069e0:	69fa      	ldr	r2, [r7, #28]
 80069e2:	440a      	add	r2, r1
 80069e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	69ba      	ldr	r2, [r7, #24]
 80069fe:	0151      	lsls	r1, r2, #5
 8006a00:	69fa      	ldr	r2, [r7, #28]
 8006a02:	440a      	add	r2, r1
 8006a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a08:	0cdb      	lsrs	r3, r3, #19
 8006a0a:	04db      	lsls	r3, r3, #19
 8006a0c:	6113      	str	r3, [r2, #16]
 8006a0e:	e074      	b.n	8006afa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	69ba      	ldr	r2, [r7, #24]
 8006a20:	0151      	lsls	r1, r2, #5
 8006a22:	69fa      	ldr	r2, [r7, #28]
 8006a24:	440a      	add	r2, r1
 8006a26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a2a:	0cdb      	lsrs	r3, r3, #19
 8006a2c:	04db      	lsls	r3, r3, #19
 8006a2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	0151      	lsls	r1, r2, #5
 8006a42:	69fa      	ldr	r2, [r7, #28]
 8006a44:	440a      	add	r2, r1
 8006a46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a4a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a4e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	015a      	lsls	r2, r3, #5
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a60:	691a      	ldr	r2, [r3, #16]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	6959      	ldr	r1, [r3, #20]
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	440b      	add	r3, r1
 8006a6c:	1e59      	subs	r1, r3, #1
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a76:	04d9      	lsls	r1, r3, #19
 8006a78:	4b9d      	ldr	r3, [pc, #628]	; (8006cf0 <USB_EPStartXfer+0x370>)
 8006a7a:	400b      	ands	r3, r1
 8006a7c:	69b9      	ldr	r1, [r7, #24]
 8006a7e:	0148      	lsls	r0, r1, #5
 8006a80:	69f9      	ldr	r1, [r7, #28]
 8006a82:	4401      	add	r1, r0
 8006a84:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a98:	691a      	ldr	r2, [r3, #16]
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006aa2:	69b9      	ldr	r1, [r7, #24]
 8006aa4:	0148      	lsls	r0, r1, #5
 8006aa6:	69f9      	ldr	r1, [r7, #28]
 8006aa8:	4401      	add	r1, r0
 8006aaa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	78db      	ldrb	r3, [r3, #3]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d11f      	bne.n	8006afa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	015a      	lsls	r2, r3, #5
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	0151      	lsls	r1, r2, #5
 8006acc:	69fa      	ldr	r2, [r7, #28]
 8006ace:	440a      	add	r2, r1
 8006ad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ad4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006ad8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	69ba      	ldr	r2, [r7, #24]
 8006aea:	0151      	lsls	r1, r2, #5
 8006aec:	69fa      	ldr	r2, [r7, #28]
 8006aee:	440a      	add	r2, r1
 8006af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006af4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006af8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006afa:	79fb      	ldrb	r3, [r7, #7]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d14b      	bne.n	8006b98 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d009      	beq.n	8006b1c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b14:	461a      	mov	r2, r3
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	78db      	ldrb	r3, [r3, #3]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d128      	bne.n	8006b76 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d110      	bne.n	8006b56 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	015a      	lsls	r2, r3, #5
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	69ba      	ldr	r2, [r7, #24]
 8006b44:	0151      	lsls	r1, r2, #5
 8006b46:	69fa      	ldr	r2, [r7, #28]
 8006b48:	440a      	add	r2, r1
 8006b4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b52:	6013      	str	r3, [r2, #0]
 8006b54:	e00f      	b.n	8006b76 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	015a      	lsls	r2, r3, #5
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	69ba      	ldr	r2, [r7, #24]
 8006b66:	0151      	lsls	r1, r2, #5
 8006b68:	69fa      	ldr	r2, [r7, #28]
 8006b6a:	440a      	add	r2, r1
 8006b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b74:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	0151      	lsls	r1, r2, #5
 8006b88:	69fa      	ldr	r2, [r7, #28]
 8006b8a:	440a      	add	r2, r1
 8006b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b94:	6013      	str	r3, [r2, #0]
 8006b96:	e12f      	b.n	8006df8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	015a      	lsls	r2, r3, #5
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	0151      	lsls	r1, r2, #5
 8006baa:	69fa      	ldr	r2, [r7, #28]
 8006bac:	440a      	add	r2, r1
 8006bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006bb6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	78db      	ldrb	r3, [r3, #3]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d015      	beq.n	8006bec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 8117 	beq.w	8006df8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	f003 030f 	and.w	r3, r3, #15
 8006bda:	2101      	movs	r1, #1
 8006bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8006be0:	69f9      	ldr	r1, [r7, #28]
 8006be2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006be6:	4313      	orrs	r3, r2
 8006be8:	634b      	str	r3, [r1, #52]	; 0x34
 8006bea:	e105      	b.n	8006df8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d110      	bne.n	8006c1e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	0151      	lsls	r1, r2, #5
 8006c0e:	69fa      	ldr	r2, [r7, #28]
 8006c10:	440a      	add	r2, r1
 8006c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c1a:	6013      	str	r3, [r2, #0]
 8006c1c:	e00f      	b.n	8006c3e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	69ba      	ldr	r2, [r7, #24]
 8006c2e:	0151      	lsls	r1, r2, #5
 8006c30:	69fa      	ldr	r2, [r7, #28]
 8006c32:	440a      	add	r2, r1
 8006c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c3c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	68d9      	ldr	r1, [r3, #12]
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	781a      	ldrb	r2, [r3, #0]
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	b298      	uxth	r0, r3
 8006c4c:	79fb      	ldrb	r3, [r7, #7]
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	4603      	mov	r3, r0
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 fa2b 	bl	80070ae <USB_WritePacket>
 8006c58:	e0ce      	b.n	8006df8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	0151      	lsls	r1, r2, #5
 8006c6c:	69fa      	ldr	r2, [r7, #28]
 8006c6e:	440a      	add	r2, r1
 8006c70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c74:	0cdb      	lsrs	r3, r3, #19
 8006c76:	04db      	lsls	r3, r3, #19
 8006c78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	015a      	lsls	r2, r3, #5
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	0151      	lsls	r1, r2, #5
 8006c8c:	69fa      	ldr	r2, [r7, #28]
 8006c8e:	440a      	add	r2, r1
 8006c90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c9c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d126      	bne.n	8006cf4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	015a      	lsls	r2, r3, #5
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb2:	691a      	ldr	r2, [r3, #16]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cbc:	69b9      	ldr	r1, [r7, #24]
 8006cbe:	0148      	lsls	r0, r1, #5
 8006cc0:	69f9      	ldr	r1, [r7, #28]
 8006cc2:	4401      	add	r1, r0
 8006cc4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	015a      	lsls	r2, r3, #5
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	0151      	lsls	r1, r2, #5
 8006cde:	69fa      	ldr	r2, [r7, #28]
 8006ce0:	440a      	add	r2, r1
 8006ce2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ce6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cea:	6113      	str	r3, [r2, #16]
 8006cec:	e036      	b.n	8006d5c <USB_EPStartXfer+0x3dc>
 8006cee:	bf00      	nop
 8006cf0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	695a      	ldr	r2, [r3, #20]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	1e5a      	subs	r2, r3, #1
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d08:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d16:	691a      	ldr	r2, [r3, #16]
 8006d18:	8afb      	ldrh	r3, [r7, #22]
 8006d1a:	04d9      	lsls	r1, r3, #19
 8006d1c:	4b39      	ldr	r3, [pc, #228]	; (8006e04 <USB_EPStartXfer+0x484>)
 8006d1e:	400b      	ands	r3, r1
 8006d20:	69b9      	ldr	r1, [r7, #24]
 8006d22:	0148      	lsls	r0, r1, #5
 8006d24:	69f9      	ldr	r1, [r7, #28]
 8006d26:	4401      	add	r1, r0
 8006d28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d3c:	691a      	ldr	r2, [r3, #16]
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	8af9      	ldrh	r1, [r7, #22]
 8006d44:	fb01 f303 	mul.w	r3, r1, r3
 8006d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d4c:	69b9      	ldr	r1, [r7, #24]
 8006d4e:	0148      	lsls	r0, r1, #5
 8006d50:	69f9      	ldr	r1, [r7, #28]
 8006d52:	4401      	add	r1, r0
 8006d54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006d5c:	79fb      	ldrb	r3, [r7, #7]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d10d      	bne.n	8006d7e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d009      	beq.n	8006d7e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	68d9      	ldr	r1, [r3, #12]
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d7a:	460a      	mov	r2, r1
 8006d7c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	78db      	ldrb	r3, [r3, #3]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d128      	bne.n	8006dd8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d110      	bne.n	8006db8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	015a      	lsls	r2, r3, #5
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	69ba      	ldr	r2, [r7, #24]
 8006da6:	0151      	lsls	r1, r2, #5
 8006da8:	69fa      	ldr	r2, [r7, #28]
 8006daa:	440a      	add	r2, r1
 8006dac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006db0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006db4:	6013      	str	r3, [r2, #0]
 8006db6:	e00f      	b.n	8006dd8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	69ba      	ldr	r2, [r7, #24]
 8006dc8:	0151      	lsls	r1, r2, #5
 8006dca:	69fa      	ldr	r2, [r7, #28]
 8006dcc:	440a      	add	r2, r1
 8006dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dd6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	69ba      	ldr	r2, [r7, #24]
 8006de8:	0151      	lsls	r1, r2, #5
 8006dea:	69fa      	ldr	r2, [r7, #28]
 8006dec:	440a      	add	r2, r1
 8006dee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006df2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006df6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3720      	adds	r7, #32
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	1ff80000 	.word	0x1ff80000

08006e08 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	4613      	mov	r3, r2
 8006e14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	785b      	ldrb	r3, [r3, #1]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	f040 80cd 	bne.w	8006fc4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	695b      	ldr	r3, [r3, #20]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d132      	bne.n	8006e98 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	0151      	lsls	r1, r2, #5
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	440a      	add	r2, r1
 8006e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	015a      	lsls	r2, r3, #5
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	0151      	lsls	r1, r2, #5
 8006e68:	697a      	ldr	r2, [r7, #20]
 8006e6a:	440a      	add	r2, r1
 8006e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	015a      	lsls	r2, r3, #5
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	0151      	lsls	r1, r2, #5
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	440a      	add	r2, r1
 8006e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e90:	0cdb      	lsrs	r3, r3, #19
 8006e92:	04db      	lsls	r3, r3, #19
 8006e94:	6113      	str	r3, [r2, #16]
 8006e96:	e04e      	b.n	8006f36 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	015a      	lsls	r2, r3, #5
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	0151      	lsls	r1, r2, #5
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	440a      	add	r2, r1
 8006eae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eb2:	0cdb      	lsrs	r3, r3, #19
 8006eb4:	04db      	lsls	r3, r3, #19
 8006eb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	015a      	lsls	r2, r3, #5
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	0151      	lsls	r1, r2, #5
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	440a      	add	r2, r1
 8006ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ed2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ed6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006eda:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	695a      	ldr	r2, [r3, #20]
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d903      	bls.n	8006ef0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	015a      	lsls	r2, r3, #5
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	693a      	ldr	r2, [r7, #16]
 8006f00:	0151      	lsls	r1, r2, #5
 8006f02:	697a      	ldr	r2, [r7, #20]
 8006f04:	440a      	add	r2, r1
 8006f06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	015a      	lsls	r2, r3, #5
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	4413      	add	r3, r2
 8006f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f1c:	691a      	ldr	r2, [r3, #16]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f26:	6939      	ldr	r1, [r7, #16]
 8006f28:	0148      	lsls	r0, r1, #5
 8006f2a:	6979      	ldr	r1, [r7, #20]
 8006f2c:	4401      	add	r1, r0
 8006f2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006f32:	4313      	orrs	r3, r2
 8006f34:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006f36:	79fb      	ldrb	r3, [r7, #7]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d11e      	bne.n	8006f7a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d009      	beq.n	8006f58 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f50:	461a      	mov	r2, r3
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	0151      	lsls	r1, r2, #5
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	440a      	add	r2, r1
 8006f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f76:	6013      	str	r3, [r2, #0]
 8006f78:	e092      	b.n	80070a0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	0151      	lsls	r1, r2, #5
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	440a      	add	r2, r1
 8006f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f98:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d07e      	beq.n	80070a0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	f003 030f 	and.w	r3, r3, #15
 8006fb2:	2101      	movs	r1, #1
 8006fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fb8:	6979      	ldr	r1, [r7, #20]
 8006fba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	634b      	str	r3, [r1, #52]	; 0x34
 8006fc2:	e06d      	b.n	80070a0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	0151      	lsls	r1, r2, #5
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	440a      	add	r2, r1
 8006fda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fde:	0cdb      	lsrs	r3, r3, #19
 8006fe0:	04db      	lsls	r3, r3, #19
 8006fe2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	0151      	lsls	r1, r2, #5
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	440a      	add	r2, r1
 8006ffa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ffe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007002:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007006:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	695b      	ldr	r3, [r3, #20]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d003      	beq.n	8007018 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	015a      	lsls	r2, r3, #5
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	4413      	add	r3, r2
 8007020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	0151      	lsls	r1, r2, #5
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	440a      	add	r2, r1
 800702e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007032:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007036:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	4413      	add	r3, r2
 8007040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007044:	691a      	ldr	r2, [r3, #16]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800704e:	6939      	ldr	r1, [r7, #16]
 8007050:	0148      	lsls	r0, r1, #5
 8007052:	6979      	ldr	r1, [r7, #20]
 8007054:	4401      	add	r1, r0
 8007056:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800705a:	4313      	orrs	r3, r2
 800705c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800705e:	79fb      	ldrb	r3, [r7, #7]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d10d      	bne.n	8007080 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d009      	beq.n	8007080 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	68d9      	ldr	r1, [r3, #12]
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	4413      	add	r3, r2
 8007078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800707c:	460a      	mov	r2, r1
 800707e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	4413      	add	r3, r2
 8007088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	0151      	lsls	r1, r2, #5
 8007092:	697a      	ldr	r2, [r7, #20]
 8007094:	440a      	add	r2, r1
 8007096:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800709a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800709e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	371c      	adds	r7, #28
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b089      	sub	sp, #36	; 0x24
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	60f8      	str	r0, [r7, #12]
 80070b6:	60b9      	str	r1, [r7, #8]
 80070b8:	4611      	mov	r1, r2
 80070ba:	461a      	mov	r2, r3
 80070bc:	460b      	mov	r3, r1
 80070be:	71fb      	strb	r3, [r7, #7]
 80070c0:	4613      	mov	r3, r2
 80070c2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80070cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d11a      	bne.n	800710a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80070d4:	88bb      	ldrh	r3, [r7, #4]
 80070d6:	3303      	adds	r3, #3
 80070d8:	089b      	lsrs	r3, r3, #2
 80070da:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80070dc:	2300      	movs	r3, #0
 80070de:	61bb      	str	r3, [r7, #24]
 80070e0:	e00f      	b.n	8007102 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80070e2:	79fb      	ldrb	r3, [r7, #7]
 80070e4:	031a      	lsls	r2, r3, #12
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	4413      	add	r3, r2
 80070ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ee:	461a      	mov	r2, r3
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	3304      	adds	r3, #4
 80070fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	3301      	adds	r3, #1
 8007100:	61bb      	str	r3, [r7, #24]
 8007102:	69ba      	ldr	r2, [r7, #24]
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	429a      	cmp	r2, r3
 8007108:	d3eb      	bcc.n	80070e2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3724      	adds	r7, #36	; 0x24
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007118:	b480      	push	{r7}
 800711a:	b089      	sub	sp, #36	; 0x24
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	4613      	mov	r3, r2
 8007124:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800712e:	88fb      	ldrh	r3, [r7, #6]
 8007130:	3303      	adds	r3, #3
 8007132:	089b      	lsrs	r3, r3, #2
 8007134:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007136:	2300      	movs	r3, #0
 8007138:	61bb      	str	r3, [r7, #24]
 800713a:	e00b      	b.n	8007154 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	601a      	str	r2, [r3, #0]
    pDest++;
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	3304      	adds	r3, #4
 800714c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	3301      	adds	r3, #1
 8007152:	61bb      	str	r3, [r7, #24]
 8007154:	69ba      	ldr	r2, [r7, #24]
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	429a      	cmp	r2, r3
 800715a:	d3ef      	bcc.n	800713c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800715c:	69fb      	ldr	r3, [r7, #28]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3724      	adds	r7, #36	; 0x24
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800716a:	b480      	push	{r7}
 800716c:	b085      	sub	sp, #20
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
 8007172:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	785b      	ldrb	r3, [r3, #1]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d12c      	bne.n	80071e0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	015a      	lsls	r2, r3, #5
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	4413      	add	r3, r2
 800718e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	db12      	blt.n	80071be <USB_EPSetStall+0x54>
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00f      	beq.n	80071be <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	015a      	lsls	r2, r3, #5
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	0151      	lsls	r1, r2, #5
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	440a      	add	r2, r1
 80071b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80071bc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	015a      	lsls	r2, r3, #5
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	4413      	add	r3, r2
 80071c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	0151      	lsls	r1, r2, #5
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	440a      	add	r2, r1
 80071d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80071dc:	6013      	str	r3, [r2, #0]
 80071de:	e02b      	b.n	8007238 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	015a      	lsls	r2, r3, #5
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	4413      	add	r3, r2
 80071e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	db12      	blt.n	8007218 <USB_EPSetStall+0xae>
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00f      	beq.n	8007218 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	0151      	lsls	r1, r2, #5
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	440a      	add	r2, r1
 800720e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007212:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007216:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	4413      	add	r3, r2
 8007220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	0151      	lsls	r1, r2, #5
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	440a      	add	r2, r1
 800722e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007232:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007236:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007246:	b480      	push	{r7}
 8007248:	b085      	sub	sp, #20
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	785b      	ldrb	r3, [r3, #1]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d128      	bne.n	80072b4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	015a      	lsls	r2, r3, #5
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	4413      	add	r3, r2
 800726a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68ba      	ldr	r2, [r7, #8]
 8007272:	0151      	lsls	r1, r2, #5
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	440a      	add	r2, r1
 8007278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800727c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007280:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	78db      	ldrb	r3, [r3, #3]
 8007286:	2b03      	cmp	r3, #3
 8007288:	d003      	beq.n	8007292 <USB_EPClearStall+0x4c>
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	78db      	ldrb	r3, [r3, #3]
 800728e:	2b02      	cmp	r3, #2
 8007290:	d138      	bne.n	8007304 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	015a      	lsls	r2, r3, #5
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	4413      	add	r3, r2
 800729a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	0151      	lsls	r1, r2, #5
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	440a      	add	r2, r1
 80072a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072b0:	6013      	str	r3, [r2, #0]
 80072b2:	e027      	b.n	8007304 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	015a      	lsls	r2, r3, #5
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4413      	add	r3, r2
 80072bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	0151      	lsls	r1, r2, #5
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	440a      	add	r2, r1
 80072ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	78db      	ldrb	r3, [r3, #3]
 80072d8:	2b03      	cmp	r3, #3
 80072da:	d003      	beq.n	80072e4 <USB_EPClearStall+0x9e>
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	78db      	ldrb	r3, [r3, #3]
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d10f      	bne.n	8007304 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	0151      	lsls	r1, r2, #5
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	440a      	add	r2, r1
 80072fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007302:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007312:	b480      	push	{r7}
 8007314:	b085      	sub	sp, #20
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
 800731a:	460b      	mov	r3, r1
 800731c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007330:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007334:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	78fb      	ldrb	r3, [r7, #3]
 8007340:	011b      	lsls	r3, r3, #4
 8007342:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007346:	68f9      	ldr	r1, [r7, #12]
 8007348:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800734c:	4313      	orrs	r3, r2
 800734e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800735e:	b480      	push	{r7}
 8007360:	b085      	sub	sp, #20
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007378:	f023 0303 	bic.w	r3, r3, #3
 800737c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800738c:	f023 0302 	bic.w	r3, r3, #2
 8007390:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073ba:	f023 0303 	bic.w	r3, r3, #3
 80073be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073ce:	f043 0302 	orr.w	r3, r3, #2
 80073d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b085      	sub	sp, #20
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	4013      	ands	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80073fa:	68fb      	ldr	r3, [r7, #12]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3714      	adds	r7, #20
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	4013      	ands	r3, r2
 800742a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	0c1b      	lsrs	r3, r3, #16
}
 8007430:	4618      	mov	r0, r3
 8007432:	3714      	adds	r7, #20
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	4013      	ands	r3, r2
 800745e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	b29b      	uxth	r3, r3
}
 8007464:	4618      	mov	r0, r3
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	460b      	mov	r3, r1
 800747a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007480:	78fb      	ldrb	r3, [r7, #3]
 8007482:	015a      	lsls	r2, r3, #5
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	4413      	add	r3, r2
 8007488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007496:	695b      	ldr	r3, [r3, #20]
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	4013      	ands	r3, r2
 800749c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800749e:	68bb      	ldr	r3, [r7, #8]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b087      	sub	sp, #28
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	460b      	mov	r3, r1
 80074b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ce:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80074d0:	78fb      	ldrb	r3, [r7, #3]
 80074d2:	f003 030f 	and.w	r3, r3, #15
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	fa22 f303 	lsr.w	r3, r2, r3
 80074dc:	01db      	lsls	r3, r3, #7
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80074e6:	78fb      	ldrb	r3, [r7, #3]
 80074e8:	015a      	lsls	r2, r3, #5
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	4013      	ands	r3, r2
 80074f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80074fa:	68bb      	ldr	r3, [r7, #8]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	371c      	adds	r7, #28
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	695b      	ldr	r3, [r3, #20]
 8007514:	f003 0301 	and.w	r3, r3, #1
}
 8007518:	4618      	mov	r0, r3
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800753e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007542:	f023 0307 	bic.w	r3, r3, #7
 8007546:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800755a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
	...

0800756c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800756c:	b480      	push	{r7}
 800756e:	b087      	sub	sp, #28
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	460b      	mov	r3, r1
 8007576:	607a      	str	r2, [r7, #4]
 8007578:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	333c      	adds	r3, #60	; 0x3c
 8007582:	3304      	adds	r3, #4
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	4a26      	ldr	r2, [pc, #152]	; (8007624 <USB_EP0_OutStart+0xb8>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d90a      	bls.n	80075a6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800759c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075a0:	d101      	bne.n	80075a6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	e037      	b.n	8007616 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ac:	461a      	mov	r2, r3
 80075ae:	2300      	movs	r3, #0
 80075b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075d4:	f043 0318 	orr.w	r3, r3, #24
 80075d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075e8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80075ec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80075ee:	7afb      	ldrb	r3, [r7, #11]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d10f      	bne.n	8007614 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075fa:	461a      	mov	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	697a      	ldr	r2, [r7, #20]
 800760a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800760e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007612:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	371c      	adds	r7, #28
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	4f54300a 	.word	0x4f54300a

08007628 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007630:	2300      	movs	r3, #0
 8007632:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	3301      	adds	r3, #1
 8007638:	60fb      	str	r3, [r7, #12]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	4a13      	ldr	r2, [pc, #76]	; (800768c <USB_CoreReset+0x64>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d901      	bls.n	8007646 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e01b      	b.n	800767e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	2b00      	cmp	r3, #0
 800764c:	daf2      	bge.n	8007634 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800764e:	2300      	movs	r3, #0
 8007650:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	f043 0201 	orr.w	r2, r3, #1
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	3301      	adds	r3, #1
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	4a09      	ldr	r2, [pc, #36]	; (800768c <USB_CoreReset+0x64>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d901      	bls.n	8007670 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e006      	b.n	800767e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	2b01      	cmp	r3, #1
 800767a:	d0f0      	beq.n	800765e <USB_CoreReset+0x36>

  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	00030d40 	.word	0x00030d40

08007690 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	460b      	mov	r3, r1
 800769a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800769c:	2010      	movs	r0, #16
 800769e:	f004 fd91 	bl	800c1c4 <USBD_static_malloc>
 80076a2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d108      	bne.n	80076bc <USBD_HID_Init+0x2c>
  {
	  usb_failed = 1;
 80076aa:	4b14      	ldr	r3, [pc, #80]	; (80076fc <USBD_HID_Init+0x6c>)
 80076ac:	2201      	movs	r2, #1
 80076ae:	701a      	strb	r2, [r3, #0]
    pdev->pClassData = NULL;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80076b8:	2302      	movs	r3, #2
 80076ba:	e01b      	b.n	80076f4 <USBD_HID_Init+0x64>
  }

  pdev->pClassData = (void *)hhid;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	7c1b      	ldrb	r3, [r3, #16]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d103      	bne.n	80076d4 <USBD_HID_Init+0x44>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2207      	movs	r2, #7
 80076d0:	875a      	strh	r2, [r3, #58]	; 0x3a
 80076d2:	e002      	b.n	80076da <USBD_HID_Init+0x4a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2204      	movs	r2, #4
 80076d8:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80076da:	2320      	movs	r3, #32
 80076dc:	2203      	movs	r2, #3
 80076de:	2181      	movs	r1, #129	; 0x81
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f004 fc10 	bl	800bf06 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2200      	movs	r2, #0
 80076f0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	20000652 	.word	0x20000652

08007700 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	460b      	mov	r3, r1
 800770a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800770c:	2181      	movs	r1, #129	; 0x81
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f004 fc1f 	bl	800bf52 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007726:	2b00      	cmp	r3, #0
 8007728:	d009      	beq.n	800773e <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007730:	4618      	mov	r0, r3
 8007732:	f004 fd55 	bl	800c1e0 <USBD_static_free>
    pdev->pClassData = NULL;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b088      	sub	sp, #32
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]


  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007758:	61bb      	str	r3, [r7, #24]
  USBD_StatusTypeDef ret = USBD_OK;
 800775a:	2300      	movs	r3, #0
 800775c:	77fb      	strb	r3, [r7, #31]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800775e:	2300      	movs	r3, #0
 8007760:	81fb      	strh	r3, [r7, #14]

  if (hhid == NULL)
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d104      	bne.n	8007772 <USBD_HID_Setup+0x2a>
  {
	  usb_failed = 1;
 8007768:	4b94      	ldr	r3, [pc, #592]	; (80079bc <USBD_HID_Setup+0x274>)
 800776a:	2201      	movs	r2, #1
 800776c:	701a      	strb	r2, [r3, #0]
    return (uint8_t)USBD_FAIL;
 800776e:	2303      	movs	r3, #3
 8007770:	e11f      	b.n	80079b2 <USBD_HID_Setup+0x26a>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800777a:	2b40      	cmp	r3, #64	; 0x40
 800777c:	f000 80cd 	beq.w	800791a <USBD_HID_Setup+0x1d2>
 8007780:	2b40      	cmp	r3, #64	; 0x40
 8007782:	f200 810d 	bhi.w	80079a0 <USBD_HID_Setup+0x258>
 8007786:	2b00      	cmp	r3, #0
 8007788:	d045      	beq.n	8007816 <USBD_HID_Setup+0xce>
 800778a:	2b20      	cmp	r3, #32
 800778c:	f040 8108 	bne.w	80079a0 <USBD_HID_Setup+0x258>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	785b      	ldrb	r3, [r3, #1]
 8007794:	3b02      	subs	r3, #2
 8007796:	2b09      	cmp	r3, #9
 8007798:	d835      	bhi.n	8007806 <USBD_HID_Setup+0xbe>
 800779a:	a201      	add	r2, pc, #4	; (adr r2, 80077a0 <USBD_HID_Setup+0x58>)
 800779c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a0:	080077f7 	.word	0x080077f7
 80077a4:	080077d7 	.word	0x080077d7
 80077a8:	08007807 	.word	0x08007807
 80077ac:	08007807 	.word	0x08007807
 80077b0:	08007807 	.word	0x08007807
 80077b4:	08007807 	.word	0x08007807
 80077b8:	08007807 	.word	0x08007807
 80077bc:	08007807 	.word	0x08007807
 80077c0:	080077e5 	.word	0x080077e5
 80077c4:	080077c9 	.word	0x080077c9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	885b      	ldrh	r3, [r3, #2]
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	461a      	mov	r2, r3
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	601a      	str	r2, [r3, #0]
          break;
 80077d4:	e01e      	b.n	8007814 <USBD_HID_Setup+0xcc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	2201      	movs	r2, #1
 80077da:	4619      	mov	r1, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f001 faae 	bl	8008d3e <USBD_CtlSendData>
          break;
 80077e2:	e017      	b.n	8007814 <USBD_HID_Setup+0xcc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	885b      	ldrh	r3, [r3, #2]
 80077e8:	0a1b      	lsrs	r3, r3, #8
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	461a      	mov	r2, r3
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	605a      	str	r2, [r3, #4]
          break;
 80077f4:	e00e      	b.n	8007814 <USBD_HID_Setup+0xcc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	3304      	adds	r3, #4
 80077fa:	2201      	movs	r2, #1
 80077fc:	4619      	mov	r1, r3
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f001 fa9d 	bl	8008d3e <USBD_CtlSendData>
          break;
 8007804:	e006      	b.n	8007814 <USBD_HID_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f001 fa27 	bl	8008c5c <USBD_CtlError>
          ret = USBD_FAIL;
 800780e:	2303      	movs	r3, #3
 8007810:	77fb      	strb	r3, [r7, #31]
          break;
 8007812:	bf00      	nop
      }
      break;
 8007814:	e0cc      	b.n	80079b0 <USBD_HID_Setup+0x268>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	785b      	ldrb	r3, [r3, #1]
 800781a:	2b0b      	cmp	r3, #11
 800781c:	d874      	bhi.n	8007908 <USBD_HID_Setup+0x1c0>
 800781e:	a201      	add	r2, pc, #4	; (adr r2, 8007824 <USBD_HID_Setup+0xdc>)
 8007820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007824:	08007855 	.word	0x08007855
 8007828:	08007917 	.word	0x08007917
 800782c:	08007909 	.word	0x08007909
 8007830:	08007909 	.word	0x08007909
 8007834:	08007909 	.word	0x08007909
 8007838:	08007909 	.word	0x08007909
 800783c:	0800787f 	.word	0x0800787f
 8007840:	08007909 	.word	0x08007909
 8007844:	08007909 	.word	0x08007909
 8007848:	08007909 	.word	0x08007909
 800784c:	080078b7 	.word	0x080078b7
 8007850:	080078e1 	.word	0x080078e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b03      	cmp	r3, #3
 800785e:	d107      	bne.n	8007870 <USBD_HID_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007860:	f107 030e 	add.w	r3, r7, #14
 8007864:	2202      	movs	r2, #2
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f001 fa68 	bl	8008d3e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800786e:	e053      	b.n	8007918 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f001 f9f2 	bl	8008c5c <USBD_CtlError>
            ret = USBD_FAIL;
 8007878:	2303      	movs	r3, #3
 800787a:	77fb      	strb	r3, [r7, #31]
          break;
 800787c:	e04c      	b.n	8007918 <USBD_HID_Setup+0x1d0>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
            pbuf = HID_MOUSE_ReportDesc;
          }
#endif
           if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	885b      	ldrh	r3, [r3, #2]
 8007882:	0a1b      	lsrs	r3, r3, #8
 8007884:	b29b      	uxth	r3, r3
 8007886:	2b21      	cmp	r3, #33	; 0x21
 8007888:	d10e      	bne.n	80078a8 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 800788a:	4b4d      	ldr	r3, [pc, #308]	; (80079c0 <USBD_HID_Setup+0x278>)
 800788c:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	88db      	ldrh	r3, [r3, #6]
 8007892:	2b12      	cmp	r3, #18
 8007894:	bf28      	it	cs
 8007896:	2312      	movcs	r3, #18
 8007898:	82fb      	strh	r3, [r7, #22]
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
            break;
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800789a:	8afb      	ldrh	r3, [r7, #22]
 800789c:	461a      	mov	r2, r3
 800789e:	6939      	ldr	r1, [r7, #16]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f001 fa4c 	bl	8008d3e <USBD_CtlSendData>
          break;
 80078a6:	e037      	b.n	8007918 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f001 f9d6 	bl	8008c5c <USBD_CtlError>
            ret = USBD_FAIL;
 80078b0:	2303      	movs	r3, #3
 80078b2:	77fb      	strb	r3, [r7, #31]
            break;
 80078b4:	e030      	b.n	8007918 <USBD_HID_Setup+0x1d0>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b03      	cmp	r3, #3
 80078c0:	d107      	bne.n	80078d2 <USBD_HID_Setup+0x18a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	3308      	adds	r3, #8
 80078c6:	2201      	movs	r2, #1
 80078c8:	4619      	mov	r1, r3
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f001 fa37 	bl	8008d3e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078d0:	e022      	b.n	8007918 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f001 f9c1 	bl	8008c5c <USBD_CtlError>
            ret = USBD_FAIL;
 80078da:	2303      	movs	r3, #3
 80078dc:	77fb      	strb	r3, [r7, #31]
          break;
 80078de:	e01b      	b.n	8007918 <USBD_HID_Setup+0x1d0>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	2b03      	cmp	r3, #3
 80078ea:	d106      	bne.n	80078fa <USBD_HID_Setup+0x1b2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	885b      	ldrh	r3, [r3, #2]
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	461a      	mov	r2, r3
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078f8:	e00e      	b.n	8007918 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f001 f9ad 	bl	8008c5c <USBD_CtlError>
            ret = USBD_FAIL;
 8007902:	2303      	movs	r3, #3
 8007904:	77fb      	strb	r3, [r7, #31]
          break;
 8007906:	e007      	b.n	8007918 <USBD_HID_Setup+0x1d0>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f001 f9a6 	bl	8008c5c <USBD_CtlError>
          ret = USBD_FAIL;
 8007910:	2303      	movs	r3, #3
 8007912:	77fb      	strb	r3, [r7, #31]
          break;
 8007914:	e000      	b.n	8007918 <USBD_HID_Setup+0x1d0>
          break;
 8007916:	bf00      	nop
      }
      break;
 8007918:	e04a      	b.n	80079b0 <USBD_HID_Setup+0x268>

    case (0xC1 & USB_REQ_TYPE_MASK):			//this is for the og xbox, this is the custom vendor request
    	 hid_setup_ran++;
 800791a:	4b2a      	ldr	r3, [pc, #168]	; (80079c4 <USBD_HID_Setup+0x27c>)
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	3301      	adds	r3, #1
 8007920:	b2da      	uxtb	r2, r3
 8007922:	4b28      	ldr	r3, [pc, #160]	; (80079c4 <USBD_HID_Setup+0x27c>)
 8007924:	701a      	strb	r2, [r3, #0]
    	if(req->bRequest == 0x06 && req->wValue == 0x4200) {
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	785b      	ldrb	r3, [r3, #1]
 800792a:	2b06      	cmp	r3, #6
 800792c:	d10f      	bne.n	800794e <USBD_HID_Setup+0x206>
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	885b      	ldrh	r3, [r3, #2]
 8007932:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 8007936:	d10a      	bne.n	800794e <USBD_HID_Setup+0x206>
    		len = 16;
 8007938:	2310      	movs	r3, #16
 800793a:	82fb      	strh	r3, [r7, #22]
    		pbuf = USBD_HID_Desc;
 800793c:	4b20      	ldr	r3, [pc, #128]	; (80079c0 <USBD_HID_Setup+0x278>)
 800793e:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8007940:	8afb      	ldrh	r3, [r7, #22]
 8007942:	461a      	mov	r2, r3
 8007944:	6939      	ldr	r1, [r7, #16]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f001 f9f9 	bl	8008d3e <USBD_CtlSendData>
 800794c:	e027      	b.n	800799e <USBD_HID_Setup+0x256>
    	}
    	else if(req->bRequest == 0x01 && req->wValue == 0x0100) {
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	785b      	ldrb	r3, [r3, #1]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d10f      	bne.n	8007976 <USBD_HID_Setup+0x22e>
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	885b      	ldrh	r3, [r3, #2]
 800795a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800795e:	d10a      	bne.n	8007976 <USBD_HID_Setup+0x22e>
    		len = 20;
 8007960:	2314      	movs	r3, #20
 8007962:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_IN;
 8007964:	4b18      	ldr	r3, [pc, #96]	; (80079c8 <USBD_HID_Setup+0x280>)
 8007966:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8007968:	8afb      	ldrh	r3, [r7, #22]
 800796a:	461a      	mov	r2, r3
 800796c:	6939      	ldr	r1, [r7, #16]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f001 f9e5 	bl	8008d3e <USBD_CtlSendData>
 8007974:	e013      	b.n	800799e <USBD_HID_Setup+0x256>
    	}
    	else if (req->bRequest == 0x01 && req->wValue == 0x0200) {
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	785b      	ldrb	r3, [r3, #1]
 800797a:	2b01      	cmp	r3, #1
 800797c:	d117      	bne.n	80079ae <USBD_HID_Setup+0x266>
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	885b      	ldrh	r3, [r3, #2]
 8007982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007986:	d112      	bne.n	80079ae <USBD_HID_Setup+0x266>
    		len = 6;
 8007988:	2306      	movs	r3, #6
 800798a:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_OUT;
 800798c:	4b0f      	ldr	r3, [pc, #60]	; (80079cc <USBD_HID_Setup+0x284>)
 800798e:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8007990:	8afb      	ldrh	r3, [r7, #22]
 8007992:	461a      	mov	r2, r3
 8007994:	6939      	ldr	r1, [r7, #16]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f001 f9d1 	bl	8008d3e <USBD_CtlSendData>
    	}
    break;
 800799c:	e007      	b.n	80079ae <USBD_HID_Setup+0x266>
 800799e:	e006      	b.n	80079ae <USBD_HID_Setup+0x266>


    default:
      USBD_CtlError(pdev, req);
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f001 f95a 	bl	8008c5c <USBD_CtlError>
      ret = USBD_FAIL;
 80079a8:	2303      	movs	r3, #3
 80079aa:	77fb      	strb	r3, [r7, #31]
      break;
 80079ac:	e000      	b.n	80079b0 <USBD_HID_Setup+0x268>
    break;
 80079ae:	bf00      	nop
  }

  return (uint8_t)ret;
 80079b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3720      	adds	r7, #32
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	20000652 	.word	0x20000652
 80079c0:	20000084 	.word	0x20000084
 80079c4:	20000651 	.word	0x20000651
 80079c8:	200000a0 	.word	0x200000a0
 80079cc:	200000b4 	.word	0x200000b4

080079d0 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	4613      	mov	r3, r2
 80079dc:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079e4:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d101      	bne.n	80079f0 <USBD_HID_SendReport+0x20>
  {
	  //usb_failed = 1;
    return (uint8_t)USBD_FAIL;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e013      	b.n	8007a18 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	2b03      	cmp	r3, #3
 80079fa:	d10c      	bne.n	8007a16 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	7b1b      	ldrb	r3, [r3, #12]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d108      	bne.n	8007a16 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	2201      	movs	r2, #1
 8007a08:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8007a0a:	88fb      	ldrh	r3, [r7, #6]
 8007a0c:	68ba      	ldr	r2, [r7, #8]
 8007a0e:	2181      	movs	r1, #129	; 0x81
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f004 fb46 	bl	800c0a2 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3718      	adds	r7, #24
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2220      	movs	r2, #32
 8007a2c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8007a2e:	4b03      	ldr	r3, [pc, #12]	; (8007a3c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	20000044 	.word	0x20000044

08007a40 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
#if PC_SETUP
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);

  return USBD_HID_CfgHSDesc;
#endif
}
 8007a48:	bf00      	nop
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
	...

08007a58 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */

static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2220      	movs	r2, #32
 8007a64:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8007a66:	4b03      	ldr	r3, [pc, #12]	; (8007a74 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr
 8007a74:	20000064 	.word	0x20000064

08007a78 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	460b      	mov	r3, r1
 8007a82:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]

  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	220a      	movs	r2, #10
 8007aa8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8007aaa:	4b03      	ldr	r3, [pc, #12]	; (8007ab8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr
 8007ab8:	20000094 	.word	0x20000094

08007abc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b086      	sub	sp, #24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	e01f      	b.n	8007b14 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d003      	beq.n	8007afa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	79fa      	ldrb	r2, [r7, #7]
 8007b06:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f004 f995 	bl	800be38 <USBD_LL_Init>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3718      	adds	r7, #24
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d101      	bne.n	8007b34 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007b30:	2303      	movs	r3, #3
 8007b32:	e016      	b.n	8007b62 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00b      	beq.n	8007b60 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b50:	f107 020e 	add.w	r2, r7, #14
 8007b54:	4610      	mov	r0, r2
 8007b56:	4798      	blx	r3
 8007b58:	4602      	mov	r2, r0
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b082      	sub	sp, #8
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f004 f9ac 	bl	800bed0 <USBD_LL_Start>
 8007b78:	4603      	mov	r3, r0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3708      	adds	r7, #8
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007b82:	b480      	push	{r7}
 8007b84:	b083      	sub	sp, #12
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d009      	beq.n	8007bc6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	78fa      	ldrb	r2, [r7, #3]
 8007bbc:	4611      	mov	r1, r2
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	4798      	blx	r3
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d007      	beq.n	8007bf6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	78fa      	ldrb	r2, [r7, #3]
 8007bf0:	4611      	mov	r1, r2
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	4798      	blx	r3
  }

  return USBD_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 ffe8 	bl	8008be8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007c26:	461a      	mov	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c34:	f003 031f 	and.w	r3, r3, #31
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d01a      	beq.n	8007c72 <USBD_LL_SetupStage+0x72>
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d822      	bhi.n	8007c86 <USBD_LL_SetupStage+0x86>
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d002      	beq.n	8007c4a <USBD_LL_SetupStage+0x4a>
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d00a      	beq.n	8007c5e <USBD_LL_SetupStage+0x5e>
 8007c48:	e01d      	b.n	8007c86 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c50:	4619      	mov	r1, r3
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fa62 	bl	800811c <USBD_StdDevReq>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c5c:	e020      	b.n	8007ca0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c64:	4619      	mov	r1, r3
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fb1e 	bl	80082a8 <USBD_StdItfReq>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c70:	e016      	b.n	8007ca0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c78:	4619      	mov	r1, r3
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fb5d 	bl	800833a <USBD_StdEPReq>
 8007c80:	4603      	mov	r3, r0
 8007c82:	73fb      	strb	r3, [r7, #15]
      break;
 8007c84:	e00c      	b.n	8007ca0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	4619      	mov	r1, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f004 f97b 	bl	800bf90 <USBD_LL_StallEP>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	73fb      	strb	r3, [r7, #15]
      break;
 8007c9e:	bf00      	nop
  }

  return ret;
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b086      	sub	sp, #24
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	60f8      	str	r0, [r7, #12]
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	607a      	str	r2, [r7, #4]
 8007cb6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007cb8:	7afb      	ldrb	r3, [r7, #11]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d138      	bne.n	8007d30 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007cc4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ccc:	2b03      	cmp	r3, #3
 8007cce:	d14a      	bne.n	8007d66 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	689a      	ldr	r2, [r3, #8]
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d913      	bls.n	8007d04 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	689a      	ldr	r2, [r3, #8]
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	1ad2      	subs	r2, r2, r3
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	68da      	ldr	r2, [r3, #12]
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	bf28      	it	cs
 8007cf6:	4613      	movcs	r3, r2
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	6879      	ldr	r1, [r7, #4]
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f001 f84a 	bl	8008d96 <USBD_CtlContinueRx>
 8007d02:	e030      	b.n	8007d66 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	2b03      	cmp	r3, #3
 8007d0e:	d10b      	bne.n	8007d28 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d005      	beq.n	8007d28 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f001 f845 	bl	8008db8 <USBD_CtlSendStatus>
 8007d2e:	e01a      	b.n	8007d66 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b03      	cmp	r3, #3
 8007d3a:	d114      	bne.n	8007d66 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00e      	beq.n	8007d66 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	7afa      	ldrb	r2, [r7, #11]
 8007d52:	4611      	mov	r1, r2
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	4798      	blx	r3
 8007d58:	4603      	mov	r3, r0
 8007d5a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007d5c:	7dfb      	ldrb	r3, [r7, #23]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d001      	beq.n	8007d66 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007d62:	7dfb      	ldrb	r3, [r7, #23]
 8007d64:	e000      	b.n	8007d68 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3718      	adds	r7, #24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	460b      	mov	r3, r1
 8007d7a:	607a      	str	r2, [r7, #4]
 8007d7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007d7e:	7afb      	ldrb	r3, [r7, #11]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d16b      	bne.n	8007e5c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	3314      	adds	r3, #20
 8007d88:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d156      	bne.n	8007e42 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	689a      	ldr	r2, [r3, #8]
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d914      	bls.n	8007dca <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	689a      	ldr	r2, [r3, #8]
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	1ad2      	subs	r2, r2, r3
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	461a      	mov	r2, r3
 8007db4:	6879      	ldr	r1, [r7, #4]
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f000 ffdc 	bl	8008d74 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f004 f98e 	bl	800c0e4 <USBD_LL_PrepareReceive>
 8007dc8:	e03b      	b.n	8007e42 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	68da      	ldr	r2, [r3, #12]
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d11c      	bne.n	8007e10 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	685a      	ldr	r2, [r3, #4]
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d316      	bcc.n	8007e10 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	685a      	ldr	r2, [r3, #4]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d20f      	bcs.n	8007e10 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007df0:	2200      	movs	r2, #0
 8007df2:	2100      	movs	r1, #0
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f000 ffbd 	bl	8008d74 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e02:	2300      	movs	r3, #0
 8007e04:	2200      	movs	r2, #0
 8007e06:	2100      	movs	r1, #0
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f004 f96b 	bl	800c0e4 <USBD_LL_PrepareReceive>
 8007e0e:	e018      	b.n	8007e42 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b03      	cmp	r3, #3
 8007e1a:	d10b      	bne.n	8007e34 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d005      	beq.n	8007e34 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e34:	2180      	movs	r1, #128	; 0x80
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f004 f8aa 	bl	800bf90 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f000 ffce 	bl	8008dde <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d122      	bne.n	8007e92 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f7ff fe98 	bl	8007b82 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007e5a:	e01a      	b.n	8007e92 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	2b03      	cmp	r3, #3
 8007e66:	d114      	bne.n	8007e92 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e6e:	695b      	ldr	r3, [r3, #20]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00e      	beq.n	8007e92 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e7a:	695b      	ldr	r3, [r3, #20]
 8007e7c:	7afa      	ldrb	r2, [r7, #11]
 8007e7e:	4611      	mov	r1, r2
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	4798      	blx	r3
 8007e84:	4603      	mov	r3, r0
 8007e86:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007e88:	7dfb      	ldrb	r3, [r7, #23]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d001      	beq.n	8007e92 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007e8e:	7dfb      	ldrb	r3, [r7, #23]
 8007e90:	e000      	b.n	8007e94 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3718      	adds	r7, #24
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d101      	bne.n	8007ed0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e02f      	b.n	8007f30 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00f      	beq.n	8007efa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d009      	beq.n	8007efa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	6852      	ldr	r2, [r2, #4]
 8007ef2:	b2d2      	uxtb	r2, r2
 8007ef4:	4611      	mov	r1, r2
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007efa:	2340      	movs	r3, #64	; 0x40
 8007efc:	2200      	movs	r2, #0
 8007efe:	2100      	movs	r1, #0
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f004 f800 	bl	800bf06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2240      	movs	r2, #64	; 0x40
 8007f12:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f16:	2340      	movs	r3, #64	; 0x40
 8007f18:	2200      	movs	r2, #0
 8007f1a:	2180      	movs	r1, #128	; 0x80
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f003 fff2 	bl	800bf06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2240      	movs	r2, #64	; 0x40
 8007f2c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	460b      	mov	r3, r1
 8007f42:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	78fa      	ldrb	r2, [r7, #3]
 8007f48:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f66:	b2da      	uxtb	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2204      	movs	r2, #4
 8007f72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	2b04      	cmp	r3, #4
 8007f96:	d106      	bne.n	8007fa6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d101      	bne.n	8007fca <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e012      	b.n	8007ff0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b03      	cmp	r3, #3
 8007fd4:	d10b      	bne.n	8007fee <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fdc:	69db      	ldr	r3, [r3, #28]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d005      	beq.n	8007fee <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	460b      	mov	r3, r1
 8008002:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800800e:	2303      	movs	r3, #3
 8008010:	e014      	b.n	800803c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b03      	cmp	r3, #3
 800801c:	d10d      	bne.n	800803a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008024:	6a1b      	ldr	r3, [r3, #32]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d007      	beq.n	800803a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	78fa      	ldrb	r2, [r7, #3]
 8008034:	4611      	mov	r1, r2
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	460b      	mov	r3, r1
 800804e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008056:	2b00      	cmp	r3, #0
 8008058:	d101      	bne.n	800805e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800805a:	2303      	movs	r3, #3
 800805c:	e014      	b.n	8008088 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b03      	cmp	r3, #3
 8008068:	d10d      	bne.n	8008086 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008072:	2b00      	cmp	r3, #0
 8008074:	d007      	beq.n	8008086 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800807c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807e:	78fa      	ldrb	r2, [r7, #3]
 8008080:	4611      	mov	r1, r2
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b082      	sub	sp, #8
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d009      	beq.n	80080d4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	6852      	ldr	r2, [r2, #4]
 80080cc:	b2d2      	uxtb	r2, r2
 80080ce:	4611      	mov	r1, r2
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	4798      	blx	r3
  }

  return USBD_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80080de:	b480      	push	{r7}
 80080e0:	b087      	sub	sp, #28
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	3301      	adds	r3, #1
 80080f4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80080fc:	8a3b      	ldrh	r3, [r7, #16]
 80080fe:	021b      	lsls	r3, r3, #8
 8008100:	b21a      	sxth	r2, r3
 8008102:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008106:	4313      	orrs	r3, r2
 8008108:	b21b      	sxth	r3, r3
 800810a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800810c:	89fb      	ldrh	r3, [r7, #14]
}
 800810e:	4618      	mov	r0, r3
 8008110:	371c      	adds	r7, #28
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
	...

0800811c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008126:	2300      	movs	r3, #0
 8008128:	73fb      	strb	r3, [r7, #15]


  if(req->bmRequest == 0xC1) {
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	2bc1      	cmp	r3, #193	; 0xc1
 8008130:	d148      	bne.n	80081c4 <USBD_StdDevReq+0xa8>
	  uint16_t len = 0;
 8008132:	2300      	movs	r3, #0
 8008134:	81bb      	strh	r3, [r7, #12]
	  uint8_t *pbuf = NULL;
 8008136:	2300      	movs	r3, #0
 8008138:	60bb      	str	r3, [r7, #8]
  	if(req->bRequest == 0x06 && req->wValue == 0x4200) {
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	785b      	ldrb	r3, [r3, #1]
 800813e:	2b06      	cmp	r3, #6
 8008140:	d10f      	bne.n	8008162 <USBD_StdDevReq+0x46>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	885b      	ldrh	r3, [r3, #2]
 8008146:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 800814a:	d10a      	bne.n	8008162 <USBD_StdDevReq+0x46>
  		len = 16;
 800814c:	2310      	movs	r3, #16
 800814e:	81bb      	strh	r3, [r7, #12]
  		pbuf = USBD_HID_Desc;
 8008150:	4b51      	ldr	r3, [pc, #324]	; (8008298 <USBD_StdDevReq+0x17c>)
 8008152:	60bb      	str	r3, [r7, #8]
  		(void)USBD_CtlSendData(pdev, pbuf, len);
 8008154:	89bb      	ldrh	r3, [r7, #12]
 8008156:	461a      	mov	r2, r3
 8008158:	68b9      	ldr	r1, [r7, #8]
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fdef 	bl	8008d3e <USBD_CtlSendData>
 8008160:	e026      	b.n	80081b0 <USBD_StdDevReq+0x94>
  	}
  	else if(req->bRequest == 0x01 && req->wValue == 0x0100) {
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	785b      	ldrb	r3, [r3, #1]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d10f      	bne.n	800818a <USBD_StdDevReq+0x6e>
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	885b      	ldrh	r3, [r3, #2]
 800816e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008172:	d10a      	bne.n	800818a <USBD_StdDevReq+0x6e>
  		len = 20;
 8008174:	2314      	movs	r3, #20
 8008176:	81bb      	strh	r3, [r7, #12]
  		pbuf = DUKE_HID_CAPABILITIES_IN;
 8008178:	4b48      	ldr	r3, [pc, #288]	; (800829c <USBD_StdDevReq+0x180>)
 800817a:	60bb      	str	r3, [r7, #8]
  		(void)USBD_CtlSendData(pdev, pbuf, len);
 800817c:	89bb      	ldrh	r3, [r7, #12]
 800817e:	461a      	mov	r2, r3
 8008180:	68b9      	ldr	r1, [r7, #8]
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fddb 	bl	8008d3e <USBD_CtlSendData>
 8008188:	e012      	b.n	80081b0 <USBD_StdDevReq+0x94>
  	}
  	else if (req->bRequest == 0x01 && req->wValue == 0x0200) {
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	785b      	ldrb	r3, [r3, #1]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d10e      	bne.n	80081b0 <USBD_StdDevReq+0x94>
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	885b      	ldrh	r3, [r3, #2]
 8008196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800819a:	d109      	bne.n	80081b0 <USBD_StdDevReq+0x94>
  		len = 6;
 800819c:	2306      	movs	r3, #6
 800819e:	81bb      	strh	r3, [r7, #12]
  		pbuf = DUKE_HID_CAPABILITIES_OUT;
 80081a0:	4b3f      	ldr	r3, [pc, #252]	; (80082a0 <USBD_StdDevReq+0x184>)
 80081a2:	60bb      	str	r3, [r7, #8]
  		(void)USBD_CtlSendData(pdev, pbuf, len);
 80081a4:	89bb      	ldrh	r3, [r7, #12]
 80081a6:	461a      	mov	r2, r3
 80081a8:	68b9      	ldr	r1, [r7, #8]
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fdc7 	bl	8008d3e <USBD_CtlSendData>
  	}
	  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	6839      	ldr	r1, [r7, #0]
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	4798      	blx	r3
 80081be:	4603      	mov	r3, r0
 80081c0:	73fb      	strb	r3, [r7, #15]
 80081c2:	e064      	b.n	800828e <USBD_StdDevReq+0x172>


  } else {
	  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081cc:	2b40      	cmp	r3, #64	; 0x40
 80081ce:	d005      	beq.n	80081dc <USBD_StdDevReq+0xc0>
 80081d0:	2b40      	cmp	r3, #64	; 0x40
 80081d2:	d854      	bhi.n	800827e <USBD_StdDevReq+0x162>
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00b      	beq.n	80081f0 <USBD_StdDevReq+0xd4>
 80081d8:	2b20      	cmp	r3, #32
 80081da:	d150      	bne.n	800827e <USBD_StdDevReq+0x162>
	  {
		case USB_REQ_TYPE_CLASS:
		case USB_REQ_TYPE_VENDOR:
		  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	6839      	ldr	r1, [r7, #0]
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	4798      	blx	r3
 80081ea:	4603      	mov	r3, r0
 80081ec:	73fb      	strb	r3, [r7, #15]
		  break;
 80081ee:	e04e      	b.n	800828e <USBD_StdDevReq+0x172>

		case USB_REQ_TYPE_STANDARD:
		  switch (req->bRequest)
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	785b      	ldrb	r3, [r3, #1]
 80081f4:	2b09      	cmp	r3, #9
 80081f6:	d83c      	bhi.n	8008272 <USBD_StdDevReq+0x156>
 80081f8:	a201      	add	r2, pc, #4	; (adr r2, 8008200 <USBD_StdDevReq+0xe4>)
 80081fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fe:	bf00      	nop
 8008200:	08008255 	.word	0x08008255
 8008204:	08008269 	.word	0x08008269
 8008208:	08008273 	.word	0x08008273
 800820c:	0800825f 	.word	0x0800825f
 8008210:	08008273 	.word	0x08008273
 8008214:	08008233 	.word	0x08008233
 8008218:	08008229 	.word	0x08008229
 800821c:	08008273 	.word	0x08008273
 8008220:	0800824b 	.word	0x0800824b
 8008224:	0800823d 	.word	0x0800823d
		  {
			case USB_REQ_GET_DESCRIPTOR:
			  USBD_GetDescriptor(pdev, req);
 8008228:	6839      	ldr	r1, [r7, #0]
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f9e8 	bl	8008600 <USBD_GetDescriptor>
			  break;
 8008230:	e024      	b.n	800827c <USBD_StdDevReq+0x160>

			case USB_REQ_SET_ADDRESS:
			  USBD_SetAddress(pdev, req);
 8008232:	6839      	ldr	r1, [r7, #0]
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fb4d 	bl	80088d4 <USBD_SetAddress>
			  break;
 800823a:	e01f      	b.n	800827c <USBD_StdDevReq+0x160>

			case USB_REQ_SET_CONFIGURATION:
			  ret = USBD_SetConfig(pdev, req);
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fb8c 	bl	800895c <USBD_SetConfig>
 8008244:	4603      	mov	r3, r0
 8008246:	73fb      	strb	r3, [r7, #15]
			  break;
 8008248:	e018      	b.n	800827c <USBD_StdDevReq+0x160>

			case USB_REQ_GET_CONFIGURATION:
			  USBD_GetConfig(pdev, req);
 800824a:	6839      	ldr	r1, [r7, #0]
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fc2b 	bl	8008aa8 <USBD_GetConfig>
			  break;
 8008252:	e013      	b.n	800827c <USBD_StdDevReq+0x160>

			case USB_REQ_GET_STATUS:
			  USBD_GetStatus(pdev, req);
 8008254:	6839      	ldr	r1, [r7, #0]
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fc5c 	bl	8008b14 <USBD_GetStatus>
			  break;
 800825c:	e00e      	b.n	800827c <USBD_StdDevReq+0x160>

			case USB_REQ_SET_FEATURE:
			  USBD_SetFeature(pdev, req);
 800825e:	6839      	ldr	r1, [r7, #0]
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 fc8b 	bl	8008b7c <USBD_SetFeature>
			  break;
 8008266:	e009      	b.n	800827c <USBD_StdDevReq+0x160>

			case USB_REQ_CLEAR_FEATURE:
			  USBD_ClrFeature(pdev, req);
 8008268:	6839      	ldr	r1, [r7, #0]
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fc9a 	bl	8008ba4 <USBD_ClrFeature>
			  break;
 8008270:	e004      	b.n	800827c <USBD_StdDevReq+0x160>

			default:
			  USBD_CtlError(pdev, req);
 8008272:	6839      	ldr	r1, [r7, #0]
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 fcf1 	bl	8008c5c <USBD_CtlError>
			  break;
 800827a:	bf00      	nop
		  }
		  break;
 800827c:	e007      	b.n	800828e <USBD_StdDevReq+0x172>

		default:
		  unknown_bmrequest = 1;
 800827e:	4b09      	ldr	r3, [pc, #36]	; (80082a4 <USBD_StdDevReq+0x188>)
 8008280:	2201      	movs	r2, #1
 8008282:	701a      	strb	r2, [r3, #0]
		  USBD_CtlError(pdev, req);
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fce8 	bl	8008c5c <USBD_CtlError>
		  break;
 800828c:	bf00      	nop
	  }
	}
  return ret;
 800828e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	200000bc 	.word	0x200000bc
 800829c:	200000cc 	.word	0x200000cc
 80082a0:	200000e0 	.word	0x200000e0
 80082a4:	20000653 	.word	0x20000653

080082a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082b2:	2300      	movs	r3, #0
 80082b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082be:	2b40      	cmp	r3, #64	; 0x40
 80082c0:	d005      	beq.n	80082ce <USBD_StdItfReq+0x26>
 80082c2:	2b40      	cmp	r3, #64	; 0x40
 80082c4:	d82f      	bhi.n	8008326 <USBD_StdItfReq+0x7e>
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d001      	beq.n	80082ce <USBD_StdItfReq+0x26>
 80082ca:	2b20      	cmp	r3, #32
 80082cc:	d12b      	bne.n	8008326 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	3b01      	subs	r3, #1
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d81d      	bhi.n	8008318 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	889b      	ldrh	r3, [r3, #4]
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d813      	bhi.n	800830e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	4798      	blx	r3
 80082f4:	4603      	mov	r3, r0
 80082f6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	88db      	ldrh	r3, [r3, #6]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d110      	bne.n	8008322 <USBD_StdItfReq+0x7a>
 8008300:	7bfb      	ldrb	r3, [r7, #15]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10d      	bne.n	8008322 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fd56 	bl	8008db8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800830c:	e009      	b.n	8008322 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800830e:	6839      	ldr	r1, [r7, #0]
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fca3 	bl	8008c5c <USBD_CtlError>
          break;
 8008316:	e004      	b.n	8008322 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fc9e 	bl	8008c5c <USBD_CtlError>
          break;
 8008320:	e000      	b.n	8008324 <USBD_StdItfReq+0x7c>
          break;
 8008322:	bf00      	nop
      }
      break;
 8008324:	e004      	b.n	8008330 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008326:	6839      	ldr	r1, [r7, #0]
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fc97 	bl	8008c5c <USBD_CtlError>
      break;
 800832e:	bf00      	nop
  }

  return ret;
 8008330:	7bfb      	ldrb	r3, [r7, #15]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b084      	sub	sp, #16
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
 8008342:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008344:	2300      	movs	r3, #0
 8008346:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	889b      	ldrh	r3, [r3, #4]
 800834c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008356:	2b40      	cmp	r3, #64	; 0x40
 8008358:	d007      	beq.n	800836a <USBD_StdEPReq+0x30>
 800835a:	2b40      	cmp	r3, #64	; 0x40
 800835c:	f200 8145 	bhi.w	80085ea <USBD_StdEPReq+0x2b0>
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00c      	beq.n	800837e <USBD_StdEPReq+0x44>
 8008364:	2b20      	cmp	r3, #32
 8008366:	f040 8140 	bne.w	80085ea <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	6839      	ldr	r1, [r7, #0]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	4798      	blx	r3
 8008378:	4603      	mov	r3, r0
 800837a:	73fb      	strb	r3, [r7, #15]
      break;
 800837c:	e13a      	b.n	80085f4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	785b      	ldrb	r3, [r3, #1]
 8008382:	2b03      	cmp	r3, #3
 8008384:	d007      	beq.n	8008396 <USBD_StdEPReq+0x5c>
 8008386:	2b03      	cmp	r3, #3
 8008388:	f300 8129 	bgt.w	80085de <USBD_StdEPReq+0x2a4>
 800838c:	2b00      	cmp	r3, #0
 800838e:	d07f      	beq.n	8008490 <USBD_StdEPReq+0x156>
 8008390:	2b01      	cmp	r3, #1
 8008392:	d03c      	beq.n	800840e <USBD_StdEPReq+0xd4>
 8008394:	e123      	b.n	80085de <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800839c:	b2db      	uxtb	r3, r3
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d002      	beq.n	80083a8 <USBD_StdEPReq+0x6e>
 80083a2:	2b03      	cmp	r3, #3
 80083a4:	d016      	beq.n	80083d4 <USBD_StdEPReq+0x9a>
 80083a6:	e02c      	b.n	8008402 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083a8:	7bbb      	ldrb	r3, [r7, #14]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00d      	beq.n	80083ca <USBD_StdEPReq+0x90>
 80083ae:	7bbb      	ldrb	r3, [r7, #14]
 80083b0:	2b80      	cmp	r3, #128	; 0x80
 80083b2:	d00a      	beq.n	80083ca <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80083b4:	7bbb      	ldrb	r3, [r7, #14]
 80083b6:	4619      	mov	r1, r3
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f003 fde9 	bl	800bf90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80083be:	2180      	movs	r1, #128	; 0x80
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f003 fde5 	bl	800bf90 <USBD_LL_StallEP>
 80083c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083c8:	e020      	b.n	800840c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 fc45 	bl	8008c5c <USBD_CtlError>
              break;
 80083d2:	e01b      	b.n	800840c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	885b      	ldrh	r3, [r3, #2]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10e      	bne.n	80083fa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80083dc:	7bbb      	ldrb	r3, [r7, #14]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00b      	beq.n	80083fa <USBD_StdEPReq+0xc0>
 80083e2:	7bbb      	ldrb	r3, [r7, #14]
 80083e4:	2b80      	cmp	r3, #128	; 0x80
 80083e6:	d008      	beq.n	80083fa <USBD_StdEPReq+0xc0>
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	88db      	ldrh	r3, [r3, #6]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d104      	bne.n	80083fa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80083f0:	7bbb      	ldrb	r3, [r7, #14]
 80083f2:	4619      	mov	r1, r3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f003 fdcb 	bl	800bf90 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fcdc 	bl	8008db8 <USBD_CtlSendStatus>

              break;
 8008400:	e004      	b.n	800840c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fc29 	bl	8008c5c <USBD_CtlError>
              break;
 800840a:	bf00      	nop
          }
          break;
 800840c:	e0ec      	b.n	80085e8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b02      	cmp	r3, #2
 8008418:	d002      	beq.n	8008420 <USBD_StdEPReq+0xe6>
 800841a:	2b03      	cmp	r3, #3
 800841c:	d016      	beq.n	800844c <USBD_StdEPReq+0x112>
 800841e:	e030      	b.n	8008482 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008420:	7bbb      	ldrb	r3, [r7, #14]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00d      	beq.n	8008442 <USBD_StdEPReq+0x108>
 8008426:	7bbb      	ldrb	r3, [r7, #14]
 8008428:	2b80      	cmp	r3, #128	; 0x80
 800842a:	d00a      	beq.n	8008442 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800842c:	7bbb      	ldrb	r3, [r7, #14]
 800842e:	4619      	mov	r1, r3
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f003 fdad 	bl	800bf90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008436:	2180      	movs	r1, #128	; 0x80
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f003 fda9 	bl	800bf90 <USBD_LL_StallEP>
 800843e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008440:	e025      	b.n	800848e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008442:	6839      	ldr	r1, [r7, #0]
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fc09 	bl	8008c5c <USBD_CtlError>
              break;
 800844a:	e020      	b.n	800848e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	885b      	ldrh	r3, [r3, #2]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d11b      	bne.n	800848c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008454:	7bbb      	ldrb	r3, [r7, #14]
 8008456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800845a:	2b00      	cmp	r3, #0
 800845c:	d004      	beq.n	8008468 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800845e:	7bbb      	ldrb	r3, [r7, #14]
 8008460:	4619      	mov	r1, r3
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f003 fdb3 	bl	800bfce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 fca5 	bl	8008db8 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	6839      	ldr	r1, [r7, #0]
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	4798      	blx	r3
 800847c:	4603      	mov	r3, r0
 800847e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008480:	e004      	b.n	800848c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008482:	6839      	ldr	r1, [r7, #0]
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 fbe9 	bl	8008c5c <USBD_CtlError>
              break;
 800848a:	e000      	b.n	800848e <USBD_StdEPReq+0x154>
              break;
 800848c:	bf00      	nop
          }
          break;
 800848e:	e0ab      	b.n	80085e8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008496:	b2db      	uxtb	r3, r3
 8008498:	2b02      	cmp	r3, #2
 800849a:	d002      	beq.n	80084a2 <USBD_StdEPReq+0x168>
 800849c:	2b03      	cmp	r3, #3
 800849e:	d032      	beq.n	8008506 <USBD_StdEPReq+0x1cc>
 80084a0:	e097      	b.n	80085d2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084a2:	7bbb      	ldrb	r3, [r7, #14]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d007      	beq.n	80084b8 <USBD_StdEPReq+0x17e>
 80084a8:	7bbb      	ldrb	r3, [r7, #14]
 80084aa:	2b80      	cmp	r3, #128	; 0x80
 80084ac:	d004      	beq.n	80084b8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80084ae:	6839      	ldr	r1, [r7, #0]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fbd3 	bl	8008c5c <USBD_CtlError>
                break;
 80084b6:	e091      	b.n	80085dc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	da0b      	bge.n	80084d8 <USBD_StdEPReq+0x19e>
 80084c0:	7bbb      	ldrb	r3, [r7, #14]
 80084c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084c6:	4613      	mov	r3, r2
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	4413      	add	r3, r2
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	3310      	adds	r3, #16
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	4413      	add	r3, r2
 80084d4:	3304      	adds	r3, #4
 80084d6:	e00b      	b.n	80084f0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084d8:	7bbb      	ldrb	r3, [r7, #14]
 80084da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084de:	4613      	mov	r3, r2
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	4413      	add	r3, r2
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	4413      	add	r3, r2
 80084ee:	3304      	adds	r3, #4
 80084f0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	2200      	movs	r2, #0
 80084f6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	2202      	movs	r2, #2
 80084fc:	4619      	mov	r1, r3
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fc1d 	bl	8008d3e <USBD_CtlSendData>
              break;
 8008504:	e06a      	b.n	80085dc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008506:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800850a:	2b00      	cmp	r3, #0
 800850c:	da11      	bge.n	8008532 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800850e:	7bbb      	ldrb	r3, [r7, #14]
 8008510:	f003 020f 	and.w	r2, r3, #15
 8008514:	6879      	ldr	r1, [r7, #4]
 8008516:	4613      	mov	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	4413      	add	r3, r2
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	440b      	add	r3, r1
 8008520:	3324      	adds	r3, #36	; 0x24
 8008522:	881b      	ldrh	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d117      	bne.n	8008558 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008528:	6839      	ldr	r1, [r7, #0]
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fb96 	bl	8008c5c <USBD_CtlError>
                  break;
 8008530:	e054      	b.n	80085dc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008532:	7bbb      	ldrb	r3, [r7, #14]
 8008534:	f003 020f 	and.w	r2, r3, #15
 8008538:	6879      	ldr	r1, [r7, #4]
 800853a:	4613      	mov	r3, r2
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	4413      	add	r3, r2
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	440b      	add	r3, r1
 8008544:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008548:	881b      	ldrh	r3, [r3, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d104      	bne.n	8008558 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800854e:	6839      	ldr	r1, [r7, #0]
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fb83 	bl	8008c5c <USBD_CtlError>
                  break;
 8008556:	e041      	b.n	80085dc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008558:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800855c:	2b00      	cmp	r3, #0
 800855e:	da0b      	bge.n	8008578 <USBD_StdEPReq+0x23e>
 8008560:	7bbb      	ldrb	r3, [r7, #14]
 8008562:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008566:	4613      	mov	r3, r2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	3310      	adds	r3, #16
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	4413      	add	r3, r2
 8008574:	3304      	adds	r3, #4
 8008576:	e00b      	b.n	8008590 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008578:	7bbb      	ldrb	r3, [r7, #14]
 800857a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800857e:	4613      	mov	r3, r2
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	4413      	add	r3, r2
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	4413      	add	r3, r2
 800858e:	3304      	adds	r3, #4
 8008590:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008592:	7bbb      	ldrb	r3, [r7, #14]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d002      	beq.n	800859e <USBD_StdEPReq+0x264>
 8008598:	7bbb      	ldrb	r3, [r7, #14]
 800859a:	2b80      	cmp	r3, #128	; 0x80
 800859c:	d103      	bne.n	80085a6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	2200      	movs	r2, #0
 80085a2:	601a      	str	r2, [r3, #0]
 80085a4:	e00e      	b.n	80085c4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80085a6:	7bbb      	ldrb	r3, [r7, #14]
 80085a8:	4619      	mov	r1, r3
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f003 fd2e 	bl	800c00c <USBD_LL_IsStallEP>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d003      	beq.n	80085be <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	2201      	movs	r2, #1
 80085ba:	601a      	str	r2, [r3, #0]
 80085bc:	e002      	b.n	80085c4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	2200      	movs	r2, #0
 80085c2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	2202      	movs	r2, #2
 80085c8:	4619      	mov	r1, r3
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fbb7 	bl	8008d3e <USBD_CtlSendData>
              break;
 80085d0:	e004      	b.n	80085dc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80085d2:	6839      	ldr	r1, [r7, #0]
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 fb41 	bl	8008c5c <USBD_CtlError>
              break;
 80085da:	bf00      	nop
          }
          break;
 80085dc:	e004      	b.n	80085e8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80085de:	6839      	ldr	r1, [r7, #0]
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 fb3b 	bl	8008c5c <USBD_CtlError>
          break;
 80085e6:	bf00      	nop
      }
      break;
 80085e8:	e004      	b.n	80085f4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80085ea:	6839      	ldr	r1, [r7, #0]
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 fb35 	bl	8008c5c <USBD_CtlError>
      break;
 80085f2:	bf00      	nop
  }

  return ret;
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
	...

08008600 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800860a:	2300      	movs	r3, #0
 800860c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800860e:	2300      	movs	r3, #0
 8008610:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008612:	2300      	movs	r3, #0
 8008614:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	885b      	ldrh	r3, [r3, #2]
 800861a:	0a1b      	lsrs	r3, r3, #8
 800861c:	b29b      	uxth	r3, r3
 800861e:	3b01      	subs	r3, #1
 8008620:	2b06      	cmp	r3, #6
 8008622:	f200 8128 	bhi.w	8008876 <USBD_GetDescriptor+0x276>
 8008626:	a201      	add	r2, pc, #4	; (adr r2, 800862c <USBD_GetDescriptor+0x2c>)
 8008628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800862c:	08008649 	.word	0x08008649
 8008630:	08008661 	.word	0x08008661
 8008634:	080086a1 	.word	0x080086a1
 8008638:	08008877 	.word	0x08008877
 800863c:	08008877 	.word	0x08008877
 8008640:	08008817 	.word	0x08008817
 8008644:	08008843 	.word	0x08008843
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	7c12      	ldrb	r2, [r2, #16]
 8008654:	f107 0108 	add.w	r1, r7, #8
 8008658:	4610      	mov	r0, r2
 800865a:	4798      	blx	r3
 800865c:	60f8      	str	r0, [r7, #12]
      break;
 800865e:	e112      	b.n	8008886 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	7c1b      	ldrb	r3, [r3, #16]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10d      	bne.n	8008684 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800866e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008670:	f107 0208 	add.w	r2, r7, #8
 8008674:	4610      	mov	r0, r2
 8008676:	4798      	blx	r3
 8008678:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	3301      	adds	r3, #1
 800867e:	2202      	movs	r2, #2
 8008680:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008682:	e100      	b.n	8008886 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800868a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868c:	f107 0208 	add.w	r2, r7, #8
 8008690:	4610      	mov	r0, r2
 8008692:	4798      	blx	r3
 8008694:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	3301      	adds	r3, #1
 800869a:	2202      	movs	r2, #2
 800869c:	701a      	strb	r2, [r3, #0]
      break;
 800869e:	e0f2      	b.n	8008886 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	885b      	ldrh	r3, [r3, #2]
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	2b05      	cmp	r3, #5
 80086a8:	f200 80ac 	bhi.w	8008804 <USBD_GetDescriptor+0x204>
 80086ac:	a201      	add	r2, pc, #4	; (adr r2, 80086b4 <USBD_GetDescriptor+0xb4>)
 80086ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b2:	bf00      	nop
 80086b4:	080086cd 	.word	0x080086cd
 80086b8:	08008701 	.word	0x08008701
 80086bc:	08008735 	.word	0x08008735
 80086c0:	08008769 	.word	0x08008769
 80086c4:	0800879d 	.word	0x0800879d
 80086c8:	080087d1 	.word	0x080087d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00b      	beq.n	80086f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	7c12      	ldrb	r2, [r2, #16]
 80086e4:	f107 0108 	add.w	r1, r7, #8
 80086e8:	4610      	mov	r0, r2
 80086ea:	4798      	blx	r3
 80086ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086ee:	e091      	b.n	8008814 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086f0:	6839      	ldr	r1, [r7, #0]
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fab2 	bl	8008c5c <USBD_CtlError>
            err++;
 80086f8:	7afb      	ldrb	r3, [r7, #11]
 80086fa:	3301      	adds	r3, #1
 80086fc:	72fb      	strb	r3, [r7, #11]
          break;
 80086fe:	e089      	b.n	8008814 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00b      	beq.n	8008724 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	7c12      	ldrb	r2, [r2, #16]
 8008718:	f107 0108 	add.w	r1, r7, #8
 800871c:	4610      	mov	r0, r2
 800871e:	4798      	blx	r3
 8008720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008722:	e077      	b.n	8008814 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008724:	6839      	ldr	r1, [r7, #0]
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fa98 	bl	8008c5c <USBD_CtlError>
            err++;
 800872c:	7afb      	ldrb	r3, [r7, #11]
 800872e:	3301      	adds	r3, #1
 8008730:	72fb      	strb	r3, [r7, #11]
          break;
 8008732:	e06f      	b.n	8008814 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00b      	beq.n	8008758 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	7c12      	ldrb	r2, [r2, #16]
 800874c:	f107 0108 	add.w	r1, r7, #8
 8008750:	4610      	mov	r0, r2
 8008752:	4798      	blx	r3
 8008754:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008756:	e05d      	b.n	8008814 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008758:	6839      	ldr	r1, [r7, #0]
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 fa7e 	bl	8008c5c <USBD_CtlError>
            err++;
 8008760:	7afb      	ldrb	r3, [r7, #11]
 8008762:	3301      	adds	r3, #1
 8008764:	72fb      	strb	r3, [r7, #11]
          break;
 8008766:	e055      	b.n	8008814 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00b      	beq.n	800878c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	7c12      	ldrb	r2, [r2, #16]
 8008780:	f107 0108 	add.w	r1, r7, #8
 8008784:	4610      	mov	r0, r2
 8008786:	4798      	blx	r3
 8008788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800878a:	e043      	b.n	8008814 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800878c:	6839      	ldr	r1, [r7, #0]
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fa64 	bl	8008c5c <USBD_CtlError>
            err++;
 8008794:	7afb      	ldrb	r3, [r7, #11]
 8008796:	3301      	adds	r3, #1
 8008798:	72fb      	strb	r3, [r7, #11]
          break;
 800879a:	e03b      	b.n	8008814 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087a2:	695b      	ldr	r3, [r3, #20]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00b      	beq.n	80087c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	7c12      	ldrb	r2, [r2, #16]
 80087b4:	f107 0108 	add.w	r1, r7, #8
 80087b8:	4610      	mov	r0, r2
 80087ba:	4798      	blx	r3
 80087bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087be:	e029      	b.n	8008814 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087c0:	6839      	ldr	r1, [r7, #0]
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 fa4a 	bl	8008c5c <USBD_CtlError>
            err++;
 80087c8:	7afb      	ldrb	r3, [r7, #11]
 80087ca:	3301      	adds	r3, #1
 80087cc:	72fb      	strb	r3, [r7, #11]
          break;
 80087ce:	e021      	b.n	8008814 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087d6:	699b      	ldr	r3, [r3, #24]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d00b      	beq.n	80087f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087e2:	699b      	ldr	r3, [r3, #24]
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	7c12      	ldrb	r2, [r2, #16]
 80087e8:	f107 0108 	add.w	r1, r7, #8
 80087ec:	4610      	mov	r0, r2
 80087ee:	4798      	blx	r3
 80087f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087f2:	e00f      	b.n	8008814 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087f4:	6839      	ldr	r1, [r7, #0]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fa30 	bl	8008c5c <USBD_CtlError>
            err++;
 80087fc:	7afb      	ldrb	r3, [r7, #11]
 80087fe:	3301      	adds	r3, #1
 8008800:	72fb      	strb	r3, [r7, #11]
          break;
 8008802:	e007      	b.n	8008814 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008804:	6839      	ldr	r1, [r7, #0]
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fa28 	bl	8008c5c <USBD_CtlError>
          err++;
 800880c:	7afb      	ldrb	r3, [r7, #11]
 800880e:	3301      	adds	r3, #1
 8008810:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008812:	bf00      	nop
      }
      break;
 8008814:	e037      	b.n	8008886 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	7c1b      	ldrb	r3, [r3, #16]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d109      	bne.n	8008832 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008826:	f107 0208 	add.w	r2, r7, #8
 800882a:	4610      	mov	r0, r2
 800882c:	4798      	blx	r3
 800882e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008830:	e029      	b.n	8008886 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008832:	6839      	ldr	r1, [r7, #0]
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 fa11 	bl	8008c5c <USBD_CtlError>
        err++;
 800883a:	7afb      	ldrb	r3, [r7, #11]
 800883c:	3301      	adds	r3, #1
 800883e:	72fb      	strb	r3, [r7, #11]
      break;
 8008840:	e021      	b.n	8008886 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	7c1b      	ldrb	r3, [r3, #16]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d10d      	bne.n	8008866 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008852:	f107 0208 	add.w	r2, r7, #8
 8008856:	4610      	mov	r0, r2
 8008858:	4798      	blx	r3
 800885a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	3301      	adds	r3, #1
 8008860:	2207      	movs	r2, #7
 8008862:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008864:	e00f      	b.n	8008886 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008866:	6839      	ldr	r1, [r7, #0]
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f9f7 	bl	8008c5c <USBD_CtlError>
        err++;
 800886e:	7afb      	ldrb	r3, [r7, #11]
 8008870:	3301      	adds	r3, #1
 8008872:	72fb      	strb	r3, [r7, #11]
      break;
 8008874:	e007      	b.n	8008886 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008876:	6839      	ldr	r1, [r7, #0]
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f9ef 	bl	8008c5c <USBD_CtlError>
      err++;
 800887e:	7afb      	ldrb	r3, [r7, #11]
 8008880:	3301      	adds	r3, #1
 8008882:	72fb      	strb	r3, [r7, #11]
      break;
 8008884:	bf00      	nop
  }

  if (err != 0U)
 8008886:	7afb      	ldrb	r3, [r7, #11]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d11e      	bne.n	80088ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	88db      	ldrh	r3, [r3, #6]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d016      	beq.n	80088c2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008894:	893b      	ldrh	r3, [r7, #8]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00e      	beq.n	80088b8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	88da      	ldrh	r2, [r3, #6]
 800889e:	893b      	ldrh	r3, [r7, #8]
 80088a0:	4293      	cmp	r3, r2
 80088a2:	bf28      	it	cs
 80088a4:	4613      	movcs	r3, r2
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80088aa:	893b      	ldrh	r3, [r7, #8]
 80088ac:	461a      	mov	r2, r3
 80088ae:	68f9      	ldr	r1, [r7, #12]
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 fa44 	bl	8008d3e <USBD_CtlSendData>
 80088b6:	e009      	b.n	80088cc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80088b8:	6839      	ldr	r1, [r7, #0]
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 f9ce 	bl	8008c5c <USBD_CtlError>
 80088c0:	e004      	b.n	80088cc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 fa78 	bl	8008db8 <USBD_CtlSendStatus>
 80088c8:	e000      	b.n	80088cc <USBD_GetDescriptor+0x2cc>
    return;
 80088ca:	bf00      	nop
  }
}
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop

080088d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	889b      	ldrh	r3, [r3, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d131      	bne.n	800894a <USBD_SetAddress+0x76>
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	88db      	ldrh	r3, [r3, #6]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d12d      	bne.n	800894a <USBD_SetAddress+0x76>
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	885b      	ldrh	r3, [r3, #2]
 80088f2:	2b7f      	cmp	r3, #127	; 0x7f
 80088f4:	d829      	bhi.n	800894a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	885b      	ldrh	r3, [r3, #2]
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008900:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b03      	cmp	r3, #3
 800890c:	d104      	bne.n	8008918 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800890e:	6839      	ldr	r1, [r7, #0]
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f9a3 	bl	8008c5c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008916:	e01d      	b.n	8008954 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	7bfa      	ldrb	r2, [r7, #15]
 800891c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008920:	7bfb      	ldrb	r3, [r7, #15]
 8008922:	4619      	mov	r1, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f003 fb9d 	bl	800c064 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fa44 	bl	8008db8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008930:	7bfb      	ldrb	r3, [r7, #15]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d004      	beq.n	8008940 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2202      	movs	r2, #2
 800893a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800893e:	e009      	b.n	8008954 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2201      	movs	r2, #1
 8008944:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008948:	e004      	b.n	8008954 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800894a:	6839      	ldr	r1, [r7, #0]
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 f985 	bl	8008c5c <USBD_CtlError>
  }
}
 8008952:	bf00      	nop
 8008954:	bf00      	nop
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008966:	2300      	movs	r3, #0
 8008968:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	885b      	ldrh	r3, [r3, #2]
 800896e:	b2da      	uxtb	r2, r3
 8008970:	4b4c      	ldr	r3, [pc, #304]	; (8008aa4 <USBD_SetConfig+0x148>)
 8008972:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008974:	4b4b      	ldr	r3, [pc, #300]	; (8008aa4 <USBD_SetConfig+0x148>)
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d905      	bls.n	8008988 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f96c 	bl	8008c5c <USBD_CtlError>
    return USBD_FAIL;
 8008984:	2303      	movs	r3, #3
 8008986:	e088      	b.n	8008a9a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800898e:	b2db      	uxtb	r3, r3
 8008990:	2b02      	cmp	r3, #2
 8008992:	d002      	beq.n	800899a <USBD_SetConfig+0x3e>
 8008994:	2b03      	cmp	r3, #3
 8008996:	d025      	beq.n	80089e4 <USBD_SetConfig+0x88>
 8008998:	e071      	b.n	8008a7e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800899a:	4b42      	ldr	r3, [pc, #264]	; (8008aa4 <USBD_SetConfig+0x148>)
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d01c      	beq.n	80089dc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80089a2:	4b40      	ldr	r3, [pc, #256]	; (8008aa4 <USBD_SetConfig+0x148>)
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	461a      	mov	r2, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80089ac:	4b3d      	ldr	r3, [pc, #244]	; (8008aa4 <USBD_SetConfig+0x148>)
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	4619      	mov	r1, r3
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f7ff f8f0 	bl	8007b98 <USBD_SetClassConfig>
 80089b8:	4603      	mov	r3, r0
 80089ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d004      	beq.n	80089cc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80089c2:	6839      	ldr	r1, [r7, #0]
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f949 	bl	8008c5c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80089ca:	e065      	b.n	8008a98 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 f9f3 	bl	8008db8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2203      	movs	r2, #3
 80089d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80089da:	e05d      	b.n	8008a98 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f9eb 	bl	8008db8 <USBD_CtlSendStatus>
      break;
 80089e2:	e059      	b.n	8008a98 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80089e4:	4b2f      	ldr	r3, [pc, #188]	; (8008aa4 <USBD_SetConfig+0x148>)
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d112      	bne.n	8008a12 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2202      	movs	r2, #2
 80089f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80089f4:	4b2b      	ldr	r3, [pc, #172]	; (8008aa4 <USBD_SetConfig+0x148>)
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	461a      	mov	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80089fe:	4b29      	ldr	r3, [pc, #164]	; (8008aa4 <USBD_SetConfig+0x148>)
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	4619      	mov	r1, r3
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f7ff f8e3 	bl	8007bd0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f9d4 	bl	8008db8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a10:	e042      	b.n	8008a98 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008a12:	4b24      	ldr	r3, [pc, #144]	; (8008aa4 <USBD_SetConfig+0x148>)
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	461a      	mov	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d02a      	beq.n	8008a76 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	4619      	mov	r1, r3
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f7ff f8d1 	bl	8007bd0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008a2e:	4b1d      	ldr	r3, [pc, #116]	; (8008aa4 <USBD_SetConfig+0x148>)
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	461a      	mov	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a38:	4b1a      	ldr	r3, [pc, #104]	; (8008aa4 <USBD_SetConfig+0x148>)
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f7ff f8aa 	bl	8007b98 <USBD_SetClassConfig>
 8008a44:	4603      	mov	r3, r0
 8008a46:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008a48:	7bfb      	ldrb	r3, [r7, #15]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00f      	beq.n	8008a6e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008a4e:	6839      	ldr	r1, [r7, #0]
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 f903 	bl	8008c5c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f7ff f8b6 	bl	8007bd0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2202      	movs	r2, #2
 8008a68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008a6c:	e014      	b.n	8008a98 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 f9a2 	bl	8008db8 <USBD_CtlSendStatus>
      break;
 8008a74:	e010      	b.n	8008a98 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f99e 	bl	8008db8 <USBD_CtlSendStatus>
      break;
 8008a7c:	e00c      	b.n	8008a98 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 f8eb 	bl	8008c5c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a86:	4b07      	ldr	r3, [pc, #28]	; (8008aa4 <USBD_SetConfig+0x148>)
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f7ff f89f 	bl	8007bd0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008a92:	2303      	movs	r3, #3
 8008a94:	73fb      	strb	r3, [r7, #15]
      break;
 8008a96:	bf00      	nop
  }

  return ret;
 8008a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	20000654 	.word	0x20000654

08008aa8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	88db      	ldrh	r3, [r3, #6]
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d004      	beq.n	8008ac4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008aba:	6839      	ldr	r1, [r7, #0]
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 f8cd 	bl	8008c5c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008ac2:	e023      	b.n	8008b0c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	dc02      	bgt.n	8008ad6 <USBD_GetConfig+0x2e>
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	dc03      	bgt.n	8008adc <USBD_GetConfig+0x34>
 8008ad4:	e015      	b.n	8008b02 <USBD_GetConfig+0x5a>
 8008ad6:	2b03      	cmp	r3, #3
 8008ad8:	d00b      	beq.n	8008af2 <USBD_GetConfig+0x4a>
 8008ada:	e012      	b.n	8008b02 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	3308      	adds	r3, #8
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	4619      	mov	r1, r3
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 f927 	bl	8008d3e <USBD_CtlSendData>
        break;
 8008af0:	e00c      	b.n	8008b0c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	3304      	adds	r3, #4
 8008af6:	2201      	movs	r2, #1
 8008af8:	4619      	mov	r1, r3
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f91f 	bl	8008d3e <USBD_CtlSendData>
        break;
 8008b00:	e004      	b.n	8008b0c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008b02:	6839      	ldr	r1, [r7, #0]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f8a9 	bl	8008c5c <USBD_CtlError>
        break;
 8008b0a:	bf00      	nop
}
 8008b0c:	bf00      	nop
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	3b01      	subs	r3, #1
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	d81e      	bhi.n	8008b6a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	88db      	ldrh	r3, [r3, #6]
 8008b30:	2b02      	cmp	r3, #2
 8008b32:	d004      	beq.n	8008b3e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008b34:	6839      	ldr	r1, [r7, #0]
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 f890 	bl	8008c5c <USBD_CtlError>
        break;
 8008b3c:	e01a      	b.n	8008b74 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2201      	movs	r2, #1
 8008b42:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d005      	beq.n	8008b5a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	f043 0202 	orr.w	r2, r3, #2
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	330c      	adds	r3, #12
 8008b5e:	2202      	movs	r2, #2
 8008b60:	4619      	mov	r1, r3
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f8eb 	bl	8008d3e <USBD_CtlSendData>
      break;
 8008b68:	e004      	b.n	8008b74 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008b6a:	6839      	ldr	r1, [r7, #0]
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 f875 	bl	8008c5c <USBD_CtlError>
      break;
 8008b72:	bf00      	nop
  }
}
 8008b74:	bf00      	nop
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	885b      	ldrh	r3, [r3, #2]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d106      	bne.n	8008b9c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2201      	movs	r2, #1
 8008b92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f90e 	bl	8008db8 <USBD_CtlSendStatus>
  }
}
 8008b9c:	bf00      	nop
 8008b9e:	3708      	adds	r7, #8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	3b01      	subs	r3, #1
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d80b      	bhi.n	8008bd4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	885b      	ldrh	r3, [r3, #2]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d10c      	bne.n	8008bde <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f8f3 	bl	8008db8 <USBD_CtlSendStatus>
      }
      break;
 8008bd2:	e004      	b.n	8008bde <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008bd4:	6839      	ldr	r1, [r7, #0]
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 f840 	bl	8008c5c <USBD_CtlError>
      break;
 8008bdc:	e000      	b.n	8008be0 <USBD_ClrFeature+0x3c>
      break;
 8008bde:	bf00      	nop
  }
}
 8008be0:	bf00      	nop
 8008be2:	3708      	adds	r7, #8
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	781a      	ldrb	r2, [r3, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	3301      	adds	r3, #1
 8008c02:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	781a      	ldrb	r2, [r3, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f7ff fa63 	bl	80080de <SWAPBYTE>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	3301      	adds	r3, #1
 8008c24:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f7ff fa56 	bl	80080de <SWAPBYTE>
 8008c32:	4603      	mov	r3, r0
 8008c34:	461a      	mov	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	3301      	adds	r3, #1
 8008c44:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f7ff fa49 	bl	80080de <SWAPBYTE>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	461a      	mov	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	80da      	strh	r2, [r3, #6]
}
 8008c54:	bf00      	nop
 8008c56:	3710      	adds	r7, #16
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c66:	2180      	movs	r1, #128	; 0x80
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f003 f991 	bl	800bf90 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008c6e:	2100      	movs	r1, #0
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f003 f98d 	bl	800bf90 <USBD_LL_StallEP>
}
 8008c76:	bf00      	nop
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b086      	sub	sp, #24
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	60f8      	str	r0, [r7, #12]
 8008c86:	60b9      	str	r1, [r7, #8]
 8008c88:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d036      	beq.n	8008d02 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008c98:	6938      	ldr	r0, [r7, #16]
 8008c9a:	f000 f836 	bl	8008d0a <USBD_GetLen>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	005b      	lsls	r3, r3, #1
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008cac:	7dfb      	ldrb	r3, [r7, #23]
 8008cae:	68ba      	ldr	r2, [r7, #8]
 8008cb0:	4413      	add	r3, r2
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	7812      	ldrb	r2, [r2, #0]
 8008cb6:	701a      	strb	r2, [r3, #0]
  idx++;
 8008cb8:	7dfb      	ldrb	r3, [r7, #23]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008cbe:	7dfb      	ldrb	r3, [r7, #23]
 8008cc0:	68ba      	ldr	r2, [r7, #8]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	2203      	movs	r2, #3
 8008cc6:	701a      	strb	r2, [r3, #0]
  idx++;
 8008cc8:	7dfb      	ldrb	r3, [r7, #23]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008cce:	e013      	b.n	8008cf8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008cd0:	7dfb      	ldrb	r3, [r7, #23]
 8008cd2:	68ba      	ldr	r2, [r7, #8]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	693a      	ldr	r2, [r7, #16]
 8008cd8:	7812      	ldrb	r2, [r2, #0]
 8008cda:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	613b      	str	r3, [r7, #16]
    idx++;
 8008ce2:	7dfb      	ldrb	r3, [r7, #23]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008ce8:	7dfb      	ldrb	r3, [r7, #23]
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	4413      	add	r3, r2
 8008cee:	2200      	movs	r2, #0
 8008cf0:	701a      	strb	r2, [r3, #0]
    idx++;
 8008cf2:	7dfb      	ldrb	r3, [r7, #23]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d1e7      	bne.n	8008cd0 <USBD_GetString+0x52>
 8008d00:	e000      	b.n	8008d04 <USBD_GetString+0x86>
    return;
 8008d02:	bf00      	nop
  }
}
 8008d04:	3718      	adds	r7, #24
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008d0a:	b480      	push	{r7}
 8008d0c:	b085      	sub	sp, #20
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d12:	2300      	movs	r3, #0
 8008d14:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008d1a:	e005      	b.n	8008d28 <USBD_GetLen+0x1e>
  {
    len++;
 8008d1c:	7bfb      	ldrb	r3, [r7, #15]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	3301      	adds	r3, #1
 8008d26:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d1f5      	bne.n	8008d1c <USBD_GetLen+0x12>
  }

  return len;
 8008d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3714      	adds	r7, #20
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b084      	sub	sp, #16
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	60f8      	str	r0, [r7, #12]
 8008d46:	60b9      	str	r1, [r7, #8]
 8008d48:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	68ba      	ldr	r2, [r7, #8]
 8008d62:	2100      	movs	r1, #0
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f003 f99c 	bl	800c0a2 <USBD_LL_Transmit>

  return USBD_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	68ba      	ldr	r2, [r7, #8]
 8008d84:	2100      	movs	r1, #0
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f003 f98b 	bl	800c0a2 <USBD_LL_Transmit>

  return USBD_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b084      	sub	sp, #16
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	60f8      	str	r0, [r7, #12]
 8008d9e:	60b9      	str	r1, [r7, #8]
 8008da0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	68ba      	ldr	r2, [r7, #8]
 8008da6:	2100      	movs	r1, #0
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f003 f99b 	bl	800c0e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2204      	movs	r2, #4
 8008dc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008dc8:	2300      	movs	r3, #0
 8008dca:	2200      	movs	r2, #0
 8008dcc:	2100      	movs	r1, #0
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f003 f967 	bl	800c0a2 <USBD_LL_Transmit>

  return USBD_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b082      	sub	sp, #8
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2205      	movs	r2, #5
 8008dea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008dee:	2300      	movs	r3, #0
 8008df0:	2200      	movs	r2, #0
 8008df2:	2100      	movs	r1, #0
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f003 f975 	bl	800c0e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <__NVIC_SetPriority>:
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	6039      	str	r1, [r7, #0]
 8008e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	db0a      	blt.n	8008e2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	b2da      	uxtb	r2, r3
 8008e1c:	490c      	ldr	r1, [pc, #48]	; (8008e50 <__NVIC_SetPriority+0x4c>)
 8008e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e22:	0112      	lsls	r2, r2, #4
 8008e24:	b2d2      	uxtb	r2, r2
 8008e26:	440b      	add	r3, r1
 8008e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008e2c:	e00a      	b.n	8008e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	b2da      	uxtb	r2, r3
 8008e32:	4908      	ldr	r1, [pc, #32]	; (8008e54 <__NVIC_SetPriority+0x50>)
 8008e34:	79fb      	ldrb	r3, [r7, #7]
 8008e36:	f003 030f 	and.w	r3, r3, #15
 8008e3a:	3b04      	subs	r3, #4
 8008e3c:	0112      	lsls	r2, r2, #4
 8008e3e:	b2d2      	uxtb	r2, r2
 8008e40:	440b      	add	r3, r1
 8008e42:	761a      	strb	r2, [r3, #24]
}
 8008e44:	bf00      	nop
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr
 8008e50:	e000e100 	.word	0xe000e100
 8008e54:	e000ed00 	.word	0xe000ed00

08008e58 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008e5c:	4b05      	ldr	r3, [pc, #20]	; (8008e74 <SysTick_Handler+0x1c>)
 8008e5e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008e60:	f001 fcfe 	bl	800a860 <xTaskGetSchedulerState>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d001      	beq.n	8008e6e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008e6a:	f002 fae5 	bl	800b438 <xPortSysTickHandler>
  }
}
 8008e6e:	bf00      	nop
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	e000e010 	.word	0xe000e010

08008e78 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	f06f 0004 	mvn.w	r0, #4
 8008e82:	f7ff ffbf 	bl	8008e04 <__NVIC_SetPriority>
#endif
}
 8008e86:	bf00      	nop
 8008e88:	bd80      	pop	{r7, pc}
	...

08008e8c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e92:	f3ef 8305 	mrs	r3, IPSR
 8008e96:	603b      	str	r3, [r7, #0]
  return(result);
 8008e98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d003      	beq.n	8008ea6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008e9e:	f06f 0305 	mvn.w	r3, #5
 8008ea2:	607b      	str	r3, [r7, #4]
 8008ea4:	e00c      	b.n	8008ec0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008ea6:	4b0a      	ldr	r3, [pc, #40]	; (8008ed0 <osKernelInitialize+0x44>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d105      	bne.n	8008eba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008eae:	4b08      	ldr	r3, [pc, #32]	; (8008ed0 <osKernelInitialize+0x44>)
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	607b      	str	r3, [r7, #4]
 8008eb8:	e002      	b.n	8008ec0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008eba:	f04f 33ff 	mov.w	r3, #4294967295
 8008ebe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008ec0:	687b      	ldr	r3, [r7, #4]
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	370c      	adds	r7, #12
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	20000658 	.word	0x20000658

08008ed4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008eda:	f3ef 8305 	mrs	r3, IPSR
 8008ede:	603b      	str	r3, [r7, #0]
  return(result);
 8008ee0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d003      	beq.n	8008eee <osKernelStart+0x1a>
    stat = osErrorISR;
 8008ee6:	f06f 0305 	mvn.w	r3, #5
 8008eea:	607b      	str	r3, [r7, #4]
 8008eec:	e010      	b.n	8008f10 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008eee:	4b0b      	ldr	r3, [pc, #44]	; (8008f1c <osKernelStart+0x48>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d109      	bne.n	8008f0a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008ef6:	f7ff ffbf 	bl	8008e78 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008efa:	4b08      	ldr	r3, [pc, #32]	; (8008f1c <osKernelStart+0x48>)
 8008efc:	2202      	movs	r2, #2
 8008efe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008f00:	f001 f866 	bl	8009fd0 <vTaskStartScheduler>
      stat = osOK;
 8008f04:	2300      	movs	r3, #0
 8008f06:	607b      	str	r3, [r7, #4]
 8008f08:	e002      	b.n	8008f10 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f10:	687b      	ldr	r3, [r7, #4]
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3708      	adds	r7, #8
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	20000658 	.word	0x20000658

08008f20 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b08e      	sub	sp, #56	; 0x38
 8008f24:	af04      	add	r7, sp, #16
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f30:	f3ef 8305 	mrs	r3, IPSR
 8008f34:	617b      	str	r3, [r7, #20]
  return(result);
 8008f36:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d17e      	bne.n	800903a <osThreadNew+0x11a>
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d07b      	beq.n	800903a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008f42:	2380      	movs	r3, #128	; 0x80
 8008f44:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008f46:	2318      	movs	r3, #24
 8008f48:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f52:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d045      	beq.n	8008fe6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d002      	beq.n	8008f68 <osThreadNew+0x48>
        name = attr->name;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	699b      	ldr	r3, [r3, #24]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d002      	beq.n	8008f76 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d008      	beq.n	8008f8e <osThreadNew+0x6e>
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	2b38      	cmp	r3, #56	; 0x38
 8008f80:	d805      	bhi.n	8008f8e <osThreadNew+0x6e>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	f003 0301 	and.w	r3, r3, #1
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d001      	beq.n	8008f92 <osThreadNew+0x72>
        return (NULL);
 8008f8e:	2300      	movs	r3, #0
 8008f90:	e054      	b.n	800903c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d003      	beq.n	8008fa2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	695b      	ldr	r3, [r3, #20]
 8008f9e:	089b      	lsrs	r3, r3, #2
 8008fa0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00e      	beq.n	8008fc8 <osThreadNew+0xa8>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	2b5b      	cmp	r3, #91	; 0x5b
 8008fb0:	d90a      	bls.n	8008fc8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d006      	beq.n	8008fc8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	695b      	ldr	r3, [r3, #20]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d002      	beq.n	8008fc8 <osThreadNew+0xa8>
        mem = 1;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	61bb      	str	r3, [r7, #24]
 8008fc6:	e010      	b.n	8008fea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d10c      	bne.n	8008fea <osThreadNew+0xca>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d108      	bne.n	8008fea <osThreadNew+0xca>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	691b      	ldr	r3, [r3, #16]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d104      	bne.n	8008fea <osThreadNew+0xca>
          mem = 0;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	61bb      	str	r3, [r7, #24]
 8008fe4:	e001      	b.n	8008fea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d110      	bne.n	8009012 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ff8:	9202      	str	r2, [sp, #8]
 8008ffa:	9301      	str	r3, [sp, #4]
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	9300      	str	r3, [sp, #0]
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	6a3a      	ldr	r2, [r7, #32]
 8009004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f000 fe0c 	bl	8009c24 <xTaskCreateStatic>
 800900c:	4603      	mov	r3, r0
 800900e:	613b      	str	r3, [r7, #16]
 8009010:	e013      	b.n	800903a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d110      	bne.n	800903a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009018:	6a3b      	ldr	r3, [r7, #32]
 800901a:	b29a      	uxth	r2, r3
 800901c:	f107 0310 	add.w	r3, r7, #16
 8009020:	9301      	str	r3, [sp, #4]
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	9300      	str	r3, [sp, #0]
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f000 fe57 	bl	8009cde <xTaskCreate>
 8009030:	4603      	mov	r3, r0
 8009032:	2b01      	cmp	r3, #1
 8009034:	d001      	beq.n	800903a <osThreadNew+0x11a>
            hTask = NULL;
 8009036:	2300      	movs	r3, #0
 8009038:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800903a:	693b      	ldr	r3, [r7, #16]
}
 800903c:	4618      	mov	r0, r3
 800903e:	3728      	adds	r7, #40	; 0x28
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800904c:	f3ef 8305 	mrs	r3, IPSR
 8009050:	60bb      	str	r3, [r7, #8]
  return(result);
 8009052:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009054:	2b00      	cmp	r3, #0
 8009056:	d003      	beq.n	8009060 <osDelay+0x1c>
    stat = osErrorISR;
 8009058:	f06f 0305 	mvn.w	r3, #5
 800905c:	60fb      	str	r3, [r7, #12]
 800905e:	e007      	b.n	8009070 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009060:	2300      	movs	r3, #0
 8009062:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d002      	beq.n	8009070 <osDelay+0x2c>
      vTaskDelay(ticks);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 ff7c 	bl	8009f68 <vTaskDelay>
    }
  }

  return (stat);
 8009070:	68fb      	ldr	r3, [r7, #12]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
	...

0800907c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	4a07      	ldr	r2, [pc, #28]	; (80090a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800908c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	4a06      	ldr	r2, [pc, #24]	; (80090ac <vApplicationGetIdleTaskMemory+0x30>)
 8009092:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2280      	movs	r2, #128	; 0x80
 8009098:	601a      	str	r2, [r3, #0]
}
 800909a:	bf00      	nop
 800909c:	3714      	adds	r7, #20
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	2000065c 	.word	0x2000065c
 80090ac:	200006b8 	.word	0x200006b8

080090b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	4a07      	ldr	r2, [pc, #28]	; (80090dc <vApplicationGetTimerTaskMemory+0x2c>)
 80090c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	4a06      	ldr	r2, [pc, #24]	; (80090e0 <vApplicationGetTimerTaskMemory+0x30>)
 80090c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80090ce:	601a      	str	r2, [r3, #0]
}
 80090d0:	bf00      	nop
 80090d2:	3714      	adds	r7, #20
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr
 80090dc:	200008b8 	.word	0x200008b8
 80090e0:	20000914 	.word	0x20000914

080090e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f103 0208 	add.w	r2, r3, #8
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f04f 32ff 	mov.w	r2, #4294967295
 80090fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f103 0208 	add.w	r2, r3, #8
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f103 0208 	add.w	r2, r3, #8
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009118:	bf00      	nop
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009132:	bf00      	nop
 8009134:	370c      	adds	r7, #12
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr

0800913e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800913e:	b480      	push	{r7}
 8009140:	b085      	sub	sp, #20
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
 8009146:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	68fa      	ldr	r2, [r7, #12]
 8009152:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	689a      	ldr	r2, [r3, #8]
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	683a      	ldr	r2, [r7, #0]
 8009162:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	683a      	ldr	r2, [r7, #0]
 8009168:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	1c5a      	adds	r2, r3, #1
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	601a      	str	r2, [r3, #0]
}
 800917a:	bf00      	nop
 800917c:	3714      	adds	r7, #20
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr

08009186 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009186:	b480      	push	{r7}
 8009188:	b085      	sub	sp, #20
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800919c:	d103      	bne.n	80091a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	60fb      	str	r3, [r7, #12]
 80091a4:	e00c      	b.n	80091c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	3308      	adds	r3, #8
 80091aa:	60fb      	str	r3, [r7, #12]
 80091ac:	e002      	b.n	80091b4 <vListInsert+0x2e>
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	60fb      	str	r3, [r7, #12]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d2f6      	bcs.n	80091ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	685a      	ldr	r2, [r3, #4]
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	683a      	ldr	r2, [r7, #0]
 80091ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	683a      	ldr	r2, [r7, #0]
 80091da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	1c5a      	adds	r2, r3, #1
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	601a      	str	r2, [r3, #0]
}
 80091ec:	bf00      	nop
 80091ee:	3714      	adds	r7, #20
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	6892      	ldr	r2, [r2, #8]
 800920e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	6852      	ldr	r2, [r2, #4]
 8009218:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	429a      	cmp	r2, r3
 8009222:	d103      	bne.n	800922c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	689a      	ldr	r2, [r3, #8]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	1e5a      	subs	r2, r3, #1
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
}
 8009240:	4618      	mov	r0, r3
 8009242:	3714      	adds	r7, #20
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d10a      	bne.n	8009276 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009272:	bf00      	nop
 8009274:	e7fe      	b.n	8009274 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009276:	f002 f84d 	bl	800b314 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009282:	68f9      	ldr	r1, [r7, #12]
 8009284:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009286:	fb01 f303 	mul.w	r3, r1, r3
 800928a:	441a      	add	r2, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2200      	movs	r2, #0
 8009294:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092a6:	3b01      	subs	r3, #1
 80092a8:	68f9      	ldr	r1, [r7, #12]
 80092aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80092ac:	fb01 f303 	mul.w	r3, r1, r3
 80092b0:	441a      	add	r2, r3
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	22ff      	movs	r2, #255	; 0xff
 80092ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	22ff      	movs	r2, #255	; 0xff
 80092c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d114      	bne.n	80092f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d01a      	beq.n	800930a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	3310      	adds	r3, #16
 80092d8:	4618      	mov	r0, r3
 80092da:	f001 f903 	bl	800a4e4 <xTaskRemoveFromEventList>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d012      	beq.n	800930a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80092e4:	4b0c      	ldr	r3, [pc, #48]	; (8009318 <xQueueGenericReset+0xcc>)
 80092e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092ea:	601a      	str	r2, [r3, #0]
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	f3bf 8f6f 	isb	sy
 80092f4:	e009      	b.n	800930a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	3310      	adds	r3, #16
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7ff fef2 	bl	80090e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	3324      	adds	r3, #36	; 0x24
 8009304:	4618      	mov	r0, r3
 8009306:	f7ff feed 	bl	80090e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800930a:	f002 f833 	bl	800b374 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800930e:	2301      	movs	r3, #1
}
 8009310:	4618      	mov	r0, r3
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	e000ed04 	.word	0xe000ed04

0800931c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800931c:	b580      	push	{r7, lr}
 800931e:	b08e      	sub	sp, #56	; 0x38
 8009320:	af02      	add	r7, sp, #8
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	607a      	str	r2, [r7, #4]
 8009328:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10a      	bne.n	8009346 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009334:	f383 8811 	msr	BASEPRI, r3
 8009338:	f3bf 8f6f 	isb	sy
 800933c:	f3bf 8f4f 	dsb	sy
 8009340:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009342:	bf00      	nop
 8009344:	e7fe      	b.n	8009344 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d10a      	bne.n	8009362 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800934c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009350:	f383 8811 	msr	BASEPRI, r3
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	f3bf 8f4f 	dsb	sy
 800935c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800935e:	bf00      	nop
 8009360:	e7fe      	b.n	8009360 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d002      	beq.n	800936e <xQueueGenericCreateStatic+0x52>
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d001      	beq.n	8009372 <xQueueGenericCreateStatic+0x56>
 800936e:	2301      	movs	r3, #1
 8009370:	e000      	b.n	8009374 <xQueueGenericCreateStatic+0x58>
 8009372:	2300      	movs	r3, #0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d10a      	bne.n	800938e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937c:	f383 8811 	msr	BASEPRI, r3
 8009380:	f3bf 8f6f 	isb	sy
 8009384:	f3bf 8f4f 	dsb	sy
 8009388:	623b      	str	r3, [r7, #32]
}
 800938a:	bf00      	nop
 800938c:	e7fe      	b.n	800938c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d102      	bne.n	800939a <xQueueGenericCreateStatic+0x7e>
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d101      	bne.n	800939e <xQueueGenericCreateStatic+0x82>
 800939a:	2301      	movs	r3, #1
 800939c:	e000      	b.n	80093a0 <xQueueGenericCreateStatic+0x84>
 800939e:	2300      	movs	r3, #0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10a      	bne.n	80093ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80093a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a8:	f383 8811 	msr	BASEPRI, r3
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	61fb      	str	r3, [r7, #28]
}
 80093b6:	bf00      	nop
 80093b8:	e7fe      	b.n	80093b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80093ba:	2350      	movs	r3, #80	; 0x50
 80093bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	2b50      	cmp	r3, #80	; 0x50
 80093c2:	d00a      	beq.n	80093da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80093c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c8:	f383 8811 	msr	BASEPRI, r3
 80093cc:	f3bf 8f6f 	isb	sy
 80093d0:	f3bf 8f4f 	dsb	sy
 80093d4:	61bb      	str	r3, [r7, #24]
}
 80093d6:	bf00      	nop
 80093d8:	e7fe      	b.n	80093d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80093da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80093e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00d      	beq.n	8009402 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80093e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e8:	2201      	movs	r2, #1
 80093ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80093ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80093f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	4613      	mov	r3, r2
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	68b9      	ldr	r1, [r7, #8]
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f000 f805 	bl	800940c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009404:	4618      	mov	r0, r3
 8009406:	3730      	adds	r7, #48	; 0x30
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
 8009418:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d103      	bne.n	8009428 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009420:	69bb      	ldr	r3, [r7, #24]
 8009422:	69ba      	ldr	r2, [r7, #24]
 8009424:	601a      	str	r2, [r3, #0]
 8009426:	e002      	b.n	800942e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	68fa      	ldr	r2, [r7, #12]
 8009432:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	68ba      	ldr	r2, [r7, #8]
 8009438:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800943a:	2101      	movs	r1, #1
 800943c:	69b8      	ldr	r0, [r7, #24]
 800943e:	f7ff ff05 	bl	800924c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009442:	69bb      	ldr	r3, [r7, #24]
 8009444:	78fa      	ldrb	r2, [r7, #3]
 8009446:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800944a:	bf00      	nop
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
	...

08009454 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b08e      	sub	sp, #56	; 0x38
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	607a      	str	r2, [r7, #4]
 8009460:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009462:	2300      	movs	r3, #0
 8009464:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800946a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946c:	2b00      	cmp	r3, #0
 800946e:	d10a      	bne.n	8009486 <xQueueGenericSend+0x32>
	__asm volatile
 8009470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009474:	f383 8811 	msr	BASEPRI, r3
 8009478:	f3bf 8f6f 	isb	sy
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009482:	bf00      	nop
 8009484:	e7fe      	b.n	8009484 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d103      	bne.n	8009494 <xQueueGenericSend+0x40>
 800948c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009490:	2b00      	cmp	r3, #0
 8009492:	d101      	bne.n	8009498 <xQueueGenericSend+0x44>
 8009494:	2301      	movs	r3, #1
 8009496:	e000      	b.n	800949a <xQueueGenericSend+0x46>
 8009498:	2300      	movs	r3, #0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d10a      	bne.n	80094b4 <xQueueGenericSend+0x60>
	__asm volatile
 800949e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a2:	f383 8811 	msr	BASEPRI, r3
 80094a6:	f3bf 8f6f 	isb	sy
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80094b0:	bf00      	nop
 80094b2:	e7fe      	b.n	80094b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	d103      	bne.n	80094c2 <xQueueGenericSend+0x6e>
 80094ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d101      	bne.n	80094c6 <xQueueGenericSend+0x72>
 80094c2:	2301      	movs	r3, #1
 80094c4:	e000      	b.n	80094c8 <xQueueGenericSend+0x74>
 80094c6:	2300      	movs	r3, #0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d10a      	bne.n	80094e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80094cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d0:	f383 8811 	msr	BASEPRI, r3
 80094d4:	f3bf 8f6f 	isb	sy
 80094d8:	f3bf 8f4f 	dsb	sy
 80094dc:	623b      	str	r3, [r7, #32]
}
 80094de:	bf00      	nop
 80094e0:	e7fe      	b.n	80094e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094e2:	f001 f9bd 	bl	800a860 <xTaskGetSchedulerState>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d102      	bne.n	80094f2 <xQueueGenericSend+0x9e>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d101      	bne.n	80094f6 <xQueueGenericSend+0xa2>
 80094f2:	2301      	movs	r3, #1
 80094f4:	e000      	b.n	80094f8 <xQueueGenericSend+0xa4>
 80094f6:	2300      	movs	r3, #0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d10a      	bne.n	8009512 <xQueueGenericSend+0xbe>
	__asm volatile
 80094fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009500:	f383 8811 	msr	BASEPRI, r3
 8009504:	f3bf 8f6f 	isb	sy
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	61fb      	str	r3, [r7, #28]
}
 800950e:	bf00      	nop
 8009510:	e7fe      	b.n	8009510 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009512:	f001 feff 	bl	800b314 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800951a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800951e:	429a      	cmp	r2, r3
 8009520:	d302      	bcc.n	8009528 <xQueueGenericSend+0xd4>
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	2b02      	cmp	r3, #2
 8009526:	d129      	bne.n	800957c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009528:	683a      	ldr	r2, [r7, #0]
 800952a:	68b9      	ldr	r1, [r7, #8]
 800952c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800952e:	f000 fa0b 	bl	8009948 <prvCopyDataToQueue>
 8009532:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009538:	2b00      	cmp	r3, #0
 800953a:	d010      	beq.n	800955e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800953c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953e:	3324      	adds	r3, #36	; 0x24
 8009540:	4618      	mov	r0, r3
 8009542:	f000 ffcf 	bl	800a4e4 <xTaskRemoveFromEventList>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d013      	beq.n	8009574 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800954c:	4b3f      	ldr	r3, [pc, #252]	; (800964c <xQueueGenericSend+0x1f8>)
 800954e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009552:	601a      	str	r2, [r3, #0]
 8009554:	f3bf 8f4f 	dsb	sy
 8009558:	f3bf 8f6f 	isb	sy
 800955c:	e00a      	b.n	8009574 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800955e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009560:	2b00      	cmp	r3, #0
 8009562:	d007      	beq.n	8009574 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009564:	4b39      	ldr	r3, [pc, #228]	; (800964c <xQueueGenericSend+0x1f8>)
 8009566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800956a:	601a      	str	r2, [r3, #0]
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009574:	f001 fefe 	bl	800b374 <vPortExitCritical>
				return pdPASS;
 8009578:	2301      	movs	r3, #1
 800957a:	e063      	b.n	8009644 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d103      	bne.n	800958a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009582:	f001 fef7 	bl	800b374 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009586:	2300      	movs	r3, #0
 8009588:	e05c      	b.n	8009644 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800958a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800958c:	2b00      	cmp	r3, #0
 800958e:	d106      	bne.n	800959e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009590:	f107 0314 	add.w	r3, r7, #20
 8009594:	4618      	mov	r0, r3
 8009596:	f001 f809 	bl	800a5ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800959a:	2301      	movs	r3, #1
 800959c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800959e:	f001 fee9 	bl	800b374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095a2:	f000 fd7b 	bl	800a09c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095a6:	f001 feb5 	bl	800b314 <vPortEnterCritical>
 80095aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095b0:	b25b      	sxtb	r3, r3
 80095b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b6:	d103      	bne.n	80095c0 <xQueueGenericSend+0x16c>
 80095b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095c6:	b25b      	sxtb	r3, r3
 80095c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095cc:	d103      	bne.n	80095d6 <xQueueGenericSend+0x182>
 80095ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d0:	2200      	movs	r2, #0
 80095d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095d6:	f001 fecd 	bl	800b374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095da:	1d3a      	adds	r2, r7, #4
 80095dc:	f107 0314 	add.w	r3, r7, #20
 80095e0:	4611      	mov	r1, r2
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 fff8 	bl	800a5d8 <xTaskCheckForTimeOut>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d124      	bne.n	8009638 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80095ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095f0:	f000 faa2 	bl	8009b38 <prvIsQueueFull>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d018      	beq.n	800962c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80095fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fc:	3310      	adds	r3, #16
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	4611      	mov	r1, r2
 8009602:	4618      	mov	r0, r3
 8009604:	f000 ff1e 	bl	800a444 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800960a:	f000 fa2d 	bl	8009a68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800960e:	f000 fd53 	bl	800a0b8 <xTaskResumeAll>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	f47f af7c 	bne.w	8009512 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800961a:	4b0c      	ldr	r3, [pc, #48]	; (800964c <xQueueGenericSend+0x1f8>)
 800961c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009620:	601a      	str	r2, [r3, #0]
 8009622:	f3bf 8f4f 	dsb	sy
 8009626:	f3bf 8f6f 	isb	sy
 800962a:	e772      	b.n	8009512 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800962c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800962e:	f000 fa1b 	bl	8009a68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009632:	f000 fd41 	bl	800a0b8 <xTaskResumeAll>
 8009636:	e76c      	b.n	8009512 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009638:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800963a:	f000 fa15 	bl	8009a68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800963e:	f000 fd3b 	bl	800a0b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009642:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009644:	4618      	mov	r0, r3
 8009646:	3738      	adds	r7, #56	; 0x38
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}
 800964c:	e000ed04 	.word	0xe000ed04

08009650 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b090      	sub	sp, #64	; 0x40
 8009654:	af00      	add	r7, sp, #0
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	607a      	str	r2, [r7, #4]
 800965c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009664:	2b00      	cmp	r3, #0
 8009666:	d10a      	bne.n	800967e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966c:	f383 8811 	msr	BASEPRI, r3
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800967a:	bf00      	nop
 800967c:	e7fe      	b.n	800967c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d103      	bne.n	800968c <xQueueGenericSendFromISR+0x3c>
 8009684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009688:	2b00      	cmp	r3, #0
 800968a:	d101      	bne.n	8009690 <xQueueGenericSendFromISR+0x40>
 800968c:	2301      	movs	r3, #1
 800968e:	e000      	b.n	8009692 <xQueueGenericSendFromISR+0x42>
 8009690:	2300      	movs	r3, #0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d10a      	bne.n	80096ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969a:	f383 8811 	msr	BASEPRI, r3
 800969e:	f3bf 8f6f 	isb	sy
 80096a2:	f3bf 8f4f 	dsb	sy
 80096a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80096a8:	bf00      	nop
 80096aa:	e7fe      	b.n	80096aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	2b02      	cmp	r3, #2
 80096b0:	d103      	bne.n	80096ba <xQueueGenericSendFromISR+0x6a>
 80096b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d101      	bne.n	80096be <xQueueGenericSendFromISR+0x6e>
 80096ba:	2301      	movs	r3, #1
 80096bc:	e000      	b.n	80096c0 <xQueueGenericSendFromISR+0x70>
 80096be:	2300      	movs	r3, #0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d10a      	bne.n	80096da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80096c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c8:	f383 8811 	msr	BASEPRI, r3
 80096cc:	f3bf 8f6f 	isb	sy
 80096d0:	f3bf 8f4f 	dsb	sy
 80096d4:	623b      	str	r3, [r7, #32]
}
 80096d6:	bf00      	nop
 80096d8:	e7fe      	b.n	80096d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096da:	f001 fefd 	bl	800b4d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80096de:	f3ef 8211 	mrs	r2, BASEPRI
 80096e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e6:	f383 8811 	msr	BASEPRI, r3
 80096ea:	f3bf 8f6f 	isb	sy
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	61fa      	str	r2, [r7, #28]
 80096f4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80096f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80096f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80096fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009702:	429a      	cmp	r2, r3
 8009704:	d302      	bcc.n	800970c <xQueueGenericSendFromISR+0xbc>
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	2b02      	cmp	r3, #2
 800970a:	d12f      	bne.n	800976c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800970c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800971c:	683a      	ldr	r2, [r7, #0]
 800971e:	68b9      	ldr	r1, [r7, #8]
 8009720:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009722:	f000 f911 	bl	8009948 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009726:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800972a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800972e:	d112      	bne.n	8009756 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009734:	2b00      	cmp	r3, #0
 8009736:	d016      	beq.n	8009766 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973a:	3324      	adds	r3, #36	; 0x24
 800973c:	4618      	mov	r0, r3
 800973e:	f000 fed1 	bl	800a4e4 <xTaskRemoveFromEventList>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00e      	beq.n	8009766 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d00b      	beq.n	8009766 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2201      	movs	r2, #1
 8009752:	601a      	str	r2, [r3, #0]
 8009754:	e007      	b.n	8009766 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009756:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800975a:	3301      	adds	r3, #1
 800975c:	b2db      	uxtb	r3, r3
 800975e:	b25a      	sxtb	r2, r3
 8009760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009766:	2301      	movs	r3, #1
 8009768:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800976a:	e001      	b.n	8009770 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800976c:	2300      	movs	r3, #0
 800976e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009772:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800977a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800977c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800977e:	4618      	mov	r0, r3
 8009780:	3740      	adds	r7, #64	; 0x40
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
	...

08009788 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b08c      	sub	sp, #48	; 0x30
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009794:	2300      	movs	r3, #0
 8009796:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800979c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d10a      	bne.n	80097b8 <xQueueReceive+0x30>
	__asm volatile
 80097a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a6:	f383 8811 	msr	BASEPRI, r3
 80097aa:	f3bf 8f6f 	isb	sy
 80097ae:	f3bf 8f4f 	dsb	sy
 80097b2:	623b      	str	r3, [r7, #32]
}
 80097b4:	bf00      	nop
 80097b6:	e7fe      	b.n	80097b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d103      	bne.n	80097c6 <xQueueReceive+0x3e>
 80097be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d101      	bne.n	80097ca <xQueueReceive+0x42>
 80097c6:	2301      	movs	r3, #1
 80097c8:	e000      	b.n	80097cc <xQueueReceive+0x44>
 80097ca:	2300      	movs	r3, #0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d10a      	bne.n	80097e6 <xQueueReceive+0x5e>
	__asm volatile
 80097d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d4:	f383 8811 	msr	BASEPRI, r3
 80097d8:	f3bf 8f6f 	isb	sy
 80097dc:	f3bf 8f4f 	dsb	sy
 80097e0:	61fb      	str	r3, [r7, #28]
}
 80097e2:	bf00      	nop
 80097e4:	e7fe      	b.n	80097e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097e6:	f001 f83b 	bl	800a860 <xTaskGetSchedulerState>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d102      	bne.n	80097f6 <xQueueReceive+0x6e>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d101      	bne.n	80097fa <xQueueReceive+0x72>
 80097f6:	2301      	movs	r3, #1
 80097f8:	e000      	b.n	80097fc <xQueueReceive+0x74>
 80097fa:	2300      	movs	r3, #0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d10a      	bne.n	8009816 <xQueueReceive+0x8e>
	__asm volatile
 8009800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009804:	f383 8811 	msr	BASEPRI, r3
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	61bb      	str	r3, [r7, #24]
}
 8009812:	bf00      	nop
 8009814:	e7fe      	b.n	8009814 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009816:	f001 fd7d 	bl	800b314 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800981a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009822:	2b00      	cmp	r3, #0
 8009824:	d01f      	beq.n	8009866 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009826:	68b9      	ldr	r1, [r7, #8]
 8009828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800982a:	f000 f8f7 	bl	8009a1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800982e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009830:	1e5a      	subs	r2, r3, #1
 8009832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009834:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00f      	beq.n	800985e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800983e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009840:	3310      	adds	r3, #16
 8009842:	4618      	mov	r0, r3
 8009844:	f000 fe4e 	bl	800a4e4 <xTaskRemoveFromEventList>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d007      	beq.n	800985e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800984e:	4b3d      	ldr	r3, [pc, #244]	; (8009944 <xQueueReceive+0x1bc>)
 8009850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009854:	601a      	str	r2, [r3, #0]
 8009856:	f3bf 8f4f 	dsb	sy
 800985a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800985e:	f001 fd89 	bl	800b374 <vPortExitCritical>
				return pdPASS;
 8009862:	2301      	movs	r3, #1
 8009864:	e069      	b.n	800993a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d103      	bne.n	8009874 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800986c:	f001 fd82 	bl	800b374 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009870:	2300      	movs	r3, #0
 8009872:	e062      	b.n	800993a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009876:	2b00      	cmp	r3, #0
 8009878:	d106      	bne.n	8009888 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800987a:	f107 0310 	add.w	r3, r7, #16
 800987e:	4618      	mov	r0, r3
 8009880:	f000 fe94 	bl	800a5ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009884:	2301      	movs	r3, #1
 8009886:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009888:	f001 fd74 	bl	800b374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800988c:	f000 fc06 	bl	800a09c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009890:	f001 fd40 	bl	800b314 <vPortEnterCritical>
 8009894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009896:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800989a:	b25b      	sxtb	r3, r3
 800989c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a0:	d103      	bne.n	80098aa <xQueueReceive+0x122>
 80098a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098b0:	b25b      	sxtb	r3, r3
 80098b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098b6:	d103      	bne.n	80098c0 <xQueueReceive+0x138>
 80098b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ba:	2200      	movs	r2, #0
 80098bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098c0:	f001 fd58 	bl	800b374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098c4:	1d3a      	adds	r2, r7, #4
 80098c6:	f107 0310 	add.w	r3, r7, #16
 80098ca:	4611      	mov	r1, r2
 80098cc:	4618      	mov	r0, r3
 80098ce:	f000 fe83 	bl	800a5d8 <xTaskCheckForTimeOut>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d123      	bne.n	8009920 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098da:	f000 f917 	bl	8009b0c <prvIsQueueEmpty>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d017      	beq.n	8009914 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80098e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e6:	3324      	adds	r3, #36	; 0x24
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	4611      	mov	r1, r2
 80098ec:	4618      	mov	r0, r3
 80098ee:	f000 fda9 	bl	800a444 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80098f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098f4:	f000 f8b8 	bl	8009a68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80098f8:	f000 fbde 	bl	800a0b8 <xTaskResumeAll>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d189      	bne.n	8009816 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009902:	4b10      	ldr	r3, [pc, #64]	; (8009944 <xQueueReceive+0x1bc>)
 8009904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009908:	601a      	str	r2, [r3, #0]
 800990a:	f3bf 8f4f 	dsb	sy
 800990e:	f3bf 8f6f 	isb	sy
 8009912:	e780      	b.n	8009816 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009916:	f000 f8a7 	bl	8009a68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800991a:	f000 fbcd 	bl	800a0b8 <xTaskResumeAll>
 800991e:	e77a      	b.n	8009816 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009922:	f000 f8a1 	bl	8009a68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009926:	f000 fbc7 	bl	800a0b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800992a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800992c:	f000 f8ee 	bl	8009b0c <prvIsQueueEmpty>
 8009930:	4603      	mov	r3, r0
 8009932:	2b00      	cmp	r3, #0
 8009934:	f43f af6f 	beq.w	8009816 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009938:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800993a:	4618      	mov	r0, r3
 800993c:	3730      	adds	r7, #48	; 0x30
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	e000ed04 	.word	0xe000ed04

08009948 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b086      	sub	sp, #24
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009954:	2300      	movs	r3, #0
 8009956:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800995c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009962:	2b00      	cmp	r3, #0
 8009964:	d10d      	bne.n	8009982 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d14d      	bne.n	8009a0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	4618      	mov	r0, r3
 8009974:	f000 ff92 	bl	800a89c <xTaskPriorityDisinherit>
 8009978:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2200      	movs	r2, #0
 800997e:	609a      	str	r2, [r3, #8]
 8009980:	e043      	b.n	8009a0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d119      	bne.n	80099bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6858      	ldr	r0, [r3, #4]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009990:	461a      	mov	r2, r3
 8009992:	68b9      	ldr	r1, [r7, #8]
 8009994:	f008 fd78 	bl	8012488 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	685a      	ldr	r2, [r3, #4]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a0:	441a      	add	r2, r3
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	685a      	ldr	r2, [r3, #4]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d32b      	bcc.n	8009a0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	605a      	str	r2, [r3, #4]
 80099ba:	e026      	b.n	8009a0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	68d8      	ldr	r0, [r3, #12]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c4:	461a      	mov	r2, r3
 80099c6:	68b9      	ldr	r1, [r7, #8]
 80099c8:	f008 fd5e 	bl	8012488 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	68da      	ldr	r2, [r3, #12]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d4:	425b      	negs	r3, r3
 80099d6:	441a      	add	r2, r3
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	68da      	ldr	r2, [r3, #12]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d207      	bcs.n	80099f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	689a      	ldr	r2, [r3, #8]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f0:	425b      	negs	r3, r3
 80099f2:	441a      	add	r2, r3
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d105      	bne.n	8009a0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d002      	beq.n	8009a0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	3b01      	subs	r3, #1
 8009a08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	1c5a      	adds	r2, r3, #1
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009a12:	697b      	ldr	r3, [r7, #20]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3718      	adds	r7, #24
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d018      	beq.n	8009a60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	68da      	ldr	r2, [r3, #12]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a36:	441a      	add	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	68da      	ldr	r2, [r3, #12]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d303      	bcc.n	8009a50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	68d9      	ldr	r1, [r3, #12]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a58:	461a      	mov	r2, r3
 8009a5a:	6838      	ldr	r0, [r7, #0]
 8009a5c:	f008 fd14 	bl	8012488 <memcpy>
	}
}
 8009a60:	bf00      	nop
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009a70:	f001 fc50 	bl	800b314 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a7c:	e011      	b.n	8009aa2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d012      	beq.n	8009aac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	3324      	adds	r3, #36	; 0x24
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f000 fd2a 	bl	800a4e4 <xTaskRemoveFromEventList>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d001      	beq.n	8009a9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009a96:	f000 fe01 	bl	800a69c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009a9a:	7bfb      	ldrb	r3, [r7, #15]
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	dce9      	bgt.n	8009a7e <prvUnlockQueue+0x16>
 8009aaa:	e000      	b.n	8009aae <prvUnlockQueue+0x46>
					break;
 8009aac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	22ff      	movs	r2, #255	; 0xff
 8009ab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009ab6:	f001 fc5d 	bl	800b374 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009aba:	f001 fc2b 	bl	800b314 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ac4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ac6:	e011      	b.n	8009aec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	691b      	ldr	r3, [r3, #16]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d012      	beq.n	8009af6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	3310      	adds	r3, #16
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f000 fd05 	bl	800a4e4 <xTaskRemoveFromEventList>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d001      	beq.n	8009ae4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009ae0:	f000 fddc 	bl	800a69c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009ae4:	7bbb      	ldrb	r3, [r7, #14]
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009aec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	dce9      	bgt.n	8009ac8 <prvUnlockQueue+0x60>
 8009af4:	e000      	b.n	8009af8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009af6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	22ff      	movs	r2, #255	; 0xff
 8009afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009b00:	f001 fc38 	bl	800b374 <vPortExitCritical>
}
 8009b04:	bf00      	nop
 8009b06:	3710      	adds	r7, #16
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b14:	f001 fbfe 	bl	800b314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d102      	bne.n	8009b26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009b20:	2301      	movs	r3, #1
 8009b22:	60fb      	str	r3, [r7, #12]
 8009b24:	e001      	b.n	8009b2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009b26:	2300      	movs	r3, #0
 8009b28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b2a:	f001 fc23 	bl	800b374 <vPortExitCritical>

	return xReturn;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b40:	f001 fbe8 	bl	800b314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d102      	bne.n	8009b56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009b50:	2301      	movs	r3, #1
 8009b52:	60fb      	str	r3, [r7, #12]
 8009b54:	e001      	b.n	8009b5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009b56:	2300      	movs	r3, #0
 8009b58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b5a:	f001 fc0b 	bl	800b374 <vPortExitCritical>

	return xReturn;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b72:	2300      	movs	r3, #0
 8009b74:	60fb      	str	r3, [r7, #12]
 8009b76:	e014      	b.n	8009ba2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009b78:	4a0f      	ldr	r2, [pc, #60]	; (8009bb8 <vQueueAddToRegistry+0x50>)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d10b      	bne.n	8009b9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009b84:	490c      	ldr	r1, [pc, #48]	; (8009bb8 <vQueueAddToRegistry+0x50>)
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	683a      	ldr	r2, [r7, #0]
 8009b8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009b8e:	4a0a      	ldr	r2, [pc, #40]	; (8009bb8 <vQueueAddToRegistry+0x50>)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	00db      	lsls	r3, r3, #3
 8009b94:	4413      	add	r3, r2
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009b9a:	e006      	b.n	8009baa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	60fb      	str	r3, [r7, #12]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2b07      	cmp	r3, #7
 8009ba6:	d9e7      	bls.n	8009b78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009ba8:	bf00      	nop
 8009baa:	bf00      	nop
 8009bac:	3714      	adds	r7, #20
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr
 8009bb6:	bf00      	nop
 8009bb8:	20004fd4 	.word	0x20004fd4

08009bbc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b086      	sub	sp, #24
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009bcc:	f001 fba2 	bl	800b314 <vPortEnterCritical>
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bd6:	b25b      	sxtb	r3, r3
 8009bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bdc:	d103      	bne.n	8009be6 <vQueueWaitForMessageRestricted+0x2a>
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bec:	b25b      	sxtb	r3, r3
 8009bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bf2:	d103      	bne.n	8009bfc <vQueueWaitForMessageRestricted+0x40>
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009bfc:	f001 fbba 	bl	800b374 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d106      	bne.n	8009c16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	3324      	adds	r3, #36	; 0x24
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	68b9      	ldr	r1, [r7, #8]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f000 fc3b 	bl	800a48c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009c16:	6978      	ldr	r0, [r7, #20]
 8009c18:	f7ff ff26 	bl	8009a68 <prvUnlockQueue>
	}
 8009c1c:	bf00      	nop
 8009c1e:	3718      	adds	r7, #24
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b08e      	sub	sp, #56	; 0x38
 8009c28:	af04      	add	r7, sp, #16
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
 8009c30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d10a      	bne.n	8009c4e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3c:	f383 8811 	msr	BASEPRI, r3
 8009c40:	f3bf 8f6f 	isb	sy
 8009c44:	f3bf 8f4f 	dsb	sy
 8009c48:	623b      	str	r3, [r7, #32]
}
 8009c4a:	bf00      	nop
 8009c4c:	e7fe      	b.n	8009c4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d10a      	bne.n	8009c6a <xTaskCreateStatic+0x46>
	__asm volatile
 8009c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c58:	f383 8811 	msr	BASEPRI, r3
 8009c5c:	f3bf 8f6f 	isb	sy
 8009c60:	f3bf 8f4f 	dsb	sy
 8009c64:	61fb      	str	r3, [r7, #28]
}
 8009c66:	bf00      	nop
 8009c68:	e7fe      	b.n	8009c68 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009c6a:	235c      	movs	r3, #92	; 0x5c
 8009c6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	2b5c      	cmp	r3, #92	; 0x5c
 8009c72:	d00a      	beq.n	8009c8a <xTaskCreateStatic+0x66>
	__asm volatile
 8009c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c78:	f383 8811 	msr	BASEPRI, r3
 8009c7c:	f3bf 8f6f 	isb	sy
 8009c80:	f3bf 8f4f 	dsb	sy
 8009c84:	61bb      	str	r3, [r7, #24]
}
 8009c86:	bf00      	nop
 8009c88:	e7fe      	b.n	8009c88 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009c8a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d01e      	beq.n	8009cd0 <xTaskCreateStatic+0xac>
 8009c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d01b      	beq.n	8009cd0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c9a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ca0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca4:	2202      	movs	r2, #2
 8009ca6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009caa:	2300      	movs	r3, #0
 8009cac:	9303      	str	r3, [sp, #12]
 8009cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb0:	9302      	str	r3, [sp, #8]
 8009cb2:	f107 0314 	add.w	r3, r7, #20
 8009cb6:	9301      	str	r3, [sp, #4]
 8009cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cba:	9300      	str	r3, [sp, #0]
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	68b9      	ldr	r1, [r7, #8]
 8009cc2:	68f8      	ldr	r0, [r7, #12]
 8009cc4:	f000 f850 	bl	8009d68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009cc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009cca:	f000 f8dd 	bl	8009e88 <prvAddNewTaskToReadyList>
 8009cce:	e001      	b.n	8009cd4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009cd4:	697b      	ldr	r3, [r7, #20]
	}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3728      	adds	r7, #40	; 0x28
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b08c      	sub	sp, #48	; 0x30
 8009ce2:	af04      	add	r7, sp, #16
 8009ce4:	60f8      	str	r0, [r7, #12]
 8009ce6:	60b9      	str	r1, [r7, #8]
 8009ce8:	603b      	str	r3, [r7, #0]
 8009cea:	4613      	mov	r3, r2
 8009cec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009cee:	88fb      	ldrh	r3, [r7, #6]
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f001 fc30 	bl	800b558 <pvPortMalloc>
 8009cf8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00e      	beq.n	8009d1e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d00:	205c      	movs	r0, #92	; 0x5c
 8009d02:	f001 fc29 	bl	800b558 <pvPortMalloc>
 8009d06:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d003      	beq.n	8009d16 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d0e:	69fb      	ldr	r3, [r7, #28]
 8009d10:	697a      	ldr	r2, [r7, #20]
 8009d12:	631a      	str	r2, [r3, #48]	; 0x30
 8009d14:	e005      	b.n	8009d22 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d16:	6978      	ldr	r0, [r7, #20]
 8009d18:	f001 fcea 	bl	800b6f0 <vPortFree>
 8009d1c:	e001      	b.n	8009d22 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d22:	69fb      	ldr	r3, [r7, #28]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d017      	beq.n	8009d58 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d30:	88fa      	ldrh	r2, [r7, #6]
 8009d32:	2300      	movs	r3, #0
 8009d34:	9303      	str	r3, [sp, #12]
 8009d36:	69fb      	ldr	r3, [r7, #28]
 8009d38:	9302      	str	r3, [sp, #8]
 8009d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d3c:	9301      	str	r3, [sp, #4]
 8009d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d40:	9300      	str	r3, [sp, #0]
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	68b9      	ldr	r1, [r7, #8]
 8009d46:	68f8      	ldr	r0, [r7, #12]
 8009d48:	f000 f80e 	bl	8009d68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d4c:	69f8      	ldr	r0, [r7, #28]
 8009d4e:	f000 f89b 	bl	8009e88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009d52:	2301      	movs	r3, #1
 8009d54:	61bb      	str	r3, [r7, #24]
 8009d56:	e002      	b.n	8009d5e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009d58:	f04f 33ff 	mov.w	r3, #4294967295
 8009d5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009d5e:	69bb      	ldr	r3, [r7, #24]
	}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3720      	adds	r7, #32
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b088      	sub	sp, #32
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]
 8009d74:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	461a      	mov	r2, r3
 8009d80:	21a5      	movs	r1, #165	; 0xa5
 8009d82:	f008 fb8f 	bl	80124a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009d90:	3b01      	subs	r3, #1
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	4413      	add	r3, r2
 8009d96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	f023 0307 	bic.w	r3, r3, #7
 8009d9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	f003 0307 	and.w	r3, r3, #7
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00a      	beq.n	8009dc0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dae:	f383 8811 	msr	BASEPRI, r3
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	f3bf 8f4f 	dsb	sy
 8009dba:	617b      	str	r3, [r7, #20]
}
 8009dbc:	bf00      	nop
 8009dbe:	e7fe      	b.n	8009dbe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d01f      	beq.n	8009e06 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	61fb      	str	r3, [r7, #28]
 8009dca:	e012      	b.n	8009df2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009dcc:	68ba      	ldr	r2, [r7, #8]
 8009dce:	69fb      	ldr	r3, [r7, #28]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	7819      	ldrb	r1, [r3, #0]
 8009dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dd6:	69fb      	ldr	r3, [r7, #28]
 8009dd8:	4413      	add	r3, r2
 8009dda:	3334      	adds	r3, #52	; 0x34
 8009ddc:	460a      	mov	r2, r1
 8009dde:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009de0:	68ba      	ldr	r2, [r7, #8]
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	4413      	add	r3, r2
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d006      	beq.n	8009dfa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	3301      	adds	r3, #1
 8009df0:	61fb      	str	r3, [r7, #28]
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	2b0f      	cmp	r3, #15
 8009df6:	d9e9      	bls.n	8009dcc <prvInitialiseNewTask+0x64>
 8009df8:	e000      	b.n	8009dfc <prvInitialiseNewTask+0x94>
			{
				break;
 8009dfa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e04:	e003      	b.n	8009e0e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e10:	2b37      	cmp	r3, #55	; 0x37
 8009e12:	d901      	bls.n	8009e18 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e14:	2337      	movs	r3, #55	; 0x37
 8009e16:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e1c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e22:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e26:	2200      	movs	r2, #0
 8009e28:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2c:	3304      	adds	r3, #4
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7ff f978 	bl	8009124 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e36:	3318      	adds	r3, #24
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7ff f973 	bl	8009124 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e52:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e56:	2200      	movs	r2, #0
 8009e58:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	68f9      	ldr	r1, [r7, #12]
 8009e66:	69b8      	ldr	r0, [r7, #24]
 8009e68:	f001 f928 	bl	800b0bc <pxPortInitialiseStack>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d002      	beq.n	8009e7e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e7e:	bf00      	nop
 8009e80:	3720      	adds	r7, #32
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
	...

08009e88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009e90:	f001 fa40 	bl	800b314 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009e94:	4b2d      	ldr	r3, [pc, #180]	; (8009f4c <prvAddNewTaskToReadyList+0xc4>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	4a2c      	ldr	r2, [pc, #176]	; (8009f4c <prvAddNewTaskToReadyList+0xc4>)
 8009e9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009e9e:	4b2c      	ldr	r3, [pc, #176]	; (8009f50 <prvAddNewTaskToReadyList+0xc8>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d109      	bne.n	8009eba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009ea6:	4a2a      	ldr	r2, [pc, #168]	; (8009f50 <prvAddNewTaskToReadyList+0xc8>)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009eac:	4b27      	ldr	r3, [pc, #156]	; (8009f4c <prvAddNewTaskToReadyList+0xc4>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d110      	bne.n	8009ed6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009eb4:	f000 fc16 	bl	800a6e4 <prvInitialiseTaskLists>
 8009eb8:	e00d      	b.n	8009ed6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009eba:	4b26      	ldr	r3, [pc, #152]	; (8009f54 <prvAddNewTaskToReadyList+0xcc>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d109      	bne.n	8009ed6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009ec2:	4b23      	ldr	r3, [pc, #140]	; (8009f50 <prvAddNewTaskToReadyList+0xc8>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d802      	bhi.n	8009ed6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009ed0:	4a1f      	ldr	r2, [pc, #124]	; (8009f50 <prvAddNewTaskToReadyList+0xc8>)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009ed6:	4b20      	ldr	r3, [pc, #128]	; (8009f58 <prvAddNewTaskToReadyList+0xd0>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	3301      	adds	r3, #1
 8009edc:	4a1e      	ldr	r2, [pc, #120]	; (8009f58 <prvAddNewTaskToReadyList+0xd0>)
 8009ede:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009ee0:	4b1d      	ldr	r3, [pc, #116]	; (8009f58 <prvAddNewTaskToReadyList+0xd0>)
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eec:	4b1b      	ldr	r3, [pc, #108]	; (8009f5c <prvAddNewTaskToReadyList+0xd4>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d903      	bls.n	8009efc <prvAddNewTaskToReadyList+0x74>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef8:	4a18      	ldr	r2, [pc, #96]	; (8009f5c <prvAddNewTaskToReadyList+0xd4>)
 8009efa:	6013      	str	r3, [r2, #0]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f00:	4613      	mov	r3, r2
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	4413      	add	r3, r2
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	4a15      	ldr	r2, [pc, #84]	; (8009f60 <prvAddNewTaskToReadyList+0xd8>)
 8009f0a:	441a      	add	r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	3304      	adds	r3, #4
 8009f10:	4619      	mov	r1, r3
 8009f12:	4610      	mov	r0, r2
 8009f14:	f7ff f913 	bl	800913e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009f18:	f001 fa2c 	bl	800b374 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009f1c:	4b0d      	ldr	r3, [pc, #52]	; (8009f54 <prvAddNewTaskToReadyList+0xcc>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00e      	beq.n	8009f42 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009f24:	4b0a      	ldr	r3, [pc, #40]	; (8009f50 <prvAddNewTaskToReadyList+0xc8>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d207      	bcs.n	8009f42 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009f32:	4b0c      	ldr	r3, [pc, #48]	; (8009f64 <prvAddNewTaskToReadyList+0xdc>)
 8009f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f38:	601a      	str	r2, [r3, #0]
 8009f3a:	f3bf 8f4f 	dsb	sy
 8009f3e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f42:	bf00      	nop
 8009f44:	3708      	adds	r7, #8
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	200011e8 	.word	0x200011e8
 8009f50:	20000d14 	.word	0x20000d14
 8009f54:	200011f4 	.word	0x200011f4
 8009f58:	20001204 	.word	0x20001204
 8009f5c:	200011f0 	.word	0x200011f0
 8009f60:	20000d18 	.word	0x20000d18
 8009f64:	e000ed04 	.word	0xe000ed04

08009f68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009f70:	2300      	movs	r3, #0
 8009f72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d017      	beq.n	8009faa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009f7a:	4b13      	ldr	r3, [pc, #76]	; (8009fc8 <vTaskDelay+0x60>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d00a      	beq.n	8009f98 <vTaskDelay+0x30>
	__asm volatile
 8009f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f86:	f383 8811 	msr	BASEPRI, r3
 8009f8a:	f3bf 8f6f 	isb	sy
 8009f8e:	f3bf 8f4f 	dsb	sy
 8009f92:	60bb      	str	r3, [r7, #8]
}
 8009f94:	bf00      	nop
 8009f96:	e7fe      	b.n	8009f96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009f98:	f000 f880 	bl	800a09c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 fcea 	bl	800a978 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009fa4:	f000 f888 	bl	800a0b8 <xTaskResumeAll>
 8009fa8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d107      	bne.n	8009fc0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009fb0:	4b06      	ldr	r3, [pc, #24]	; (8009fcc <vTaskDelay+0x64>)
 8009fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fb6:	601a      	str	r2, [r3, #0]
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009fc0:	bf00      	nop
 8009fc2:	3710      	adds	r7, #16
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	20001210 	.word	0x20001210
 8009fcc:	e000ed04 	.word	0xe000ed04

08009fd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b08a      	sub	sp, #40	; 0x28
 8009fd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009fde:	463a      	mov	r2, r7
 8009fe0:	1d39      	adds	r1, r7, #4
 8009fe2:	f107 0308 	add.w	r3, r7, #8
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7ff f848 	bl	800907c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009fec:	6839      	ldr	r1, [r7, #0]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	68ba      	ldr	r2, [r7, #8]
 8009ff2:	9202      	str	r2, [sp, #8]
 8009ff4:	9301      	str	r3, [sp, #4]
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	9300      	str	r3, [sp, #0]
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	460a      	mov	r2, r1
 8009ffe:	4921      	ldr	r1, [pc, #132]	; (800a084 <vTaskStartScheduler+0xb4>)
 800a000:	4821      	ldr	r0, [pc, #132]	; (800a088 <vTaskStartScheduler+0xb8>)
 800a002:	f7ff fe0f 	bl	8009c24 <xTaskCreateStatic>
 800a006:	4603      	mov	r3, r0
 800a008:	4a20      	ldr	r2, [pc, #128]	; (800a08c <vTaskStartScheduler+0xbc>)
 800a00a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a00c:	4b1f      	ldr	r3, [pc, #124]	; (800a08c <vTaskStartScheduler+0xbc>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d002      	beq.n	800a01a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a014:	2301      	movs	r3, #1
 800a016:	617b      	str	r3, [r7, #20]
 800a018:	e001      	b.n	800a01e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a01a:	2300      	movs	r3, #0
 800a01c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	2b01      	cmp	r3, #1
 800a022:	d102      	bne.n	800a02a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a024:	f000 fcfc 	bl	800aa20 <xTimerCreateTimerTask>
 800a028:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d116      	bne.n	800a05e <vTaskStartScheduler+0x8e>
	__asm volatile
 800a030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	613b      	str	r3, [r7, #16]
}
 800a042:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a044:	4b12      	ldr	r3, [pc, #72]	; (800a090 <vTaskStartScheduler+0xc0>)
 800a046:	f04f 32ff 	mov.w	r2, #4294967295
 800a04a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a04c:	4b11      	ldr	r3, [pc, #68]	; (800a094 <vTaskStartScheduler+0xc4>)
 800a04e:	2201      	movs	r2, #1
 800a050:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a052:	4b11      	ldr	r3, [pc, #68]	; (800a098 <vTaskStartScheduler+0xc8>)
 800a054:	2200      	movs	r2, #0
 800a056:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a058:	f001 f8ba 	bl	800b1d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a05c:	e00e      	b.n	800a07c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a064:	d10a      	bne.n	800a07c <vTaskStartScheduler+0xac>
	__asm volatile
 800a066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06a:	f383 8811 	msr	BASEPRI, r3
 800a06e:	f3bf 8f6f 	isb	sy
 800a072:	f3bf 8f4f 	dsb	sy
 800a076:	60fb      	str	r3, [r7, #12]
}
 800a078:	bf00      	nop
 800a07a:	e7fe      	b.n	800a07a <vTaskStartScheduler+0xaa>
}
 800a07c:	bf00      	nop
 800a07e:	3718      	adds	r7, #24
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}
 800a084:	0801262c 	.word	0x0801262c
 800a088:	0800a6b5 	.word	0x0800a6b5
 800a08c:	2000120c 	.word	0x2000120c
 800a090:	20001208 	.word	0x20001208
 800a094:	200011f4 	.word	0x200011f4
 800a098:	200011ec 	.word	0x200011ec

0800a09c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a09c:	b480      	push	{r7}
 800a09e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a0a0:	4b04      	ldr	r3, [pc, #16]	; (800a0b4 <vTaskSuspendAll+0x18>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	4a03      	ldr	r2, [pc, #12]	; (800a0b4 <vTaskSuspendAll+0x18>)
 800a0a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a0aa:	bf00      	nop
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr
 800a0b4:	20001210 	.word	0x20001210

0800a0b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a0c6:	4b42      	ldr	r3, [pc, #264]	; (800a1d0 <xTaskResumeAll+0x118>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d10a      	bne.n	800a0e4 <xTaskResumeAll+0x2c>
	__asm volatile
 800a0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d2:	f383 8811 	msr	BASEPRI, r3
 800a0d6:	f3bf 8f6f 	isb	sy
 800a0da:	f3bf 8f4f 	dsb	sy
 800a0de:	603b      	str	r3, [r7, #0]
}
 800a0e0:	bf00      	nop
 800a0e2:	e7fe      	b.n	800a0e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a0e4:	f001 f916 	bl	800b314 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a0e8:	4b39      	ldr	r3, [pc, #228]	; (800a1d0 <xTaskResumeAll+0x118>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	3b01      	subs	r3, #1
 800a0ee:	4a38      	ldr	r2, [pc, #224]	; (800a1d0 <xTaskResumeAll+0x118>)
 800a0f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0f2:	4b37      	ldr	r3, [pc, #220]	; (800a1d0 <xTaskResumeAll+0x118>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d162      	bne.n	800a1c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a0fa:	4b36      	ldr	r3, [pc, #216]	; (800a1d4 <xTaskResumeAll+0x11c>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d05e      	beq.n	800a1c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a102:	e02f      	b.n	800a164 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a104:	4b34      	ldr	r3, [pc, #208]	; (800a1d8 <xTaskResumeAll+0x120>)
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	3318      	adds	r3, #24
 800a110:	4618      	mov	r0, r3
 800a112:	f7ff f871 	bl	80091f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	3304      	adds	r3, #4
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7ff f86c 	bl	80091f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a124:	4b2d      	ldr	r3, [pc, #180]	; (800a1dc <xTaskResumeAll+0x124>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d903      	bls.n	800a134 <xTaskResumeAll+0x7c>
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a130:	4a2a      	ldr	r2, [pc, #168]	; (800a1dc <xTaskResumeAll+0x124>)
 800a132:	6013      	str	r3, [r2, #0]
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a138:	4613      	mov	r3, r2
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	4413      	add	r3, r2
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	4a27      	ldr	r2, [pc, #156]	; (800a1e0 <xTaskResumeAll+0x128>)
 800a142:	441a      	add	r2, r3
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	3304      	adds	r3, #4
 800a148:	4619      	mov	r1, r3
 800a14a:	4610      	mov	r0, r2
 800a14c:	f7fe fff7 	bl	800913e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a154:	4b23      	ldr	r3, [pc, #140]	; (800a1e4 <xTaskResumeAll+0x12c>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d302      	bcc.n	800a164 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a15e:	4b22      	ldr	r3, [pc, #136]	; (800a1e8 <xTaskResumeAll+0x130>)
 800a160:	2201      	movs	r2, #1
 800a162:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a164:	4b1c      	ldr	r3, [pc, #112]	; (800a1d8 <xTaskResumeAll+0x120>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d1cb      	bne.n	800a104 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d001      	beq.n	800a176 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a172:	f000 fb55 	bl	800a820 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a176:	4b1d      	ldr	r3, [pc, #116]	; (800a1ec <xTaskResumeAll+0x134>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d010      	beq.n	800a1a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a182:	f000 f847 	bl	800a214 <xTaskIncrementTick>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d002      	beq.n	800a192 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a18c:	4b16      	ldr	r3, [pc, #88]	; (800a1e8 <xTaskResumeAll+0x130>)
 800a18e:	2201      	movs	r2, #1
 800a190:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	3b01      	subs	r3, #1
 800a196:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d1f1      	bne.n	800a182 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a19e:	4b13      	ldr	r3, [pc, #76]	; (800a1ec <xTaskResumeAll+0x134>)
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a1a4:	4b10      	ldr	r3, [pc, #64]	; (800a1e8 <xTaskResumeAll+0x130>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d009      	beq.n	800a1c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a1b0:	4b0f      	ldr	r3, [pc, #60]	; (800a1f0 <xTaskResumeAll+0x138>)
 800a1b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1b6:	601a      	str	r2, [r3, #0]
 800a1b8:	f3bf 8f4f 	dsb	sy
 800a1bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1c0:	f001 f8d8 	bl	800b374 <vPortExitCritical>

	return xAlreadyYielded;
 800a1c4:	68bb      	ldr	r3, [r7, #8]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	20001210 	.word	0x20001210
 800a1d4:	200011e8 	.word	0x200011e8
 800a1d8:	200011a8 	.word	0x200011a8
 800a1dc:	200011f0 	.word	0x200011f0
 800a1e0:	20000d18 	.word	0x20000d18
 800a1e4:	20000d14 	.word	0x20000d14
 800a1e8:	200011fc 	.word	0x200011fc
 800a1ec:	200011f8 	.word	0x200011f8
 800a1f0:	e000ed04 	.word	0xe000ed04

0800a1f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a1fa:	4b05      	ldr	r3, [pc, #20]	; (800a210 <xTaskGetTickCount+0x1c>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a200:	687b      	ldr	r3, [r7, #4]
}
 800a202:	4618      	mov	r0, r3
 800a204:	370c      	adds	r7, #12
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	200011ec 	.word	0x200011ec

0800a214 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b086      	sub	sp, #24
 800a218:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a21a:	2300      	movs	r3, #0
 800a21c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a21e:	4b4f      	ldr	r3, [pc, #316]	; (800a35c <xTaskIncrementTick+0x148>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	f040 808f 	bne.w	800a346 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a228:	4b4d      	ldr	r3, [pc, #308]	; (800a360 <xTaskIncrementTick+0x14c>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	3301      	adds	r3, #1
 800a22e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a230:	4a4b      	ldr	r2, [pc, #300]	; (800a360 <xTaskIncrementTick+0x14c>)
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d120      	bne.n	800a27e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a23c:	4b49      	ldr	r3, [pc, #292]	; (800a364 <xTaskIncrementTick+0x150>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d00a      	beq.n	800a25c <xTaskIncrementTick+0x48>
	__asm volatile
 800a246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24a:	f383 8811 	msr	BASEPRI, r3
 800a24e:	f3bf 8f6f 	isb	sy
 800a252:	f3bf 8f4f 	dsb	sy
 800a256:	603b      	str	r3, [r7, #0]
}
 800a258:	bf00      	nop
 800a25a:	e7fe      	b.n	800a25a <xTaskIncrementTick+0x46>
 800a25c:	4b41      	ldr	r3, [pc, #260]	; (800a364 <xTaskIncrementTick+0x150>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	60fb      	str	r3, [r7, #12]
 800a262:	4b41      	ldr	r3, [pc, #260]	; (800a368 <xTaskIncrementTick+0x154>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a3f      	ldr	r2, [pc, #252]	; (800a364 <xTaskIncrementTick+0x150>)
 800a268:	6013      	str	r3, [r2, #0]
 800a26a:	4a3f      	ldr	r2, [pc, #252]	; (800a368 <xTaskIncrementTick+0x154>)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	6013      	str	r3, [r2, #0]
 800a270:	4b3e      	ldr	r3, [pc, #248]	; (800a36c <xTaskIncrementTick+0x158>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	3301      	adds	r3, #1
 800a276:	4a3d      	ldr	r2, [pc, #244]	; (800a36c <xTaskIncrementTick+0x158>)
 800a278:	6013      	str	r3, [r2, #0]
 800a27a:	f000 fad1 	bl	800a820 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a27e:	4b3c      	ldr	r3, [pc, #240]	; (800a370 <xTaskIncrementTick+0x15c>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	693a      	ldr	r2, [r7, #16]
 800a284:	429a      	cmp	r2, r3
 800a286:	d349      	bcc.n	800a31c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a288:	4b36      	ldr	r3, [pc, #216]	; (800a364 <xTaskIncrementTick+0x150>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d104      	bne.n	800a29c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a292:	4b37      	ldr	r3, [pc, #220]	; (800a370 <xTaskIncrementTick+0x15c>)
 800a294:	f04f 32ff 	mov.w	r2, #4294967295
 800a298:	601a      	str	r2, [r3, #0]
					break;
 800a29a:	e03f      	b.n	800a31c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a29c:	4b31      	ldr	r3, [pc, #196]	; (800a364 <xTaskIncrementTick+0x150>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a2ac:	693a      	ldr	r2, [r7, #16]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d203      	bcs.n	800a2bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a2b4:	4a2e      	ldr	r2, [pc, #184]	; (800a370 <xTaskIncrementTick+0x15c>)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a2ba:	e02f      	b.n	800a31c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	3304      	adds	r3, #4
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7fe ff99 	bl	80091f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d004      	beq.n	800a2d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	3318      	adds	r3, #24
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f7fe ff90 	bl	80091f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2dc:	4b25      	ldr	r3, [pc, #148]	; (800a374 <xTaskIncrementTick+0x160>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d903      	bls.n	800a2ec <xTaskIncrementTick+0xd8>
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e8:	4a22      	ldr	r2, [pc, #136]	; (800a374 <xTaskIncrementTick+0x160>)
 800a2ea:	6013      	str	r3, [r2, #0]
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	4413      	add	r3, r2
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	4a1f      	ldr	r2, [pc, #124]	; (800a378 <xTaskIncrementTick+0x164>)
 800a2fa:	441a      	add	r2, r3
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	3304      	adds	r3, #4
 800a300:	4619      	mov	r1, r3
 800a302:	4610      	mov	r0, r2
 800a304:	f7fe ff1b 	bl	800913e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a30c:	4b1b      	ldr	r3, [pc, #108]	; (800a37c <xTaskIncrementTick+0x168>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a312:	429a      	cmp	r2, r3
 800a314:	d3b8      	bcc.n	800a288 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a316:	2301      	movs	r3, #1
 800a318:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a31a:	e7b5      	b.n	800a288 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a31c:	4b17      	ldr	r3, [pc, #92]	; (800a37c <xTaskIncrementTick+0x168>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a322:	4915      	ldr	r1, [pc, #84]	; (800a378 <xTaskIncrementTick+0x164>)
 800a324:	4613      	mov	r3, r2
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	4413      	add	r3, r2
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	440b      	add	r3, r1
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d901      	bls.n	800a338 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a334:	2301      	movs	r3, #1
 800a336:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a338:	4b11      	ldr	r3, [pc, #68]	; (800a380 <xTaskIncrementTick+0x16c>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d007      	beq.n	800a350 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a340:	2301      	movs	r3, #1
 800a342:	617b      	str	r3, [r7, #20]
 800a344:	e004      	b.n	800a350 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a346:	4b0f      	ldr	r3, [pc, #60]	; (800a384 <xTaskIncrementTick+0x170>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	3301      	adds	r3, #1
 800a34c:	4a0d      	ldr	r2, [pc, #52]	; (800a384 <xTaskIncrementTick+0x170>)
 800a34e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a350:	697b      	ldr	r3, [r7, #20]
}
 800a352:	4618      	mov	r0, r3
 800a354:	3718      	adds	r7, #24
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	20001210 	.word	0x20001210
 800a360:	200011ec 	.word	0x200011ec
 800a364:	200011a0 	.word	0x200011a0
 800a368:	200011a4 	.word	0x200011a4
 800a36c:	20001200 	.word	0x20001200
 800a370:	20001208 	.word	0x20001208
 800a374:	200011f0 	.word	0x200011f0
 800a378:	20000d18 	.word	0x20000d18
 800a37c:	20000d14 	.word	0x20000d14
 800a380:	200011fc 	.word	0x200011fc
 800a384:	200011f8 	.word	0x200011f8

0800a388 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a38e:	4b28      	ldr	r3, [pc, #160]	; (800a430 <vTaskSwitchContext+0xa8>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d003      	beq.n	800a39e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a396:	4b27      	ldr	r3, [pc, #156]	; (800a434 <vTaskSwitchContext+0xac>)
 800a398:	2201      	movs	r2, #1
 800a39a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a39c:	e041      	b.n	800a422 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a39e:	4b25      	ldr	r3, [pc, #148]	; (800a434 <vTaskSwitchContext+0xac>)
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3a4:	4b24      	ldr	r3, [pc, #144]	; (800a438 <vTaskSwitchContext+0xb0>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	60fb      	str	r3, [r7, #12]
 800a3aa:	e010      	b.n	800a3ce <vTaskSwitchContext+0x46>
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d10a      	bne.n	800a3c8 <vTaskSwitchContext+0x40>
	__asm volatile
 800a3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b6:	f383 8811 	msr	BASEPRI, r3
 800a3ba:	f3bf 8f6f 	isb	sy
 800a3be:	f3bf 8f4f 	dsb	sy
 800a3c2:	607b      	str	r3, [r7, #4]
}
 800a3c4:	bf00      	nop
 800a3c6:	e7fe      	b.n	800a3c6 <vTaskSwitchContext+0x3e>
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	60fb      	str	r3, [r7, #12]
 800a3ce:	491b      	ldr	r1, [pc, #108]	; (800a43c <vTaskSwitchContext+0xb4>)
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	4413      	add	r3, r2
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	440b      	add	r3, r1
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d0e4      	beq.n	800a3ac <vTaskSwitchContext+0x24>
 800a3e2:	68fa      	ldr	r2, [r7, #12]
 800a3e4:	4613      	mov	r3, r2
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	4413      	add	r3, r2
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	4a13      	ldr	r2, [pc, #76]	; (800a43c <vTaskSwitchContext+0xb4>)
 800a3ee:	4413      	add	r3, r2
 800a3f0:	60bb      	str	r3, [r7, #8]
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	685a      	ldr	r2, [r3, #4]
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	605a      	str	r2, [r3, #4]
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	685a      	ldr	r2, [r3, #4]
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	3308      	adds	r3, #8
 800a404:	429a      	cmp	r2, r3
 800a406:	d104      	bne.n	800a412 <vTaskSwitchContext+0x8a>
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	685a      	ldr	r2, [r3, #4]
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	605a      	str	r2, [r3, #4]
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	4a09      	ldr	r2, [pc, #36]	; (800a440 <vTaskSwitchContext+0xb8>)
 800a41a:	6013      	str	r3, [r2, #0]
 800a41c:	4a06      	ldr	r2, [pc, #24]	; (800a438 <vTaskSwitchContext+0xb0>)
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	6013      	str	r3, [r2, #0]
}
 800a422:	bf00      	nop
 800a424:	3714      	adds	r7, #20
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr
 800a42e:	bf00      	nop
 800a430:	20001210 	.word	0x20001210
 800a434:	200011fc 	.word	0x200011fc
 800a438:	200011f0 	.word	0x200011f0
 800a43c:	20000d18 	.word	0x20000d18
 800a440:	20000d14 	.word	0x20000d14

0800a444 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d10a      	bne.n	800a46a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a458:	f383 8811 	msr	BASEPRI, r3
 800a45c:	f3bf 8f6f 	isb	sy
 800a460:	f3bf 8f4f 	dsb	sy
 800a464:	60fb      	str	r3, [r7, #12]
}
 800a466:	bf00      	nop
 800a468:	e7fe      	b.n	800a468 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a46a:	4b07      	ldr	r3, [pc, #28]	; (800a488 <vTaskPlaceOnEventList+0x44>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	3318      	adds	r3, #24
 800a470:	4619      	mov	r1, r3
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f7fe fe87 	bl	8009186 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a478:	2101      	movs	r1, #1
 800a47a:	6838      	ldr	r0, [r7, #0]
 800a47c:	f000 fa7c 	bl	800a978 <prvAddCurrentTaskToDelayedList>
}
 800a480:	bf00      	nop
 800a482:	3710      	adds	r7, #16
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}
 800a488:	20000d14 	.word	0x20000d14

0800a48c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b086      	sub	sp, #24
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d10a      	bne.n	800a4b4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a2:	f383 8811 	msr	BASEPRI, r3
 800a4a6:	f3bf 8f6f 	isb	sy
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	617b      	str	r3, [r7, #20]
}
 800a4b0:	bf00      	nop
 800a4b2:	e7fe      	b.n	800a4b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a4b4:	4b0a      	ldr	r3, [pc, #40]	; (800a4e0 <vTaskPlaceOnEventListRestricted+0x54>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	3318      	adds	r3, #24
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f7fe fe3e 	bl	800913e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d002      	beq.n	800a4ce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a4c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a4ce:	6879      	ldr	r1, [r7, #4]
 800a4d0:	68b8      	ldr	r0, [r7, #8]
 800a4d2:	f000 fa51 	bl	800a978 <prvAddCurrentTaskToDelayedList>
	}
 800a4d6:	bf00      	nop
 800a4d8:	3718      	adds	r7, #24
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	20000d14 	.word	0x20000d14

0800a4e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b086      	sub	sp, #24
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d10a      	bne.n	800a510 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fe:	f383 8811 	msr	BASEPRI, r3
 800a502:	f3bf 8f6f 	isb	sy
 800a506:	f3bf 8f4f 	dsb	sy
 800a50a:	60fb      	str	r3, [r7, #12]
}
 800a50c:	bf00      	nop
 800a50e:	e7fe      	b.n	800a50e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	3318      	adds	r3, #24
 800a514:	4618      	mov	r0, r3
 800a516:	f7fe fe6f 	bl	80091f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a51a:	4b1e      	ldr	r3, [pc, #120]	; (800a594 <xTaskRemoveFromEventList+0xb0>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d11d      	bne.n	800a55e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	3304      	adds	r3, #4
 800a526:	4618      	mov	r0, r3
 800a528:	f7fe fe66 	bl	80091f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a530:	4b19      	ldr	r3, [pc, #100]	; (800a598 <xTaskRemoveFromEventList+0xb4>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	429a      	cmp	r2, r3
 800a536:	d903      	bls.n	800a540 <xTaskRemoveFromEventList+0x5c>
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a53c:	4a16      	ldr	r2, [pc, #88]	; (800a598 <xTaskRemoveFromEventList+0xb4>)
 800a53e:	6013      	str	r3, [r2, #0]
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a544:	4613      	mov	r3, r2
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	4413      	add	r3, r2
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	4a13      	ldr	r2, [pc, #76]	; (800a59c <xTaskRemoveFromEventList+0xb8>)
 800a54e:	441a      	add	r2, r3
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	3304      	adds	r3, #4
 800a554:	4619      	mov	r1, r3
 800a556:	4610      	mov	r0, r2
 800a558:	f7fe fdf1 	bl	800913e <vListInsertEnd>
 800a55c:	e005      	b.n	800a56a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	3318      	adds	r3, #24
 800a562:	4619      	mov	r1, r3
 800a564:	480e      	ldr	r0, [pc, #56]	; (800a5a0 <xTaskRemoveFromEventList+0xbc>)
 800a566:	f7fe fdea 	bl	800913e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a56e:	4b0d      	ldr	r3, [pc, #52]	; (800a5a4 <xTaskRemoveFromEventList+0xc0>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a574:	429a      	cmp	r2, r3
 800a576:	d905      	bls.n	800a584 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a578:	2301      	movs	r3, #1
 800a57a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a57c:	4b0a      	ldr	r3, [pc, #40]	; (800a5a8 <xTaskRemoveFromEventList+0xc4>)
 800a57e:	2201      	movs	r2, #1
 800a580:	601a      	str	r2, [r3, #0]
 800a582:	e001      	b.n	800a588 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a584:	2300      	movs	r3, #0
 800a586:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a588:	697b      	ldr	r3, [r7, #20]
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3718      	adds	r7, #24
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	20001210 	.word	0x20001210
 800a598:	200011f0 	.word	0x200011f0
 800a59c:	20000d18 	.word	0x20000d18
 800a5a0:	200011a8 	.word	0x200011a8
 800a5a4:	20000d14 	.word	0x20000d14
 800a5a8:	200011fc 	.word	0x200011fc

0800a5ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a5b4:	4b06      	ldr	r3, [pc, #24]	; (800a5d0 <vTaskInternalSetTimeOutState+0x24>)
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a5bc:	4b05      	ldr	r3, [pc, #20]	; (800a5d4 <vTaskInternalSetTimeOutState+0x28>)
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	605a      	str	r2, [r3, #4]
}
 800a5c4:	bf00      	nop
 800a5c6:	370c      	adds	r7, #12
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr
 800a5d0:	20001200 	.word	0x20001200
 800a5d4:	200011ec 	.word	0x200011ec

0800a5d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b088      	sub	sp, #32
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d10a      	bne.n	800a5fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ec:	f383 8811 	msr	BASEPRI, r3
 800a5f0:	f3bf 8f6f 	isb	sy
 800a5f4:	f3bf 8f4f 	dsb	sy
 800a5f8:	613b      	str	r3, [r7, #16]
}
 800a5fa:	bf00      	nop
 800a5fc:	e7fe      	b.n	800a5fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d10a      	bne.n	800a61a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a608:	f383 8811 	msr	BASEPRI, r3
 800a60c:	f3bf 8f6f 	isb	sy
 800a610:	f3bf 8f4f 	dsb	sy
 800a614:	60fb      	str	r3, [r7, #12]
}
 800a616:	bf00      	nop
 800a618:	e7fe      	b.n	800a618 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a61a:	f000 fe7b 	bl	800b314 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a61e:	4b1d      	ldr	r3, [pc, #116]	; (800a694 <xTaskCheckForTimeOut+0xbc>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	69ba      	ldr	r2, [r7, #24]
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a636:	d102      	bne.n	800a63e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a638:	2300      	movs	r3, #0
 800a63a:	61fb      	str	r3, [r7, #28]
 800a63c:	e023      	b.n	800a686 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	4b15      	ldr	r3, [pc, #84]	; (800a698 <xTaskCheckForTimeOut+0xc0>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	429a      	cmp	r2, r3
 800a648:	d007      	beq.n	800a65a <xTaskCheckForTimeOut+0x82>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	69ba      	ldr	r2, [r7, #24]
 800a650:	429a      	cmp	r2, r3
 800a652:	d302      	bcc.n	800a65a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a654:	2301      	movs	r3, #1
 800a656:	61fb      	str	r3, [r7, #28]
 800a658:	e015      	b.n	800a686 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	697a      	ldr	r2, [r7, #20]
 800a660:	429a      	cmp	r2, r3
 800a662:	d20b      	bcs.n	800a67c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	1ad2      	subs	r2, r2, r3
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f7ff ff9b 	bl	800a5ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a676:	2300      	movs	r3, #0
 800a678:	61fb      	str	r3, [r7, #28]
 800a67a:	e004      	b.n	800a686 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	2200      	movs	r2, #0
 800a680:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a682:	2301      	movs	r3, #1
 800a684:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a686:	f000 fe75 	bl	800b374 <vPortExitCritical>

	return xReturn;
 800a68a:	69fb      	ldr	r3, [r7, #28]
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3720      	adds	r7, #32
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	200011ec 	.word	0x200011ec
 800a698:	20001200 	.word	0x20001200

0800a69c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a69c:	b480      	push	{r7}
 800a69e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a6a0:	4b03      	ldr	r3, [pc, #12]	; (800a6b0 <vTaskMissedYield+0x14>)
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	601a      	str	r2, [r3, #0]
}
 800a6a6:	bf00      	nop
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr
 800a6b0:	200011fc 	.word	0x200011fc

0800a6b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a6bc:	f000 f852 	bl	800a764 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a6c0:	4b06      	ldr	r3, [pc, #24]	; (800a6dc <prvIdleTask+0x28>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d9f9      	bls.n	800a6bc <prvIdleTask+0x8>
			{
				taskYIELD();
 800a6c8:	4b05      	ldr	r3, [pc, #20]	; (800a6e0 <prvIdleTask+0x2c>)
 800a6ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6ce:	601a      	str	r2, [r3, #0]
 800a6d0:	f3bf 8f4f 	dsb	sy
 800a6d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a6d8:	e7f0      	b.n	800a6bc <prvIdleTask+0x8>
 800a6da:	bf00      	nop
 800a6dc:	20000d18 	.word	0x20000d18
 800a6e0:	e000ed04 	.word	0xe000ed04

0800a6e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	607b      	str	r3, [r7, #4]
 800a6ee:	e00c      	b.n	800a70a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	4613      	mov	r3, r2
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	4413      	add	r3, r2
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	4a12      	ldr	r2, [pc, #72]	; (800a744 <prvInitialiseTaskLists+0x60>)
 800a6fc:	4413      	add	r3, r2
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7fe fcf0 	bl	80090e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	3301      	adds	r3, #1
 800a708:	607b      	str	r3, [r7, #4]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2b37      	cmp	r3, #55	; 0x37
 800a70e:	d9ef      	bls.n	800a6f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a710:	480d      	ldr	r0, [pc, #52]	; (800a748 <prvInitialiseTaskLists+0x64>)
 800a712:	f7fe fce7 	bl	80090e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a716:	480d      	ldr	r0, [pc, #52]	; (800a74c <prvInitialiseTaskLists+0x68>)
 800a718:	f7fe fce4 	bl	80090e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a71c:	480c      	ldr	r0, [pc, #48]	; (800a750 <prvInitialiseTaskLists+0x6c>)
 800a71e:	f7fe fce1 	bl	80090e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a722:	480c      	ldr	r0, [pc, #48]	; (800a754 <prvInitialiseTaskLists+0x70>)
 800a724:	f7fe fcde 	bl	80090e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a728:	480b      	ldr	r0, [pc, #44]	; (800a758 <prvInitialiseTaskLists+0x74>)
 800a72a:	f7fe fcdb 	bl	80090e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a72e:	4b0b      	ldr	r3, [pc, #44]	; (800a75c <prvInitialiseTaskLists+0x78>)
 800a730:	4a05      	ldr	r2, [pc, #20]	; (800a748 <prvInitialiseTaskLists+0x64>)
 800a732:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a734:	4b0a      	ldr	r3, [pc, #40]	; (800a760 <prvInitialiseTaskLists+0x7c>)
 800a736:	4a05      	ldr	r2, [pc, #20]	; (800a74c <prvInitialiseTaskLists+0x68>)
 800a738:	601a      	str	r2, [r3, #0]
}
 800a73a:	bf00      	nop
 800a73c:	3708      	adds	r7, #8
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	20000d18 	.word	0x20000d18
 800a748:	20001178 	.word	0x20001178
 800a74c:	2000118c 	.word	0x2000118c
 800a750:	200011a8 	.word	0x200011a8
 800a754:	200011bc 	.word	0x200011bc
 800a758:	200011d4 	.word	0x200011d4
 800a75c:	200011a0 	.word	0x200011a0
 800a760:	200011a4 	.word	0x200011a4

0800a764 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a76a:	e019      	b.n	800a7a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a76c:	f000 fdd2 	bl	800b314 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a770:	4b10      	ldr	r3, [pc, #64]	; (800a7b4 <prvCheckTasksWaitingTermination+0x50>)
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	3304      	adds	r3, #4
 800a77c:	4618      	mov	r0, r3
 800a77e:	f7fe fd3b 	bl	80091f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a782:	4b0d      	ldr	r3, [pc, #52]	; (800a7b8 <prvCheckTasksWaitingTermination+0x54>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	3b01      	subs	r3, #1
 800a788:	4a0b      	ldr	r2, [pc, #44]	; (800a7b8 <prvCheckTasksWaitingTermination+0x54>)
 800a78a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a78c:	4b0b      	ldr	r3, [pc, #44]	; (800a7bc <prvCheckTasksWaitingTermination+0x58>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	3b01      	subs	r3, #1
 800a792:	4a0a      	ldr	r2, [pc, #40]	; (800a7bc <prvCheckTasksWaitingTermination+0x58>)
 800a794:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a796:	f000 fded 	bl	800b374 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 f810 	bl	800a7c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7a0:	4b06      	ldr	r3, [pc, #24]	; (800a7bc <prvCheckTasksWaitingTermination+0x58>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d1e1      	bne.n	800a76c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a7a8:	bf00      	nop
 800a7aa:	bf00      	nop
 800a7ac:	3708      	adds	r7, #8
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	200011bc 	.word	0x200011bc
 800a7b8:	200011e8 	.word	0x200011e8
 800a7bc:	200011d0 	.word	0x200011d0

0800a7c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d108      	bne.n	800a7e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f000 ff8a 	bl	800b6f0 <vPortFree>
				vPortFree( pxTCB );
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 ff87 	bl	800b6f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a7e2:	e018      	b.n	800a816 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d103      	bne.n	800a7f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 ff7e 	bl	800b6f0 <vPortFree>
	}
 800a7f4:	e00f      	b.n	800a816 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a7fc:	2b02      	cmp	r3, #2
 800a7fe:	d00a      	beq.n	800a816 <prvDeleteTCB+0x56>
	__asm volatile
 800a800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a804:	f383 8811 	msr	BASEPRI, r3
 800a808:	f3bf 8f6f 	isb	sy
 800a80c:	f3bf 8f4f 	dsb	sy
 800a810:	60fb      	str	r3, [r7, #12]
}
 800a812:	bf00      	nop
 800a814:	e7fe      	b.n	800a814 <prvDeleteTCB+0x54>
	}
 800a816:	bf00      	nop
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
	...

0800a820 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a820:	b480      	push	{r7}
 800a822:	b083      	sub	sp, #12
 800a824:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a826:	4b0c      	ldr	r3, [pc, #48]	; (800a858 <prvResetNextTaskUnblockTime+0x38>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d104      	bne.n	800a83a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a830:	4b0a      	ldr	r3, [pc, #40]	; (800a85c <prvResetNextTaskUnblockTime+0x3c>)
 800a832:	f04f 32ff 	mov.w	r2, #4294967295
 800a836:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a838:	e008      	b.n	800a84c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a83a:	4b07      	ldr	r3, [pc, #28]	; (800a858 <prvResetNextTaskUnblockTime+0x38>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	4a04      	ldr	r2, [pc, #16]	; (800a85c <prvResetNextTaskUnblockTime+0x3c>)
 800a84a:	6013      	str	r3, [r2, #0]
}
 800a84c:	bf00      	nop
 800a84e:	370c      	adds	r7, #12
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr
 800a858:	200011a0 	.word	0x200011a0
 800a85c:	20001208 	.word	0x20001208

0800a860 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a860:	b480      	push	{r7}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a866:	4b0b      	ldr	r3, [pc, #44]	; (800a894 <xTaskGetSchedulerState+0x34>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d102      	bne.n	800a874 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a86e:	2301      	movs	r3, #1
 800a870:	607b      	str	r3, [r7, #4]
 800a872:	e008      	b.n	800a886 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a874:	4b08      	ldr	r3, [pc, #32]	; (800a898 <xTaskGetSchedulerState+0x38>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d102      	bne.n	800a882 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a87c:	2302      	movs	r3, #2
 800a87e:	607b      	str	r3, [r7, #4]
 800a880:	e001      	b.n	800a886 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a882:	2300      	movs	r3, #0
 800a884:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a886:	687b      	ldr	r3, [r7, #4]
	}
 800a888:	4618      	mov	r0, r3
 800a88a:	370c      	adds	r7, #12
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr
 800a894:	200011f4 	.word	0x200011f4
 800a898:	20001210 	.word	0x20001210

0800a89c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b086      	sub	sp, #24
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d056      	beq.n	800a960 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a8b2:	4b2e      	ldr	r3, [pc, #184]	; (800a96c <xTaskPriorityDisinherit+0xd0>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	693a      	ldr	r2, [r7, #16]
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d00a      	beq.n	800a8d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c0:	f383 8811 	msr	BASEPRI, r3
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	60fb      	str	r3, [r7, #12]
}
 800a8ce:	bf00      	nop
 800a8d0:	e7fe      	b.n	800a8d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d10a      	bne.n	800a8f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8de:	f383 8811 	msr	BASEPRI, r3
 800a8e2:	f3bf 8f6f 	isb	sy
 800a8e6:	f3bf 8f4f 	dsb	sy
 800a8ea:	60bb      	str	r3, [r7, #8]
}
 800a8ec:	bf00      	nop
 800a8ee:	e7fe      	b.n	800a8ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8f4:	1e5a      	subs	r2, r3, #1
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a902:	429a      	cmp	r2, r3
 800a904:	d02c      	beq.n	800a960 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d128      	bne.n	800a960 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	3304      	adds	r3, #4
 800a912:	4618      	mov	r0, r3
 800a914:	f7fe fc70 	bl	80091f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a924:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a930:	4b0f      	ldr	r3, [pc, #60]	; (800a970 <xTaskPriorityDisinherit+0xd4>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	429a      	cmp	r2, r3
 800a936:	d903      	bls.n	800a940 <xTaskPriorityDisinherit+0xa4>
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a93c:	4a0c      	ldr	r2, [pc, #48]	; (800a970 <xTaskPriorityDisinherit+0xd4>)
 800a93e:	6013      	str	r3, [r2, #0]
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a944:	4613      	mov	r3, r2
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	4413      	add	r3, r2
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	4a09      	ldr	r2, [pc, #36]	; (800a974 <xTaskPriorityDisinherit+0xd8>)
 800a94e:	441a      	add	r2, r3
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	3304      	adds	r3, #4
 800a954:	4619      	mov	r1, r3
 800a956:	4610      	mov	r0, r2
 800a958:	f7fe fbf1 	bl	800913e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a95c:	2301      	movs	r3, #1
 800a95e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a960:	697b      	ldr	r3, [r7, #20]
	}
 800a962:	4618      	mov	r0, r3
 800a964:	3718      	adds	r7, #24
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	20000d14 	.word	0x20000d14
 800a970:	200011f0 	.word	0x200011f0
 800a974:	20000d18 	.word	0x20000d18

0800a978 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a982:	4b21      	ldr	r3, [pc, #132]	; (800aa08 <prvAddCurrentTaskToDelayedList+0x90>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a988:	4b20      	ldr	r3, [pc, #128]	; (800aa0c <prvAddCurrentTaskToDelayedList+0x94>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	3304      	adds	r3, #4
 800a98e:	4618      	mov	r0, r3
 800a990:	f7fe fc32 	bl	80091f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a99a:	d10a      	bne.n	800a9b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d007      	beq.n	800a9b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9a2:	4b1a      	ldr	r3, [pc, #104]	; (800aa0c <prvAddCurrentTaskToDelayedList+0x94>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	3304      	adds	r3, #4
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	4819      	ldr	r0, [pc, #100]	; (800aa10 <prvAddCurrentTaskToDelayedList+0x98>)
 800a9ac:	f7fe fbc7 	bl	800913e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a9b0:	e026      	b.n	800aa00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a9b2:	68fa      	ldr	r2, [r7, #12]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4413      	add	r3, r2
 800a9b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a9ba:	4b14      	ldr	r3, [pc, #80]	; (800aa0c <prvAddCurrentTaskToDelayedList+0x94>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	68ba      	ldr	r2, [r7, #8]
 800a9c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a9c2:	68ba      	ldr	r2, [r7, #8]
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d209      	bcs.n	800a9de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9ca:	4b12      	ldr	r3, [pc, #72]	; (800aa14 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	4b0f      	ldr	r3, [pc, #60]	; (800aa0c <prvAddCurrentTaskToDelayedList+0x94>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	3304      	adds	r3, #4
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	4610      	mov	r0, r2
 800a9d8:	f7fe fbd5 	bl	8009186 <vListInsert>
}
 800a9dc:	e010      	b.n	800aa00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9de:	4b0e      	ldr	r3, [pc, #56]	; (800aa18 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	4b0a      	ldr	r3, [pc, #40]	; (800aa0c <prvAddCurrentTaskToDelayedList+0x94>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	3304      	adds	r3, #4
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	4610      	mov	r0, r2
 800a9ec:	f7fe fbcb 	bl	8009186 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a9f0:	4b0a      	ldr	r3, [pc, #40]	; (800aa1c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	68ba      	ldr	r2, [r7, #8]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d202      	bcs.n	800aa00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a9fa:	4a08      	ldr	r2, [pc, #32]	; (800aa1c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	6013      	str	r3, [r2, #0]
}
 800aa00:	bf00      	nop
 800aa02:	3710      	adds	r7, #16
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	200011ec 	.word	0x200011ec
 800aa0c:	20000d14 	.word	0x20000d14
 800aa10:	200011d4 	.word	0x200011d4
 800aa14:	200011a4 	.word	0x200011a4
 800aa18:	200011a0 	.word	0x200011a0
 800aa1c:	20001208 	.word	0x20001208

0800aa20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b08a      	sub	sp, #40	; 0x28
 800aa24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aa26:	2300      	movs	r3, #0
 800aa28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aa2a:	f000 fb07 	bl	800b03c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aa2e:	4b1c      	ldr	r3, [pc, #112]	; (800aaa0 <xTimerCreateTimerTask+0x80>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d021      	beq.n	800aa7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aa36:	2300      	movs	r3, #0
 800aa38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800aa3e:	1d3a      	adds	r2, r7, #4
 800aa40:	f107 0108 	add.w	r1, r7, #8
 800aa44:	f107 030c 	add.w	r3, r7, #12
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7fe fb31 	bl	80090b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aa4e:	6879      	ldr	r1, [r7, #4]
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	68fa      	ldr	r2, [r7, #12]
 800aa54:	9202      	str	r2, [sp, #8]
 800aa56:	9301      	str	r3, [sp, #4]
 800aa58:	2302      	movs	r3, #2
 800aa5a:	9300      	str	r3, [sp, #0]
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	460a      	mov	r2, r1
 800aa60:	4910      	ldr	r1, [pc, #64]	; (800aaa4 <xTimerCreateTimerTask+0x84>)
 800aa62:	4811      	ldr	r0, [pc, #68]	; (800aaa8 <xTimerCreateTimerTask+0x88>)
 800aa64:	f7ff f8de 	bl	8009c24 <xTaskCreateStatic>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	4a10      	ldr	r2, [pc, #64]	; (800aaac <xTimerCreateTimerTask+0x8c>)
 800aa6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aa6e:	4b0f      	ldr	r3, [pc, #60]	; (800aaac <xTimerCreateTimerTask+0x8c>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d001      	beq.n	800aa7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aa76:	2301      	movs	r3, #1
 800aa78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d10a      	bne.n	800aa96 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800aa80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa84:	f383 8811 	msr	BASEPRI, r3
 800aa88:	f3bf 8f6f 	isb	sy
 800aa8c:	f3bf 8f4f 	dsb	sy
 800aa90:	613b      	str	r3, [r7, #16]
}
 800aa92:	bf00      	nop
 800aa94:	e7fe      	b.n	800aa94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aa96:	697b      	ldr	r3, [r7, #20]
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3718      	adds	r7, #24
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	20001244 	.word	0x20001244
 800aaa4:	08012634 	.word	0x08012634
 800aaa8:	0800abe5 	.word	0x0800abe5
 800aaac:	20001248 	.word	0x20001248

0800aab0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b08a      	sub	sp, #40	; 0x28
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	60b9      	str	r1, [r7, #8]
 800aaba:	607a      	str	r2, [r7, #4]
 800aabc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aabe:	2300      	movs	r3, #0
 800aac0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d10a      	bne.n	800aade <xTimerGenericCommand+0x2e>
	__asm volatile
 800aac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aacc:	f383 8811 	msr	BASEPRI, r3
 800aad0:	f3bf 8f6f 	isb	sy
 800aad4:	f3bf 8f4f 	dsb	sy
 800aad8:	623b      	str	r3, [r7, #32]
}
 800aada:	bf00      	nop
 800aadc:	e7fe      	b.n	800aadc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aade:	4b1a      	ldr	r3, [pc, #104]	; (800ab48 <xTimerGenericCommand+0x98>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d02a      	beq.n	800ab3c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	2b05      	cmp	r3, #5
 800aaf6:	dc18      	bgt.n	800ab2a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aaf8:	f7ff feb2 	bl	800a860 <xTaskGetSchedulerState>
 800aafc:	4603      	mov	r3, r0
 800aafe:	2b02      	cmp	r3, #2
 800ab00:	d109      	bne.n	800ab16 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ab02:	4b11      	ldr	r3, [pc, #68]	; (800ab48 <xTimerGenericCommand+0x98>)
 800ab04:	6818      	ldr	r0, [r3, #0]
 800ab06:	f107 0110 	add.w	r1, r7, #16
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab0e:	f7fe fca1 	bl	8009454 <xQueueGenericSend>
 800ab12:	6278      	str	r0, [r7, #36]	; 0x24
 800ab14:	e012      	b.n	800ab3c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ab16:	4b0c      	ldr	r3, [pc, #48]	; (800ab48 <xTimerGenericCommand+0x98>)
 800ab18:	6818      	ldr	r0, [r3, #0]
 800ab1a:	f107 0110 	add.w	r1, r7, #16
 800ab1e:	2300      	movs	r3, #0
 800ab20:	2200      	movs	r2, #0
 800ab22:	f7fe fc97 	bl	8009454 <xQueueGenericSend>
 800ab26:	6278      	str	r0, [r7, #36]	; 0x24
 800ab28:	e008      	b.n	800ab3c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ab2a:	4b07      	ldr	r3, [pc, #28]	; (800ab48 <xTimerGenericCommand+0x98>)
 800ab2c:	6818      	ldr	r0, [r3, #0]
 800ab2e:	f107 0110 	add.w	r1, r7, #16
 800ab32:	2300      	movs	r3, #0
 800ab34:	683a      	ldr	r2, [r7, #0]
 800ab36:	f7fe fd8b 	bl	8009650 <xQueueGenericSendFromISR>
 800ab3a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ab3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3728      	adds	r7, #40	; 0x28
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	20001244 	.word	0x20001244

0800ab4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b088      	sub	sp, #32
 800ab50:	af02      	add	r7, sp, #8
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab56:	4b22      	ldr	r3, [pc, #136]	; (800abe0 <prvProcessExpiredTimer+0x94>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	68db      	ldr	r3, [r3, #12]
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	3304      	adds	r3, #4
 800ab64:	4618      	mov	r0, r3
 800ab66:	f7fe fb47 	bl	80091f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab70:	f003 0304 	and.w	r3, r3, #4
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d022      	beq.n	800abbe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	699a      	ldr	r2, [r3, #24]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	18d1      	adds	r1, r2, r3
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	683a      	ldr	r2, [r7, #0]
 800ab84:	6978      	ldr	r0, [r7, #20]
 800ab86:	f000 f8d1 	bl	800ad2c <prvInsertTimerInActiveList>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d01f      	beq.n	800abd0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab90:	2300      	movs	r3, #0
 800ab92:	9300      	str	r3, [sp, #0]
 800ab94:	2300      	movs	r3, #0
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	2100      	movs	r1, #0
 800ab9a:	6978      	ldr	r0, [r7, #20]
 800ab9c:	f7ff ff88 	bl	800aab0 <xTimerGenericCommand>
 800aba0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d113      	bne.n	800abd0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800aba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abac:	f383 8811 	msr	BASEPRI, r3
 800abb0:	f3bf 8f6f 	isb	sy
 800abb4:	f3bf 8f4f 	dsb	sy
 800abb8:	60fb      	str	r3, [r7, #12]
}
 800abba:	bf00      	nop
 800abbc:	e7fe      	b.n	800abbc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abc4:	f023 0301 	bic.w	r3, r3, #1
 800abc8:	b2da      	uxtb	r2, r3
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	6a1b      	ldr	r3, [r3, #32]
 800abd4:	6978      	ldr	r0, [r7, #20]
 800abd6:	4798      	blx	r3
}
 800abd8:	bf00      	nop
 800abda:	3718      	adds	r7, #24
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}
 800abe0:	2000123c 	.word	0x2000123c

0800abe4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800abec:	f107 0308 	add.w	r3, r7, #8
 800abf0:	4618      	mov	r0, r3
 800abf2:	f000 f857 	bl	800aca4 <prvGetNextExpireTime>
 800abf6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	4619      	mov	r1, r3
 800abfc:	68f8      	ldr	r0, [r7, #12]
 800abfe:	f000 f803 	bl	800ac08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ac02:	f000 f8d5 	bl	800adb0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac06:	e7f1      	b.n	800abec <prvTimerTask+0x8>

0800ac08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ac12:	f7ff fa43 	bl	800a09c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac16:	f107 0308 	add.w	r3, r7, #8
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f000 f866 	bl	800acec <prvSampleTimeNow>
 800ac20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d130      	bne.n	800ac8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10a      	bne.n	800ac44 <prvProcessTimerOrBlockTask+0x3c>
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d806      	bhi.n	800ac44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ac36:	f7ff fa3f 	bl	800a0b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ac3a:	68f9      	ldr	r1, [r7, #12]
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f7ff ff85 	bl	800ab4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ac42:	e024      	b.n	800ac8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d008      	beq.n	800ac5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ac4a:	4b13      	ldr	r3, [pc, #76]	; (800ac98 <prvProcessTimerOrBlockTask+0x90>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d101      	bne.n	800ac58 <prvProcessTimerOrBlockTask+0x50>
 800ac54:	2301      	movs	r3, #1
 800ac56:	e000      	b.n	800ac5a <prvProcessTimerOrBlockTask+0x52>
 800ac58:	2300      	movs	r3, #0
 800ac5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ac5c:	4b0f      	ldr	r3, [pc, #60]	; (800ac9c <prvProcessTimerOrBlockTask+0x94>)
 800ac5e:	6818      	ldr	r0, [r3, #0]
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	1ad3      	subs	r3, r2, r3
 800ac66:	683a      	ldr	r2, [r7, #0]
 800ac68:	4619      	mov	r1, r3
 800ac6a:	f7fe ffa7 	bl	8009bbc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ac6e:	f7ff fa23 	bl	800a0b8 <xTaskResumeAll>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10a      	bne.n	800ac8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ac78:	4b09      	ldr	r3, [pc, #36]	; (800aca0 <prvProcessTimerOrBlockTask+0x98>)
 800ac7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac7e:	601a      	str	r2, [r3, #0]
 800ac80:	f3bf 8f4f 	dsb	sy
 800ac84:	f3bf 8f6f 	isb	sy
}
 800ac88:	e001      	b.n	800ac8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ac8a:	f7ff fa15 	bl	800a0b8 <xTaskResumeAll>
}
 800ac8e:	bf00      	nop
 800ac90:	3710      	adds	r7, #16
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	20001240 	.word	0x20001240
 800ac9c:	20001244 	.word	0x20001244
 800aca0:	e000ed04 	.word	0xe000ed04

0800aca4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aca4:	b480      	push	{r7}
 800aca6:	b085      	sub	sp, #20
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800acac:	4b0e      	ldr	r3, [pc, #56]	; (800ace8 <prvGetNextExpireTime+0x44>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d101      	bne.n	800acba <prvGetNextExpireTime+0x16>
 800acb6:	2201      	movs	r2, #1
 800acb8:	e000      	b.n	800acbc <prvGetNextExpireTime+0x18>
 800acba:	2200      	movs	r2, #0
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d105      	bne.n	800acd4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800acc8:	4b07      	ldr	r3, [pc, #28]	; (800ace8 <prvGetNextExpireTime+0x44>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	68db      	ldr	r3, [r3, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	60fb      	str	r3, [r7, #12]
 800acd2:	e001      	b.n	800acd8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800acd4:	2300      	movs	r3, #0
 800acd6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800acd8:	68fb      	ldr	r3, [r7, #12]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3714      	adds	r7, #20
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr
 800ace6:	bf00      	nop
 800ace8:	2000123c 	.word	0x2000123c

0800acec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800acf4:	f7ff fa7e 	bl	800a1f4 <xTaskGetTickCount>
 800acf8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800acfa:	4b0b      	ldr	r3, [pc, #44]	; (800ad28 <prvSampleTimeNow+0x3c>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68fa      	ldr	r2, [r7, #12]
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d205      	bcs.n	800ad10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ad04:	f000 f936 	bl	800af74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	601a      	str	r2, [r3, #0]
 800ad0e:	e002      	b.n	800ad16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2200      	movs	r2, #0
 800ad14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ad16:	4a04      	ldr	r2, [pc, #16]	; (800ad28 <prvSampleTimeNow+0x3c>)
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	2000124c 	.word	0x2000124c

0800ad2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b086      	sub	sp, #24
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	60b9      	str	r1, [r7, #8]
 800ad36:	607a      	str	r2, [r7, #4]
 800ad38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	68ba      	ldr	r2, [r7, #8]
 800ad42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ad4a:	68ba      	ldr	r2, [r7, #8]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d812      	bhi.n	800ad78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	1ad2      	subs	r2, r2, r3
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	699b      	ldr	r3, [r3, #24]
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d302      	bcc.n	800ad66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ad60:	2301      	movs	r3, #1
 800ad62:	617b      	str	r3, [r7, #20]
 800ad64:	e01b      	b.n	800ad9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ad66:	4b10      	ldr	r3, [pc, #64]	; (800ada8 <prvInsertTimerInActiveList+0x7c>)
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	3304      	adds	r3, #4
 800ad6e:	4619      	mov	r1, r3
 800ad70:	4610      	mov	r0, r2
 800ad72:	f7fe fa08 	bl	8009186 <vListInsert>
 800ad76:	e012      	b.n	800ad9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d206      	bcs.n	800ad8e <prvInsertTimerInActiveList+0x62>
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d302      	bcc.n	800ad8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	617b      	str	r3, [r7, #20]
 800ad8c:	e007      	b.n	800ad9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad8e:	4b07      	ldr	r3, [pc, #28]	; (800adac <prvInsertTimerInActiveList+0x80>)
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	3304      	adds	r3, #4
 800ad96:	4619      	mov	r1, r3
 800ad98:	4610      	mov	r0, r2
 800ad9a:	f7fe f9f4 	bl	8009186 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ad9e:	697b      	ldr	r3, [r7, #20]
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3718      	adds	r7, #24
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}
 800ada8:	20001240 	.word	0x20001240
 800adac:	2000123c 	.word	0x2000123c

0800adb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b08e      	sub	sp, #56	; 0x38
 800adb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800adb6:	e0ca      	b.n	800af4e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	da18      	bge.n	800adf0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800adbe:	1d3b      	adds	r3, r7, #4
 800adc0:	3304      	adds	r3, #4
 800adc2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800adc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d10a      	bne.n	800ade0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800adca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adce:	f383 8811 	msr	BASEPRI, r3
 800add2:	f3bf 8f6f 	isb	sy
 800add6:	f3bf 8f4f 	dsb	sy
 800adda:	61fb      	str	r3, [r7, #28]
}
 800addc:	bf00      	nop
 800adde:	e7fe      	b.n	800adde <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ade0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ade6:	6850      	ldr	r0, [r2, #4]
 800ade8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adea:	6892      	ldr	r2, [r2, #8]
 800adec:	4611      	mov	r1, r2
 800adee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	f2c0 80aa 	blt.w	800af4c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800adfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adfe:	695b      	ldr	r3, [r3, #20]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d004      	beq.n	800ae0e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae06:	3304      	adds	r3, #4
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f7fe f9f5 	bl	80091f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae0e:	463b      	mov	r3, r7
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7ff ff6b 	bl	800acec <prvSampleTimeNow>
 800ae16:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2b09      	cmp	r3, #9
 800ae1c:	f200 8097 	bhi.w	800af4e <prvProcessReceivedCommands+0x19e>
 800ae20:	a201      	add	r2, pc, #4	; (adr r2, 800ae28 <prvProcessReceivedCommands+0x78>)
 800ae22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae26:	bf00      	nop
 800ae28:	0800ae51 	.word	0x0800ae51
 800ae2c:	0800ae51 	.word	0x0800ae51
 800ae30:	0800ae51 	.word	0x0800ae51
 800ae34:	0800aec5 	.word	0x0800aec5
 800ae38:	0800aed9 	.word	0x0800aed9
 800ae3c:	0800af23 	.word	0x0800af23
 800ae40:	0800ae51 	.word	0x0800ae51
 800ae44:	0800ae51 	.word	0x0800ae51
 800ae48:	0800aec5 	.word	0x0800aec5
 800ae4c:	0800aed9 	.word	0x0800aed9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae56:	f043 0301 	orr.w	r3, r3, #1
 800ae5a:	b2da      	uxtb	r2, r3
 800ae5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ae62:	68ba      	ldr	r2, [r7, #8]
 800ae64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae66:	699b      	ldr	r3, [r3, #24]
 800ae68:	18d1      	adds	r1, r2, r3
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae70:	f7ff ff5c 	bl	800ad2c <prvInsertTimerInActiveList>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d069      	beq.n	800af4e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7c:	6a1b      	ldr	r3, [r3, #32]
 800ae7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae88:	f003 0304 	and.w	r3, r3, #4
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d05e      	beq.n	800af4e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ae90:	68ba      	ldr	r2, [r7, #8]
 800ae92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae94:	699b      	ldr	r3, [r3, #24]
 800ae96:	441a      	add	r2, r3
 800ae98:	2300      	movs	r3, #0
 800ae9a:	9300      	str	r3, [sp, #0]
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	2100      	movs	r1, #0
 800aea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aea2:	f7ff fe05 	bl	800aab0 <xTimerGenericCommand>
 800aea6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aea8:	6a3b      	ldr	r3, [r7, #32]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d14f      	bne.n	800af4e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800aeae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb2:	f383 8811 	msr	BASEPRI, r3
 800aeb6:	f3bf 8f6f 	isb	sy
 800aeba:	f3bf 8f4f 	dsb	sy
 800aebe:	61bb      	str	r3, [r7, #24]
}
 800aec0:	bf00      	nop
 800aec2:	e7fe      	b.n	800aec2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aeca:	f023 0301 	bic.w	r3, r3, #1
 800aece:	b2da      	uxtb	r2, r3
 800aed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800aed6:	e03a      	b.n	800af4e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aede:	f043 0301 	orr.w	r3, r3, #1
 800aee2:	b2da      	uxtb	r2, r3
 800aee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aeea:	68ba      	ldr	r2, [r7, #8]
 800aeec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef2:	699b      	ldr	r3, [r3, #24]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d10a      	bne.n	800af0e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800aef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefc:	f383 8811 	msr	BASEPRI, r3
 800af00:	f3bf 8f6f 	isb	sy
 800af04:	f3bf 8f4f 	dsb	sy
 800af08:	617b      	str	r3, [r7, #20]
}
 800af0a:	bf00      	nop
 800af0c:	e7fe      	b.n	800af0c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800af0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af10:	699a      	ldr	r2, [r3, #24]
 800af12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af14:	18d1      	adds	r1, r2, r3
 800af16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af1c:	f7ff ff06 	bl	800ad2c <prvInsertTimerInActiveList>
					break;
 800af20:	e015      	b.n	800af4e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800af22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af28:	f003 0302 	and.w	r3, r3, #2
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d103      	bne.n	800af38 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800af30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af32:	f000 fbdd 	bl	800b6f0 <vPortFree>
 800af36:	e00a      	b.n	800af4e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af3e:	f023 0301 	bic.w	r3, r3, #1
 800af42:	b2da      	uxtb	r2, r3
 800af44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800af4a:	e000      	b.n	800af4e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800af4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af4e:	4b08      	ldr	r3, [pc, #32]	; (800af70 <prvProcessReceivedCommands+0x1c0>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	1d39      	adds	r1, r7, #4
 800af54:	2200      	movs	r2, #0
 800af56:	4618      	mov	r0, r3
 800af58:	f7fe fc16 	bl	8009788 <xQueueReceive>
 800af5c:	4603      	mov	r3, r0
 800af5e:	2b00      	cmp	r3, #0
 800af60:	f47f af2a 	bne.w	800adb8 <prvProcessReceivedCommands+0x8>
	}
}
 800af64:	bf00      	nop
 800af66:	bf00      	nop
 800af68:	3730      	adds	r7, #48	; 0x30
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	20001244 	.word	0x20001244

0800af74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b088      	sub	sp, #32
 800af78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af7a:	e048      	b.n	800b00e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af7c:	4b2d      	ldr	r3, [pc, #180]	; (800b034 <prvSwitchTimerLists+0xc0>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	68db      	ldr	r3, [r3, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af86:	4b2b      	ldr	r3, [pc, #172]	; (800b034 <prvSwitchTimerLists+0xc0>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	68db      	ldr	r3, [r3, #12]
 800af8c:	68db      	ldr	r3, [r3, #12]
 800af8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	3304      	adds	r3, #4
 800af94:	4618      	mov	r0, r3
 800af96:	f7fe f92f 	bl	80091f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	6a1b      	ldr	r3, [r3, #32]
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afa8:	f003 0304 	and.w	r3, r3, #4
 800afac:	2b00      	cmp	r3, #0
 800afae:	d02e      	beq.n	800b00e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	699b      	ldr	r3, [r3, #24]
 800afb4:	693a      	ldr	r2, [r7, #16]
 800afb6:	4413      	add	r3, r2
 800afb8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800afba:	68ba      	ldr	r2, [r7, #8]
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d90e      	bls.n	800afe0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	68ba      	ldr	r2, [r7, #8]
 800afc6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	68fa      	ldr	r2, [r7, #12]
 800afcc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800afce:	4b19      	ldr	r3, [pc, #100]	; (800b034 <prvSwitchTimerLists+0xc0>)
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	3304      	adds	r3, #4
 800afd6:	4619      	mov	r1, r3
 800afd8:	4610      	mov	r0, r2
 800afda:	f7fe f8d4 	bl	8009186 <vListInsert>
 800afde:	e016      	b.n	800b00e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800afe0:	2300      	movs	r3, #0
 800afe2:	9300      	str	r3, [sp, #0]
 800afe4:	2300      	movs	r3, #0
 800afe6:	693a      	ldr	r2, [r7, #16]
 800afe8:	2100      	movs	r1, #0
 800afea:	68f8      	ldr	r0, [r7, #12]
 800afec:	f7ff fd60 	bl	800aab0 <xTimerGenericCommand>
 800aff0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d10a      	bne.n	800b00e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800aff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affc:	f383 8811 	msr	BASEPRI, r3
 800b000:	f3bf 8f6f 	isb	sy
 800b004:	f3bf 8f4f 	dsb	sy
 800b008:	603b      	str	r3, [r7, #0]
}
 800b00a:	bf00      	nop
 800b00c:	e7fe      	b.n	800b00c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b00e:	4b09      	ldr	r3, [pc, #36]	; (800b034 <prvSwitchTimerLists+0xc0>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d1b1      	bne.n	800af7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b018:	4b06      	ldr	r3, [pc, #24]	; (800b034 <prvSwitchTimerLists+0xc0>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b01e:	4b06      	ldr	r3, [pc, #24]	; (800b038 <prvSwitchTimerLists+0xc4>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4a04      	ldr	r2, [pc, #16]	; (800b034 <prvSwitchTimerLists+0xc0>)
 800b024:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b026:	4a04      	ldr	r2, [pc, #16]	; (800b038 <prvSwitchTimerLists+0xc4>)
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	6013      	str	r3, [r2, #0]
}
 800b02c:	bf00      	nop
 800b02e:	3718      	adds	r7, #24
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}
 800b034:	2000123c 	.word	0x2000123c
 800b038:	20001240 	.word	0x20001240

0800b03c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b042:	f000 f967 	bl	800b314 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b046:	4b15      	ldr	r3, [pc, #84]	; (800b09c <prvCheckForValidListAndQueue+0x60>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d120      	bne.n	800b090 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b04e:	4814      	ldr	r0, [pc, #80]	; (800b0a0 <prvCheckForValidListAndQueue+0x64>)
 800b050:	f7fe f848 	bl	80090e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b054:	4813      	ldr	r0, [pc, #76]	; (800b0a4 <prvCheckForValidListAndQueue+0x68>)
 800b056:	f7fe f845 	bl	80090e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b05a:	4b13      	ldr	r3, [pc, #76]	; (800b0a8 <prvCheckForValidListAndQueue+0x6c>)
 800b05c:	4a10      	ldr	r2, [pc, #64]	; (800b0a0 <prvCheckForValidListAndQueue+0x64>)
 800b05e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b060:	4b12      	ldr	r3, [pc, #72]	; (800b0ac <prvCheckForValidListAndQueue+0x70>)
 800b062:	4a10      	ldr	r2, [pc, #64]	; (800b0a4 <prvCheckForValidListAndQueue+0x68>)
 800b064:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b066:	2300      	movs	r3, #0
 800b068:	9300      	str	r3, [sp, #0]
 800b06a:	4b11      	ldr	r3, [pc, #68]	; (800b0b0 <prvCheckForValidListAndQueue+0x74>)
 800b06c:	4a11      	ldr	r2, [pc, #68]	; (800b0b4 <prvCheckForValidListAndQueue+0x78>)
 800b06e:	2110      	movs	r1, #16
 800b070:	200a      	movs	r0, #10
 800b072:	f7fe f953 	bl	800931c <xQueueGenericCreateStatic>
 800b076:	4603      	mov	r3, r0
 800b078:	4a08      	ldr	r2, [pc, #32]	; (800b09c <prvCheckForValidListAndQueue+0x60>)
 800b07a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b07c:	4b07      	ldr	r3, [pc, #28]	; (800b09c <prvCheckForValidListAndQueue+0x60>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d005      	beq.n	800b090 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b084:	4b05      	ldr	r3, [pc, #20]	; (800b09c <prvCheckForValidListAndQueue+0x60>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	490b      	ldr	r1, [pc, #44]	; (800b0b8 <prvCheckForValidListAndQueue+0x7c>)
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7fe fd6c 	bl	8009b68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b090:	f000 f970 	bl	800b374 <vPortExitCritical>
}
 800b094:	bf00      	nop
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	20001244 	.word	0x20001244
 800b0a0:	20001214 	.word	0x20001214
 800b0a4:	20001228 	.word	0x20001228
 800b0a8:	2000123c 	.word	0x2000123c
 800b0ac:	20001240 	.word	0x20001240
 800b0b0:	200012f0 	.word	0x200012f0
 800b0b4:	20001250 	.word	0x20001250
 800b0b8:	0801263c 	.word	0x0801263c

0800b0bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	3b04      	subs	r3, #4
 800b0cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b0d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	3b04      	subs	r3, #4
 800b0da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	f023 0201 	bic.w	r2, r3, #1
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	3b04      	subs	r3, #4
 800b0ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b0ec:	4a0c      	ldr	r2, [pc, #48]	; (800b120 <pxPortInitialiseStack+0x64>)
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	3b14      	subs	r3, #20
 800b0f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	3b04      	subs	r3, #4
 800b102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f06f 0202 	mvn.w	r2, #2
 800b10a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	3b20      	subs	r3, #32
 800b110:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b112:	68fb      	ldr	r3, [r7, #12]
}
 800b114:	4618      	mov	r0, r3
 800b116:	3714      	adds	r7, #20
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr
 800b120:	0800b125 	.word	0x0800b125

0800b124 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b124:	b480      	push	{r7}
 800b126:	b085      	sub	sp, #20
 800b128:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b12a:	2300      	movs	r3, #0
 800b12c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b12e:	4b12      	ldr	r3, [pc, #72]	; (800b178 <prvTaskExitError+0x54>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b136:	d00a      	beq.n	800b14e <prvTaskExitError+0x2a>
	__asm volatile
 800b138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13c:	f383 8811 	msr	BASEPRI, r3
 800b140:	f3bf 8f6f 	isb	sy
 800b144:	f3bf 8f4f 	dsb	sy
 800b148:	60fb      	str	r3, [r7, #12]
}
 800b14a:	bf00      	nop
 800b14c:	e7fe      	b.n	800b14c <prvTaskExitError+0x28>
	__asm volatile
 800b14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b152:	f383 8811 	msr	BASEPRI, r3
 800b156:	f3bf 8f6f 	isb	sy
 800b15a:	f3bf 8f4f 	dsb	sy
 800b15e:	60bb      	str	r3, [r7, #8]
}
 800b160:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b162:	bf00      	nop
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d0fc      	beq.n	800b164 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b16a:	bf00      	nop
 800b16c:	bf00      	nop
 800b16e:	3714      	adds	r7, #20
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr
 800b178:	200000e8 	.word	0x200000e8
 800b17c:	00000000 	.word	0x00000000

0800b180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b180:	4b07      	ldr	r3, [pc, #28]	; (800b1a0 <pxCurrentTCBConst2>)
 800b182:	6819      	ldr	r1, [r3, #0]
 800b184:	6808      	ldr	r0, [r1, #0]
 800b186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b18a:	f380 8809 	msr	PSP, r0
 800b18e:	f3bf 8f6f 	isb	sy
 800b192:	f04f 0000 	mov.w	r0, #0
 800b196:	f380 8811 	msr	BASEPRI, r0
 800b19a:	4770      	bx	lr
 800b19c:	f3af 8000 	nop.w

0800b1a0 <pxCurrentTCBConst2>:
 800b1a0:	20000d14 	.word	0x20000d14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b1a4:	bf00      	nop
 800b1a6:	bf00      	nop

0800b1a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b1a8:	4808      	ldr	r0, [pc, #32]	; (800b1cc <prvPortStartFirstTask+0x24>)
 800b1aa:	6800      	ldr	r0, [r0, #0]
 800b1ac:	6800      	ldr	r0, [r0, #0]
 800b1ae:	f380 8808 	msr	MSP, r0
 800b1b2:	f04f 0000 	mov.w	r0, #0
 800b1b6:	f380 8814 	msr	CONTROL, r0
 800b1ba:	b662      	cpsie	i
 800b1bc:	b661      	cpsie	f
 800b1be:	f3bf 8f4f 	dsb	sy
 800b1c2:	f3bf 8f6f 	isb	sy
 800b1c6:	df00      	svc	0
 800b1c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b1ca:	bf00      	nop
 800b1cc:	e000ed08 	.word	0xe000ed08

0800b1d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b086      	sub	sp, #24
 800b1d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b1d6:	4b46      	ldr	r3, [pc, #280]	; (800b2f0 <xPortStartScheduler+0x120>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4a46      	ldr	r2, [pc, #280]	; (800b2f4 <xPortStartScheduler+0x124>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d10a      	bne.n	800b1f6 <xPortStartScheduler+0x26>
	__asm volatile
 800b1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e4:	f383 8811 	msr	BASEPRI, r3
 800b1e8:	f3bf 8f6f 	isb	sy
 800b1ec:	f3bf 8f4f 	dsb	sy
 800b1f0:	613b      	str	r3, [r7, #16]
}
 800b1f2:	bf00      	nop
 800b1f4:	e7fe      	b.n	800b1f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b1f6:	4b3e      	ldr	r3, [pc, #248]	; (800b2f0 <xPortStartScheduler+0x120>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a3f      	ldr	r2, [pc, #252]	; (800b2f8 <xPortStartScheduler+0x128>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d10a      	bne.n	800b216 <xPortStartScheduler+0x46>
	__asm volatile
 800b200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b204:	f383 8811 	msr	BASEPRI, r3
 800b208:	f3bf 8f6f 	isb	sy
 800b20c:	f3bf 8f4f 	dsb	sy
 800b210:	60fb      	str	r3, [r7, #12]
}
 800b212:	bf00      	nop
 800b214:	e7fe      	b.n	800b214 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b216:	4b39      	ldr	r3, [pc, #228]	; (800b2fc <xPortStartScheduler+0x12c>)
 800b218:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	22ff      	movs	r2, #255	; 0xff
 800b226:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	b2db      	uxtb	r3, r3
 800b22e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b230:	78fb      	ldrb	r3, [r7, #3]
 800b232:	b2db      	uxtb	r3, r3
 800b234:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b238:	b2da      	uxtb	r2, r3
 800b23a:	4b31      	ldr	r3, [pc, #196]	; (800b300 <xPortStartScheduler+0x130>)
 800b23c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b23e:	4b31      	ldr	r3, [pc, #196]	; (800b304 <xPortStartScheduler+0x134>)
 800b240:	2207      	movs	r2, #7
 800b242:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b244:	e009      	b.n	800b25a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b246:	4b2f      	ldr	r3, [pc, #188]	; (800b304 <xPortStartScheduler+0x134>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	3b01      	subs	r3, #1
 800b24c:	4a2d      	ldr	r2, [pc, #180]	; (800b304 <xPortStartScheduler+0x134>)
 800b24e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b250:	78fb      	ldrb	r3, [r7, #3]
 800b252:	b2db      	uxtb	r3, r3
 800b254:	005b      	lsls	r3, r3, #1
 800b256:	b2db      	uxtb	r3, r3
 800b258:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b25a:	78fb      	ldrb	r3, [r7, #3]
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b262:	2b80      	cmp	r3, #128	; 0x80
 800b264:	d0ef      	beq.n	800b246 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b266:	4b27      	ldr	r3, [pc, #156]	; (800b304 <xPortStartScheduler+0x134>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f1c3 0307 	rsb	r3, r3, #7
 800b26e:	2b04      	cmp	r3, #4
 800b270:	d00a      	beq.n	800b288 <xPortStartScheduler+0xb8>
	__asm volatile
 800b272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b276:	f383 8811 	msr	BASEPRI, r3
 800b27a:	f3bf 8f6f 	isb	sy
 800b27e:	f3bf 8f4f 	dsb	sy
 800b282:	60bb      	str	r3, [r7, #8]
}
 800b284:	bf00      	nop
 800b286:	e7fe      	b.n	800b286 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b288:	4b1e      	ldr	r3, [pc, #120]	; (800b304 <xPortStartScheduler+0x134>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	021b      	lsls	r3, r3, #8
 800b28e:	4a1d      	ldr	r2, [pc, #116]	; (800b304 <xPortStartScheduler+0x134>)
 800b290:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b292:	4b1c      	ldr	r3, [pc, #112]	; (800b304 <xPortStartScheduler+0x134>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b29a:	4a1a      	ldr	r2, [pc, #104]	; (800b304 <xPortStartScheduler+0x134>)
 800b29c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	b2da      	uxtb	r2, r3
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b2a6:	4b18      	ldr	r3, [pc, #96]	; (800b308 <xPortStartScheduler+0x138>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	4a17      	ldr	r2, [pc, #92]	; (800b308 <xPortStartScheduler+0x138>)
 800b2ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b2b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b2b2:	4b15      	ldr	r3, [pc, #84]	; (800b308 <xPortStartScheduler+0x138>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4a14      	ldr	r2, [pc, #80]	; (800b308 <xPortStartScheduler+0x138>)
 800b2b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b2bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b2be:	f000 f8dd 	bl	800b47c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b2c2:	4b12      	ldr	r3, [pc, #72]	; (800b30c <xPortStartScheduler+0x13c>)
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b2c8:	f000 f8fc 	bl	800b4c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b2cc:	4b10      	ldr	r3, [pc, #64]	; (800b310 <xPortStartScheduler+0x140>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a0f      	ldr	r2, [pc, #60]	; (800b310 <xPortStartScheduler+0x140>)
 800b2d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b2d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b2d8:	f7ff ff66 	bl	800b1a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b2dc:	f7ff f854 	bl	800a388 <vTaskSwitchContext>
	prvTaskExitError();
 800b2e0:	f7ff ff20 	bl	800b124 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b2e4:	2300      	movs	r3, #0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3718      	adds	r7, #24
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	e000ed00 	.word	0xe000ed00
 800b2f4:	410fc271 	.word	0x410fc271
 800b2f8:	410fc270 	.word	0x410fc270
 800b2fc:	e000e400 	.word	0xe000e400
 800b300:	20001340 	.word	0x20001340
 800b304:	20001344 	.word	0x20001344
 800b308:	e000ed20 	.word	0xe000ed20
 800b30c:	200000e8 	.word	0x200000e8
 800b310:	e000ef34 	.word	0xe000ef34

0800b314 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
	__asm volatile
 800b31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b31e:	f383 8811 	msr	BASEPRI, r3
 800b322:	f3bf 8f6f 	isb	sy
 800b326:	f3bf 8f4f 	dsb	sy
 800b32a:	607b      	str	r3, [r7, #4]
}
 800b32c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b32e:	4b0f      	ldr	r3, [pc, #60]	; (800b36c <vPortEnterCritical+0x58>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	3301      	adds	r3, #1
 800b334:	4a0d      	ldr	r2, [pc, #52]	; (800b36c <vPortEnterCritical+0x58>)
 800b336:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b338:	4b0c      	ldr	r3, [pc, #48]	; (800b36c <vPortEnterCritical+0x58>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d10f      	bne.n	800b360 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b340:	4b0b      	ldr	r3, [pc, #44]	; (800b370 <vPortEnterCritical+0x5c>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	b2db      	uxtb	r3, r3
 800b346:	2b00      	cmp	r3, #0
 800b348:	d00a      	beq.n	800b360 <vPortEnterCritical+0x4c>
	__asm volatile
 800b34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34e:	f383 8811 	msr	BASEPRI, r3
 800b352:	f3bf 8f6f 	isb	sy
 800b356:	f3bf 8f4f 	dsb	sy
 800b35a:	603b      	str	r3, [r7, #0]
}
 800b35c:	bf00      	nop
 800b35e:	e7fe      	b.n	800b35e <vPortEnterCritical+0x4a>
	}
}
 800b360:	bf00      	nop
 800b362:	370c      	adds	r7, #12
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr
 800b36c:	200000e8 	.word	0x200000e8
 800b370:	e000ed04 	.word	0xe000ed04

0800b374 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b37a:	4b12      	ldr	r3, [pc, #72]	; (800b3c4 <vPortExitCritical+0x50>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d10a      	bne.n	800b398 <vPortExitCritical+0x24>
	__asm volatile
 800b382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b386:	f383 8811 	msr	BASEPRI, r3
 800b38a:	f3bf 8f6f 	isb	sy
 800b38e:	f3bf 8f4f 	dsb	sy
 800b392:	607b      	str	r3, [r7, #4]
}
 800b394:	bf00      	nop
 800b396:	e7fe      	b.n	800b396 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b398:	4b0a      	ldr	r3, [pc, #40]	; (800b3c4 <vPortExitCritical+0x50>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	3b01      	subs	r3, #1
 800b39e:	4a09      	ldr	r2, [pc, #36]	; (800b3c4 <vPortExitCritical+0x50>)
 800b3a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b3a2:	4b08      	ldr	r3, [pc, #32]	; (800b3c4 <vPortExitCritical+0x50>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d105      	bne.n	800b3b6 <vPortExitCritical+0x42>
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	f383 8811 	msr	BASEPRI, r3
}
 800b3b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b3b6:	bf00      	nop
 800b3b8:	370c      	adds	r7, #12
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	200000e8 	.word	0x200000e8
	...

0800b3d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b3d0:	f3ef 8009 	mrs	r0, PSP
 800b3d4:	f3bf 8f6f 	isb	sy
 800b3d8:	4b15      	ldr	r3, [pc, #84]	; (800b430 <pxCurrentTCBConst>)
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	f01e 0f10 	tst.w	lr, #16
 800b3e0:	bf08      	it	eq
 800b3e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b3e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ea:	6010      	str	r0, [r2, #0]
 800b3ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b3f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b3f4:	f380 8811 	msr	BASEPRI, r0
 800b3f8:	f3bf 8f4f 	dsb	sy
 800b3fc:	f3bf 8f6f 	isb	sy
 800b400:	f7fe ffc2 	bl	800a388 <vTaskSwitchContext>
 800b404:	f04f 0000 	mov.w	r0, #0
 800b408:	f380 8811 	msr	BASEPRI, r0
 800b40c:	bc09      	pop	{r0, r3}
 800b40e:	6819      	ldr	r1, [r3, #0]
 800b410:	6808      	ldr	r0, [r1, #0]
 800b412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b416:	f01e 0f10 	tst.w	lr, #16
 800b41a:	bf08      	it	eq
 800b41c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b420:	f380 8809 	msr	PSP, r0
 800b424:	f3bf 8f6f 	isb	sy
 800b428:	4770      	bx	lr
 800b42a:	bf00      	nop
 800b42c:	f3af 8000 	nop.w

0800b430 <pxCurrentTCBConst>:
 800b430:	20000d14 	.word	0x20000d14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b434:	bf00      	nop
 800b436:	bf00      	nop

0800b438 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
	__asm volatile
 800b43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	607b      	str	r3, [r7, #4]
}
 800b450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b452:	f7fe fedf 	bl	800a214 <xTaskIncrementTick>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d003      	beq.n	800b464 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b45c:	4b06      	ldr	r3, [pc, #24]	; (800b478 <xPortSysTickHandler+0x40>)
 800b45e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b462:	601a      	str	r2, [r3, #0]
 800b464:	2300      	movs	r3, #0
 800b466:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	f383 8811 	msr	BASEPRI, r3
}
 800b46e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b470:	bf00      	nop
 800b472:	3708      	adds	r7, #8
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}
 800b478:	e000ed04 	.word	0xe000ed04

0800b47c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b47c:	b480      	push	{r7}
 800b47e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b480:	4b0b      	ldr	r3, [pc, #44]	; (800b4b0 <vPortSetupTimerInterrupt+0x34>)
 800b482:	2200      	movs	r2, #0
 800b484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b486:	4b0b      	ldr	r3, [pc, #44]	; (800b4b4 <vPortSetupTimerInterrupt+0x38>)
 800b488:	2200      	movs	r2, #0
 800b48a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b48c:	4b0a      	ldr	r3, [pc, #40]	; (800b4b8 <vPortSetupTimerInterrupt+0x3c>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a0a      	ldr	r2, [pc, #40]	; (800b4bc <vPortSetupTimerInterrupt+0x40>)
 800b492:	fba2 2303 	umull	r2, r3, r2, r3
 800b496:	099b      	lsrs	r3, r3, #6
 800b498:	4a09      	ldr	r2, [pc, #36]	; (800b4c0 <vPortSetupTimerInterrupt+0x44>)
 800b49a:	3b01      	subs	r3, #1
 800b49c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b49e:	4b04      	ldr	r3, [pc, #16]	; (800b4b0 <vPortSetupTimerInterrupt+0x34>)
 800b4a0:	2207      	movs	r2, #7
 800b4a2:	601a      	str	r2, [r3, #0]
}
 800b4a4:	bf00      	nop
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop
 800b4b0:	e000e010 	.word	0xe000e010
 800b4b4:	e000e018 	.word	0xe000e018
 800b4b8:	20000000 	.word	0x20000000
 800b4bc:	10624dd3 	.word	0x10624dd3
 800b4c0:	e000e014 	.word	0xe000e014

0800b4c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b4c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b4d4 <vPortEnableVFP+0x10>
 800b4c8:	6801      	ldr	r1, [r0, #0]
 800b4ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b4ce:	6001      	str	r1, [r0, #0]
 800b4d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b4d2:	bf00      	nop
 800b4d4:	e000ed88 	.word	0xe000ed88

0800b4d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b4d8:	b480      	push	{r7}
 800b4da:	b085      	sub	sp, #20
 800b4dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b4de:	f3ef 8305 	mrs	r3, IPSR
 800b4e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2b0f      	cmp	r3, #15
 800b4e8:	d914      	bls.n	800b514 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b4ea:	4a17      	ldr	r2, [pc, #92]	; (800b548 <vPortValidateInterruptPriority+0x70>)
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	4413      	add	r3, r2
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b4f4:	4b15      	ldr	r3, [pc, #84]	; (800b54c <vPortValidateInterruptPriority+0x74>)
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	7afa      	ldrb	r2, [r7, #11]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d20a      	bcs.n	800b514 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	607b      	str	r3, [r7, #4]
}
 800b510:	bf00      	nop
 800b512:	e7fe      	b.n	800b512 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b514:	4b0e      	ldr	r3, [pc, #56]	; (800b550 <vPortValidateInterruptPriority+0x78>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b51c:	4b0d      	ldr	r3, [pc, #52]	; (800b554 <vPortValidateInterruptPriority+0x7c>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	429a      	cmp	r2, r3
 800b522:	d90a      	bls.n	800b53a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b528:	f383 8811 	msr	BASEPRI, r3
 800b52c:	f3bf 8f6f 	isb	sy
 800b530:	f3bf 8f4f 	dsb	sy
 800b534:	603b      	str	r3, [r7, #0]
}
 800b536:	bf00      	nop
 800b538:	e7fe      	b.n	800b538 <vPortValidateInterruptPriority+0x60>
	}
 800b53a:	bf00      	nop
 800b53c:	3714      	adds	r7, #20
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr
 800b546:	bf00      	nop
 800b548:	e000e3f0 	.word	0xe000e3f0
 800b54c:	20001340 	.word	0x20001340
 800b550:	e000ed0c 	.word	0xe000ed0c
 800b554:	20001344 	.word	0x20001344

0800b558 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b08a      	sub	sp, #40	; 0x28
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b560:	2300      	movs	r3, #0
 800b562:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b564:	f7fe fd9a 	bl	800a09c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b568:	4b5b      	ldr	r3, [pc, #364]	; (800b6d8 <pvPortMalloc+0x180>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d101      	bne.n	800b574 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b570:	f000 f920 	bl	800b7b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b574:	4b59      	ldr	r3, [pc, #356]	; (800b6dc <pvPortMalloc+0x184>)
 800b576:	681a      	ldr	r2, [r3, #0]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	4013      	ands	r3, r2
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	f040 8093 	bne.w	800b6a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d01d      	beq.n	800b5c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b588:	2208      	movs	r2, #8
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	4413      	add	r3, r2
 800b58e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f003 0307 	and.w	r3, r3, #7
 800b596:	2b00      	cmp	r3, #0
 800b598:	d014      	beq.n	800b5c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f023 0307 	bic.w	r3, r3, #7
 800b5a0:	3308      	adds	r3, #8
 800b5a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f003 0307 	and.w	r3, r3, #7
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00a      	beq.n	800b5c4 <pvPortMalloc+0x6c>
	__asm volatile
 800b5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b2:	f383 8811 	msr	BASEPRI, r3
 800b5b6:	f3bf 8f6f 	isb	sy
 800b5ba:	f3bf 8f4f 	dsb	sy
 800b5be:	617b      	str	r3, [r7, #20]
}
 800b5c0:	bf00      	nop
 800b5c2:	e7fe      	b.n	800b5c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d06e      	beq.n	800b6a8 <pvPortMalloc+0x150>
 800b5ca:	4b45      	ldr	r3, [pc, #276]	; (800b6e0 <pvPortMalloc+0x188>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d869      	bhi.n	800b6a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b5d4:	4b43      	ldr	r3, [pc, #268]	; (800b6e4 <pvPortMalloc+0x18c>)
 800b5d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b5d8:	4b42      	ldr	r3, [pc, #264]	; (800b6e4 <pvPortMalloc+0x18c>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5de:	e004      	b.n	800b5ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d903      	bls.n	800b5fc <pvPortMalloc+0xa4>
 800b5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d1f1      	bne.n	800b5e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b5fc:	4b36      	ldr	r3, [pc, #216]	; (800b6d8 <pvPortMalloc+0x180>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b602:	429a      	cmp	r2, r3
 800b604:	d050      	beq.n	800b6a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b606:	6a3b      	ldr	r3, [r7, #32]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2208      	movs	r2, #8
 800b60c:	4413      	add	r3, r2
 800b60e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	6a3b      	ldr	r3, [r7, #32]
 800b616:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61a:	685a      	ldr	r2, [r3, #4]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	1ad2      	subs	r2, r2, r3
 800b620:	2308      	movs	r3, #8
 800b622:	005b      	lsls	r3, r3, #1
 800b624:	429a      	cmp	r2, r3
 800b626:	d91f      	bls.n	800b668 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4413      	add	r3, r2
 800b62e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b630:	69bb      	ldr	r3, [r7, #24]
 800b632:	f003 0307 	and.w	r3, r3, #7
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00a      	beq.n	800b650 <pvPortMalloc+0xf8>
	__asm volatile
 800b63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63e:	f383 8811 	msr	BASEPRI, r3
 800b642:	f3bf 8f6f 	isb	sy
 800b646:	f3bf 8f4f 	dsb	sy
 800b64a:	613b      	str	r3, [r7, #16]
}
 800b64c:	bf00      	nop
 800b64e:	e7fe      	b.n	800b64e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b652:	685a      	ldr	r2, [r3, #4]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	1ad2      	subs	r2, r2, r3
 800b658:	69bb      	ldr	r3, [r7, #24]
 800b65a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b662:	69b8      	ldr	r0, [r7, #24]
 800b664:	f000 f908 	bl	800b878 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b668:	4b1d      	ldr	r3, [pc, #116]	; (800b6e0 <pvPortMalloc+0x188>)
 800b66a:	681a      	ldr	r2, [r3, #0]
 800b66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	1ad3      	subs	r3, r2, r3
 800b672:	4a1b      	ldr	r2, [pc, #108]	; (800b6e0 <pvPortMalloc+0x188>)
 800b674:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b676:	4b1a      	ldr	r3, [pc, #104]	; (800b6e0 <pvPortMalloc+0x188>)
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	4b1b      	ldr	r3, [pc, #108]	; (800b6e8 <pvPortMalloc+0x190>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	429a      	cmp	r2, r3
 800b680:	d203      	bcs.n	800b68a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b682:	4b17      	ldr	r3, [pc, #92]	; (800b6e0 <pvPortMalloc+0x188>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4a18      	ldr	r2, [pc, #96]	; (800b6e8 <pvPortMalloc+0x190>)
 800b688:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68c:	685a      	ldr	r2, [r3, #4]
 800b68e:	4b13      	ldr	r3, [pc, #76]	; (800b6dc <pvPortMalloc+0x184>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	431a      	orrs	r2, r3
 800b694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b696:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69a:	2200      	movs	r2, #0
 800b69c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b69e:	4b13      	ldr	r3, [pc, #76]	; (800b6ec <pvPortMalloc+0x194>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	4a11      	ldr	r2, [pc, #68]	; (800b6ec <pvPortMalloc+0x194>)
 800b6a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b6a8:	f7fe fd06 	bl	800a0b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6ac:	69fb      	ldr	r3, [r7, #28]
 800b6ae:	f003 0307 	and.w	r3, r3, #7
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d00a      	beq.n	800b6cc <pvPortMalloc+0x174>
	__asm volatile
 800b6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ba:	f383 8811 	msr	BASEPRI, r3
 800b6be:	f3bf 8f6f 	isb	sy
 800b6c2:	f3bf 8f4f 	dsb	sy
 800b6c6:	60fb      	str	r3, [r7, #12]
}
 800b6c8:	bf00      	nop
 800b6ca:	e7fe      	b.n	800b6ca <pvPortMalloc+0x172>
	return pvReturn;
 800b6cc:	69fb      	ldr	r3, [r7, #28]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3728      	adds	r7, #40	; 0x28
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop
 800b6d8:	20004f50 	.word	0x20004f50
 800b6dc:	20004f64 	.word	0x20004f64
 800b6e0:	20004f54 	.word	0x20004f54
 800b6e4:	20004f48 	.word	0x20004f48
 800b6e8:	20004f58 	.word	0x20004f58
 800b6ec:	20004f5c 	.word	0x20004f5c

0800b6f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b086      	sub	sp, #24
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d04d      	beq.n	800b79e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b702:	2308      	movs	r3, #8
 800b704:	425b      	negs	r3, r3
 800b706:	697a      	ldr	r2, [r7, #20]
 800b708:	4413      	add	r3, r2
 800b70a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	685a      	ldr	r2, [r3, #4]
 800b714:	4b24      	ldr	r3, [pc, #144]	; (800b7a8 <vPortFree+0xb8>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4013      	ands	r3, r2
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d10a      	bne.n	800b734 <vPortFree+0x44>
	__asm volatile
 800b71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b722:	f383 8811 	msr	BASEPRI, r3
 800b726:	f3bf 8f6f 	isb	sy
 800b72a:	f3bf 8f4f 	dsb	sy
 800b72e:	60fb      	str	r3, [r7, #12]
}
 800b730:	bf00      	nop
 800b732:	e7fe      	b.n	800b732 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d00a      	beq.n	800b752 <vPortFree+0x62>
	__asm volatile
 800b73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b740:	f383 8811 	msr	BASEPRI, r3
 800b744:	f3bf 8f6f 	isb	sy
 800b748:	f3bf 8f4f 	dsb	sy
 800b74c:	60bb      	str	r3, [r7, #8]
}
 800b74e:	bf00      	nop
 800b750:	e7fe      	b.n	800b750 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	685a      	ldr	r2, [r3, #4]
 800b756:	4b14      	ldr	r3, [pc, #80]	; (800b7a8 <vPortFree+0xb8>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	4013      	ands	r3, r2
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d01e      	beq.n	800b79e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d11a      	bne.n	800b79e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	685a      	ldr	r2, [r3, #4]
 800b76c:	4b0e      	ldr	r3, [pc, #56]	; (800b7a8 <vPortFree+0xb8>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	43db      	mvns	r3, r3
 800b772:	401a      	ands	r2, r3
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b778:	f7fe fc90 	bl	800a09c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	685a      	ldr	r2, [r3, #4]
 800b780:	4b0a      	ldr	r3, [pc, #40]	; (800b7ac <vPortFree+0xbc>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4413      	add	r3, r2
 800b786:	4a09      	ldr	r2, [pc, #36]	; (800b7ac <vPortFree+0xbc>)
 800b788:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b78a:	6938      	ldr	r0, [r7, #16]
 800b78c:	f000 f874 	bl	800b878 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b790:	4b07      	ldr	r3, [pc, #28]	; (800b7b0 <vPortFree+0xc0>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	3301      	adds	r3, #1
 800b796:	4a06      	ldr	r2, [pc, #24]	; (800b7b0 <vPortFree+0xc0>)
 800b798:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b79a:	f7fe fc8d 	bl	800a0b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b79e:	bf00      	nop
 800b7a0:	3718      	adds	r7, #24
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	20004f64 	.word	0x20004f64
 800b7ac:	20004f54 	.word	0x20004f54
 800b7b0:	20004f60 	.word	0x20004f60

0800b7b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b7ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b7be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b7c0:	4b27      	ldr	r3, [pc, #156]	; (800b860 <prvHeapInit+0xac>)
 800b7c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f003 0307 	and.w	r3, r3, #7
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d00c      	beq.n	800b7e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	3307      	adds	r3, #7
 800b7d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f023 0307 	bic.w	r3, r3, #7
 800b7da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b7dc:	68ba      	ldr	r2, [r7, #8]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	1ad3      	subs	r3, r2, r3
 800b7e2:	4a1f      	ldr	r2, [pc, #124]	; (800b860 <prvHeapInit+0xac>)
 800b7e4:	4413      	add	r3, r2
 800b7e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b7ec:	4a1d      	ldr	r2, [pc, #116]	; (800b864 <prvHeapInit+0xb0>)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b7f2:	4b1c      	ldr	r3, [pc, #112]	; (800b864 <prvHeapInit+0xb0>)
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	68ba      	ldr	r2, [r7, #8]
 800b7fc:	4413      	add	r3, r2
 800b7fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b800:	2208      	movs	r2, #8
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	1a9b      	subs	r3, r3, r2
 800b806:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f023 0307 	bic.w	r3, r3, #7
 800b80e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	4a15      	ldr	r2, [pc, #84]	; (800b868 <prvHeapInit+0xb4>)
 800b814:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b816:	4b14      	ldr	r3, [pc, #80]	; (800b868 <prvHeapInit+0xb4>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	2200      	movs	r2, #0
 800b81c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b81e:	4b12      	ldr	r3, [pc, #72]	; (800b868 <prvHeapInit+0xb4>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2200      	movs	r2, #0
 800b824:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	68fa      	ldr	r2, [r7, #12]
 800b82e:	1ad2      	subs	r2, r2, r3
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b834:	4b0c      	ldr	r3, [pc, #48]	; (800b868 <prvHeapInit+0xb4>)
 800b836:	681a      	ldr	r2, [r3, #0]
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	4a0a      	ldr	r2, [pc, #40]	; (800b86c <prvHeapInit+0xb8>)
 800b842:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	4a09      	ldr	r2, [pc, #36]	; (800b870 <prvHeapInit+0xbc>)
 800b84a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b84c:	4b09      	ldr	r3, [pc, #36]	; (800b874 <prvHeapInit+0xc0>)
 800b84e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b852:	601a      	str	r2, [r3, #0]
}
 800b854:	bf00      	nop
 800b856:	3714      	adds	r7, #20
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr
 800b860:	20001348 	.word	0x20001348
 800b864:	20004f48 	.word	0x20004f48
 800b868:	20004f50 	.word	0x20004f50
 800b86c:	20004f58 	.word	0x20004f58
 800b870:	20004f54 	.word	0x20004f54
 800b874:	20004f64 	.word	0x20004f64

0800b878 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b878:	b480      	push	{r7}
 800b87a:	b085      	sub	sp, #20
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b880:	4b28      	ldr	r3, [pc, #160]	; (800b924 <prvInsertBlockIntoFreeList+0xac>)
 800b882:	60fb      	str	r3, [r7, #12]
 800b884:	e002      	b.n	800b88c <prvInsertBlockIntoFreeList+0x14>
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	60fb      	str	r3, [r7, #12]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	429a      	cmp	r2, r3
 800b894:	d8f7      	bhi.n	800b886 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	68ba      	ldr	r2, [r7, #8]
 800b8a0:	4413      	add	r3, r2
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d108      	bne.n	800b8ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	685a      	ldr	r2, [r3, #4]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	441a      	add	r2, r3
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	68ba      	ldr	r2, [r7, #8]
 800b8c4:	441a      	add	r2, r3
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d118      	bne.n	800b900 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	4b15      	ldr	r3, [pc, #84]	; (800b928 <prvInsertBlockIntoFreeList+0xb0>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d00d      	beq.n	800b8f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	685a      	ldr	r2, [r3, #4]
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	441a      	add	r2, r3
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	601a      	str	r2, [r3, #0]
 800b8f4:	e008      	b.n	800b908 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b8f6:	4b0c      	ldr	r3, [pc, #48]	; (800b928 <prvInsertBlockIntoFreeList+0xb0>)
 800b8f8:	681a      	ldr	r2, [r3, #0]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	601a      	str	r2, [r3, #0]
 800b8fe:	e003      	b.n	800b908 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b908:	68fa      	ldr	r2, [r7, #12]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d002      	beq.n	800b916 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b916:	bf00      	nop
 800b918:	3714      	adds	r7, #20
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr
 800b922:	bf00      	nop
 800b924:	20004f48 	.word	0x20004f48
 800b928:	20004f50 	.word	0x20004f50

0800b92c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b930:	2201      	movs	r2, #1
 800b932:	4912      	ldr	r1, [pc, #72]	; (800b97c <MX_USB_DEVICE_Init+0x50>)
 800b934:	4812      	ldr	r0, [pc, #72]	; (800b980 <MX_USB_DEVICE_Init+0x54>)
 800b936:	f7fc f8c1 	bl	8007abc <USBD_Init>
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d004      	beq.n	800b94a <MX_USB_DEVICE_Init+0x1e>
  {
	usb_failed2 = 1;
 800b940:	4b10      	ldr	r3, [pc, #64]	; (800b984 <MX_USB_DEVICE_Init+0x58>)
 800b942:	2201      	movs	r2, #1
 800b944:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800b946:	f7f5 fec7 	bl	80016d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800b94a:	490f      	ldr	r1, [pc, #60]	; (800b988 <MX_USB_DEVICE_Init+0x5c>)
 800b94c:	480c      	ldr	r0, [pc, #48]	; (800b980 <MX_USB_DEVICE_Init+0x54>)
 800b94e:	f7fc f8e5 	bl	8007b1c <USBD_RegisterClass>
 800b952:	4603      	mov	r3, r0
 800b954:	2b00      	cmp	r3, #0
 800b956:	d004      	beq.n	800b962 <MX_USB_DEVICE_Init+0x36>
  {
	  usb_failed2 = 1;
 800b958:	4b0a      	ldr	r3, [pc, #40]	; (800b984 <MX_USB_DEVICE_Init+0x58>)
 800b95a:	2201      	movs	r2, #1
 800b95c:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800b95e:	f7f5 febb 	bl	80016d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b962:	4807      	ldr	r0, [pc, #28]	; (800b980 <MX_USB_DEVICE_Init+0x54>)
 800b964:	f7fc f901 	bl	8007b6a <USBD_Start>
 800b968:	4603      	mov	r3, r0
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d004      	beq.n	800b978 <MX_USB_DEVICE_Init+0x4c>
  {
	  usb_failed2 = 1;
 800b96e:	4b05      	ldr	r3, [pc, #20]	; (800b984 <MX_USB_DEVICE_Init+0x58>)
 800b970:	2201      	movs	r2, #1
 800b972:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800b974:	f7f5 feb0 	bl	80016d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b978:	bf00      	nop
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	200000ec 	.word	0x200000ec
 800b980:	20005014 	.word	0x20005014
 800b984:	20004f68 	.word	0x20004f68
 800b988:	2000000c 	.word	0x2000000c

0800b98c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
 800b992:	4603      	mov	r3, r0
 800b994:	6039      	str	r1, [r7, #0]
 800b996:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	2212      	movs	r2, #18
 800b99c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b99e:	4b03      	ldr	r3, [pc, #12]	; (800b9ac <USBD_FS_DeviceDescriptor+0x20>)
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	370c      	adds	r7, #12
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr
 800b9ac:	20000108 	.word	0x20000108

0800b9b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	6039      	str	r1, [r7, #0]
 800b9ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	2204      	movs	r2, #4
 800b9c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b9c2:	4b03      	ldr	r3, [pc, #12]	; (800b9d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	370c      	adds	r7, #12
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr
 800b9d0:	2000011c 	.word	0x2000011c

0800b9d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	4603      	mov	r3, r0
 800b9dc:	6039      	str	r1, [r7, #0]
 800b9de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b9e0:	79fb      	ldrb	r3, [r7, #7]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d105      	bne.n	800b9f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b9e6:	683a      	ldr	r2, [r7, #0]
 800b9e8:	4907      	ldr	r1, [pc, #28]	; (800ba08 <USBD_FS_ProductStrDescriptor+0x34>)
 800b9ea:	4808      	ldr	r0, [pc, #32]	; (800ba0c <USBD_FS_ProductStrDescriptor+0x38>)
 800b9ec:	f7fd f947 	bl	8008c7e <USBD_GetString>
 800b9f0:	e004      	b.n	800b9fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b9f2:	683a      	ldr	r2, [r7, #0]
 800b9f4:	4904      	ldr	r1, [pc, #16]	; (800ba08 <USBD_FS_ProductStrDescriptor+0x34>)
 800b9f6:	4805      	ldr	r0, [pc, #20]	; (800ba0c <USBD_FS_ProductStrDescriptor+0x38>)
 800b9f8:	f7fd f941 	bl	8008c7e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9fc:	4b02      	ldr	r3, [pc, #8]	; (800ba08 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3708      	adds	r7, #8
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	200052e4 	.word	0x200052e4
 800ba0c:	08012644 	.word	0x08012644

0800ba10 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	4603      	mov	r3, r0
 800ba18:	6039      	str	r1, [r7, #0]
 800ba1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ba1c:	683a      	ldr	r2, [r7, #0]
 800ba1e:	4904      	ldr	r1, [pc, #16]	; (800ba30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ba20:	4804      	ldr	r0, [pc, #16]	; (800ba34 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ba22:	f7fd f92c 	bl	8008c7e <USBD_GetString>
  return USBD_StrDesc;
 800ba26:	4b02      	ldr	r3, [pc, #8]	; (800ba30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3708      	adds	r7, #8
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}
 800ba30:	200052e4 	.word	0x200052e4
 800ba34:	0801265c 	.word	0x0801265c

0800ba38 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	4603      	mov	r3, r0
 800ba40:	6039      	str	r1, [r7, #0]
 800ba42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	221a      	movs	r2, #26
 800ba48:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ba4a:	f000 f843 	bl	800bad4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ba4e:	4b02      	ldr	r3, [pc, #8]	; (800ba58 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3708      	adds	r7, #8
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	20000120 	.word	0x20000120

0800ba5c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b082      	sub	sp, #8
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	4603      	mov	r3, r0
 800ba64:	6039      	str	r1, [r7, #0]
 800ba66:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ba68:	79fb      	ldrb	r3, [r7, #7]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d105      	bne.n	800ba7a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ba6e:	683a      	ldr	r2, [r7, #0]
 800ba70:	4907      	ldr	r1, [pc, #28]	; (800ba90 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ba72:	4808      	ldr	r0, [pc, #32]	; (800ba94 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ba74:	f7fd f903 	bl	8008c7e <USBD_GetString>
 800ba78:	e004      	b.n	800ba84 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ba7a:	683a      	ldr	r2, [r7, #0]
 800ba7c:	4904      	ldr	r1, [pc, #16]	; (800ba90 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ba7e:	4805      	ldr	r0, [pc, #20]	; (800ba94 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ba80:	f7fd f8fd 	bl	8008c7e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba84:	4b02      	ldr	r3, [pc, #8]	; (800ba90 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3708      	adds	r7, #8
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	200052e4 	.word	0x200052e4
 800ba94:	08012670 	.word	0x08012670

0800ba98 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	4603      	mov	r3, r0
 800baa0:	6039      	str	r1, [r7, #0]
 800baa2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800baa4:	79fb      	ldrb	r3, [r7, #7]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d105      	bne.n	800bab6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800baaa:	683a      	ldr	r2, [r7, #0]
 800baac:	4907      	ldr	r1, [pc, #28]	; (800bacc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800baae:	4808      	ldr	r0, [pc, #32]	; (800bad0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bab0:	f7fd f8e5 	bl	8008c7e <USBD_GetString>
 800bab4:	e004      	b.n	800bac0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bab6:	683a      	ldr	r2, [r7, #0]
 800bab8:	4904      	ldr	r1, [pc, #16]	; (800bacc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800baba:	4805      	ldr	r0, [pc, #20]	; (800bad0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800babc:	f7fd f8df 	bl	8008c7e <USBD_GetString>
  }
  return USBD_StrDesc;
 800bac0:	4b02      	ldr	r3, [pc, #8]	; (800bacc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3708      	adds	r7, #8
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	200052e4 	.word	0x200052e4
 800bad0:	0801267c 	.word	0x0801267c

0800bad4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bada:	4b0f      	ldr	r3, [pc, #60]	; (800bb18 <Get_SerialNum+0x44>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bae0:	4b0e      	ldr	r3, [pc, #56]	; (800bb1c <Get_SerialNum+0x48>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bae6:	4b0e      	ldr	r3, [pc, #56]	; (800bb20 <Get_SerialNum+0x4c>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800baec:	68fa      	ldr	r2, [r7, #12]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	4413      	add	r3, r2
 800baf2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d009      	beq.n	800bb0e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bafa:	2208      	movs	r2, #8
 800bafc:	4909      	ldr	r1, [pc, #36]	; (800bb24 <Get_SerialNum+0x50>)
 800bafe:	68f8      	ldr	r0, [r7, #12]
 800bb00:	f000 f814 	bl	800bb2c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bb04:	2204      	movs	r2, #4
 800bb06:	4908      	ldr	r1, [pc, #32]	; (800bb28 <Get_SerialNum+0x54>)
 800bb08:	68b8      	ldr	r0, [r7, #8]
 800bb0a:	f000 f80f 	bl	800bb2c <IntToUnicode>
  }
}
 800bb0e:	bf00      	nop
 800bb10:	3710      	adds	r7, #16
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop
 800bb18:	1fff7a10 	.word	0x1fff7a10
 800bb1c:	1fff7a14 	.word	0x1fff7a14
 800bb20:	1fff7a18 	.word	0x1fff7a18
 800bb24:	20000122 	.word	0x20000122
 800bb28:	20000132 	.word	0x20000132

0800bb2c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b087      	sub	sp, #28
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	4613      	mov	r3, r2
 800bb38:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bb3e:	2300      	movs	r3, #0
 800bb40:	75fb      	strb	r3, [r7, #23]
 800bb42:	e027      	b.n	800bb94 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	0f1b      	lsrs	r3, r3, #28
 800bb48:	2b09      	cmp	r3, #9
 800bb4a:	d80b      	bhi.n	800bb64 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	0f1b      	lsrs	r3, r3, #28
 800bb50:	b2da      	uxtb	r2, r3
 800bb52:	7dfb      	ldrb	r3, [r7, #23]
 800bb54:	005b      	lsls	r3, r3, #1
 800bb56:	4619      	mov	r1, r3
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	440b      	add	r3, r1
 800bb5c:	3230      	adds	r2, #48	; 0x30
 800bb5e:	b2d2      	uxtb	r2, r2
 800bb60:	701a      	strb	r2, [r3, #0]
 800bb62:	e00a      	b.n	800bb7a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	0f1b      	lsrs	r3, r3, #28
 800bb68:	b2da      	uxtb	r2, r3
 800bb6a:	7dfb      	ldrb	r3, [r7, #23]
 800bb6c:	005b      	lsls	r3, r3, #1
 800bb6e:	4619      	mov	r1, r3
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	440b      	add	r3, r1
 800bb74:	3237      	adds	r2, #55	; 0x37
 800bb76:	b2d2      	uxtb	r2, r2
 800bb78:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	011b      	lsls	r3, r3, #4
 800bb7e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bb80:	7dfb      	ldrb	r3, [r7, #23]
 800bb82:	005b      	lsls	r3, r3, #1
 800bb84:	3301      	adds	r3, #1
 800bb86:	68ba      	ldr	r2, [r7, #8]
 800bb88:	4413      	add	r3, r2
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bb8e:	7dfb      	ldrb	r3, [r7, #23]
 800bb90:	3301      	adds	r3, #1
 800bb92:	75fb      	strb	r3, [r7, #23]
 800bb94:	7dfa      	ldrb	r2, [r7, #23]
 800bb96:	79fb      	ldrb	r3, [r7, #7]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d3d3      	bcc.n	800bb44 <IntToUnicode+0x18>
  }
}
 800bb9c:	bf00      	nop
 800bb9e:	bf00      	nop
 800bba0:	371c      	adds	r7, #28
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr
	...

0800bbac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b08a      	sub	sp, #40	; 0x28
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bbb4:	f107 0314 	add.w	r3, r7, #20
 800bbb8:	2200      	movs	r2, #0
 800bbba:	601a      	str	r2, [r3, #0]
 800bbbc:	605a      	str	r2, [r3, #4]
 800bbbe:	609a      	str	r2, [r3, #8]
 800bbc0:	60da      	str	r2, [r3, #12]
 800bbc2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bbcc:	d13a      	bne.n	800bc44 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bbce:	2300      	movs	r3, #0
 800bbd0:	613b      	str	r3, [r7, #16]
 800bbd2:	4b1e      	ldr	r3, [pc, #120]	; (800bc4c <HAL_PCD_MspInit+0xa0>)
 800bbd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbd6:	4a1d      	ldr	r2, [pc, #116]	; (800bc4c <HAL_PCD_MspInit+0xa0>)
 800bbd8:	f043 0301 	orr.w	r3, r3, #1
 800bbdc:	6313      	str	r3, [r2, #48]	; 0x30
 800bbde:	4b1b      	ldr	r3, [pc, #108]	; (800bc4c <HAL_PCD_MspInit+0xa0>)
 800bbe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbe2:	f003 0301 	and.w	r3, r3, #1
 800bbe6:	613b      	str	r3, [r7, #16]
 800bbe8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bbea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bbee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbf0:	2302      	movs	r3, #2
 800bbf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bbf8:	2303      	movs	r3, #3
 800bbfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bbfc:	230a      	movs	r3, #10
 800bbfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc00:	f107 0314 	add.w	r3, r7, #20
 800bc04:	4619      	mov	r1, r3
 800bc06:	4812      	ldr	r0, [pc, #72]	; (800bc50 <HAL_PCD_MspInit+0xa4>)
 800bc08:	f7f6 fa00 	bl	800200c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bc0c:	4b0f      	ldr	r3, [pc, #60]	; (800bc4c <HAL_PCD_MspInit+0xa0>)
 800bc0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc10:	4a0e      	ldr	r2, [pc, #56]	; (800bc4c <HAL_PCD_MspInit+0xa0>)
 800bc12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc16:	6353      	str	r3, [r2, #52]	; 0x34
 800bc18:	2300      	movs	r3, #0
 800bc1a:	60fb      	str	r3, [r7, #12]
 800bc1c:	4b0b      	ldr	r3, [pc, #44]	; (800bc4c <HAL_PCD_MspInit+0xa0>)
 800bc1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc20:	4a0a      	ldr	r2, [pc, #40]	; (800bc4c <HAL_PCD_MspInit+0xa0>)
 800bc22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bc26:	6453      	str	r3, [r2, #68]	; 0x44
 800bc28:	4b08      	ldr	r3, [pc, #32]	; (800bc4c <HAL_PCD_MspInit+0xa0>)
 800bc2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc30:	60fb      	str	r3, [r7, #12]
 800bc32:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800bc34:	2200      	movs	r2, #0
 800bc36:	2105      	movs	r1, #5
 800bc38:	2043      	movs	r0, #67	; 0x43
 800bc3a:	f7f6 f9bd 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bc3e:	2043      	movs	r0, #67	; 0x43
 800bc40:	f7f6 f9d6 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bc44:	bf00      	nop
 800bc46:	3728      	adds	r7, #40	; 0x28
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}
 800bc4c:	40023800 	.word	0x40023800
 800bc50:	40020000 	.word	0x40020000

0800bc54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bc68:	4619      	mov	r1, r3
 800bc6a:	4610      	mov	r0, r2
 800bc6c:	f7fb ffc8 	bl	8007c00 <USBD_LL_SetupStage>
}
 800bc70:	bf00      	nop
 800bc72:	3708      	adds	r7, #8
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b082      	sub	sp, #8
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	460b      	mov	r3, r1
 800bc82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bc8a:	78fa      	ldrb	r2, [r7, #3]
 800bc8c:	6879      	ldr	r1, [r7, #4]
 800bc8e:	4613      	mov	r3, r2
 800bc90:	00db      	lsls	r3, r3, #3
 800bc92:	1a9b      	subs	r3, r3, r2
 800bc94:	009b      	lsls	r3, r3, #2
 800bc96:	440b      	add	r3, r1
 800bc98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bc9c:	681a      	ldr	r2, [r3, #0]
 800bc9e:	78fb      	ldrb	r3, [r7, #3]
 800bca0:	4619      	mov	r1, r3
 800bca2:	f7fc f802 	bl	8007caa <USBD_LL_DataOutStage>
}
 800bca6:	bf00      	nop
 800bca8:	3708      	adds	r7, #8
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}

0800bcae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b082      	sub	sp, #8
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bcc0:	78fa      	ldrb	r2, [r7, #3]
 800bcc2:	6879      	ldr	r1, [r7, #4]
 800bcc4:	4613      	mov	r3, r2
 800bcc6:	00db      	lsls	r3, r3, #3
 800bcc8:	1a9b      	subs	r3, r3, r2
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	440b      	add	r3, r1
 800bcce:	3348      	adds	r3, #72	; 0x48
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	78fb      	ldrb	r3, [r7, #3]
 800bcd4:	4619      	mov	r1, r3
 800bcd6:	f7fc f84b 	bl	8007d70 <USBD_LL_DataInStage>
}
 800bcda:	bf00      	nop
 800bcdc:	3708      	adds	r7, #8
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}

0800bce2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bce2:	b580      	push	{r7, lr}
 800bce4:	b082      	sub	sp, #8
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f7fc f95f 	bl	8007fb4 <USBD_LL_SOF>
}
 800bcf6:	bf00      	nop
 800bcf8:	3708      	adds	r7, #8
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}

0800bcfe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcfe:	b580      	push	{r7, lr}
 800bd00:	b084      	sub	sp, #16
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bd06:	2301      	movs	r3, #1
 800bd08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	68db      	ldr	r3, [r3, #12]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d102      	bne.n	800bd18 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bd12:	2300      	movs	r3, #0
 800bd14:	73fb      	strb	r3, [r7, #15]
 800bd16:	e008      	b.n	800bd2a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	2b02      	cmp	r3, #2
 800bd1e:	d102      	bne.n	800bd26 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bd20:	2301      	movs	r3, #1
 800bd22:	73fb      	strb	r3, [r7, #15]
 800bd24:	e001      	b.n	800bd2a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bd26:	f7f5 fcd7 	bl	80016d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd30:	7bfa      	ldrb	r2, [r7, #15]
 800bd32:	4611      	mov	r1, r2
 800bd34:	4618      	mov	r0, r3
 800bd36:	f7fc f8ff 	bl	8007f38 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7fc f8ab 	bl	8007e9c <USBD_LL_Reset>
}
 800bd46:	bf00      	nop
 800bd48:	3710      	adds	r7, #16
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
	...

0800bd50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7fc f8fa 	bl	8007f58 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	6812      	ldr	r2, [r2, #0]
 800bd72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bd76:	f043 0301 	orr.w	r3, r3, #1
 800bd7a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6a1b      	ldr	r3, [r3, #32]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d005      	beq.n	800bd90 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd84:	4b04      	ldr	r3, [pc, #16]	; (800bd98 <HAL_PCD_SuspendCallback+0x48>)
 800bd86:	691b      	ldr	r3, [r3, #16]
 800bd88:	4a03      	ldr	r2, [pc, #12]	; (800bd98 <HAL_PCD_SuspendCallback+0x48>)
 800bd8a:	f043 0306 	orr.w	r3, r3, #6
 800bd8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bd90:	bf00      	nop
 800bd92:	3708      	adds	r7, #8
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	e000ed00 	.word	0xe000ed00

0800bd9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7fc f8ea 	bl	8007f84 <USBD_LL_Resume>
}
 800bdb0:	bf00      	nop
 800bdb2:	3708      	adds	r7, #8
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}

0800bdb8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	460b      	mov	r3, r1
 800bdc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bdca:	78fa      	ldrb	r2, [r7, #3]
 800bdcc:	4611      	mov	r1, r2
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7fc f938 	bl	8008044 <USBD_LL_IsoOUTIncomplete>
}
 800bdd4:	bf00      	nop
 800bdd6:	3708      	adds	r7, #8
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	460b      	mov	r3, r1
 800bde6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bdee:	78fa      	ldrb	r2, [r7, #3]
 800bdf0:	4611      	mov	r1, r2
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f7fc f900 	bl	8007ff8 <USBD_LL_IsoINIncomplete>
}
 800bdf8:	bf00      	nop
 800bdfa:	3708      	adds	r7, #8
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800be0e:	4618      	mov	r0, r3
 800be10:	f7fc f93e 	bl	8008090 <USBD_LL_DevConnected>
}
 800be14:	bf00      	nop
 800be16:	3708      	adds	r7, #8
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b082      	sub	sp, #8
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7fc f93b 	bl	80080a6 <USBD_LL_DevDisconnected>
}
 800be30:	bf00      	nop
 800be32:	3708      	adds	r7, #8
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b082      	sub	sp, #8
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	2b01      	cmp	r3, #1
 800be46:	d13c      	bne.n	800bec2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800be48:	4a20      	ldr	r2, [pc, #128]	; (800becc <USBD_LL_Init+0x94>)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	4a1e      	ldr	r2, [pc, #120]	; (800becc <USBD_LL_Init+0x94>)
 800be54:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800be58:	4b1c      	ldr	r3, [pc, #112]	; (800becc <USBD_LL_Init+0x94>)
 800be5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800be5e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800be60:	4b1a      	ldr	r3, [pc, #104]	; (800becc <USBD_LL_Init+0x94>)
 800be62:	2206      	movs	r2, #6
 800be64:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800be66:	4b19      	ldr	r3, [pc, #100]	; (800becc <USBD_LL_Init+0x94>)
 800be68:	2202      	movs	r2, #2
 800be6a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800be6c:	4b17      	ldr	r3, [pc, #92]	; (800becc <USBD_LL_Init+0x94>)
 800be6e:	2200      	movs	r2, #0
 800be70:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800be72:	4b16      	ldr	r3, [pc, #88]	; (800becc <USBD_LL_Init+0x94>)
 800be74:	2202      	movs	r2, #2
 800be76:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800be78:	4b14      	ldr	r3, [pc, #80]	; (800becc <USBD_LL_Init+0x94>)
 800be7a:	2200      	movs	r2, #0
 800be7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800be7e:	4b13      	ldr	r3, [pc, #76]	; (800becc <USBD_LL_Init+0x94>)
 800be80:	2200      	movs	r2, #0
 800be82:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800be84:	4b11      	ldr	r3, [pc, #68]	; (800becc <USBD_LL_Init+0x94>)
 800be86:	2200      	movs	r2, #0
 800be88:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800be8a:	4b10      	ldr	r3, [pc, #64]	; (800becc <USBD_LL_Init+0x94>)
 800be8c:	2200      	movs	r2, #0
 800be8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800be90:	4b0e      	ldr	r3, [pc, #56]	; (800becc <USBD_LL_Init+0x94>)
 800be92:	2200      	movs	r2, #0
 800be94:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800be96:	480d      	ldr	r0, [pc, #52]	; (800becc <USBD_LL_Init+0x94>)
 800be98:	f7f6 fa7d 	bl	8002396 <HAL_PCD_Init>
 800be9c:	4603      	mov	r3, r0
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d001      	beq.n	800bea6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bea2:	f7f5 fc19 	bl	80016d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bea6:	2180      	movs	r1, #128	; 0x80
 800bea8:	4808      	ldr	r0, [pc, #32]	; (800becc <USBD_LL_Init+0x94>)
 800beaa:	f7f7 fbf6 	bl	800369a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800beae:	2240      	movs	r2, #64	; 0x40
 800beb0:	2100      	movs	r1, #0
 800beb2:	4806      	ldr	r0, [pc, #24]	; (800becc <USBD_LL_Init+0x94>)
 800beb4:	f7f7 fbaa 	bl	800360c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800beb8:	2280      	movs	r2, #128	; 0x80
 800beba:	2101      	movs	r1, #1
 800bebc:	4803      	ldr	r0, [pc, #12]	; (800becc <USBD_LL_Init+0x94>)
 800bebe:	f7f7 fba5 	bl	800360c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bec2:	2300      	movs	r3, #0
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3708      	adds	r7, #8
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}
 800becc:	200054e4 	.word	0x200054e4

0800bed0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bed8:	2300      	movs	r3, #0
 800beda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bedc:	2300      	movs	r3, #0
 800bede:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7f6 fb79 	bl	80025de <HAL_PCD_Start>
 800beec:	4603      	mov	r3, r0
 800beee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bef0:	7bfb      	ldrb	r3, [r7, #15]
 800bef2:	4618      	mov	r0, r3
 800bef4:	f000 f97e 	bl	800c1f4 <USBD_Get_USB_Status>
 800bef8:	4603      	mov	r3, r0
 800befa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800befc:	7bbb      	ldrb	r3, [r7, #14]
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3710      	adds	r7, #16
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}

0800bf06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bf06:	b580      	push	{r7, lr}
 800bf08:	b084      	sub	sp, #16
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
 800bf0e:	4608      	mov	r0, r1
 800bf10:	4611      	mov	r1, r2
 800bf12:	461a      	mov	r2, r3
 800bf14:	4603      	mov	r3, r0
 800bf16:	70fb      	strb	r3, [r7, #3]
 800bf18:	460b      	mov	r3, r1
 800bf1a:	70bb      	strb	r3, [r7, #2]
 800bf1c:	4613      	mov	r3, r2
 800bf1e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf20:	2300      	movs	r3, #0
 800bf22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf24:	2300      	movs	r3, #0
 800bf26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bf2e:	78bb      	ldrb	r3, [r7, #2]
 800bf30:	883a      	ldrh	r2, [r7, #0]
 800bf32:	78f9      	ldrb	r1, [r7, #3]
 800bf34:	f7f6 ff8a 	bl	8002e4c <HAL_PCD_EP_Open>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf3c:	7bfb      	ldrb	r3, [r7, #15]
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f000 f958 	bl	800c1f4 <USBD_Get_USB_Status>
 800bf44:	4603      	mov	r3, r0
 800bf46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf48:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3710      	adds	r7, #16
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}

0800bf52 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf52:	b580      	push	{r7, lr}
 800bf54:	b084      	sub	sp, #16
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	6078      	str	r0, [r7, #4]
 800bf5a:	460b      	mov	r3, r1
 800bf5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf62:	2300      	movs	r3, #0
 800bf64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf6c:	78fa      	ldrb	r2, [r7, #3]
 800bf6e:	4611      	mov	r1, r2
 800bf70:	4618      	mov	r0, r3
 800bf72:	f7f6 ffd3 	bl	8002f1c <HAL_PCD_EP_Close>
 800bf76:	4603      	mov	r3, r0
 800bf78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf7a:	7bfb      	ldrb	r3, [r7, #15]
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f000 f939 	bl	800c1f4 <USBD_Get_USB_Status>
 800bf82:	4603      	mov	r3, r0
 800bf84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf86:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3710      	adds	r7, #16
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b084      	sub	sp, #16
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	460b      	mov	r3, r1
 800bf9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bfaa:	78fa      	ldrb	r2, [r7, #3]
 800bfac:	4611      	mov	r1, r2
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7f7 f893 	bl	80030da <HAL_PCD_EP_SetStall>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfb8:	7bfb      	ldrb	r3, [r7, #15]
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f000 f91a 	bl	800c1f4 <USBD_Get_USB_Status>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3710      	adds	r7, #16
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}

0800bfce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfce:	b580      	push	{r7, lr}
 800bfd0:	b084      	sub	sp, #16
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
 800bfd6:	460b      	mov	r3, r1
 800bfd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bfe8:	78fa      	ldrb	r2, [r7, #3]
 800bfea:	4611      	mov	r1, r2
 800bfec:	4618      	mov	r0, r3
 800bfee:	f7f7 f8d8 	bl	80031a2 <HAL_PCD_EP_ClrStall>
 800bff2:	4603      	mov	r3, r0
 800bff4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bff6:	7bfb      	ldrb	r3, [r7, #15]
 800bff8:	4618      	mov	r0, r3
 800bffa:	f000 f8fb 	bl	800c1f4 <USBD_Get_USB_Status>
 800bffe:	4603      	mov	r3, r0
 800c000:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c002:	7bbb      	ldrb	r3, [r7, #14]
}
 800c004:	4618      	mov	r0, r3
 800c006:	3710      	adds	r7, #16
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b085      	sub	sp, #20
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	460b      	mov	r3, r1
 800c016:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c01e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c020:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c024:	2b00      	cmp	r3, #0
 800c026:	da0b      	bge.n	800c040 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c028:	78fb      	ldrb	r3, [r7, #3]
 800c02a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c02e:	68f9      	ldr	r1, [r7, #12]
 800c030:	4613      	mov	r3, r2
 800c032:	00db      	lsls	r3, r3, #3
 800c034:	1a9b      	subs	r3, r3, r2
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	440b      	add	r3, r1
 800c03a:	333e      	adds	r3, #62	; 0x3e
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	e00b      	b.n	800c058 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c040:	78fb      	ldrb	r3, [r7, #3]
 800c042:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c046:	68f9      	ldr	r1, [r7, #12]
 800c048:	4613      	mov	r3, r2
 800c04a:	00db      	lsls	r3, r3, #3
 800c04c:	1a9b      	subs	r3, r3, r2
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	440b      	add	r3, r1
 800c052:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c056:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3714      	adds	r7, #20
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	460b      	mov	r3, r1
 800c06e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c070:	2300      	movs	r3, #0
 800c072:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c074:	2300      	movs	r3, #0
 800c076:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c07e:	78fa      	ldrb	r2, [r7, #3]
 800c080:	4611      	mov	r1, r2
 800c082:	4618      	mov	r0, r3
 800c084:	f7f6 febd 	bl	8002e02 <HAL_PCD_SetAddress>
 800c088:	4603      	mov	r3, r0
 800c08a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c08c:	7bfb      	ldrb	r3, [r7, #15]
 800c08e:	4618      	mov	r0, r3
 800c090:	f000 f8b0 	bl	800c1f4 <USBD_Get_USB_Status>
 800c094:	4603      	mov	r3, r0
 800c096:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c098:	7bbb      	ldrb	r3, [r7, #14]
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3710      	adds	r7, #16
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}

0800c0a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c0a2:	b580      	push	{r7, lr}
 800c0a4:	b086      	sub	sp, #24
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	60f8      	str	r0, [r7, #12]
 800c0aa:	607a      	str	r2, [r7, #4]
 800c0ac:	603b      	str	r3, [r7, #0]
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c0c0:	7af9      	ldrb	r1, [r7, #11]
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	f7f6 ffbe 	bl	8003046 <HAL_PCD_EP_Transmit>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0ce:	7dfb      	ldrb	r3, [r7, #23]
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f000 f88f 	bl	800c1f4 <USBD_Get_USB_Status>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c0da:	7dbb      	ldrb	r3, [r7, #22]
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3718      	adds	r7, #24
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b086      	sub	sp, #24
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	607a      	str	r2, [r7, #4]
 800c0ee:	603b      	str	r3, [r7, #0]
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c102:	7af9      	ldrb	r1, [r7, #11]
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	687a      	ldr	r2, [r7, #4]
 800c108:	f7f6 ff52 	bl	8002fb0 <HAL_PCD_EP_Receive>
 800c10c:	4603      	mov	r3, r0
 800c10e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c110:	7dfb      	ldrb	r3, [r7, #23]
 800c112:	4618      	mov	r0, r3
 800c114:	f000 f86e 	bl	800c1f4 <USBD_Get_USB_Status>
 800c118:	4603      	mov	r3, r0
 800c11a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c11c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3718      	adds	r7, #24
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
	...

0800c128 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	460b      	mov	r3, r1
 800c132:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c134:	78fb      	ldrb	r3, [r7, #3]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d002      	beq.n	800c140 <HAL_PCDEx_LPM_Callback+0x18>
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	d01f      	beq.n	800c17e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c13e:	e03b      	b.n	800c1b8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6a1b      	ldr	r3, [r3, #32]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d007      	beq.n	800c158 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800c148:	f7f4 fde6 	bl	8000d18 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c14c:	4b1c      	ldr	r3, [pc, #112]	; (800c1c0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c14e:	691b      	ldr	r3, [r3, #16]
 800c150:	4a1b      	ldr	r2, [pc, #108]	; (800c1c0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c152:	f023 0306 	bic.w	r3, r3, #6
 800c156:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	6812      	ldr	r2, [r2, #0]
 800c166:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c16a:	f023 0301 	bic.w	r3, r3, #1
 800c16e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c176:	4618      	mov	r0, r3
 800c178:	f7fb ff04 	bl	8007f84 <USBD_LL_Resume>
    break;
 800c17c:	e01c      	b.n	800c1b8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	687a      	ldr	r2, [r7, #4]
 800c18a:	6812      	ldr	r2, [r2, #0]
 800c18c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c190:	f043 0301 	orr.w	r3, r3, #1
 800c194:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c19c:	4618      	mov	r0, r3
 800c19e:	f7fb fedb 	bl	8007f58 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6a1b      	ldr	r3, [r3, #32]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d005      	beq.n	800c1b6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1aa:	4b05      	ldr	r3, [pc, #20]	; (800c1c0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c1ac:	691b      	ldr	r3, [r3, #16]
 800c1ae:	4a04      	ldr	r2, [pc, #16]	; (800c1c0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c1b0:	f043 0306 	orr.w	r3, r3, #6
 800c1b4:	6113      	str	r3, [r2, #16]
    break;
 800c1b6:	bf00      	nop
}
 800c1b8:	bf00      	nop
 800c1ba:	3708      	adds	r7, #8
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	e000ed00 	.word	0xe000ed00

0800c1c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c1cc:	4b03      	ldr	r3, [pc, #12]	; (800c1dc <USBD_static_malloc+0x18>)
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	370c      	adds	r7, #12
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d8:	4770      	bx	lr
 800c1da:	bf00      	nop
 800c1dc:	20004f6c 	.word	0x20004f6c

0800c1e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b083      	sub	sp, #12
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]

}
 800c1e8:	bf00      	nop
 800c1ea:	370c      	adds	r7, #12
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr

0800c1f4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b085      	sub	sp, #20
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1fe:	2300      	movs	r3, #0
 800c200:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c202:	79fb      	ldrb	r3, [r7, #7]
 800c204:	2b03      	cmp	r3, #3
 800c206:	d817      	bhi.n	800c238 <USBD_Get_USB_Status+0x44>
 800c208:	a201      	add	r2, pc, #4	; (adr r2, 800c210 <USBD_Get_USB_Status+0x1c>)
 800c20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c20e:	bf00      	nop
 800c210:	0800c221 	.word	0x0800c221
 800c214:	0800c227 	.word	0x0800c227
 800c218:	0800c22d 	.word	0x0800c22d
 800c21c:	0800c233 	.word	0x0800c233
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c220:	2300      	movs	r3, #0
 800c222:	73fb      	strb	r3, [r7, #15]
    break;
 800c224:	e00b      	b.n	800c23e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c226:	2303      	movs	r3, #3
 800c228:	73fb      	strb	r3, [r7, #15]
    break;
 800c22a:	e008      	b.n	800c23e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c22c:	2301      	movs	r3, #1
 800c22e:	73fb      	strb	r3, [r7, #15]
    break;
 800c230:	e005      	b.n	800c23e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c232:	2303      	movs	r3, #3
 800c234:	73fb      	strb	r3, [r7, #15]
    break;
 800c236:	e002      	b.n	800c23e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c238:	2303      	movs	r3, #3
 800c23a:	73fb      	strb	r3, [r7, #15]
    break;
 800c23c:	bf00      	nop
  }
  return usb_status;
 800c23e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c240:	4618      	mov	r0, r3
 800c242:	3714      	adds	r7, #20
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr

0800c24c <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800c24c:	b480      	push	{r7}
 800c24e:	b083      	sub	sp, #12
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	4608      	mov	r0, r1
 800c256:	4611      	mov	r1, r2
 800c258:	461a      	mov	r2, r3
 800c25a:	4603      	mov	r3, r0
 800c25c:	70fb      	strb	r3, [r7, #3]
 800c25e:	460b      	mov	r3, r1
 800c260:	70bb      	strb	r3, [r7, #2]
 800c262:	4613      	mov	r3, r2
 800c264:	707b      	strb	r3, [r7, #1]
                return 0;
 800c266:	2300      	movs	r3, #0
        }
 800c268:	4618      	mov	r0, r3
 800c26a:	370c      	adds	r7, #12
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr

0800c274 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800c274:	b480      	push	{r7}
 800c276:	b083      	sub	sp, #12
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
 800c27c:	4608      	mov	r0, r1
 800c27e:	4611      	mov	r1, r2
 800c280:	461a      	mov	r2, r3
 800c282:	4603      	mov	r3, r0
 800c284:	70fb      	strb	r3, [r7, #3]
 800c286:	460b      	mov	r3, r1
 800c288:	70bb      	strb	r3, [r7, #2]
 800c28a:	4613      	mov	r3, r2
 800c28c:	707b      	strb	r3, [r7, #1]
                return 0;
 800c28e:	2300      	movs	r3, #0
        }
 800c290:	4618      	mov	r0, r3
 800c292:	370c      	adds	r7, #12
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr

0800c29c <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 800c29c:	b480      	push	{r7}
 800c29e:	b083      	sub	sp, #12
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
                return 0;
 800c2a4:	2300      	movs	r3, #0
        }
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	370c      	adds	r7, #12
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr

0800c2b2 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 800c2b2:	b480      	push	{r7}
 800c2b4:	b083      	sub	sp, #12
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	6078      	str	r0, [r7, #4]
                return 0;
 800c2ba:	2300      	movs	r3, #0
        }
 800c2bc:	4618      	mov	r0, r3
 800c2be:	370c      	adds	r7, #12
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr

0800c2c8 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 800c2c8:	b480      	push	{r7}
 800c2ca:	b083      	sub	sp, #12
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
                return 0;
 800c2d0:	2300      	movs	r3, #0
        }
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	370c      	adds	r7, #12
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr

0800c2de <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 800c2de:	b480      	push	{r7}
 800c2e0:	b083      	sub	sp, #12
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	6078      	str	r0, [r7, #4]
 800c2e6:	460b      	mov	r3, r1
 800c2e8:	70fb      	strb	r3, [r7, #3]
                return;
 800c2ea:	bf00      	nop
        } // Note used for hubs only!
 800c2ec:	370c      	adds	r7, #12
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f4:	4770      	bx	lr

0800c2f6 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 800c2f6:	b480      	push	{r7}
 800c2f8:	b083      	sub	sp, #12
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6078      	str	r0, [r7, #4]
 800c2fe:	460b      	mov	r3, r1
 800c300:	807b      	strh	r3, [r7, #2]
 800c302:	4613      	mov	r3, r2
 800c304:	803b      	strh	r3, [r7, #0]
                return false;
 800c306:	2300      	movs	r3, #0
        }
 800c308:	4618      	mov	r0, r3
 800c30a:	370c      	adds	r7, #12
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr

0800c314 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	460b      	mov	r3, r1
 800c31e:	70fb      	strb	r3, [r7, #3]
                return false;
 800c320:	2300      	movs	r3, #0
        }
 800c322:	4618      	mov	r0, r3
 800c324:	370c      	adds	r7, #12
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr

0800c32e <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 800c32e:	b480      	push	{r7}
 800c330:	b083      	sub	sp, #12
 800c332:	af00      	add	r7, sp, #0
 800c334:	6078      	str	r0, [r7, #4]
 800c336:	460b      	mov	r3, r1
 800c338:	70fb      	strb	r3, [r7, #3]
                return true;
 800c33a:	2301      	movs	r3, #1
        }
 800c33c:	4618      	mov	r0, r3
 800c33e:	370c      	adds	r7, #12
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr

0800c348 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
                return (AddressPool&)addrPool;
 800c350:	687b      	ldr	r3, [r7, #4]
        };
 800c352:	4618      	mov	r0, r3
 800c354:	370c      	adds	r7, #12
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr

0800c35e <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 800c35e:	b480      	push	{r7}
 800c360:	b085      	sub	sp, #20
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
 800c366:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800c368:	2300      	movs	r3, #0
 800c36a:	73fb      	strb	r3, [r7, #15]
 800c36c:	7bfb      	ldrb	r3, [r7, #15]
 800c36e:	2b0f      	cmp	r3, #15
 800c370:	d812      	bhi.n	800c398 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3a>
                        if(!devConfig[i]) {
 800c372:	7bfa      	ldrb	r2, [r7, #15]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	321e      	adds	r2, #30
 800c378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d107      	bne.n	800c390 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x32>
                                devConfig[i] = pdev;
 800c380:	7bfa      	ldrb	r2, [r7, #15]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	321e      	adds	r2, #30
 800c386:	6839      	ldr	r1, [r7, #0]
 800c388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                return 0;
 800c38c:	2300      	movs	r3, #0
 800c38e:	e004      	b.n	800c39a <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3c>
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800c390:	7bfb      	ldrb	r3, [r7, #15]
 800c392:	3301      	adds	r3, #1
 800c394:	73fb      	strb	r3, [r7, #15]
 800c396:	e7e9      	b.n	800c36c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0xe>
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 800c398:	23d3      	movs	r3, #211	; 0xd3
        };
 800c39a:	4618      	mov	r0, r3
 800c39c:	3714      	adds	r7, #20
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a4:	4770      	bx	lr

0800c3a6 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 800c3a6:	b480      	push	{r7}
 800c3a8:	b083      	sub	sp, #12
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	6078      	str	r0, [r7, #4]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	701a      	strb	r2, [r3, #0]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	705a      	strb	r2, [r3, #1]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	709a      	strb	r2, [r3, #2]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	70da      	strb	r2, [r3, #3]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	711a      	strb	r2, [r3, #4]
        };
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	370c      	adds	r7, #12
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr

0800c3d4 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 800c3d4:	b480      	push	{r7}
 800c3d6:	b083      	sub	sp, #12
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	601a      	str	r2, [r3, #0]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	711a      	strb	r2, [r3, #4]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	715a      	strb	r2, [r3, #5]
        };
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	370c      	adds	r7, #12
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr

0800c3fc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 800c3fc:	b480      	push	{r7}
 800c3fe:	b083      	sub	sp, #12
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	601a      	str	r2, [r3, #0]
                countDown = valueSize = pbuf->valueSize;
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	781a      	ldrb	r2, [r3, #0]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	715a      	strb	r2, [r3, #5]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	795a      	ldrb	r2, [r3, #5]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	711a      	strb	r2, [r3, #4]
        };
 800c420:	bf00      	nop
 800c422:	370c      	adds	r7, #12
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr

0800c42c <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 800c42c:	b480      	push	{r7}
 800c42e:	b083      	sub	sp, #12
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2200      	movs	r2, #0
 800c438:	601a      	str	r2, [r3, #0]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2200      	movs	r2, #0
 800c43e:	711a      	strb	r2, [r3, #4]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2200      	movs	r2, #0
 800c444:	80da      	strh	r2, [r3, #6]
        };
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	4618      	mov	r0, r3
 800c44a:	370c      	adds	r7, #12
 800c44c:	46bd      	mov	sp, r7
 800c44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c452:	4770      	bx	lr

0800c454 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 800c454:	b480      	push	{r7}
 800c456:	b083      	sub	sp, #12
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	601a      	str	r2, [r3, #0]
                countDown = 0;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2200      	movs	r2, #0
 800c46c:	80da      	strh	r2, [r3, #6]
        };
 800c46e:	bf00      	nop
 800c470:	370c      	adds	r7, #12
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr

0800c47a <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 800c47a:	b480      	push	{r7}
 800c47c:	b085      	sub	sp, #20
 800c47e:	af00      	add	r7, sp, #0
 800c480:	60f8      	str	r0, [r7, #12]
 800c482:	60b9      	str	r1, [r7, #8]
 800c484:	607a      	str	r2, [r7, #4]
 800c486:	807b      	strh	r3, [r7, #2]
                switch(nStage) {
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	791b      	ldrb	r3, [r3, #4]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d002      	beq.n	800c496 <_ZN11ByteSkipper4SkipEPPhPtt+0x1c>
 800c490:	2b01      	cmp	r3, #1
 800c492:	d009      	beq.n	800c4a8 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>
 800c494:	e029      	b.n	800c4ea <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                        case 0:
                                countDown = bytes_to_skip;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	887a      	ldrh	r2, [r7, #2]
 800c49a:	80da      	strh	r2, [r3, #6]
                                nStage++;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	791b      	ldrb	r3, [r3, #4]
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	b2da      	uxtb	r2, r3
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	711a      	strb	r2, [r3, #4]
                                // fall through
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	88db      	ldrh	r3, [r3, #6]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d015      	beq.n	800c4dc <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	881b      	ldrh	r3, [r3, #0]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d011      	beq.n	800c4dc <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	88db      	ldrh	r3, [r3, #6]
 800c4bc:	3b01      	subs	r3, #1
 800c4be:	b29a      	uxth	r2, r3
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	80da      	strh	r2, [r3, #6]
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	1c5a      	adds	r2, r3, #1
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	601a      	str	r2, [r3, #0]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	881b      	ldrh	r3, [r3, #0]
 800c4d2:	3b01      	subs	r3, #1
 800c4d4:	b29a      	uxth	r2, r3
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	801a      	strh	r2, [r3, #0]
 800c4da:	e7e5      	b.n	800c4a8 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>

                                if(!countDown)
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	88db      	ldrh	r3, [r3, #6]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d102      	bne.n	800c4ea <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                                        nStage = 0;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	711a      	strb	r2, [r3, #4]
                };
                return (!countDown);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	88db      	ldrh	r3, [r3, #6]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	bf0c      	ite	eq
 800c4f2:	2301      	moveq	r3, #1
 800c4f4:	2300      	movne	r3, #0
 800c4f6:	b2db      	uxtb	r3, r3
        };
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3714      	adds	r7, #20
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr

0800c504 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 800c504:	b480      	push	{r7}
 800c506:	b083      	sub	sp, #12
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	4608      	mov	r0, r1
 800c50e:	4611      	mov	r1, r2
 800c510:	461a      	mov	r2, r3
 800c512:	4603      	mov	r3, r0
 800c514:	70fb      	strb	r3, [r7, #3]
 800c516:	460b      	mov	r3, r1
 800c518:	70bb      	strb	r3, [r7, #2]
 800c51a:	4613      	mov	r3, r2
 800c51c:	707b      	strb	r3, [r7, #1]
        };
 800c51e:	bf00      	nop
 800c520:	370c      	adds	r7, #12
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr
	...

0800c52c <_ZN15USBDeviceConfigC1Ev>:
class USBDeviceConfig {
 800c52c:	b480      	push	{r7}
 800c52e:	b083      	sub	sp, #12
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	4a04      	ldr	r2, [pc, #16]	; (800c548 <_ZN15USBDeviceConfigC1Ev+0x1c>)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	601a      	str	r2, [r3, #0]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	4618      	mov	r0, r3
 800c53e:	370c      	adds	r7, #12
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr
 800c548:	08012860 	.word	0x08012860

0800c54c <_ZN17UsbConfigXtracterC1Ev>:
class UsbConfigXtracter {
 800c54c:	b480      	push	{r7}
 800c54e:	b083      	sub	sp, #12
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	4a04      	ldr	r2, [pc, #16]	; (800c568 <_ZN17UsbConfigXtracterC1Ev+0x1c>)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	601a      	str	r2, [r3, #0]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4618      	mov	r0, r3
 800c55e:	370c      	adds	r7, #12
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr
 800c568:	08012848 	.word	0x08012848

0800c56c <_ZN3BTD10GetAddressEv>:
        virtual uint8_t GetAddress() {
 800c56c:	b480      	push	{r7}
 800c56e:	b083      	sub	sp, #12
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
                return bAddress;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
        };
 800c57a:	4618      	mov	r0, r3
 800c57c:	370c      	adds	r7, #12
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr

0800c586 <_ZN3BTD7isReadyEv>:
        virtual bool isReady() {
 800c586:	b480      	push	{r7}
 800c588:	b083      	sub	sp, #12
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
                return bPollEnable;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
        };
 800c594:	4618      	mov	r0, r3
 800c596:	370c      	adds	r7, #12
 800c598:	46bd      	mov	sp, r7
 800c59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59e:	4770      	bx	lr

0800c5a0 <_ZN3BTD10DEVCLASSOKEh>:
        virtual bool DEVCLASSOK(uint8_t klass) {
 800c5a0:	b480      	push	{r7}
 800c5a2:	b083      	sub	sp, #12
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	460b      	mov	r3, r1
 800c5aa:	70fb      	strb	r3, [r7, #3]
                return (klass == USB_CLASS_WIRELESS_CTRL);
 800c5ac:	78fb      	ldrb	r3, [r7, #3]
 800c5ae:	2be0      	cmp	r3, #224	; 0xe0
 800c5b0:	bf0c      	ite	eq
 800c5b2:	2301      	moveq	r3, #1
 800c5b4:	2300      	movne	r3, #0
 800c5b6:	b2db      	uxtb	r3, r3
        };
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	370c      	adds	r7, #12
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr

0800c5c4 <_ZN3BTD8VIDPIDOKEtt>:
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 800c5c4:	b480      	push	{r7}
 800c5c6:	b083      	sub	sp, #12
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	460b      	mov	r3, r1
 800c5ce:	807b      	strh	r3, [r7, #2]
 800c5d0:	4613      	mov	r3, r2
 800c5d2:	803b      	strh	r3, [r7, #0]
                if((vid == IOGEAR_GBU521_VID && pid == IOGEAR_GBU521_PID) || (vid == BELKIN_F8T065BF_VID && pid == BELKIN_F8T065BF_PID))
 800c5d4:	887b      	ldrh	r3, [r7, #2]
 800c5d6:	f640 225c 	movw	r2, #2652	; 0xa5c
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d104      	bne.n	800c5e8 <_ZN3BTD8VIDPIDOKEtt+0x24>
 800c5de:	883b      	ldrh	r3, [r7, #0]
 800c5e0:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d009      	beq.n	800c5fc <_ZN3BTD8VIDPIDOKEtt+0x38>
 800c5e8:	887b      	ldrh	r3, [r7, #2]
 800c5ea:	f240 520d 	movw	r2, #1293	; 0x50d
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	d106      	bne.n	800c600 <_ZN3BTD8VIDPIDOKEtt+0x3c>
 800c5f2:	883b      	ldrh	r3, [r7, #0]
 800c5f4:	f240 625a 	movw	r2, #1626	; 0x65a
 800c5f8:	4293      	cmp	r3, r2
 800c5fa:	d101      	bne.n	800c600 <_ZN3BTD8VIDPIDOKEtt+0x3c>
                        return true;
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	e02d      	b.n	800c65c <_ZN3BTD8VIDPIDOKEtt+0x98>
                if(my_bdaddr[0] != 0x00 || my_bdaddr[1] != 0x00 || my_bdaddr[2] != 0x00 || my_bdaddr[3] != 0x00 || my_bdaddr[4] != 0x00 || my_bdaddr[5] != 0x00) { // Check if Bluetooth address is set
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	7d1b      	ldrb	r3, [r3, #20]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d113      	bne.n	800c630 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	7d5b      	ldrb	r3, [r3, #21]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d10f      	bne.n	800c630 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	7d9b      	ldrb	r3, [r3, #22]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d10b      	bne.n	800c630 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	7ddb      	ldrb	r3, [r3, #23]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d107      	bne.n	800c630 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	7e1b      	ldrb	r3, [r3, #24]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d103      	bne.n	800c630 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	7e5b      	ldrb	r3, [r3, #25]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d014      	beq.n	800c65a <_ZN3BTD8VIDPIDOKEtt+0x96>
                        if(vid == PS3_VID && (pid == PS3_PID || pid == PS3NAVIGATION_PID || pid == PS3MOVE_PID))
 800c630:	887b      	ldrh	r3, [r7, #2]
 800c632:	f240 524c 	movw	r2, #1356	; 0x54c
 800c636:	4293      	cmp	r3, r2
 800c638:	d10f      	bne.n	800c65a <_ZN3BTD8VIDPIDOKEtt+0x96>
 800c63a:	883b      	ldrh	r3, [r7, #0]
 800c63c:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800c640:	d009      	beq.n	800c656 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800c642:	883b      	ldrh	r3, [r7, #0]
 800c644:	f240 422f 	movw	r2, #1071	; 0x42f
 800c648:	4293      	cmp	r3, r2
 800c64a:	d004      	beq.n	800c656 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800c64c:	883b      	ldrh	r3, [r7, #0]
 800c64e:	f240 32d5 	movw	r2, #981	; 0x3d5
 800c652:	4293      	cmp	r3, r2
 800c654:	d101      	bne.n	800c65a <_ZN3BTD8VIDPIDOKEtt+0x96>
                                return true;
 800c656:	2301      	movs	r3, #1
 800c658:	e000      	b.n	800c65c <_ZN3BTD8VIDPIDOKEtt+0x98>
                return false;
 800c65a:	2300      	movs	r3, #0
        };
 800c65c:	4618      	mov	r0, r3
 800c65e:	370c      	adds	r7, #12
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr

0800c668 <_ZN3BTDC1EP3USB>:
const uint8_t BTD::BTD_CONTROL_PIPE = 0;
const uint8_t BTD::BTD_EVENT_PIPE = 1;
const uint8_t BTD::BTD_DATAIN_PIPE = 2;
const uint8_t BTD::BTD_DATAOUT_PIPE = 3;

BTD::BTD(USB *p) :
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	6039      	str	r1, [r7, #0]
bAddress(0), // Device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
simple_pairing_supported(false),
bPollEnable(false) // Don't start polling before dongle is connected
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	4618      	mov	r0, r3
 800c676:	f7ff ff59 	bl	800c52c <_ZN15USBDeviceConfigC1Ev>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	3304      	adds	r3, #4
 800c67e:	4618      	mov	r0, r3
 800c680:	f7ff ff64 	bl	800c54c <_ZN17UsbConfigXtracterC1Ev>
 800c684:	4a2b      	ldr	r2, [pc, #172]	; (800c734 <_ZN3BTDC1EP3USB+0xcc>)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	601a      	str	r2, [r3, #0]
 800c68a:	4a2b      	ldr	r2, [pc, #172]	; (800c738 <_ZN3BTDC1EP3USB+0xd0>)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	605a      	str	r2, [r3, #4]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2200      	movs	r2, #0
 800c694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2200      	movs	r2, #0
 800c69c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	683a      	ldr	r2, [r7, #0]
 800c6bc:	64da      	str	r2, [r3, #76]	; 0x4c
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	661a      	str	r2, [r3, #96]	; 0x60
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
{
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	73fb      	strb	r3, [r7, #15]
 800c6f0:	7bfb      	ldrb	r3, [r7, #15]
 800c6f2:	2b03      	cmp	r3, #3
 800c6f4:	d80a      	bhi.n	800c70c <_ZN3BTDC1EP3USB+0xa4>
                btService[i] = NULL;
 800c6f6:	7bfb      	ldrb	r3, [r7, #15]
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	3318      	adds	r3, #24
 800c6fc:	009b      	lsls	r3, r3, #2
 800c6fe:	4413      	add	r3, r2
 800c700:	2200      	movs	r2, #0
 800c702:	605a      	str	r2, [r3, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800c704:	7bfb      	ldrb	r3, [r7, #15]
 800c706:	3301      	adds	r3, #1
 800c708:	73fb      	strb	r3, [r7, #15]
 800c70a:	e7f1      	b.n	800c6f0 <_ZN3BTDC1EP3USB+0x88>

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f000 fa7d 	bl	800cc0c <_ZN3BTD10InitializeEv>

        if(pUsb) // Register in USB subsystem
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c716:	2b00      	cmp	r3, #0
 800c718:	d006      	beq.n	800c728 <_ZN3BTDC1EP3USB+0xc0>
                pUsb->RegisterDeviceClass(this); // Set devConfig[] entry
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	4611      	mov	r1, r2
 800c722:	4618      	mov	r0, r3
 800c724:	f7ff fe1b 	bl	800c35e <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	4618      	mov	r0, r3
 800c72c:	3710      	adds	r7, #16
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	08012808 	.word	0x08012808
 800c738:	0801283c 	.word	0x0801283c

0800c73c <_ZN3BTD15ConfigureDeviceEhhb>:

uint8_t BTD::ConfigureDevice(uint8_t parent, uint8_t port, bool lowspeed) {
 800c73c:	b590      	push	{r4, r7, lr}
 800c73e:	b08f      	sub	sp, #60	; 0x3c
 800c740:	af02      	add	r7, sp, #8
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	4608      	mov	r0, r1
 800c746:	4611      	mov	r1, r2
 800c748:	461a      	mov	r2, r3
 800c74a:	4603      	mov	r3, r0
 800c74c:	70fb      	strb	r3, [r7, #3]
 800c74e:	460b      	mov	r3, r1
 800c750:	70bb      	strb	r3, [r7, #2]
 800c752:	4613      	mov	r3, r2
 800c754:	707b      	strb	r3, [r7, #1]
        const uint8_t constBufSize = sizeof (USB_DEVICE_DESCRIPTOR);
 800c756:	2312      	movs	r3, #18
 800c758:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        uint8_t buf[constBufSize];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 800c75c:	f107 0308 	add.w	r3, r7, #8
 800c760:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t rcode;
        UsbDevice *p = NULL;
 800c762:	2300      	movs	r3, #0
 800c764:	627b      	str	r3, [r7, #36]	; 0x24
        EpInfo *oldep_ptr = NULL;
 800c766:	2300      	movs	r3, #0
 800c768:	623b      	str	r3, [r7, #32]

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f000 fa4e 	bl	800cc0c <_ZN3BTD10InitializeEv>

        AddressPool &addrPool = pUsb->GetAddressPool(); // Get memory address of USB device address pool
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c774:	4618      	mov	r0, r3
 800c776:	f7ff fde7 	bl	800c348 <_ZN3USB14GetAddressPoolEv>
 800c77a:	61f8      	str	r0, [r7, #28]
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD ConfigureDevice"), 0x80);
#endif

        if(bAddress) { // Check if address has already been assigned to an instance
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c782:	2b00      	cmp	r3, #0
 800c784:	d001      	beq.n	800c78a <_ZN3BTD15ConfigureDeviceEhhb+0x4e>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 800c786:	23d9      	movs	r3, #217	; 0xd9
 800c788:	e087      	b.n	800c89a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        p = addrPool.GetUsbDevicePtr(0); // Get pointer to pseudo device with address 0 assigned
 800c78a:	69fb      	ldr	r3, [r7, #28]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	2100      	movs	r1, #0
 800c792:	69f8      	ldr	r0, [r7, #28]
 800c794:	4798      	blx	r3
 800c796:	6278      	str	r0, [r7, #36]	; 0x24
        if(!p) {
 800c798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d101      	bne.n	800c7a2 <_ZN3BTD15ConfigureDeviceEhhb+0x66>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800c79e:	23d6      	movs	r3, #214	; 0xd6
 800c7a0:	e07b      	b.n	800c89a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if(!p->epinfo) {
 800c7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d101      	bne.n	800c7ae <_ZN3BTD15ConfigureDeviceEhhb+0x72>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 800c7aa:	23d7      	movs	r3, #215	; 0xd7
 800c7ac:	e075      	b.n	800c89a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        oldep_ptr = p->epinfo; // Save old pointer to EP_RECORD of address 0
 800c7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	623b      	str	r3, [r7, #32]
        p->epinfo = epInfo; // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f103 0251 	add.w	r2, r3, #81	; 0x51
 800c7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7bc:	601a      	str	r2, [r3, #0]
        p->lowspeed = lowspeed;
 800c7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c0:	787a      	ldrb	r2, [r7, #1]
 800c7c2:	719a      	strb	r2, [r3, #6]
        rcode = pUsb->getDevDescr(0, 0, constBufSize, (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c7c8:	f107 0308 	add.w	r3, r7, #8
 800c7cc:	9300      	str	r3, [sp, #0]
 800c7ce:	2312      	movs	r3, #18
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	2100      	movs	r1, #0
 800c7d4:	f005 fa13 	bl	8011bfe <_ZN3USB11getDevDescrEhhtPh>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        p->epinfo = oldep_ptr; // Restore p->epinfo
 800c7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e0:	6a3a      	ldr	r2, [r7, #32]
 800c7e2:	601a      	str	r2, [r3, #0]

        if(rcode)
 800c7e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d146      	bne.n	800c87a <_ZN3BTD15ConfigureDeviceEhhb+0x13e>
                goto FailGetDevDescr;

        bAddress = addrPool.AllocAddress(parent, false, port); // Allocate new address according to device class
 800c7ec:	69fb      	ldr	r3, [r7, #28]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	3304      	adds	r3, #4
 800c7f2:	681c      	ldr	r4, [r3, #0]
 800c7f4:	78bb      	ldrb	r3, [r7, #2]
 800c7f6:	78f9      	ldrb	r1, [r7, #3]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	69f8      	ldr	r0, [r7, #28]
 800c7fc:	47a0      	blx	r4
 800c7fe:	4603      	mov	r3, r0
 800c800:	461a      	mov	r2, r3
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(!bAddress) {
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d101      	bne.n	800c816 <_ZN3BTD15ConfigureDeviceEhhb+0xda>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nOut of address space"), 0x80);
#endif
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800c812:	23d4      	movs	r3, #212	; 0xd4
 800c814:	e041      	b.n	800c89a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if (udd->bDeviceClass == 0x09) // Some dongles have an USB hub inside
 800c816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c818:	791b      	ldrb	r3, [r3, #4]
 800c81a:	2b09      	cmp	r3, #9
 800c81c:	d017      	beq.n	800c84e <_ZN3BTD15ConfigureDeviceEhhb+0x112>
                goto FailHub;

        epInfo[0].maxPktSize = udd->bMaxPacketSize0; // Extract Max Packet Size from device descriptor
 800c81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c820:	79da      	ldrb	r2, [r3, #7]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        epInfo[1].epAddr = udd->bNumConfigurations; // Steal and abuse from epInfo structure to save memory
 800c828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c82a:	7c5a      	ldrb	r2, [r3, #17]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        VID = udd->idVendor;
 800c832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c834:	891b      	ldrh	r3, [r3, #8]
 800c836:	b29a      	uxth	r2, r3
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        PID = udd->idProduct;
 800c83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c840:	895b      	ldrh	r3, [r3, #10]
 800c842:	b29a      	uxth	r2, r3
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

        return USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET;
 800c84a:	23e0      	movs	r3, #224	; 0xe0
 800c84c:	e025      	b.n	800c89a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailHub;
 800c84e:	bf00      	nop

FailHub:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nPlease create a hub instance in your code: \"USBHub Hub1(&Usb);\""), 0x80);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800c85a:	2300      	movs	r3, #0
 800c85c:	2200      	movs	r2, #0
 800c85e:	f005 fa6b 	bl	8011d38 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800c862:	23d1      	movs	r3, #209	; 0xd1
 800c864:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	3308      	adds	r3, #8
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	4798      	blx	r3
        return rcode;
 800c874:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c878:	e00f      	b.n	800c89a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailGetDevDescr;
 800c87a:	bf00      	nop

FailGetDevDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetDevDescr(rcode);
#endif
        if(rcode != hrJERR)
 800c87c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c880:	2b0d      	cmp	r3, #13
 800c882:	d002      	beq.n	800c88a <_ZN3BTD15ConfigureDeviceEhhb+0x14e>
                rcode = USB_ERROR_FailGetDevDescr;
 800c884:	23e1      	movs	r3, #225	; 0xe1
 800c886:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	3308      	adds	r3, #8
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	4798      	blx	r3
        return rcode;
 800c896:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
};
 800c89a:	4618      	mov	r0, r3
 800c89c:	3734      	adds	r7, #52	; 0x34
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd90      	pop	{r4, r7, pc}

0800c8a2 <_ZN3BTD4InitEhhb>:

uint8_t BTD::Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed) {
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b096      	sub	sp, #88	; 0x58
 800c8a6:	af02      	add	r7, sp, #8
 800c8a8:	6078      	str	r0, [r7, #4]
 800c8aa:	4608      	mov	r0, r1
 800c8ac:	4611      	mov	r1, r2
 800c8ae:	461a      	mov	r2, r3
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	70fb      	strb	r3, [r7, #3]
 800c8b4:	460b      	mov	r3, r1
 800c8b6:	70bb      	strb	r3, [r7, #2]
 800c8b8:	4613      	mov	r3, r2
 800c8ba:	707b      	strb	r3, [r7, #1]
        uint8_t rcode;
        uint8_t num_of_conf = epInfo[1].epAddr; // Number of configurations
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c8c2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        epInfo[1].epAddr = 0;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        AddressPool &addrPool = pUsb->GetAddressPool();
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f7ff fd38 	bl	800c348 <_ZN3USB14GetAddressPoolEv>
 800c8d8:	64b8      	str	r0, [r7, #72]	; 0x48
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD Init"), 0x80);
#endif
        UsbDevice *p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800c8da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	687a      	ldr	r2, [r7, #4]
 800c8e2:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800c8e6:	4611      	mov	r1, r2
 800c8e8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c8ea:	4798      	blx	r3
 800c8ec:	6478      	str	r0, [r7, #68]	; 0x44

        if(!p) {
 800c8ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d101      	bne.n	800c8f8 <_ZN3BTD4InitEhhb+0x56>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800c8f4:	23d6      	movs	r3, #214	; 0xd6
 800c8f6:	e185      	b.n	800cc04 <_ZN3BTD4InitEhhb+0x362>
        }

        delay(300); // Assign new address to the device
 800c8f8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800c8fc:	f7f5 fa80 	bl	8001e00 <HAL_Delay>

        rcode = pUsb->setAddr(0, 0, bAddress); // Assign new address to the device
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c90a:	2200      	movs	r2, #0
 800c90c:	2100      	movs	r1, #0
 800c90e:	f005 fa13 	bl	8011d38 <_ZN3USB7setAddrEhhh>
 800c912:	4603      	mov	r3, r0
 800c914:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode) {
 800c918:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d003      	beq.n	800c928 <_ZN3BTD4InitEhhb+0x86>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                p->lowspeed = false;
 800c920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c922:	2200      	movs	r2, #0
 800c924:	719a      	strb	r2, [r3, #6]
                goto Fail;
 800c926:	e165      	b.n	800cbf4 <_ZN3BTD4InitEhhb+0x352>
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif

        p->lowspeed = false;
 800c928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c92a:	2200      	movs	r2, #0
 800c92c:	719a      	strb	r2, [r3, #6]

        p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800c92e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800c93a:	4611      	mov	r1, r2
 800c93c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c93e:	4798      	blx	r3
 800c940:	6478      	str	r0, [r7, #68]	; 0x44
        if(!p) {
 800c942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c944:	2b00      	cmp	r3, #0
 800c946:	d101      	bne.n	800c94c <_ZN3BTD4InitEhhb+0xaa>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800c948:	23d6      	movs	r3, #214	; 0xd6
 800c94a:	e15b      	b.n	800cc04 <_ZN3BTD4InitEhhb+0x362>
        }

        p->lowspeed = lowspeed;
 800c94c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c94e:	787a      	ldrb	r2, [r7, #1]
 800c950:	719a      	strb	r2, [r3, #6]

        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo); // Assign epInfo to epinfo pointer - only EP0 is known
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	3351      	adds	r3, #81	; 0x51
 800c960:	2201      	movs	r2, #1
 800c962:	f004 f8dc 	bl	8010b1e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800c966:	4603      	mov	r3, r0
 800c968:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode)
 800c96c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c970:	2b00      	cmp	r3, #0
 800c972:	f040 8128 	bne.w	800cbc6 <_ZN3BTD4InitEhhb+0x324>
                goto FailSetDevTblEntry;

        if(VID == PS3_VID && (PID == PS3_PID || PID == PS3NAVIGATION_PID || PID == PS3MOVE_PID)) {
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800c97c:	f240 524c 	movw	r2, #1356	; 0x54c
 800c980:	4293      	cmp	r3, r2
 800c982:	d177      	bne.n	800ca74 <_ZN3BTD4InitEhhb+0x1d2>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800c98a:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800c98e:	d00d      	beq.n	800c9ac <_ZN3BTD4InitEhhb+0x10a>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800c996:	f240 422f 	movw	r2, #1071	; 0x42f
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d006      	beq.n	800c9ac <_ZN3BTD4InitEhhb+0x10a>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800c9a4:	f240 32d5 	movw	r2, #981	; 0x3d5
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d163      	bne.n	800ca74 <_ZN3BTD4InitEhhb+0x1d2>
                delay(100);
 800c9ac:	2064      	movs	r0, #100	; 0x64
 800c9ae:	f7f5 fa27 	bl	8001e00 <HAL_Delay>
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 1); // We only need the Control endpoint, so we don't have to initialize the other endpoints of device
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	f005 f9e6 	bl	8011d94 <_ZN3USB7setConfEhhh>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800c9ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	f040 80f9 	bne.w	800cbca <_ZN3BTD4InitEhhb+0x328>
                                Notify(PSTR("\r\nNavigation Controller Connected"), 0x80);
                } else // It must be a Motion controller
                        Notify(PSTR("\r\nMotion Controller Connected"), 0x80);
#endif

                if(my_bdaddr[0] == 0x00 && my_bdaddr[1] == 0x00 && my_bdaddr[2] == 0x00 && my_bdaddr[3] == 0x00 && my_bdaddr[4] == 0x00 && my_bdaddr[5] == 0x00) {
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	7d1b      	ldrb	r3, [r3, #20]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d113      	bne.n	800ca08 <_ZN3BTD4InitEhhb+0x166>
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	7d5b      	ldrb	r3, [r3, #21]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d10f      	bne.n	800ca08 <_ZN3BTD4InitEhhb+0x166>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	7d9b      	ldrb	r3, [r3, #22]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d10b      	bne.n	800ca08 <_ZN3BTD4InitEhhb+0x166>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	7ddb      	ldrb	r3, [r3, #23]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d107      	bne.n	800ca08 <_ZN3BTD4InitEhhb+0x166>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	7e1b      	ldrb	r3, [r3, #24]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d103      	bne.n	800ca08 <_ZN3BTD4InitEhhb+0x166>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	7e5b      	ldrb	r3, [r3, #25]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d019      	beq.n	800ca3c <_ZN3BTD4InitEhhb+0x19a>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPlease plug in the dongle before trying to pair with the PS3 Controller\r\nor set the Bluetooth address in the constructor of the PS3BT class"), 0x80);
#endif
                } else {
                        if(PID == PS3_PID || PID == PS3NAVIGATION_PID)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ca0e:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800ca12:	d006      	beq.n	800ca22 <_ZN3BTD4InitEhhb+0x180>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ca1a:	f240 422f 	movw	r2, #1071	; 0x42f
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d106      	bne.n	800ca30 <_ZN3BTD4InitEhhb+0x18e>
                                setBdaddr(my_bdaddr); // Set internal Bluetooth address
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	3314      	adds	r3, #20
 800ca26:	4619      	mov	r1, r3
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f002 f8b0 	bl	800eb8e <_ZN3BTD9setBdaddrEPh>
 800ca2e:	e005      	b.n	800ca3c <_ZN3BTD4InitEhhb+0x19a>
                        else
                                setMoveBdaddr(my_bdaddr); // Set internal Bluetooth address
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	3314      	adds	r3, #20
 800ca34:	4619      	mov	r1, r3
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f002 f8e9 	bl	800ec0e <_ZN3BTD13setMoveBdaddrEPh>
                        }
                        D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                }

                pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 0); // Reset configuration value
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	f005 f9a1 	bl	8011d94 <_ZN3USB7setConfEhhh>
                pUsb->setAddr(bAddress, 0, 0); // Reset address
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	2200      	movs	r2, #0
 800ca60:	f005 f96a 	bl	8011d38 <_ZN3USB7setAddrEhhh>
                Release(); // Release device
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	3308      	adds	r3, #8
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	4798      	blx	r3
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED; // Return
 800ca70:	23d1      	movs	r3, #209	; 0xd1
 800ca72:	e0c7      	b.n	800cc04 <_ZN3BTD4InitEhhb+0x362>
        } else {
                // Check if attached device is a Bluetooth dongle and fill endpoint data structure
                // First interface in the configuration must have Bluetooth assigned Class/Subclass/Protocol
                // And 3 endpoints - interrupt-IN, bulk-IN, bulk-OUT, not necessarily in this order
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800ca74:	2300      	movs	r3, #0
 800ca76:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800ca7a:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800ca7e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d25e      	bcs.n	800cb44 <_ZN3BTD4InitEhhb+0x2a2>
                        if((VID == IOGEAR_GBU521_VID && PID == IOGEAR_GBU521_PID) || (VID == BELKIN_F8T065BF_VID && PID == BELKIN_F8T065BF_PID)) {
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800ca8c:	f640 225c 	movw	r2, #2652	; 0xa5c
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d106      	bne.n	800caa2 <_ZN3BTD4InitEhhb+0x200>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ca9a:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d00d      	beq.n	800cabe <_ZN3BTD4InitEhhb+0x21c>
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800caa8:	f240 520d 	movw	r2, #1293	; 0x50d
 800caac:	4293      	cmp	r3, r2
 800caae:	d120      	bne.n	800caf2 <_ZN3BTD4InitEhhb+0x250>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800cab6:	f240 625a 	movw	r2, #1626	; 0x65a
 800caba:	4293      	cmp	r3, r2
 800cabc:	d119      	bne.n	800caf2 <_ZN3BTD4InitEhhb+0x250>
                                ConfigDescParser<USB_CLASS_VENDOR_SPECIFIC, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Workaround issue with some dongles
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	1d1a      	adds	r2, r3, #4
 800cac2:	f107 0308 	add.w	r3, r7, #8
 800cac6:	4611      	mov	r1, r2
 800cac8:	4618      	mov	r0, r3
 800caca:	f002 f8f3 	bl	800ecb4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cad8:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800cadc:	f107 0308 	add.w	r3, r7, #8
 800cae0:	9300      	str	r3, [sp, #0]
 800cae2:	4613      	mov	r3, r2
 800cae4:	2200      	movs	r2, #0
 800cae6:	f005 f8da 	bl	8011c9e <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800caea:	4603      	mov	r3, r0
 800caec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800caf0:	e018      	b.n	800cb24 <_ZN3BTD4InitEhhb+0x282>
                        } else {
                                ConfigDescParser<USB_CLASS_WIRELESS_CTRL, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Set class id according to the specification
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	1d1a      	adds	r2, r3, #4
 800caf6:	f107 0308 	add.w	r3, r7, #8
 800cafa:	4611      	mov	r1, r2
 800cafc:	4618      	mov	r0, r3
 800cafe:	f002 f927 	bl	800ed50 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cb0c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800cb10:	f107 0308 	add.w	r3, r7, #8
 800cb14:	9300      	str	r3, [sp, #0]
 800cb16:	4613      	mov	r3, r2
 800cb18:	2200      	movs	r2, #0
 800cb1a:	f005 f8c0 	bl	8011c9e <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        }
                        if(rcode) // Check error code
 800cb24:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d150      	bne.n	800cbce <_ZN3BTD4InitEhhb+0x32c>
                                goto FailGetConfDescr;
                        if(bNumEP >= BTD_MAX_ENDPOINTS) // All endpoints extracted
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800cb32:	2b03      	cmp	r3, #3
 800cb34:	d805      	bhi.n	800cb42 <_ZN3BTD4InitEhhb+0x2a0>
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800cb36:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800cb3a:	3301      	adds	r3, #1
 800cb3c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800cb40:	e79b      	b.n	800ca7a <_ZN3BTD4InitEhhb+0x1d8>
                                break;
 800cb42:	bf00      	nop
                }

                if(bNumEP < BTD_MAX_ENDPOINTS)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800cb4a:	2b03      	cmp	r3, #3
 800cb4c:	d945      	bls.n	800cbda <_ZN3BTD4InitEhhb+0x338>
                        goto FailUnknownDevice;

                // Assign epInfo to epinfo pointer - this time all 3 endpoins
                rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	3351      	adds	r3, #81	; 0x51
 800cb62:	f003 ffdc 	bl	8010b1e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800cb66:	4603      	mov	r3, r0
 800cb68:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800cb6c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d12e      	bne.n	800cbd2 <_ZN3BTD4InitEhhb+0x330>
                        goto FailSetDevTblEntry;

                // Set Configuration Value
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bConfNum);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cb8a:	f005 f903 	bl	8011d94 <_ZN3USB7setConfEhhh>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800cb94:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d11c      	bne.n	800cbd6 <_ZN3BTD4InitEhhb+0x334>
                        goto FailSetConfDescr;

                hci_num_reset_loops = 100; // only loop 100 times before trying to send the hci reset command
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2264      	movs	r2, #100	; 0x64
 800cba0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                hci_counter = 0;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2200      	movs	r2, #0
 800cba8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                hci_state = HCI_INIT_STATE;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                waitingForConnection = false;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	721a      	strb	r2, [r3, #8]
                bPollEnable = true;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nBluetooth Dongle Initialized"), 0x80);
#endif
        }
        return 0; // Successful configuration
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	e01e      	b.n	800cc04 <_ZN3BTD4InitEhhb+0x362>
                goto FailSetDevTblEntry;
 800cbc6:	bf00      	nop
 800cbc8:	e014      	b.n	800cbf4 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 800cbca:	bf00      	nop
 800cbcc:	e012      	b.n	800cbf4 <_ZN3BTD4InitEhhb+0x352>
                                goto FailGetConfDescr;
 800cbce:	bf00      	nop
 800cbd0:	e010      	b.n	800cbf4 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetDevTblEntry;
 800cbd2:	bf00      	nop
 800cbd4:	e00e      	b.n	800cbf4 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 800cbd6:	bf00      	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 800cbd8:	e00c      	b.n	800cbf4 <_ZN3BTD4InitEhhb+0x352>
                        goto FailUnknownDevice;
 800cbda:	bf00      	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	2200      	movs	r2, #0
 800cbea:	f005 f8a5 	bl	8011d38 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800cbee:	23d1      	movs	r3, #209	; 0xd1
 800cbf0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nBTD Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	3308      	adds	r3, #8
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	4798      	blx	r3
        return rcode;
 800cc00:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3750      	adds	r7, #80	; 0x50
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <_ZN3BTD10InitializeEv>:

void BTD::Initialize() {
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b084      	sub	sp, #16
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800cc14:	2300      	movs	r3, #0
 800cc16:	73fb      	strb	r3, [r7, #15]
 800cc18:	7bfb      	ldrb	r3, [r7, #15]
 800cc1a:	2b03      	cmp	r3, #3
 800cc1c:	d845      	bhi.n	800ccaa <_ZN3BTD10InitializeEv+0x9e>
                epInfo[i].epAddr = 0;
 800cc1e:	7bfa      	ldrb	r2, [r7, #15]
 800cc20:	6879      	ldr	r1, [r7, #4]
 800cc22:	4613      	mov	r3, r2
 800cc24:	005b      	lsls	r3, r3, #1
 800cc26:	4413      	add	r3, r2
 800cc28:	440b      	add	r3, r1
 800cc2a:	3351      	adds	r3, #81	; 0x51
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	701a      	strb	r2, [r3, #0]
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 800cc30:	7bfb      	ldrb	r3, [r7, #15]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d001      	beq.n	800cc3a <_ZN3BTD10InitializeEv+0x2e>
 800cc36:	2000      	movs	r0, #0
 800cc38:	e000      	b.n	800cc3c <_ZN3BTD10InitializeEv+0x30>
 800cc3a:	2008      	movs	r0, #8
 800cc3c:	7bfa      	ldrb	r2, [r7, #15]
 800cc3e:	6879      	ldr	r1, [r7, #4]
 800cc40:	4613      	mov	r3, r2
 800cc42:	005b      	lsls	r3, r3, #1
 800cc44:	4413      	add	r3, r2
 800cc46:	440b      	add	r3, r1
 800cc48:	3352      	adds	r3, #82	; 0x52
 800cc4a:	4602      	mov	r2, r0
 800cc4c:	701a      	strb	r2, [r3, #0]
                epInfo[i].bmSndToggle = 0;
 800cc4e:	7bfa      	ldrb	r2, [r7, #15]
 800cc50:	6879      	ldr	r1, [r7, #4]
 800cc52:	4613      	mov	r3, r2
 800cc54:	005b      	lsls	r3, r3, #1
 800cc56:	4413      	add	r3, r2
 800cc58:	440b      	add	r3, r1
 800cc5a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800cc5e:	78d3      	ldrb	r3, [r2, #3]
 800cc60:	f36f 0300 	bfc	r3, #0, #1
 800cc64:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmRcvToggle = 0;
 800cc66:	7bfa      	ldrb	r2, [r7, #15]
 800cc68:	6879      	ldr	r1, [r7, #4]
 800cc6a:	4613      	mov	r3, r2
 800cc6c:	005b      	lsls	r3, r3, #1
 800cc6e:	4413      	add	r3, r2
 800cc70:	440b      	add	r3, r1
 800cc72:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800cc76:	78d3      	ldrb	r3, [r2, #3]
 800cc78:	f36f 0341 	bfc	r3, #1, #1
 800cc7c:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 800cc7e:	7bfb      	ldrb	r3, [r7, #15]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d001      	beq.n	800cc88 <_ZN3BTD10InitializeEv+0x7c>
 800cc84:	2101      	movs	r1, #1
 800cc86:	e000      	b.n	800cc8a <_ZN3BTD10InitializeEv+0x7e>
 800cc88:	210f      	movs	r1, #15
 800cc8a:	7bfa      	ldrb	r2, [r7, #15]
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	4613      	mov	r3, r2
 800cc90:	005b      	lsls	r3, r3, #1
 800cc92:	4413      	add	r3, r2
 800cc94:	4403      	add	r3, r0
 800cc96:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800cc9a:	78d3      	ldrb	r3, [r2, #3]
 800cc9c:	f361 0387 	bfi	r3, r1, #2, #6
 800cca0:	70d3      	strb	r3, [r2, #3]
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800cca2:	7bfb      	ldrb	r3, [r7, #15]
 800cca4:	3301      	adds	r3, #1
 800cca6:	73fb      	strb	r3, [r7, #15]
 800cca8:	e7b6      	b.n	800cc18 <_ZN3BTD10InitializeEv+0xc>
        }
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800ccaa:	2300      	movs	r3, #0
 800ccac:	73fb      	strb	r3, [r7, #15]
 800ccae:	7bfb      	ldrb	r3, [r7, #15]
 800ccb0:	2b03      	cmp	r3, #3
 800ccb2:	d81c      	bhi.n	800ccee <_ZN3BTD10InitializeEv+0xe2>
                if(btService[i])
 800ccb4:	7bfb      	ldrb	r3, [r7, #15]
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	3318      	adds	r3, #24
 800ccba:	009b      	lsls	r3, r3, #2
 800ccbc:	4413      	add	r3, r2
 800ccbe:	685b      	ldr	r3, [r3, #4]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d010      	beq.n	800cce6 <_ZN3BTD10InitializeEv+0xda>
                        btService[i]->Reset(); // Reset all Bluetooth services
 800ccc4:	7bfb      	ldrb	r3, [r7, #15]
 800ccc6:	687a      	ldr	r2, [r7, #4]
 800ccc8:	3318      	adds	r3, #24
 800ccca:	009b      	lsls	r3, r3, #2
 800cccc:	4413      	add	r3, r2
 800ccce:	6859      	ldr	r1, [r3, #4]
 800ccd0:	7bfb      	ldrb	r3, [r7, #15]
 800ccd2:	687a      	ldr	r2, [r7, #4]
 800ccd4:	3318      	adds	r3, #24
 800ccd6:	009b      	lsls	r3, r3, #2
 800ccd8:	4413      	add	r3, r2
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	3308      	adds	r3, #8
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4608      	mov	r0, r1
 800cce4:	4798      	blx	r3
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800cce6:	7bfb      	ldrb	r3, [r7, #15]
 800cce8:	3301      	adds	r3, #1
 800ccea:	73fb      	strb	r3, [r7, #15]
 800ccec:	e7df      	b.n	800ccae <_ZN3BTD10InitializeEv+0xa2>
        }

        connectToWii = false;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        incomingWii = false;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        connectToHIDDevice = false;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2200      	movs	r2, #0
 800cd02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        incomingHIDDevice = false;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        incomingPSController = false;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2200      	movs	r2, #0
 800cd12:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        bAddress = 0; // Clear device address
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        bNumEP = 1; // Must have to be reset to 1
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2201      	movs	r2, #1
 800cd22:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        qNextPollTime = 0; // Reset next poll time
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	661a      	str	r2, [r3, #96]	; 0x60
        pollInterval = 0;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bPollEnable = false; // Don't start polling before dongle is connected
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2200      	movs	r2, #0
 800cd38:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        simple_pairing_supported = false;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
}
 800cd44:	bf00      	nop
 800cd46:	3710      	adds	r7, #16
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:

/* Extracts interrupt-IN, bulk-IN, bulk-OUT endpoint information from config descriptor */
void BTD::EndpointXtract(uint8_t conf, uint8_t iface __attribute__((unused)), uint8_t alt, uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *pep) {
 800cd4c:	b480      	push	{r7}
 800cd4e:	b085      	sub	sp, #20
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	4608      	mov	r0, r1
 800cd56:	4611      	mov	r1, r2
 800cd58:	461a      	mov	r2, r3
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	70fb      	strb	r3, [r7, #3]
 800cd5e:	460b      	mov	r3, r1
 800cd60:	70bb      	strb	r3, [r7, #2]
 800cd62:	4613      	mov	r3, r2
 800cd64:	707b      	strb	r3, [r7, #1]
        //ErrorMessage<uint8_t>(PSTR("Conf.Val"),conf);
        //ErrorMessage<uint8_t>(PSTR("Iface Num"),iface);
        //ErrorMessage<uint8_t>(PSTR("Alt.Set"),alt);

        if(alt) // Wrong interface - by BT spec, no alt setting
 800cd66:	787b      	ldrb	r3, [r7, #1]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d15d      	bne.n	800ce28 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xdc>
                return;

        bConfNum = conf;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	78fa      	ldrb	r2, [r7, #3]
 800cd70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) { // Interrupt In endpoint found
 800cd74:	69fb      	ldr	r3, [r7, #28]
 800cd76:	78db      	ldrb	r3, [r3, #3]
 800cd78:	f003 0303 	and.w	r3, r3, #3
 800cd7c:	2b03      	cmp	r3, #3
 800cd7e:	d114      	bne.n	800cdaa <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
 800cd80:	69fb      	ldr	r3, [r7, #28]
 800cd82:	789b      	ldrb	r3, [r3, #2]
 800cd84:	b25b      	sxtb	r3, r3
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	da0f      	bge.n	800cdaa <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
                index = BTD_EVENT_PIPE;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	73fb      	strb	r3, [r7, #15]
                epInfo[index].bmNakPower = USB_NAK_NOWAIT;
 800cd8e:	7bfa      	ldrb	r2, [r7, #15]
 800cd90:	6879      	ldr	r1, [r7, #4]
 800cd92:	4613      	mov	r3, r2
 800cd94:	005b      	lsls	r3, r3, #1
 800cd96:	4413      	add	r3, r2
 800cd98:	440b      	add	r3, r1
 800cd9a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800cd9e:	78d3      	ldrb	r3, [r2, #3]
 800cda0:	2101      	movs	r1, #1
 800cda2:	f361 0387 	bfi	r3, r1, #2, #6
 800cda6:	70d3      	strb	r3, [r2, #3]
 800cda8:	e00e      	b.n	800cdc8 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7c>
        } else if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_BULK) // Bulk endpoint found
 800cdaa:	69fb      	ldr	r3, [r7, #28]
 800cdac:	78db      	ldrb	r3, [r3, #3]
 800cdae:	f003 0303 	and.w	r3, r3, #3
 800cdb2:	2b02      	cmp	r3, #2
 800cdb4:	d13a      	bne.n	800ce2c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe0>
                index = ((pep->bEndpointAddress & 0x80) == 0x80) ? BTD_DATAIN_PIPE : BTD_DATAOUT_PIPE;
 800cdb6:	69fb      	ldr	r3, [r7, #28]
 800cdb8:	789b      	ldrb	r3, [r3, #2]
 800cdba:	b25b      	sxtb	r3, r3
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	da01      	bge.n	800cdc4 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x78>
 800cdc0:	2302      	movs	r3, #2
 800cdc2:	e000      	b.n	800cdc6 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7a>
 800cdc4:	2303      	movs	r3, #3
 800cdc6:	73fb      	strb	r3, [r7, #15]
        else
            return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 800cdc8:	69fb      	ldr	r3, [r7, #28]
 800cdca:	789b      	ldrb	r3, [r3, #2]
 800cdcc:	7bfa      	ldrb	r2, [r7, #15]
 800cdce:	f003 030f 	and.w	r3, r3, #15
 800cdd2:	b2d8      	uxtb	r0, r3
 800cdd4:	6879      	ldr	r1, [r7, #4]
 800cdd6:	4613      	mov	r3, r2
 800cdd8:	005b      	lsls	r3, r3, #1
 800cdda:	4413      	add	r3, r2
 800cddc:	440b      	add	r3, r1
 800cdde:	3351      	adds	r3, #81	; 0x51
 800cde0:	4602      	mov	r2, r0
 800cde2:	701a      	strb	r2, [r3, #0]
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 800cde4:	69fb      	ldr	r3, [r7, #28]
 800cde6:	889b      	ldrh	r3, [r3, #4]
 800cde8:	b29b      	uxth	r3, r3
 800cdea:	7bfa      	ldrb	r2, [r7, #15]
 800cdec:	b2d8      	uxtb	r0, r3
 800cdee:	6879      	ldr	r1, [r7, #4]
 800cdf0:	4613      	mov	r3, r2
 800cdf2:	005b      	lsls	r3, r3, #1
 800cdf4:	4413      	add	r3, r2
 800cdf6:	440b      	add	r3, r1
 800cdf8:	3352      	adds	r3, #82	; 0x52
 800cdfa:	4602      	mov	r2, r0
 800cdfc:	701a      	strb	r2, [r3, #0]
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800ce04:	69fb      	ldr	r3, [r7, #28]
 800ce06:	799b      	ldrb	r3, [r3, #6]
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d204      	bcs.n	800ce16 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xca>
                pollInterval = pep->bInterval;
 800ce0c:	69fb      	ldr	r3, [r7, #28]
 800ce0e:	799a      	ldrb	r2, [r3, #6]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bNumEP++;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	b2da      	uxtb	r2, r3
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800ce26:	e002      	b.n	800ce2e <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
                return;
 800ce28:	bf00      	nop
 800ce2a:	e000      	b.n	800ce2e <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
            return;
 800ce2c:	bf00      	nop
}
 800ce2e:	3714      	adds	r7, #20
 800ce30:	46bd      	mov	sp, r7
 800ce32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce36:	4770      	bx	lr

0800ce38 <_ZThn4_N3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 800ce38:	f1a0 0004 	sub.w	r0, r0, #4
 800ce3c:	f7ff bf86 	b.w	800cd4c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

0800ce40 <_ZN3BTD7ReleaseEv>:
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}

/* Performs a cleanup after failed Init() attempt */
uint8_t BTD::Release() {
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
        Initialize(); // Set all variables, endpoint structs etc. to default values
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f7ff fedf 	bl	800cc0c <_ZN3BTD10InitializeEv>
        pUsb->GetAddressPool().FreeAddress(bAddress);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce52:	4618      	mov	r0, r3
 800ce54:	f7ff fa78 	bl	800c348 <_ZN3USB14GetAddressPoolEv>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	3208      	adds	r2, #8
 800ce5e:	6812      	ldr	r2, [r2, #0]
 800ce60:	6879      	ldr	r1, [r7, #4]
 800ce62:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
 800ce66:	4618      	mov	r0, r3
 800ce68:	4790      	blx	r2
        return 0;
 800ce6a:	2300      	movs	r3, #0
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3708      	adds	r7, #8
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}

0800ce74 <_ZN3BTD4PollEv>:

uint8_t BTD::Poll() {
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b082      	sub	sp, #8
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
        if(!bPollEnable)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800ce82:	f083 0301 	eor.w	r3, r3, #1
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d001      	beq.n	800ce90 <_ZN3BTD4PollEv+0x1c>
                return 0;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	e01d      	b.n	800cecc <_ZN3BTD4PollEv+0x58>
        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Don't poll if shorter than polling interval
 800ce90:	f7f4 ffaa 	bl	8001de8 <HAL_GetTick>
 800ce94:	4602      	mov	r2, r0
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce9a:	1ad3      	subs	r3, r2, r3
 800ce9c:	43db      	mvns	r3, r3
 800ce9e:	0fdb      	lsrs	r3, r3, #31
 800cea0:	b2db      	uxtb	r3, r3
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d011      	beq.n	800ceca <_ZN3BTD4PollEv+0x56>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 800cea6:	f7f4 ff9f 	bl	8001de8 <HAL_GetTick>
 800ceaa:	4602      	mov	r2, r0
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800ceb2:	441a      	add	r2, r3
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	661a      	str	r2, [r3, #96]	; 0x60
                HCI_event_task(); // Poll the HCI event pipe
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	f000 f80b 	bl	800ced4 <_ZN3BTD14HCI_event_taskEv>
                HCI_task(); // HCI state machine
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f000 fb22 	bl	800d508 <_ZN3BTD8HCI_taskEv>
                ACL_event_task(); // Poll the ACL input pipe too
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f000 fe4b 	bl	800db60 <_ZN3BTD14ACL_event_taskEv>
        }
        return 0;
 800ceca:	2300      	movs	r3, #0
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3708      	adds	r7, #8
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <_ZN3BTD14HCI_event_taskEv>:
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
                if(btService[i])
                        btService[i]->disconnect();
};

void BTD::HCI_event_task() {
 800ced4:	b5b0      	push	{r4, r5, r7, lr}
 800ced6:	b088      	sub	sp, #32
 800ced8:	af02      	add	r7, sp, #8
 800ceda:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE; // Request more than 16 bytes anyway, the inTransfer routine will take care of this
 800cedc:	2340      	movs	r3, #64	; 0x40
 800cede:	81bb      	strh	r3, [r7, #12]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_EVENT_PIPE ].epAddr, &length, hcibuf, pollInterval); // Input on endpoint 1
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	3389      	adds	r3, #137	; 0x89
 800cef4:	687a      	ldr	r2, [r7, #4]
 800cef6:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800cefa:	f107 050c 	add.w	r5, r7, #12
 800cefe:	9201      	str	r2, [sp, #4]
 800cf00:	9300      	str	r3, [sp, #0]
 800cf02:	462b      	mov	r3, r5
 800cf04:	4622      	mov	r2, r4
 800cf06:	f003 ff72 	bl	8010dee <_ZN3USB10inTransferEhhPtPhh>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	73fb      	strb	r3, [r7, #15]

        if(!rcode || rcode == hrNAK) { // Check for errors
 800cf0e:	7bfb      	ldrb	r3, [r7, #15]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d003      	beq.n	800cf1c <_ZN3BTD14HCI_event_taskEv+0x48>
 800cf14:	7bfb      	ldrb	r3, [r7, #15]
 800cf16:	2b04      	cmp	r3, #4
 800cf18:	f040 82f1 	bne.w	800d4fe <_ZN3BTD14HCI_event_taskEv+0x62a>
                switch(hcibuf[0]) { // Switch on event type
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800cf22:	3b01      	subs	r3, #1
 800cf24:	2b35      	cmp	r3, #53	; 0x35
 800cf26:	f200 82ea 	bhi.w	800d4fe <_ZN3BTD14HCI_event_taskEv+0x62a>
 800cf2a:	a201      	add	r2, pc, #4	; (adr r2, 800cf30 <_ZN3BTD14HCI_event_taskEv+0x5c>)
 800cf2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf30:	0800d111 	.word	0x0800d111
 800cf34:	0800d171 	.word	0x0800d171
 800cf38:	0800d2c9 	.word	0x0800d2c9
 800cf3c:	0800d3b3 	.word	0x0800d3b3
 800cf40:	0800d325 	.word	0x0800d325
 800cf44:	0800d471 	.word	0x0800d471
 800cf48:	0800d357 	.word	0x0800d357
 800cf4c:	0800d4e9 	.word	0x0800d4e9
 800cf50:	0800d4e9 	.word	0x0800d4e9
 800cf54:	0800d4ff 	.word	0x0800d4ff
 800cf58:	0800d4ff 	.word	0x0800d4ff
 800cf5c:	0800d4e9 	.word	0x0800d4e9
 800cf60:	0800d4e9 	.word	0x0800d4e9
 800cf64:	0800d009 	.word	0x0800d009
 800cf68:	0800d4e9 	.word	0x0800d4e9
 800cf6c:	0800d4ff 	.word	0x0800d4ff
 800cf70:	0800d4ff 	.word	0x0800d4ff
 800cf74:	0800d4e9 	.word	0x0800d4e9
 800cf78:	0800d4e9 	.word	0x0800d4e9
 800cf7c:	0800d4ff 	.word	0x0800d4ff
 800cf80:	0800d4ff 	.word	0x0800d4ff
 800cf84:	0800d43f 	.word	0x0800d43f
 800cf88:	0800d469 	.word	0x0800d469
 800cf8c:	0800d4e9 	.word	0x0800d4e9
 800cf90:	0800d4e9 	.word	0x0800d4e9
 800cf94:	0800d4e9 	.word	0x0800d4e9
 800cf98:	0800d4e9 	.word	0x0800d4e9
 800cf9c:	0800d4ff 	.word	0x0800d4ff
 800cfa0:	0800d4ff 	.word	0x0800d4ff
 800cfa4:	0800d4ff 	.word	0x0800d4ff
 800cfa8:	0800d4ff 	.word	0x0800d4ff
 800cfac:	0800d4e9 	.word	0x0800d4e9
 800cfb0:	0800d4ff 	.word	0x0800d4ff
 800cfb4:	0800d4ff 	.word	0x0800d4ff
 800cfb8:	0800d4ff 	.word	0x0800d4ff
 800cfbc:	0800d4ff 	.word	0x0800d4ff
 800cfc0:	0800d4ff 	.word	0x0800d4ff
 800cfc4:	0800d4ff 	.word	0x0800d4ff
 800cfc8:	0800d4ff 	.word	0x0800d4ff
 800cfcc:	0800d4ff 	.word	0x0800d4ff
 800cfd0:	0800d4ff 	.word	0x0800d4ff
 800cfd4:	0800d4ff 	.word	0x0800d4ff
 800cfd8:	0800d4ff 	.word	0x0800d4ff
 800cfdc:	0800d4ff 	.word	0x0800d4ff
 800cfe0:	0800d4ff 	.word	0x0800d4ff
 800cfe4:	0800d4ff 	.word	0x0800d4ff
 800cfe8:	0800d4ff 	.word	0x0800d4ff
 800cfec:	0800d4ff 	.word	0x0800d4ff
 800cff0:	0800d4d9 	.word	0x0800d4d9
 800cff4:	0800d4e9 	.word	0x0800d4e9
 800cff8:	0800d4e1 	.word	0x0800d4e1
 800cffc:	0800d4ff 	.word	0x0800d4ff
 800d000:	0800d4ff 	.word	0x0800d4ff
 800d004:	0800d4e9 	.word	0x0800d4e9
                        case EV_COMMAND_COMPLETE:
                                if(!hcibuf[5]) { // Check if command succeeded
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800d00e:	2b00      	cmp	r3, #0
 800d010:	f040 826c 	bne.w	800d4ec <_ZN3BTD14HCI_event_taskEv+0x618>
                                        hci_set_flag(HCI_FLAG_CMD_COMPLETE); // Set command complete flag
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d01a:	f043 0301 	orr.w	r3, r3, #1
 800d01e:	b29a      	uxth	r2, r3
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        if((hcibuf[3] == 0x01) && (hcibuf[4] == 0x10)) { // Parameters from read local version information
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d114      	bne.n	800d05a <_ZN3BTD14HCI_event_taskEv+0x186>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d036:	2b10      	cmp	r3, #16
 800d038:	d10f      	bne.n	800d05a <_ZN3BTD14HCI_event_taskEv+0x186>
                                                hci_version = hcibuf[6]; // Used to check if it supports 2.0+EDR - see http://www.bluetooth.org/Technical/AssignedNumbers/hci.htm
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f893 208f 	ldrb.w	r2, [r3, #143]	; 0x8f
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                                if(!hci_check_flag(HCI_FLAG_READ_VERSION)) {
                                                        Notify(PSTR("\r\nHCI version: "), 0x80);
                                                        D_PrintHex<uint8_t > (hci_version, 0x80);
                                                }
#endif
                                                hci_set_flag(HCI_FLAG_READ_VERSION);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d04c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d050:	b29a      	uxth	r2, r3
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800d058:	e059      	b.n	800d10e <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x04) && (hcibuf[4] == 0x10)) { // Parameters from read local extended features
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d060:	2b04      	cmp	r3, #4
 800d062:	d12a      	bne.n	800d0ba <_ZN3BTD14HCI_event_taskEv+0x1e6>
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d06a:	2b10      	cmp	r3, #16
 800d06c:	d125      	bne.n	800d0ba <_ZN3BTD14HCI_event_taskEv+0x1e6>
                                                if(!hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d114      	bne.n	800d0a6 <_ZN3BTD14HCI_event_taskEv+0x1d2>
                                                        for(uint8_t i = 0; i < 8; i++) {
                                                                Notify(PSTR(" "), 0x80);
                                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                                        }
#endif
                                                        if(hcibuf[6] == 0) { // Page 0
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800d082:	2b00      	cmp	r3, #0
 800d084:	d10f      	bne.n	800d0a6 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
#endif
                                                                if(hcibuf[8 + 6] & (1U << 3)) {
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800d08c:	f003 0308 	and.w	r3, r3, #8
 800d090:	2b00      	cmp	r3, #0
 800d092:	d004      	beq.n	800d09e <_ZN3BTD14HCI_event_taskEv+0x1ca>
                                                                        simple_pairing_supported = true;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2201      	movs	r2, #1
 800d098:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800d09c:	e003      	b.n	800d0a6 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("supports"), 0x80);
#endif
                                                                } else {
                                                                        simple_pairing_supported = false;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
                                                                Notify(PSTR(" secure simple pairing (host support)"), 0x80);
#endif
                                                        }
                                                }

                                                hci_set_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d0ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d0b0:	b29a      	uxth	r2, r3
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800d0b8:	e029      	b.n	800d10e <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x09) && (hcibuf[4] == 0x10)) { // Parameters from read local bluetooth address
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d0c0:	2b09      	cmp	r3, #9
 800d0c2:	f040 8213 	bne.w	800d4ec <_ZN3BTD14HCI_event_taskEv+0x618>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d0cc:	2b10      	cmp	r3, #16
 800d0ce:	f040 820d 	bne.w	800d4ec <_ZN3BTD14HCI_event_taskEv+0x618>
                                                for(uint8_t i = 0; i < 6; i++)
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	75fb      	strb	r3, [r7, #23]
 800d0d6:	7dfb      	ldrb	r3, [r7, #23]
 800d0d8:	2b05      	cmp	r3, #5
 800d0da:	d80e      	bhi.n	800d0fa <_ZN3BTD14HCI_event_taskEv+0x226>
                                                        my_bdaddr[i] = hcibuf[6 + i];
 800d0dc:	7dfb      	ldrb	r3, [r7, #23]
 800d0de:	1d9a      	adds	r2, r3, #6
 800d0e0:	7dfb      	ldrb	r3, [r7, #23]
 800d0e2:	6879      	ldr	r1, [r7, #4]
 800d0e4:	440a      	add	r2, r1
 800d0e6:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	4413      	add	r3, r2
 800d0ee:	460a      	mov	r2, r1
 800d0f0:	751a      	strb	r2, [r3, #20]
                                                for(uint8_t i = 0; i < 6; i++)
 800d0f2:	7dfb      	ldrb	r3, [r7, #23]
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	75fb      	strb	r3, [r7, #23]
 800d0f8:	e7ed      	b.n	800d0d6 <_ZN3BTD14HCI_event_taskEv+0x202>
                                                hci_set_flag(HCI_FLAG_READ_BDADDR);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d100:	f043 0320 	orr.w	r3, r3, #32
 800d104:	b29a      	uxth	r2, r3
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        }
                                }
                                break;
 800d10c:	e1ee      	b.n	800d4ec <_ZN3BTD14HCI_event_taskEv+0x618>
 800d10e:	e1ed      	b.n	800d4ec <_ZN3BTD14HCI_event_taskEv+0x618>
#endif
                                }
                                break;

                        case EV_INQUIRY_COMPLETE:
                                if(inquiry_counter >= 5 && (pairWithWii || pairWithHIDDevice)) {
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800d116:	2b04      	cmp	r3, #4
 800d118:	d921      	bls.n	800d15e <_ZN3BTD14HCI_event_taskEv+0x28a>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d120:	2b00      	cmp	r3, #0
 800d122:	d104      	bne.n	800d12e <_ZN3BTD14HCI_event_taskEv+0x25a>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d017      	beq.n	800d15e <_ZN3BTD14HCI_event_taskEv+0x28a>
                                        inquiry_counter = 0;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2200      	movs	r2, #0
 800d132:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nCouldn't find Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nCouldn't find HID device"), 0x80);
#endif
                                        connectToWii = false;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2200      	movs	r2, #0
 800d13a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        pairWithWii = false;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                                        connectToHIDDevice = false;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2200      	movs	r2, #0
 800d14a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                        pairWithHIDDevice = false;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2200      	movs	r2, #0
 800d152:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                        hci_state = HCI_SCANNING_STATE;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	220a      	movs	r2, #10
 800d15a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                }
                                inquiry_counter++;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800d164:	3301      	adds	r3, #1
 800d166:	b2da      	uxtb	r2, r3
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                break;
 800d16e:	e1c6      	b.n	800d4fe <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_INQUIRY_RESULT:
                                if(hcibuf[2]) { // Check that there is more than zero responses
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d176:	2b00      	cmp	r3, #0
 800d178:	f000 81ba 	beq.w	800d4f0 <_ZN3BTD14HCI_event_taskEv+0x61c>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nNumber of responses: "), 0x80);
                                        Notify(hcibuf[2], 0x80);
#endif
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800d17c:	2300      	movs	r3, #0
 800d17e:	75bb      	strb	r3, [r7, #22]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d186:	7dba      	ldrb	r2, [r7, #22]
 800d188:	429a      	cmp	r2, r3
 800d18a:	f080 81b1 	bcs.w	800d4f0 <_ZN3BTD14HCI_event_taskEv+0x61c>
                                                uint8_t offset = 8 * hcibuf[2] + 3 * i;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d194:	00db      	lsls	r3, r3, #3
 800d196:	b2da      	uxtb	r2, r3
 800d198:	7dbb      	ldrb	r3, [r7, #22]
 800d19a:	4619      	mov	r1, r3
 800d19c:	0049      	lsls	r1, r1, #1
 800d19e:	440b      	add	r3, r1
 800d1a0:	b2db      	uxtb	r3, r3
 800d1a2:	4413      	add	r3, r2
 800d1a4:	73bb      	strb	r3, [r7, #14]

                                                for(uint8_t j = 0; j < 3; j++)
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	757b      	strb	r3, [r7, #21]
 800d1aa:	7d7b      	ldrb	r3, [r7, #21]
 800d1ac:	2b02      	cmp	r3, #2
 800d1ae:	d811      	bhi.n	800d1d4 <_ZN3BTD14HCI_event_taskEv+0x300>
                                                        classOfDevice[j] = hcibuf[j + 4 + offset];
 800d1b0:	7d7b      	ldrb	r3, [r7, #21]
 800d1b2:	1d1a      	adds	r2, r3, #4
 800d1b4:	7bbb      	ldrb	r3, [r7, #14]
 800d1b6:	441a      	add	r2, r3
 800d1b8:	7d7b      	ldrb	r3, [r7, #21]
 800d1ba:	6879      	ldr	r1, [r7, #4]
 800d1bc:	440a      	add	r2, r1
 800d1be:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d1c2:	687a      	ldr	r2, [r7, #4]
 800d1c4:	4413      	add	r3, r2
 800d1c6:	460a      	mov	r2, r1
 800d1c8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                                for(uint8_t j = 0; j < 3; j++)
 800d1cc:	7d7b      	ldrb	r3, [r7, #21]
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	757b      	strb	r3, [r7, #21]
 800d1d2:	e7ea      	b.n	800d1aa <_ZN3BTD14HCI_event_taskEv+0x2d6>
                                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                                Notify(PSTR(" "), 0x80);
                                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif

                                                if(pairWithWii && classOfDevice[2] == 0x00 && (classOfDevice[1] == 0x05) && (classOfDevice[0] & 0x0C)) { // See http://wiibrew.org/wiki/Wiimote#SDP_information
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d038      	beq.n	800d250 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d133      	bne.n	800d250 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800d1ee:	2b05      	cmp	r3, #5
 800d1f0:	d12e      	bne.n	800d250 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d1f8:	f003 030c 	and.w	r3, r3, #12
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d027      	beq.n	800d250 <_ZN3BTD14HCI_event_taskEv+0x37c>
                                                        checkRemoteName = true; // Check remote name to distinguish between the different controllers
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2201      	movs	r2, #1
 800d204:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

                                                        for(uint8_t j = 0; j < 6; j++)
 800d208:	2300      	movs	r3, #0
 800d20a:	753b      	strb	r3, [r7, #20]
 800d20c:	7d3b      	ldrb	r3, [r7, #20]
 800d20e:	2b05      	cmp	r3, #5
 800d210:	d814      	bhi.n	800d23c <_ZN3BTD14HCI_event_taskEv+0x368>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800d212:	7d3b      	ldrb	r3, [r7, #20]
 800d214:	1cd9      	adds	r1, r3, #3
 800d216:	7dba      	ldrb	r2, [r7, #22]
 800d218:	4613      	mov	r3, r2
 800d21a:	005b      	lsls	r3, r3, #1
 800d21c:	4413      	add	r3, r2
 800d21e:	005b      	lsls	r3, r3, #1
 800d220:	18ca      	adds	r2, r1, r3
 800d222:	7d3b      	ldrb	r3, [r7, #20]
 800d224:	6879      	ldr	r1, [r7, #4]
 800d226:	440a      	add	r2, r1
 800d228:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d22c:	687a      	ldr	r2, [r7, #4]
 800d22e:	4413      	add	r3, r2
 800d230:	460a      	mov	r2, r1
 800d232:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800d234:	7d3b      	ldrb	r3, [r7, #20]
 800d236:	3301      	adds	r3, #1
 800d238:	753b      	strb	r3, [r7, #20]
 800d23a:	e7e7      	b.n	800d20c <_ZN3BTD14HCI_event_taskEv+0x338>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d246:	b29a      	uxth	r2, r3
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800d24e:	e03a      	b.n	800d2c6 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                                } else if(pairWithHIDDevice && (classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad - see: http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d256:	2b00      	cmp	r3, #0
 800d258:	d031      	beq.n	800d2be <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800d260:	f003 030f 	and.w	r3, r3, #15
 800d264:	2b05      	cmp	r3, #5
 800d266:	d12a      	bne.n	800d2be <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d26e:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800d272:	2b00      	cmp	r3, #0
 800d274:	d023      	beq.n	800d2be <_ZN3BTD14HCI_event_taskEv+0x3ea>
                                                        if(classOfDevice[0] & 0x40)
                                                                Notify(PSTR("\r\nKeyboard found"), 0x80);
                                                        if(classOfDevice[0] & 0x08)
                                                                Notify(PSTR("\r\nGamepad found"), 0x80);
#endif
                                                        for(uint8_t j = 0; j < 6; j++)
 800d276:	2300      	movs	r3, #0
 800d278:	74fb      	strb	r3, [r7, #19]
 800d27a:	7cfb      	ldrb	r3, [r7, #19]
 800d27c:	2b05      	cmp	r3, #5
 800d27e:	d814      	bhi.n	800d2aa <_ZN3BTD14HCI_event_taskEv+0x3d6>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800d280:	7cfb      	ldrb	r3, [r7, #19]
 800d282:	1cd9      	adds	r1, r3, #3
 800d284:	7dba      	ldrb	r2, [r7, #22]
 800d286:	4613      	mov	r3, r2
 800d288:	005b      	lsls	r3, r3, #1
 800d28a:	4413      	add	r3, r2
 800d28c:	005b      	lsls	r3, r3, #1
 800d28e:	18ca      	adds	r2, r1, r3
 800d290:	7cfb      	ldrb	r3, [r7, #19]
 800d292:	6879      	ldr	r1, [r7, #4]
 800d294:	440a      	add	r2, r1
 800d296:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d29a:	687a      	ldr	r2, [r7, #4]
 800d29c:	4413      	add	r3, r2
 800d29e:	460a      	mov	r2, r1
 800d2a0:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800d2a2:	7cfb      	ldrb	r3, [r7, #19]
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	74fb      	strb	r3, [r7, #19]
 800d2a8:	e7e7      	b.n	800d27a <_ZN3BTD14HCI_event_taskEv+0x3a6>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d2b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2b4:	b29a      	uxth	r2, r3
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800d2bc:	e003      	b.n	800d2c6 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800d2be:	7dbb      	ldrb	r3, [r7, #22]
 800d2c0:	3301      	adds	r3, #1
 800d2c2:	75bb      	strb	r3, [r7, #22]
 800d2c4:	e75c      	b.n	800d180 <_ZN3BTD14HCI_event_taskEv+0x2ac>
                                                }
                                        }
                                }
                                break;
 800d2c6:	e113      	b.n	800d4f0 <_ZN3BTD14HCI_event_taskEv+0x61c>

                        case EV_CONNECT_COMPLETE:
                                hci_set_flag(HCI_FLAG_CONNECT_EVENT);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d2ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d2d2:	b29a      	uxth	r2, r3
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                if(!hcibuf[2]) { // Check if connected OK
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d11a      	bne.n	800d31a <_ZN3BTD14HCI_event_taskEv+0x446>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nConnection established"), 0x80);
#endif
                                        hci_handle = hcibuf[3] | ((hcibuf[4] & 0x0F) << 8); // Store the handle for the ACL connection
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d2ea:	b21a      	sxth	r2, r3
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d2f2:	021b      	lsls	r3, r3, #8
 800d2f4:	b21b      	sxth	r3, r3
 800d2f6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d2fa:	b21b      	sxth	r3, r3
 800d2fc:	4313      	orrs	r3, r2
 800d2fe:	b21b      	sxth	r3, r3
 800d300:	b29a      	uxth	r2, r3
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	835a      	strh	r2, [r3, #26]
                                        hci_set_flag(HCI_FLAG_CONNECT_COMPLETE); // Set connection complete flag
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d30c:	f043 0302 	orr.w	r3, r3, #2
 800d310:	b29a      	uxth	r2, r3
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                }
                                break;
 800d318:	e0f1      	b.n	800d4fe <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2206      	movs	r2, #6
 800d31e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800d322:	e0ec      	b.n	800d4fe <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_DISCONNECT_COMPLETE:
                                if(!hcibuf[2]) { // Check if disconnected OK
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	f040 80e2 	bne.w	800d4f4 <_ZN3BTD14HCI_event_taskEv+0x620>
                                        hci_set_flag(HCI_FLAG_DISCONNECT_COMPLETE); // Set disconnect command complete flag
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d336:	f043 0304 	orr.w	r3, r3, #4
 800d33a:	b29a      	uxth	r2, r3
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE); // Clear connection complete flag
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d348:	f023 0302 	bic.w	r3, r3, #2
 800d34c:	b29a      	uxth	r2, r3
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800d354:	e0ce      	b.n	800d4f4 <_ZN3BTD14HCI_event_taskEv+0x620>

                        case EV_REMOTE_NAME_COMPLETE:
                                if(!hcibuf[2]) { // Check if reading is OK
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	f040 80cb 	bne.w	800d4f8 <_ZN3BTD14HCI_event_taskEv+0x624>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800d362:	2300      	movs	r3, #0
 800d364:	74bb      	strb	r3, [r7, #18]
 800d366:	7cbb      	ldrb	r3, [r7, #18]
 800d368:	2b1d      	cmp	r3, #29
 800d36a:	d818      	bhi.n	800d39e <_ZN3BTD14HCI_event_taskEv+0x4ca>
                                                remote_name[i] = hcibuf[9 + i];
 800d36c:	7cbb      	ldrb	r3, [r7, #18]
 800d36e:	f103 0209 	add.w	r2, r3, #9
 800d372:	7cbb      	ldrb	r3, [r7, #18]
 800d374:	6879      	ldr	r1, [r7, #4]
 800d376:	440a      	add	r2, r1
 800d378:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d37c:	687a      	ldr	r2, [r7, #4]
 800d37e:	4413      	add	r3, r2
 800d380:	460a      	mov	r2, r1
 800d382:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                                                if(remote_name[i] == '\0') // End of string
 800d386:	7cbb      	ldrb	r3, [r7, #18]
 800d388:	687a      	ldr	r2, [r7, #4]
 800d38a:	4413      	add	r3, r2
 800d38c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d390:	2b00      	cmp	r3, #0
 800d392:	d003      	beq.n	800d39c <_ZN3BTD14HCI_event_taskEv+0x4c8>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800d394:	7cbb      	ldrb	r3, [r7, #18]
 800d396:	3301      	adds	r3, #1
 800d398:	74bb      	strb	r3, [r7, #18]
 800d39a:	e7e4      	b.n	800d366 <_ZN3BTD14HCI_event_taskEv+0x492>
                                                        break;
 800d39c:	bf00      	nop
                                        }
                                        // TODO: Always set '\0' in remote name!
                                        hci_set_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d3a4:	f043 0308 	orr.w	r3, r3, #8
 800d3a8:	b29a      	uxth	r2, r3
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800d3b0:	e0a2      	b.n	800d4f8 <_ZN3BTD14HCI_event_taskEv+0x624>

                        case EV_INCOMING_CONNECT:
                                for(uint8_t i = 0; i < 6; i++)
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	747b      	strb	r3, [r7, #17]
 800d3b6:	7c7b      	ldrb	r3, [r7, #17]
 800d3b8:	2b05      	cmp	r3, #5
 800d3ba:	d80e      	bhi.n	800d3da <_ZN3BTD14HCI_event_taskEv+0x506>
                                        disc_bdaddr[i] = hcibuf[i + 2];
 800d3bc:	7c7b      	ldrb	r3, [r7, #17]
 800d3be:	1c9a      	adds	r2, r3, #2
 800d3c0:	7c7b      	ldrb	r3, [r7, #17]
 800d3c2:	6879      	ldr	r1, [r7, #4]
 800d3c4:	440a      	add	r2, r1
 800d3c6:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	4413      	add	r3, r2
 800d3ce:	460a      	mov	r2, r1
 800d3d0:	771a      	strb	r2, [r3, #28]
                                for(uint8_t i = 0; i < 6; i++)
 800d3d2:	7c7b      	ldrb	r3, [r7, #17]
 800d3d4:	3301      	adds	r3, #1
 800d3d6:	747b      	strb	r3, [r7, #17]
 800d3d8:	e7ed      	b.n	800d3b6 <_ZN3BTD14HCI_event_taskEv+0x4e2>

                                for(uint8_t i = 0; i < 3; i++)
 800d3da:	2300      	movs	r3, #0
 800d3dc:	743b      	strb	r3, [r7, #16]
 800d3de:	7c3b      	ldrb	r3, [r7, #16]
 800d3e0:	2b02      	cmp	r3, #2
 800d3e2:	d810      	bhi.n	800d406 <_ZN3BTD14HCI_event_taskEv+0x532>
                                        classOfDevice[i] = hcibuf[i + 8];
 800d3e4:	7c3b      	ldrb	r3, [r7, #16]
 800d3e6:	f103 0208 	add.w	r2, r3, #8
 800d3ea:	7c3b      	ldrb	r3, [r7, #16]
 800d3ec:	6879      	ldr	r1, [r7, #4]
 800d3ee:	440a      	add	r2, r1
 800d3f0:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d3f4:	687a      	ldr	r2, [r7, #4]
 800d3f6:	4413      	add	r3, r2
 800d3f8:	460a      	mov	r2, r1
 800d3fa:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                for(uint8_t i = 0; i < 3; i++)
 800d3fe:	7c3b      	ldrb	r3, [r7, #16]
 800d400:	3301      	adds	r3, #1
 800d402:	743b      	strb	r3, [r7, #16]
 800d404:	e7eb      	b.n	800d3de <_ZN3BTD14HCI_event_taskEv+0x50a>

                                if((classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800d40c:	f003 030f 	and.w	r3, r3, #15
 800d410:	2b05      	cmp	r3, #5
 800d412:	d10a      	bne.n	800d42a <_ZN3BTD14HCI_event_taskEv+0x556>
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d41a:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d003      	beq.n	800d42a <_ZN3BTD14HCI_event_taskEv+0x556>
                                        if(classOfDevice[0] & 0x40)
                                                Notify(PSTR("\r\nKeyboard is connecting"), 0x80);
                                        if(classOfDevice[0] & 0x08)
                                                Notify(PSTR("\r\nGamepad is connecting"), 0x80);
#endif
                                        incomingHIDDevice = true;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2201      	movs	r2, #1
 800d426:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif
                                hci_set_flag(HCI_FLAG_INCOMING_REQUEST);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d430:	f043 0310 	orr.w	r3, r3, #16
 800d434:	b29a      	uxth	r2, r3
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                break;
 800d43c:	e05f      	b.n	800d4fe <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_PIN_CODE_REQUEST:
                                if(pairWithWii) {
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d444:	2b00      	cmp	r3, #0
 800d446:	d003      	beq.n	800d450 <_ZN3BTD14HCI_event_taskEv+0x57c>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPairing with Wiimote"), 0x80);
#endif
                                        hci_pin_code_request_reply();
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f000 feec 	bl	800e226 <_ZN3BTD26hci_pin_code_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
#endif
                                        hci_pin_code_negative_request_reply();
                                }
                                break;
 800d44e:	e056      	b.n	800d4fe <_ZN3BTD14HCI_event_taskEv+0x62a>
                                } else if(btdPin != NULL) {
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	691b      	ldr	r3, [r3, #16]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d003      	beq.n	800d460 <_ZN3BTD14HCI_event_taskEv+0x58c>
                                        hci_pin_code_request_reply();
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f000 fee4 	bl	800e226 <_ZN3BTD26hci_pin_code_request_replyEv>
                                break;
 800d45e:	e04e      	b.n	800d4fe <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_pin_code_negative_request_reply();
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f000 ff93 	bl	800e38c <_ZN3BTD35hci_pin_code_negative_request_replyEv>
                                break;
 800d466:	e04a      	b.n	800d4fe <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_LINK_KEY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived Key Request"), 0x80);
#endif
                                hci_link_key_request_negative_reply();
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f000 ffca 	bl	800e402 <_ZN3BTD35hci_link_key_request_negative_replyEv>
                                break;
 800d46e:	e046      	b.n	800d4fe <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_AUTHENTICATION_COMPLETE:
                                if(!hcibuf[2]) { // Check if pairing was successful
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d476:	2b00      	cmp	r3, #0
 800d478:	d123      	bne.n	800d4c2 <_ZN3BTD14HCI_event_taskEv+0x5ee>
                                        if(pairWithWii && !connectToWii) {
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d480:	2b00      	cmp	r3, #0
 800d482:	d00c      	beq.n	800d49e <_ZN3BTD14HCI_event_taskEv+0x5ca>
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d48a:	f083 0301 	eor.w	r3, r3, #1
 800d48e:	b2db      	uxtb	r3, r3
 800d490:	2b00      	cmp	r3, #0
 800d492:	d004      	beq.n	800d49e <_ZN3BTD14HCI_event_taskEv+0x5ca>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nPairing successful with Wiimote"), 0x80);
#endif
                                                connectToWii = true; // Used to indicate to the Wii service, that it should connect to this device
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2201      	movs	r2, #1
 800d498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                        hci_disconnect(hci_handle);
                                        hci_state = HCI_DISCONNECT_STATE;
                                }
                                break;
 800d49c:	e02e      	b.n	800d4fc <_ZN3BTD14HCI_event_taskEv+0x628>
                                        } else if(pairWithHIDDevice && !connectToHIDDevice) {
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d029      	beq.n	800d4fc <_ZN3BTD14HCI_event_taskEv+0x628>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d4ae:	f083 0301 	eor.w	r3, r3, #1
 800d4b2:	b2db      	uxtb	r3, r3
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d021      	beq.n	800d4fc <_ZN3BTD14HCI_event_taskEv+0x628>
                                                connectToHIDDevice = true; // Used to indicate to the BTHID service, that it should connect to this device
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                break;
 800d4c0:	e01c      	b.n	800d4fc <_ZN3BTD14HCI_event_taskEv+0x628>
                                        hci_disconnect(hci_handle);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	8b5b      	ldrh	r3, [r3, #26]
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f001 f882 	bl	800e5d2 <_ZN3BTD14hci_disconnectEt>
                                        hci_state = HCI_DISCONNECT_STATE;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2210      	movs	r2, #16
 800d4d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800d4d6:	e011      	b.n	800d4fc <_ZN3BTD14HCI_event_taskEv+0x628>

                        case EV_IO_CAPABILITY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived IO Capability Request"), 0x80);
#endif
                                hci_io_capability_request_reply();
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f000 ffcd 	bl	800e478 <_ZN3BTD31hci_io_capability_request_replyEv>
                                break;
 800d4de:	e00e      	b.n	800d4fe <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                }
#endif
#endif
                                // Simply confirm the connection, as the host has no "NoInputNoOutput" capabilities
                                hci_user_confirmation_request_reply();
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f001 f810 	bl	800e506 <_ZN3BTD35hci_user_confirmation_request_replyEv>
                                break;
 800d4e6:	e00a      	b.n	800d4fe <_ZN3BTD14HCI_event_taskEv+0x62a>
                                if(hcibuf[0] != 0x00) {
                                        Notify(PSTR("\r\nIgnore HCI Event: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[0], 0x80);
                                }
#endif
                                break;
 800d4e8:	bf00      	nop
 800d4ea:	e008      	b.n	800d4fe <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d4ec:	bf00      	nop
 800d4ee:	e006      	b.n	800d4fe <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d4f0:	bf00      	nop
 800d4f2:	e004      	b.n	800d4fe <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d4f4:	bf00      	nop
 800d4f6:	e002      	b.n	800d4fe <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d4f8:	bf00      	nop
 800d4fa:	e000      	b.n	800d4fe <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d4fc:	bf00      	nop
        else {
                Notify(PSTR("\r\nHCI event error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
}
 800d4fe:	bf00      	nop
 800d500:	3718      	adds	r7, #24
 800d502:	46bd      	mov	sp, r7
 800d504:	bdb0      	pop	{r4, r5, r7, pc}
 800d506:	bf00      	nop

0800d508 <_ZN3BTD8HCI_taskEv>:

/* Poll Bluetooth and print result */
void BTD::HCI_task() {
 800d508:	b580      	push	{r7, lr}
 800d50a:	b082      	sub	sp, #8
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
        switch(hci_state) {
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d516:	2b13      	cmp	r3, #19
 800d518:	f200 82ef 	bhi.w	800dafa <_ZN3BTD8HCI_taskEv+0x5f2>
 800d51c:	a201      	add	r2, pc, #4	; (adr r2, 800d524 <_ZN3BTD8HCI_taskEv+0x1c>)
 800d51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d522:	bf00      	nop
 800d524:	0800d575 	.word	0x0800d575
 800d528:	0800d5af 	.word	0x0800d5af
 800d52c:	0800d635 	.word	0x0800d635
 800d530:	0800d655 	.word	0x0800d655
 800d534:	0800d675 	.word	0x0800d675
 800d538:	0800d6c9 	.word	0x0800d6c9
 800d53c:	0800d76f 	.word	0x0800d76f
 800d540:	0800d79d 	.word	0x0800d79d
 800d544:	0800d7d7 	.word	0x0800d7d7
 800d548:	0800d7ff 	.word	0x0800d7ff
 800d54c:	0800d835 	.word	0x0800d835
 800d550:	0800d893 	.word	0x0800d893
 800d554:	0800d8d1 	.word	0x0800d8d1
 800d558:	0800d9f7 	.word	0x0800d9f7
 800d55c:	0800dafb 	.word	0x0800dafb
 800d560:	0800da3d 	.word	0x0800da3d
 800d564:	0800da6b 	.word	0x0800da6b
 800d568:	0800d6ff 	.word	0x0800d6ff
 800d56c:	0800d735 	.word	0x0800d735
 800d570:	0800d755 	.word	0x0800d755
                case HCI_INIT_STATE:
                        hci_counter++;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800d57a:	3301      	adds	r3, #1
 800d57c:	b29a      	uxth	r2, r3
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > hci_num_reset_loops) { // wait until we have looped x times to clear any old events
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d590:	429a      	cmp	r2, r3
 800d592:	f240 82b4 	bls.w	800dafe <_ZN3BTD8HCI_taskEv+0x5f6>
                                hci_reset();
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 fb7d 	bl	800dc96 <_ZN3BTD9hci_resetEv>
                                hci_state = HCI_RESET_STATE;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        }
                        break;
 800d5ac:	e2a7      	b.n	800dafe <_ZN3BTD8HCI_taskEv+0x5f6>

                case HCI_RESET_STATE:
                        hci_counter++;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800d5b4:	3301      	adds	r3, #1
 800d5b6:	b29a      	uxth	r2, r3
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d5c4:	f003 0301 	and.w	r3, r3, #1
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d00b      	beq.n	800d5e4 <_ZN3BTD8HCI_taskEv+0xdc>
                                hci_counter = 0;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Reset complete"), 0x80);
#endif
                                hci_state = HCI_CLASS_STATE;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2202      	movs	r2, #2
 800d5d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_write_class_of_device();
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f001 f830 	bl	800e642 <_ZN3BTD25hci_write_class_of_deviceEv>
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
#endif
                                hci_state = HCI_INIT_STATE;
                                hci_counter = 0;
                        }
                        break;
 800d5e2:	e28e      	b.n	800db02 <_ZN3BTD8HCI_taskEv+0x5fa>
                        } else if(hci_counter > hci_num_reset_loops) {
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	f240 8286 	bls.w	800db02 <_ZN3BTD8HCI_taskEv+0x5fa>
                                hci_num_reset_loops *= 10;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	0092      	lsls	r2, r2, #2
 800d600:	4413      	add	r3, r2
 800d602:	005b      	lsls	r3, r3, #1
 800d604:	b29a      	uxth	r2, r3
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                if(hci_num_reset_loops > 2000)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d612:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d616:	d904      	bls.n	800d622 <_ZN3BTD8HCI_taskEv+0x11a>
                                        hci_num_reset_loops = 2000;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d61e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                hci_state = HCI_INIT_STATE;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2200      	movs	r2, #0
 800d626:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2200      	movs	r2, #0
 800d62e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        break;
 800d632:	e266      	b.n	800db02 <_ZN3BTD8HCI_taskEv+0x5fa>

                case HCI_CLASS_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d63a:	f003 0301 	and.w	r3, r3, #1
 800d63e:	2b00      	cmp	r3, #0
 800d640:	f000 8261 	beq.w	800db06 <_ZN3BTD8HCI_taskEv+0x5fe>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWrite class of device"), 0x80);
#endif
                                hci_state = HCI_BDADDR_STATE;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2203      	movs	r2, #3
 800d648:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_read_bdaddr();
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f000 fb72 	bl	800dd36 <_ZN3BTD15hci_read_bdaddrEv>
                        }
                        break;
 800d652:	e258      	b.n	800db06 <_ZN3BTD8HCI_taskEv+0x5fe>

                case HCI_BDADDR_STATE:
                        if(hci_check_flag(HCI_FLAG_READ_BDADDR)) {
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d65a:	f003 0320 	and.w	r3, r3, #32
 800d65e:	2b00      	cmp	r3, #0
 800d660:	f000 8253 	beq.w	800db0a <_ZN3BTD8HCI_taskEv+0x602>
                                        D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                                hci_read_local_version_information();
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f000 fb8a 	bl	800dd7e <_ZN3BTD34hci_read_local_version_informationEv>
                                hci_state = HCI_LOCAL_VERSION_STATE;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2204      	movs	r2, #4
 800d66e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d672:	e24a      	b.n	800db0a <_ZN3BTD8HCI_taskEv+0x602>

                case HCI_LOCAL_VERSION_STATE: // The local version is used by the PS3BT class
                        if(hci_check_flag(HCI_FLAG_READ_VERSION)) {
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d67a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d67e:	2b00      	cmp	r3, #0
 800d680:	f000 8245 	beq.w	800db0e <_ZN3BTD8HCI_taskEv+0x606>
                                if(btdName != NULL) {
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	68db      	ldr	r3, [r3, #12]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d00a      	beq.n	800d6a2 <_ZN3BTD8HCI_taskEv+0x19a>
                                        hci_write_local_name(btdName);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	68db      	ldr	r3, [r3, #12]
 800d690:	4619      	mov	r1, r3
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f000 fc5d 	bl	800df52 <_ZN3BTD20hci_write_local_nameEPKc>
                                        hci_state = HCI_WRITE_NAME_STATE;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2205      	movs	r2, #5
 800d69c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800d6a0:	e235      	b.n	800db0e <_ZN3BTD8HCI_taskEv+0x606>
                                } else if(useSimplePairing) {
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d008      	beq.n	800d6be <_ZN3BTD8HCI_taskEv+0x1b6>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800d6ac:	2100      	movs	r1, #0
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f000 fb89 	bl	800ddc6 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2211      	movs	r2, #17
 800d6b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d6bc:	e227      	b.n	800db0e <_ZN3BTD8HCI_taskEv+0x606>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2206      	movs	r2, #6
 800d6c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d6c6:	e222      	b.n	800db0e <_ZN3BTD8HCI_taskEv+0x606>

                case HCI_WRITE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d6ce:	f003 0301 	and.w	r3, r3, #1
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	f000 821d 	beq.w	800db12 <_ZN3BTD8HCI_taskEv+0x60a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nThe name was set to: "), 0x80);
                                NotifyStr(btdName, 0x80);
#endif
                                if(useSimplePairing) {
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d008      	beq.n	800d6f4 <_ZN3BTD8HCI_taskEv+0x1ec>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800d6e2:	2100      	movs	r1, #0
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f000 fb6e 	bl	800ddc6 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2211      	movs	r2, #17
 800d6ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800d6f2:	e20e      	b.n	800db12 <_ZN3BTD8HCI_taskEv+0x60a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2206      	movs	r2, #6
 800d6f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d6fc:	e209      	b.n	800db12 <_ZN3BTD8HCI_taskEv+0x60a>

                case HCI_LOCAL_EXTENDED_FEATURES_STATE:
                        if(hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d708:	2b00      	cmp	r3, #0
 800d70a:	f000 8204 	beq.w	800db16 <_ZN3BTD8HCI_taskEv+0x60e>
                                if(simple_pairing_supported) {
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800d714:	2b00      	cmp	r3, #0
 800d716:	d008      	beq.n	800d72a <_ZN3BTD8HCI_taskEv+0x222>
                                        hci_write_simple_pairing_mode(true);
 800d718:	2101      	movs	r1, #1
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f000 fc9d 	bl	800e05a <_ZN3BTD29hci_write_simple_pairing_modeEb>
                                        hci_state = HCI_WRITE_SIMPLE_PAIRING_STATE;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2212      	movs	r2, #18
 800d724:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800d728:	e1f5      	b.n	800db16 <_ZN3BTD8HCI_taskEv+0x60e>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2206      	movs	r2, #6
 800d72e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d732:	e1f0      	b.n	800db16 <_ZN3BTD8HCI_taskEv+0x60e>

                case HCI_WRITE_SIMPLE_PAIRING_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d73a:	f003 0301 	and.w	r3, r3, #1
 800d73e:	2b00      	cmp	r3, #0
 800d740:	f000 81eb 	beq.w	800db1a <_ZN3BTD8HCI_taskEv+0x612>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSimple pairing was enabled"), 0x80);
#endif
                                hci_set_event_mask();
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f000 fc4d 	bl	800dfe4 <_ZN3BTD18hci_set_event_maskEv>
                                hci_state = HCI_SET_EVENT_MASK_STATE;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2213      	movs	r2, #19
 800d74e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d752:	e1e2      	b.n	800db1a <_ZN3BTD8HCI_taskEv+0x612>

                case HCI_SET_EVENT_MASK_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d75a:	f003 0301 	and.w	r3, r3, #1
 800d75e:	2b00      	cmp	r3, #0
 800d760:	f000 81dd 	beq.w	800db1e <_ZN3BTD8HCI_taskEv+0x616>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSet event mask completed"), 0x80);
#endif
                                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2206      	movs	r2, #6
 800d768:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d76c:	e1d7      	b.n	800db1e <_ZN3BTD8HCI_taskEv+0x616>

                case HCI_CHECK_DEVICE_SERVICE:
                        if(pairWithHIDDevice || pairWithWii) { // Check if it should try to connect to a Wiimote
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d774:	2b00      	cmp	r3, #0
 800d776:	d104      	bne.n	800d782 <_ZN3BTD8HCI_taskEv+0x27a>
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d007      	beq.n	800d792 <_ZN3BTD8HCI_taskEv+0x28a>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nStarting inquiry\r\nPress 1 & 2 on the Wiimote\r\nOr press the SYNC button if you are using a Wii U Pro Controller or a Wii Balance Board"), 0x80);
                                else
                                        Notify(PSTR("\r\nPlease enable discovery of your device"), 0x80);
#endif
                                hci_inquiry();
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f000 fc8f 	bl	800e0a6 <_ZN3BTD11hci_inquiryEv>
                                hci_state = HCI_INQUIRY_STATE;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2207      	movs	r2, #7
 800d78c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
                        break;
 800d790:	e1d8      	b.n	800db44 <_ZN3BTD8HCI_taskEv+0x63c>
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	220a      	movs	r2, #10
 800d796:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d79a:	e1d3      	b.n	800db44 <_ZN3BTD8HCI_taskEv+0x63c>

                case HCI_INQUIRY_STATE:
                        if(hci_check_flag(HCI_FLAG_DEVICE_FOUND)) {
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d7a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	f000 81bb 	beq.w	800db22 <_ZN3BTD8HCI_taskEv+0x61a>
                                hci_inquiry_cancel(); // Stop inquiry
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f000 fcb2 	bl	800e116 <_ZN3BTD18hci_inquiry_cancelEv>
                                if(pairWithWii)
                                        Notify(PSTR("Wiimote"), 0x80);
                                else
                                        Notify(PSTR("device"), 0x80);
#endif
                                if(checkRemoteName) {
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d007      	beq.n	800d7cc <_ZN3BTD8HCI_taskEv+0x2c4>
                                        hci_remote_name(); // We need to know the name to distinguish between the Wiimote, the new Wiimote with Motion Plus inside, a Wii U Pro Controller and a Wii Balance Board
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f000 fb74 	bl	800deaa <_ZN3BTD15hci_remote_nameEv>
                                        hci_state = HCI_REMOTE_NAME_STATE;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	220c      	movs	r2, #12
 800d7c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
                        }
                        break;
 800d7ca:	e1aa      	b.n	800db22 <_ZN3BTD8HCI_taskEv+0x61a>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2208      	movs	r2, #8
 800d7d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d7d4:	e1a5      	b.n	800db22 <_ZN3BTD8HCI_taskEv+0x61a>

                case HCI_CONNECT_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d7dc:	f003 0301 	and.w	r3, r3, #1
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	f000 81a0 	beq.w	800db26 <_ZN3BTD8HCI_taskEv+0x61e>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nConnecting to Wiimote"), 0x80);
                                else
                                        Notify(PSTR("\r\nConnecting to HID device"), 0x80);
#endif
                                checkRemoteName = false;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                                hci_connect();
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f000 fcac 	bl	800e14c <_ZN3BTD11hci_connectEv>
                                hci_state = HCI_CONNECTED_DEVICE_STATE;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2209      	movs	r2, #9
 800d7f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d7fc:	e193      	b.n	800db26 <_ZN3BTD8HCI_taskEv+0x61e>

                case HCI_CONNECTED_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_EVENT)) {
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d808:	2b00      	cmp	r3, #0
 800d80a:	f000 818e 	beq.w	800db2a <_ZN3BTD8HCI_taskEv+0x622>
                                if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d814:	f003 0302 	and.w	r3, r3, #2
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d007      	beq.n	800d82c <_ZN3BTD8HCI_taskEv+0x324>
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nConnected to Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nConnected to HID device"), 0x80);
#endif
                                        hci_authentication_request(); // This will start the pairing with the device
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f000 fead 	bl	800e57c <_ZN3BTD26hci_authentication_requestEv>
                                        hci_state = HCI_SCANNING_STATE;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	220a      	movs	r2, #10
 800d826:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
#endif
                                        hci_connect(); // Try to connect one more time
                                }
                        }
                        break;
 800d82a:	e17e      	b.n	800db2a <_ZN3BTD8HCI_taskEv+0x622>
                                        hci_connect(); // Try to connect one more time
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f000 fc8d 	bl	800e14c <_ZN3BTD11hci_connectEv>
                        break;
 800d832:	e17a      	b.n	800db2a <_ZN3BTD8HCI_taskEv+0x622>

                case HCI_SCANNING_STATE:
                        if(!connectToWii && !pairWithWii && !connectToHIDDevice && !pairWithHIDDevice) {
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d83a:	f083 0301 	eor.w	r3, r3, #1
 800d83e:	b2db      	uxtb	r3, r3
 800d840:	2b00      	cmp	r3, #0
 800d842:	f000 8174 	beq.w	800db2e <_ZN3BTD8HCI_taskEv+0x626>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d84c:	f083 0301 	eor.w	r3, r3, #1
 800d850:	b2db      	uxtb	r3, r3
 800d852:	2b00      	cmp	r3, #0
 800d854:	f000 816b 	beq.w	800db2e <_ZN3BTD8HCI_taskEv+0x626>
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d85e:	f083 0301 	eor.w	r3, r3, #1
 800d862:	b2db      	uxtb	r3, r3
 800d864:	2b00      	cmp	r3, #0
 800d866:	f000 8162 	beq.w	800db2e <_ZN3BTD8HCI_taskEv+0x626>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d870:	f083 0301 	eor.w	r3, r3, #1
 800d874:	b2db      	uxtb	r3, r3
 800d876:	2b00      	cmp	r3, #0
 800d878:	f000 8159 	beq.w	800db2e <_ZN3BTD8HCI_taskEv+0x626>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWait For Incoming Connection Request"), 0x80);
#endif
                                hci_write_scan_enable();
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f000 fa29 	bl	800dcd4 <_ZN3BTD21hci_write_scan_enableEv>
                                waitingForConnection = true;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2201      	movs	r2, #1
 800d886:	721a      	strb	r2, [r3, #8]
                                hci_state = HCI_CONNECT_IN_STATE;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	220b      	movs	r2, #11
 800d88c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d890:	e14d      	b.n	800db2e <_ZN3BTD8HCI_taskEv+0x626>

                case HCI_CONNECT_IN_STATE:
                        if(hci_check_flag(HCI_FLAG_INCOMING_REQUEST)) {
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d898:	f003 0310 	and.w	r3, r3, #16
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d00a      	beq.n	800d8b6 <_ZN3BTD8HCI_taskEv+0x3ae>
                                waitingForConnection = false;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	721a      	strb	r2, [r3, #8]
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nIncoming Connection Request"), 0x80);
#endif
                                hci_remote_name();
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f000 faff 	bl	800deaa <_ZN3BTD15hci_remote_nameEv>
                                hci_state = HCI_REMOTE_NAME_STATE;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	220c      	movs	r2, #12
 800d8b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
                                hci_state = HCI_DISCONNECT_STATE;
                        break;
 800d8b4:	e13d      	b.n	800db32 <_ZN3BTD8HCI_taskEv+0x62a>
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d8bc:	f003 0304 	and.w	r3, r3, #4
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	f000 8136 	beq.w	800db32 <_ZN3BTD8HCI_taskEv+0x62a>
                                hci_state = HCI_DISCONNECT_STATE;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2210      	movs	r2, #16
 800d8ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d8ce:	e130      	b.n	800db32 <_ZN3BTD8HCI_taskEv+0x62a>

                case HCI_REMOTE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_REMOTE_NAME_COMPLETE)) {
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d8d6:	f003 0308 	and.w	r3, r3, #8
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	f000 812b 	beq.w	800db36 <_ZN3BTD8HCI_taskEv+0x62e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nRemote Name: "), 0x80);
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
                                        Notifyc(remote_name[i], 0x80);
#endif
                                if(strncmp((const char*)remote_name, "Nintendo", 8) == 0) {
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	3322      	adds	r3, #34	; 0x22
 800d8e4:	2208      	movs	r2, #8
 800d8e6:	4999      	ldr	r1, [pc, #612]	; (800db4c <_ZN3BTD8HCI_taskEv+0x644>)
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f004 fe27 	bl	801253c <strncmp>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d147      	bne.n	800d984 <_ZN3BTD8HCI_taskEv+0x47c>
                                        incomingWii = true;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                                        motionPlusInside = false;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2200      	movs	r2, #0
 800d900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                                        wiiUProController = false;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2200      	movs	r2, #0
 800d908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                                        pairWiiUsingSync = false;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2200      	movs	r2, #0
 800d910:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nWiimote is connecting"), 0x80);
#endif
                                        if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-TR", 22) == 0) {
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	3322      	adds	r3, #34	; 0x22
 800d918:	2216      	movs	r2, #22
 800d91a:	498d      	ldr	r1, [pc, #564]	; (800db50 <_ZN3BTD8HCI_taskEv+0x648>)
 800d91c:	4618      	mov	r0, r3
 800d91e:	f004 fe0d 	bl	801253c <strncmp>
 800d922:	4603      	mov	r3, r0
 800d924:	2b00      	cmp	r3, #0
 800d926:	d104      	bne.n	800d932 <_ZN3BTD8HCI_taskEv+0x42a>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" with Motion Plus Inside"), 0x80);
#endif
                                                motionPlusInside = true;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2201      	movs	r2, #1
 800d92c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d930:	e028      	b.n	800d984 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-UC", 22) == 0) {
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	3322      	adds	r3, #34	; 0x22
 800d936:	2216      	movs	r2, #22
 800d938:	4986      	ldr	r1, [pc, #536]	; (800db54 <_ZN3BTD8HCI_taskEv+0x64c>)
 800d93a:	4618      	mov	r0, r3
 800d93c:	f004 fdfe 	bl	801253c <strncmp>
 800d940:	4603      	mov	r3, r0
 800d942:	2b00      	cmp	r3, #0
 800d944:	d110      	bne.n	800d968 <_ZN3BTD8HCI_taskEv+0x460>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii U Pro Controller"), 0x80);
#endif
                                                wiiUProController = motionPlusInside = pairWiiUsingSync = true;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2201      	movs	r2, #1
 800d94a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d966:	e00d      	b.n	800d984 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-WBC-01", 19) == 0) {
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	3322      	adds	r3, #34	; 0x22
 800d96c:	2213      	movs	r2, #19
 800d96e:	497a      	ldr	r1, [pc, #488]	; (800db58 <_ZN3BTD8HCI_taskEv+0x650>)
 800d970:	4618      	mov	r0, r3
 800d972:	f004 fde3 	bl	801253c <strncmp>
 800d976:	4603      	mov	r3, r0
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d103      	bne.n	800d984 <_ZN3BTD8HCI_taskEv+0x47c>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii Balance Board"), 0x80);
#endif
                                                pairWiiUsingSync = true;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2201      	movs	r2, #1
 800d980:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
                                        }
                                }
                                if(classOfDevice[2] == 0 && classOfDevice[1] == 0x25 && classOfDevice[0] == 0x08 && strncmp((const char*)remote_name, "Wireless Controller", 19) == 0) {
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d117      	bne.n	800d9be <_ZN3BTD8HCI_taskEv+0x4b6>
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800d994:	2b25      	cmp	r3, #37	; 0x25
 800d996:	d112      	bne.n	800d9be <_ZN3BTD8HCI_taskEv+0x4b6>
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d99e:	2b08      	cmp	r3, #8
 800d9a0:	d10d      	bne.n	800d9be <_ZN3BTD8HCI_taskEv+0x4b6>
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	3322      	adds	r3, #34	; 0x22
 800d9a6:	2213      	movs	r2, #19
 800d9a8:	496c      	ldr	r1, [pc, #432]	; (800db5c <_ZN3BTD8HCI_taskEv+0x654>)
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f004 fdc6 	bl	801253c <strncmp>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d103      	bne.n	800d9be <_ZN3BTD8HCI_taskEv+0x4b6>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPS4/PS5 controller is connecting"), 0x80);
#endif
                                        incomingPSController = true;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2201      	movs	r2, #1
 800d9ba:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                                }
                                if((pairWithWii || pairWithHIDDevice) && checkRemoteName)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d104      	bne.n	800d9d2 <_ZN3BTD8HCI_taskEv+0x4ca>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d009      	beq.n	800d9e6 <_ZN3BTD8HCI_taskEv+0x4de>
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d004      	beq.n	800d9e6 <_ZN3BTD8HCI_taskEv+0x4de>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2208      	movs	r2, #8
 800d9e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                else {
                                        hci_accept_connection();
                                        hci_state = HCI_CONNECTED_STATE;
                                }
                        }
                        break;
 800d9e4:	e0a7      	b.n	800db36 <_ZN3BTD8HCI_taskEv+0x62e>
                                        hci_accept_connection();
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f000 fa17 	bl	800de1a <_ZN3BTD21hci_accept_connectionEv>
                                        hci_state = HCI_CONNECTED_STATE;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	220d      	movs	r2, #13
 800d9f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d9f4:	e09f      	b.n	800db36 <_ZN3BTD8HCI_taskEv+0x62e>

                case HCI_CONNECTED_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d9fc:	f003 0302 	and.w	r3, r3, #2
 800da00:	2b00      	cmp	r3, #0
 800da02:	f000 809a 	beq.w	800db3a <_ZN3BTD8HCI_taskEv+0x632>
                                        D_PrintHex<uint8_t > (disc_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (disc_bdaddr[0], 0x80);
#endif
                                if(incomingPSController)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d003      	beq.n	800da18 <_ZN3BTD8HCI_taskEv+0x510>
                                        connectToHIDDevice = true; // We should always connect to the PS4/PS5 controller
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2201      	movs	r2, #1
 800da14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

                                // Clear these flags for a new connection
                                l2capConnectionClaimed = false;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2200      	movs	r2, #0
 800da1c:	725a      	strb	r2, [r3, #9]
                                sdpConnectionClaimed = false;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2200      	movs	r2, #0
 800da22:	729a      	strb	r2, [r3, #10]
                                rfcommConnectionClaimed = false;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2200      	movs	r2, #0
 800da28:	72da      	strb	r2, [r3, #11]

                                hci_event_flag = 0;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2200      	movs	r2, #0
 800da2e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                hci_state = HCI_DONE_STATE;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	220f      	movs	r2, #15
 800da36:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800da3a:	e07e      	b.n	800db3a <_ZN3BTD8HCI_taskEv+0x632>

                case HCI_DONE_STATE:
                        hci_counter++;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800da42:	3301      	adds	r3, #1
 800da44:	b29a      	uxth	r2, r3
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > 1000) { // Wait until we have looped 1000 times to make sure that the L2CAP connection has been started
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800da52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800da56:	d972      	bls.n	800db3e <_ZN3BTD8HCI_taskEv+0x636>
                                hci_counter = 0;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2200      	movs	r2, #0
 800da5c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                                hci_state = HCI_SCANNING_STATE;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	220a      	movs	r2, #10
 800da64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800da68:	e069      	b.n	800db3e <_ZN3BTD8HCI_taskEv+0x636>

                case HCI_DISCONNECT_STATE:
                        if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE)) {
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800da70:	f003 0304 	and.w	r3, r3, #4
 800da74:	2b00      	cmp	r3, #0
 800da76:	d064      	beq.n	800db42 <_ZN3BTD8HCI_taskEv+0x63a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Disconnected from Device"), 0x80);
#endif
                                hci_event_flag = 0; // Clear all flags
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2200      	movs	r2, #0
 800da7c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

                                // Reset all buffers
                                memset(hcibuf, 0, BULK_MAXPKTSIZE);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	3389      	adds	r3, #137	; 0x89
 800da84:	2240      	movs	r2, #64	; 0x40
 800da86:	2100      	movs	r1, #0
 800da88:	4618      	mov	r0, r3
 800da8a:	f004 fd0b 	bl	80124a4 <memset>
                                memset(l2capinbuf, 0, BULK_MAXPKTSIZE);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	33c9      	adds	r3, #201	; 0xc9
 800da92:	2240      	movs	r2, #64	; 0x40
 800da94:	2100      	movs	r1, #0
 800da96:	4618      	mov	r0, r3
 800da98:	f004 fd04 	bl	80124a4 <memset>

                                connectToWii = incomingWii = pairWithWii = false;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2200      	movs	r2, #0
 800daa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                connectToHIDDevice = incomingHIDDevice = pairWithHIDDevice = checkRemoteName = false;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2200      	movs	r2, #0
 800dac0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                incomingPSController = false;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2200      	movs	r2, #0
 800daec:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

                                hci_state = HCI_SCANNING_STATE;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	220a      	movs	r2, #10
 800daf4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800daf8:	e023      	b.n	800db42 <_ZN3BTD8HCI_taskEv+0x63a>
                default:
                        break;
 800dafa:	bf00      	nop
 800dafc:	e022      	b.n	800db44 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dafe:	bf00      	nop
 800db00:	e020      	b.n	800db44 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db02:	bf00      	nop
 800db04:	e01e      	b.n	800db44 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db06:	bf00      	nop
 800db08:	e01c      	b.n	800db44 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db0a:	bf00      	nop
 800db0c:	e01a      	b.n	800db44 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db0e:	bf00      	nop
 800db10:	e018      	b.n	800db44 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db12:	bf00      	nop
 800db14:	e016      	b.n	800db44 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db16:	bf00      	nop
 800db18:	e014      	b.n	800db44 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db1a:	bf00      	nop
 800db1c:	e012      	b.n	800db44 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db1e:	bf00      	nop
 800db20:	e010      	b.n	800db44 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db22:	bf00      	nop
 800db24:	e00e      	b.n	800db44 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db26:	bf00      	nop
 800db28:	e00c      	b.n	800db44 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db2a:	bf00      	nop
 800db2c:	e00a      	b.n	800db44 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db2e:	bf00      	nop
 800db30:	e008      	b.n	800db44 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db32:	bf00      	nop
 800db34:	e006      	b.n	800db44 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db36:	bf00      	nop
 800db38:	e004      	b.n	800db44 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db3a:	bf00      	nop
 800db3c:	e002      	b.n	800db44 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db3e:	bf00      	nop
 800db40:	e000      	b.n	800db44 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db42:	bf00      	nop
        }
}
 800db44:	bf00      	nop
 800db46:	3708      	adds	r7, #8
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}
 800db4c:	0801268c 	.word	0x0801268c
 800db50:	08012698 	.word	0x08012698
 800db54:	080126b0 	.word	0x080126b0
 800db58:	080126c8 	.word	0x080126c8
 800db5c:	080126dc 	.word	0x080126dc

0800db60 <_ZN3BTD14ACL_event_taskEv>:

void BTD::ACL_event_task() {
 800db60:	b5b0      	push	{r4, r5, r7, lr}
 800db62:	b086      	sub	sp, #24
 800db64:	af02      	add	r7, sp, #8
 800db66:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE;
 800db68:	2340      	movs	r3, #64	; 0x40
 800db6a:	817b      	strh	r3, [r7, #10]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_DATAIN_PIPE ].epAddr, &length, l2capinbuf, pollInterval); // Input on endpoint 2
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f893 4057 	ldrb.w	r4, [r3, #87]	; 0x57
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	33c9      	adds	r3, #201	; 0xc9
 800db80:	687a      	ldr	r2, [r7, #4]
 800db82:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800db86:	f107 050a 	add.w	r5, r7, #10
 800db8a:	9201      	str	r2, [sp, #4]
 800db8c:	9300      	str	r3, [sp, #0]
 800db8e:	462b      	mov	r3, r5
 800db90:	4622      	mov	r2, r4
 800db92:	f003 f92c 	bl	8010dee <_ZN3USB10inTransferEhhPtPhh>
 800db96:	4603      	mov	r3, r0
 800db98:	737b      	strb	r3, [r7, #13]

        if(!rcode) { // Check for errors
 800db9a:	7b7b      	ldrb	r3, [r7, #13]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d125      	bne.n	800dbec <_ZN3BTD14ACL_event_taskEv+0x8c>
                if(length > 0) { // Check if any data was read
 800dba0:	897b      	ldrh	r3, [r7, #10]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d022      	beq.n	800dbec <_ZN3BTD14ACL_event_taskEv+0x8c>
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800dba6:	2300      	movs	r3, #0
 800dba8:	73fb      	strb	r3, [r7, #15]
 800dbaa:	7bfb      	ldrb	r3, [r7, #15]
 800dbac:	2b03      	cmp	r3, #3
 800dbae:	d81d      	bhi.n	800dbec <_ZN3BTD14ACL_event_taskEv+0x8c>
                                if(btService[i])
 800dbb0:	7bfb      	ldrb	r3, [r7, #15]
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	3318      	adds	r3, #24
 800dbb6:	009b      	lsls	r3, r3, #2
 800dbb8:	4413      	add	r3, r2
 800dbba:	685b      	ldr	r3, [r3, #4]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d011      	beq.n	800dbe4 <_ZN3BTD14ACL_event_taskEv+0x84>
                                        btService[i]->ACLData(l2capinbuf);
 800dbc0:	7bfb      	ldrb	r3, [r7, #15]
 800dbc2:	687a      	ldr	r2, [r7, #4]
 800dbc4:	3318      	adds	r3, #24
 800dbc6:	009b      	lsls	r3, r3, #2
 800dbc8:	4413      	add	r3, r2
 800dbca:	6858      	ldr	r0, [r3, #4]
 800dbcc:	7bfb      	ldrb	r3, [r7, #15]
 800dbce:	687a      	ldr	r2, [r7, #4]
 800dbd0:	3318      	adds	r3, #24
 800dbd2:	009b      	lsls	r3, r3, #2
 800dbd4:	4413      	add	r3, r2
 800dbd6:	685b      	ldr	r3, [r3, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	687a      	ldr	r2, [r7, #4]
 800dbde:	32c9      	adds	r2, #201	; 0xc9
 800dbe0:	4611      	mov	r1, r2
 800dbe2:	4798      	blx	r3
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800dbe4:	7bfb      	ldrb	r3, [r7, #15]
 800dbe6:	3301      	adds	r3, #1
 800dbe8:	73fb      	strb	r3, [r7, #15]
 800dbea:	e7de      	b.n	800dbaa <_ZN3BTD14ACL_event_taskEv+0x4a>
        else if(rcode != hrNAK) {
                Notify(PSTR("\r\nACL data in error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800dbec:	2300      	movs	r3, #0
 800dbee:	73bb      	strb	r3, [r7, #14]
 800dbf0:	7bbb      	ldrb	r3, [r7, #14]
 800dbf2:	2b03      	cmp	r3, #3
 800dbf4:	d81c      	bhi.n	800dc30 <_ZN3BTD14ACL_event_taskEv+0xd0>
                if(btService[i])
 800dbf6:	7bbb      	ldrb	r3, [r7, #14]
 800dbf8:	687a      	ldr	r2, [r7, #4]
 800dbfa:	3318      	adds	r3, #24
 800dbfc:	009b      	lsls	r3, r3, #2
 800dbfe:	4413      	add	r3, r2
 800dc00:	685b      	ldr	r3, [r3, #4]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d010      	beq.n	800dc28 <_ZN3BTD14ACL_event_taskEv+0xc8>
                        btService[i]->Run();
 800dc06:	7bbb      	ldrb	r3, [r7, #14]
 800dc08:	687a      	ldr	r2, [r7, #4]
 800dc0a:	3318      	adds	r3, #24
 800dc0c:	009b      	lsls	r3, r3, #2
 800dc0e:	4413      	add	r3, r2
 800dc10:	6859      	ldr	r1, [r3, #4]
 800dc12:	7bbb      	ldrb	r3, [r7, #14]
 800dc14:	687a      	ldr	r2, [r7, #4]
 800dc16:	3318      	adds	r3, #24
 800dc18:	009b      	lsls	r3, r3, #2
 800dc1a:	4413      	add	r3, r2
 800dc1c:	685b      	ldr	r3, [r3, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	3304      	adds	r3, #4
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	4608      	mov	r0, r1
 800dc26:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800dc28:	7bbb      	ldrb	r3, [r7, #14]
 800dc2a:	3301      	adds	r3, #1
 800dc2c:	73bb      	strb	r3, [r7, #14]
 800dc2e:	e7df      	b.n	800dbf0 <_ZN3BTD14ACL_event_taskEv+0x90>
}
 800dc30:	bf00      	nop
 800dc32:	3710      	adds	r7, #16
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bdb0      	pop	{r4, r5, r7, pc}

0800dc38 <_ZN3BTD11HCI_CommandEPht>:

/************************************************************/
/*                    HCI Commands                        */

/************************************************************/
void BTD::HCI_Command(uint8_t* data, uint16_t nbytes) {
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b08c      	sub	sp, #48	; 0x30
 800dc3c:	af08      	add	r7, sp, #32
 800dc3e:	60f8      	str	r0, [r7, #12]
 800dc40:	60b9      	str	r1, [r7, #8]
 800dc42:	4613      	mov	r3, r2
 800dc44:	80fb      	strh	r3, [r7, #6]
        hci_clear_flag(HCI_FLAG_CMD_COMPLETE);
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dc4c:	f023 0301 	bic.w	r3, r3, #1
 800dc50:	b29a      	uxth	r2, r3
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        pUsb->ctrlReq(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bmREQ_HCI_OUT, 0x00, 0x00, 0x00, 0x00, nbytes, nbytes, data, NULL);
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800dc68:	2300      	movs	r3, #0
 800dc6a:	9307      	str	r3, [sp, #28]
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	9306      	str	r3, [sp, #24]
 800dc70:	88fb      	ldrh	r3, [r7, #6]
 800dc72:	9305      	str	r3, [sp, #20]
 800dc74:	88fb      	ldrh	r3, [r7, #6]
 800dc76:	9304      	str	r3, [sp, #16]
 800dc78:	2300      	movs	r3, #0
 800dc7a:	9303      	str	r3, [sp, #12]
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	9302      	str	r3, [sp, #8]
 800dc80:	2300      	movs	r3, #0
 800dc82:	9301      	str	r3, [sp, #4]
 800dc84:	2300      	movs	r3, #0
 800dc86:	9300      	str	r3, [sp, #0]
 800dc88:	2320      	movs	r3, #32
 800dc8a:	f002 ffd8 	bl	8010c3e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800dc8e:	bf00      	nop
 800dc90:	3710      	adds	r7, #16
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}

0800dc96 <_ZN3BTD9hci_resetEv>:

void BTD::hci_reset() {
 800dc96:	b580      	push	{r7, lr}
 800dc98:	b082      	sub	sp, #8
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	6078      	str	r0, [r7, #4]
        hci_event_flag = 0; // Clear all the flags
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2200      	movs	r2, #0
 800dca2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x03; // HCI OCF = 3
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2203      	movs	r2, #3
 800dcaa:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	220c      	movs	r2, #12
 800dcb2:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	3389      	adds	r3, #137	; 0x89
 800dcc2:	2203      	movs	r2, #3
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f7ff ffb6 	bl	800dc38 <_ZN3BTD11HCI_CommandEPht>
}
 800dccc:	bf00      	nop
 800dcce:	3708      	adds	r7, #8
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}

0800dcd4 <_ZN3BTD21hci_write_scan_enableEv>:

void BTD::hci_write_scan_enable() {
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b082      	sub	sp, #8
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_INCOMING_REQUEST);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dce2:	f023 0310 	bic.w	r3, r3, #16
 800dce6:	b29a      	uxth	r2, r3
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x1A; // HCI OCF = 1A
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	221a      	movs	r2, #26
 800dcf2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	220c      	movs	r2, #12
 800dcfa:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2201      	movs	r2, #1
 800dd02:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        if(btdName != NULL)
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	68db      	ldr	r3, [r3, #12]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d004      	beq.n	800dd18 <_ZN3BTD21hci_write_scan_enableEv+0x44>
                hcibuf[3] = 0x03; // Inquiry Scan enabled. Page Scan enabled.
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2203      	movs	r2, #3
 800dd12:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800dd16:	e003      	b.n	800dd20 <_ZN3BTD21hci_write_scan_enableEv+0x4c>
        else
                hcibuf[3] = 0x02; // Inquiry Scan disabled. Page Scan enabled.
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2202      	movs	r2, #2
 800dd1c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	3389      	adds	r3, #137	; 0x89
 800dd24:	2204      	movs	r2, #4
 800dd26:	4619      	mov	r1, r3
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f7ff ff85 	bl	800dc38 <_ZN3BTD11HCI_CommandEPht>
}
 800dd2e:	bf00      	nop
 800dd30:	3708      	adds	r7, #8
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}

0800dd36 <_ZN3BTD15hci_read_bdaddrEv>:
        hcibuf[3] = 0x00; // Inquiry Scan disabled. Page Scan disabled.

        HCI_Command(hcibuf, 4);
}

void BTD::hci_read_bdaddr() {
 800dd36:	b580      	push	{r7, lr}
 800dd38:	b082      	sub	sp, #8
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_BDADDR);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dd44:	f023 0320 	bic.w	r3, r3, #32
 800dd48:	b29a      	uxth	r2, r3
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2209      	movs	r2, #9
 800dd54:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2210      	movs	r2, #16
 800dd5c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2200      	movs	r2, #0
 800dd64:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	3389      	adds	r3, #137	; 0x89
 800dd6c:	2203      	movs	r2, #3
 800dd6e:	4619      	mov	r1, r3
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f7ff ff61 	bl	800dc38 <_ZN3BTD11HCI_CommandEPht>
}
 800dd76:	bf00      	nop
 800dd78:	3708      	adds	r7, #8
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}

0800dd7e <_ZN3BTD34hci_read_local_version_informationEv>:

void BTD::hci_read_local_version_information() {
 800dd7e:	b580      	push	{r7, lr}
 800dd80:	b082      	sub	sp, #8
 800dd82:	af00      	add	r7, sp, #0
 800dd84:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_VERSION);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dd8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd90:	b29a      	uxth	r2, r3
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01; // HCI OCF = 1
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2210      	movs	r2, #16
 800dda4:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	3389      	adds	r3, #137	; 0x89
 800ddb4:	2203      	movs	r2, #3
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f7ff ff3d 	bl	800dc38 <_ZN3BTD11HCI_CommandEPht>
}
 800ddbe:	bf00      	nop
 800ddc0:	3708      	adds	r7, #8
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}

0800ddc6 <_ZN3BTD32hci_read_local_extended_featuresEh>:

void BTD::hci_read_local_extended_features(uint8_t page_number) {
 800ddc6:	b580      	push	{r7, lr}
 800ddc8:	b082      	sub	sp, #8
 800ddca:	af00      	add	r7, sp, #0
 800ddcc:	6078      	str	r0, [r7, #4]
 800ddce:	460b      	mov	r3, r1
 800ddd0:	70fb      	strb	r3, [r7, #3]
        hci_clear_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ddd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dddc:	b29a      	uxth	r2, r3
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x04; // HCI OCF = 4
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2204      	movs	r2, #4
 800dde8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2210      	movs	r2, #16
 800ddf0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2201      	movs	r2, #1
 800ddf8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = page_number;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	78fa      	ldrb	r2, [r7, #3]
 800de00:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	3389      	adds	r3, #137	; 0x89
 800de08:	2204      	movs	r2, #4
 800de0a:	4619      	mov	r1, r3
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f7ff ff13 	bl	800dc38 <_ZN3BTD11HCI_CommandEPht>
}
 800de12:	bf00      	nop
 800de14:	3708      	adds	r7, #8
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}

0800de1a <_ZN3BTD21hci_accept_connectionEv>:

void BTD::hci_accept_connection() {
 800de1a:	b580      	push	{r7, lr}
 800de1c:	b082      	sub	sp, #8
 800de1e:	af00      	add	r7, sp, #0
 800de20:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800de28:	f023 0302 	bic.w	r3, r3, #2
 800de2c:	b29a      	uxth	r2, r3
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2209      	movs	r2, #9
 800de38:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2204      	movs	r2, #4
 800de40:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x07; // parameter length 7
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2207      	movs	r2, #7
 800de48:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	7f1a      	ldrb	r2, [r3, #28]
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	7f5a      	ldrb	r2, [r3, #29]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	7f9a      	ldrb	r2, [r3, #30]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	7fda      	ldrb	r2, [r3, #31]
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f893 2020 	ldrb.w	r2, [r3, #32]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x00; // Switch role to master
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2200      	movs	r2, #0
 800de90:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

        HCI_Command(hcibuf, 10);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	3389      	adds	r3, #137	; 0x89
 800de98:	220a      	movs	r2, #10
 800de9a:	4619      	mov	r1, r3
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f7ff fecb 	bl	800dc38 <_ZN3BTD11HCI_CommandEPht>
}
 800dea2:	bf00      	nop
 800dea4:	3708      	adds	r7, #8
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}

0800deaa <_ZN3BTD15hci_remote_nameEv>:

void BTD::hci_remote_name() {
 800deaa:	b580      	push	{r7, lr}
 800deac:	b082      	sub	sp, #8
 800deae:	af00      	add	r7, sp, #0
 800deb0:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800deb8:	f023 0308 	bic.w	r3, r3, #8
 800debc:	b29a      	uxth	r2, r3
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x19; // HCI OCF = 19
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2219      	movs	r2, #25
 800dec8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2204      	movs	r2, #4
 800ded0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0A; // parameter length = 10
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	220a      	movs	r2, #10
 800ded8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	7f1a      	ldrb	r2, [r3, #28]
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	7f5a      	ldrb	r2, [r3, #29]
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	7f9a      	ldrb	r2, [r3, #30]
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	7fda      	ldrb	r2, [r3, #31]
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f893 2020 	ldrb.w	r2, [r3, #32]
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x01; // Page Scan Repetition Mode
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2201      	movs	r2, #1
 800df20:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // Reserved
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2200      	movs	r2, #0
 800df28:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // Clock offset - low byte
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2200      	movs	r2, #0
 800df30:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Clock offset - high byte
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2200      	movs	r2, #0
 800df38:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

        HCI_Command(hcibuf, 13);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	3389      	adds	r3, #137	; 0x89
 800df40:	220d      	movs	r2, #13
 800df42:	4619      	mov	r1, r3
 800df44:	6878      	ldr	r0, [r7, #4]
 800df46:	f7ff fe77 	bl	800dc38 <_ZN3BTD11HCI_CommandEPht>
}
 800df4a:	bf00      	nop
 800df4c:	3708      	adds	r7, #8
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}

0800df52 <_ZN3BTD20hci_write_local_nameEPKc>:

void BTD::hci_write_local_name(const char* name) {
 800df52:	b590      	push	{r4, r7, lr}
 800df54:	b085      	sub	sp, #20
 800df56:	af00      	add	r7, sp, #0
 800df58:	6078      	str	r0, [r7, #4]
 800df5a:	6039      	str	r1, [r7, #0]
        hcibuf[0] = 0x13; // HCI OCF = 13
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2213      	movs	r2, #19
 800df60:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	220c      	movs	r2, #12
 800df68:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = strlen(name) + 1; // parameter length = the length of the string + end byte
 800df6c:	6838      	ldr	r0, [r7, #0]
 800df6e:	f7f2 f94f 	bl	8000210 <strlen>
 800df72:	4603      	mov	r3, r0
 800df74:	b2db      	uxtb	r3, r3
 800df76:	3301      	adds	r3, #1
 800df78:	b2da      	uxtb	r2, r3
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        uint8_t i;
        for(i = 0; i < strlen(name); i++)
 800df80:	2300      	movs	r3, #0
 800df82:	73fb      	strb	r3, [r7, #15]
 800df84:	7bfc      	ldrb	r4, [r7, #15]
 800df86:	6838      	ldr	r0, [r7, #0]
 800df88:	f7f2 f942 	bl	8000210 <strlen>
 800df8c:	4603      	mov	r3, r0
 800df8e:	429c      	cmp	r4, r3
 800df90:	d20e      	bcs.n	800dfb0 <_ZN3BTD20hci_write_local_nameEPKc+0x5e>
                hcibuf[i + 3] = name[i];
 800df92:	7bfb      	ldrb	r3, [r7, #15]
 800df94:	683a      	ldr	r2, [r7, #0]
 800df96:	441a      	add	r2, r3
 800df98:	7bfb      	ldrb	r3, [r7, #15]
 800df9a:	3303      	adds	r3, #3
 800df9c:	7811      	ldrb	r1, [r2, #0]
 800df9e:	687a      	ldr	r2, [r7, #4]
 800dfa0:	4413      	add	r3, r2
 800dfa2:	460a      	mov	r2, r1
 800dfa4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        for(i = 0; i < strlen(name); i++)
 800dfa8:	7bfb      	ldrb	r3, [r7, #15]
 800dfaa:	3301      	adds	r3, #1
 800dfac:	73fb      	strb	r3, [r7, #15]
 800dfae:	e7e9      	b.n	800df84 <_ZN3BTD20hci_write_local_nameEPKc+0x32>
        hcibuf[i + 3] = 0x00; // End of string
 800dfb0:	7bfb      	ldrb	r3, [r7, #15]
 800dfb2:	3303      	adds	r3, #3
 800dfb4:	687a      	ldr	r2, [r7, #4]
 800dfb6:	4413      	add	r3, r2
 800dfb8:	2200      	movs	r2, #0
 800dfba:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

        HCI_Command(hcibuf, 4 + strlen(name));
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	f103 0489 	add.w	r4, r3, #137	; 0x89
 800dfc4:	6838      	ldr	r0, [r7, #0]
 800dfc6:	f7f2 f923 	bl	8000210 <strlen>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	b29b      	uxth	r3, r3
 800dfce:	3304      	adds	r3, #4
 800dfd0:	b29b      	uxth	r3, r3
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	4621      	mov	r1, r4
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f7ff fe2e 	bl	800dc38 <_ZN3BTD11HCI_CommandEPht>
}
 800dfdc:	bf00      	nop
 800dfde:	3714      	adds	r7, #20
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd90      	pop	{r4, r7, pc}

0800dfe4 <_ZN3BTD18hci_set_event_maskEv>:

void BTD::hci_set_event_mask() {
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b082      	sub	sp, #8
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x01; // HCI OCF = 01
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2201      	movs	r2, #1
 800dff0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	220c      	movs	r2, #12
 800dff8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x08;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2208      	movs	r2, #8
 800e000:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        // The first 6 bytes are the default of 1FFF FFFF FFFF
        // However we need to set bits 48-55 for simple pairing to work
        hcibuf[3] = 0xFF;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	22ff      	movs	r2, #255	; 0xff
 800e008:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0xFF;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	22ff      	movs	r2, #255	; 0xff
 800e010:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0xFF;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	22ff      	movs	r2, #255	; 0xff
 800e018:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0xFF;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	22ff      	movs	r2, #255	; 0xff
 800e020:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0xFF;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	22ff      	movs	r2, #255	; 0xff
 800e028:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = 0x1F;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	221f      	movs	r2, #31
 800e030:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0xFF; // Enable bits 48-55 used for simple pairing
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	22ff      	movs	r2, #255	; 0xff
 800e038:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2200      	movs	r2, #0
 800e040:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

        HCI_Command(hcibuf, 11);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	3389      	adds	r3, #137	; 0x89
 800e048:	220b      	movs	r2, #11
 800e04a:	4619      	mov	r1, r3
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f7ff fdf3 	bl	800dc38 <_ZN3BTD11HCI_CommandEPht>
}
 800e052:	bf00      	nop
 800e054:	3708      	adds	r7, #8
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}

0800e05a <_ZN3BTD29hci_write_simple_pairing_modeEb>:

void BTD::hci_write_simple_pairing_mode(bool enable) {
 800e05a:	b580      	push	{r7, lr}
 800e05c:	b082      	sub	sp, #8
 800e05e:	af00      	add	r7, sp, #0
 800e060:	6078      	str	r0, [r7, #4]
 800e062:	460b      	mov	r3, r1
 800e064:	70fb      	strb	r3, [r7, #3]
        hcibuf[0] = 0x56; // HCI OCF = 56
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2256      	movs	r2, #86	; 0x56
 800e06a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	220c      	movs	r2, #12
 800e072:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 1; // parameter length = 1
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2201      	movs	r2, #1
 800e07a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = enable ? 1 : 0;
 800e07e:	78fb      	ldrb	r3, [r7, #3]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d001      	beq.n	800e088 <_ZN3BTD29hci_write_simple_pairing_modeEb+0x2e>
 800e084:	2201      	movs	r2, #1
 800e086:	e000      	b.n	800e08a <_ZN3BTD29hci_write_simple_pairing_modeEb+0x30>
 800e088:	2200      	movs	r2, #0
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	3389      	adds	r3, #137	; 0x89
 800e094:	2204      	movs	r2, #4
 800e096:	4619      	mov	r1, r3
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f7ff fdcd 	bl	800dc38 <_ZN3BTD11HCI_CommandEPht>
}
 800e09e:	bf00      	nop
 800e0a0:	3708      	adds	r7, #8
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}

0800e0a6 <_ZN3BTD11hci_inquiryEv>:

void BTD::hci_inquiry() {
 800e0a6:	b580      	push	{r7, lr}
 800e0a8:	b082      	sub	sp, #8
 800e0aa:	af00      	add	r7, sp, #0
 800e0ac:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_DEVICE_FOUND);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e0b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e0b8:	b29a      	uxth	r2, r3
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2204      	movs	r2, #4
 800e0cc:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x05; // Parameter Total Length = 5
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2205      	movs	r2, #5
 800e0d4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x33; // LAP: Genera/Unlimited Inquiry Access Code (GIAC = 0x9E8B33) - see https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2233      	movs	r2, #51	; 0x33
 800e0dc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x8B;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	228b      	movs	r2, #139	; 0x8b
 800e0e4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x9E;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	229e      	movs	r2, #158	; 0x9e
 800e0ec:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0x30; // Inquiry time = 61.44 sec (maximum)
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2230      	movs	r2, #48	; 0x30
 800e0f4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0x0A; // 10 number of responses
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	220a      	movs	r2, #10
 800e0fc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        HCI_Command(hcibuf, 8);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	3389      	adds	r3, #137	; 0x89
 800e104:	2208      	movs	r2, #8
 800e106:	4619      	mov	r1, r3
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f7ff fd95 	bl	800dc38 <_ZN3BTD11HCI_CommandEPht>
}
 800e10e:	bf00      	nop
 800e110:	3708      	adds	r7, #8
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}

0800e116 <_ZN3BTD18hci_inquiry_cancelEv>:

void BTD::hci_inquiry_cancel() {
 800e116:	b580      	push	{r7, lr}
 800e118:	b082      	sub	sp, #8
 800e11a:	af00      	add	r7, sp, #0
 800e11c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x02;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2202      	movs	r2, #2
 800e122:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2204      	movs	r2, #4
 800e12a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00; // Parameter Total Length = 0
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2200      	movs	r2, #0
 800e132:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	3389      	adds	r3, #137	; 0x89
 800e13a:	2203      	movs	r2, #3
 800e13c:	4619      	mov	r1, r3
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f7ff fd7a 	bl	800dc38 <_ZN3BTD11HCI_CommandEPht>
}
 800e144:	bf00      	nop
 800e146:	3708      	adds	r7, #8
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}

0800e14c <_ZN3BTD11hci_connectEv>:

void BTD::hci_connect() {
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b082      	sub	sp, #8
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
        hci_connect(disc_bdaddr); // Use last discovered device
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	331c      	adds	r3, #28
 800e158:	4619      	mov	r1, r3
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f000 f804 	bl	800e168 <_ZN3BTD11hci_connectEPh>
}
 800e160:	bf00      	nop
 800e162:	3708      	adds	r7, #8
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}

0800e168 <_ZN3BTD11hci_connectEPh>:

void BTD::hci_connect(uint8_t *bdaddr) {
 800e168:	b580      	push	{r7, lr}
 800e16a:	b082      	sub	sp, #8
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
 800e170:	6039      	str	r1, [r7, #0]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE | HCI_FLAG_CONNECT_EVENT);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e178:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800e17c:	b29a      	uxth	r2, r3
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x05; // HCI OCF = 5
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2205      	movs	r2, #5
 800e188:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2204      	movs	r2, #4
 800e190:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0D; // parameter Total Length = 13
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	220d      	movs	r2, #13
 800e198:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = bdaddr[0]; // 6 octet bdaddr (LSB)
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	781a      	ldrb	r2, [r3, #0]
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = bdaddr[1];
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	785a      	ldrb	r2, [r3, #1]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = bdaddr[2];
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	789a      	ldrb	r2, [r3, #2]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = bdaddr[3];
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	78da      	ldrb	r2, [r3, #3]
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = bdaddr[4];
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	791a      	ldrb	r2, [r3, #4]
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = bdaddr[5];
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	795a      	ldrb	r2, [r3, #5]
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x18; // DM1 or DH1 may be used
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2218      	movs	r2, #24
 800e1dc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0xCC; // DM3, DH3, DM5, DH5 may be used
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	22cc      	movs	r2, #204	; 0xcc
 800e1e4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x01; // Page repetition mode R1
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2201      	movs	r2, #1
 800e1ec:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Reserved
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
        hcibuf[13] = 0x00; // Clock offset
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
        hcibuf[14] = 0x00; // Invalid clock offset
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2200      	movs	r2, #0
 800e204:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
        hcibuf[15] = 0x00; // Do not allow role switch
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2200      	movs	r2, #0
 800e20c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        HCI_Command(hcibuf, 16);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	3389      	adds	r3, #137	; 0x89
 800e214:	2210      	movs	r2, #16
 800e216:	4619      	mov	r1, r3
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f7ff fd0d 	bl	800dc38 <_ZN3BTD11HCI_CommandEPht>
}
 800e21e:	bf00      	nop
 800e220:	3708      	adds	r7, #8
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}

0800e226 <_ZN3BTD26hci_pin_code_request_replyEv>:

void BTD::hci_pin_code_request_reply() {
 800e226:	b590      	push	{r4, r7, lr}
 800e228:	b085      	sub	sp, #20
 800e22a:	af00      	add	r7, sp, #0
 800e22c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0D; // HCI OCF = 0D
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	220d      	movs	r2, #13
 800e232:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2204      	movs	r2, #4
 800e23a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x17; // parameter length 23
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2217      	movs	r2, #23
 800e242:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	7f1a      	ldrb	r2, [r3, #28]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	7f5a      	ldrb	r2, [r3, #29]
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	7f9a      	ldrb	r2, [r3, #30]
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	7fda      	ldrb	r2, [r3, #31]
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        if(pairWithWii) {
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d03f      	beq.n	800e310 <_ZN3BTD26hci_pin_code_request_replyEv+0xea>
                hcibuf[9] = 6; // Pin length is the length of the Bluetooth address
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2206      	movs	r2, #6
 800e294:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                if(pairWiiUsingSync) {
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d013      	beq.n	800e2ca <_ZN3BTD26hci_pin_code_request_replyEv+0xa4>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPairing with Wii controller via SYNC"), 0x80);
#endif
                        for(uint8_t i = 0; i < 6; i++)
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	73fb      	strb	r3, [r7, #15]
 800e2a6:	7bfb      	ldrb	r3, [r7, #15]
 800e2a8:	2b05      	cmp	r3, #5
 800e2aa:	d822      	bhi.n	800e2f2 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = my_bdaddr[i]; // The pin is the Bluetooth dongles Bluetooth address backwards
 800e2ac:	7bfa      	ldrb	r2, [r7, #15]
 800e2ae:	7bfb      	ldrb	r3, [r7, #15]
 800e2b0:	330a      	adds	r3, #10
 800e2b2:	6879      	ldr	r1, [r7, #4]
 800e2b4:	440a      	add	r2, r1
 800e2b6:	7d11      	ldrb	r1, [r2, #20]
 800e2b8:	687a      	ldr	r2, [r7, #4]
 800e2ba:	4413      	add	r3, r2
 800e2bc:	460a      	mov	r2, r1
 800e2be:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800e2c2:	7bfb      	ldrb	r3, [r7, #15]
 800e2c4:	3301      	adds	r3, #1
 800e2c6:	73fb      	strb	r3, [r7, #15]
 800e2c8:	e7ed      	b.n	800e2a6 <_ZN3BTD26hci_pin_code_request_replyEv+0x80>
                } else {
                        for(uint8_t i = 0; i < 6; i++)
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	73bb      	strb	r3, [r7, #14]
 800e2ce:	7bbb      	ldrb	r3, [r7, #14]
 800e2d0:	2b05      	cmp	r3, #5
 800e2d2:	d80e      	bhi.n	800e2f2 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = disc_bdaddr[i]; // The pin is the Wiimote's Bluetooth address backwards
 800e2d4:	7bba      	ldrb	r2, [r7, #14]
 800e2d6:	7bbb      	ldrb	r3, [r7, #14]
 800e2d8:	330a      	adds	r3, #10
 800e2da:	6879      	ldr	r1, [r7, #4]
 800e2dc:	440a      	add	r2, r1
 800e2de:	7f11      	ldrb	r1, [r2, #28]
 800e2e0:	687a      	ldr	r2, [r7, #4]
 800e2e2:	4413      	add	r3, r2
 800e2e4:	460a      	mov	r2, r1
 800e2e6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800e2ea:	7bbb      	ldrb	r3, [r7, #14]
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	73bb      	strb	r3, [r7, #14]
 800e2f0:	e7ed      	b.n	800e2ce <_ZN3BTD26hci_pin_code_request_replyEv+0xa8>
                }
                for(uint8_t i = 16; i < 26; i++)
 800e2f2:	2310      	movs	r3, #16
 800e2f4:	737b      	strb	r3, [r7, #13]
 800e2f6:	7b7b      	ldrb	r3, [r7, #13]
 800e2f8:	2b19      	cmp	r3, #25
 800e2fa:	d83c      	bhi.n	800e376 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i] = 0x00; // The rest should be 0
 800e2fc:	7b7b      	ldrb	r3, [r7, #13]
 800e2fe:	687a      	ldr	r2, [r7, #4]
 800e300:	4413      	add	r3, r2
 800e302:	2200      	movs	r2, #0
 800e304:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(uint8_t i = 16; i < 26; i++)
 800e308:	7b7b      	ldrb	r3, [r7, #13]
 800e30a:	3301      	adds	r3, #1
 800e30c:	737b      	strb	r3, [r7, #13]
 800e30e:	e7f2      	b.n	800e2f6 <_ZN3BTD26hci_pin_code_request_replyEv+0xd0>
        } else {
                hcibuf[9] = strlen(btdPin); // Length of pin
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	691b      	ldr	r3, [r3, #16]
 800e314:	4618      	mov	r0, r3
 800e316:	f7f1 ff7b 	bl	8000210 <strlen>
 800e31a:	4603      	mov	r3, r0
 800e31c:	b2da      	uxtb	r2, r3
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                uint8_t i;
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800e324:	2300      	movs	r3, #0
 800e326:	733b      	strb	r3, [r7, #12]
 800e328:	7b3c      	ldrb	r4, [r7, #12]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	691b      	ldr	r3, [r3, #16]
 800e32e:	4618      	mov	r0, r3
 800e330:	f7f1 ff6e 	bl	8000210 <strlen>
 800e334:	4603      	mov	r3, r0
 800e336:	429c      	cmp	r4, r3
 800e338:	d20f      	bcs.n	800e35a <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
                        hcibuf[i + 10] = btdPin[i];
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	691a      	ldr	r2, [r3, #16]
 800e33e:	7b3b      	ldrb	r3, [r7, #12]
 800e340:	441a      	add	r2, r3
 800e342:	7b3b      	ldrb	r3, [r7, #12]
 800e344:	330a      	adds	r3, #10
 800e346:	7811      	ldrb	r1, [r2, #0]
 800e348:	687a      	ldr	r2, [r7, #4]
 800e34a:	4413      	add	r3, r2
 800e34c:	460a      	mov	r2, r1
 800e34e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800e352:	7b3b      	ldrb	r3, [r7, #12]
 800e354:	3301      	adds	r3, #1
 800e356:	733b      	strb	r3, [r7, #12]
 800e358:	e7e6      	b.n	800e328 <_ZN3BTD26hci_pin_code_request_replyEv+0x102>
                for(; i < 16; i++)
 800e35a:	7b3b      	ldrb	r3, [r7, #12]
 800e35c:	2b0f      	cmp	r3, #15
 800e35e:	d80a      	bhi.n	800e376 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i + 10] = 0x00; // The rest should be 0
 800e360:	7b3b      	ldrb	r3, [r7, #12]
 800e362:	330a      	adds	r3, #10
 800e364:	687a      	ldr	r2, [r7, #4]
 800e366:	4413      	add	r3, r2
 800e368:	2200      	movs	r2, #0
 800e36a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(; i < 16; i++)
 800e36e:	7b3b      	ldrb	r3, [r7, #12]
 800e370:	3301      	adds	r3, #1
 800e372:	733b      	strb	r3, [r7, #12]
 800e374:	e7f1      	b.n	800e35a <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
        }

        HCI_Command(hcibuf, 26);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	3389      	adds	r3, #137	; 0x89
 800e37a:	221a      	movs	r2, #26
 800e37c:	4619      	mov	r1, r3
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	f7ff fc5a 	bl	800dc38 <_ZN3BTD11HCI_CommandEPht>
}
 800e384:	bf00      	nop
 800e386:	3714      	adds	r7, #20
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd90      	pop	{r4, r7, pc}

0800e38c <_ZN3BTD35hci_pin_code_negative_request_replyEv>:

void BTD::hci_pin_code_negative_request_reply() {
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b082      	sub	sp, #8
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0E; // HCI OCF = 0E
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	220e      	movs	r2, #14
 800e398:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2204      	movs	r2, #4
 800e3a0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2206      	movs	r2, #6
 800e3a8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	7f1a      	ldrb	r2, [r3, #28]
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	7f5a      	ldrb	r2, [r3, #29]
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	7f9a      	ldrb	r2, [r3, #30]
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	7fda      	ldrb	r2, [r3, #31]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	3389      	adds	r3, #137	; 0x89
 800e3f0:	2209      	movs	r2, #9
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f7ff fc1f 	bl	800dc38 <_ZN3BTD11HCI_CommandEPht>
}
 800e3fa:	bf00      	nop
 800e3fc:	3708      	adds	r7, #8
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}

0800e402 <_ZN3BTD35hci_link_key_request_negative_replyEv>:

void BTD::hci_link_key_request_negative_reply() {
 800e402:	b580      	push	{r7, lr}
 800e404:	b082      	sub	sp, #8
 800e406:	af00      	add	r7, sp, #0
 800e408:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0C; // HCI OCF = 0C
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	220c      	movs	r2, #12
 800e40e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2204      	movs	r2, #4
 800e416:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	2206      	movs	r2, #6
 800e41e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	7f1a      	ldrb	r2, [r3, #28]
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	7f5a      	ldrb	r2, [r3, #29]
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	7f9a      	ldrb	r2, [r3, #30]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	7fda      	ldrb	r2, [r3, #31]
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	3389      	adds	r3, #137	; 0x89
 800e466:	2209      	movs	r2, #9
 800e468:	4619      	mov	r1, r3
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f7ff fbe4 	bl	800dc38 <_ZN3BTD11HCI_CommandEPht>
}
 800e470:	bf00      	nop
 800e472:	3708      	adds	r7, #8
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}

0800e478 <_ZN3BTD31hci_io_capability_request_replyEv>:

void BTD::hci_io_capability_request_reply() {
 800e478:	b580      	push	{r7, lr}
 800e47a:	b082      	sub	sp, #8
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2B; // HCI OCF = 2B
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	222b      	movs	r2, #43	; 0x2b
 800e484:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2204      	movs	r2, #4
 800e48c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x09;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2209      	movs	r2, #9
 800e494:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	7f1a      	ldrb	r2, [r3, #28]
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	7f5a      	ldrb	r2, [r3, #29]
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	7f9a      	ldrb	r2, [r3, #30]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	7fda      	ldrb	r2, [r3, #31]
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x03; // NoInputNoOutput
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2203      	movs	r2, #3
 800e4dc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // OOB authentication data not present
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // MITM Protection Not Required – No Bonding. Numeric comparison with automatic accept allowed
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

        HCI_Command(hcibuf, 12);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	3389      	adds	r3, #137	; 0x89
 800e4f4:	220c      	movs	r2, #12
 800e4f6:	4619      	mov	r1, r3
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f7ff fb9d 	bl	800dc38 <_ZN3BTD11HCI_CommandEPht>
}
 800e4fe:	bf00      	nop
 800e500:	3708      	adds	r7, #8
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}

0800e506 <_ZN3BTD35hci_user_confirmation_request_replyEv>:

void BTD::hci_user_confirmation_request_reply() {
 800e506:	b580      	push	{r7, lr}
 800e508:	b082      	sub	sp, #8
 800e50a:	af00      	add	r7, sp, #0
 800e50c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2C; // HCI OCF = 2C
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	222c      	movs	r2, #44	; 0x2c
 800e512:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	2204      	movs	r2, #4
 800e51a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2206      	movs	r2, #6
 800e522:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	7f1a      	ldrb	r2, [r3, #28]
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	7f5a      	ldrb	r2, [r3, #29]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	7f9a      	ldrb	r2, [r3, #30]
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	7fda      	ldrb	r2, [r3, #31]
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	3389      	adds	r3, #137	; 0x89
 800e56a:	2209      	movs	r2, #9
 800e56c:	4619      	mov	r1, r3
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f7ff fb62 	bl	800dc38 <_ZN3BTD11HCI_CommandEPht>
}
 800e574:	bf00      	nop
 800e576:	3708      	adds	r7, #8
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}

0800e57c <_ZN3BTD26hci_authentication_requestEv>:

void BTD::hci_authentication_request() {
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b082      	sub	sp, #8
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x11; // HCI OCF = 11
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2211      	movs	r2, #17
 800e588:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2204      	movs	r2, #4
 800e590:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x02; // parameter length = 2
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2202      	movs	r2, #2
 800e598:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(hci_handle & 0xFF); //connection handle - low byte
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	8b5b      	ldrh	r3, [r3, #26]
 800e5a0:	b2da      	uxtb	r2, r3
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((hci_handle >> 8) & 0x0F); //connection handle - high byte
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	8b5b      	ldrh	r3, [r3, #26]
 800e5ac:	121b      	asrs	r3, r3, #8
 800e5ae:	b2db      	uxtb	r3, r3
 800e5b0:	f003 030f 	and.w	r3, r3, #15
 800e5b4:	b2da      	uxtb	r2, r3
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

        HCI_Command(hcibuf, 5);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	3389      	adds	r3, #137	; 0x89
 800e5c0:	2205      	movs	r2, #5
 800e5c2:	4619      	mov	r1, r3
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f7ff fb37 	bl	800dc38 <_ZN3BTD11HCI_CommandEPht>
}
 800e5ca:	bf00      	nop
 800e5cc:	3708      	adds	r7, #8
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}

0800e5d2 <_ZN3BTD14hci_disconnectEt>:

void BTD::hci_disconnect(uint16_t handle) { // This is called by the different services
 800e5d2:	b580      	push	{r7, lr}
 800e5d4:	b082      	sub	sp, #8
 800e5d6:	af00      	add	r7, sp, #0
 800e5d8:	6078      	str	r0, [r7, #4]
 800e5da:	460b      	mov	r3, r1
 800e5dc:	807b      	strh	r3, [r7, #2]
        hci_clear_flag(HCI_FLAG_DISCONNECT_COMPLETE);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e5e4:	f023 0304 	bic.w	r3, r3, #4
 800e5e8:	b29a      	uxth	r2, r3
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x06; // HCI OCF = 6
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2206      	movs	r2, #6
 800e5f4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2204      	movs	r2, #4
 800e5fc:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2203      	movs	r2, #3
 800e604:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(handle & 0xFF); //connection handle - low byte
 800e608:	887b      	ldrh	r3, [r7, #2]
 800e60a:	b2da      	uxtb	r2, r3
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((handle >> 8) & 0x0F); //connection handle - high byte
 800e612:	887b      	ldrh	r3, [r7, #2]
 800e614:	121b      	asrs	r3, r3, #8
 800e616:	b2db      	uxtb	r3, r3
 800e618:	f003 030f 	and.w	r3, r3, #15
 800e61c:	b2da      	uxtb	r2, r3
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x13; // reason
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2213      	movs	r2, #19
 800e628:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	3389      	adds	r3, #137	; 0x89
 800e630:	2206      	movs	r2, #6
 800e632:	4619      	mov	r1, r3
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	f7ff faff 	bl	800dc38 <_ZN3BTD11HCI_CommandEPht>
}
 800e63a:	bf00      	nop
 800e63c:	3708      	adds	r7, #8
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}

0800e642 <_ZN3BTD25hci_write_class_of_deviceEv>:

void BTD::hci_write_class_of_device() { // See http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800e642:	b580      	push	{r7, lr}
 800e644:	b082      	sub	sp, #8
 800e646:	af00      	add	r7, sp, #0
 800e648:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x24; // HCI OCF = 24
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2224      	movs	r2, #36	; 0x24
 800e64e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	220c      	movs	r2, #12
 800e656:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2203      	movs	r2, #3
 800e65e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x04; // Robot
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2204      	movs	r2, #4
 800e666:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x08; // Toy
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	2208      	movs	r2, #8
 800e66e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x00;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2200      	movs	r2, #0
 800e676:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	3389      	adds	r3, #137	; 0x89
 800e67e:	2206      	movs	r2, #6
 800e680:	4619      	mov	r1, r3
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f7ff fad8 	bl	800dc38 <_ZN3BTD11HCI_CommandEPht>
}
 800e688:	bf00      	nop
 800e68a:	3708      	adds	r7, #8
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}

0800e690 <_ZN3BTD13L2CAP_CommandEtPhhhh>:
 */
/************************************************************/
/*                    L2CAP Commands                        */

/************************************************************/
void BTD::L2CAP_Command(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh) {
 800e690:	b5b0      	push	{r4, r5, r7, lr}
 800e692:	b08a      	sub	sp, #40	; 0x28
 800e694:	af02      	add	r7, sp, #8
 800e696:	60f8      	str	r0, [r7, #12]
 800e698:	607a      	str	r2, [r7, #4]
 800e69a:	461a      	mov	r2, r3
 800e69c:	460b      	mov	r3, r1
 800e69e:	817b      	strh	r3, [r7, #10]
 800e6a0:	4613      	mov	r3, r2
 800e6a2:	727b      	strb	r3, [r7, #9]
                Notify(PSTR(" - Channel ID: "), 0x80);
                D_PrintHex<uint8_t > (channelHigh, 0x80);
                Notify(PSTR(" "), 0x80);
                D_PrintHex<uint8_t > (channelLow, 0x80);
#endif
        }
 800e6a4:	466b      	mov	r3, sp
 800e6a6:	461d      	mov	r5, r3
        uint8_t buf[8 + nbytes];
 800e6a8:	7a7b      	ldrb	r3, [r7, #9]
 800e6aa:	1ddc      	adds	r4, r3, #7
 800e6ac:	61bc      	str	r4, [r7, #24]
 800e6ae:	4623      	mov	r3, r4
 800e6b0:	3301      	adds	r3, #1
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f04f 0100 	mov.w	r1, #0
 800e6b8:	f04f 0200 	mov.w	r2, #0
 800e6bc:	f04f 0300 	mov.w	r3, #0
 800e6c0:	00cb      	lsls	r3, r1, #3
 800e6c2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800e6c6:	00c2      	lsls	r2, r0, #3
 800e6c8:	4623      	mov	r3, r4
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f04f 0100 	mov.w	r1, #0
 800e6d2:	f04f 0200 	mov.w	r2, #0
 800e6d6:	f04f 0300 	mov.w	r3, #0
 800e6da:	00cb      	lsls	r3, r1, #3
 800e6dc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800e6e0:	00c2      	lsls	r2, r0, #3
 800e6e2:	4623      	mov	r3, r4
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	3307      	adds	r3, #7
 800e6e8:	08db      	lsrs	r3, r3, #3
 800e6ea:	00db      	lsls	r3, r3, #3
 800e6ec:	ebad 0d03 	sub.w	sp, sp, r3
 800e6f0:	ab02      	add	r3, sp, #8
 800e6f2:	3300      	adds	r3, #0
 800e6f4:	617b      	str	r3, [r7, #20]
        buf[0] = (uint8_t)(handle & 0xff); // HCI handle with PB,BC flag
 800e6f6:	897b      	ldrh	r3, [r7, #10]
 800e6f8:	b2da      	uxtb	r2, r3
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	701a      	strb	r2, [r3, #0]
        buf[1] = (uint8_t)(((handle >> 8) & 0x0f) | 0x20);
 800e6fe:	897b      	ldrh	r3, [r7, #10]
 800e700:	121b      	asrs	r3, r3, #8
 800e702:	b25b      	sxtb	r3, r3
 800e704:	f003 030f 	and.w	r3, r3, #15
 800e708:	b25b      	sxtb	r3, r3
 800e70a:	f043 0320 	orr.w	r3, r3, #32
 800e70e:	b25b      	sxtb	r3, r3
 800e710:	b2da      	uxtb	r2, r3
 800e712:	697b      	ldr	r3, [r7, #20]
 800e714:	705a      	strb	r2, [r3, #1]
        buf[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
 800e716:	7a7b      	ldrb	r3, [r7, #9]
 800e718:	3304      	adds	r3, #4
 800e71a:	b2da      	uxtb	r2, r3
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	709a      	strb	r2, [r3, #2]
        buf[3] = (uint8_t)((4 + nbytes) >> 8);
 800e720:	7a7b      	ldrb	r3, [r7, #9]
 800e722:	3304      	adds	r3, #4
 800e724:	121b      	asrs	r3, r3, #8
 800e726:	b2da      	uxtb	r2, r3
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	70da      	strb	r2, [r3, #3]
        buf[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	7a7a      	ldrb	r2, [r7, #9]
 800e730:	711a      	strb	r2, [r3, #4]
        buf[5] = (uint8_t)(nbytes >> 8);
 800e732:	7a7b      	ldrb	r3, [r7, #9]
 800e734:	121b      	asrs	r3, r3, #8
 800e736:	b2da      	uxtb	r2, r3
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	715a      	strb	r2, [r3, #5]
        buf[6] = channelLow;
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800e742:	719a      	strb	r2, [r3, #6]
        buf[7] = channelHigh;
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800e74a:	71da      	strb	r2, [r3, #7]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800e74c:	2300      	movs	r3, #0
 800e74e:	83fb      	strh	r3, [r7, #30]
 800e750:	7a7b      	ldrb	r3, [r7, #9]
 800e752:	b29b      	uxth	r3, r3
 800e754:	8bfa      	ldrh	r2, [r7, #30]
 800e756:	429a      	cmp	r2, r3
 800e758:	d20b      	bcs.n	800e772 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xe2>
                buf[8 + i] = data[i];
 800e75a:	8bfb      	ldrh	r3, [r7, #30]
 800e75c:	687a      	ldr	r2, [r7, #4]
 800e75e:	441a      	add	r2, r3
 800e760:	8bfb      	ldrh	r3, [r7, #30]
 800e762:	3308      	adds	r3, #8
 800e764:	7811      	ldrb	r1, [r2, #0]
 800e766:	697a      	ldr	r2, [r7, #20]
 800e768:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800e76a:	8bfb      	ldrh	r3, [r7, #30]
 800e76c:	3301      	adds	r3, #1
 800e76e:	83fb      	strh	r3, [r7, #30]
 800e770:	e7ee      	b.n	800e750 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xc0>
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ BTD_DATAOUT_PIPE ].epAddr, (8 + nbytes), buf);
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800e782:	7a7b      	ldrb	r3, [r7, #9]
 800e784:	b29b      	uxth	r3, r3
 800e786:	3308      	adds	r3, #8
 800e788:	b29c      	uxth	r4, r3
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	9300      	str	r3, [sp, #0]
 800e78e:	4623      	mov	r3, r4
 800e790:	f002 fc34 	bl	8010ffc <_ZN3USB11outTransferEhhtPh>
 800e794:	4603      	mov	r3, r0
 800e796:	74fb      	strb	r3, [r7, #19]
        if(rcode) {
 800e798:	7cfb      	ldrb	r3, [r7, #19]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d002      	beq.n	800e7a4 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x114>
                delay(100); // This small delay prevents it from overflowing if it fails
 800e79e:	2064      	movs	r0, #100	; 0x64
 800e7a0:	f7f3 fb2e 	bl	8001e00 <HAL_Delay>
 800e7a4:	46ad      	mov	sp, r5
}
 800e7a6:	bf00      	nop
 800e7a8:	3720      	adds	r7, #32
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bdb0      	pop	{r4, r5, r7, pc}

0800e7ae <_ZN3BTD24l2cap_connection_requestEthPht>:

void BTD::l2cap_connection_request(uint16_t handle, uint8_t rxid, uint8_t* scid, uint16_t psm) {
 800e7ae:	b580      	push	{r7, lr}
 800e7b0:	b086      	sub	sp, #24
 800e7b2:	af02      	add	r7, sp, #8
 800e7b4:	60f8      	str	r0, [r7, #12]
 800e7b6:	607b      	str	r3, [r7, #4]
 800e7b8:	460b      	mov	r3, r1
 800e7ba:	817b      	strh	r3, [r7, #10]
 800e7bc:	4613      	mov	r3, r2
 800e7be:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_REQUEST; // Code
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	2202      	movs	r2, #2
 800e7c4:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	7a7a      	ldrb	r2, [r7, #9]
 800e7cc:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	2204      	movs	r2, #4
 800e7d4:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	2200      	movs	r2, #0
 800e7dc:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = (uint8_t)(psm & 0xff); // PSM
 800e7e0:	8b3b      	ldrh	r3, [r7, #24]
 800e7e2:	b2da      	uxtb	r2, r3
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = (uint8_t)(psm >> 8);
 800e7ea:	8b3b      	ldrh	r3, [r7, #24]
 800e7ec:	121b      	asrs	r3, r3, #8
 800e7ee:	b2da      	uxtb	r2, r3
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	781a      	ldrb	r2, [r3, #0]
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	785a      	ldrb	r2, [r3, #1]
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	f203 1209 	addw	r2, r3, #265	; 0x109
 800e810:	8979      	ldrh	r1, [r7, #10]
 800e812:	2300      	movs	r3, #0
 800e814:	9301      	str	r3, [sp, #4]
 800e816:	2301      	movs	r3, #1
 800e818:	9300      	str	r3, [sp, #0]
 800e81a:	2308      	movs	r3, #8
 800e81c:	68f8      	ldr	r0, [r7, #12]
 800e81e:	f7ff ff37 	bl	800e690 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e822:	bf00      	nop
 800e824:	3710      	adds	r7, #16
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}

0800e82a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>:

void BTD::l2cap_connection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid, uint8_t result) {
 800e82a:	b580      	push	{r7, lr}
 800e82c:	b086      	sub	sp, #24
 800e82e:	af02      	add	r7, sp, #8
 800e830:	60f8      	str	r0, [r7, #12]
 800e832:	607b      	str	r3, [r7, #4]
 800e834:	460b      	mov	r3, r1
 800e836:	817b      	strh	r3, [r7, #10]
 800e838:	4613      	mov	r3, r2
 800e83a:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_RESPONSE; // Code
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	2203      	movs	r2, #3
 800e840:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	7a7a      	ldrb	r2, [r7, #9]
 800e848:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	2208      	movs	r2, #8
 800e850:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	2200      	movs	r2, #0
 800e858:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	781a      	ldrb	r2, [r3, #0]
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	785a      	ldrb	r2, [r3, #1]
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800e870:	69bb      	ldr	r3, [r7, #24]
 800e872:	781a      	ldrb	r2, [r3, #0]
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800e87a:	69bb      	ldr	r3, [r7, #24]
 800e87c:	785a      	ldrb	r2, [r3, #1]
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = result; // Result: Pending or Success
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	7f3a      	ldrb	r2, [r7, #28]
 800e888:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	2200      	movs	r2, #0
 800e890:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00; // No further information
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	2200      	movs	r2, #0
 800e898:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	f203 1209 	addw	r2, r3, #265	; 0x109
 800e8aa:	8979      	ldrh	r1, [r7, #10]
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	9301      	str	r3, [sp, #4]
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	9300      	str	r3, [sp, #0]
 800e8b4:	230c      	movs	r3, #12
 800e8b6:	68f8      	ldr	r0, [r7, #12]
 800e8b8:	f7ff feea 	bl	800e690 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e8bc:	bf00      	nop
 800e8be:	3710      	adds	r7, #16
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}

0800e8c4 <_ZN3BTD20l2cap_config_requestEthPh>:

void BTD::l2cap_config_request(uint16_t handle, uint8_t rxid, uint8_t* dcid) {
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b086      	sub	sp, #24
 800e8c8:	af02      	add	r7, sp, #8
 800e8ca:	60f8      	str	r0, [r7, #12]
 800e8cc:	607b      	str	r3, [r7, #4]
 800e8ce:	460b      	mov	r3, r1
 800e8d0:	817b      	strh	r3, [r7, #10]
 800e8d2:	4613      	mov	r3, r2
 800e8d4:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_REQUEST; // Code
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	2204      	movs	r2, #4
 800e8da:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	7a7a      	ldrb	r2, [r7, #9]
 800e8e2:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2208      	movs	r2, #8
 800e8ea:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	781a      	ldrb	r2, [r3, #0]
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	785a      	ldrb	r2, [r3, #1]
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flags
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	2200      	movs	r2, #0
 800e90e:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	2200      	movs	r2, #0
 800e916:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x01; // Config Opt: type = MTU (Maximum Transmission Unit) - Hint
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	2201      	movs	r2, #1
 800e91e:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x02; // Config Opt: length
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	2202      	movs	r2, #2
 800e926:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0xFF; // MTU
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	22ff      	movs	r2, #255	; 0xff
 800e92e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0xFF;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	22ff      	movs	r2, #255	; 0xff
 800e936:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	f203 1209 	addw	r2, r3, #265	; 0x109
 800e940:	8979      	ldrh	r1, [r7, #10]
 800e942:	2300      	movs	r3, #0
 800e944:	9301      	str	r3, [sp, #4]
 800e946:	2301      	movs	r3, #1
 800e948:	9300      	str	r3, [sp, #0]
 800e94a:	230c      	movs	r3, #12
 800e94c:	68f8      	ldr	r0, [r7, #12]
 800e94e:	f7ff fe9f 	bl	800e690 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e952:	bf00      	nop
 800e954:	3710      	adds	r7, #16
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}

0800e95a <_ZN3BTD21l2cap_config_responseEthPh>:

void BTD::l2cap_config_response(uint16_t handle, uint8_t rxid, uint8_t* scid) {
 800e95a:	b580      	push	{r7, lr}
 800e95c:	b086      	sub	sp, #24
 800e95e:	af02      	add	r7, sp, #8
 800e960:	60f8      	str	r0, [r7, #12]
 800e962:	607b      	str	r3, [r7, #4]
 800e964:	460b      	mov	r3, r1
 800e966:	817b      	strh	r3, [r7, #10]
 800e968:	4613      	mov	r3, r2
 800e96a:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_RESPONSE; // Code
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	2205      	movs	r2, #5
 800e970:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	7a7a      	ldrb	r2, [r7, #9]
 800e978:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x0A; // Length
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	220a      	movs	r2, #10
 800e980:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2200      	movs	r2, #0
 800e988:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = scid[0]; // Source CID
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	781a      	ldrb	r2, [r3, #0]
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = scid[1];
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	785a      	ldrb	r2, [r3, #1]
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flag
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00; // Result
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x01; // Config
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2201      	movs	r2, #1
 800e9c4:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x02;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	2202      	movs	r2, #2
 800e9cc:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
        l2capoutbuf[12] = 0xA0;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	22a0      	movs	r2, #160	; 0xa0
 800e9d4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
        l2capoutbuf[13] = 0x02;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	2202      	movs	r2, #2
 800e9dc:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

        L2CAP_Command(handle, l2capoutbuf, 14);
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	f203 1209 	addw	r2, r3, #265	; 0x109
 800e9e6:	8979      	ldrh	r1, [r7, #10]
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	9301      	str	r3, [sp, #4]
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	9300      	str	r3, [sp, #0]
 800e9f0:	230e      	movs	r3, #14
 800e9f2:	68f8      	ldr	r0, [r7, #12]
 800e9f4:	f7ff fe4c 	bl	800e690 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e9f8:	bf00      	nop
 800e9fa:	3710      	adds	r7, #16
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}

0800ea00 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>:

void BTD::l2cap_disconnection_request(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b086      	sub	sp, #24
 800ea04:	af02      	add	r7, sp, #8
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	607b      	str	r3, [r7, #4]
 800ea0a:	460b      	mov	r3, r1
 800ea0c:	817b      	strh	r3, [r7, #10]
 800ea0e:	4613      	mov	r3, r2
 800ea10:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_REQUEST; // Code
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	2206      	movs	r2, #6
 800ea16:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	7a7a      	ldrb	r2, [r7, #9]
 800ea1e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	2204      	movs	r2, #4
 800ea26:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	781a      	ldrb	r2, [r3, #0]
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	785a      	ldrb	r2, [r3, #1]
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800ea46:	69bb      	ldr	r3, [r7, #24]
 800ea48:	781a      	ldrb	r2, [r3, #0]
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800ea50:	69bb      	ldr	r3, [r7, #24]
 800ea52:	785a      	ldrb	r2, [r3, #1]
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	f203 1209 	addw	r2, r3, #265	; 0x109
 800ea60:	8979      	ldrh	r1, [r7, #10]
 800ea62:	2300      	movs	r3, #0
 800ea64:	9301      	str	r3, [sp, #4]
 800ea66:	2301      	movs	r3, #1
 800ea68:	9300      	str	r3, [sp, #0]
 800ea6a:	2308      	movs	r3, #8
 800ea6c:	68f8      	ldr	r0, [r7, #12]
 800ea6e:	f7ff fe0f 	bl	800e690 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800ea72:	bf00      	nop
 800ea74:	3710      	adds	r7, #16
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}

0800ea7a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>:

void BTD::l2cap_disconnection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800ea7a:	b580      	push	{r7, lr}
 800ea7c:	b086      	sub	sp, #24
 800ea7e:	af02      	add	r7, sp, #8
 800ea80:	60f8      	str	r0, [r7, #12]
 800ea82:	607b      	str	r3, [r7, #4]
 800ea84:	460b      	mov	r3, r1
 800ea86:	817b      	strh	r3, [r7, #10]
 800ea88:	4613      	mov	r3, r2
 800ea8a:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_RESPONSE; // Code
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	2207      	movs	r2, #7
 800ea90:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	7a7a      	ldrb	r2, [r7, #9]
 800ea98:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	2204      	movs	r2, #4
 800eaa0:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	781a      	ldrb	r2, [r3, #0]
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	785a      	ldrb	r2, [r3, #1]
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800eac0:	69bb      	ldr	r3, [r7, #24]
 800eac2:	781a      	ldrb	r2, [r3, #0]
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800eaca:	69bb      	ldr	r3, [r7, #24]
 800eacc:	785a      	ldrb	r2, [r3, #1]
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	f203 1209 	addw	r2, r3, #265	; 0x109
 800eada:	8979      	ldrh	r1, [r7, #10]
 800eadc:	2300      	movs	r3, #0
 800eade:	9301      	str	r3, [sp, #4]
 800eae0:	2301      	movs	r3, #1
 800eae2:	9300      	str	r3, [sp, #0]
 800eae4:	2308      	movs	r3, #8
 800eae6:	68f8      	ldr	r0, [r7, #12]
 800eae8:	f7ff fdd2 	bl	800e690 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800eaec:	bf00      	nop
 800eaee:	3710      	adds	r7, #16
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}

0800eaf4 <_ZN3BTD26l2cap_information_responseEthhh>:

void BTD::l2cap_information_response(uint16_t handle, uint8_t rxid, uint8_t infoTypeLow, uint8_t infoTypeHigh) {
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b084      	sub	sp, #16
 800eaf8:	af02      	add	r7, sp, #8
 800eafa:	6078      	str	r0, [r7, #4]
 800eafc:	4608      	mov	r0, r1
 800eafe:	4611      	mov	r1, r2
 800eb00:	461a      	mov	r2, r3
 800eb02:	4603      	mov	r3, r0
 800eb04:	807b      	strh	r3, [r7, #2]
 800eb06:	460b      	mov	r3, r1
 800eb08:	707b      	strb	r3, [r7, #1]
 800eb0a:	4613      	mov	r3, r2
 800eb0c:	703b      	strb	r3, [r7, #0]
        l2capoutbuf[0] = L2CAP_CMD_INFORMATION_RESPONSE; // Code
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	220b      	movs	r2, #11
 800eb12:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	787a      	ldrb	r2, [r7, #1]
 800eb1a:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2208      	movs	r2, #8
 800eb22:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = infoTypeLow;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	783a      	ldrb	r2, [r7, #0]
 800eb32:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = infoTypeHigh;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	7c3a      	ldrb	r2, [r7, #16]
 800eb3a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Result = success
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2200      	movs	r2, #0
 800eb42:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00; // Result = success
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2200      	movs	r2, #0
 800eb4a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2200      	movs	r2, #0
 800eb52:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2200      	movs	r2, #0
 800eb62:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2200      	movs	r2, #0
 800eb6a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f203 1209 	addw	r2, r3, #265	; 0x109
 800eb74:	8879      	ldrh	r1, [r7, #2]
 800eb76:	2300      	movs	r3, #0
 800eb78:	9301      	str	r3, [sp, #4]
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	9300      	str	r3, [sp, #0]
 800eb7e:	230c      	movs	r3, #12
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f7ff fd85 	bl	800e690 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800eb86:	bf00      	nop
 800eb88:	3708      	adds	r7, #8
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}

0800eb8e <_ZN3BTD9setBdaddrEPh>:

/* PS3 Commands - only set Bluetooth address is implemented in this library */
void BTD::setBdaddr(uint8_t* bdaddr) {
 800eb8e:	b580      	push	{r7, lr}
 800eb90:	b08e      	sub	sp, #56	; 0x38
 800eb92:	af08      	add	r7, sp, #32
 800eb94:	6078      	str	r0, [r7, #4]
 800eb96:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[8];
        buf[0] = 0x01;
 800eb98:	2301      	movs	r3, #1
 800eb9a:	733b      	strb	r3, [r7, #12]
        buf[1] = 0x00;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	737b      	strb	r3, [r7, #13]

        for(uint8_t i = 0; i < 6; i++)
 800eba0:	2300      	movs	r3, #0
 800eba2:	75fb      	strb	r3, [r7, #23]
 800eba4:	7dfb      	ldrb	r3, [r7, #23]
 800eba6:	2b05      	cmp	r3, #5
 800eba8:	d811      	bhi.n	800ebce <_ZN3BTD9setBdaddrEPh+0x40>
                buf[i + 2] = bdaddr[5 - i]; // Copy into buffer, has to be written reversed, so it is MSB first
 800ebaa:	7dfb      	ldrb	r3, [r7, #23]
 800ebac:	f1c3 0305 	rsb	r3, r3, #5
 800ebb0:	461a      	mov	r2, r3
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	441a      	add	r2, r3
 800ebb6:	7dfb      	ldrb	r3, [r7, #23]
 800ebb8:	3302      	adds	r3, #2
 800ebba:	7812      	ldrb	r2, [r2, #0]
 800ebbc:	f107 0118 	add.w	r1, r7, #24
 800ebc0:	440b      	add	r3, r1
 800ebc2:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800ebc6:	7dfb      	ldrb	r3, [r7, #23]
 800ebc8:	3301      	adds	r3, #1
 800ebca:	75fb      	strb	r3, [r7, #23]
 800ebcc:	e7ea      	b.n	800eba4 <_ZN3BTD9setBdaddrEPh+0x16>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0xF5, 0x03, 0x00, 8, 8, buf, NULL);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ebde:	2300      	movs	r3, #0
 800ebe0:	9307      	str	r3, [sp, #28]
 800ebe2:	f107 030c 	add.w	r3, r7, #12
 800ebe6:	9306      	str	r3, [sp, #24]
 800ebe8:	2308      	movs	r3, #8
 800ebea:	9305      	str	r3, [sp, #20]
 800ebec:	2308      	movs	r3, #8
 800ebee:	9304      	str	r3, [sp, #16]
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	9303      	str	r3, [sp, #12]
 800ebf4:	2303      	movs	r3, #3
 800ebf6:	9302      	str	r3, [sp, #8]
 800ebf8:	23f5      	movs	r3, #245	; 0xf5
 800ebfa:	9301      	str	r3, [sp, #4]
 800ebfc:	2309      	movs	r3, #9
 800ebfe:	9300      	str	r3, [sp, #0]
 800ec00:	2321      	movs	r3, #33	; 0x21
 800ec02:	f002 f81c 	bl	8010c3e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800ec06:	bf00      	nop
 800ec08:	3718      	adds	r7, #24
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}

0800ec0e <_ZN3BTD13setMoveBdaddrEPh>:

void BTD::setMoveBdaddr(uint8_t* bdaddr) {
 800ec0e:	b580      	push	{r7, lr}
 800ec10:	b08e      	sub	sp, #56	; 0x38
 800ec12:	af08      	add	r7, sp, #32
 800ec14:	6078      	str	r0, [r7, #4]
 800ec16:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[11];
        buf[0] = 0x05;
 800ec18:	2305      	movs	r3, #5
 800ec1a:	733b      	strb	r3, [r7, #12]
        buf[7] = 0x10;
 800ec1c:	2310      	movs	r3, #16
 800ec1e:	74fb      	strb	r3, [r7, #19]
        buf[8] = 0x01;
 800ec20:	2301      	movs	r3, #1
 800ec22:	753b      	strb	r3, [r7, #20]
        buf[9] = 0x02;
 800ec24:	2302      	movs	r3, #2
 800ec26:	757b      	strb	r3, [r7, #21]
        buf[10] = 0x12;
 800ec28:	2312      	movs	r3, #18
 800ec2a:	75bb      	strb	r3, [r7, #22]

        for(uint8_t i = 0; i < 6; i++)
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	75fb      	strb	r3, [r7, #23]
 800ec30:	7dfb      	ldrb	r3, [r7, #23]
 800ec32:	2b05      	cmp	r3, #5
 800ec34:	d80e      	bhi.n	800ec54 <_ZN3BTD13setMoveBdaddrEPh+0x46>
                buf[i + 1] = bdaddr[i];
 800ec36:	7dfb      	ldrb	r3, [r7, #23]
 800ec38:	683a      	ldr	r2, [r7, #0]
 800ec3a:	441a      	add	r2, r3
 800ec3c:	7dfb      	ldrb	r3, [r7, #23]
 800ec3e:	3301      	adds	r3, #1
 800ec40:	7812      	ldrb	r2, [r2, #0]
 800ec42:	f107 0118 	add.w	r1, r7, #24
 800ec46:	440b      	add	r3, r1
 800ec48:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800ec4c:	7dfb      	ldrb	r3, [r7, #23]
 800ec4e:	3301      	adds	r3, #1
 800ec50:	75fb      	strb	r3, [r7, #23]
 800ec52:	e7ed      	b.n	800ec30 <_ZN3BTD13setMoveBdaddrEPh+0x22>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0x05), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0x05, 0x03, 0x00, 11, 11, buf, NULL);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ec64:	2300      	movs	r3, #0
 800ec66:	9307      	str	r3, [sp, #28]
 800ec68:	f107 030c 	add.w	r3, r7, #12
 800ec6c:	9306      	str	r3, [sp, #24]
 800ec6e:	230b      	movs	r3, #11
 800ec70:	9305      	str	r3, [sp, #20]
 800ec72:	230b      	movs	r3, #11
 800ec74:	9304      	str	r3, [sp, #16]
 800ec76:	2300      	movs	r3, #0
 800ec78:	9303      	str	r3, [sp, #12]
 800ec7a:	2303      	movs	r3, #3
 800ec7c:	9302      	str	r3, [sp, #8]
 800ec7e:	2305      	movs	r3, #5
 800ec80:	9301      	str	r3, [sp, #4]
 800ec82:	2309      	movs	r3, #9
 800ec84:	9300      	str	r3, [sp, #0]
 800ec86:	2321      	movs	r3, #33	; 0x21
 800ec88:	f001 ffd9 	bl	8010c3e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800ec8c:	bf00      	nop
 800ec8e:	3718      	adds	r7, #24
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <_ZN13USBReadParserC1Ev>:
class USBReadParser {
 800ec94:	b480      	push	{r7}
 800ec96:	b083      	sub	sp, #12
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	4a04      	ldr	r2, [pc, #16]	; (800ecb0 <_ZN13USBReadParserC1Ev+0x1c>)
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	601a      	str	r2, [r3, #0]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	4618      	mov	r0, r3
 800eca6:	370c      	adds	r7, #12
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecae:	4770      	bx	lr
 800ecb0:	08012854 	.word	0x08012854

0800ecb4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b082      	sub	sp, #8
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	6039      	str	r1, [r7, #0]
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f7ff ffe7 	bl	800ec94 <_ZN13USBReadParserC1Ev>
 800ecc6:	4a21      	ldr	r2, [pc, #132]	; (800ed4c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	601a      	str	r2, [r3, #0]
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	683a      	ldr	r2, [r7, #0]
 800ecd0:	605a      	str	r2, [r3, #4]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	3308      	adds	r3, #8
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f7fd fb65 	bl	800c3a6 <_ZN16MultiValueBufferC1Ev>
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	3310      	adds	r3, #16
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7fd fb77 	bl	800c3d4 <_ZN20MultiByteValueParserC1Ev>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	3318      	adds	r3, #24
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7fd fb9e 	bl	800c42c <_ZN11ByteSkipperC1Ev>
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2200      	movs	r2, #0
 800ed04:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f103 0220 	add.w	r2, r3, #32
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f103 0210 	add.w	r2, r3, #16
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	3308      	adds	r3, #8
 800ed26:	4619      	mov	r1, r3
 800ed28:	4610      	mov	r0, r2
 800ed2a:	f7fd fb67 	bl	800c3fc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f103 0218 	add.w	r2, r3, #24
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	3308      	adds	r3, #8
 800ed38:	4619      	mov	r1, r3
 800ed3a:	4610      	mov	r0, r2
 800ed3c:	f7fd fb8a 	bl	800c454 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	4618      	mov	r0, r3
 800ed44:	3708      	adds	r7, #8
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}
 800ed4a:	bf00      	nop
 800ed4c:	080127fc 	.word	0x080127fc

0800ed50 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b082      	sub	sp, #8
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	6039      	str	r1, [r7, #0]
UseOr(false) {
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f7ff ff99 	bl	800ec94 <_ZN13USBReadParserC1Ev>
 800ed62:	4a21      	ldr	r2, [pc, #132]	; (800ede8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	601a      	str	r2, [r3, #0]
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	683a      	ldr	r2, [r7, #0]
 800ed6c:	605a      	str	r2, [r3, #4]
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	3308      	adds	r3, #8
 800ed72:	4618      	mov	r0, r3
 800ed74:	f7fd fb17 	bl	800c3a6 <_ZN16MultiValueBufferC1Ev>
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	3310      	adds	r3, #16
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f7fd fb29 	bl	800c3d4 <_ZN20MultiByteValueParserC1Ev>
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	3318      	adds	r3, #24
 800ed86:	4618      	mov	r0, r3
 800ed88:	f7fd fb50 	bl	800c42c <_ZN11ByteSkipperC1Ev>
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2200      	movs	r2, #0
 800ed90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2200      	movs	r2, #0
 800ed98:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2200      	movs	r2, #0
 800eda8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	f103 0220 	add.w	r2, r3, #32
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f103 0210 	add.w	r2, r3, #16
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	3308      	adds	r3, #8
 800edc2:	4619      	mov	r1, r3
 800edc4:	4610      	mov	r0, r2
 800edc6:	f7fd fb19 	bl	800c3fc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	f103 0218 	add.w	r2, r3, #24
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	3308      	adds	r3, #8
 800edd4:	4619      	mov	r1, r3
 800edd6:	4610      	mov	r0, r2
 800edd8:	f7fd fb3c 	bl	800c454 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	4618      	mov	r0, r3
 800ede0:	3708      	adds	r7, #8
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}
 800ede6:	bf00      	nop
 800ede8:	080127f0 	.word	0x080127f0

0800edec <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800edec:	b580      	push	{r7, lr}
 800edee:	b086      	sub	sp, #24
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	60f8      	str	r0, [r7, #12]
 800edf4:	607a      	str	r2, [r7, #4]
 800edf6:	603b      	str	r3, [r7, #0]
 800edf8:	460b      	mov	r3, r1
 800edfa:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800edfc:	897b      	ldrh	r3, [r7, #10]
 800edfe:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	613b      	str	r3, [r7, #16]

        while(cntdn)
 800ee04:	8afb      	ldrh	r3, [r7, #22]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d00f      	beq.n	800ee2a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800ee0a:	f107 0216 	add.w	r2, r7, #22
 800ee0e:	f107 0310 	add.w	r3, r7, #16
 800ee12:	4619      	mov	r1, r3
 800ee14:	68f8      	ldr	r0, [r7, #12]
 800ee16:	f000 f82d 	bl	800ee74 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	f083 0301 	eor.w	r3, r3, #1
 800ee20:	b2db      	uxtb	r3, r3
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d100      	bne.n	800ee28 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800ee26:	e7ed      	b.n	800ee04 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800ee28:	bf00      	nop
}
 800ee2a:	3718      	adds	r7, #24
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd80      	pop	{r7, pc}

0800ee30 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt>:
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b086      	sub	sp, #24
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	60f8      	str	r0, [r7, #12]
 800ee38:	607a      	str	r2, [r7, #4]
 800ee3a:	603b      	str	r3, [r7, #0]
 800ee3c:	460b      	mov	r3, r1
 800ee3e:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800ee40:	897b      	ldrh	r3, [r7, #10]
 800ee42:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	613b      	str	r3, [r7, #16]
        while(cntdn)
 800ee48:	8afb      	ldrh	r3, [r7, #22]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d00f      	beq.n	800ee6e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800ee4e:	f107 0216 	add.w	r2, r7, #22
 800ee52:	f107 0310 	add.w	r3, r7, #16
 800ee56:	4619      	mov	r1, r3
 800ee58:	68f8      	ldr	r0, [r7, #12]
 800ee5a:	f000 f981 	bl	800f160 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	f083 0301 	eor.w	r3, r3, #1
 800ee64:	b2db      	uxtb	r3, r3
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d100      	bne.n	800ee6c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800ee6a:	e7ed      	b.n	800ee48 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800ee6c:	bf00      	nop
}
 800ee6e:	3718      	adds	r7, #24
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}

0800ee74 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800ee74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee76:	b089      	sub	sp, #36	; 0x24
 800ee78:	af02      	add	r7, sp, #8
 800ee7a:	60f8      	str	r0, [r7, #12]
 800ee7c:	60b9      	str	r1, [r7, #8]
 800ee7e:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	3320      	adds	r3, #32
 800ee84:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	3320      	adds	r3, #32
 800ee8a:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ee92:	2b04      	cmp	r3, #4
 800ee94:	f200 815e 	bhi.w	800f154 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800ee98:	a201      	add	r2, pc, #4	; (adr r2, 800eea0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800ee9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee9e:	bf00      	nop
 800eea0:	0800eeb5 	.word	0x0800eeb5
 800eea4:	0800eed5 	.word	0x0800eed5
 800eea8:	0800ef17 	.word	0x0800ef17
 800eeac:	0800ef2b 	.word	0x0800ef2b
 800eeb0:	0800efef 	.word	0x0800efef
                case 0:
                        theBuffer.valueSize = 2;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	2202      	movs	r2, #2
 800eeb8:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	f103 0210 	add.w	r2, r3, #16
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	3308      	adds	r3, #8
 800eec4:	4619      	mov	r1, r3
 800eec6:	4610      	mov	r0, r2
 800eec8:	f7fd fa98 	bl	800c3fc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	2201      	movs	r2, #1
 800eed0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	3310      	adds	r3, #16
 800eed8:	687a      	ldr	r2, [r7, #4]
 800eeda:	68b9      	ldr	r1, [r7, #8]
 800eedc:	4618      	mov	r0, r3
 800eede:	f003 fa49 	bl	8012374 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800eee2:	4603      	mov	r3, r0
 800eee4:	f083 0301 	eor.w	r3, r3, #1
 800eee8:	b2db      	uxtb	r3, r3
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d001      	beq.n	800eef2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800eeee:	2300      	movs	r3, #0
 800eef0:	e131      	b.n	800f156 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800eef8:	781a      	ldrb	r2, [r3, #0]
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800ef06:	785a      	ldrb	r2, [r3, #1]
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	2202      	movs	r2, #2
 800ef12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	3320      	adds	r3, #32
 800ef1a:	1c9a      	adds	r2, r3, #2
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	2203      	movs	r2, #3
 800ef26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 3:
                        switch(dscrType) {
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ef30:	3b02      	subs	r3, #2
 800ef32:	2b1f      	cmp	r3, #31
 800ef34:	d847      	bhi.n	800efc6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800ef36:	a201      	add	r2, pc, #4	; (adr r2, 800ef3c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800ef38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef3c:	0800efc7 	.word	0x0800efc7
 800ef40:	0800efc7 	.word	0x0800efc7
 800ef44:	0800efbd 	.word	0x0800efbd
 800ef48:	0800efc7 	.word	0x0800efc7
 800ef4c:	0800efc7 	.word	0x0800efc7
 800ef50:	0800efc7 	.word	0x0800efc7
 800ef54:	0800efc7 	.word	0x0800efc7
 800ef58:	0800efc7 	.word	0x0800efc7
 800ef5c:	0800efc7 	.word	0x0800efc7
 800ef60:	0800efc7 	.word	0x0800efc7
 800ef64:	0800efc7 	.word	0x0800efc7
 800ef68:	0800efc7 	.word	0x0800efc7
 800ef6c:	0800efc7 	.word	0x0800efc7
 800ef70:	0800efc7 	.word	0x0800efc7
 800ef74:	0800efc7 	.word	0x0800efc7
 800ef78:	0800efc7 	.word	0x0800efc7
 800ef7c:	0800efc7 	.word	0x0800efc7
 800ef80:	0800efc7 	.word	0x0800efc7
 800ef84:	0800efc7 	.word	0x0800efc7
 800ef88:	0800efc7 	.word	0x0800efc7
 800ef8c:	0800efc7 	.word	0x0800efc7
 800ef90:	0800efc7 	.word	0x0800efc7
 800ef94:	0800efc7 	.word	0x0800efc7
 800ef98:	0800efc7 	.word	0x0800efc7
 800ef9c:	0800efc7 	.word	0x0800efc7
 800efa0:	0800efc7 	.word	0x0800efc7
 800efa4:	0800efc7 	.word	0x0800efc7
 800efa8:	0800efc7 	.word	0x0800efc7
 800efac:	0800efc7 	.word	0x0800efc7
 800efb0:	0800efc7 	.word	0x0800efc7
 800efb4:	0800efc7 	.word	0x0800efc7
 800efb8:	0800efc7 	.word	0x0800efc7
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	2200      	movs	r2, #0
 800efc0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800efc4:	bf00      	nop
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
                        }
                        theBuffer.valueSize = dscrLen - 2;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800efcc:	3b02      	subs	r3, #2
 800efce:	b2da      	uxtb	r2, r3
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	f103 0210 	add.w	r2, r3, #16
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	3308      	adds	r3, #8
 800efde:	4619      	mov	r1, r3
 800efe0:	4610      	mov	r0, r2
 800efe2:	f7fd fa0b 	bl	800c3fc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	2204      	movs	r2, #4
 800efea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 4:
                        switch(dscrType) {
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800eff4:	2b05      	cmp	r3, #5
 800eff6:	d055      	beq.n	800f0a4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800eff8:	2b05      	cmp	r3, #5
 800effa:	f300 8085 	bgt.w	800f108 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800effe:	2b02      	cmp	r3, #2
 800f000:	d002      	beq.n	800f008 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800f002:	2b04      	cmp	r3, #4
 800f004:	d015      	beq.n	800f032 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800f006:	e07f      	b.n	800f108 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	3310      	adds	r3, #16
 800f00c:	687a      	ldr	r2, [r7, #4]
 800f00e:	68b9      	ldr	r1, [r7, #8]
 800f010:	4618      	mov	r0, r3
 800f012:	f003 f9af 	bl	8012374 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f016:	4603      	mov	r3, r0
 800f018:	f083 0301 	eor.w	r3, r3, #1
 800f01c:	b2db      	uxtb	r3, r3
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d001      	beq.n	800f026 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800f022:	2300      	movs	r3, #0
 800f024:	e097      	b.n	800f156 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	795a      	ldrb	r2, [r3, #5]
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800f030:	e086      	b.n	800f140 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	3310      	adds	r3, #16
 800f036:	687a      	ldr	r2, [r7, #4]
 800f038:	68b9      	ldr	r1, [r7, #8]
 800f03a:	4618      	mov	r0, r3
 800f03c:	f003 f99a 	bl	8012374 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f040:	4603      	mov	r3, r0
 800f042:	f083 0301 	eor.w	r3, r3, #1
 800f046:	b2db      	uxtb	r3, r3
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d001      	beq.n	800f050 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800f04c:	2300      	movs	r3, #0
 800f04e:	e082      	b.n	800f156 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800f050:	693b      	ldr	r3, [r7, #16]
 800f052:	795b      	ldrb	r3, [r3, #5]
 800f054:	2be0      	cmp	r3, #224	; 0xe0
 800f056:	d16c      	bne.n	800f132 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800f058:	693b      	ldr	r3, [r7, #16]
 800f05a:	799b      	ldrb	r3, [r3, #6]
 800f05c:	2b01      	cmp	r3, #1
 800f05e:	d16a      	bne.n	800f136 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                                break;
                                        if(UseOr) {
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f066:	2b00      	cmp	r3, #0
 800f068:	d004      	beq.n	800f074 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800f06a:	693b      	ldr	r3, [r7, #16]
 800f06c:	79db      	ldrb	r3, [r3, #7]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d104      	bne.n	800f07c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800f072:	e065      	b.n	800f140 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800f074:	693b      	ldr	r3, [r7, #16]
 800f076:	79db      	ldrb	r3, [r3, #7]
 800f078:	2b01      	cmp	r3, #1
 800f07a:	d15e      	bne.n	800f13a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                                        break;
                                        }
                                        isGoodInterface = true;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	2201      	movs	r2, #1
 800f080:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	789a      	ldrb	r2, [r3, #2]
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800f08e:	693b      	ldr	r3, [r7, #16]
 800f090:	78da      	ldrb	r2, [r3, #3]
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800f098:	693b      	ldr	r3, [r7, #16]
 800f09a:	79da      	ldrb	r2, [r3, #7]
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800f0a2:	e04d      	b.n	800f140 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	3310      	adds	r3, #16
 800f0a8:	687a      	ldr	r2, [r7, #4]
 800f0aa:	68b9      	ldr	r1, [r7, #8]
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f003 f961 	bl	8012374 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	f083 0301 	eor.w	r3, r3, #1
 800f0b8:	b2db      	uxtb	r3, r3
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d001      	beq.n	800f0c2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	e049      	b.n	800f156 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d038      	beq.n	800f13e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	685b      	ldr	r3, [r3, #4]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d034      	beq.n	800f13e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	6858      	ldr	r0, [r3, #4]
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	685b      	ldr	r3, [r3, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	681c      	ldr	r4, [r3, #0]
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f0f8:	68fa      	ldr	r2, [r7, #12]
 800f0fa:	3220      	adds	r2, #32
 800f0fc:	9201      	str	r2, [sp, #4]
 800f0fe:	9300      	str	r3, [sp, #0]
 800f100:	4633      	mov	r3, r6
 800f102:	462a      	mov	r2, r5
 800f104:	47a0      	blx	r4
                                        break;
 800f106:	e01a      	b.n	800f13e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	f103 0018 	add.w	r0, r3, #24
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f114:	b29b      	uxth	r3, r3
 800f116:	3b02      	subs	r3, #2
 800f118:	b29b      	uxth	r3, r3
 800f11a:	687a      	ldr	r2, [r7, #4]
 800f11c:	68b9      	ldr	r1, [r7, #8]
 800f11e:	f7fd f9ac 	bl	800c47a <_ZN11ByteSkipper4SkipEPPhPtt>
 800f122:	4603      	mov	r3, r0
 800f124:	f083 0301 	eor.w	r3, r3, #1
 800f128:	b2db      	uxtb	r3, r3
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d008      	beq.n	800f140 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800f12e:	2300      	movs	r3, #0
 800f130:	e011      	b.n	800f156 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800f132:	bf00      	nop
 800f134:	e004      	b.n	800f140 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800f136:	bf00      	nop
 800f138:	e002      	b.n	800f140 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800f13a:	bf00      	nop
 800f13c:	e000      	b.n	800f140 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800f13e:	bf00      	nop
                        }
                        theBuffer.pValue = varBuffer;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	f103 0220 	add.w	r2, r3, #32
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	2200      	movs	r2, #0
 800f150:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
        return true;
 800f154:	2301      	movs	r3, #1
}
 800f156:	4618      	mov	r0, r3
 800f158:	371c      	adds	r7, #28
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f15e:	bf00      	nop

0800f160 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800f160:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f162:	b089      	sub	sp, #36	; 0x24
 800f164:	af02      	add	r7, sp, #8
 800f166:	60f8      	str	r0, [r7, #12]
 800f168:	60b9      	str	r1, [r7, #8]
 800f16a:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	3320      	adds	r3, #32
 800f170:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	3320      	adds	r3, #32
 800f176:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f17e:	2b04      	cmp	r3, #4
 800f180:	f200 815e 	bhi.w	800f440 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800f184:	a201      	add	r2, pc, #4	; (adr r2, 800f18c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800f186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f18a:	bf00      	nop
 800f18c:	0800f1a1 	.word	0x0800f1a1
 800f190:	0800f1c1 	.word	0x0800f1c1
 800f194:	0800f203 	.word	0x0800f203
 800f198:	0800f217 	.word	0x0800f217
 800f19c:	0800f2db 	.word	0x0800f2db
                        theBuffer.valueSize = 2;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	2202      	movs	r2, #2
 800f1a4:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	f103 0210 	add.w	r2, r3, #16
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	3308      	adds	r3, #8
 800f1b0:	4619      	mov	r1, r3
 800f1b2:	4610      	mov	r0, r2
 800f1b4:	f7fd f922 	bl	800c3fc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	2201      	movs	r2, #1
 800f1bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        if(!valParser.Parse(pp, pcntdn))
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	3310      	adds	r3, #16
 800f1c4:	687a      	ldr	r2, [r7, #4]
 800f1c6:	68b9      	ldr	r1, [r7, #8]
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f003 f8d3 	bl	8012374 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	f083 0301 	eor.w	r3, r3, #1
 800f1d4:	b2db      	uxtb	r3, r3
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d001      	beq.n	800f1de <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	e131      	b.n	800f442 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800f1e4:	781a      	ldrb	r2, [r3, #0]
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800f1f2:	785a      	ldrb	r2, [r3, #1]
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	2202      	movs	r2, #2
 800f1fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        theBuffer.pValue = varBuffer + 2;
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	3320      	adds	r3, #32
 800f206:	1c9a      	adds	r2, r3, #2
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	2203      	movs	r2, #3
 800f212:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f21c:	3b02      	subs	r3, #2
 800f21e:	2b1f      	cmp	r3, #31
 800f220:	d847      	bhi.n	800f2b2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800f222:	a201      	add	r2, pc, #4	; (adr r2, 800f228 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800f224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f228:	0800f2b3 	.word	0x0800f2b3
 800f22c:	0800f2b3 	.word	0x0800f2b3
 800f230:	0800f2a9 	.word	0x0800f2a9
 800f234:	0800f2b3 	.word	0x0800f2b3
 800f238:	0800f2b3 	.word	0x0800f2b3
 800f23c:	0800f2b3 	.word	0x0800f2b3
 800f240:	0800f2b3 	.word	0x0800f2b3
 800f244:	0800f2b3 	.word	0x0800f2b3
 800f248:	0800f2b3 	.word	0x0800f2b3
 800f24c:	0800f2b3 	.word	0x0800f2b3
 800f250:	0800f2b3 	.word	0x0800f2b3
 800f254:	0800f2b3 	.word	0x0800f2b3
 800f258:	0800f2b3 	.word	0x0800f2b3
 800f25c:	0800f2b3 	.word	0x0800f2b3
 800f260:	0800f2b3 	.word	0x0800f2b3
 800f264:	0800f2b3 	.word	0x0800f2b3
 800f268:	0800f2b3 	.word	0x0800f2b3
 800f26c:	0800f2b3 	.word	0x0800f2b3
 800f270:	0800f2b3 	.word	0x0800f2b3
 800f274:	0800f2b3 	.word	0x0800f2b3
 800f278:	0800f2b3 	.word	0x0800f2b3
 800f27c:	0800f2b3 	.word	0x0800f2b3
 800f280:	0800f2b3 	.word	0x0800f2b3
 800f284:	0800f2b3 	.word	0x0800f2b3
 800f288:	0800f2b3 	.word	0x0800f2b3
 800f28c:	0800f2b3 	.word	0x0800f2b3
 800f290:	0800f2b3 	.word	0x0800f2b3
 800f294:	0800f2b3 	.word	0x0800f2b3
 800f298:	0800f2b3 	.word	0x0800f2b3
 800f29c:	0800f2b3 	.word	0x0800f2b3
 800f2a0:	0800f2b3 	.word	0x0800f2b3
 800f2a4:	0800f2b3 	.word	0x0800f2b3
                                        isGoodInterface = false;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800f2b0:	bf00      	nop
                        theBuffer.valueSize = dscrLen - 2;
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f2b8:	3b02      	subs	r3, #2
 800f2ba:	b2da      	uxtb	r2, r3
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	f103 0210 	add.w	r2, r3, #16
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	3308      	adds	r3, #8
 800f2ca:	4619      	mov	r1, r3
 800f2cc:	4610      	mov	r0, r2
 800f2ce:	f7fd f895 	bl	800c3fc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	2204      	movs	r2, #4
 800f2d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f2e0:	2b05      	cmp	r3, #5
 800f2e2:	d055      	beq.n	800f390 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800f2e4:	2b05      	cmp	r3, #5
 800f2e6:	f300 8085 	bgt.w	800f3f4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800f2ea:	2b02      	cmp	r3, #2
 800f2ec:	d002      	beq.n	800f2f4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800f2ee:	2b04      	cmp	r3, #4
 800f2f0:	d015      	beq.n	800f31e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800f2f2:	e07f      	b.n	800f3f4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                        if(!valParser.Parse(pp, pcntdn))
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	3310      	adds	r3, #16
 800f2f8:	687a      	ldr	r2, [r7, #4]
 800f2fa:	68b9      	ldr	r1, [r7, #8]
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	f003 f839 	bl	8012374 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f302:	4603      	mov	r3, r0
 800f304:	f083 0301 	eor.w	r3, r3, #1
 800f308:	b2db      	uxtb	r3, r3
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d001      	beq.n	800f312 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800f30e:	2300      	movs	r3, #0
 800f310:	e097      	b.n	800f442 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	795a      	ldrb	r2, [r3, #5]
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800f31c:	e086      	b.n	800f42c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	3310      	adds	r3, #16
 800f322:	687a      	ldr	r2, [r7, #4]
 800f324:	68b9      	ldr	r1, [r7, #8]
 800f326:	4618      	mov	r0, r3
 800f328:	f003 f824 	bl	8012374 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f32c:	4603      	mov	r3, r0
 800f32e:	f083 0301 	eor.w	r3, r3, #1
 800f332:	b2db      	uxtb	r3, r3
 800f334:	2b00      	cmp	r3, #0
 800f336:	d001      	beq.n	800f33c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800f338:	2300      	movs	r3, #0
 800f33a:	e082      	b.n	800f442 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800f33c:	693b      	ldr	r3, [r7, #16]
 800f33e:	795b      	ldrb	r3, [r3, #5]
 800f340:	2bff      	cmp	r3, #255	; 0xff
 800f342:	d16c      	bne.n	800f41e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	799b      	ldrb	r3, [r3, #6]
 800f348:	2b01      	cmp	r3, #1
 800f34a:	d16a      	bne.n	800f422 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                        if(UseOr) {
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f352:	2b00      	cmp	r3, #0
 800f354:	d004      	beq.n	800f360 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800f356:	693b      	ldr	r3, [r7, #16]
 800f358:	79db      	ldrb	r3, [r3, #7]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d104      	bne.n	800f368 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800f35e:	e065      	b.n	800f42c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800f360:	693b      	ldr	r3, [r7, #16]
 800f362:	79db      	ldrb	r3, [r3, #7]
 800f364:	2b01      	cmp	r3, #1
 800f366:	d15e      	bne.n	800f426 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                        isGoodInterface = true;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	2201      	movs	r2, #1
 800f36c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	789a      	ldrb	r2, [r3, #2]
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800f37a:	693b      	ldr	r3, [r7, #16]
 800f37c:	78da      	ldrb	r2, [r3, #3]
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800f384:	693b      	ldr	r3, [r7, #16]
 800f386:	79da      	ldrb	r2, [r3, #7]
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800f38e:	e04d      	b.n	800f42c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	3310      	adds	r3, #16
 800f394:	687a      	ldr	r2, [r7, #4]
 800f396:	68b9      	ldr	r1, [r7, #8]
 800f398:	4618      	mov	r0, r3
 800f39a:	f002 ffeb 	bl	8012374 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	f083 0301 	eor.w	r3, r3, #1
 800f3a4:	b2db      	uxtb	r3, r3
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d001      	beq.n	800f3ae <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	e049      	b.n	800f442 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d038      	beq.n	800f42a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d034      	beq.n	800f42a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	6858      	ldr	r0, [r3, #4]
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	685b      	ldr	r3, [r3, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	681c      	ldr	r4, [r3, #0]
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f3e4:	68fa      	ldr	r2, [r7, #12]
 800f3e6:	3220      	adds	r2, #32
 800f3e8:	9201      	str	r2, [sp, #4]
 800f3ea:	9300      	str	r3, [sp, #0]
 800f3ec:	4633      	mov	r3, r6
 800f3ee:	462a      	mov	r2, r5
 800f3f0:	47a0      	blx	r4
                                        break;
 800f3f2:	e01a      	b.n	800f42a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f103 0018 	add.w	r0, r3, #24
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f400:	b29b      	uxth	r3, r3
 800f402:	3b02      	subs	r3, #2
 800f404:	b29b      	uxth	r3, r3
 800f406:	687a      	ldr	r2, [r7, #4]
 800f408:	68b9      	ldr	r1, [r7, #8]
 800f40a:	f7fd f836 	bl	800c47a <_ZN11ByteSkipper4SkipEPPhPtt>
 800f40e:	4603      	mov	r3, r0
 800f410:	f083 0301 	eor.w	r3, r3, #1
 800f414:	b2db      	uxtb	r3, r3
 800f416:	2b00      	cmp	r3, #0
 800f418:	d008      	beq.n	800f42c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800f41a:	2300      	movs	r3, #0
 800f41c:	e011      	b.n	800f442 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800f41e:	bf00      	nop
 800f420:	e004      	b.n	800f42c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800f422:	bf00      	nop
 800f424:	e002      	b.n	800f42c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800f426:	bf00      	nop
 800f428:	e000      	b.n	800f42c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800f42a:	bf00      	nop
                        theBuffer.pValue = varBuffer;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	f103 0220 	add.w	r2, r3, #32
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	2200      	movs	r2, #0
 800f43c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return true;
 800f440:	2301      	movs	r3, #1
}
 800f442:	4618      	mov	r0, r3
 800f444:	371c      	adds	r7, #28
 800f446:	46bd      	mov	sp, r7
 800f448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f44a:	bf00      	nop

0800f44c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>:
        int8_t registerBluetoothService(BluetoothService *pService) {
 800f44c:	b480      	push	{r7}
 800f44e:	b085      	sub	sp, #20
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
 800f454:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800f456:	2300      	movs	r3, #0
 800f458:	73fb      	strb	r3, [r7, #15]
 800f45a:	7bfb      	ldrb	r3, [r7, #15]
 800f45c:	2b03      	cmp	r3, #3
 800f45e:	d815      	bhi.n	800f48c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x40>
                        if(!btService[i]) {
 800f460:	7bfb      	ldrb	r3, [r7, #15]
 800f462:	687a      	ldr	r2, [r7, #4]
 800f464:	3318      	adds	r3, #24
 800f466:	009b      	lsls	r3, r3, #2
 800f468:	4413      	add	r3, r2
 800f46a:	685b      	ldr	r3, [r3, #4]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d109      	bne.n	800f484 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x38>
                                btService[i] = pService;
 800f470:	7bfb      	ldrb	r3, [r7, #15]
 800f472:	687a      	ldr	r2, [r7, #4]
 800f474:	3318      	adds	r3, #24
 800f476:	009b      	lsls	r3, r3, #2
 800f478:	4413      	add	r3, r2
 800f47a:	683a      	ldr	r2, [r7, #0]
 800f47c:	605a      	str	r2, [r3, #4]
                                return i; // Return ID
 800f47e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f482:	e005      	b.n	800f490 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x44>
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800f484:	7bfb      	ldrb	r3, [r7, #15]
 800f486:	3301      	adds	r3, #1
 800f488:	73fb      	strb	r3, [r7, #15]
 800f48a:	e7e6      	b.n	800f45a <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0xe>
                return -1; // Error registering BluetoothService
 800f48c:	f04f 33ff 	mov.w	r3, #4294967295
        };
 800f490:	4618      	mov	r0, r3
 800f492:	3714      	adds	r7, #20
 800f494:	46bd      	mov	sp, r7
 800f496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49a:	4770      	bx	lr

0800f49c <_ZN16BluetoothServiceC1EP3BTD>:
};

/** All Bluetooth services should inherit this class. */
class BluetoothService {
public:
        BluetoothService(BTD *p) : pBtd(p) {
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b082      	sub	sp, #8
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
 800f4a4:	6039      	str	r1, [r7, #0]
 800f4a6:	4a0a      	ldr	r2, [pc, #40]	; (800f4d0 <_ZN16BluetoothServiceC1EP3BTD+0x34>)
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	601a      	str	r2, [r3, #0]
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	683a      	ldr	r2, [r7, #0]
 800f4b0:	609a      	str	r2, [r3, #8]
                if(pBtd)
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	689b      	ldr	r3, [r3, #8]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d005      	beq.n	800f4c6 <_ZN16BluetoothServiceC1EP3BTD+0x2a>
                        pBtd->registerBluetoothService(this); // Register it as a Bluetooth service
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	689b      	ldr	r3, [r3, #8]
 800f4be:	6879      	ldr	r1, [r7, #4]
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f7ff ffc3 	bl	800f44c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>
        };
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3708      	adds	r7, #8
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}
 800f4d0:	080128b8 	.word	0x080128b8

0800f4d4 <_ZN16BluetoothService14checkHciHandleEPht>:
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void onInit() = 0;

        /** Used to check if the incoming L2CAP data matches the HCI Handle */
        bool checkHciHandle(uint8_t *buf, uint16_t handle) {
 800f4d4:	b480      	push	{r7}
 800f4d6:	b085      	sub	sp, #20
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	60f8      	str	r0, [r7, #12]
 800f4dc:	60b9      	str	r1, [r7, #8]
 800f4de:	4613      	mov	r3, r2
 800f4e0:	80fb      	strh	r3, [r7, #6]
                return (buf[0] == (handle & 0xFF)) && (buf[1] == ((handle >> 8) | 0x20));
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	781b      	ldrb	r3, [r3, #0]
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	88fb      	ldrh	r3, [r7, #6]
 800f4ea:	b2db      	uxtb	r3, r3
 800f4ec:	429a      	cmp	r2, r3
 800f4ee:	d10b      	bne.n	800f508 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	3301      	adds	r3, #1
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	461a      	mov	r2, r3
 800f4f8:	88fb      	ldrh	r3, [r7, #6]
 800f4fa:	121b      	asrs	r3, r3, #8
 800f4fc:	f043 0320 	orr.w	r3, r3, #32
 800f500:	429a      	cmp	r2, r3
 800f502:	d101      	bne.n	800f508 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800f504:	2301      	movs	r3, #1
 800f506:	e000      	b.n	800f50a <_ZN16BluetoothService14checkHciHandleEPht+0x36>
 800f508:	2300      	movs	r3, #0
        }
 800f50a:	4618      	mov	r0, r3
 800f50c:	3714      	adds	r7, #20
 800f50e:	46bd      	mov	sp, r7
 800f510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f514:	4770      	bx	lr

0800f516 <_ZN5BTHID14ParseBTHIDDataEhPh>:
        virtual void ParseBTHIDData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 800f516:	b480      	push	{r7}
 800f518:	b085      	sub	sp, #20
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	60f8      	str	r0, [r7, #12]
 800f51e:	460b      	mov	r3, r1
 800f520:	607a      	str	r2, [r7, #4]
 800f522:	72fb      	strb	r3, [r7, #11]
                return;
 800f524:	bf00      	nop
        };
 800f526:	3714      	adds	r7, #20
 800f528:	46bd      	mov	sp, r7
 800f52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52e:	4770      	bx	lr

0800f530 <_ZN5BTHID11OnInitBTHIDEv>:
        /** Called when a device is connected */
        virtual void OnInitBTHID() {
 800f530:	b480      	push	{r7}
 800f532:	b083      	sub	sp, #12
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
                return;
 800f538:	bf00      	nop
        };
 800f53a:	370c      	adds	r7, #12
 800f53c:	46bd      	mov	sp, r7
 800f53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f542:	4770      	bx	lr

0800f544 <_ZN5BTHID10ResetBTHIDEv>:
        /** Used to reset any buffers in the class that inherits this */
        virtual void ResetBTHID() {
 800f544:	b480      	push	{r7}
 800f546:	b083      	sub	sp, #12
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
                return;
 800f54c:	bf00      	nop
        }
 800f54e:	370c      	adds	r7, #12
 800f550:	46bd      	mov	sp, r7
 800f552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f556:	4770      	bx	lr

0800f558 <_ZN5BTHIDC1EP3BTDbPKc>:
#include "BTHID.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the HID device

BTHID::BTHID(BTD *p, bool pair, const char *pin) :
 800f558:	b580      	push	{r7, lr}
 800f55a:	b086      	sub	sp, #24
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	60f8      	str	r0, [r7, #12]
 800f560:	60b9      	str	r1, [r7, #8]
 800f562:	603b      	str	r3, [r7, #0]
 800f564:	4613      	mov	r3, r2
 800f566:	71fb      	strb	r3, [r7, #7]
BluetoothService(p), // Pointer to USB class instance - mandatory
protocolMode(USB_HID_BOOT_PROTOCOL) {
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	68b9      	ldr	r1, [r7, #8]
 800f56c:	4618      	mov	r0, r3
 800f56e:	f7ff ff95 	bl	800f49c <_ZN16BluetoothServiceC1EP3BTD>
 800f572:	4a1f      	ldr	r2, [pc, #124]	; (800f5f0 <_ZN5BTHIDC1EP3BTDbPKc+0x98>)
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	601a      	str	r2, [r3, #0]
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	2200      	movs	r2, #0
 800f57c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800f580:	2300      	movs	r3, #0
 800f582:	75fb      	strb	r3, [r7, #23]
 800f584:	7dfb      	ldrb	r3, [r7, #23]
 800f586:	2b01      	cmp	r3, #1
 800f588:	d809      	bhi.n	800f59e <_ZN5BTHIDC1EP3BTDbPKc+0x46>
                pRptParser[i] = NULL;
 800f58a:	7dfa      	ldrb	r2, [r7, #23]
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	3208      	adds	r2, #8
 800f590:	2100      	movs	r1, #0
 800f592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800f596:	7dfb      	ldrb	r3, [r7, #23]
 800f598:	3301      	adds	r3, #1
 800f59a:	75fb      	strb	r3, [r7, #23]
 800f59c:	e7f2      	b.n	800f584 <_ZN5BTHIDC1EP3BTDbPKc+0x2c>

        pBtd->pairWithHIDDevice = pair;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	689b      	ldr	r3, [r3, #8]
 800f5a2:	79fa      	ldrb	r2, [r7, #7]
 800f5a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        pBtd->btdPin = pin;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	689b      	ldr	r3, [r3, #8]
 800f5ac:	683a      	ldr	r2, [r7, #0]
 800f5ae:	611a      	str	r2, [r3, #16]

        /* Set device cid for the control and intterrupt channelse - LSB */
        sdp_dcid[0] = 0x50; // 0x0050
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	2250      	movs	r2, #80	; 0x50
 800f5b4:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        sdp_dcid[1] = 0x00;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        control_dcid[0] = 0x70; // 0x0070
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	2270      	movs	r2, #112	; 0x70
 800f5c4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        control_dcid[1] = 0x00;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        interrupt_dcid[0] = 0x71; // 0x0071
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	2271      	movs	r2, #113	; 0x71
 800f5d4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        interrupt_dcid[1] = 0x00;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

        Reset();
 800f5e0:	68f8      	ldr	r0, [r7, #12]
 800f5e2:	f000 f807 	bl	800f5f4 <_ZN5BTHID5ResetEv>
}
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	3718      	adds	r7, #24
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	bd80      	pop	{r7, pc}
 800f5f0:	0801288c 	.word	0x0801288c

0800f5f4 <_ZN5BTHID5ResetEv>:

void BTHID::Reset() {
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b082      	sub	sp, #8
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
        connected = false;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2200      	movs	r2, #0
 800f600:	755a      	strb	r2, [r3, #21]
        activeConnection = false;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	2200      	movs	r2, #0
 800f606:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDPConnected = false;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	2200      	movs	r2, #0
 800f60e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        l2cap_event_flag = 0; // Reset flags
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	2200      	movs	r2, #0
 800f616:	611a      	str	r2, [r3, #16]
        l2cap_sdp_state = L2CAP_SDP_WAIT;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	220a      	movs	r2, #10
 800f61c:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_WAIT;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	2200      	movs	r2, #0
 800f622:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ResetBTHID();
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	3320      	adds	r3, #32
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	4798      	blx	r3
}
 800f632:	bf00      	nop
 800f634:	3708      	adds	r7, #8
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}

0800f63a <_ZN5BTHID10disconnectEv>:

void BTHID::disconnect() { // Use this void to disconnect the device
 800f63a:	b590      	push	{r4, r7, lr}
 800f63c:	b085      	sub	sp, #20
 800f63e:	af02      	add	r7, sp, #8
 800f640:	6078      	str	r0, [r7, #4]
        if(SDPConnected)
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d014      	beq.n	800f676 <_ZN5BTHID10disconnectEv+0x3c>
                pBtd->l2cap_disconnection_request(hci_handle, ++identifier, sdp_scid, sdp_dcid);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6898      	ldr	r0, [r3, #8]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	8999      	ldrh	r1, [r3, #12]
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	7d1b      	ldrb	r3, [r3, #20]
 800f658:	3301      	adds	r3, #1
 800f65a:	b2da      	uxtb	r2, r3
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	751a      	strb	r2, [r3, #20]
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	7d1a      	ldrb	r2, [r3, #20]
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f103 041b 	add.w	r4, r3, #27
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	336f      	adds	r3, #111	; 0x6f
 800f66e:	9300      	str	r3, [sp, #0]
 800f670:	4623      	mov	r3, r4
 800f672:	f7ff f9c5 	bl	800ea00 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        // First the HID interrupt channel has to be disconnected, then the HID control channel and finally the HCI connection
        pBtd->l2cap_disconnection_request(hci_handle, ++identifier, interrupt_scid, interrupt_dcid);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6898      	ldr	r0, [r3, #8]
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	8999      	ldrh	r1, [r3, #12]
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	7d1b      	ldrb	r3, [r3, #20]
 800f682:	3301      	adds	r3, #1
 800f684:	b2da      	uxtb	r2, r3
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	751a      	strb	r2, [r3, #20]
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	7d1a      	ldrb	r2, [r3, #20]
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	f103 0418 	add.w	r4, r3, #24
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	336d      	adds	r3, #109	; 0x6d
 800f698:	9300      	str	r3, [sp, #0]
 800f69a:	4623      	mov	r3, r4
 800f69c:	f7ff f9b0 	bl	800ea00 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        Reset();
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	3308      	adds	r3, #8
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	4798      	blx	r3
        l2cap_sdp_state = L2CAP_DISCONNECT_RESPONSE;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	220e      	movs	r2, #14
 800f6b0:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_INTERRUPT_DISCONNECT;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2209      	movs	r2, #9
 800f6b6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 800f6ba:	bf00      	nop
 800f6bc:	370c      	adds	r7, #12
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd90      	pop	{r4, r7, pc}

0800f6c2 <_ZN5BTHID7ACLDataEPh>:

void BTHID::ACLData(uint8_t* l2capinbuf) {
 800f6c2:	b590      	push	{r4, r7, lr}
 800f6c4:	b087      	sub	sp, #28
 800f6c6:	af02      	add	r7, sp, #8
 800f6c8:	6078      	str	r0, [r7, #4]
 800f6ca:	6039      	str	r1, [r7, #0]
        if(!connected) {
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	7d5b      	ldrb	r3, [r3, #21]
 800f6d0:	f083 0301 	eor.w	r3, r3, #1
 800f6d4:	b2db      	uxtb	r3, r3
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d023      	beq.n	800f722 <_ZN5BTHID7ACLDataEPh+0x60>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	3308      	adds	r3, #8
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	2b02      	cmp	r3, #2
 800f6e2:	d11e      	bne.n	800f722 <_ZN5BTHID7ACLDataEPh+0x60>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM && !pBtd->sdpConnectionClaimed) {
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	330c      	adds	r3, #12
 800f6e8:	781b      	ldrb	r3, [r3, #0]
 800f6ea:	461a      	mov	r2, r3
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	330d      	adds	r3, #13
 800f6f0:	781b      	ldrb	r3, [r3, #0]
 800f6f2:	021b      	lsls	r3, r3, #8
 800f6f4:	4313      	orrs	r3, r2
 800f6f6:	2b01      	cmp	r3, #1
 800f6f8:	d113      	bne.n	800f722 <_ZN5BTHID7ACLDataEPh+0x60>
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	689b      	ldr	r3, [r3, #8]
 800f6fe:	7a9b      	ldrb	r3, [r3, #10]
 800f700:	f083 0301 	eor.w	r3, r3, #1
 800f704:	b2db      	uxtb	r3, r3
 800f706:	2b00      	cmp	r3, #0
 800f708:	d00b      	beq.n	800f722 <_ZN5BTHID7ACLDataEPh+0x60>
                                pBtd->sdpConnectionClaimed = true;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	689b      	ldr	r3, [r3, #8]
 800f70e:	2201      	movs	r2, #1
 800f710:	729a      	strb	r2, [r3, #10]
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	689b      	ldr	r3, [r3, #8]
 800f716:	8b5a      	ldrh	r2, [r3, #26]
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	819a      	strh	r2, [r3, #12]
                                l2cap_sdp_state = L2CAP_SDP_WAIT; // Reset state
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	220a      	movs	r2, #10
 800f720:	769a      	strb	r2, [r3, #26]
                        }
                }
        }

        if(!pBtd->l2capConnectionClaimed && pBtd->incomingHIDDevice && !connected && !activeConnection) {
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	689b      	ldr	r3, [r3, #8]
 800f726:	7a5b      	ldrb	r3, [r3, #9]
 800f728:	f083 0301 	eor.w	r3, r3, #1
 800f72c:	b2db      	uxtb	r3, r3
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d03a      	beq.n	800f7a8 <_ZN5BTHID7ACLDataEPh+0xe6>
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	689b      	ldr	r3, [r3, #8]
 800f736:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d034      	beq.n	800f7a8 <_ZN5BTHID7ACLDataEPh+0xe6>
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	7d5b      	ldrb	r3, [r3, #21]
 800f742:	f083 0301 	eor.w	r3, r3, #1
 800f746:	b2db      	uxtb	r3, r3
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d02d      	beq.n	800f7a8 <_ZN5BTHID7ACLDataEPh+0xe6>
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800f752:	f083 0301 	eor.w	r3, r3, #1
 800f756:	b2db      	uxtb	r3, r3
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d025      	beq.n	800f7a8 <_ZN5BTHID7ACLDataEPh+0xe6>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	3308      	adds	r3, #8
 800f760:	781b      	ldrb	r3, [r3, #0]
 800f762:	2b02      	cmp	r3, #2
 800f764:	d120      	bne.n	800f7a8 <_ZN5BTHID7ACLDataEPh+0xe6>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	330c      	adds	r3, #12
 800f76a:	781b      	ldrb	r3, [r3, #0]
 800f76c:	461a      	mov	r2, r3
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	330d      	adds	r3, #13
 800f772:	781b      	ldrb	r3, [r3, #0]
 800f774:	021b      	lsls	r3, r3, #8
 800f776:	4313      	orrs	r3, r2
 800f778:	2b11      	cmp	r3, #17
 800f77a:	d115      	bne.n	800f7a8 <_ZN5BTHID7ACLDataEPh+0xe6>
                                pBtd->incomingHIDDevice = false;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	689b      	ldr	r3, [r3, #8]
 800f780:	2200      	movs	r2, #0
 800f782:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                pBtd->l2capConnectionClaimed = true; // Claim that the incoming connection belongs to this service
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	689b      	ldr	r3, [r3, #8]
 800f78a:	2201      	movs	r2, #1
 800f78c:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	2201      	movs	r2, #1
 800f792:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	689b      	ldr	r3, [r3, #8]
 800f79a:	8b5a      	ldrh	r2, [r3, #26]
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	819a      	strh	r2, [r3, #12]
                                l2cap_state = L2CAP_WAIT;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                }
        }

        if(checkHciHandle(l2capinbuf, hci_handle)) { // acl_handle_ok
 800f7a8:	6878      	ldr	r0, [r7, #4]
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	899b      	ldrh	r3, [r3, #12]
 800f7ae:	461a      	mov	r2, r3
 800f7b0:	6839      	ldr	r1, [r7, #0]
 800f7b2:	f7ff fe8f 	bl	800f4d4 <_ZN16BluetoothService14checkHciHandleEPht>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	f000 83d9 	beq.w	800ff70 <_ZN5BTHID7ACLDataEPh+0x8ae>
                if((l2capinbuf[6] | (l2capinbuf[7] << 8)) == 0x0001U) { // l2cap_control - Channel ID for ACL-U
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	3306      	adds	r3, #6
 800f7c2:	781b      	ldrb	r3, [r3, #0]
 800f7c4:	461a      	mov	r2, r3
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	3307      	adds	r3, #7
 800f7ca:	781b      	ldrb	r3, [r3, #0]
 800f7cc:	021b      	lsls	r3, r3, #8
 800f7ce:	4313      	orrs	r3, r2
 800f7d0:	2b01      	cmp	r3, #1
 800f7d2:	f040 829b 	bne.w	800fd0c <_ZN5BTHID7ACLDataEPh+0x64a>
                        if(l2capinbuf[8] == L2CAP_CMD_COMMAND_REJECT) {
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	3308      	adds	r3, #8
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	2b01      	cmp	r3, #1
 800f7de:	f000 83c1 	beq.w	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[15], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
#endif
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_RESPONSE) {
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	3308      	adds	r3, #8
 800f7e6:	781b      	ldrb	r3, [r3, #0]
 800f7e8:	2b03      	cmp	r3, #3
 800f7ea:	f040 808d 	bne.w	800f908 <_ZN5BTHID7ACLDataEPh+0x246>
                                if(((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) && ((l2capinbuf[18] | (l2capinbuf[19] << 8)) == SUCCESSFUL)) { // Success
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	3310      	adds	r3, #16
 800f7f2:	781b      	ldrb	r3, [r3, #0]
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	683b      	ldr	r3, [r7, #0]
 800f7f8:	3311      	adds	r3, #17
 800f7fa:	781b      	ldrb	r3, [r3, #0]
 800f7fc:	021b      	lsls	r3, r3, #8
 800f7fe:	4313      	orrs	r3, r2
 800f800:	2b00      	cmp	r3, #0
 800f802:	f040 83af 	bne.w	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	3312      	adds	r3, #18
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	461a      	mov	r2, r3
 800f80e:	683b      	ldr	r3, [r7, #0]
 800f810:	3313      	adds	r3, #19
 800f812:	781b      	ldrb	r3, [r3, #0]
 800f814:	021b      	lsls	r3, r3, #8
 800f816:	4313      	orrs	r3, r2
 800f818:	2b00      	cmp	r3, #0
 800f81a:	f040 83a3 	bne.w	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[14] == sdp_dcid[0] && l2capinbuf[15] == sdp_dcid[1]) {
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	330e      	adds	r3, #14
 800f822:	781a      	ldrb	r2, [r3, #0]
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d124      	bne.n	800f878 <_ZN5BTHID7ACLDataEPh+0x1b6>
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	330f      	adds	r3, #15
 800f832:	781a      	ldrb	r2, [r3, #0]
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800f83a:	429a      	cmp	r2, r3
 800f83c:	d11c      	bne.n	800f878 <_ZN5BTHID7ACLDataEPh+0x1b6>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	7a5a      	ldrb	r2, [r3, #9]
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	751a      	strb	r2, [r3, #20]
                                                sdp_scid[0] = l2capinbuf[12];
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	7b1a      	ldrb	r2, [r3, #12]
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	76da      	strb	r2, [r3, #27]
                                                sdp_scid[1] = l2capinbuf[13];
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	7b5a      	ldrb	r2, [r3, #13]
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	771a      	strb	r2, [r3, #28]
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nSend SDP Config Request"), 0x80);
#endif
                                                identifier++;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	7d1b      	ldrb	r3, [r3, #20]
 800f85a:	3301      	adds	r3, #1
 800f85c:	b2da      	uxtb	r2, r3
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	751a      	strb	r2, [r3, #20]
                                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	6898      	ldr	r0, [r3, #8]
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	8999      	ldrh	r1, [r3, #12]
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	7d1a      	ldrb	r2, [r3, #20]
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	331b      	adds	r3, #27
 800f872:	f7ff f827 	bl	800e8c4 <_ZN3BTD20l2cap_config_requestEthPh>
 800f876:	e375      	b.n	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == control_dcid[0] && l2capinbuf[15] == control_dcid[1]) {
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	330e      	adds	r3, #14
 800f87c:	781a      	ldrb	r2, [r3, #0]
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800f884:	429a      	cmp	r2, r3
 800f886:	d11a      	bne.n	800f8be <_ZN5BTHID7ACLDataEPh+0x1fc>
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	330f      	adds	r3, #15
 800f88c:	781a      	ldrb	r2, [r3, #0]
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800f894:	429a      	cmp	r2, r3
 800f896:	d112      	bne.n	800f8be <_ZN5BTHID7ACLDataEPh+0x1fc>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	7a5a      	ldrb	r2, [r3, #9]
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	751a      	strb	r2, [r3, #20]
                                                control_scid[0] = l2capinbuf[12];
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	7b1a      	ldrb	r2, [r3, #12]
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	759a      	strb	r2, [r3, #22]
                                                control_scid[1] = l2capinbuf[13];
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	7b5a      	ldrb	r2, [r3, #13]
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	75da      	strb	r2, [r3, #23]
                                                l2cap_set_flag(L2CAP_FLAG_CONTROL_CONNECTED);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	691b      	ldr	r3, [r3, #16]
 800f8b4:	f043 0204 	orr.w	r2, r3, #4
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	611a      	str	r2, [r3, #16]
 800f8bc:	e352      	b.n	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == interrupt_dcid[0] && l2capinbuf[15] == interrupt_dcid[1]) {
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	330e      	adds	r3, #14
 800f8c2:	781a      	ldrb	r2, [r3, #0]
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	f040 834a 	bne.w	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800f8d0:	683b      	ldr	r3, [r7, #0]
 800f8d2:	330f      	adds	r3, #15
 800f8d4:	781a      	ldrb	r2, [r3, #0]
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	f040 8341 	bne.w	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	7a5a      	ldrb	r2, [r3, #9]
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	751a      	strb	r2, [r3, #20]
                                                interrupt_scid[0] = l2capinbuf[12];
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	7b1a      	ldrb	r2, [r3, #12]
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	761a      	strb	r2, [r3, #24]
                                                interrupt_scid[1] = l2capinbuf[13];
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	7b5a      	ldrb	r2, [r3, #13]
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	765a      	strb	r2, [r3, #25]
                                                l2cap_set_flag(L2CAP_FLAG_INTERRUPT_CONNECTED);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	691b      	ldr	r3, [r3, #16]
 800f8fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	611a      	str	r2, [r3, #16]
 800f906:	e32d      	b.n	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	3308      	adds	r3, #8
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	2b02      	cmp	r3, #2
 800f910:	d15a      	bne.n	800f9c8 <_ZN5BTHID7ACLDataEPh+0x306>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
                                Notify(PSTR(" Identifier: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[9], 0x80);
#endif
                                if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM) {
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	330c      	adds	r3, #12
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	461a      	mov	r2, r3
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	330d      	adds	r3, #13
 800f91e:	781b      	ldrb	r3, [r3, #0]
 800f920:	021b      	lsls	r3, r3, #8
 800f922:	4313      	orrs	r3, r2
 800f924:	2b01      	cmp	r3, #1
 800f926:	d112      	bne.n	800f94e <_ZN5BTHID7ACLDataEPh+0x28c>
                                        identifier = l2capinbuf[9];
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	7a5a      	ldrb	r2, [r3, #9]
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	751a      	strb	r2, [r3, #20]
                                        sdp_scid[0] = l2capinbuf[14];
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	7b9a      	ldrb	r2, [r3, #14]
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	76da      	strb	r2, [r3, #27]
                                        sdp_scid[1] = l2capinbuf[15];
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	7bda      	ldrb	r2, [r3, #15]
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	771a      	strb	r2, [r3, #28]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	691b      	ldr	r3, [r3, #16]
 800f944:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	611a      	str	r2, [r3, #16]
 800f94c:	e30a      	b.n	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	330c      	adds	r3, #12
 800f952:	781b      	ldrb	r3, [r3, #0]
 800f954:	461a      	mov	r2, r3
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	330d      	adds	r3, #13
 800f95a:	781b      	ldrb	r3, [r3, #0]
 800f95c:	021b      	lsls	r3, r3, #8
 800f95e:	4313      	orrs	r3, r2
 800f960:	2b11      	cmp	r3, #17
 800f962:	d112      	bne.n	800f98a <_ZN5BTHID7ACLDataEPh+0x2c8>
                                        identifier = l2capinbuf[9];
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	7a5a      	ldrb	r2, [r3, #9]
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	751a      	strb	r2, [r3, #20]
                                        control_scid[0] = l2capinbuf[14];
 800f96c:	683b      	ldr	r3, [r7, #0]
 800f96e:	7b9a      	ldrb	r2, [r3, #14]
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	759a      	strb	r2, [r3, #22]
                                        control_scid[1] = l2capinbuf[15];
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	7bda      	ldrb	r2, [r3, #15]
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	75da      	strb	r2, [r3, #23]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	691b      	ldr	r3, [r3, #16]
 800f980:	f043 0201 	orr.w	r2, r3, #1
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	611a      	str	r2, [r3, #16]
 800f988:	e2ec      	b.n	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_INTR_PSM) {
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	330c      	adds	r3, #12
 800f98e:	781b      	ldrb	r3, [r3, #0]
 800f990:	461a      	mov	r2, r3
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	330d      	adds	r3, #13
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	021b      	lsls	r3, r3, #8
 800f99a:	4313      	orrs	r3, r2
 800f99c:	2b13      	cmp	r3, #19
 800f99e:	f040 82e1 	bne.w	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        identifier = l2capinbuf[9];
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	7a5a      	ldrb	r2, [r3, #9]
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	751a      	strb	r2, [r3, #20]
                                        interrupt_scid[0] = l2capinbuf[14];
 800f9aa:	683b      	ldr	r3, [r7, #0]
 800f9ac:	7b9a      	ldrb	r2, [r3, #14]
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	761a      	strb	r2, [r3, #24]
                                        interrupt_scid[1] = l2capinbuf[15];
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	7bda      	ldrb	r2, [r3, #15]
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	765a      	strb	r2, [r3, #25]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	691b      	ldr	r3, [r3, #16]
 800f9be:	f043 0210 	orr.w	r2, r3, #16
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	611a      	str	r2, [r3, #16]
 800f9c6:	e2cd      	b.n	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_RESPONSE) {
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	3308      	adds	r3, #8
 800f9cc:	781b      	ldrb	r3, [r3, #0]
 800f9ce:	2b05      	cmp	r3, #5
 800f9d0:	d15e      	bne.n	800fa90 <_ZN5BTHID7ACLDataEPh+0x3ce>
                                if((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) { // Success
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	3310      	adds	r3, #16
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	461a      	mov	r2, r3
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	3311      	adds	r3, #17
 800f9de:	781b      	ldrb	r3, [r3, #0]
 800f9e0:	021b      	lsls	r3, r3, #8
 800f9e2:	4313      	orrs	r3, r2
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	f040 82bd 	bne.w	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	330c      	adds	r3, #12
 800f9ee:	781a      	ldrb	r2, [r3, #0]
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	d112      	bne.n	800fa20 <_ZN5BTHID7ACLDataEPh+0x35e>
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	330d      	adds	r3, #13
 800f9fe:	781a      	ldrb	r2, [r3, #0]
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fa06:	429a      	cmp	r2, r3
 800fa08:	d10a      	bne.n	800fa20 <_ZN5BTHID7ACLDataEPh+0x35e>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	7a5a      	ldrb	r2, [r3, #9]
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	691b      	ldr	r3, [r3, #16]
 800fa16:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	611a      	str	r2, [r3, #16]
 800fa1e:	e2a1      	b.n	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	330c      	adds	r3, #12
 800fa24:	781a      	ldrb	r2, [r3, #0]
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	d112      	bne.n	800fa56 <_ZN5BTHID7ACLDataEPh+0x394>
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	330d      	adds	r3, #13
 800fa34:	781a      	ldrb	r2, [r3, #0]
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800fa3c:	429a      	cmp	r2, r3
 800fa3e:	d10a      	bne.n	800fa56 <_ZN5BTHID7ACLDataEPh+0x394>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	7a5a      	ldrb	r2, [r3, #9]
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	691b      	ldr	r3, [r3, #16]
 800fa4c:	f043 0202 	orr.w	r2, r3, #2
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	611a      	str	r2, [r3, #16]
 800fa54:	e286      	b.n	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	330c      	adds	r3, #12
 800fa5a:	781a      	ldrb	r2, [r3, #0]
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800fa62:	429a      	cmp	r2, r3
 800fa64:	f040 827e 	bne.w	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	330d      	adds	r3, #13
 800fa6c:	781a      	ldrb	r2, [r3, #0]
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800fa74:	429a      	cmp	r2, r3
 800fa76:	f040 8275 	bne.w	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	7a5a      	ldrb	r2, [r3, #9]
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	691b      	ldr	r3, [r3, #16]
 800fa86:	f043 0220 	orr.w	r2, r3, #32
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	611a      	str	r2, [r3, #16]
 800fa8e:	e269      	b.n	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_REQUEST) {
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	3308      	adds	r3, #8
 800fa94:	781b      	ldrb	r3, [r3, #0]
 800fa96:	2b04      	cmp	r3, #4
 800fa98:	d155      	bne.n	800fb46 <_ZN5BTHID7ACLDataEPh+0x484>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	330c      	adds	r3, #12
 800fa9e:	781a      	ldrb	r2, [r3, #0]
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800faa6:	429a      	cmp	r2, r3
 800faa8:	d113      	bne.n	800fad2 <_ZN5BTHID7ACLDataEPh+0x410>
 800faaa:	683b      	ldr	r3, [r7, #0]
 800faac:	330d      	adds	r3, #13
 800faae:	781a      	ldrb	r2, [r3, #0]
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fab6:	429a      	cmp	r2, r3
 800fab8:	d10b      	bne.n	800fad2 <_ZN5BTHID7ACLDataEPh+0x410>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nSDP Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], sdp_scid);
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	6898      	ldr	r0, [r3, #8]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	8999      	ldrh	r1, [r3, #12]
 800fac2:	683b      	ldr	r3, [r7, #0]
 800fac4:	3309      	adds	r3, #9
 800fac6:	781a      	ldrb	r2, [r3, #0]
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	331b      	adds	r3, #27
 800facc:	f7fe ff45 	bl	800e95a <_ZN3BTD21l2cap_config_responseEthPh>
 800fad0:	e248      	b.n	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	330c      	adds	r3, #12
 800fad6:	781a      	ldrb	r2, [r3, #0]
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800fade:	429a      	cmp	r2, r3
 800fae0:	d113      	bne.n	800fb0a <_ZN5BTHID7ACLDataEPh+0x448>
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	330d      	adds	r3, #13
 800fae6:	781a      	ldrb	r2, [r3, #0]
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800faee:	429a      	cmp	r2, r3
 800faf0:	d10b      	bne.n	800fb0a <_ZN5BTHID7ACLDataEPh+0x448>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Control Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], control_scid);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	6898      	ldr	r0, [r3, #8]
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	8999      	ldrh	r1, [r3, #12]
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	3309      	adds	r3, #9
 800fafe:	781a      	ldrb	r2, [r3, #0]
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	3316      	adds	r3, #22
 800fb04:	f7fe ff29 	bl	800e95a <_ZN3BTD21l2cap_config_responseEthPh>
 800fb08:	e22c      	b.n	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	330c      	adds	r3, #12
 800fb0e:	781a      	ldrb	r2, [r3, #0]
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800fb16:	429a      	cmp	r2, r3
 800fb18:	f040 8224 	bne.w	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	330d      	adds	r3, #13
 800fb20:	781a      	ldrb	r2, [r3, #0]
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800fb28:	429a      	cmp	r2, r3
 800fb2a:	f040 821b 	bne.w	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Interrupt Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], interrupt_scid);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	6898      	ldr	r0, [r3, #8]
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	8999      	ldrh	r1, [r3, #12]
 800fb36:	683b      	ldr	r3, [r7, #0]
 800fb38:	3309      	adds	r3, #9
 800fb3a:	781a      	ldrb	r2, [r3, #0]
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	3318      	adds	r3, #24
 800fb40:	f7fe ff0b 	bl	800e95a <_ZN3BTD21l2cap_config_responseEthPh>
 800fb44:	e20e      	b.n	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_REQUEST) {
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	3308      	adds	r3, #8
 800fb4a:	781b      	ldrb	r3, [r3, #0]
 800fb4c:	2b06      	cmp	r3, #6
 800fb4e:	d170      	bne.n	800fc32 <_ZN5BTHID7ACLDataEPh+0x570>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	330c      	adds	r3, #12
 800fb54:	781a      	ldrb	r2, [r3, #0]
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d112      	bne.n	800fb86 <_ZN5BTHID7ACLDataEPh+0x4c4>
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	330d      	adds	r3, #13
 800fb64:	781a      	ldrb	r2, [r3, #0]
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	d10a      	bne.n	800fb86 <_ZN5BTHID7ACLDataEPh+0x4c4>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	7a5a      	ldrb	r2, [r3, #9]
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	691b      	ldr	r3, [r3, #16]
 800fb7c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	611a      	str	r2, [r3, #16]
 800fb84:	e1ee      	b.n	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	330c      	adds	r3, #12
 800fb8a:	781a      	ldrb	r2, [r3, #0]
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d121      	bne.n	800fbda <_ZN5BTHID7ACLDataEPh+0x518>
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	330d      	adds	r3, #13
 800fb9a:	781a      	ldrb	r2, [r3, #0]
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800fba2:	429a      	cmp	r2, r3
 800fba4:	d119      	bne.n	800fbda <_ZN5BTHID7ACLDataEPh+0x518>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	7a5a      	ldrb	r2, [r3, #9]
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, control_dcid, control_scid);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6898      	ldr	r0, [r3, #8]
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	8999      	ldrh	r1, [r3, #12]
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	7d1a      	ldrb	r2, [r3, #20]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	3316      	adds	r3, #22
 800fbc4:	9300      	str	r3, [sp, #0]
 800fbc6:	4623      	mov	r3, r4
 800fbc8:	f7fe ff57 	bl	800ea7a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	3308      	adds	r3, #8
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	6878      	ldr	r0, [r7, #4]
 800fbd6:	4798      	blx	r3
 800fbd8:	e1c4      	b.n	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	330c      	adds	r3, #12
 800fbde:	781a      	ldrb	r2, [r3, #0]
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800fbe6:	429a      	cmp	r2, r3
 800fbe8:	f040 81bc 	bne.w	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	330d      	adds	r3, #13
 800fbf0:	781a      	ldrb	r2, [r3, #0]
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800fbf8:	429a      	cmp	r2, r3
 800fbfa:	f040 81b3 	bne.w	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	7a5a      	ldrb	r2, [r3, #9]
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid);
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6898      	ldr	r0, [r3, #8]
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	8999      	ldrh	r1, [r3, #12]
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	7d1a      	ldrb	r2, [r3, #20]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	3318      	adds	r3, #24
 800fc1c:	9300      	str	r3, [sp, #0]
 800fc1e:	4623      	mov	r3, r4
 800fc20:	f7fe ff2b 	bl	800ea7a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	3308      	adds	r3, #8
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	4798      	blx	r3
 800fc30:	e198      	b.n	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_RESPONSE) {
 800fc32:	683b      	ldr	r3, [r7, #0]
 800fc34:	3308      	adds	r3, #8
 800fc36:	781b      	ldrb	r3, [r3, #0]
 800fc38:	2b07      	cmp	r3, #7
 800fc3a:	d14c      	bne.n	800fcd6 <_ZN5BTHID7ACLDataEPh+0x614>
                                if(l2capinbuf[12] == sdp_scid[0] && l2capinbuf[13] == sdp_scid[1]) {
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	330c      	adds	r3, #12
 800fc40:	781a      	ldrb	r2, [r3, #0]
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	7edb      	ldrb	r3, [r3, #27]
 800fc46:	429a      	cmp	r2, r3
 800fc48:	d111      	bne.n	800fc6e <_ZN5BTHID7ACLDataEPh+0x5ac>
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	330d      	adds	r3, #13
 800fc4e:	781a      	ldrb	r2, [r3, #0]
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	7f1b      	ldrb	r3, [r3, #28]
 800fc54:	429a      	cmp	r2, r3
 800fc56:	d10a      	bne.n	800fc6e <_ZN5BTHID7ACLDataEPh+0x5ac>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	7a5a      	ldrb	r2, [r3, #9]
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_RESPONSE);
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	691b      	ldr	r3, [r3, #16]
 800fc64:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	611a      	str	r2, [r3, #16]
 800fc6c:	e17a      	b.n	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_scid[0] && l2capinbuf[13] == control_scid[1]) {
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	330c      	adds	r3, #12
 800fc72:	781a      	ldrb	r2, [r3, #0]
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	7d9b      	ldrb	r3, [r3, #22]
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	d111      	bne.n	800fca0 <_ZN5BTHID7ACLDataEPh+0x5de>
 800fc7c:	683b      	ldr	r3, [r7, #0]
 800fc7e:	330d      	adds	r3, #13
 800fc80:	781a      	ldrb	r2, [r3, #0]
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	7ddb      	ldrb	r3, [r3, #23]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d10a      	bne.n	800fca0 <_ZN5BTHID7ACLDataEPh+0x5de>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	7a5a      	ldrb	r2, [r3, #9]
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE);
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	691b      	ldr	r3, [r3, #16]
 800fc96:	f043 0208 	orr.w	r2, r3, #8
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	611a      	str	r2, [r3, #16]
 800fc9e:	e161      	b.n	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_scid[0] && l2capinbuf[13] == interrupt_scid[1]) {
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	330c      	adds	r3, #12
 800fca4:	781a      	ldrb	r2, [r3, #0]
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	7e1b      	ldrb	r3, [r3, #24]
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	f040 815a 	bne.w	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	330d      	adds	r3, #13
 800fcb4:	781a      	ldrb	r2, [r3, #0]
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	7e5b      	ldrb	r3, [r3, #25]
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	f040 8152 	bne.w	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	7a5a      	ldrb	r2, [r3, #9]
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	691b      	ldr	r3, [r3, #16]
 800fccc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	611a      	str	r2, [r3, #16]
 800fcd4:	e146      	b.n	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_INFORMATION_REQUEST) {
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	3308      	adds	r3, #8
 800fcda:	781b      	ldrb	r3, [r3, #0]
 800fcdc:	2b0a      	cmp	r3, #10
 800fcde:	f040 8141 	bne.w	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nInformation request"), 0x80);
#endif
                                identifier = l2capinbuf[9];
 800fce2:	683b      	ldr	r3, [r7, #0]
 800fce4:	7a5a      	ldrb	r2, [r3, #9]
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_information_response(hci_handle, identifier, l2capinbuf[12], l2capinbuf[13]);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	6898      	ldr	r0, [r3, #8]
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	8999      	ldrh	r1, [r3, #12]
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	7d1a      	ldrb	r2, [r3, #20]
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	330c      	adds	r3, #12
 800fcfa:	781c      	ldrb	r4, [r3, #0]
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	330d      	adds	r3, #13
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	9300      	str	r3, [sp, #0]
 800fd04:	4623      	mov	r3, r4
 800fd06:	f7fe fef5 	bl	800eaf4 <_ZN3BTD26l2cap_information_responseEthhh>
 800fd0a:	e12b      	b.n	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                identifier = l2capinbuf[9];
                                Notify(PSTR("\r\nL2CAP Unknown Signaling Command: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == sdp_dcid[0] && l2capinbuf[7] == sdp_dcid[1]) { // SDP
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	3306      	adds	r3, #6
 800fd10:	781a      	ldrb	r2, [r3, #0]
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800fd18:	429a      	cmp	r2, r3
 800fd1a:	f040 8087 	bne.w	800fe2c <_ZN5BTHID7ACLDataEPh+0x76a>
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	3307      	adds	r3, #7
 800fd22:	781a      	ldrb	r2, [r3, #0]
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fd2a:	429a      	cmp	r2, r3
 800fd2c:	d17e      	bne.n	800fe2c <_ZN5BTHID7ACLDataEPh+0x76a>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	3308      	adds	r3, #8
 800fd32:	781b      	ldrb	r3, [r3, #0]
 800fd34:	2b02      	cmp	r3, #2
 800fd36:	d131      	bne.n	800fd9c <_ZN5BTHID7ACLDataEPh+0x6da>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_SEARCH_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_SEARCH_RESPONSE;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2203      	movs	r2, #3
 800fd3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	7a5a      	ldrb	r2, [r3, #9]
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	7a9a      	ldrb	r2, [r3, #10]
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	2200      	movs	r2, #0
 800fd58:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2205      	movs	r2, #5
 800fd60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB TotalServiceRecordCount
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2200      	movs	r2, #0
 800fd68:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x00; // LSB TotalServiceRecordCount = 0
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2200      	movs	r2, #0
 800fd70:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                l2capoutbuf[7] = 0x00; // MSB CurrentServiceRecordCount
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2200      	movs	r2, #0
 800fd78:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // LSB CurrentServiceRecordCount = 0
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2200      	movs	r2, #0
 800fd80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2200      	movs	r2, #0
 800fd88:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	3328      	adds	r3, #40	; 0x28
 800fd90:	220a      	movs	r2, #10
 800fd92:	4619      	mov	r1, r3
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f000 fb6d 	bl	8010474 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800fd9a:	e0e0      	b.n	800ff5e <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_ATTRIBUTE_REQUEST) {
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	3308      	adds	r3, #8
 800fda0:	781b      	ldrb	r3, [r3, #0]
 800fda2:	2b04      	cmp	r3, #4
 800fda4:	d131      	bne.n	800fe0a <_ZN5BTHID7ACLDataEPh+0x748>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_ATTRIBUTE_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_ATTRIBUTE_RESPONSE;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2205      	movs	r2, #5
 800fdaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	7a5a      	ldrb	r2, [r3, #9]
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	7a9a      	ldrb	r2, [r3, #10]
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2205      	movs	r2, #5
 800fdce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB AttributeListByteCount
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x02; // LSB AttributeListByteCount = 2
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	2202      	movs	r2, #2
 800fdde:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                // TODO: What to send?
                                l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	2235      	movs	r2, #53	; 0x35
 800fde6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // Length = 0
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	2200      	movs	r2, #0
 800fdee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	3328      	adds	r3, #40	; 0x28
 800fdfe:	220a      	movs	r2, #10
 800fe00:	4619      	mov	r1, r3
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f000 fb36 	bl	8010474 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800fe08:	e0a9      	b.n	800ff5e <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST) {
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	3308      	adds	r3, #8
 800fe0e:	781b      	ldrb	r3, [r3, #0]
 800fe10:	2b06      	cmp	r3, #6
 800fe12:	f040 80a4 	bne.w	800ff5e <_ZN5BTHID7ACLDataEPh+0x89c>
                                for(uint8_t i = 0; i < length; i++) {
                                        D_PrintHex<uint8_t > (l2capinbuf[13 + i], 0x80);
                                        Notify(PSTR(" "), 0x80);
                                }
#endif
                                serviceNotSupported(l2capinbuf[9], l2capinbuf[10]); // The service is not supported
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	3309      	adds	r3, #9
 800fe1a:	7819      	ldrb	r1, [r3, #0]
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	330a      	adds	r3, #10
 800fe20:	781b      	ldrb	r3, [r3, #0]
 800fe22:	461a      	mov	r2, r3
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f000 fb3f 	bl	80104a8 <_ZN5BTHID19serviceNotSupportedEhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800fe2a:	e098      	b.n	800ff5e <_ZN5BTHID7ACLDataEPh+0x89c>
                        else {
                                Notify(PSTR("\r\nUnknown PDU: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == interrupt_dcid[0] && l2capinbuf[7] == interrupt_dcid[1]) { // l2cap_interrupt
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	3306      	adds	r3, #6
 800fe30:	781a      	ldrb	r2, [r3, #0]
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800fe38:	429a      	cmp	r2, r3
 800fe3a:	d162      	bne.n	800ff02 <_ZN5BTHID7ACLDataEPh+0x840>
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	3307      	adds	r3, #7
 800fe40:	781a      	ldrb	r2, [r3, #0]
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800fe48:	429a      	cmp	r2, r3
 800fe4a:	d15a      	bne.n	800ff02 <_ZN5BTHID7ACLDataEPh+0x840>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA1) { // HID BT DATA (0xA0) | Report Type (Input 0x01)
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	3308      	adds	r3, #8
 800fe50:	781b      	ldrb	r3, [r3, #0]
 800fe52:	2ba1      	cmp	r3, #161	; 0xa1
 800fe54:	f040 8085 	bne.w	800ff62 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                lastBtDataInputIntMillis = (uint32_t)millis(); // Store the timestamp of the report
 800fe58:	f7f1 ffc6 	bl	8001de8 <HAL_GetTick>
 800fe5c:	4602      	mov	r2, r0
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	675a      	str	r2, [r3, #116]	; 0x74

                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	3305      	adds	r3, #5
 800fe66:	781b      	ldrb	r3, [r3, #0]
 800fe68:	021b      	lsls	r3, r3, #8
 800fe6a:	b21a      	sxth	r2, r3
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	3304      	adds	r3, #4
 800fe70:	781b      	ldrb	r3, [r3, #0]
 800fe72:	b21b      	sxth	r3, r3
 800fe74:	4313      	orrs	r3, r2
 800fe76:	b21b      	sxth	r3, r3
 800fe78:	81fb      	strh	r3, [r7, #14]
                                ParseBTHIDData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	3314      	adds	r3, #20
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	89fa      	ldrh	r2, [r7, #14]
 800fe84:	b2d2      	uxtb	r2, r2
 800fe86:	3a01      	subs	r2, #1
 800fe88:	b2d1      	uxtb	r1, r2
 800fe8a:	683a      	ldr	r2, [r7, #0]
 800fe8c:	3209      	adds	r2, #9
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	4798      	blx	r3

                                switch(l2capinbuf[9]) { // Report ID
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	3309      	adds	r3, #9
 800fe96:	781b      	ldrb	r3, [r3, #0]
 800fe98:	2b01      	cmp	r3, #1
 800fe9a:	d002      	beq.n	800fea2 <_ZN5BTHID7ACLDataEPh+0x7e0>
 800fe9c:	2b02      	cmp	r3, #2
 800fe9e:	d016      	beq.n	800fece <_ZN5BTHID7ACLDataEPh+0x80c>
                        } else {
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nUnhandled L2CAP interrupt report: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
#endif
                        }
 800fea0:	e05f      	b.n	800ff62 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                if(pRptParser[KEYBOARD_PARSER_ID])
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	6a1b      	ldr	r3, [r3, #32]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d027      	beq.n	800fefa <_ZN5BTHID7ACLDataEPh+0x838>
                                                        pRptParser[KEYBOARD_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6a18      	ldr	r0, [r3, #32]
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	6a1b      	ldr	r3, [r3, #32]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	681c      	ldr	r4, [r3, #0]
 800feb6:	89fb      	ldrh	r3, [r7, #14]
 800feb8:	b2db      	uxtb	r3, r3
 800feba:	3b02      	subs	r3, #2
 800febc:	b2da      	uxtb	r2, r3
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	330a      	adds	r3, #10
 800fec2:	9300      	str	r3, [sp, #0]
 800fec4:	4613      	mov	r3, r2
 800fec6:	2200      	movs	r2, #0
 800fec8:	6879      	ldr	r1, [r7, #4]
 800feca:	47a0      	blx	r4
                                                break;
 800fecc:	e015      	b.n	800fefa <_ZN5BTHID7ACLDataEPh+0x838>
                                                if(pRptParser[MOUSE_PARSER_ID])
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d013      	beq.n	800fefe <_ZN5BTHID7ACLDataEPh+0x83c>
                                                        pRptParser[MOUSE_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	681c      	ldr	r4, [r3, #0]
 800fee2:	89fb      	ldrh	r3, [r7, #14]
 800fee4:	b2db      	uxtb	r3, r3
 800fee6:	3b02      	subs	r3, #2
 800fee8:	b2da      	uxtb	r2, r3
 800feea:	683b      	ldr	r3, [r7, #0]
 800feec:	330a      	adds	r3, #10
 800feee:	9300      	str	r3, [sp, #0]
 800fef0:	4613      	mov	r3, r2
 800fef2:	2200      	movs	r2, #0
 800fef4:	6879      	ldr	r1, [r7, #4]
 800fef6:	47a0      	blx	r4
                                                break;
 800fef8:	e001      	b.n	800fefe <_ZN5BTHID7ACLDataEPh+0x83c>
                                                break;
 800fefa:	bf00      	nop
 800fefc:	e031      	b.n	800ff62 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                break;
 800fefe:	bf00      	nop
                        }
 800ff00:	e02f      	b.n	800ff62 <_ZN5BTHID7ACLDataEPh+0x8a0>
                } else if(l2capinbuf[6] == control_dcid[0] && l2capinbuf[7] == control_dcid[1]) { // l2cap_control
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	3306      	adds	r3, #6
 800ff06:	781a      	ldrb	r2, [r3, #0]
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	d128      	bne.n	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	3307      	adds	r3, #7
 800ff16:	781a      	ldrb	r2, [r3, #0]
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	d120      	bne.n	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA3) { // HID BT DATA (0xA0) | Report Type (Feature 0x03)
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	3308      	adds	r3, #8
 800ff26:	781b      	ldrb	r3, [r3, #0]
 800ff28:	2ba3      	cmp	r3, #163	; 0xa3
 800ff2a:	d11b      	bne.n	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	3305      	adds	r3, #5
 800ff30:	781b      	ldrb	r3, [r3, #0]
 800ff32:	021b      	lsls	r3, r3, #8
 800ff34:	b21a      	sxth	r2, r3
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	3304      	adds	r3, #4
 800ff3a:	781b      	ldrb	r3, [r3, #0]
 800ff3c:	b21b      	sxth	r3, r3
 800ff3e:	4313      	orrs	r3, r2
 800ff40:	b21b      	sxth	r3, r3
 800ff42:	81bb      	strh	r3, [r7, #12]
                                ParseBTHIDControlData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	3318      	adds	r3, #24
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	89ba      	ldrh	r2, [r7, #12]
 800ff4e:	b2d2      	uxtb	r2, r2
 800ff50:	3a01      	subs	r2, #1
 800ff52:	b2d1      	uxtb	r1, r2
 800ff54:	683a      	ldr	r2, [r7, #0]
 800ff56:	3209      	adds	r2, #9
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	4798      	blx	r3
 800ff5c:	e002      	b.n	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800ff5e:	bf00      	nop
 800ff60:	e000      	b.n	800ff64 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        }
 800ff62:	bf00      	nop
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
                }
#endif
                SDP_task();
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f000 f807 	bl	800ff78 <_ZN5BTHID8SDP_taskEv>
                L2CAP_task();
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	f000 f8b4 	bl	80100d8 <_ZN5BTHID10L2CAP_taskEv>
        }
}
 800ff70:	bf00      	nop
 800ff72:	3714      	adds	r7, #20
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd90      	pop	{r4, r7, pc}

0800ff78 <_ZN5BTHID8SDP_taskEv>:

void BTHID::SDP_task() {
 800ff78:	b5b0      	push	{r4, r5, r7, lr}
 800ff7a:	b084      	sub	sp, #16
 800ff7c:	af02      	add	r7, sp, #8
 800ff7e:	6078      	str	r0, [r7, #4]
        switch(l2cap_sdp_state) {
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	7e9b      	ldrb	r3, [r3, #26]
 800ff84:	2b0e      	cmp	r3, #14
 800ff86:	f000 8084 	beq.w	8010092 <_ZN5BTHID8SDP_taskEv+0x11a>
 800ff8a:	2b0e      	cmp	r3, #14
 800ff8c:	f300 809f 	bgt.w	80100ce <_ZN5BTHID8SDP_taskEv+0x156>
 800ff90:	2b0a      	cmp	r3, #10
 800ff92:	d002      	beq.n	800ff9a <_ZN5BTHID8SDP_taskEv+0x22>
 800ff94:	2b0b      	cmp	r3, #11
 800ff96:	d068      	beq.n	801006a <_ZN5BTHID8SDP_taskEv+0xf2>
                                hci_handle = -1; // Reset handle
                                Reset();
                        }
                        break;
        }
}
 800ff98:	e099      	b.n	80100ce <_ZN5BTHID8SDP_taskEv+0x156>
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST)) {
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	691b      	ldr	r3, [r3, #16]
 800ff9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d041      	beq.n	801002a <_ZN5BTHID8SDP_taskEv+0xb2>
                                l2cap_clear_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST); // Clear flag
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	691b      	ldr	r3, [r3, #16]
 800ffaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	611a      	str	r2, [r3, #16]
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, PENDING);
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6898      	ldr	r0, [r3, #8]
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	8999      	ldrh	r1, [r3, #12]
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	7d1a      	ldrb	r2, [r3, #20]
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	331b      	adds	r3, #27
 800ffc8:	2501      	movs	r5, #1
 800ffca:	9501      	str	r5, [sp, #4]
 800ffcc:	9300      	str	r3, [sp, #0]
 800ffce:	4623      	mov	r3, r4
 800ffd0:	f7fe fc2b 	bl	800e82a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800ffd4:	2001      	movs	r0, #1
 800ffd6:	f7f1 ff13 	bl	8001e00 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, SUCCESSFUL);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	6898      	ldr	r0, [r3, #8]
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	8999      	ldrh	r1, [r3, #12]
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	7d1a      	ldrb	r2, [r3, #20]
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	331b      	adds	r3, #27
 800fff0:	2500      	movs	r5, #0
 800fff2:	9501      	str	r5, [sp, #4]
 800fff4:	9300      	str	r3, [sp, #0]
 800fff6:	4623      	mov	r3, r4
 800fff8:	f7fe fc17 	bl	800e82a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	7d1b      	ldrb	r3, [r3, #20]
 8010000:	3301      	adds	r3, #1
 8010002:	b2da      	uxtb	r2, r3
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	751a      	strb	r2, [r3, #20]
                                delay(1);
 8010008:	2001      	movs	r0, #1
 801000a:	f7f1 fef9 	bl	8001e00 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	6898      	ldr	r0, [r3, #8]
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	8999      	ldrh	r1, [r3, #12]
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	7d1a      	ldrb	r2, [r3, #20]
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	331b      	adds	r3, #27
 801001e:	f7fe fc51 	bl	800e8c4 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_sdp_state = L2CAP_SDP_SUCCESS;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	220b      	movs	r2, #11
 8010026:	769a      	strb	r2, [r3, #26]
                        break;
 8010028:	e04c      	b.n	80100c4 <_ZN5BTHID8SDP_taskEv+0x14c>
                        } else if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST)) {
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	691b      	ldr	r3, [r3, #16]
 801002e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010032:	2b00      	cmp	r3, #0
 8010034:	d046      	beq.n	80100c4 <_ZN5BTHID8SDP_taskEv+0x14c>
                                l2cap_clear_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST); // Clear flag
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	691b      	ldr	r3, [r3, #16]
 801003a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	611a      	str	r2, [r3, #16]
                                SDPConnected = false;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	2200      	movs	r2, #0
 8010046:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                pBtd->l2cap_disconnection_response(hci_handle, identifier, sdp_dcid, sdp_scid);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	6898      	ldr	r0, [r3, #8]
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	8999      	ldrh	r1, [r3, #12]
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	7d1a      	ldrb	r2, [r3, #20]
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	331b      	adds	r3, #27
 8010060:	9300      	str	r3, [sp, #0]
 8010062:	4623      	mov	r3, r4
 8010064:	f7fe fd09 	bl	800ea7a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                        break;
 8010068:	e02c      	b.n	80100c4 <_ZN5BTHID8SDP_taskEv+0x14c>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS)) {
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	691b      	ldr	r3, [r3, #16]
 801006e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010072:	2b00      	cmp	r3, #0
 8010074:	d028      	beq.n	80100c8 <_ZN5BTHID8SDP_taskEv+0x150>
                                l2cap_clear_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS); // Clear flag
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	691b      	ldr	r3, [r3, #16]
 801007a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	611a      	str	r2, [r3, #16]
                                SDPConnected = true;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	2201      	movs	r2, #1
 8010086:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                l2cap_sdp_state = L2CAP_SDP_WAIT;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	220a      	movs	r2, #10
 801008e:	769a      	strb	r2, [r3, #26]
                        break;
 8010090:	e01a      	b.n	80100c8 <_ZN5BTHID8SDP_taskEv+0x150>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_RESPONSE)) {
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	691b      	ldr	r3, [r3, #16]
 8010096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801009a:	2b00      	cmp	r3, #0
 801009c:	d016      	beq.n	80100cc <_ZN5BTHID8SDP_taskEv+0x154>
                                pBtd->hci_disconnect(hci_handle);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	689a      	ldr	r2, [r3, #8]
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	899b      	ldrh	r3, [r3, #12]
 80100a6:	4619      	mov	r1, r3
 80100a8:	4610      	mov	r0, r2
 80100aa:	f7fe fa92 	bl	800e5d2 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80100b4:	819a      	strh	r2, [r3, #12]
                                Reset();
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	3308      	adds	r3, #8
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	4798      	blx	r3
                        break;
 80100c2:	e003      	b.n	80100cc <_ZN5BTHID8SDP_taskEv+0x154>
                        break;
 80100c4:	bf00      	nop
 80100c6:	e002      	b.n	80100ce <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 80100c8:	bf00      	nop
 80100ca:	e000      	b.n	80100ce <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 80100cc:	bf00      	nop
}
 80100ce:	bf00      	nop
 80100d0:	3708      	adds	r7, #8
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080100d8 <_ZN5BTHID10L2CAP_taskEv>:

void BTHID::L2CAP_task() {
 80100d8:	b5b0      	push	{r4, r5, r7, lr}
 80100da:	b084      	sub	sp, #16
 80100dc:	af02      	add	r7, sp, #8
 80100de:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80100e6:	3b01      	subs	r3, #1
 80100e8:	2b08      	cmp	r3, #8
 80100ea:	f200 812c 	bhi.w	8010346 <_ZN5BTHID10L2CAP_taskEv+0x26e>
 80100ee:	a201      	add	r2, pc, #4	; (adr r2, 80100f4 <_ZN5BTHID10L2CAP_taskEv+0x1c>)
 80100f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100f4:	08010325 	.word	0x08010325
 80100f8:	080101bf 	.word	0x080101bf
 80100fc:	080101f7 	.word	0x080101f7
 8010100:	08010119 	.word	0x08010119
 8010104:	080102f1 	.word	0x080102f1
 8010108:	08010137 	.word	0x08010137
 801010c:	0801023f 	.word	0x0801023f
 8010110:	08010275 	.word	0x08010275
 8010114:	080102b1 	.word	0x080102b1
                        /* These states are used if the HID device is the host */
                case L2CAP_CONTROL_SUCCESS:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	691b      	ldr	r3, [r3, #16]
 801011c:	f003 0302 	and.w	r3, r3, #2
 8010120:	2b00      	cmp	r3, #0
 8010122:	f000 8101 	beq.w	8010328 <_ZN5BTHID10L2CAP_taskEv+0x250>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Control Successfully Configured"), 0x80);
#endif
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	f000 f9f9 	bl	801051e <_ZN5BTHID11setProtocolEv>
                                l2cap_state = L2CAP_INTERRUPT_SETUP;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2206      	movs	r2, #6
 8010130:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8010134:	e0f8      	b.n	8010328 <_ZN5BTHID10L2CAP_taskEv+0x250>

                case L2CAP_INTERRUPT_SETUP:
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST)) {
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	691b      	ldr	r3, [r3, #16]
 801013a:	f003 0310 	and.w	r3, r3, #16
 801013e:	2b00      	cmp	r3, #0
 8010140:	f000 80f4 	beq.w	801032c <_ZN5BTHID10L2CAP_taskEv+0x254>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Interrupt Incoming Connection Request"), 0x80);
#endif
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, PENDING);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6898      	ldr	r0, [r3, #8]
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	8999      	ldrh	r1, [r3, #12]
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	7d1a      	ldrb	r2, [r3, #20]
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	3318      	adds	r3, #24
 801015a:	2501      	movs	r5, #1
 801015c:	9501      	str	r5, [sp, #4]
 801015e:	9300      	str	r3, [sp, #0]
 8010160:	4623      	mov	r3, r4
 8010162:	f7fe fb62 	bl	800e82a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8010166:	2001      	movs	r0, #1
 8010168:	f7f1 fe4a 	bl	8001e00 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, SUCCESSFUL);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6898      	ldr	r0, [r3, #8]
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	8999      	ldrh	r1, [r3, #12]
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	7d1a      	ldrb	r2, [r3, #20]
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	3318      	adds	r3, #24
 8010182:	2500      	movs	r5, #0
 8010184:	9501      	str	r5, [sp, #4]
 8010186:	9300      	str	r3, [sp, #0]
 8010188:	4623      	mov	r3, r4
 801018a:	f7fe fb4e 	bl	800e82a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	7d1b      	ldrb	r3, [r3, #20]
 8010192:	3301      	adds	r3, #1
 8010194:	b2da      	uxtb	r2, r3
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	751a      	strb	r2, [r3, #20]
                                delay(1);
 801019a:	2001      	movs	r0, #1
 801019c:	f7f1 fe30 	bl	8001e00 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	6898      	ldr	r0, [r3, #8]
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	8999      	ldrh	r1, [r3, #12]
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	7d1a      	ldrb	r2, [r3, #20]
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	3318      	adds	r3, #24
 80101b0:	f7fe fb88 	bl	800e8c4 <_ZN3BTD20l2cap_config_requestEthPh>

                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	2208      	movs	r2, #8
 80101b8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80101bc:	e0b6      	b.n	801032c <_ZN5BTHID10L2CAP_taskEv+0x254>

                        /* These states are used if the Arduino is the host */
                case L2CAP_CONTROL_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONTROL_CONNECTED)) {
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	691b      	ldr	r3, [r3, #16]
 80101c2:	f003 0304 	and.w	r3, r3, #4
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	f000 80b2 	beq.w	8010330 <_ZN5BTHID10L2CAP_taskEv+0x258>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Config Request"), 0x80);
#endif
                                identifier++;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	7d1b      	ldrb	r3, [r3, #20]
 80101d0:	3301      	adds	r3, #1
 80101d2:	b2da      	uxtb	r2, r3
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	6898      	ldr	r0, [r3, #8]
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	8999      	ldrh	r1, [r3, #12]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	7d1a      	ldrb	r2, [r3, #20]
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	3316      	adds	r3, #22
 80101e8:	f7fe fb6c 	bl	800e8c4 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_CONFIG_REQUEST;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2203      	movs	r2, #3
 80101f0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80101f4:	e09c      	b.n	8010330 <_ZN5BTHID10L2CAP_taskEv+0x258>

                case L2CAP_CONTROL_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	691b      	ldr	r3, [r3, #16]
 80101fa:	f003 0302 	and.w	r3, r3, #2
 80101fe:	2b00      	cmp	r3, #0
 8010200:	f000 8098 	beq.w	8010334 <_ZN5BTHID10L2CAP_taskEv+0x25c>
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 8010204:	6878      	ldr	r0, [r7, #4]
 8010206:	f000 f98a 	bl	801051e <_ZN5BTHID11setProtocolEv>
                                delay(1); // Short delay between commands - just to be sure
 801020a:	2001      	movs	r0, #1
 801020c:	f7f1 fdf8 	bl	8001e00 <HAL_Delay>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Connection Request"), 0x80);
#endif
                                identifier++;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	7d1b      	ldrb	r3, [r3, #20]
 8010214:	3301      	adds	r3, #1
 8010216:	b2da      	uxtb	r2, r3
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, interrupt_dcid, HID_INTR_PSM);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	6898      	ldr	r0, [r3, #8]
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	8999      	ldrh	r1, [r3, #12]
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	7d1a      	ldrb	r2, [r3, #20]
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	336d      	adds	r3, #109	; 0x6d
 801022c:	2413      	movs	r4, #19
 801022e:	9400      	str	r4, [sp, #0]
 8010230:	f7fe fabd 	bl	800e7ae <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_INTERRUPT_CONNECT_REQUEST;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	2207      	movs	r2, #7
 8010238:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801023c:	e07a      	b.n	8010334 <_ZN5BTHID10L2CAP_taskEv+0x25c>

                case L2CAP_INTERRUPT_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_INTERRUPT_CONNECTED)) {
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	691b      	ldr	r3, [r3, #16]
 8010242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010246:	2b00      	cmp	r3, #0
 8010248:	d076      	beq.n	8010338 <_ZN5BTHID10L2CAP_taskEv+0x260>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Config Request"), 0x80);
#endif
                                identifier++;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	7d1b      	ldrb	r3, [r3, #20]
 801024e:	3301      	adds	r3, #1
 8010250:	b2da      	uxtb	r2, r3
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	6898      	ldr	r0, [r3, #8]
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	8999      	ldrh	r1, [r3, #12]
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	7d1a      	ldrb	r2, [r3, #20]
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	3318      	adds	r3, #24
 8010266:	f7fe fb2d 	bl	800e8c4 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	2208      	movs	r2, #8
 801026e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8010272:	e061      	b.n	8010338 <_ZN5BTHID10L2CAP_taskEv+0x260>

                case L2CAP_INTERRUPT_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS)) { // Now the HID channels is established
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	691b      	ldr	r3, [r3, #16]
 8010278:	f003 0320 	and.w	r3, r3, #32
 801027c:	2b00      	cmp	r3, #0
 801027e:	d05d      	beq.n	801033c <_ZN5BTHID10L2CAP_taskEv+0x264>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Channels Established"), 0x80);
#endif
                                pBtd->connectToHIDDevice = false;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	689b      	ldr	r3, [r3, #8]
 8010284:	2200      	movs	r2, #0
 8010286:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                pBtd->pairWithHIDDevice = false;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	689b      	ldr	r3, [r3, #8]
 801028e:	2200      	movs	r2, #0
 8010290:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                connected = true;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2201      	movs	r2, #1
 8010298:	755a      	strb	r2, [r3, #21]
                                onInit();
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	3310      	adds	r3, #16
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	4798      	blx	r3
                                l2cap_state = L2CAP_DONE;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	2201      	movs	r2, #1
 80102aa:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80102ae:	e045      	b.n	801033c <_ZN5BTHID10L2CAP_taskEv+0x264>

                case L2CAP_DONE:
                        break;

                case L2CAP_INTERRUPT_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE)) {
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	691b      	ldr	r3, [r3, #16]
 80102b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d041      	beq.n	8010340 <_ZN5BTHID10L2CAP_taskEv+0x268>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Interrupt Channel"), 0x80);
#endif
                                identifier++;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	7d1b      	ldrb	r3, [r3, #20]
 80102c0:	3301      	adds	r3, #1
 80102c2:	b2da      	uxtb	r2, r3
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_disconnection_request(hci_handle, identifier, control_scid, control_dcid);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	6898      	ldr	r0, [r3, #8]
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	8999      	ldrh	r1, [r3, #12]
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	7d1a      	ldrb	r2, [r3, #20]
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f103 0416 	add.w	r4, r3, #22
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	336b      	adds	r3, #107	; 0x6b
 80102de:	9300      	str	r3, [sp, #0]
 80102e0:	4623      	mov	r3, r4
 80102e2:	f7fe fb8d 	bl	800ea00 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
                                l2cap_state = L2CAP_CONTROL_DISCONNECT;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	2205      	movs	r2, #5
 80102ea:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80102ee:	e027      	b.n	8010340 <_ZN5BTHID10L2CAP_taskEv+0x268>

                case L2CAP_CONTROL_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE)) {
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	691b      	ldr	r3, [r3, #16]
 80102f4:	f003 0308 	and.w	r3, r3, #8
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d023      	beq.n	8010344 <_ZN5BTHID10L2CAP_taskEv+0x26c>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Control Channel"), 0x80);
#endif
                                pBtd->hci_disconnect(hci_handle);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	689a      	ldr	r2, [r3, #8]
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	899b      	ldrh	r3, [r3, #12]
 8010304:	4619      	mov	r1, r3
 8010306:	4610      	mov	r0, r2
 8010308:	f7fe f963 	bl	800e5d2 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010312:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2200      	movs	r2, #0
 8010318:	611a      	str	r2, [r3, #16]
                                l2cap_state = L2CAP_WAIT;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	2200      	movs	r2, #0
 801031e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8010322:	e00f      	b.n	8010344 <_ZN5BTHID10L2CAP_taskEv+0x26c>
                        break;
 8010324:	bf00      	nop
 8010326:	e00e      	b.n	8010346 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010328:	bf00      	nop
 801032a:	e00c      	b.n	8010346 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 801032c:	bf00      	nop
 801032e:	e00a      	b.n	8010346 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010330:	bf00      	nop
 8010332:	e008      	b.n	8010346 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010334:	bf00      	nop
 8010336:	e006      	b.n	8010346 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010338:	bf00      	nop
 801033a:	e004      	b.n	8010346 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 801033c:	bf00      	nop
 801033e:	e002      	b.n	8010346 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010340:	bf00      	nop
 8010342:	e000      	b.n	8010346 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010344:	bf00      	nop
        }
}
 8010346:	bf00      	nop
 8010348:	3708      	adds	r7, #8
 801034a:	46bd      	mov	sp, r7
 801034c:	bdb0      	pop	{r4, r5, r7, pc}
 801034e:	bf00      	nop

08010350 <_ZN5BTHID3RunEv>:

void BTHID::Run() {
 8010350:	b5b0      	push	{r4, r5, r7, lr}
 8010352:	b084      	sub	sp, #16
 8010354:	af02      	add	r7, sp, #8
 8010356:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 801035e:	2b00      	cmp	r3, #0
 8010360:	f040 8084 	bne.w	801046c <_ZN5BTHID3RunEv+0x11c>
                case L2CAP_WAIT:
                        if(pBtd->connectToHIDDevice && !pBtd->l2capConnectionClaimed && !connected && !activeConnection) {
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	689b      	ldr	r3, [r3, #8]
 8010368:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801036c:	2b00      	cmp	r3, #0
 801036e:	d03a      	beq.n	80103e6 <_ZN5BTHID3RunEv+0x96>
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	689b      	ldr	r3, [r3, #8]
 8010374:	7a5b      	ldrb	r3, [r3, #9]
 8010376:	f083 0301 	eor.w	r3, r3, #1
 801037a:	b2db      	uxtb	r3, r3
 801037c:	2b00      	cmp	r3, #0
 801037e:	d032      	beq.n	80103e6 <_ZN5BTHID3RunEv+0x96>
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	7d5b      	ldrb	r3, [r3, #21]
 8010384:	f083 0301 	eor.w	r3, r3, #1
 8010388:	b2db      	uxtb	r3, r3
 801038a:	2b00      	cmp	r3, #0
 801038c:	d02b      	beq.n	80103e6 <_ZN5BTHID3RunEv+0x96>
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8010394:	f083 0301 	eor.w	r3, r3, #1
 8010398:	b2db      	uxtb	r3, r3
 801039a:	2b00      	cmp	r3, #0
 801039c:	d023      	beq.n	80103e6 <_ZN5BTHID3RunEv+0x96>
                                pBtd->l2capConnectionClaimed = true;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	689b      	ldr	r3, [r3, #8]
 80103a2:	2201      	movs	r2, #1
 80103a4:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	2201      	movs	r2, #1
 80103aa:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Connection Request"), 0x80);
#endif
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	689b      	ldr	r3, [r3, #8]
 80103b2:	8b5a      	ldrh	r2, [r3, #26]
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2200      	movs	r2, #0
 80103bc:	611a      	str	r2, [r3, #16]
                                identifier = 0;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	2200      	movs	r2, #0
 80103c2:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, control_dcid, HID_CTRL_PSM);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6898      	ldr	r0, [r3, #8]
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	8999      	ldrh	r1, [r3, #12]
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	7d1a      	ldrb	r2, [r3, #20]
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	336b      	adds	r3, #107	; 0x6b
 80103d4:	2411      	movs	r4, #17
 80103d6:	9400      	str	r4, [sp, #0]
 80103d8:	f7fe f9e9 	bl	800e7ae <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_CONTROL_CONNECT_REQUEST;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2202      	movs	r2, #2
 80103e0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                                identifier++;
                                delay(1);
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
                        }
                        break;
 80103e4:	e041      	b.n	801046a <_ZN5BTHID3RunEv+0x11a>
                        } else if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST)) {
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	691b      	ldr	r3, [r3, #16]
 80103ea:	f003 0301 	and.w	r3, r3, #1
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d03b      	beq.n	801046a <_ZN5BTHID3RunEv+0x11a>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, PENDING);
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6898      	ldr	r0, [r3, #8]
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	8999      	ldrh	r1, [r3, #12]
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	7d1a      	ldrb	r2, [r3, #20]
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	3316      	adds	r3, #22
 8010408:	2501      	movs	r5, #1
 801040a:	9501      	str	r5, [sp, #4]
 801040c:	9300      	str	r3, [sp, #0]
 801040e:	4623      	mov	r3, r4
 8010410:	f7fe fa0b 	bl	800e82a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8010414:	2001      	movs	r0, #1
 8010416:	f7f1 fcf3 	bl	8001e00 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, SUCCESSFUL);
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	6898      	ldr	r0, [r3, #8]
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	8999      	ldrh	r1, [r3, #12]
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	7d1a      	ldrb	r2, [r3, #20]
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	3316      	adds	r3, #22
 8010430:	2500      	movs	r5, #0
 8010432:	9501      	str	r5, [sp, #4]
 8010434:	9300      	str	r3, [sp, #0]
 8010436:	4623      	mov	r3, r4
 8010438:	f7fe f9f7 	bl	800e82a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	7d1b      	ldrb	r3, [r3, #20]
 8010440:	3301      	adds	r3, #1
 8010442:	b2da      	uxtb	r2, r3
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	751a      	strb	r2, [r3, #20]
                                delay(1);
 8010448:	2001      	movs	r0, #1
 801044a:	f7f1 fcd9 	bl	8001e00 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6898      	ldr	r0, [r3, #8]
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	8999      	ldrh	r1, [r3, #12]
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	7d1a      	ldrb	r2, [r3, #20]
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	3316      	adds	r3, #22
 801045e:	f7fe fa31 	bl	800e8c4 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2204      	movs	r2, #4
 8010466:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        break;
 801046a:	bf00      	nop
        }
}
 801046c:	bf00      	nop
 801046e:	3708      	adds	r7, #8
 8010470:	46bd      	mov	sp, r7
 8010472:	bdb0      	pop	{r4, r5, r7, pc}

08010474 <_ZN5BTHID11SDP_CommandEPhh>:

void BTHID::SDP_Command(uint8_t* data, uint8_t nbytes) { // See page 223 in the Bluetooth specs
 8010474:	b590      	push	{r4, r7, lr}
 8010476:	b087      	sub	sp, #28
 8010478:	af02      	add	r7, sp, #8
 801047a:	60f8      	str	r0, [r7, #12]
 801047c:	60b9      	str	r1, [r7, #8]
 801047e:	4613      	mov	r3, r2
 8010480:	71fb      	strb	r3, [r7, #7]
        pBtd->L2CAP_Command(hci_handle, data, nbytes, sdp_scid[0], sdp_scid[1]);
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	6898      	ldr	r0, [r3, #8]
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	8999      	ldrh	r1, [r3, #12]
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	7edb      	ldrb	r3, [r3, #27]
 801048e:	68fa      	ldr	r2, [r7, #12]
 8010490:	7f12      	ldrb	r2, [r2, #28]
 8010492:	79fc      	ldrb	r4, [r7, #7]
 8010494:	9201      	str	r2, [sp, #4]
 8010496:	9300      	str	r3, [sp, #0]
 8010498:	4623      	mov	r3, r4
 801049a:	68ba      	ldr	r2, [r7, #8]
 801049c:	f7fe f8f8 	bl	800e690 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 80104a0:	bf00      	nop
 80104a2:	3714      	adds	r7, #20
 80104a4:	46bd      	mov	sp, r7
 80104a6:	bd90      	pop	{r4, r7, pc}

080104a8 <_ZN5BTHID19serviceNotSupportedEhh>:

void BTHID::serviceNotSupported(uint8_t transactionIDHigh, uint8_t transactionIDLow) { // See page 235 in the Bluetooth specs
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b082      	sub	sp, #8
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
 80104b0:	460b      	mov	r3, r1
 80104b2:	70fb      	strb	r3, [r7, #3]
 80104b4:	4613      	mov	r3, r2
 80104b6:	70bb      	strb	r3, [r7, #2]
        l2capoutbuf[0] = SDP_SERVICE_SEARCH_ATTRIBUTE_RESPONSE;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2207      	movs	r2, #7
 80104bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        l2capoutbuf[1] = transactionIDHigh;
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	78fa      	ldrb	r2, [r7, #3]
 80104c4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        l2capoutbuf[2] = transactionIDLow;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	78ba      	ldrb	r2, [r7, #2]
 80104cc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        l2capoutbuf[3] = 0x00; // MSB Parameter Length
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	2200      	movs	r2, #0
 80104d4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2205      	movs	r2, #5
 80104dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        l2capoutbuf[5] = 0x00; // MSB AttributeListsByteCount
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2200      	movs	r2, #0
 80104e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        l2capoutbuf[6] = 0x02; // LSB AttributeListsByteCount = 2
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2202      	movs	r2, #2
 80104ec:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

        /* Attribute ID/Value Sequence: */
        l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2235      	movs	r2, #53	; 0x35
 80104f4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        l2capoutbuf[8] = 0x00; // Length = 0
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2200      	movs	r2, #0
 80104fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        l2capoutbuf[9] = 0x00; // No continuation state
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2200      	movs	r2, #0
 8010504:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        SDP_Command(l2capoutbuf, 10);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	3328      	adds	r3, #40	; 0x28
 801050c:	220a      	movs	r2, #10
 801050e:	4619      	mov	r1, r3
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	f7ff ffaf 	bl	8010474 <_ZN5BTHID11SDP_CommandEPhh>
}
 8010516:	bf00      	nop
 8010518:	3708      	adds	r7, #8
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}

0801051e <_ZN5BTHID11setProtocolEv>:

/************************************************************/
/*                    HID Commands                          */

/************************************************************/
void BTHID::setProtocol() {
 801051e:	b590      	push	{r4, r7, lr}
 8010520:	b087      	sub	sp, #28
 8010522:	af02      	add	r7, sp, #8
 8010524:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nSet protocol mode: "), 0x80);
        D_PrintHex<uint8_t > (protocolMode, 0x80);
#endif
        if (protocolMode != USB_HID_BOOT_PROTOCOL && protocolMode != HID_RPT_PROTOCOL) {
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801052c:	2b00      	cmp	r3, #0
 801052e:	d008      	beq.n	8010542 <_ZN5BTHID11setProtocolEv+0x24>
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8010536:	2b01      	cmp	r3, #1
 8010538:	d003      	beq.n	8010542 <_ZN5BTHID11setProtocolEv+0x24>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nNot a valid protocol mode. Using Boot protocol instead."), 0x80);
#endif
                protocolMode = USB_HID_BOOT_PROTOCOL; // Use Boot Protocol by default
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	2200      	movs	r2, #0
 801053e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        }
        uint8_t command = 0x70 | protocolMode; // Set Protocol, see Bluetooth HID specs page 33
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8010548:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 801054c:	b2db      	uxtb	r3, r3
 801054e:	73fb      	strb	r3, [r7, #15]
        pBtd->L2CAP_Command(hci_handle, &command, 1, control_scid[0], control_scid[1]);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	6898      	ldr	r0, [r3, #8]
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	8999      	ldrh	r1, [r3, #12]
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	7d9b      	ldrb	r3, [r3, #22]
 801055c:	687a      	ldr	r2, [r7, #4]
 801055e:	7dd2      	ldrb	r2, [r2, #23]
 8010560:	f107 040f 	add.w	r4, r7, #15
 8010564:	9201      	str	r2, [sp, #4]
 8010566:	9300      	str	r3, [sp, #0]
 8010568:	2301      	movs	r3, #1
 801056a:	4622      	mov	r2, r4
 801056c:	f7fe f890 	bl	800e690 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8010570:	bf00      	nop
 8010572:	3714      	adds	r7, #20
 8010574:	46bd      	mov	sp, r7
 8010576:	bd90      	pop	{r4, r7, pc}

08010578 <_ZN9PS4Parser9checkDpadE10ButtonEnum>:
};

// To enable serial debugging see "settings.h"
//#define PRINTREPORT // Uncomment to print the report send by the PS4 Controller

bool PS4Parser::checkDpad(ButtonEnum b) {
 8010578:	b480      	push	{r7}
 801057a:	b083      	sub	sp, #12
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
 8010580:	460b      	mov	r3, r1
 8010582:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 8010584:	78fb      	ldrb	r3, [r7, #3]
 8010586:	2b03      	cmp	r3, #3
 8010588:	d86e      	bhi.n	8010668 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf0>
 801058a:	a201      	add	r2, pc, #4	; (adr r2, 8010590 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x18>)
 801058c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010590:	080105a1 	.word	0x080105a1
 8010594:	080105d3 	.word	0x080105d3
 8010598:	08010605 	.word	0x08010605
 801059c:	08010637 	.word	0x08010637
                case UP:
                        return ps4Data.btn.dpad == DPAD_LEFT_UP || ps4Data.btn.dpad == DPAD_UP || ps4Data.btn.dpad == DPAD_UP_RIGHT;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	7a1b      	ldrb	r3, [r3, #8]
 80105a4:	f003 030f 	and.w	r3, r3, #15
 80105a8:	b2db      	uxtb	r3, r3
 80105aa:	2b07      	cmp	r3, #7
 80105ac:	d00d      	beq.n	80105ca <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	7a1b      	ldrb	r3, [r3, #8]
 80105b2:	f003 030f 	and.w	r3, r3, #15
 80105b6:	b2db      	uxtb	r3, r3
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d006      	beq.n	80105ca <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	7a1b      	ldrb	r3, [r3, #8]
 80105c0:	f003 030f 	and.w	r3, r3, #15
 80105c4:	b2db      	uxtb	r3, r3
 80105c6:	2b01      	cmp	r3, #1
 80105c8:	d101      	bne.n	80105ce <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x56>
 80105ca:	2301      	movs	r3, #1
 80105cc:	e04d      	b.n	801066a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 80105ce:	2300      	movs	r3, #0
 80105d0:	e04b      	b.n	801066a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return ps4Data.btn.dpad == DPAD_UP_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT_DOWN;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	7a1b      	ldrb	r3, [r3, #8]
 80105d6:	f003 030f 	and.w	r3, r3, #15
 80105da:	b2db      	uxtb	r3, r3
 80105dc:	2b01      	cmp	r3, #1
 80105de:	d00d      	beq.n	80105fc <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	7a1b      	ldrb	r3, [r3, #8]
 80105e4:	f003 030f 	and.w	r3, r3, #15
 80105e8:	b2db      	uxtb	r3, r3
 80105ea:	2b02      	cmp	r3, #2
 80105ec:	d006      	beq.n	80105fc <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	7a1b      	ldrb	r3, [r3, #8]
 80105f2:	f003 030f 	and.w	r3, r3, #15
 80105f6:	b2db      	uxtb	r3, r3
 80105f8:	2b03      	cmp	r3, #3
 80105fa:	d101      	bne.n	8010600 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x88>
 80105fc:	2301      	movs	r3, #1
 80105fe:	e034      	b.n	801066a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8010600:	2300      	movs	r3, #0
 8010602:	e032      	b.n	801066a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return ps4Data.btn.dpad == DPAD_RIGHT_DOWN || ps4Data.btn.dpad == DPAD_DOWN || ps4Data.btn.dpad == DPAD_DOWN_LEFT;
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	7a1b      	ldrb	r3, [r3, #8]
 8010608:	f003 030f 	and.w	r3, r3, #15
 801060c:	b2db      	uxtb	r3, r3
 801060e:	2b03      	cmp	r3, #3
 8010610:	d00d      	beq.n	801062e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	7a1b      	ldrb	r3, [r3, #8]
 8010616:	f003 030f 	and.w	r3, r3, #15
 801061a:	b2db      	uxtb	r3, r3
 801061c:	2b04      	cmp	r3, #4
 801061e:	d006      	beq.n	801062e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	7a1b      	ldrb	r3, [r3, #8]
 8010624:	f003 030f 	and.w	r3, r3, #15
 8010628:	b2db      	uxtb	r3, r3
 801062a:	2b05      	cmp	r3, #5
 801062c:	d101      	bne.n	8010632 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xba>
 801062e:	2301      	movs	r3, #1
 8010630:	e01b      	b.n	801066a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8010632:	2300      	movs	r3, #0
 8010634:	e019      	b.n	801066a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return ps4Data.btn.dpad == DPAD_DOWN_LEFT || ps4Data.btn.dpad == DPAD_LEFT || ps4Data.btn.dpad == DPAD_LEFT_UP;
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	7a1b      	ldrb	r3, [r3, #8]
 801063a:	f003 030f 	and.w	r3, r3, #15
 801063e:	b2db      	uxtb	r3, r3
 8010640:	2b05      	cmp	r3, #5
 8010642:	d00d      	beq.n	8010660 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	7a1b      	ldrb	r3, [r3, #8]
 8010648:	f003 030f 	and.w	r3, r3, #15
 801064c:	b2db      	uxtb	r3, r3
 801064e:	2b06      	cmp	r3, #6
 8010650:	d006      	beq.n	8010660 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	7a1b      	ldrb	r3, [r3, #8]
 8010656:	f003 030f 	and.w	r3, r3, #15
 801065a:	b2db      	uxtb	r3, r3
 801065c:	2b07      	cmp	r3, #7
 801065e:	d101      	bne.n	8010664 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xec>
 8010660:	2301      	movs	r3, #1
 8010662:	e002      	b.n	801066a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8010664:	2300      	movs	r3, #0
 8010666:	e000      	b.n	801066a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 8010668:	2300      	movs	r3, #0
        }
}
 801066a:	4618      	mov	r0, r3
 801066c:	370c      	adds	r7, #12
 801066e:	46bd      	mov	sp, r7
 8010670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010674:	4770      	bx	lr
 8010676:	bf00      	nop

08010678 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>:

bool PS4Parser::getButtonPress(ButtonEnum b) {
 8010678:	b580      	push	{r7, lr}
 801067a:	b082      	sub	sp, #8
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
 8010680:	460b      	mov	r3, r1
 8010682:	70fb      	strb	r3, [r7, #3]
        if (b <= LEFT) // Dpad
 8010684:	78fb      	ldrb	r3, [r7, #3]
 8010686:	2b03      	cmp	r3, #3
 8010688:	d806      	bhi.n	8010698 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x20>
                return checkDpad(b);
 801068a:	78fb      	ldrb	r3, [r7, #3]
 801068c:	4619      	mov	r1, r3
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f7ff ff72 	bl	8010578 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8010694:	4603      	mov	r3, r0
 8010696:	e011      	b.n	80106bc <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x44>
        else
                return ps4Data.btn.val & (1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]));
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	689b      	ldr	r3, [r3, #8]
 801069c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80106a0:	4619      	mov	r1, r3
 80106a2:	78fb      	ldrb	r3, [r7, #3]
 80106a4:	4a07      	ldr	r2, [pc, #28]	; (80106c4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x4c>)
 80106a6:	4413      	add	r3, r2
 80106a8:	781b      	ldrb	r3, [r3, #0]
 80106aa:	fa21 f303 	lsr.w	r3, r1, r3
 80106ae:	f003 0301 	and.w	r3, r3, #1
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	bf14      	ite	ne
 80106b6:	2301      	movne	r3, #1
 80106b8:	2300      	moveq	r3, #0
 80106ba:	b2db      	uxtb	r3, r3
}
 80106bc:	4618      	mov	r0, r3
 80106be:	3708      	adds	r7, #8
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bd80      	pop	{r7, pc}
 80106c4:	080128cc 	.word	0x080128cc

080106c8 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>:

bool PS4Parser::getButtonClick(ButtonEnum b) {
 80106c8:	b480      	push	{r7}
 80106ca:	b085      	sub	sp, #20
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
 80106d0:	460b      	mov	r3, r1
 80106d2:	70fb      	strb	r3, [r7, #3]
        uint32_t mask = 1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]);
 80106d4:	78fb      	ldrb	r3, [r7, #3]
 80106d6:	4a1b      	ldr	r2, [pc, #108]	; (8010744 <_ZN9PS4Parser14getButtonClickE10ButtonEnum+0x7c>)
 80106d8:	4413      	add	r3, r2
 80106da:	781b      	ldrb	r3, [r3, #0]
 80106dc:	461a      	mov	r2, r3
 80106de:	2301      	movs	r3, #1
 80106e0:	4093      	lsls	r3, r2
 80106e2:	60fb      	str	r3, [r7, #12]
        bool click = buttonClickState.val & mask;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80106ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80106ee:	021b      	lsls	r3, r3, #8
 80106f0:	4313      	orrs	r3, r2
 80106f2:	461a      	mov	r2, r3
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	4013      	ands	r3, r2
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	bf14      	ite	ne
 80106fc:	2301      	movne	r3, #1
 80106fe:	2300      	moveq	r3, #0
 8010700:	72fb      	strb	r3, [r7, #11]
        buttonClickState.val &= ~mask; // Clear "click" event
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8010708:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801070c:	021b      	lsls	r3, r3, #8
 801070e:	4313      	orrs	r3, r2
 8010710:	461a      	mov	r2, r3
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	43db      	mvns	r3, r3
 8010716:	4013      	ands	r3, r2
 8010718:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	b2d1      	uxtb	r1, r2
 8010720:	2000      	movs	r0, #0
 8010722:	4301      	orrs	r1, r0
 8010724:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 8010728:	0a12      	lsrs	r2, r2, #8
 801072a:	b292      	uxth	r2, r2
 801072c:	2100      	movs	r1, #0
 801072e:	430a      	orrs	r2, r1
 8010730:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        return click;
 8010734:	7afb      	ldrb	r3, [r7, #11]
}
 8010736:	4618      	mov	r0, r3
 8010738:	3714      	adds	r7, #20
 801073a:	46bd      	mov	sp, r7
 801073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010740:	4770      	bx	lr
 8010742:	bf00      	nop
 8010744:	080128cc 	.word	0x080128cc

08010748 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>:

uint8_t PS4Parser::getAnalogButton(ButtonEnum b) {
 8010748:	b480      	push	{r7}
 801074a:	b083      	sub	sp, #12
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
 8010750:	460b      	mov	r3, r1
 8010752:	70fb      	strb	r3, [r7, #3]
        if (b == L2) // These are the only analog buttons on the controller
 8010754:	78fb      	ldrb	r3, [r7, #3]
 8010756:	2b08      	cmp	r3, #8
 8010758:	d102      	bne.n	8010760 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x18>
                return ps4Data.trigger[0];
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	7adb      	ldrb	r3, [r3, #11]
 801075e:	e006      	b.n	801076e <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        else if (b == R2)
 8010760:	78fb      	ldrb	r3, [r7, #3]
 8010762:	2b09      	cmp	r3, #9
 8010764:	d102      	bne.n	801076c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x24>
                return ps4Data.trigger[1];
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	7b1b      	ldrb	r3, [r3, #12]
 801076a:	e000      	b.n	801076e <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        return 0;
 801076c:	2300      	movs	r3, #0
}
 801076e:	4618      	mov	r0, r3
 8010770:	370c      	adds	r7, #12
 8010772:	46bd      	mov	sp, r7
 8010774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010778:	4770      	bx	lr

0801077a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>:

uint8_t PS4Parser::getAnalogHat(AnalogHatEnum a) {
 801077a:	b480      	push	{r7}
 801077c:	b083      	sub	sp, #12
 801077e:	af00      	add	r7, sp, #0
 8010780:	6078      	str	r0, [r7, #4]
 8010782:	460b      	mov	r3, r1
 8010784:	70fb      	strb	r3, [r7, #3]
        return ps4Data.hatValue[(uint8_t)a];
 8010786:	78fb      	ldrb	r3, [r7, #3]
 8010788:	687a      	ldr	r2, [r7, #4]
 801078a:	4413      	add	r3, r2
 801078c:	791b      	ldrb	r3, [r3, #4]
}
 801078e:	4618      	mov	r0, r3
 8010790:	370c      	adds	r7, #12
 8010792:	46bd      	mov	sp, r7
 8010794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010798:	4770      	bx	lr

0801079a <_ZN9PS4Parser5ParseEhPh>:

void PS4Parser::Parse(uint8_t len, uint8_t *buf) {
 801079a:	b580      	push	{r7, lr}
 801079c:	b086      	sub	sp, #24
 801079e:	af00      	add	r7, sp, #0
 80107a0:	60f8      	str	r0, [r7, #12]
 80107a2:	460b      	mov	r3, r1
 80107a4:	607a      	str	r2, [r7, #4]
 80107a6:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 80107a8:	7afb      	ldrb	r3, [r7, #11]
 80107aa:	2b01      	cmp	r3, #1
 80107ac:	f240 80a6 	bls.w	80108fc <_ZN9PS4Parser5ParseEhPh+0x162>
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	f000 80a2 	beq.w	80108fc <_ZN9PS4Parser5ParseEhPh+0x162>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	781b      	ldrb	r3, [r3, #0]
 80107bc:	2b01      	cmp	r3, #1
 80107be:	d10e      	bne.n	80107de <_ZN9PS4Parser5ParseEhPh+0x44>
                        memcpy(&ps4Data, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(ps4Data)));
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	1d18      	adds	r0, r3, #4
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	1c59      	adds	r1, r3, #1
 80107c8:	7afb      	ldrb	r3, [r7, #11]
 80107ca:	3b01      	subs	r3, #1
 80107cc:	b2db      	uxtb	r3, r3
 80107ce:	2b3c      	cmp	r3, #60	; 0x3c
 80107d0:	bf28      	it	cs
 80107d2:	233c      	movcs	r3, #60	; 0x3c
 80107d4:	b2db      	uxtb	r3, r3
 80107d6:	461a      	mov	r2, r3
 80107d8:	f001 fe56 	bl	8012488 <memcpy>
 80107dc:	e016      	b.n	801080c <_ZN9PS4Parser5ParseEhPh+0x72>
                else if (buf[0] == 0x11) { // This report is send via Bluetooth, it has an offset of 2 compared to the USB data
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	781b      	ldrb	r3, [r3, #0]
 80107e2:	2b11      	cmp	r3, #17
 80107e4:	f040 8098 	bne.w	8010918 <_ZN9PS4Parser5ParseEhPh+0x17e>
                        if (len < 4) {
 80107e8:	7afb      	ldrb	r3, [r7, #11]
 80107ea:	2b03      	cmp	r3, #3
 80107ec:	f240 8096 	bls.w	801091c <_ZN9PS4Parser5ParseEhPh+0x182>
                                Notify(PSTR("\r\nReport is too short: "), 0x80);
                                D_PrintHex<uint8_t > (len, 0x80);
#endif
                                return;
                        }
                        memcpy(&ps4Data, buf + 3, min((uint8_t)(len - 3), MFK_CASTUINT8T sizeof(ps4Data)));
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	1d18      	adds	r0, r3, #4
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	1cd9      	adds	r1, r3, #3
 80107f8:	7afb      	ldrb	r3, [r7, #11]
 80107fa:	3b03      	subs	r3, #3
 80107fc:	b2db      	uxtb	r3, r3
 80107fe:	2b3c      	cmp	r3, #60	; 0x3c
 8010800:	bf28      	it	cs
 8010802:	233c      	movcs	r3, #60	; 0x3c
 8010804:	b2db      	uxtb	r3, r3
 8010806:	461a      	mov	r2, r3
 8010808:	f001 fe3e 	bl	8012488 <memcpy>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
#endif
                        return;
                }

                if (ps4Data.btn.val != oldButtonState.val) { // Check if anything has changed
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	689b      	ldr	r3, [r3, #8]
 8010810:	f3c3 0217 	ubfx	r2, r3, #0, #24
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010818:	f3c3 0317 	ubfx	r3, r3, #0, #24
 801081c:	429a      	cmp	r2, r3
 801081e:	d06d      	beq.n	80108fc <_ZN9PS4Parser5ParseEhPh+0x162>
                        buttonClickState.val = ps4Data.btn.val & ~oldButtonState.val; // Update click state variable
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	689b      	ldr	r3, [r3, #8]
 8010824:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8010828:	461a      	mov	r2, r3
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801082e:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8010832:	43db      	mvns	r3, r3
 8010834:	4013      	ands	r3, r2
 8010836:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	b2d1      	uxtb	r1, r2
 801083e:	2000      	movs	r0, #0
 8010840:	4301      	orrs	r1, r0
 8010842:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 8010846:	0a12      	lsrs	r2, r2, #8
 8010848:	b292      	uxth	r2, r2
 801084a:	2100      	movs	r1, #0
 801084c:	430a      	orrs	r2, r1
 801084e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                        oldButtonState.val = ps4Data.btn.val;
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	689b      	ldr	r3, [r3, #8]
 8010856:	f3c3 0117 	ubfx	r1, r3, #0, #24
 801085a:	68fa      	ldr	r2, [r7, #12]
 801085c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801085e:	f361 0317 	bfi	r3, r1, #0, #24
 8010862:	6413      	str	r3, [r2, #64]	; 0x40

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 8010864:	2300      	movs	r3, #0
 8010866:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 8010868:	2100      	movs	r1, #0
 801086a:	68f8      	ldr	r0, [r7, #12]
 801086c:	f7ff fe84 	bl	8010578 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8010870:	4603      	mov	r3, r0
 8010872:	2b00      	cmp	r3, #0
 8010874:	d003      	beq.n	801087e <_ZN9PS4Parser5ParseEhPh+0xe4>
                                newDpad |= 1 << UP;
 8010876:	7dfb      	ldrb	r3, [r7, #23]
 8010878:	f043 0301 	orr.w	r3, r3, #1
 801087c:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 801087e:	2101      	movs	r1, #1
 8010880:	68f8      	ldr	r0, [r7, #12]
 8010882:	f7ff fe79 	bl	8010578 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8010886:	4603      	mov	r3, r0
 8010888:	2b00      	cmp	r3, #0
 801088a:	d003      	beq.n	8010894 <_ZN9PS4Parser5ParseEhPh+0xfa>
                                newDpad |= 1 << RIGHT;
 801088c:	7dfb      	ldrb	r3, [r7, #23]
 801088e:	f043 0302 	orr.w	r3, r3, #2
 8010892:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 8010894:	2102      	movs	r1, #2
 8010896:	68f8      	ldr	r0, [r7, #12]
 8010898:	f7ff fe6e 	bl	8010578 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 801089c:	4603      	mov	r3, r0
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d003      	beq.n	80108aa <_ZN9PS4Parser5ParseEhPh+0x110>
                                newDpad |= 1 << DOWN;
 80108a2:	7dfb      	ldrb	r3, [r7, #23]
 80108a4:	f043 0304 	orr.w	r3, r3, #4
 80108a8:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 80108aa:	2103      	movs	r1, #3
 80108ac:	68f8      	ldr	r0, [r7, #12]
 80108ae:	f7ff fe63 	bl	8010578 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 80108b2:	4603      	mov	r3, r0
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d003      	beq.n	80108c0 <_ZN9PS4Parser5ParseEhPh+0x126>
                                newDpad |= 1 << LEFT;
 80108b8:	7dfb      	ldrb	r3, [r7, #23]
 80108ba:	f043 0308 	orr.w	r3, r3, #8
 80108be:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80108c6:	7dfa      	ldrb	r2, [r7, #23]
 80108c8:	429a      	cmp	r2, r3
 80108ca:	d017      	beq.n	80108fc <_ZN9PS4Parser5ParseEhPh+0x162>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80108d2:	b25b      	sxtb	r3, r3
 80108d4:	43db      	mvns	r3, r3
 80108d6:	b25a      	sxtb	r2, r3
 80108d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80108dc:	4013      	ands	r3, r2
 80108de:	b25b      	sxtb	r3, r3
 80108e0:	f003 030f 	and.w	r3, r3, #15
 80108e4:	b2d9      	uxtb	r1, r3
 80108e6:	68fa      	ldr	r2, [r7, #12]
 80108e8:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 80108ec:	f361 0303 	bfi	r3, r1, #0, #4
 80108f0:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
                                oldDpad = newDpad;
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	7dfa      	ldrb	r2, [r7, #23]
 80108f8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                        }
                }
        }

        if (ps4Output.reportChanged)
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8010902:	2b00      	cmp	r3, #0
 8010904:	d00b      	beq.n	801091e <_ZN9PS4Parser5ParseEhPh+0x184>
                sendOutputReport(&ps4Output); // Send output report
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	68fa      	ldr	r2, [r7, #12]
 801090e:	3246      	adds	r2, #70	; 0x46
 8010910:	4611      	mov	r1, r2
 8010912:	68f8      	ldr	r0, [r7, #12]
 8010914:	4798      	blx	r3
 8010916:	e002      	b.n	801091e <_ZN9PS4Parser5ParseEhPh+0x184>
                        return;
 8010918:	bf00      	nop
 801091a:	e000      	b.n	801091e <_ZN9PS4Parser5ParseEhPh+0x184>
                                return;
 801091c:	bf00      	nop
}
 801091e:	3718      	adds	r7, #24
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}

08010924 <_ZN9PS4Parser5ResetEv>:

void PS4Parser::Reset() {
 8010924:	b480      	push	{r7}
 8010926:	b085      	sub	sp, #20
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 801092c:	2300      	movs	r3, #0
 801092e:	73fb      	strb	r3, [r7, #15]
 8010930:	7bfb      	ldrb	r3, [r7, #15]
 8010932:	2b03      	cmp	r3, #3
 8010934:	d808      	bhi.n	8010948 <_ZN9PS4Parser5ResetEv+0x24>
                ps4Data.hatValue[i] = 127; // Center value
 8010936:	7bfb      	ldrb	r3, [r7, #15]
 8010938:	687a      	ldr	r2, [r7, #4]
 801093a:	4413      	add	r3, r2
 801093c:	227f      	movs	r2, #127	; 0x7f
 801093e:	711a      	strb	r2, [r3, #4]
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 8010940:	7bfb      	ldrb	r3, [r7, #15]
 8010942:	3301      	adds	r3, #1
 8010944:	73fb      	strb	r3, [r7, #15]
 8010946:	e7f3      	b.n	8010930 <_ZN9PS4Parser5ResetEv+0xc>
        ps4Data.btn.val = 0;
 8010948:	687a      	ldr	r2, [r7, #4]
 801094a:	6893      	ldr	r3, [r2, #8]
 801094c:	f36f 0317 	bfc	r3, #0, #24
 8010950:	6093      	str	r3, [r2, #8]
        oldButtonState.val = 0;
 8010952:	687a      	ldr	r2, [r7, #4]
 8010954:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010956:	f36f 0317 	bfc	r3, #0, #24
 801095a:	6413      	str	r3, [r2, #64]	; 0x40
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 801095c:	2300      	movs	r3, #0
 801095e:	73fb      	strb	r3, [r7, #15]
 8010960:	7bfb      	ldrb	r3, [r7, #15]
 8010962:	2b01      	cmp	r3, #1
 8010964:	d808      	bhi.n	8010978 <_ZN9PS4Parser5ResetEv+0x54>
                ps4Data.trigger[i] = 0;
 8010966:	7bfb      	ldrb	r3, [r7, #15]
 8010968:	687a      	ldr	r2, [r7, #4]
 801096a:	4413      	add	r3, r2
 801096c:	2200      	movs	r2, #0
 801096e:	72da      	strb	r2, [r3, #11]
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 8010970:	7bfb      	ldrb	r3, [r7, #15]
 8010972:	3301      	adds	r3, #1
 8010974:	73fb      	strb	r3, [r7, #15]
 8010976:	e7f3      	b.n	8010960 <_ZN9PS4Parser5ResetEv+0x3c>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 8010978:	2300      	movs	r3, #0
 801097a:	73fb      	strb	r3, [r7, #15]
 801097c:	7bfb      	ldrb	r3, [r7, #15]
 801097e:	2b02      	cmp	r3, #2
 8010980:	d81b      	bhi.n	80109ba <_ZN9PS4Parser5ResetEv+0x96>
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 8010982:	2300      	movs	r3, #0
 8010984:	73bb      	strb	r3, [r7, #14]
 8010986:	7bbb      	ldrb	r3, [r7, #14]
 8010988:	2b01      	cmp	r3, #1
 801098a:	d812      	bhi.n	80109b2 <_ZN9PS4Parser5ResetEv+0x8e>
                        ps4Data.xy[i].finger[j].touching = 1; // The bit is cleared if the finger is touching the touchpad
 801098c:	7bfa      	ldrb	r2, [r7, #15]
 801098e:	7bbb      	ldrb	r3, [r7, #14]
 8010990:	6879      	ldr	r1, [r7, #4]
 8010992:	0098      	lsls	r0, r3, #2
 8010994:	4613      	mov	r3, r2
 8010996:	00db      	lsls	r3, r3, #3
 8010998:	4413      	add	r3, r2
 801099a:	4403      	add	r3, r0
 801099c:	440b      	add	r3, r1
 801099e:	f103 0220 	add.w	r2, r3, #32
 80109a2:	7993      	ldrb	r3, [r2, #6]
 80109a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109a8:	7193      	strb	r3, [r2, #6]
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 80109aa:	7bbb      	ldrb	r3, [r7, #14]
 80109ac:	3301      	adds	r3, #1
 80109ae:	73bb      	strb	r3, [r7, #14]
 80109b0:	e7e9      	b.n	8010986 <_ZN9PS4Parser5ResetEv+0x62>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 80109b2:	7bfb      	ldrb	r3, [r7, #15]
 80109b4:	3301      	adds	r3, #1
 80109b6:	73fb      	strb	r3, [r7, #15]
 80109b8:	e7e0      	b.n	801097c <_ZN9PS4Parser5ResetEv+0x58>
        }

        ps4Data.btn.dpad = DPAD_OFF;
 80109ba:	687a      	ldr	r2, [r7, #4]
 80109bc:	7a13      	ldrb	r3, [r2, #8]
 80109be:	2108      	movs	r1, #8
 80109c0:	f361 0303 	bfi	r3, r1, #0, #4
 80109c4:	7213      	strb	r3, [r2, #8]
        oldButtonState.dpad = DPAD_OFF;
 80109c6:	687a      	ldr	r2, [r7, #4]
 80109c8:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 80109cc:	2108      	movs	r1, #8
 80109ce:	f361 0303 	bfi	r3, r1, #0, #4
 80109d2:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
        buttonClickState.dpad = 0;
 80109d6:	687a      	ldr	r2, [r7, #4]
 80109d8:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 80109dc:	f36f 0303 	bfc	r3, #0, #4
 80109e0:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
        oldDpad = 0;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2200      	movs	r2, #0
 80109e8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

        ps4Output.bigRumble = ps4Output.smallRumble = 0;
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2200      	movs	r2, #0
 80109f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        ps4Output.r = ps4Output.g = ps4Output.b = 0;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2200      	movs	r2, #0
 8010a04:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        ps4Output.flashOn = ps4Output.flashOff = 0;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2200      	movs	r2, #0
 8010a24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        ps4Output.reportChanged = false;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2200      	movs	r2, #0
 8010a38:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
};
 8010a3c:	bf00      	nop
 8010a3e:	3714      	adds	r7, #20
 8010a40:	46bd      	mov	sp, r7
 8010a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a46:	4770      	bx	lr

08010a48 <_ZN2P95IsSetEv>:
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	af00      	add	r7, sp, #0
 8010a4c:	2180      	movs	r1, #128	; 0x80
 8010a4e:	4803      	ldr	r0, [pc, #12]	; (8010a5c <_ZN2P95IsSetEv+0x14>)
 8010a50:	f7f1 fc70 	bl	8002334 <HAL_GPIO_ReadPin>
 8010a54:	4603      	mov	r3, r0
 8010a56:	4618      	mov	r0, r3
 8010a58:	bd80      	pop	{r7, pc}
 8010a5a:	bf00      	nop
 8010a5c:	40020800 	.word	0x40020800

08010a60 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b082      	sub	sp, #8
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f001 f9bb 	bl	8011de4 <_ZN8MAX3421eI3P102P9EC1Ev>
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	4618      	mov	r0, r3
 8010a72:	f001 f9d3 	bl	8011e1c <_ZN15AddressPoolImplILh16EEC1Ev>
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	2200      	movs	r2, #0
 8010a7a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 8010a7e:	4b05      	ldr	r3, [pc, #20]	; (8010a94 <_ZN3USBC1Ev+0x34>)
 8010a80:	2211      	movs	r2, #17
 8010a82:	701a      	strb	r2, [r3, #0]
        init();
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	f000 f807 	bl	8010a98 <_ZN3USB4initEv>
}
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	3708      	adds	r7, #8
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}
 8010a94:	20004f81 	.word	0x20004f81

08010a98 <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 8010a98:	b480      	push	{r7}
 8010a9a:	b083      	sub	sp, #12
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
        //devConfigIndex = 0;
        bmHubPre = 0;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 8010aa8:	bf00      	nop
 8010aaa:	370c      	adds	r7, #12
 8010aac:	46bd      	mov	sp, r7
 8010aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab2:	4770      	bx	lr

08010ab4 <_ZN3USB14getEpInfoEntryEhh>:

void USB::setUsbTaskState(uint8_t state) {
        usb_task_state = state;
}

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b086      	sub	sp, #24
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
 8010abc:	460b      	mov	r3, r1
 8010abe:	70fb      	strb	r3, [r7, #3]
 8010ac0:	4613      	mov	r3, r2
 8010ac2:	70bb      	strb	r3, [r7, #2]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	78fa      	ldrb	r2, [r7, #3]
 8010ac8:	4611      	mov	r1, r2
 8010aca:	4618      	mov	r0, r3
 8010acc:	f001 f9e0 	bl	8011e90 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8010ad0:	60f8      	str	r0, [r7, #12]

        if(!p || !p->epinfo)
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d003      	beq.n	8010ae0 <_ZN3USB14getEpInfoEntryEhh+0x2c>
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d101      	bne.n	8010ae4 <_ZN3USB14getEpInfoEntryEhh+0x30>
                return NULL;
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	e018      	b.n	8010b16 <_ZN3USB14getEpInfoEntryEhh+0x62>

        EpInfo *pep = p->epinfo;
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	617b      	str	r3, [r7, #20]

        for(uint8_t i = 0; i < p->epcount; i++) {
 8010aea:	2300      	movs	r3, #0
 8010aec:	74fb      	strb	r3, [r7, #19]
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	795b      	ldrb	r3, [r3, #5]
 8010af2:	7cfa      	ldrb	r2, [r7, #19]
 8010af4:	429a      	cmp	r2, r3
 8010af6:	d20d      	bcs.n	8010b14 <_ZN3USB14getEpInfoEntryEhh+0x60>
                if((pep)->epAddr == ep)
 8010af8:	697b      	ldr	r3, [r7, #20]
 8010afa:	781b      	ldrb	r3, [r3, #0]
 8010afc:	78ba      	ldrb	r2, [r7, #2]
 8010afe:	429a      	cmp	r2, r3
 8010b00:	d101      	bne.n	8010b06 <_ZN3USB14getEpInfoEntryEhh+0x52>
                        return pep;
 8010b02:	697b      	ldr	r3, [r7, #20]
 8010b04:	e007      	b.n	8010b16 <_ZN3USB14getEpInfoEntryEhh+0x62>

                pep++;
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	3303      	adds	r3, #3
 8010b0a:	617b      	str	r3, [r7, #20]
        for(uint8_t i = 0; i < p->epcount; i++) {
 8010b0c:	7cfb      	ldrb	r3, [r7, #19]
 8010b0e:	3301      	adds	r3, #1
 8010b10:	74fb      	strb	r3, [r7, #19]
 8010b12:	e7ec      	b.n	8010aee <_ZN3USB14getEpInfoEntryEhh+0x3a>
        }
        return NULL;
 8010b14:	2300      	movs	r3, #0
}
 8010b16:	4618      	mov	r0, r3
 8010b18:	3718      	adds	r7, #24
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	bd80      	pop	{r7, pc}

08010b1e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 8010b1e:	b580      	push	{r7, lr}
 8010b20:	b086      	sub	sp, #24
 8010b22:	af00      	add	r7, sp, #0
 8010b24:	60f8      	str	r0, [r7, #12]
 8010b26:	607b      	str	r3, [r7, #4]
 8010b28:	460b      	mov	r3, r1
 8010b2a:	72fb      	strb	r3, [r7, #11]
 8010b2c:	4613      	mov	r3, r2
 8010b2e:	72bb      	strb	r3, [r7, #10]
        if(!eprecord_ptr)
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d101      	bne.n	8010b3a <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x1c>
                return USB_ERROR_INVALID_ARGUMENT;
 8010b36:	23d8      	movs	r3, #216	; 0xd8
 8010b38:	e015      	b.n	8010b66 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	7afa      	ldrb	r2, [r7, #11]
 8010b3e:	4611      	mov	r1, r2
 8010b40:	4618      	mov	r0, r3
 8010b42:	f001 f9a5 	bl	8011e90 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8010b46:	6178      	str	r0, [r7, #20]

        if(!p)
 8010b48:	697b      	ldr	r3, [r7, #20]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d101      	bne.n	8010b52 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x34>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8010b4e:	23d6      	movs	r3, #214	; 0xd6
 8010b50:	e009      	b.n	8010b66 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        p->address.devAddress = addr;
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	7afa      	ldrb	r2, [r7, #11]
 8010b56:	711a      	strb	r2, [r3, #4]
        p->epinfo = eprecord_ptr;
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	687a      	ldr	r2, [r7, #4]
 8010b5c:	601a      	str	r2, [r3, #0]
        p->epcount = epcount;
 8010b5e:	697b      	ldr	r3, [r7, #20]
 8010b60:	7aba      	ldrb	r2, [r7, #10]
 8010b62:	715a      	strb	r2, [r3, #5]

        return 0;
 8010b64:	2300      	movs	r3, #0
}
 8010b66:	4618      	mov	r0, r3
 8010b68:	3718      	adds	r7, #24
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}

08010b6e <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 8010b6e:	b580      	push	{r7, lr}
 8010b70:	b086      	sub	sp, #24
 8010b72:	af00      	add	r7, sp, #0
 8010b74:	60f8      	str	r0, [r7, #12]
 8010b76:	607b      	str	r3, [r7, #4]
 8010b78:	460b      	mov	r3, r1
 8010b7a:	72fb      	strb	r3, [r7, #11]
 8010b7c:	4613      	mov	r3, r2
 8010b7e:	72bb      	strb	r3, [r7, #10]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	7afa      	ldrb	r2, [r7, #11]
 8010b84:	4611      	mov	r1, r2
 8010b86:	4618      	mov	r0, r3
 8010b88:	f001 f982 	bl	8011e90 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8010b8c:	6178      	str	r0, [r7, #20]

        if(!p)
 8010b8e:	697b      	ldr	r3, [r7, #20]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d101      	bne.n	8010b98 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x2a>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8010b94:	23d6      	movs	r3, #214	; 0xd6
 8010b96:	e04e      	b.n	8010c36 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        if(!p->epinfo)
 8010b98:	697b      	ldr	r3, [r7, #20]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d101      	bne.n	8010ba4 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x36>
                return USB_ERROR_EPINFO_IS_NULL;
 8010ba0:	23d7      	movs	r3, #215	; 0xd7
 8010ba2:	e048      	b.n	8010c36 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *ppep = getEpInfoEntry(addr, ep);
 8010ba4:	7aba      	ldrb	r2, [r7, #10]
 8010ba6:	7afb      	ldrb	r3, [r7, #11]
 8010ba8:	4619      	mov	r1, r3
 8010baa:	68f8      	ldr	r0, [r7, #12]
 8010bac:	f7ff ff82 	bl	8010ab4 <_ZN3USB14getEpInfoEntryEhh>
 8010bb0:	4602      	mov	r2, r0
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	601a      	str	r2, [r3, #0]

        if(!*ppep)
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d101      	bne.n	8010bc2 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x54>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 8010bbe:	23db      	movs	r3, #219	; 0xdb
 8010bc0:	e039      	b.n	8010c36 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	789b      	ldrb	r3, [r3, #2]
 8010bc8:	f3c3 0385 	ubfx	r3, r3, #2, #6
 8010bcc:	b2db      	uxtb	r3, r3
 8010bce:	2b0f      	cmp	r3, #15
 8010bd0:	bf28      	it	cs
 8010bd2:	230f      	movcs	r3, #15
 8010bd4:	b2db      	uxtb	r3, r3
 8010bd6:	461a      	mov	r2, r3
 8010bd8:	2301      	movs	r3, #1
 8010bda:	4093      	lsls	r3, r2
 8010bdc:	b29a      	uxth	r2, r3
 8010bde:	6a3b      	ldr	r3, [r7, #32]
 8010be0:	801a      	strh	r2, [r3, #0]
        (*nak_limit)--;
 8010be2:	6a3b      	ldr	r3, [r7, #32]
 8010be4:	881b      	ldrh	r3, [r3, #0]
 8010be6:	3b01      	subs	r3, #1
 8010be8:	b29a      	uxth	r2, r3
 8010bea:	6a3b      	ldr	r3, [r7, #32]
 8010bec:	801a      	strh	r2, [r3, #0]
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 8010bee:	7afb      	ldrb	r3, [r7, #11]
 8010bf0:	461a      	mov	r2, r3
 8010bf2:	21e0      	movs	r1, #224	; 0xe0
 8010bf4:	68f8      	ldr	r0, [r7, #12]
 8010bf6:	f7f0 fdd3 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        uint8_t mode = regRd(rMODE);
 8010bfa:	21d8      	movs	r1, #216	; 0xd8
 8010bfc:	68f8      	ldr	r0, [r7, #12]
 8010bfe:	f7f0 fe21 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010c02:	4603      	mov	r3, r0
 8010c04:	74fb      	strb	r3, [r7, #19]
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	799b      	ldrb	r3, [r3, #6]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d009      	beq.n	8010c22 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xb4>
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8010c14:	7cfb      	ldrb	r3, [r7, #19]
 8010c16:	4313      	orrs	r3, r2
 8010c18:	b2db      	uxtb	r3, r3
 8010c1a:	f043 0302 	orr.w	r3, r3, #2
 8010c1e:	b2db      	uxtb	r3, r3
 8010c20:	e003      	b.n	8010c2a <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xbc>
 8010c22:	7cfb      	ldrb	r3, [r7, #19]
 8010c24:	f023 0306 	bic.w	r3, r3, #6
 8010c28:	b2db      	uxtb	r3, r3
 8010c2a:	461a      	mov	r2, r3
 8010c2c:	21d8      	movs	r1, #216	; 0xd8
 8010c2e:	68f8      	ldr	r0, [r7, #12]
 8010c30:	f7f0 fdb6 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return 0;
 8010c34:	2300      	movs	r3, #0
}
 8010c36:	4618      	mov	r0, r3
 8010c38:	3718      	adds	r7, #24
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	bd80      	pop	{r7, pc}

08010c3e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 8010c3e:	b590      	push	{r4, r7, lr}
 8010c40:	b08b      	sub	sp, #44	; 0x2c
 8010c42:	af02      	add	r7, sp, #8
 8010c44:	6078      	str	r0, [r7, #4]
 8010c46:	4608      	mov	r0, r1
 8010c48:	4611      	mov	r1, r2
 8010c4a:	461a      	mov	r2, r3
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	70fb      	strb	r3, [r7, #3]
 8010c50:	460b      	mov	r3, r1
 8010c52:	70bb      	strb	r3, [r7, #2]
 8010c54:	4613      	mov	r3, r2
 8010c56:	707b      	strb	r3, [r7, #1]
        bool direction = false; //request direction, IN or OUT
 8010c58:	2300      	movs	r3, #0
 8010c5a:	76fb      	strb	r3, [r7, #27]
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	60fb      	str	r3, [r7, #12]
        uint16_t nak_limit = 0;
 8010c60:	2300      	movs	r3, #0
 8010c62:	817b      	strh	r3, [r7, #10]

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8010c64:	f107 000c 	add.w	r0, r7, #12
 8010c68:	78ba      	ldrb	r2, [r7, #2]
 8010c6a:	78f9      	ldrb	r1, [r7, #3]
 8010c6c:	f107 030a 	add.w	r3, r7, #10
 8010c70:	9300      	str	r3, [sp, #0]
 8010c72:	4603      	mov	r3, r0
 8010c74:	6878      	ldr	r0, [r7, #4]
 8010c76:	f7ff ff7a 	bl	8010b6e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	77fb      	strb	r3, [r7, #31]

        if(rcode)
 8010c7e:	7ffb      	ldrb	r3, [r7, #31]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d001      	beq.n	8010c88 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x4a>
                return rcode;
 8010c84:	7ffb      	ldrb	r3, [r7, #31]
 8010c86:	e0ae      	b.n	8010de6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        direction = ((bmReqType & 0x80) > 0);
 8010c88:	787b      	ldrb	r3, [r7, #1]
 8010c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	bfcc      	ite	gt
 8010c92:	2301      	movgt	r3, #1
 8010c94:	2300      	movle	r3, #0
 8010c96:	76fb      	strb	r3, [r7, #27]

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 8010c98:	787b      	ldrb	r3, [r7, #1]
 8010c9a:	743b      	strb	r3, [r7, #16]
        setup_pkt.bRequest = bRequest;
 8010c9c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8010ca0:	747b      	strb	r3, [r7, #17]
        setup_pkt.wVal_u.wValueLo = wValLo;
 8010ca2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8010ca6:	74bb      	strb	r3, [r7, #18]
        setup_pkt.wVal_u.wValueHi = wValHi;
 8010ca8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010cac:	74fb      	strb	r3, [r7, #19]
        setup_pkt.wIndex = wInd;
 8010cae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010cb0:	82bb      	strh	r3, [r7, #20]
        setup_pkt.wLength = total;
 8010cb2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010cb6:	82fb      	strh	r3, [r7, #22]

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 8010cb8:	f107 0310 	add.w	r3, r7, #16
 8010cbc:	2208      	movs	r2, #8
 8010cbe:	2120      	movs	r1, #32
 8010cc0:	6878      	ldr	r0, [r7, #4]
 8010cc2:	f001 f90b 	bl	8011edc <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 8010cc6:	897b      	ldrh	r3, [r7, #10]
 8010cc8:	78ba      	ldrb	r2, [r7, #2]
 8010cca:	2110      	movs	r1, #16
 8010ccc:	6878      	ldr	r0, [r7, #4]
 8010cce:	f000 faf2 	bl	80112b6 <_ZN3USB11dispatchPktEhht>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	77fb      	strb	r3, [r7, #31]

        if(rcode) //return HRSLT if not zero
 8010cd6:	7ffb      	ldrb	r3, [r7, #31]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d001      	beq.n	8010ce0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa2>
                return ( rcode);
 8010cdc:	7ffb      	ldrb	r3, [r7, #31]
 8010cde:	e082      	b.n	8010de6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        if(dataptr != NULL) //data stage, if present
 8010ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d072      	beq.n	8010dcc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
        {
                if(direction) //IN transfer
 8010ce6:	7efb      	ldrb	r3, [r7, #27]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d057      	beq.n	8010d9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x15e>
                {
                        uint16_t left = total;
 8010cec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010cf0:	83bb      	strh	r3, [r7, #28]

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 8010cf2:	68fa      	ldr	r2, [r7, #12]
 8010cf4:	7893      	ldrb	r3, [r2, #2]
 8010cf6:	f043 0302 	orr.w	r3, r3, #2
 8010cfa:	7093      	strb	r3, [r2, #2]

                        while(left) {
 8010cfc:	8bbb      	ldrh	r3, [r7, #28]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d05f      	beq.n	8010dc2 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 8010d02:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010d06:	813b      	strh	r3, [r7, #8]
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 8010d08:	68f9      	ldr	r1, [r7, #12]
 8010d0a:	897a      	ldrh	r2, [r7, #10]
 8010d0c:	f107 0008 	add.w	r0, r7, #8
 8010d10:	2300      	movs	r3, #0
 8010d12:	9301      	str	r3, [sp, #4]
 8010d14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d16:	9300      	str	r3, [sp, #0]
 8010d18:	4603      	mov	r3, r0
 8010d1a:	6878      	ldr	r0, [r7, #4]
 8010d1c:	f000 f8a6 	bl	8010e6c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8010d20:	4603      	mov	r3, r0
 8010d22:	77fb      	strb	r3, [r7, #31]
                                if(rcode == hrTOGERR) {
 8010d24:	7ffb      	ldrb	r3, [r7, #31]
 8010d26:	2b06      	cmp	r3, #6
 8010d28:	d114      	bne.n	8010d54 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x116>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 8010d2a:	21f8      	movs	r1, #248	; 0xf8
 8010d2c:	6878      	ldr	r0, [r7, #4]
 8010d2e:	f7f0 fd89 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010d32:	4603      	mov	r3, r0
 8010d34:	f003 0320 	and.w	r3, r3, #32
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	bf0c      	ite	eq
 8010d3c:	2301      	moveq	r3, #1
 8010d3e:	2300      	movne	r3, #0
 8010d40:	b2db      	uxtb	r3, r3
 8010d42:	68fa      	ldr	r2, [r7, #12]
 8010d44:	f003 0301 	and.w	r3, r3, #1
 8010d48:	b2d9      	uxtb	r1, r3
 8010d4a:	7893      	ldrb	r3, [r2, #2]
 8010d4c:	f361 0341 	bfi	r3, r1, #1, #1
 8010d50:	7093      	strb	r3, [r2, #2]
 8010d52:	e7d3      	b.n	8010cfc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        continue;
                                }

                                if(rcode)
 8010d54:	7ffb      	ldrb	r3, [r7, #31]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d001      	beq.n	8010d5e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x120>
                                        return rcode;
 8010d5a:	7ffb      	ldrb	r3, [r7, #31]
 8010d5c:	e043      	b.n	8010de6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 8010d5e:	7ffb      	ldrb	r3, [r7, #31]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d111      	bne.n	8010d88 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
 8010d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d00e      	beq.n	8010d88 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 8010d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	681c      	ldr	r4, [r3, #0]
 8010d70:	8939      	ldrh	r1, [r7, #8]
 8010d72:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010d76:	8bbb      	ldrh	r3, [r7, #28]
 8010d78:	1ad3      	subs	r3, r2, r3
 8010d7a:	b29b      	uxth	r3, r3
 8010d7c:	833b      	strh	r3, [r7, #24]
 8010d7e:	f107 0318 	add.w	r3, r7, #24
 8010d82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010d84:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010d86:	47a0      	blx	r4

                                left -= read;
 8010d88:	893b      	ldrh	r3, [r7, #8]
 8010d8a:	8bba      	ldrh	r2, [r7, #28]
 8010d8c:	1ad3      	subs	r3, r2, r3
 8010d8e:	83bb      	strh	r3, [r7, #28]

                                if(read < nbytes)
 8010d90:	893b      	ldrh	r3, [r7, #8]
 8010d92:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010d96:	429a      	cmp	r2, r3
 8010d98:	d812      	bhi.n	8010dc0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x182>
                        while(left) {
 8010d9a:	e7af      	b.n	8010cfc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 8010d9c:	68fa      	ldr	r2, [r7, #12]
 8010d9e:	7893      	ldrb	r3, [r2, #2]
 8010da0:	f043 0301 	orr.w	r3, r3, #1
 8010da4:	7093      	strb	r3, [r2, #2]
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 8010da6:	68f9      	ldr	r1, [r7, #12]
 8010da8:	897a      	ldrh	r2, [r7, #10]
 8010daa:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 8010dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010db0:	9300      	str	r3, [sp, #0]
 8010db2:	4603      	mov	r3, r0
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f000 f953 	bl	8011060 <_ZN3USB11OutTransferEP6EpInfottPh>
 8010dba:	4603      	mov	r3, r0
 8010dbc:	77fb      	strb	r3, [r7, #31]
 8010dbe:	e000      	b.n	8010dc2 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                        break;
 8010dc0:	bf00      	nop
                }
                if(rcode) //return error
 8010dc2:	7ffb      	ldrb	r3, [r7, #31]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d001      	beq.n	8010dcc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
                        return ( rcode);
 8010dc8:	7ffb      	ldrb	r3, [r7, #31]
 8010dca:	e00c      	b.n	8010de6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 8010dcc:	7efb      	ldrb	r3, [r7, #27]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d001      	beq.n	8010dd6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x198>
 8010dd2:	21a0      	movs	r1, #160	; 0xa0
 8010dd4:	e000      	b.n	8010dd8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x19a>
 8010dd6:	2180      	movs	r1, #128	; 0x80
 8010dd8:	897b      	ldrh	r3, [r7, #10]
 8010dda:	78ba      	ldrb	r2, [r7, #2]
 8010ddc:	6878      	ldr	r0, [r7, #4]
 8010dde:	f000 fa6a 	bl	80112b6 <_ZN3USB11dispatchPktEhht>
 8010de2:	4603      	mov	r3, r0
 8010de4:	bf00      	nop
}
 8010de6:	4618      	mov	r0, r3
 8010de8:	3724      	adds	r7, #36	; 0x24
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd90      	pop	{r4, r7, pc}

08010dee <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 8010dee:	b580      	push	{r7, lr}
 8010df0:	b08a      	sub	sp, #40	; 0x28
 8010df2:	af02      	add	r7, sp, #8
 8010df4:	60f8      	str	r0, [r7, #12]
 8010df6:	607b      	str	r3, [r7, #4]
 8010df8:	460b      	mov	r3, r1
 8010dfa:	72fb      	strb	r3, [r7, #11]
 8010dfc:	4613      	mov	r3, r2
 8010dfe:	72bb      	strb	r3, [r7, #10]
        EpInfo *pep = NULL;
 8010e00:	2300      	movs	r3, #0
 8010e02:	61bb      	str	r3, [r7, #24]
        uint16_t nak_limit = 0;
 8010e04:	2300      	movs	r3, #0
 8010e06:	82fb      	strh	r3, [r7, #22]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8010e08:	f107 0018 	add.w	r0, r7, #24
 8010e0c:	7aba      	ldrb	r2, [r7, #10]
 8010e0e:	7af9      	ldrb	r1, [r7, #11]
 8010e10:	f107 0316 	add.w	r3, r7, #22
 8010e14:	9300      	str	r3, [sp, #0]
 8010e16:	4603      	mov	r3, r0
 8010e18:	68f8      	ldr	r0, [r7, #12]
 8010e1a:	f7ff fea8 	bl	8010b6e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	77fb      	strb	r3, [r7, #31]

        if(rcode) {
 8010e22:	7ffb      	ldrb	r3, [r7, #31]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d010      	beq.n	8010e4a <_ZN3USB10inTransferEhhPtPhh+0x5c>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 8010e28:	7ffb      	ldrb	r3, [r7, #31]
 8010e2a:	2181      	movs	r1, #129	; 0x81
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f001 f883 	bl	8011f38 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 8010e32:	7afb      	ldrb	r3, [r7, #11]
 8010e34:	2181      	movs	r1, #129	; 0x81
 8010e36:	4618      	mov	r0, r3
 8010e38:	f001 f87e 	bl	8011f38 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 8010e3c:	7abb      	ldrb	r3, [r7, #10]
 8010e3e:	2181      	movs	r1, #129	; 0x81
 8010e40:	4618      	mov	r0, r3
 8010e42:	f001 f879 	bl	8011f38 <_Z10D_PrintHexIhEvT_i>
                return rcode;
 8010e46:	7ffb      	ldrb	r3, [r7, #31]
 8010e48:	e00c      	b.n	8010e64 <_ZN3USB10inTransferEhhPtPhh+0x76>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 8010e4a:	69b9      	ldr	r1, [r7, #24]
 8010e4c:	8afa      	ldrh	r2, [r7, #22]
 8010e4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010e52:	9301      	str	r3, [sp, #4]
 8010e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e56:	9300      	str	r3, [sp, #0]
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	68f8      	ldr	r0, [r7, #12]
 8010e5c:	f000 f806 	bl	8010e6c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8010e60:	4603      	mov	r3, r0
 8010e62:	bf00      	nop
}
 8010e64:	4618      	mov	r0, r3
 8010e66:	3720      	adds	r7, #32
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	bd80      	pop	{r7, pc}

08010e6c <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b086      	sub	sp, #24
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	60f8      	str	r0, [r7, #12]
 8010e74:	60b9      	str	r1, [r7, #8]
 8010e76:	603b      	str	r3, [r7, #0]
 8010e78:	4613      	mov	r3, r2
 8010e7a:	80fb      	strh	r3, [r7, #6]
        uint8_t rcode = 0;
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	75fb      	strb	r3, [r7, #23]
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 8010e80:	683b      	ldr	r3, [r7, #0]
 8010e82:	881b      	ldrh	r3, [r3, #0]
 8010e84:	827b      	strh	r3, [r7, #18]
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 8010e86:	68bb      	ldr	r3, [r7, #8]
 8010e88:	785b      	ldrb	r3, [r3, #1]
 8010e8a:	747b      	strb	r3, [r7, #17]

        *nbytesptr = 0;
 8010e8c:	683b      	ldr	r3, [r7, #0]
 8010e8e:	2200      	movs	r2, #0
 8010e90:	801a      	strh	r2, [r3, #0]
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 8010e92:	68bb      	ldr	r3, [r7, #8]
 8010e94:	789b      	ldrb	r3, [r3, #2]
 8010e96:	f003 0302 	and.w	r3, r3, #2
 8010e9a:	b2db      	uxtb	r3, r3
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d001      	beq.n	8010ea4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x38>
 8010ea0:	2320      	movs	r3, #32
 8010ea2:	e000      	b.n	8010ea6 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x3a>
 8010ea4:	2310      	movs	r3, #16
 8010ea6:	461a      	mov	r2, r3
 8010ea8:	21e8      	movs	r1, #232	; 0xe8
 8010eaa:	68f8      	ldr	r0, [r7, #12]
 8010eac:	f7f0 fc78 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 8010eb0:	68bb      	ldr	r3, [r7, #8]
 8010eb2:	781a      	ldrb	r2, [r3, #0]
 8010eb4:	88fb      	ldrh	r3, [r7, #6]
 8010eb6:	2100      	movs	r1, #0
 8010eb8:	68f8      	ldr	r0, [r7, #12]
 8010eba:	f000 f9fc 	bl	80112b6 <_ZN3USB11dispatchPktEhht>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	75fb      	strb	r3, [r7, #23]
                if(rcode == hrTOGERR) {
 8010ec2:	7dfb      	ldrb	r3, [r7, #23]
 8010ec4:	2b06      	cmp	r3, #6
 8010ec6:	d123      	bne.n	8010f10 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xa4>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 8010ec8:	21f8      	movs	r1, #248	; 0xf8
 8010eca:	68f8      	ldr	r0, [r7, #12]
 8010ecc:	f7f0 fcba 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	f003 0310 	and.w	r3, r3, #16
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	bf0c      	ite	eq
 8010eda:	2301      	moveq	r3, #1
 8010edc:	2300      	movne	r3, #0
 8010ede:	b2db      	uxtb	r3, r3
 8010ee0:	f003 0301 	and.w	r3, r3, #1
 8010ee4:	b2d9      	uxtb	r1, r3
 8010ee6:	68ba      	ldr	r2, [r7, #8]
 8010ee8:	7893      	ldrb	r3, [r2, #2]
 8010eea:	f361 0341 	bfi	r3, r1, #1, #1
 8010eee:	7093      	strb	r3, [r2, #2]
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 8010ef0:	68bb      	ldr	r3, [r7, #8]
 8010ef2:	789b      	ldrb	r3, [r3, #2]
 8010ef4:	f003 0302 	and.w	r3, r3, #2
 8010ef8:	b2db      	uxtb	r3, r3
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d001      	beq.n	8010f02 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x96>
 8010efe:	2320      	movs	r3, #32
 8010f00:	e000      	b.n	8010f04 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x98>
 8010f02:	2310      	movs	r3, #16
 8010f04:	461a      	mov	r2, r3
 8010f06:	21e8      	movs	r1, #232	; 0xe8
 8010f08:	68f8      	ldr	r0, [r7, #12]
 8010f0a:	f7f0 fc49 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        continue;
 8010f0e:	e06e      	b.n	8010fee <_ZN3USB10InTransferEP6EpInfotPtPhh+0x182>
                }
                if(rcode) {
 8010f10:	7dfb      	ldrb	r3, [r7, #23]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d16c      	bne.n	8010ff0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x184>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 8010f16:	21c8      	movs	r1, #200	; 0xc8
 8010f18:	68f8      	ldr	r0, [r7, #12]
 8010f1a:	f7f0 fc93 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	f003 0304 	and.w	r3, r3, #4
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	bf0c      	ite	eq
 8010f28:	2301      	moveq	r3, #1
 8010f2a:	2300      	movne	r3, #0
 8010f2c:	b2db      	uxtb	r3, r3
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d002      	beq.n	8010f38 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xcc>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 8010f32:	23f0      	movs	r3, #240	; 0xf0
 8010f34:	75fb      	strb	r3, [r7, #23]
                        break;
 8010f36:	e05c      	b.n	8010ff2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 8010f38:	2130      	movs	r1, #48	; 0x30
 8010f3a:	68f8      	ldr	r0, [r7, #12]
 8010f3c:	f7f0 fc82 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010f40:	4603      	mov	r3, r0
 8010f42:	75bb      	strb	r3, [r7, #22]
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 8010f44:	7dba      	ldrb	r2, [r7, #22]
 8010f46:	8a7b      	ldrh	r3, [r7, #18]
 8010f48:	429a      	cmp	r2, r3
 8010f4a:	dd01      	ble.n	8010f50 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xe4>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 8010f4c:	8a7b      	ldrh	r3, [r7, #18]
 8010f4e:	75bb      	strb	r3, [r7, #22]
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 8010f50:	683b      	ldr	r3, [r7, #0]
 8010f52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010f56:	b29b      	uxth	r3, r3
 8010f58:	8a7a      	ldrh	r2, [r7, #18]
 8010f5a:	1ad3      	subs	r3, r2, r3
 8010f5c:	b29b      	uxth	r3, r3
 8010f5e:	82bb      	strh	r3, [r7, #20]

                if(mem_left < 0)
 8010f60:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	da01      	bge.n	8010f6c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x100>
                        mem_left = 0;
 8010f68:	2300      	movs	r3, #0
 8010f6a:	82bb      	strh	r3, [r7, #20]

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 8010f6c:	7dba      	ldrb	r2, [r7, #22]
 8010f6e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010f72:	4293      	cmp	r3, r2
 8010f74:	bfa8      	it	ge
 8010f76:	4613      	movge	r3, r2
 8010f78:	b2da      	uxtb	r2, r3
 8010f7a:	6a3b      	ldr	r3, [r7, #32]
 8010f7c:	2108      	movs	r1, #8
 8010f7e:	68f8      	ldr	r0, [r7, #12]
 8010f80:	f000 ffe6 	bl	8011f50 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>
 8010f84:	6238      	str	r0, [r7, #32]

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 8010f86:	2204      	movs	r2, #4
 8010f88:	21c8      	movs	r1, #200	; 0xc8
 8010f8a:	68f8      	ldr	r0, [r7, #12]
 8010f8c:	f7f0 fc08 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	881a      	ldrh	r2, [r3, #0]
 8010f94:	7dbb      	ldrb	r3, [r7, #22]
 8010f96:	b29b      	uxth	r3, r3
 8010f98:	4413      	add	r3, r2
 8010f9a:	b29a      	uxth	r2, r3
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	801a      	strh	r2, [r3, #0]

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 8010fa0:	7dba      	ldrb	r2, [r7, #22]
 8010fa2:	7c7b      	ldrb	r3, [r7, #17]
 8010fa4:	429a      	cmp	r2, r3
 8010fa6:	d304      	bcc.n	8010fb2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x146>
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	881b      	ldrh	r3, [r3, #0]
 8010fac:	8a7a      	ldrh	r2, [r7, #18]
 8010fae:	429a      	cmp	r2, r3
 8010fb0:	d813      	bhi.n	8010fda <_ZN3USB10InTransferEP6EpInfotPtPhh+0x16e>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 8010fb2:	21f8      	movs	r1, #248	; 0xf8
 8010fb4:	68f8      	ldr	r0, [r7, #12]
 8010fb6:	f7f0 fc45 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010fba:	4603      	mov	r3, r0
 8010fbc:	f003 0310 	and.w	r3, r3, #16
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d001      	beq.n	8010fc8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15c>
 8010fc4:	2101      	movs	r1, #1
 8010fc6:	e000      	b.n	8010fca <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15e>
 8010fc8:	2100      	movs	r1, #0
 8010fca:	68ba      	ldr	r2, [r7, #8]
 8010fcc:	7893      	ldrb	r3, [r2, #2]
 8010fce:	f361 0341 	bfi	r3, r1, #1, #1
 8010fd2:	7093      	strb	r3, [r2, #2]
                        //printf("\r\n");
                        rcode = 0;
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	75fb      	strb	r3, [r7, #23]
                        break;
 8010fd8:	e00b      	b.n	8010ff2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                } else if(bInterval > 0)
 8010fda:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	f43f af66 	beq.w	8010eb0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        delay(bInterval); // Delay according to polling interval
 8010fe4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f7f0 ff09 	bl	8001e00 <HAL_Delay>
        } //while( 1 )
 8010fee:	e75f      	b.n	8010eb0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        break; //should be 0, indicating ACK. Else return error code.
 8010ff0:	bf00      	nop
        return ( rcode);
 8010ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	3718      	adds	r7, #24
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd80      	pop	{r7, pc}

08010ffc <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b088      	sub	sp, #32
 8011000:	af02      	add	r7, sp, #8
 8011002:	6078      	str	r0, [r7, #4]
 8011004:	4608      	mov	r0, r1
 8011006:	4611      	mov	r1, r2
 8011008:	461a      	mov	r2, r3
 801100a:	4603      	mov	r3, r0
 801100c:	70fb      	strb	r3, [r7, #3]
 801100e:	460b      	mov	r3, r1
 8011010:	70bb      	strb	r3, [r7, #2]
 8011012:	4613      	mov	r3, r2
 8011014:	803b      	strh	r3, [r7, #0]
        EpInfo *pep = NULL;
 8011016:	2300      	movs	r3, #0
 8011018:	613b      	str	r3, [r7, #16]
        uint16_t nak_limit = 0;
 801101a:	2300      	movs	r3, #0
 801101c:	81fb      	strh	r3, [r7, #14]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 801101e:	f107 0010 	add.w	r0, r7, #16
 8011022:	78ba      	ldrb	r2, [r7, #2]
 8011024:	78f9      	ldrb	r1, [r7, #3]
 8011026:	f107 030e 	add.w	r3, r7, #14
 801102a:	9300      	str	r3, [sp, #0]
 801102c:	4603      	mov	r3, r0
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f7ff fd9d 	bl	8010b6e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8011034:	4603      	mov	r3, r0
 8011036:	75fb      	strb	r3, [r7, #23]

        if(rcode)
 8011038:	7dfb      	ldrb	r3, [r7, #23]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d001      	beq.n	8011042 <_ZN3USB11outTransferEhhtPh+0x46>
                return rcode;
 801103e:	7dfb      	ldrb	r3, [r7, #23]
 8011040:	e00a      	b.n	8011058 <_ZN3USB11outTransferEhhtPh+0x5c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 8011042:	6939      	ldr	r1, [r7, #16]
 8011044:	89fa      	ldrh	r2, [r7, #14]
 8011046:	8838      	ldrh	r0, [r7, #0]
 8011048:	6a3b      	ldr	r3, [r7, #32]
 801104a:	9300      	str	r3, [sp, #0]
 801104c:	4603      	mov	r3, r0
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f000 f806 	bl	8011060 <_ZN3USB11OutTransferEP6EpInfottPh>
 8011054:	4603      	mov	r3, r0
 8011056:	bf00      	nop
}
 8011058:	4618      	mov	r0, r3
 801105a:	3718      	adds	r7, #24
 801105c:	46bd      	mov	sp, r7
 801105e:	bd80      	pop	{r7, pc}

08011060 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 8011060:	b580      	push	{r7, lr}
 8011062:	b08a      	sub	sp, #40	; 0x28
 8011064:	af00      	add	r7, sp, #0
 8011066:	60f8      	str	r0, [r7, #12]
 8011068:	60b9      	str	r1, [r7, #8]
 801106a:	4611      	mov	r1, r2
 801106c:	461a      	mov	r2, r3
 801106e:	460b      	mov	r3, r1
 8011070:	80fb      	strh	r3, [r7, #6]
 8011072:	4613      	mov	r3, r2
 8011074:	80bb      	strh	r3, [r7, #4]
        uint8_t rcode = hrSUCCESS, retry_count;
 8011076:	2300      	movs	r3, #0
 8011078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uint8_t *data_p = data; //local copy of the data pointer
 801107c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801107e:	623b      	str	r3, [r7, #32]
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 8011080:	88bb      	ldrh	r3, [r7, #4]
 8011082:	83bb      	strh	r3, [r7, #28]

        uint8_t maxpktsize = pep->maxPktSize;
 8011084:	68bb      	ldr	r3, [r7, #8]
 8011086:	785b      	ldrb	r3, [r3, #1]
 8011088:	76fb      	strb	r3, [r7, #27]

        if(maxpktsize < 1 || maxpktsize > 64)
 801108a:	7efb      	ldrb	r3, [r7, #27]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d002      	beq.n	8011096 <_ZN3USB11OutTransferEP6EpInfottPh+0x36>
 8011090:	7efb      	ldrb	r3, [r7, #27]
 8011092:	2b40      	cmp	r3, #64	; 0x40
 8011094:	d901      	bls.n	801109a <_ZN3USB11OutTransferEP6EpInfottPh+0x3a>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 8011096:	23da      	movs	r3, #218	; 0xda
 8011098:	e109      	b.n	80112ae <_ZN3USB11OutTransferEP6EpInfottPh+0x24e>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 801109a:	f7f0 fea5 	bl	8001de8 <HAL_GetTick>
 801109e:	4603      	mov	r3, r0
 80110a0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80110a4:	3308      	adds	r3, #8
 80110a6:	617b      	str	r3, [r7, #20]

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 80110a8:	68bb      	ldr	r3, [r7, #8]
 80110aa:	789b      	ldrb	r3, [r3, #2]
 80110ac:	f003 0301 	and.w	r3, r3, #1
 80110b0:	b2db      	uxtb	r3, r3
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d001      	beq.n	80110ba <_ZN3USB11OutTransferEP6EpInfottPh+0x5a>
 80110b6:	2380      	movs	r3, #128	; 0x80
 80110b8:	e000      	b.n	80110bc <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
 80110ba:	2340      	movs	r3, #64	; 0x40
 80110bc:	461a      	mov	r2, r3
 80110be:	21e8      	movs	r1, #232	; 0xe8
 80110c0:	68f8      	ldr	r0, [r7, #12]
 80110c2:	f7f0 fb6d 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        while(bytes_left) {
 80110c6:	8bbb      	ldrh	r3, [r7, #28]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	f000 80da 	beq.w	8011282 <_ZN3USB11OutTransferEP6EpInfottPh+0x222>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 80110ce:	2300      	movs	r3, #0
 80110d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                nak_count = 0;
 80110d4:	2300      	movs	r3, #0
 80110d6:	83fb      	strh	r3, [r7, #30]
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 80110d8:	7efb      	ldrb	r3, [r7, #27]
 80110da:	b29b      	uxth	r3, r3
 80110dc:	8bba      	ldrh	r2, [r7, #28]
 80110de:	4293      	cmp	r3, r2
 80110e0:	bf28      	it	cs
 80110e2:	4613      	movcs	r3, r2
 80110e4:	827b      	strh	r3, [r7, #18]
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 80110e6:	8a7b      	ldrh	r3, [r7, #18]
 80110e8:	b2da      	uxtb	r2, r3
 80110ea:	6a3b      	ldr	r3, [r7, #32]
 80110ec:	2110      	movs	r1, #16
 80110ee:	68f8      	ldr	r0, [r7, #12]
 80110f0:	f000 fef4 	bl	8011edc <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 80110f4:	8a7b      	ldrh	r3, [r7, #18]
 80110f6:	b2db      	uxtb	r3, r3
 80110f8:	461a      	mov	r2, r3
 80110fa:	2138      	movs	r1, #56	; 0x38
 80110fc:	68f8      	ldr	r0, [r7, #12]
 80110fe:	f7f0 fb4f 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 8011102:	68bb      	ldr	r3, [r7, #8]
 8011104:	781b      	ldrb	r3, [r3, #0]
 8011106:	f043 0320 	orr.w	r3, r3, #32
 801110a:	b2db      	uxtb	r3, r3
 801110c:	461a      	mov	r2, r3
 801110e:	21f0      	movs	r1, #240	; 0xf0
 8011110:	68f8      	ldr	r0, [r7, #12]
 8011112:	f7f0 fb45 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 8011116:	21c8      	movs	r1, #200	; 0xc8
 8011118:	68f8      	ldr	r0, [r7, #12]
 801111a:	f7f0 fb93 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801111e:	4603      	mov	r3, r0
 8011120:	b25b      	sxtb	r3, r3
 8011122:	43db      	mvns	r3, r3
 8011124:	b2db      	uxtb	r3, r3
 8011126:	09db      	lsrs	r3, r3, #7
 8011128:	b2db      	uxtb	r3, r3
 801112a:	2b00      	cmp	r3, #0
 801112c:	d000      	beq.n	8011130 <_ZN3USB11OutTransferEP6EpInfottPh+0xd0>
 801112e:	e7f2      	b.n	8011116 <_ZN3USB11OutTransferEP6EpInfottPh+0xb6>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 8011130:	2280      	movs	r2, #128	; 0x80
 8011132:	21c8      	movs	r1, #200	; 0xc8
 8011134:	68f8      	ldr	r0, [r7, #12]
 8011136:	f7f0 fb33 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 801113a:	21f8      	movs	r1, #248	; 0xf8
 801113c:	68f8      	ldr	r0, [r7, #12]
 801113e:	f7f0 fb81 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011142:	4603      	mov	r3, r0
 8011144:	f003 030f 	and.w	r3, r3, #15
 8011148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 801114c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011150:	2b00      	cmp	r3, #0
 8011152:	d008      	beq.n	8011166 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 8011154:	f7f0 fe48 	bl	8001de8 <HAL_GetTick>
 8011158:	4602      	mov	r2, r0
 801115a:	697b      	ldr	r3, [r7, #20]
 801115c:	1ad3      	subs	r3, r2, r3
 801115e:	2b00      	cmp	r3, #0
 8011160:	da01      	bge.n	8011166 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 8011162:	2301      	movs	r3, #1
 8011164:	e000      	b.n	8011168 <_ZN3USB11OutTransferEP6EpInfottPh+0x108>
 8011166:	2300      	movs	r3, #0
 8011168:	2b00      	cmp	r3, #0
 801116a:	f000 8081 	beq.w	8011270 <_ZN3USB11OutTransferEP6EpInfottPh+0x210>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 801116e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011172:	2b0e      	cmp	r3, #14
 8011174:	d012      	beq.n	801119c <_ZN3USB11OutTransferEP6EpInfottPh+0x13c>
 8011176:	2b0e      	cmp	r3, #14
 8011178:	f300 8085 	bgt.w	8011286 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
 801117c:	2b04      	cmp	r3, #4
 801117e:	d002      	beq.n	8011186 <_ZN3USB11OutTransferEP6EpInfottPh+0x126>
 8011180:	2b06      	cmp	r3, #6
 8011182:	d015      	beq.n	80111b0 <_ZN3USB11OutTransferEP6EpInfottPh+0x150>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 8011184:	e07f      	b.n	8011286 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
                                        nak_count++;
 8011186:	8bfb      	ldrh	r3, [r7, #30]
 8011188:	3301      	adds	r3, #1
 801118a:	83fb      	strh	r3, [r7, #30]
                                        if(nak_limit && (nak_count == nak_limit))
 801118c:	88fb      	ldrh	r3, [r7, #6]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d032      	beq.n	80111f8 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
 8011192:	8bfa      	ldrh	r2, [r7, #30]
 8011194:	88fb      	ldrh	r3, [r7, #6]
 8011196:	429a      	cmp	r2, r3
 8011198:	d12e      	bne.n	80111f8 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
                                                goto breakout;
 801119a:	e075      	b.n	8011288 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        retry_count++;
 801119c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80111a0:	3301      	adds	r3, #1
 80111a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        if(retry_count == USB_RETRY_LIMIT)
 80111a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80111aa:	2b03      	cmp	r3, #3
 80111ac:	d126      	bne.n	80111fc <_ZN3USB11OutTransferEP6EpInfottPh+0x19c>
                                                goto breakout;
 80111ae:	e06b      	b.n	8011288 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 80111b0:	21f8      	movs	r1, #248	; 0xf8
 80111b2:	68f8      	ldr	r0, [r7, #12]
 80111b4:	f7f0 fb46 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80111b8:	4603      	mov	r3, r0
 80111ba:	f003 0320 	and.w	r3, r3, #32
 80111be:	2b00      	cmp	r3, #0
 80111c0:	bf0c      	ite	eq
 80111c2:	2301      	moveq	r3, #1
 80111c4:	2300      	movne	r3, #0
 80111c6:	b2db      	uxtb	r3, r3
 80111c8:	f003 0301 	and.w	r3, r3, #1
 80111cc:	b2d9      	uxtb	r1, r3
 80111ce:	68ba      	ldr	r2, [r7, #8]
 80111d0:	7893      	ldrb	r3, [r2, #2]
 80111d2:	f361 0300 	bfi	r3, r1, #0, #1
 80111d6:	7093      	strb	r3, [r2, #2]
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 80111d8:	68bb      	ldr	r3, [r7, #8]
 80111da:	789b      	ldrb	r3, [r3, #2]
 80111dc:	f003 0301 	and.w	r3, r3, #1
 80111e0:	b2db      	uxtb	r3, r3
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d001      	beq.n	80111ea <_ZN3USB11OutTransferEP6EpInfottPh+0x18a>
 80111e6:	2380      	movs	r3, #128	; 0x80
 80111e8:	e000      	b.n	80111ec <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 80111ea:	2340      	movs	r3, #64	; 0x40
 80111ec:	461a      	mov	r2, r3
 80111ee:	21e8      	movs	r1, #232	; 0xe8
 80111f0:	68f8      	ldr	r0, [r7, #12]
 80111f2:	f7f0 fad5 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                        break;
 80111f6:	e002      	b.n	80111fe <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 80111f8:	bf00      	nop
 80111fa:	e000      	b.n	80111fe <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 80111fc:	bf00      	nop
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 80111fe:	2200      	movs	r2, #0
 8011200:	2138      	movs	r1, #56	; 0x38
 8011202:	68f8      	ldr	r0, [r7, #12]
 8011204:	f7f0 facc 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 8011208:	6a3b      	ldr	r3, [r7, #32]
 801120a:	781b      	ldrb	r3, [r3, #0]
 801120c:	461a      	mov	r2, r3
 801120e:	2110      	movs	r1, #16
 8011210:	68f8      	ldr	r0, [r7, #12]
 8011212:	f7f0 fac5 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 8011216:	8a7b      	ldrh	r3, [r7, #18]
 8011218:	b2db      	uxtb	r3, r3
 801121a:	461a      	mov	r2, r3
 801121c:	2138      	movs	r1, #56	; 0x38
 801121e:	68f8      	ldr	r0, [r7, #12]
 8011220:	f7f0 fabe 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 8011224:	68bb      	ldr	r3, [r7, #8]
 8011226:	781b      	ldrb	r3, [r3, #0]
 8011228:	f043 0320 	orr.w	r3, r3, #32
 801122c:	b2db      	uxtb	r3, r3
 801122e:	461a      	mov	r2, r3
 8011230:	21f0      	movs	r1, #240	; 0xf0
 8011232:	68f8      	ldr	r0, [r7, #12]
 8011234:	f7f0 fab4 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 8011238:	21c8      	movs	r1, #200	; 0xc8
 801123a:	68f8      	ldr	r0, [r7, #12]
 801123c:	f7f0 fb02 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011240:	4603      	mov	r3, r0
 8011242:	b25b      	sxtb	r3, r3
 8011244:	43db      	mvns	r3, r3
 8011246:	b2db      	uxtb	r3, r3
 8011248:	09db      	lsrs	r3, r3, #7
 801124a:	b2db      	uxtb	r3, r3
 801124c:	2b00      	cmp	r3, #0
 801124e:	d000      	beq.n	8011252 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f2>
 8011250:	e7f2      	b.n	8011238 <_ZN3USB11OutTransferEP6EpInfottPh+0x1d8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 8011252:	2280      	movs	r2, #128	; 0x80
 8011254:	21c8      	movs	r1, #200	; 0xc8
 8011256:	68f8      	ldr	r0, [r7, #12]
 8011258:	f7f0 faa2 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 801125c:	21f8      	movs	r1, #248	; 0xf8
 801125e:	68f8      	ldr	r0, [r7, #12]
 8011260:	f7f0 faf0 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011264:	4603      	mov	r3, r0
 8011266:	f003 030f 	and.w	r3, r3, #15
 801126a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 801126e:	e76d      	b.n	801114c <_ZN3USB11OutTransferEP6EpInfottPh+0xec>
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 8011270:	8bba      	ldrh	r2, [r7, #28]
 8011272:	8a7b      	ldrh	r3, [r7, #18]
 8011274:	1ad3      	subs	r3, r2, r3
 8011276:	83bb      	strh	r3, [r7, #28]
                data_p += bytes_tosend;
 8011278:	8a7b      	ldrh	r3, [r7, #18]
 801127a:	6a3a      	ldr	r2, [r7, #32]
 801127c:	4413      	add	r3, r2
 801127e:	623b      	str	r3, [r7, #32]
        while(bytes_left) {
 8011280:	e721      	b.n	80110c6 <_ZN3USB11OutTransferEP6EpInfottPh+0x66>
        }//while( bytes_left...
breakout:
 8011282:	bf00      	nop
 8011284:	e000      	b.n	8011288 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        goto breakout;
 8011286:	bf00      	nop

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 8011288:	21f8      	movs	r1, #248	; 0xf8
 801128a:	68f8      	ldr	r0, [r7, #12]
 801128c:	f7f0 fada 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011290:	4603      	mov	r3, r0
 8011292:	f003 0320 	and.w	r3, r3, #32
 8011296:	2b00      	cmp	r3, #0
 8011298:	d001      	beq.n	801129e <_ZN3USB11OutTransferEP6EpInfottPh+0x23e>
 801129a:	2101      	movs	r1, #1
 801129c:	e000      	b.n	80112a0 <_ZN3USB11OutTransferEP6EpInfottPh+0x240>
 801129e:	2100      	movs	r1, #0
 80112a0:	68ba      	ldr	r2, [r7, #8]
 80112a2:	7893      	ldrb	r3, [r2, #2]
 80112a4:	f361 0300 	bfi	r3, r1, #0, #1
 80112a8:	7093      	strb	r3, [r2, #2]
        return ( rcode); //should be 0 in all cases
 80112aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80112ae:	4618      	mov	r0, r3
 80112b0:	3728      	adds	r7, #40	; 0x28
 80112b2:	46bd      	mov	sp, r7
 80112b4:	bd80      	pop	{r7, pc}

080112b6 <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 80112b6:	b580      	push	{r7, lr}
 80112b8:	b086      	sub	sp, #24
 80112ba:	af00      	add	r7, sp, #0
 80112bc:	6078      	str	r0, [r7, #4]
 80112be:	4608      	mov	r0, r1
 80112c0:	4611      	mov	r1, r2
 80112c2:	461a      	mov	r2, r3
 80112c4:	4603      	mov	r3, r0
 80112c6:	70fb      	strb	r3, [r7, #3]
 80112c8:	460b      	mov	r3, r1
 80112ca:	70bb      	strb	r3, [r7, #2]
 80112cc:	4613      	mov	r3, r2
 80112ce:	803b      	strh	r3, [r7, #0]
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 80112d0:	f7f0 fd8a 	bl	8001de8 <HAL_GetTick>
 80112d4:	4603      	mov	r3, r0
 80112d6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80112da:	3308      	adds	r3, #8
 80112dc:	613b      	str	r3, [r7, #16]
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 80112de:	2300      	movs	r3, #0
 80112e0:	75fb      	strb	r3, [r7, #23]
        uint8_t retry_count = 0;
 80112e2:	2300      	movs	r3, #0
 80112e4:	75bb      	strb	r3, [r7, #22]
        uint16_t nak_count = 0;
 80112e6:	2300      	movs	r3, #0
 80112e8:	82bb      	strh	r3, [r7, #20]

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 80112ea:	f7f0 fd7d 	bl	8001de8 <HAL_GetTick>
 80112ee:	4602      	mov	r2, r0
 80112f0:	693b      	ldr	r3, [r7, #16]
 80112f2:	1ad3      	subs	r3, r2, r3
 80112f4:	0fdb      	lsrs	r3, r3, #31
 80112f6:	b2db      	uxtb	r3, r3
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d04c      	beq.n	8011396 <_ZN3USB11dispatchPktEhht+0xe0>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 80112fc:	78fa      	ldrb	r2, [r7, #3]
 80112fe:	78bb      	ldrb	r3, [r7, #2]
 8011300:	4313      	orrs	r3, r2
 8011302:	b2db      	uxtb	r3, r3
 8011304:	461a      	mov	r2, r3
 8011306:	21f0      	movs	r1, #240	; 0xf0
 8011308:	6878      	ldr	r0, [r7, #4]
 801130a:	f7f0 fa49 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 801130e:	23ff      	movs	r3, #255	; 0xff
 8011310:	75fb      	strb	r3, [r7, #23]

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 8011312:	f7f0 fd69 	bl	8001de8 <HAL_GetTick>
 8011316:	4602      	mov	r2, r0
 8011318:	693b      	ldr	r3, [r7, #16]
 801131a:	1ad3      	subs	r3, r2, r3
 801131c:	0fdb      	lsrs	r3, r3, #31
 801131e:	b2db      	uxtb	r3, r3
 8011320:	2b00      	cmp	r3, #0
 8011322:	d010      	beq.n	8011346 <_ZN3USB11dispatchPktEhht+0x90>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 8011324:	21c8      	movs	r1, #200	; 0xc8
 8011326:	6878      	ldr	r0, [r7, #4]
 8011328:	f7f0 fa8c 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801132c:	4603      	mov	r3, r0
 801132e:	73fb      	strb	r3, [r7, #15]

                        if(tmpdata & bmHXFRDNIRQ) {
 8011330:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011334:	2b00      	cmp	r3, #0
 8011336:	daec      	bge.n	8011312 <_ZN3USB11dispatchPktEhht+0x5c>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 8011338:	2280      	movs	r2, #128	; 0x80
 801133a:	21c8      	movs	r1, #200	; 0xc8
 801133c:	6878      	ldr	r0, [r7, #4]
 801133e:	f7f0 fa2f 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                rcode = 0x00;
 8011342:	2300      	movs	r3, #0
 8011344:	75fb      	strb	r3, [r7, #23]
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 8011346:	21f8      	movs	r1, #248	; 0xf8
 8011348:	6878      	ldr	r0, [r7, #4]
 801134a:	f7f0 fa7b 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801134e:	4603      	mov	r3, r0
 8011350:	f003 030f 	and.w	r3, r3, #15
 8011354:	75fb      	strb	r3, [r7, #23]

                switch(rcode) {
 8011356:	7dfb      	ldrb	r3, [r7, #23]
 8011358:	2b04      	cmp	r3, #4
 801135a:	d002      	beq.n	8011362 <_ZN3USB11dispatchPktEhht+0xac>
 801135c:	2b0e      	cmp	r3, #14
 801135e:	d00c      	beq.n	801137a <_ZN3USB11dispatchPktEhht+0xc4>
 8011360:	e013      	b.n	801138a <_ZN3USB11dispatchPktEhht+0xd4>
                        case hrNAK:
                                nak_count++;
 8011362:	8abb      	ldrh	r3, [r7, #20]
 8011364:	3301      	adds	r3, #1
 8011366:	82bb      	strh	r3, [r7, #20]
                                if(nak_limit && (nak_count == nak_limit))
 8011368:	883b      	ldrh	r3, [r7, #0]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d00f      	beq.n	801138e <_ZN3USB11dispatchPktEhht+0xd8>
 801136e:	8aba      	ldrh	r2, [r7, #20]
 8011370:	883b      	ldrh	r3, [r7, #0]
 8011372:	429a      	cmp	r2, r3
 8011374:	d10b      	bne.n	801138e <_ZN3USB11dispatchPktEhht+0xd8>
                                        return (rcode);
 8011376:	7dfb      	ldrb	r3, [r7, #23]
 8011378:	e00e      	b.n	8011398 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 801137a:	7dbb      	ldrb	r3, [r7, #22]
 801137c:	3301      	adds	r3, #1
 801137e:	75bb      	strb	r3, [r7, #22]
                                if(retry_count == USB_RETRY_LIMIT)
 8011380:	7dbb      	ldrb	r3, [r7, #22]
 8011382:	2b03      	cmp	r3, #3
 8011384:	d105      	bne.n	8011392 <_ZN3USB11dispatchPktEhht+0xdc>
                                        return (rcode);
 8011386:	7dfb      	ldrb	r3, [r7, #23]
 8011388:	e006      	b.n	8011398 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        default:
                                return (rcode);
 801138a:	7dfb      	ldrb	r3, [r7, #23]
 801138c:	e004      	b.n	8011398 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
 801138e:	bf00      	nop
 8011390:	e7ab      	b.n	80112ea <_ZN3USB11dispatchPktEhht+0x34>
                                break;
 8011392:	bf00      	nop
        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 8011394:	e7a9      	b.n	80112ea <_ZN3USB11dispatchPktEhht+0x34>
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 8011396:	7dfb      	ldrb	r3, [r7, #23]
}
 8011398:	4618      	mov	r0, r3
 801139a:	3718      	adds	r7, #24
 801139c:	46bd      	mov	sp, r7
 801139e:	bd80      	pop	{r7, pc}

080113a0 <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b084      	sub	sp, #16
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 80113a8:	2300      	movs	r3, #0
 80113aa:	73fb      	strb	r3, [r7, #15]

        MAX3421E::Task();
 80113ac:	6878      	ldr	r0, [r7, #4]
 80113ae:	f000 fdfd 	bl	8011fac <_ZN8MAX3421eI3P102P9E4TaskEv>

        tmpdata = getVbusState();
 80113b2:	6878      	ldr	r0, [r7, #4]
 80113b4:	f000 fe12 	bl	8011fdc <_ZN8MAX3421eI3P102P9E12getVbusStateEv>
 80113b8:	4603      	mov	r3, r0
 80113ba:	733b      	strb	r3, [r7, #12]

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 80113bc:	7b3b      	ldrb	r3, [r7, #12]
 80113be:	2b03      	cmp	r3, #3
 80113c0:	d82e      	bhi.n	8011420 <_ZN3USB4TaskEv+0x80>
 80113c2:	a201      	add	r2, pc, #4	; (adr r2, 80113c8 <_ZN3USB4TaskEv+0x28>)
 80113c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113c8:	080113e5 	.word	0x080113e5
 80113cc:	080113d9 	.word	0x080113d9
 80113d0:	08011401 	.word	0x08011401
 80113d4:	080113fd 	.word	0x080113fd
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 80113d8:	4bbf      	ldr	r3, [pc, #764]	; (80116d8 <_ZN3USB4TaskEv+0x338>)
 80113da:	2213      	movs	r2, #19
 80113dc:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 80113de:	2300      	movs	r3, #0
 80113e0:	73fb      	strb	r3, [r7, #15]
                        break;
 80113e2:	e01d      	b.n	8011420 <_ZN3USB4TaskEv+0x80>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 80113e4:	4bbc      	ldr	r3, [pc, #752]	; (80116d8 <_ZN3USB4TaskEv+0x338>)
 80113e6:	781b      	ldrb	r3, [r3, #0]
 80113e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80113ec:	2b10      	cmp	r3, #16
 80113ee:	d002      	beq.n	80113f6 <_ZN3USB4TaskEv+0x56>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 80113f0:	4bb9      	ldr	r3, [pc, #740]	; (80116d8 <_ZN3USB4TaskEv+0x338>)
 80113f2:	2211      	movs	r2, #17
 80113f4:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 80113f6:	2300      	movs	r3, #0
 80113f8:	73fb      	strb	r3, [r7, #15]
                        break;
 80113fa:	e011      	b.n	8011420 <_ZN3USB4TaskEv+0x80>
                case LSHOST:

                        lowspeed = true;
 80113fc:	2301      	movs	r3, #1
 80113fe:	73fb      	strb	r3, [r7, #15]
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 8011400:	4bb5      	ldr	r3, [pc, #724]	; (80116d8 <_ZN3USB4TaskEv+0x338>)
 8011402:	781b      	ldrb	r3, [r3, #0]
 8011404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011408:	2b10      	cmp	r3, #16
 801140a:	d108      	bne.n	801141e <_ZN3USB4TaskEv+0x7e>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 801140c:	f7f0 fcec 	bl	8001de8 <HAL_GetTick>
 8011410:	4603      	mov	r3, r0
 8011412:	33c8      	adds	r3, #200	; 0xc8
 8011414:	4ab1      	ldr	r2, [pc, #708]	; (80116dc <_ZN3USB4TaskEv+0x33c>)
 8011416:	6013      	str	r3, [r2, #0]
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 8011418:	4baf      	ldr	r3, [pc, #700]	; (80116d8 <_ZN3USB4TaskEv+0x338>)
 801141a:	2220      	movs	r2, #32
 801141c:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 801141e:	bf00      	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 8011420:	2300      	movs	r3, #0
 8011422:	73bb      	strb	r3, [r7, #14]
 8011424:	7bbb      	ldrb	r3, [r7, #14]
 8011426:	2b0f      	cmp	r3, #15
 8011428:	d81b      	bhi.n	8011462 <_ZN3USB4TaskEv+0xc2>
                if(devConfig[i])
 801142a:	7bba      	ldrb	r2, [r7, #14]
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	321e      	adds	r2, #30
 8011430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d010      	beq.n	801145a <_ZN3USB4TaskEv+0xba>
                        rcode = devConfig[i]->Poll();
 8011438:	7bba      	ldrb	r2, [r7, #14]
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	321e      	adds	r2, #30
 801143e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011442:	7bba      	ldrb	r2, [r7, #14]
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	321e      	adds	r2, #30
 8011448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	330c      	adds	r3, #12
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	4608      	mov	r0, r1
 8011454:	4798      	blx	r3
 8011456:	4603      	mov	r3, r0
 8011458:	72fb      	strb	r3, [r7, #11]
        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 801145a:	7bbb      	ldrb	r3, [r7, #14]
 801145c:	3301      	adds	r3, #1
 801145e:	73bb      	strb	r3, [r7, #14]
 8011460:	e7e0      	b.n	8011424 <_ZN3USB4TaskEv+0x84>

        switch(usb_task_state) {
 8011462:	4b9d      	ldr	r3, [pc, #628]	; (80116d8 <_ZN3USB4TaskEv+0x338>)
 8011464:	781b      	ldrb	r3, [r3, #0]
 8011466:	2ba0      	cmp	r3, #160	; 0xa0
 8011468:	f000 8123 	beq.w	80116b2 <_ZN3USB4TaskEv+0x312>
 801146c:	2ba0      	cmp	r3, #160	; 0xa0
 801146e:	f300 812f 	bgt.w	80116d0 <_ZN3USB4TaskEv+0x330>
 8011472:	2b90      	cmp	r3, #144	; 0x90
 8011474:	f000 811f 	beq.w	80116b6 <_ZN3USB4TaskEv+0x316>
 8011478:	2b90      	cmp	r3, #144	; 0x90
 801147a:	f300 8129 	bgt.w	80116d0 <_ZN3USB4TaskEv+0x330>
 801147e:	2b80      	cmp	r3, #128	; 0x80
 8011480:	f000 80fe 	beq.w	8011680 <_ZN3USB4TaskEv+0x2e0>
 8011484:	2b80      	cmp	r3, #128	; 0x80
 8011486:	f300 8123 	bgt.w	80116d0 <_ZN3USB4TaskEv+0x330>
 801148a:	2b51      	cmp	r3, #81	; 0x51
 801148c:	f000 80ea 	beq.w	8011664 <_ZN3USB4TaskEv+0x2c4>
 8011490:	2b51      	cmp	r3, #81	; 0x51
 8011492:	f300 811d 	bgt.w	80116d0 <_ZN3USB4TaskEv+0x330>
 8011496:	2b40      	cmp	r3, #64	; 0x40
 8011498:	dc6a      	bgt.n	8011570 <_ZN3USB4TaskEv+0x1d0>
 801149a:	2b11      	cmp	r3, #17
 801149c:	f2c0 8118 	blt.w	80116d0 <_ZN3USB4TaskEv+0x330>
 80114a0:	3b11      	subs	r3, #17
 80114a2:	2b2f      	cmp	r3, #47	; 0x2f
 80114a4:	f200 8114 	bhi.w	80116d0 <_ZN3USB4TaskEv+0x330>
 80114a8:	a201      	add	r2, pc, #4	; (adr r2, 80114b0 <_ZN3USB4TaskEv+0x110>)
 80114aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114ae:	bf00      	nop
 80114b0:	08011577 	.word	0x08011577
 80114b4:	080116bb 	.word	0x080116bb
 80114b8:	080116bb 	.word	0x080116bb
 80114bc:	080116d1 	.word	0x080116d1
 80114c0:	080116d1 	.word	0x080116d1
 80114c4:	080116d1 	.word	0x080116d1
 80114c8:	080116d1 	.word	0x080116d1
 80114cc:	080116d1 	.word	0x080116d1
 80114d0:	080116d1 	.word	0x080116d1
 80114d4:	080116d1 	.word	0x080116d1
 80114d8:	080116d1 	.word	0x080116d1
 80114dc:	080116d1 	.word	0x080116d1
 80114e0:	080116d1 	.word	0x080116d1
 80114e4:	080116d1 	.word	0x080116d1
 80114e8:	080116d1 	.word	0x080116d1
 80114ec:	080115c7 	.word	0x080115c7
 80114f0:	080116d1 	.word	0x080116d1
 80114f4:	080116d1 	.word	0x080116d1
 80114f8:	080116d1 	.word	0x080116d1
 80114fc:	080116d1 	.word	0x080116d1
 8011500:	080116d1 	.word	0x080116d1
 8011504:	080116d1 	.word	0x080116d1
 8011508:	080116d1 	.word	0x080116d1
 801150c:	080116d1 	.word	0x080116d1
 8011510:	080116d1 	.word	0x080116d1
 8011514:	080116d1 	.word	0x080116d1
 8011518:	080116d1 	.word	0x080116d1
 801151c:	080116d1 	.word	0x080116d1
 8011520:	080116d1 	.word	0x080116d1
 8011524:	080116d1 	.word	0x080116d1
 8011528:	080116d1 	.word	0x080116d1
 801152c:	080115e3 	.word	0x080115e3
 8011530:	080116d1 	.word	0x080116d1
 8011534:	080116d1 	.word	0x080116d1
 8011538:	080116d1 	.word	0x080116d1
 801153c:	080116d1 	.word	0x080116d1
 8011540:	080116d1 	.word	0x080116d1
 8011544:	080116d1 	.word	0x080116d1
 8011548:	080116d1 	.word	0x080116d1
 801154c:	080116d1 	.word	0x080116d1
 8011550:	080116d1 	.word	0x080116d1
 8011554:	080116d1 	.word	0x080116d1
 8011558:	080116d1 	.word	0x080116d1
 801155c:	080116d1 	.word	0x080116d1
 8011560:	080116d1 	.word	0x080116d1
 8011564:	080116d1 	.word	0x080116d1
 8011568:	080116d1 	.word	0x080116d1
 801156c:	080115f5 	.word	0x080115f5
 8011570:	2b50      	cmp	r3, #80	; 0x50
 8011572:	d05f      	beq.n	8011634 <_ZN3USB4TaskEv+0x294>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 8011574:	e0ac      	b.n	80116d0 <_ZN3USB4TaskEv+0x330>
                        init();
 8011576:	6878      	ldr	r0, [r7, #4]
 8011578:	f7ff fa8e 	bl	8010a98 <_ZN3USB4initEv>
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 801157c:	2300      	movs	r3, #0
 801157e:	737b      	strb	r3, [r7, #13]
 8011580:	7b7b      	ldrb	r3, [r7, #13]
 8011582:	2b0f      	cmp	r3, #15
 8011584:	d81b      	bhi.n	80115be <_ZN3USB4TaskEv+0x21e>
                                if(devConfig[i])
 8011586:	7b7a      	ldrb	r2, [r7, #13]
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	321e      	adds	r2, #30
 801158c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d010      	beq.n	80115b6 <_ZN3USB4TaskEv+0x216>
                                        rcode = devConfig[i]->Release();
 8011594:	7b7a      	ldrb	r2, [r7, #13]
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	321e      	adds	r2, #30
 801159a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801159e:	7b7a      	ldrb	r2, [r7, #13]
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	321e      	adds	r2, #30
 80115a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	3308      	adds	r3, #8
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	4608      	mov	r0, r1
 80115b0:	4798      	blx	r3
 80115b2:	4603      	mov	r3, r0
 80115b4:	72fb      	strb	r3, [r7, #11]
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 80115b6:	7b7b      	ldrb	r3, [r7, #13]
 80115b8:	3301      	adds	r3, #1
 80115ba:	737b      	strb	r3, [r7, #13]
 80115bc:	e7e0      	b.n	8011580 <_ZN3USB4TaskEv+0x1e0>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 80115be:	4b46      	ldr	r3, [pc, #280]	; (80116d8 <_ZN3USB4TaskEv+0x338>)
 80115c0:	2212      	movs	r2, #18
 80115c2:	701a      	strb	r2, [r3, #0]
                        break;
 80115c4:	e084      	b.n	80116d0 <_ZN3USB4TaskEv+0x330>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 80115c6:	f7f0 fc0f 	bl	8001de8 <HAL_GetTick>
 80115ca:	4602      	mov	r2, r0
 80115cc:	4b43      	ldr	r3, [pc, #268]	; (80116dc <_ZN3USB4TaskEv+0x33c>)
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	1ad3      	subs	r3, r2, r3
 80115d2:	43db      	mvns	r3, r3
 80115d4:	0fdb      	lsrs	r3, r3, #31
 80115d6:	b2db      	uxtb	r3, r3
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d070      	beq.n	80116be <_ZN3USB4TaskEv+0x31e>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 80115dc:	4b3e      	ldr	r3, [pc, #248]	; (80116d8 <_ZN3USB4TaskEv+0x338>)
 80115de:	2230      	movs	r2, #48	; 0x30
 80115e0:	701a      	strb	r2, [r3, #0]
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 80115e2:	2201      	movs	r2, #1
 80115e4:	21e8      	movs	r1, #232	; 0xe8
 80115e6:	6878      	ldr	r0, [r7, #4]
 80115e8:	f7f0 f8da 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 80115ec:	4b3a      	ldr	r3, [pc, #232]	; (80116d8 <_ZN3USB4TaskEv+0x338>)
 80115ee:	2240      	movs	r2, #64	; 0x40
 80115f0:	701a      	strb	r2, [r3, #0]
                        break;
 80115f2:	e06d      	b.n	80116d0 <_ZN3USB4TaskEv+0x330>
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 80115f4:	21e8      	movs	r1, #232	; 0xe8
 80115f6:	6878      	ldr	r0, [r7, #4]
 80115f8:	f7f0 f924 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80115fc:	4603      	mov	r3, r0
 80115fe:	f003 0301 	and.w	r3, r3, #1
 8011602:	2b00      	cmp	r3, #0
 8011604:	bf0c      	ite	eq
 8011606:	2301      	moveq	r3, #1
 8011608:	2300      	movne	r3, #0
 801160a:	b2db      	uxtb	r3, r3
 801160c:	2b00      	cmp	r3, #0
 801160e:	d058      	beq.n	80116c2 <_ZN3USB4TaskEv+0x322>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 8011610:	21d8      	movs	r1, #216	; 0xd8
 8011612:	6878      	ldr	r0, [r7, #4]
 8011614:	f7f0 f916 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011618:	4603      	mov	r3, r0
 801161a:	f043 0308 	orr.w	r3, r3, #8
 801161e:	733b      	strb	r3, [r7, #12]
                                regWr(rMODE, tmpdata);
 8011620:	7b3b      	ldrb	r3, [r7, #12]
 8011622:	461a      	mov	r2, r3
 8011624:	21d8      	movs	r1, #216	; 0xd8
 8011626:	6878      	ldr	r0, [r7, #4]
 8011628:	f7f0 f8ba 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 801162c:	4b2a      	ldr	r3, [pc, #168]	; (80116d8 <_ZN3USB4TaskEv+0x338>)
 801162e:	2250      	movs	r2, #80	; 0x50
 8011630:	701a      	strb	r2, [r3, #0]
                        break;
 8011632:	e046      	b.n	80116c2 <_ZN3USB4TaskEv+0x322>
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 8011634:	21c8      	movs	r1, #200	; 0xc8
 8011636:	6878      	ldr	r0, [r7, #4]
 8011638:	f7f0 f904 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801163c:	4603      	mov	r3, r0
 801163e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011642:	2b00      	cmp	r3, #0
 8011644:	bf14      	ite	ne
 8011646:	2301      	movne	r3, #1
 8011648:	2300      	moveq	r3, #0
 801164a:	b2db      	uxtb	r3, r3
 801164c:	2b00      	cmp	r3, #0
 801164e:	d03a      	beq.n	80116c6 <_ZN3USB4TaskEv+0x326>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 8011650:	4b21      	ldr	r3, [pc, #132]	; (80116d8 <_ZN3USB4TaskEv+0x338>)
 8011652:	2251      	movs	r2, #81	; 0x51
 8011654:	701a      	strb	r2, [r3, #0]
                                delay = (uint32_t)millis() + 20;
 8011656:	f7f0 fbc7 	bl	8001de8 <HAL_GetTick>
 801165a:	4603      	mov	r3, r0
 801165c:	3314      	adds	r3, #20
 801165e:	4a1f      	ldr	r2, [pc, #124]	; (80116dc <_ZN3USB4TaskEv+0x33c>)
 8011660:	6013      	str	r3, [r2, #0]
                        break;
 8011662:	e030      	b.n	80116c6 <_ZN3USB4TaskEv+0x326>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 8011664:	f7f0 fbc0 	bl	8001de8 <HAL_GetTick>
 8011668:	4602      	mov	r2, r0
 801166a:	4b1c      	ldr	r3, [pc, #112]	; (80116dc <_ZN3USB4TaskEv+0x33c>)
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	1ad3      	subs	r3, r2, r3
 8011670:	43db      	mvns	r3, r3
 8011672:	0fdb      	lsrs	r3, r3, #31
 8011674:	b2db      	uxtb	r3, r3
 8011676:	2b00      	cmp	r3, #0
 8011678:	d027      	beq.n	80116ca <_ZN3USB4TaskEv+0x32a>
 801167a:	4b17      	ldr	r3, [pc, #92]	; (80116d8 <_ZN3USB4TaskEv+0x338>)
 801167c:	2280      	movs	r2, #128	; 0x80
 801167e:	701a      	strb	r2, [r3, #0]
                        rcode = Configuring(0, 0, lowspeed);
 8011680:	7bfb      	ldrb	r3, [r7, #15]
 8011682:	2200      	movs	r2, #0
 8011684:	2100      	movs	r1, #0
 8011686:	6878      	ldr	r0, [r7, #4]
 8011688:	f000 f920 	bl	80118cc <_ZN3USB11ConfiguringEhhb>
 801168c:	4603      	mov	r3, r0
 801168e:	72fb      	strb	r3, [r7, #11]
                        if(rcode) {
 8011690:	7afb      	ldrb	r3, [r7, #11]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d009      	beq.n	80116aa <_ZN3USB4TaskEv+0x30a>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 8011696:	7afb      	ldrb	r3, [r7, #11]
 8011698:	2bd2      	cmp	r3, #210	; 0xd2
 801169a:	d018      	beq.n	80116ce <_ZN3USB4TaskEv+0x32e>
                                        usb_error = rcode;
 801169c:	4a10      	ldr	r2, [pc, #64]	; (80116e0 <_ZN3USB4TaskEv+0x340>)
 801169e:	7afb      	ldrb	r3, [r7, #11]
 80116a0:	7013      	strb	r3, [r2, #0]
                                        usb_task_state = USB_STATE_ERROR;
 80116a2:	4b0d      	ldr	r3, [pc, #52]	; (80116d8 <_ZN3USB4TaskEv+0x338>)
 80116a4:	22a0      	movs	r2, #160	; 0xa0
 80116a6:	701a      	strb	r2, [r3, #0]
                        break;
 80116a8:	e011      	b.n	80116ce <_ZN3USB4TaskEv+0x32e>
                                usb_task_state = USB_STATE_RUNNING;
 80116aa:	4b0b      	ldr	r3, [pc, #44]	; (80116d8 <_ZN3USB4TaskEv+0x338>)
 80116ac:	2290      	movs	r2, #144	; 0x90
 80116ae:	701a      	strb	r2, [r3, #0]
                        break;
 80116b0:	e00d      	b.n	80116ce <_ZN3USB4TaskEv+0x32e>
                        break;
 80116b2:	bf00      	nop
 80116b4:	e00c      	b.n	80116d0 <_ZN3USB4TaskEv+0x330>
                        break;
 80116b6:	bf00      	nop
 80116b8:	e00a      	b.n	80116d0 <_ZN3USB4TaskEv+0x330>
                        break;
 80116ba:	bf00      	nop
 80116bc:	e008      	b.n	80116d0 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 80116be:	bf00      	nop
 80116c0:	e006      	b.n	80116d0 <_ZN3USB4TaskEv+0x330>
                        break;
 80116c2:	bf00      	nop
 80116c4:	e004      	b.n	80116d0 <_ZN3USB4TaskEv+0x330>
                        break;
 80116c6:	bf00      	nop
 80116c8:	e002      	b.n	80116d0 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 80116ca:	bf00      	nop
 80116cc:	e000      	b.n	80116d0 <_ZN3USB4TaskEv+0x330>
                        break;
 80116ce:	bf00      	nop
}
 80116d0:	bf00      	nop
 80116d2:	3710      	adds	r7, #16
 80116d4:	46bd      	mov	sp, r7
 80116d6:	bd80      	pop	{r7, pc}
 80116d8:	20004f81 	.word	0x20004f81
 80116dc:	20004f84 	.word	0x20004f84
 80116e0:	20004f80 	.word	0x20004f80

080116e4 <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b086      	sub	sp, #24
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
 80116ec:	4608      	mov	r0, r1
 80116ee:	4611      	mov	r1, r2
 80116f0:	461a      	mov	r2, r3
 80116f2:	4603      	mov	r3, r0
 80116f4:	70fb      	strb	r3, [r7, #3]
 80116f6:	460b      	mov	r3, r1
 80116f8:	70bb      	strb	r3, [r7, #2]
 80116fa:	4613      	mov	r3, r2
 80116fc:	707b      	strb	r3, [r7, #1]
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 80116fe:	2300      	movs	r3, #0
 8011700:	617b      	str	r3, [r7, #20]
 8011702:	2300      	movs	r3, #0
 8011704:	613b      	str	r3, [r7, #16]

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	2100      	movs	r1, #0
 801170a:	4618      	mov	r0, r3
 801170c:	f000 fbc0 	bl	8011e90 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8011710:	6178      	str	r0, [r7, #20]

        if(!p0)
 8011712:	697b      	ldr	r3, [r7, #20]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d101      	bne.n	801171c <_ZN3USB17DefaultAddressingEhhb+0x38>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8011718:	23d6      	movs	r3, #214	; 0xd6
 801171a:	e03a      	b.n	8011792 <_ZN3USB17DefaultAddressingEhhb+0xae>

        if(!p0->epinfo)
 801171c:	697b      	ldr	r3, [r7, #20]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d101      	bne.n	8011728 <_ZN3USB17DefaultAddressingEhhb+0x44>
                return USB_ERROR_EPINFO_IS_NULL;
 8011724:	23d7      	movs	r3, #215	; 0xd7
 8011726:	e034      	b.n	8011792 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p0->lowspeed = (lowspeed) ? true : false;
 8011728:	697b      	ldr	r3, [r7, #20]
 801172a:	787a      	ldrb	r2, [r7, #1]
 801172c:	719a      	strb	r2, [r3, #6]

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 801172e:	6878      	ldr	r0, [r7, #4]
 8011730:	78bb      	ldrb	r3, [r7, #2]
 8011732:	78f9      	ldrb	r1, [r7, #3]
 8011734:	2200      	movs	r2, #0
 8011736:	f000 fc5f 	bl	8011ff8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 801173a:	4603      	mov	r3, r0
 801173c:	73fb      	strb	r3, [r7, #15]

        if(!bAddress)
 801173e:	7bfb      	ldrb	r3, [r7, #15]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d101      	bne.n	8011748 <_ZN3USB17DefaultAddressingEhhb+0x64>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 8011744:	23d4      	movs	r3, #212	; 0xd4
 8011746:	e024      	b.n	8011792 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p = addrPool.GetUsbDevicePtr(bAddress);
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	7bfa      	ldrb	r2, [r7, #15]
 801174c:	4611      	mov	r1, r2
 801174e:	4618      	mov	r0, r3
 8011750:	f000 fb9e 	bl	8011e90 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8011754:	6138      	str	r0, [r7, #16]

        if(!p)
 8011756:	693b      	ldr	r3, [r7, #16]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d101      	bne.n	8011760 <_ZN3USB17DefaultAddressingEhhb+0x7c>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 801175c:	23d6      	movs	r3, #214	; 0xd6
 801175e:	e018      	b.n	8011792 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p->lowspeed = lowspeed;
 8011760:	693b      	ldr	r3, [r7, #16]
 8011762:	787a      	ldrb	r2, [r7, #1]
 8011764:	719a      	strb	r2, [r3, #6]

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 8011766:	7bfb      	ldrb	r3, [r7, #15]
 8011768:	2200      	movs	r2, #0
 801176a:	2100      	movs	r1, #0
 801176c:	6878      	ldr	r0, [r7, #4]
 801176e:	f000 fae3 	bl	8011d38 <_ZN3USB7setAddrEhhh>
 8011772:	4603      	mov	r3, r0
 8011774:	73bb      	strb	r3, [r7, #14]

        if(rcode) {
 8011776:	7bbb      	ldrb	r3, [r7, #14]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d009      	beq.n	8011790 <_ZN3USB17DefaultAddressingEhhb+0xac>
                addrPool.FreeAddress(bAddress);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	7bfa      	ldrb	r2, [r7, #15]
 8011780:	4611      	mov	r1, r2
 8011782:	4618      	mov	r0, r3
 8011784:	f000 fcd0 	bl	8012128 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 8011788:	2300      	movs	r3, #0
 801178a:	73fb      	strb	r3, [r7, #15]
                return rcode;
 801178c:	7bbb      	ldrb	r3, [r7, #14]
 801178e:	e000      	b.n	8011792 <_ZN3USB17DefaultAddressingEhhb+0xae>
        }
        return 0;
 8011790:	2300      	movs	r3, #0
};
 8011792:	4618      	mov	r0, r3
 8011794:	3718      	adds	r7, #24
 8011796:	46bd      	mov	sp, r7
 8011798:	bd80      	pop	{r7, pc}

0801179a <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 801179a:	b590      	push	{r4, r7, lr}
 801179c:	b085      	sub	sp, #20
 801179e:	af00      	add	r7, sp, #0
 80117a0:	6078      	str	r0, [r7, #4]
 80117a2:	4608      	mov	r0, r1
 80117a4:	4611      	mov	r1, r2
 80117a6:	461a      	mov	r2, r3
 80117a8:	4603      	mov	r3, r0
 80117aa:	70fb      	strb	r3, [r7, #3]
 80117ac:	460b      	mov	r3, r1
 80117ae:	70bb      	strb	r3, [r7, #2]
 80117b0:	4613      	mov	r3, r2
 80117b2:	707b      	strb	r3, [r7, #1]
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 80117b4:	2300      	movs	r3, #0
 80117b6:	73fb      	strb	r3, [r7, #15]

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 80117b8:	78fa      	ldrb	r2, [r7, #3]
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	321e      	adds	r2, #30
 80117be:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80117c2:	78fa      	ldrb	r2, [r7, #3]
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	321e      	adds	r2, #30
 80117c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	3304      	adds	r3, #4
 80117d0:	681c      	ldr	r4, [r3, #0]
 80117d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80117d6:	787a      	ldrb	r2, [r7, #1]
 80117d8:	78b9      	ldrb	r1, [r7, #2]
 80117da:	47a0      	blx	r4
 80117dc:	4603      	mov	r3, r0
 80117de:	73bb      	strb	r3, [r7, #14]
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 80117e0:	7bbb      	ldrb	r3, [r7, #14]
 80117e2:	2be0      	cmp	r3, #224	; 0xe0
 80117e4:	d11c      	bne.n	8011820 <_ZN3USB13AttemptConfigEhhhb+0x86>
                if(parent == 0) {
 80117e6:	78bb      	ldrb	r3, [r7, #2]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d108      	bne.n	80117fe <_ZN3USB13AttemptConfigEhhhb+0x64>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 80117ec:	2201      	movs	r2, #1
 80117ee:	21e8      	movs	r1, #232	; 0xe8
 80117f0:	6878      	ldr	r0, [r7, #4]
 80117f2:	f7ef ffd5 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 80117f6:	2066      	movs	r0, #102	; 0x66
 80117f8:	f7f0 fb02 	bl	8001e00 <HAL_Delay>
 80117fc:	e022      	b.n	8011844 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 80117fe:	78ba      	ldrb	r2, [r7, #2]
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	321e      	adds	r2, #30
 8011804:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011808:	78ba      	ldrb	r2, [r7, #2]
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	321e      	adds	r2, #30
 801180e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	3314      	adds	r3, #20
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	787a      	ldrb	r2, [r7, #1]
 801181a:	4611      	mov	r1, r2
 801181c:	4798      	blx	r3
 801181e:	e011      	b.n	8011844 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 8011820:	7bbb      	ldrb	r3, [r7, #14]
 8011822:	2b0d      	cmp	r3, #13
 8011824:	d109      	bne.n	801183a <_ZN3USB13AttemptConfigEhhhb+0xa0>
 8011826:	7bfb      	ldrb	r3, [r7, #15]
 8011828:	2b02      	cmp	r3, #2
 801182a:	d806      	bhi.n	801183a <_ZN3USB13AttemptConfigEhhhb+0xa0>
                delay(100);
 801182c:	2064      	movs	r0, #100	; 0x64
 801182e:	f7f0 fae7 	bl	8001e00 <HAL_Delay>
                retries++;
 8011832:	7bfb      	ldrb	r3, [r7, #15]
 8011834:	3301      	adds	r3, #1
 8011836:	73fb      	strb	r3, [r7, #15]
                goto again;
 8011838:	e7be      	b.n	80117b8 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        } else if(rcode)
 801183a:	7bbb      	ldrb	r3, [r7, #14]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d001      	beq.n	8011844 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                return rcode;
 8011840:	7bbb      	ldrb	r3, [r7, #14]
 8011842:	e03f      	b.n	80118c4 <_ZN3USB13AttemptConfigEhhhb+0x12a>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 8011844:	78fa      	ldrb	r2, [r7, #3]
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	321e      	adds	r2, #30
 801184a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801184e:	78fa      	ldrb	r2, [r7, #3]
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	321e      	adds	r2, #30
 8011854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	681c      	ldr	r4, [r3, #0]
 801185c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011860:	787a      	ldrb	r2, [r7, #1]
 8011862:	78b9      	ldrb	r1, [r7, #2]
 8011864:	47a0      	blx	r4
 8011866:	4603      	mov	r3, r0
 8011868:	73bb      	strb	r3, [r7, #14]
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 801186a:	7bbb      	ldrb	r3, [r7, #14]
 801186c:	2b0d      	cmp	r3, #13
 801186e:	d109      	bne.n	8011884 <_ZN3USB13AttemptConfigEhhhb+0xea>
 8011870:	7bfb      	ldrb	r3, [r7, #15]
 8011872:	2b02      	cmp	r3, #2
 8011874:	d806      	bhi.n	8011884 <_ZN3USB13AttemptConfigEhhhb+0xea>
                delay(100);
 8011876:	2064      	movs	r0, #100	; 0x64
 8011878:	f7f0 fac2 	bl	8001e00 <HAL_Delay>
                retries++;
 801187c:	7bfb      	ldrb	r3, [r7, #15]
 801187e:	3301      	adds	r3, #1
 8011880:	73fb      	strb	r3, [r7, #15]
                goto again;
 8011882:	e799      	b.n	80117b8 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        }
        if(rcode) {
 8011884:	7bbb      	ldrb	r3, [r7, #14]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d01b      	beq.n	80118c2 <_ZN3USB13AttemptConfigEhhhb+0x128>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 801188a:	78bb      	ldrb	r3, [r7, #2]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d108      	bne.n	80118a2 <_ZN3USB13AttemptConfigEhhhb+0x108>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8011890:	2201      	movs	r2, #1
 8011892:	21e8      	movs	r1, #232	; 0xe8
 8011894:	6878      	ldr	r0, [r7, #4]
 8011896:	f7ef ff83 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 801189a:	2066      	movs	r0, #102	; 0x66
 801189c:	f7f0 fab0 	bl	8001e00 <HAL_Delay>
 80118a0:	e00f      	b.n	80118c2 <_ZN3USB13AttemptConfigEhhhb+0x128>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 80118a2:	78ba      	ldrb	r2, [r7, #2]
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	321e      	adds	r2, #30
 80118a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80118ac:	78ba      	ldrb	r2, [r7, #2]
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	321e      	adds	r2, #30
 80118b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	3314      	adds	r3, #20
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	787a      	ldrb	r2, [r7, #1]
 80118be:	4611      	mov	r1, r2
 80118c0:	4798      	blx	r3
                }
        }
        return rcode;
 80118c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80118c4:	4618      	mov	r0, r3
 80118c6:	3714      	adds	r7, #20
 80118c8:	46bd      	mov	sp, r7
 80118ca:	bd90      	pop	{r4, r7, pc}

080118cc <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b090      	sub	sp, #64	; 0x40
 80118d0:	af02      	add	r7, sp, #8
 80118d2:	6078      	str	r0, [r7, #4]
 80118d4:	4608      	mov	r0, r1
 80118d6:	4611      	mov	r1, r2
 80118d8:	461a      	mov	r2, r3
 80118da:	4603      	mov	r3, r0
 80118dc:	70fb      	strb	r3, [r7, #3]
 80118de:	460b      	mov	r3, r1
 80118e0:	70bb      	strb	r3, [r7, #2]
 80118e2:	4613      	mov	r3, r2
 80118e4:	707b      	strb	r3, [r7, #1]
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 80118e6:	2300      	movs	r3, #0
 80118e8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 80118ec:	f107 030c 	add.w	r3, r7, #12
 80118f0:	633b      	str	r3, [r7, #48]	; 0x30
        UsbDevice *p = NULL;
 80118f2:	2300      	movs	r3, #0
 80118f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        EpInfo *oldep_ptr = NULL;
 80118f6:	2300      	movs	r3, #0
 80118f8:	62bb      	str	r3, [r7, #40]	; 0x28
        EpInfo epInfo;

        epInfo.epAddr = 0;
 80118fa:	2300      	movs	r3, #0
 80118fc:	723b      	strb	r3, [r7, #8]
        epInfo.maxPktSize = 8;
 80118fe:	2308      	movs	r3, #8
 8011900:	727b      	strb	r3, [r7, #9]
        epInfo.bmSndToggle = 0;
 8011902:	7abb      	ldrb	r3, [r7, #10]
 8011904:	f36f 0300 	bfc	r3, #0, #1
 8011908:	72bb      	strb	r3, [r7, #10]
        epInfo.bmRcvToggle = 0;
 801190a:	7abb      	ldrb	r3, [r7, #10]
 801190c:	f36f 0341 	bfc	r3, #1, #1
 8011910:	72bb      	strb	r3, [r7, #10]
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 8011912:	7abb      	ldrb	r3, [r7, #10]
 8011914:	220f      	movs	r2, #15
 8011916:	f362 0387 	bfi	r3, r2, #2, #6
 801191a:	72bb      	strb	r3, [r7, #10]

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 801191c:	6878      	ldr	r0, [r7, #4]
 801191e:	f7fa fd13 	bl	800c348 <_ZN3USB14GetAddressPoolEv>
 8011922:	6278      	str	r0, [r7, #36]	; 0x24
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 8011924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	2100      	movs	r1, #0
 801192c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801192e:	4798      	blx	r3
 8011930:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(!p) {
 8011932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011934:	2b00      	cmp	r3, #0
 8011936:	d101      	bne.n	801193c <_ZN3USB11ConfiguringEhhb+0x70>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8011938:	23d6      	movs	r3, #214	; 0xd6
 801193a:	e15c      	b.n	8011bf6 <_ZN3USB11ConfiguringEhhb+0x32a>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 801193c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	62bb      	str	r3, [r7, #40]	; 0x28

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 8011942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011944:	f107 0208 	add.w	r2, r7, #8
 8011948:	601a      	str	r2, [r3, #0]

        p->lowspeed = lowspeed;
 801194a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801194c:	787a      	ldrb	r2, [r7, #1]
 801194e:	719a      	strb	r2, [r3, #6]
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 8011950:	f107 030c 	add.w	r3, r7, #12
 8011954:	9300      	str	r3, [sp, #0]
 8011956:	2312      	movs	r3, #18
 8011958:	2200      	movs	r2, #0
 801195a:	2100      	movs	r1, #0
 801195c:	6878      	ldr	r0, [r7, #4]
 801195e:	f000 f94e 	bl	8011bfe <_ZN3USB11getDevDescrEhhtPh>
 8011962:	4603      	mov	r3, r0
 8011964:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 8011968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801196a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801196c:	601a      	str	r2, [r3, #0]

        if(rcode) {
 801196e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011972:	2b00      	cmp	r3, #0
 8011974:	d002      	beq.n	801197c <_ZN3USB11ConfiguringEhhb+0xb0>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 8011976:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801197a:	e13c      	b.n	8011bf6 <_ZN3USB11ConfiguringEhhb+0x32a>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 801197c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801197e:	7a1a      	ldrb	r2, [r3, #8]
 8011980:	7a5b      	ldrb	r3, [r3, #9]
 8011982:	021b      	lsls	r3, r3, #8
 8011984:	4313      	orrs	r3, r2
 8011986:	847b      	strh	r3, [r7, #34]	; 0x22
        uint16_t pid = udd->idProduct;
 8011988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801198a:	7a9a      	ldrb	r2, [r3, #10]
 801198c:	7adb      	ldrb	r3, [r3, #11]
 801198e:	021b      	lsls	r3, r3, #8
 8011990:	4313      	orrs	r3, r2
 8011992:	843b      	strh	r3, [r7, #32]
        uint8_t klass = udd->bDeviceClass;
 8011994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011996:	791b      	ldrb	r3, [r3, #4]
 8011998:	77fb      	strb	r3, [r7, #31]
        uint8_t subklass = udd->bDeviceSubClass;
 801199a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801199c:	795b      	ldrb	r3, [r3, #5]
 801199e:	77bb      	strb	r3, [r7, #30]
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 80119a0:	2300      	movs	r3, #0
 80119a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80119a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80119aa:	2b0f      	cmp	r3, #15
 80119ac:	f200 8081 	bhi.w	8011ab2 <_ZN3USB11ConfiguringEhhb+0x1e6>
                if(!devConfig[devConfigIndex]) continue; // no driver
 80119b0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	321e      	adds	r2, #30
 80119b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d06e      	beq.n	8011a9e <_ZN3USB11ConfiguringEhhb+0x1d2>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 80119c0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	321e      	adds	r2, #30
 80119c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80119cc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	321e      	adds	r2, #30
 80119d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	3310      	adds	r3, #16
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	4608      	mov	r0, r1
 80119e0:	4798      	blx	r3
 80119e2:	4603      	mov	r3, r0
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	bf14      	ite	ne
 80119e8:	2301      	movne	r3, #1
 80119ea:	2300      	moveq	r3, #0
 80119ec:	b2db      	uxtb	r3, r3
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d157      	bne.n	8011aa2 <_ZN3USB11ConfiguringEhhb+0x1d6>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 80119f2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	321e      	adds	r2, #30
 80119fa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80119fe:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	321e      	adds	r2, #30
 8011a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	3320      	adds	r3, #32
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	7fba      	ldrb	r2, [r7, #30]
 8011a12:	4611      	mov	r1, r2
 8011a14:	4798      	blx	r3
 8011a16:	4603      	mov	r3, r0
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d02b      	beq.n	8011a74 <_ZN3USB11ConfiguringEhhb+0x1a8>
 8011a1c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	321e      	adds	r2, #30
 8011a24:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011a28:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	321e      	adds	r2, #30
 8011a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	3318      	adds	r3, #24
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	8c3a      	ldrh	r2, [r7, #32]
 8011a3c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8011a3e:	4798      	blx	r3
 8011a40:	4603      	mov	r3, r0
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d114      	bne.n	8011a70 <_ZN3USB11ConfiguringEhhb+0x1a4>
 8011a46:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	321e      	adds	r2, #30
 8011a4e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011a52:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	321e      	adds	r2, #30
 8011a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	331c      	adds	r3, #28
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	7ffa      	ldrb	r2, [r7, #31]
 8011a66:	4611      	mov	r1, r2
 8011a68:	4798      	blx	r3
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d001      	beq.n	8011a74 <_ZN3USB11ConfiguringEhhb+0x1a8>
 8011a70:	2301      	movs	r3, #1
 8011a72:	e000      	b.n	8011a76 <_ZN3USB11ConfiguringEhhb+0x1aa>
 8011a74:	2300      	movs	r3, #0
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d014      	beq.n	8011aa4 <_ZN3USB11ConfiguringEhhb+0x1d8>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8011a7a:	78b8      	ldrb	r0, [r7, #2]
 8011a7c:	78fa      	ldrb	r2, [r7, #3]
 8011a7e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8011a82:	787b      	ldrb	r3, [r7, #1]
 8011a84:	9300      	str	r3, [sp, #0]
 8011a86:	4603      	mov	r3, r0
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f7ff fe86 	bl	801179a <_ZN3USB13AttemptConfigEhhhb>
 8011a8e:	4603      	mov	r3, r0
 8011a90:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 8011a94:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011a98:	2bd1      	cmp	r3, #209	; 0xd1
 8011a9a:	d109      	bne.n	8011ab0 <_ZN3USB11ConfiguringEhhb+0x1e4>
 8011a9c:	e002      	b.n	8011aa4 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(!devConfig[devConfigIndex]) continue; // no driver
 8011a9e:	bf00      	nop
 8011aa0:	e000      	b.n	8011aa4 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8011aa2:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8011aa4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011aa8:	3301      	adds	r3, #1
 8011aaa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011aae:	e77a      	b.n	80119a6 <_ZN3USB11ConfiguringEhhb+0xda>
                                break;
 8011ab0:	bf00      	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 8011ab2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ab6:	2b0f      	cmp	r3, #15
 8011ab8:	d802      	bhi.n	8011ac0 <_ZN3USB11ConfiguringEhhb+0x1f4>
                return rcode;
 8011aba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011abe:	e09a      	b.n	8011bf6 <_ZN3USB11ConfiguringEhhb+0x32a>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011ac6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011aca:	2b0f      	cmp	r3, #15
 8011acc:	f200 8088 	bhi.w	8011be0 <_ZN3USB11ConfiguringEhhb+0x314>
                if(!devConfig[devConfigIndex]) continue;
 8011ad0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	321e      	adds	r2, #30
 8011ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d074      	beq.n	8011bca <_ZN3USB11ConfiguringEhhb+0x2fe>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8011ae0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	321e      	adds	r2, #30
 8011ae8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011aec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	321e      	adds	r2, #30
 8011af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	3310      	adds	r3, #16
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	4608      	mov	r0, r1
 8011b00:	4798      	blx	r3
 8011b02:	4603      	mov	r3, r0
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	bf14      	ite	ne
 8011b08:	2301      	movne	r3, #1
 8011b0a:	2300      	moveq	r3, #0
 8011b0c:	b2db      	uxtb	r3, r3
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d15d      	bne.n	8011bce <_ZN3USB11ConfiguringEhhb+0x302>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8011b12:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	321e      	adds	r2, #30
 8011b1a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011b1e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	321e      	adds	r2, #30
 8011b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	3320      	adds	r3, #32
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	7fba      	ldrb	r2, [r7, #30]
 8011b32:	4611      	mov	r1, r2
 8011b34:	4798      	blx	r3
 8011b36:	4603      	mov	r3, r0
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d02b      	beq.n	8011b94 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8011b3c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	321e      	adds	r2, #30
 8011b44:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011b48:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	321e      	adds	r2, #30
 8011b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	3318      	adds	r3, #24
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	8c3a      	ldrh	r2, [r7, #32]
 8011b5c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8011b5e:	4798      	blx	r3
 8011b60:	4603      	mov	r3, r0
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d114      	bne.n	8011b90 <_ZN3USB11ConfiguringEhhb+0x2c4>
 8011b66:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	321e      	adds	r2, #30
 8011b6e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011b72:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	321e      	adds	r2, #30
 8011b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	331c      	adds	r3, #28
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	7ffa      	ldrb	r2, [r7, #31]
 8011b86:	4611      	mov	r1, r2
 8011b88:	4798      	blx	r3
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d001      	beq.n	8011b94 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8011b90:	2301      	movs	r3, #1
 8011b92:	e000      	b.n	8011b96 <_ZN3USB11ConfiguringEhhb+0x2ca>
 8011b94:	2300      	movs	r3, #0
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d11b      	bne.n	8011bd2 <_ZN3USB11ConfiguringEhhb+0x306>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8011b9a:	78b8      	ldrb	r0, [r7, #2]
 8011b9c:	78fa      	ldrb	r2, [r7, #3]
 8011b9e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8011ba2:	787b      	ldrb	r3, [r7, #1]
 8011ba4:	9300      	str	r3, [sp, #0]
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	6878      	ldr	r0, [r7, #4]
 8011baa:	f7ff fdf6 	bl	801179a <_ZN3USB13AttemptConfigEhhhb>
 8011bae:	4603      	mov	r3, r0
 8011bb0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 8011bb4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011bb8:	2bd1      	cmp	r3, #209	; 0xd1
 8011bba:	d00b      	beq.n	8011bd4 <_ZN3USB11ConfiguringEhhb+0x308>
 8011bbc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011bc0:	2bd9      	cmp	r3, #217	; 0xd9
 8011bc2:	d007      	beq.n	8011bd4 <_ZN3USB11ConfiguringEhhb+0x308>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 8011bc4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011bc8:	e015      	b.n	8011bf6 <_ZN3USB11ConfiguringEhhb+0x32a>
                if(!devConfig[devConfigIndex]) continue;
 8011bca:	bf00      	nop
 8011bcc:	e002      	b.n	8011bd4 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8011bce:	bf00      	nop
 8011bd0:	e000      	b.n	8011bd4 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8011bd2:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8011bd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011bd8:	3301      	adds	r3, #1
 8011bda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011bde:	e772      	b.n	8011ac6 <_ZN3USB11ConfiguringEhhb+0x1fa>
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 8011be0:	787b      	ldrb	r3, [r7, #1]
 8011be2:	78ba      	ldrb	r2, [r7, #2]
 8011be4:	78f9      	ldrb	r1, [r7, #3]
 8011be6:	6878      	ldr	r0, [r7, #4]
 8011be8:	f7ff fd7c 	bl	80116e4 <_ZN3USB17DefaultAddressingEhhb>
 8011bec:	4603      	mov	r3, r0
 8011bee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        return rcode;
 8011bf2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3738      	adds	r7, #56	; 0x38
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd80      	pop	{r7, pc}

08011bfe <_ZN3USB11getDevDescrEhhtPh>:
}

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 8011bfe:	b580      	push	{r7, lr}
 8011c00:	b08a      	sub	sp, #40	; 0x28
 8011c02:	af08      	add	r7, sp, #32
 8011c04:	6078      	str	r0, [r7, #4]
 8011c06:	4608      	mov	r0, r1
 8011c08:	4611      	mov	r1, r2
 8011c0a:	461a      	mov	r2, r3
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	70fb      	strb	r3, [r7, #3]
 8011c10:	460b      	mov	r3, r1
 8011c12:	70bb      	strb	r3, [r7, #2]
 8011c14:	4613      	mov	r3, r2
 8011c16:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 8011c18:	78ba      	ldrb	r2, [r7, #2]
 8011c1a:	78f9      	ldrb	r1, [r7, #3]
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	9307      	str	r3, [sp, #28]
 8011c20:	693b      	ldr	r3, [r7, #16]
 8011c22:	9306      	str	r3, [sp, #24]
 8011c24:	883b      	ldrh	r3, [r7, #0]
 8011c26:	9305      	str	r3, [sp, #20]
 8011c28:	883b      	ldrh	r3, [r7, #0]
 8011c2a:	9304      	str	r3, [sp, #16]
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	9303      	str	r3, [sp, #12]
 8011c30:	2301      	movs	r3, #1
 8011c32:	9302      	str	r3, [sp, #8]
 8011c34:	2300      	movs	r3, #0
 8011c36:	9301      	str	r3, [sp, #4]
 8011c38:	2306      	movs	r3, #6
 8011c3a:	9300      	str	r3, [sp, #0]
 8011c3c:	2380      	movs	r3, #128	; 0x80
 8011c3e:	6878      	ldr	r0, [r7, #4]
 8011c40:	f7fe fffd 	bl	8010c3e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011c44:	4603      	mov	r3, r0
}
 8011c46:	4618      	mov	r0, r3
 8011c48:	3708      	adds	r7, #8
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	bd80      	pop	{r7, pc}

08011c4e <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 8011c4e:	b580      	push	{r7, lr}
 8011c50:	b08a      	sub	sp, #40	; 0x28
 8011c52:	af08      	add	r7, sp, #32
 8011c54:	6078      	str	r0, [r7, #4]
 8011c56:	4608      	mov	r0, r1
 8011c58:	4611      	mov	r1, r2
 8011c5a:	461a      	mov	r2, r3
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	70fb      	strb	r3, [r7, #3]
 8011c60:	460b      	mov	r3, r1
 8011c62:	70bb      	strb	r3, [r7, #2]
 8011c64:	4613      	mov	r3, r2
 8011c66:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 8011c68:	78ba      	ldrb	r2, [r7, #2]
 8011c6a:	78f9      	ldrb	r1, [r7, #3]
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	9307      	str	r3, [sp, #28]
 8011c70:	697b      	ldr	r3, [r7, #20]
 8011c72:	9306      	str	r3, [sp, #24]
 8011c74:	883b      	ldrh	r3, [r7, #0]
 8011c76:	9305      	str	r3, [sp, #20]
 8011c78:	883b      	ldrh	r3, [r7, #0]
 8011c7a:	9304      	str	r3, [sp, #16]
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	9303      	str	r3, [sp, #12]
 8011c80:	2302      	movs	r3, #2
 8011c82:	9302      	str	r3, [sp, #8]
 8011c84:	7c3b      	ldrb	r3, [r7, #16]
 8011c86:	9301      	str	r3, [sp, #4]
 8011c88:	2306      	movs	r3, #6
 8011c8a:	9300      	str	r3, [sp, #0]
 8011c8c:	2380      	movs	r3, #128	; 0x80
 8011c8e:	6878      	ldr	r0, [r7, #4]
 8011c90:	f7fe ffd5 	bl	8010c3e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011c94:	4603      	mov	r3, r0
}
 8011c96:	4618      	mov	r0, r3
 8011c98:	3708      	adds	r7, #8
 8011c9a:	46bd      	mov	sp, r7
 8011c9c:	bd80      	pop	{r7, pc}

08011c9e <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 8011c9e:	b580      	push	{r7, lr}
 8011ca0:	b09e      	sub	sp, #120	; 0x78
 8011ca2:	af08      	add	r7, sp, #32
 8011ca4:	6078      	str	r0, [r7, #4]
 8011ca6:	4608      	mov	r0, r1
 8011ca8:	4611      	mov	r1, r2
 8011caa:	461a      	mov	r2, r3
 8011cac:	4603      	mov	r3, r0
 8011cae:	70fb      	strb	r3, [r7, #3]
 8011cb0:	460b      	mov	r3, r1
 8011cb2:	70bb      	strb	r3, [r7, #2]
 8011cb4:	4613      	mov	r3, r2
 8011cb6:	707b      	strb	r3, [r7, #1]
        const uint8_t bufSize = 64;
 8011cb8:	2340      	movs	r3, #64	; 0x40
 8011cba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 8011cbe:	f107 030c 	add.w	r3, r7, #12
 8011cc2:	653b      	str	r3, [r7, #80]	; 0x50

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 8011cc4:	78ba      	ldrb	r2, [r7, #2]
 8011cc6:	78f9      	ldrb	r1, [r7, #3]
 8011cc8:	f107 030c 	add.w	r3, r7, #12
 8011ccc:	9301      	str	r3, [sp, #4]
 8011cce:	787b      	ldrb	r3, [r7, #1]
 8011cd0:	9300      	str	r3, [sp, #0]
 8011cd2:	2309      	movs	r3, #9
 8011cd4:	6878      	ldr	r0, [r7, #4]
 8011cd6:	f7ff ffba 	bl	8011c4e <_ZN3USB12getConfDescrEhhthPh>
 8011cda:	4603      	mov	r3, r0
 8011cdc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if(ret)
 8011ce0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d002      	beq.n	8011cee <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x50>
                return ret;
 8011ce8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011cec:	e020      	b.n	8011d30 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x92>

        uint16_t total = ucd->wTotalLength;
 8011cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cf0:	789a      	ldrb	r2, [r3, #2]
 8011cf2:	78db      	ldrb	r3, [r3, #3]
 8011cf4:	021b      	lsls	r3, r3, #8
 8011cf6:	4313      	orrs	r3, r2
 8011cf8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 8011cfc:	78ba      	ldrb	r2, [r7, #2]
 8011cfe:	78f9      	ldrb	r1, [r7, #3]
 8011d00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011d02:	9307      	str	r3, [sp, #28]
 8011d04:	f107 030c 	add.w	r3, r7, #12
 8011d08:	9306      	str	r3, [sp, #24]
 8011d0a:	2340      	movs	r3, #64	; 0x40
 8011d0c:	9305      	str	r3, [sp, #20]
 8011d0e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8011d12:	9304      	str	r3, [sp, #16]
 8011d14:	2300      	movs	r3, #0
 8011d16:	9303      	str	r3, [sp, #12]
 8011d18:	2302      	movs	r3, #2
 8011d1a:	9302      	str	r3, [sp, #8]
 8011d1c:	787b      	ldrb	r3, [r7, #1]
 8011d1e:	9301      	str	r3, [sp, #4]
 8011d20:	2306      	movs	r3, #6
 8011d22:	9300      	str	r3, [sp, #0]
 8011d24:	2380      	movs	r3, #128	; 0x80
 8011d26:	6878      	ldr	r0, [r7, #4]
 8011d28:	f7fe ff89 	bl	8010c3e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	bf00      	nop
}
 8011d30:	4618      	mov	r0, r3
 8011d32:	3758      	adds	r7, #88	; 0x58
 8011d34:	46bd      	mov	sp, r7
 8011d36:	bd80      	pop	{r7, pc}

08011d38 <_ZN3USB7setAddrEhhh>:
uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
}
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b08c      	sub	sp, #48	; 0x30
 8011d3c:	af08      	add	r7, sp, #32
 8011d3e:	6078      	str	r0, [r7, #4]
 8011d40:	4608      	mov	r0, r1
 8011d42:	4611      	mov	r1, r2
 8011d44:	461a      	mov	r2, r3
 8011d46:	4603      	mov	r3, r0
 8011d48:	70fb      	strb	r3, [r7, #3]
 8011d4a:	460b      	mov	r3, r1
 8011d4c:	70bb      	strb	r3, [r7, #2]
 8011d4e:	4613      	mov	r3, r2
 8011d50:	707b      	strb	r3, [r7, #1]
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 8011d52:	78ba      	ldrb	r2, [r7, #2]
 8011d54:	78f9      	ldrb	r1, [r7, #3]
 8011d56:	2300      	movs	r3, #0
 8011d58:	9307      	str	r3, [sp, #28]
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	9306      	str	r3, [sp, #24]
 8011d5e:	2300      	movs	r3, #0
 8011d60:	9305      	str	r3, [sp, #20]
 8011d62:	2300      	movs	r3, #0
 8011d64:	9304      	str	r3, [sp, #16]
 8011d66:	2300      	movs	r3, #0
 8011d68:	9303      	str	r3, [sp, #12]
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	9302      	str	r3, [sp, #8]
 8011d6e:	787b      	ldrb	r3, [r7, #1]
 8011d70:	9301      	str	r3, [sp, #4]
 8011d72:	2305      	movs	r3, #5
 8011d74:	9300      	str	r3, [sp, #0]
 8011d76:	2300      	movs	r3, #0
 8011d78:	6878      	ldr	r0, [r7, #4]
 8011d7a:	f7fe ff60 	bl	8010c3e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011d7e:	4603      	mov	r3, r0
 8011d80:	73fb      	strb	r3, [r7, #15]
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 8011d82:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8011d86:	f7f0 f83b 	bl	8001e00 <HAL_Delay>
        return rcode;
 8011d8a:	7bfb      	ldrb	r3, [r7, #15]
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	3710      	adds	r7, #16
 8011d90:	46bd      	mov	sp, r7
 8011d92:	bd80      	pop	{r7, pc}

08011d94 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b08a      	sub	sp, #40	; 0x28
 8011d98:	af08      	add	r7, sp, #32
 8011d9a:	6078      	str	r0, [r7, #4]
 8011d9c:	4608      	mov	r0, r1
 8011d9e:	4611      	mov	r1, r2
 8011da0:	461a      	mov	r2, r3
 8011da2:	4603      	mov	r3, r0
 8011da4:	70fb      	strb	r3, [r7, #3]
 8011da6:	460b      	mov	r3, r1
 8011da8:	70bb      	strb	r3, [r7, #2]
 8011daa:	4613      	mov	r3, r2
 8011dac:	707b      	strb	r3, [r7, #1]
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 8011dae:	78ba      	ldrb	r2, [r7, #2]
 8011db0:	78f9      	ldrb	r1, [r7, #3]
 8011db2:	2300      	movs	r3, #0
 8011db4:	9307      	str	r3, [sp, #28]
 8011db6:	2300      	movs	r3, #0
 8011db8:	9306      	str	r3, [sp, #24]
 8011dba:	2300      	movs	r3, #0
 8011dbc:	9305      	str	r3, [sp, #20]
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	9304      	str	r3, [sp, #16]
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	9303      	str	r3, [sp, #12]
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	9302      	str	r3, [sp, #8]
 8011dca:	787b      	ldrb	r3, [r7, #1]
 8011dcc:	9301      	str	r3, [sp, #4]
 8011dce:	2309      	movs	r3, #9
 8011dd0:	9300      	str	r3, [sp, #0]
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	6878      	ldr	r0, [r7, #4]
 8011dd6:	f7fe ff32 	bl	8010c3e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011dda:	4603      	mov	r3, r0
}
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3708      	adds	r7, #8
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}

08011de4 <_ZN8MAX3421eI3P102P9EC1Ev>:
MAX3421e< SPI_SS, INTR >::MAX3421e() {
 8011de4:	b480      	push	{r7}
 8011de6:	b083      	sub	sp, #12
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
};
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	4618      	mov	r0, r3
 8011df0:	370c      	adds	r7, #12
 8011df2:	46bd      	mov	sp, r7
 8011df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df8:	4770      	bx	lr
	...

08011dfc <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 8011dfc:	b480      	push	{r7}
 8011dfe:	b083      	sub	sp, #12
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
 8011e04:	4a04      	ldr	r2, [pc, #16]	; (8011e18 <_ZN11AddressPoolC1Ev+0x1c>)
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	601a      	str	r2, [r3, #0]
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	370c      	adds	r7, #12
 8011e10:	46bd      	mov	sp, r7
 8011e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e16:	4770      	bx	lr
 8011e18:	080128fc 	.word	0x080128fc

08011e1c <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b082      	sub	sp, #8
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	4618      	mov	r0, r3
 8011e28:	f7ff ffe8 	bl	8011dfc <_ZN11AddressPoolC1Ev>
 8011e2c:	4a17      	ldr	r2, [pc, #92]	; (8011e8c <_ZN15AddressPoolImplILh16EEC1Ev+0x70>)
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	601a      	str	r2, [r3, #0]
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	2200      	movs	r2, #0
 8011e36:	71da      	strb	r2, [r3, #7]
                // Zero address is reserved
                InitEntry(0);
 8011e38:	2100      	movs	r1, #0
 8011e3a:	6878      	ldr	r0, [r7, #4]
 8011e3c:	f000 f990 	bl	8012160 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	2200      	movs	r2, #0
 8011e44:	731a      	strb	r2, [r3, #12]
                thePool[0].epinfo = &dev0ep;
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	1d1a      	adds	r2, r3, #4
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	609a      	str	r2, [r3, #8]
                dev0ep.epAddr = 0;
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	2200      	movs	r2, #0
 8011e52:	711a      	strb	r2, [r3, #4]
                dev0ep.maxPktSize = 8;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	2208      	movs	r2, #8
 8011e58:	715a      	strb	r2, [r3, #5]
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 8011e5a:	687a      	ldr	r2, [r7, #4]
 8011e5c:	7993      	ldrb	r3, [r2, #6]
 8011e5e:	f36f 0300 	bfc	r3, #0, #1
 8011e62:	7193      	strb	r3, [r2, #6]
                dev0ep.bmRcvToggle = 0;
 8011e64:	687a      	ldr	r2, [r7, #4]
 8011e66:	7993      	ldrb	r3, [r2, #6]
 8011e68:	f36f 0341 	bfc	r3, #1, #1
 8011e6c:	7193      	strb	r3, [r2, #6]
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 8011e6e:	687a      	ldr	r2, [r7, #4]
 8011e70:	7993      	ldrb	r3, [r2, #6]
 8011e72:	210f      	movs	r1, #15
 8011e74:	f361 0387 	bfi	r3, r1, #2, #6
 8011e78:	7193      	strb	r3, [r2, #6]

                InitAllAddresses();
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	f000 f9a1 	bl	80121c2 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	4618      	mov	r0, r3
 8011e84:	3708      	adds	r7, #8
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd80      	pop	{r7, pc}
 8011e8a:	bf00      	nop
 8011e8c:	080128e8 	.word	0x080128e8

08011e90 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b084      	sub	sp, #16
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
 8011e98:	460b      	mov	r3, r1
 8011e9a:	70fb      	strb	r3, [r7, #3]
                if(!addr)
 8011e9c:	78fb      	ldrb	r3, [r7, #3]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d102      	bne.n	8011ea8 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x18>
                        return thePool;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	3308      	adds	r3, #8
 8011ea6:	e014      	b.n	8011ed2 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x42>

                uint8_t index = FindAddressIndex(addr);
 8011ea8:	78fb      	ldrb	r3, [r7, #3]
 8011eaa:	4619      	mov	r1, r3
 8011eac:	6878      	ldr	r0, [r7, #4]
 8011eae:	f000 f9a1 	bl	80121f4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	73fb      	strb	r3, [r7, #15]

                return (!index) ? NULL : thePool + index;
 8011eb6:	7bfb      	ldrb	r3, [r7, #15]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d008      	beq.n	8011ece <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x3e>
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	f103 0108 	add.w	r1, r3, #8
 8011ec2:	7bfa      	ldrb	r2, [r7, #15]
 8011ec4:	4613      	mov	r3, r2
 8011ec6:	00db      	lsls	r3, r3, #3
 8011ec8:	1a9b      	subs	r3, r3, r2
 8011eca:	440b      	add	r3, r1
 8011ecc:	e000      	b.n	8011ed0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x40>
 8011ece:	2300      	movs	r3, #0
 8011ed0:	bf00      	nop
        };
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	3710      	adds	r7, #16
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	bd80      	pop	{r7, pc}
	...

08011edc <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b086      	sub	sp, #24
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	60f8      	str	r0, [r7, #12]
 8011ee4:	607b      	str	r3, [r7, #4]
 8011ee6:	460b      	mov	r3, r1
 8011ee8:	72fb      	strb	r3, [r7, #11]
 8011eea:	4613      	mov	r3, r2
 8011eec:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 8011eee:	f7ee fcd7 	bl	80008a0 <_ZN3P105ClearEv>
        uint8_t data = reg | 0x02;
 8011ef2:	7afb      	ldrb	r3, [r7, #11]
 8011ef4:	f043 0302 	orr.w	r3, r3, #2
 8011ef8:	b2db      	uxtb	r3, r3
 8011efa:	75fb      	strb	r3, [r7, #23]
        HAL_SPI_Transmit(&SPI_Handle, &data, 1, HAL_MAX_DELAY);
 8011efc:	f107 0117 	add.w	r1, r7, #23
 8011f00:	f04f 33ff 	mov.w	r3, #4294967295
 8011f04:	2201      	movs	r2, #1
 8011f06:	480b      	ldr	r0, [pc, #44]	; (8011f34 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 8011f08:	f7f2 fd4b 	bl	80049a2 <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 8011f0c:	7abb      	ldrb	r3, [r7, #10]
 8011f0e:	b29a      	uxth	r2, r3
 8011f10:	f04f 33ff 	mov.w	r3, #4294967295
 8011f14:	6879      	ldr	r1, [r7, #4]
 8011f16:	4807      	ldr	r0, [pc, #28]	; (8011f34 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 8011f18:	f7f2 fd43 	bl	80049a2 <HAL_SPI_Transmit>
        data_p += nbytes;
 8011f1c:	7abb      	ldrb	r3, [r7, #10]
 8011f1e:	687a      	ldr	r2, [r7, #4]
 8011f20:	4413      	add	r3, r2
 8011f22:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 8011f24:	f7ee fcb0 	bl	8000888 <_ZN3P103SetEv>
        return ( data_p);
 8011f28:	687b      	ldr	r3, [r7, #4]
}
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	3718      	adds	r7, #24
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	bd80      	pop	{r7, pc}
 8011f32:	bf00      	nop
 8011f34:	200002d4 	.word	0x200002d4

08011f38 <_Z10D_PrintHexIhEvT_i>:
                mask >>= 4;
        }
        prn->print((T)val, HEX);
}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 8011f38:	b480      	push	{r7}
 8011f3a:	b083      	sub	sp, #12
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	4603      	mov	r3, r0
 8011f40:	6039      	str	r1, [r7, #0]
 8011f42:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 8011f44:	bf00      	nop
 8011f46:	370c      	adds	r7, #12
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4e:	4770      	bx	lr

08011f50 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b084      	sub	sp, #16
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	60f8      	str	r0, [r7, #12]
 8011f58:	607b      	str	r3, [r7, #4]
 8011f5a:	460b      	mov	r3, r1
 8011f5c:	72fb      	strb	r3, [r7, #11]
 8011f5e:	4613      	mov	r3, r2
 8011f60:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 8011f62:	f7ee fc9d 	bl	80008a0 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8011f66:	f107 010b 	add.w	r1, r7, #11
 8011f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8011f6e:	2201      	movs	r2, #1
 8011f70:	480d      	ldr	r0, [pc, #52]	; (8011fa8 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 8011f72:	f7f2 fd16 	bl	80049a2 <HAL_SPI_Transmit>
        memset(data_p, 0, nbytes); // Make sure we send out empty bytes
 8011f76:	7abb      	ldrb	r3, [r7, #10]
 8011f78:	461a      	mov	r2, r3
 8011f7a:	2100      	movs	r1, #0
 8011f7c:	6878      	ldr	r0, [r7, #4]
 8011f7e:	f000 fa91 	bl	80124a4 <memset>
        HAL_SPI_Receive(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 8011f82:	7abb      	ldrb	r3, [r7, #10]
 8011f84:	b29a      	uxth	r2, r3
 8011f86:	f04f 33ff 	mov.w	r3, #4294967295
 8011f8a:	6879      	ldr	r1, [r7, #4]
 8011f8c:	4806      	ldr	r0, [pc, #24]	; (8011fa8 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 8011f8e:	f7f2 fe44 	bl	8004c1a <HAL_SPI_Receive>
        data_p += nbytes;
 8011f92:	7abb      	ldrb	r3, [r7, #10]
 8011f94:	687a      	ldr	r2, [r7, #4]
 8011f96:	4413      	add	r3, r2
 8011f98:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 8011f9a:	f7ee fc75 	bl	8000888 <_ZN3P103SetEv>
        return ( data_p);
 8011f9e:	687b      	ldr	r3, [r7, #4]
}
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	3710      	adds	r7, #16
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	bd80      	pop	{r7, pc}
 8011fa8:	200002d4 	.word	0x200002d4

08011fac <_ZN8MAX3421eI3P102P9E4TaskEv>:

/* MAX3421 state change task and interrupt handler */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::Task(void) {
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b084      	sub	sp, #16
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
        uint8_t rcode = 0;
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	73fb      	strb	r3, [r7, #15]
        uint8_t pinvalue;
        //USB_HOST_SERIAL.print("Vbus state: ");
        //USB_HOST_SERIAL.println( vbusState, HEX );
        pinvalue = INTR::IsSet(); //Read();
 8011fb8:	f7fe fd46 	bl	8010a48 <_ZN2P95IsSetEv>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	73bb      	strb	r3, [r7, #14]
        //pinvalue = digitalRead( MAX_INT );
        if(pinvalue == 0) {
 8011fc0:	7bbb      	ldrb	r3, [r7, #14]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d104      	bne.n	8011fd0 <_ZN8MAX3421eI3P102P9E4TaskEv+0x24>
                rcode = IntHandler();
 8011fc6:	6878      	ldr	r0, [r7, #4]
 8011fc8:	f000 f937 	bl	801223a <_ZN8MAX3421eI3P102P9E10IntHandlerEv>
 8011fcc:	4603      	mov	r3, r0
 8011fce:	73fb      	strb	r3, [r7, #15]
        //    pinvalue = digitalRead( MAX_GPX );
        //    if( pinvalue == LOW ) {
        //        GpxHandler();
        //    }
        //    usbSM();                                //USB state machine
        return ( rcode);
 8011fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	3710      	adds	r7, #16
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}
	...

08011fdc <_ZN8MAX3421eI3P102P9E12getVbusStateEv>:
        uint8_t getVbusState(void) {
 8011fdc:	b480      	push	{r7}
 8011fde:	b083      	sub	sp, #12
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	6078      	str	r0, [r7, #4]
                return vbusState;
 8011fe4:	4b03      	ldr	r3, [pc, #12]	; (8011ff4 <_ZN8MAX3421eI3P102P9E12getVbusStateEv+0x18>)
 8011fe6:	781b      	ldrb	r3, [r3, #0]
        };
 8011fe8:	4618      	mov	r0, r3
 8011fea:	370c      	adds	r7, #12
 8011fec:	46bd      	mov	sp, r7
 8011fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff2:	4770      	bx	lr
 8011ff4:	20000650 	.word	0x20000650

08011ff8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b084      	sub	sp, #16
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
 8012000:	4608      	mov	r0, r1
 8012002:	4611      	mov	r1, r2
 8012004:	461a      	mov	r2, r3
 8012006:	4603      	mov	r3, r0
 8012008:	70fb      	strb	r3, [r7, #3]
 801200a:	460b      	mov	r3, r1
 801200c:	70bb      	strb	r3, [r7, #2]
 801200e:	4613      	mov	r3, r2
 8012010:	707b      	strb	r3, [r7, #1]
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 8012012:	78fb      	ldrb	r3, [r7, #3]
 8012014:	733b      	strb	r3, [r7, #12]
                if(_parent.bmReserved || port > 7)
 8012016:	7b3b      	ldrb	r3, [r7, #12]
 8012018:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801201c:	b2db      	uxtb	r3, r3
 801201e:	2b00      	cmp	r3, #0
 8012020:	d102      	bne.n	8012028 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x30>
 8012022:	787b      	ldrb	r3, [r7, #1]
 8012024:	2b07      	cmp	r3, #7
 8012026:	d901      	bls.n	801202c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x34>
                        //if(parent > 127 || port > 7)
                        return 0;
 8012028:	2300      	movs	r3, #0
 801202a:	e079      	b.n	8012120 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(is_hub && hubCounter == 7)
 801202c:	78bb      	ldrb	r3, [r7, #2]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d005      	beq.n	801203e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	79db      	ldrb	r3, [r3, #7]
 8012036:	2b07      	cmp	r3, #7
 8012038:	d101      	bne.n	801203e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
                        return 0;
 801203a:	2300      	movs	r3, #0
 801203c:	e070      	b.n	8012120 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 801203e:	2100      	movs	r1, #0
 8012040:	6878      	ldr	r0, [r7, #4]
 8012042:	f000 f8d7 	bl	80121f4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8012046:	4603      	mov	r3, r0
 8012048:	73fb      	strb	r3, [r7, #15]

                if(!index) // if empty entry is not found
 801204a:	7bfb      	ldrb	r3, [r7, #15]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d101      	bne.n	8012054 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x5c>
                        return 0;
 8012050:	2300      	movs	r3, #0
 8012052:	e065      	b.n	8012120 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(_parent.devAddress == 0) {
 8012054:	7b3b      	ldrb	r3, [r7, #12]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d124      	bne.n	80120a4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
                        if(is_hub) {
 801205a:	78bb      	ldrb	r3, [r7, #2]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d00f      	beq.n	8012080 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x88>
                                thePool[index].address.devAddress = 0x41;
 8012060:	7bfa      	ldrb	r2, [r7, #15]
 8012062:	6879      	ldr	r1, [r7, #4]
 8012064:	4613      	mov	r3, r2
 8012066:	00db      	lsls	r3, r3, #3
 8012068:	1a9b      	subs	r3, r3, r2
 801206a:	440b      	add	r3, r1
 801206c:	330c      	adds	r3, #12
 801206e:	2241      	movs	r2, #65	; 0x41
 8012070:	701a      	strb	r2, [r3, #0]
                                hubCounter++;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	79db      	ldrb	r3, [r3, #7]
 8012076:	3301      	adds	r3, #1
 8012078:	b2da      	uxtb	r2, r3
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	71da      	strb	r2, [r3, #7]
 801207e:	e008      	b.n	8012092 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                        } else
                                thePool[index].address.devAddress = 1;
 8012080:	7bfa      	ldrb	r2, [r7, #15]
 8012082:	6879      	ldr	r1, [r7, #4]
 8012084:	4613      	mov	r3, r2
 8012086:	00db      	lsls	r3, r3, #3
 8012088:	1a9b      	subs	r3, r3, r2
 801208a:	440b      	add	r3, r1
 801208c:	330c      	adds	r3, #12
 801208e:	2201      	movs	r2, #1
 8012090:	701a      	strb	r2, [r3, #0]

                        return thePool[index].address.devAddress;
 8012092:	7bfa      	ldrb	r2, [r7, #15]
 8012094:	6879      	ldr	r1, [r7, #4]
 8012096:	4613      	mov	r3, r2
 8012098:	00db      	lsls	r3, r3, #3
 801209a:	1a9b      	subs	r3, r3, r2
 801209c:	440b      	add	r3, r1
 801209e:	330c      	adds	r3, #12
 80120a0:	781b      	ldrb	r3, [r3, #0]
 80120a2:	e03d      	b.n	8012120 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 80120a4:	2300      	movs	r3, #0
 80120a6:	723b      	strb	r3, [r7, #8]
                addr.bmParent = _parent.bmAddress;
 80120a8:	7b3b      	ldrb	r3, [r7, #12]
 80120aa:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80120ae:	b2da      	uxtb	r2, r3
 80120b0:	7a3b      	ldrb	r3, [r7, #8]
 80120b2:	f362 03c5 	bfi	r3, r2, #3, #3
 80120b6:	723b      	strb	r3, [r7, #8]
                if(is_hub) {
 80120b8:	78bb      	ldrb	r3, [r7, #2]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d013      	beq.n	80120e6 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xee>
                        addr.bmHub = 1;
 80120be:	7a3b      	ldrb	r3, [r7, #8]
 80120c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120c4:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = ++hubCounter;
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	79db      	ldrb	r3, [r3, #7]
 80120ca:	3301      	adds	r3, #1
 80120cc:	b2da      	uxtb	r2, r3
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	71da      	strb	r2, [r3, #7]
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	79db      	ldrb	r3, [r3, #7]
 80120d6:	f003 0307 	and.w	r3, r3, #7
 80120da:	b2da      	uxtb	r2, r3
 80120dc:	7a3b      	ldrb	r3, [r7, #8]
 80120de:	f362 0302 	bfi	r3, r2, #0, #3
 80120e2:	723b      	strb	r3, [r7, #8]
 80120e4:	e00b      	b.n	80120fe <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x106>
                } else {
                        addr.bmHub = 0;
 80120e6:	7a3b      	ldrb	r3, [r7, #8]
 80120e8:	f36f 1386 	bfc	r3, #6, #1
 80120ec:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = port;
 80120ee:	787b      	ldrb	r3, [r7, #1]
 80120f0:	f003 0307 	and.w	r3, r3, #7
 80120f4:	b2da      	uxtb	r2, r3
 80120f6:	7a3b      	ldrb	r3, [r7, #8]
 80120f8:	f362 0302 	bfi	r3, r2, #0, #3
 80120fc:	723b      	strb	r3, [r7, #8]
                }
                thePool[index].address = addr;
 80120fe:	7bfa      	ldrb	r2, [r7, #15]
 8012100:	6879      	ldr	r1, [r7, #4]
 8012102:	4613      	mov	r3, r2
 8012104:	00db      	lsls	r3, r3, #3
 8012106:	1a9b      	subs	r3, r3, r2
 8012108:	440b      	add	r3, r1
 801210a:	330c      	adds	r3, #12
 801210c:	7a3a      	ldrb	r2, [r7, #8]
 801210e:	701a      	strb	r2, [r3, #0]
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 8012110:	7bfa      	ldrb	r2, [r7, #15]
 8012112:	6879      	ldr	r1, [r7, #4]
 8012114:	4613      	mov	r3, r2
 8012116:	00db      	lsls	r3, r3, #3
 8012118:	1a9b      	subs	r3, r3, r2
 801211a:	440b      	add	r3, r1
 801211c:	330c      	adds	r3, #12
 801211e:	781b      	ldrb	r3, [r3, #0]
        };
 8012120:	4618      	mov	r0, r3
 8012122:	3710      	adds	r7, #16
 8012124:	46bd      	mov	sp, r7
 8012126:	bd80      	pop	{r7, pc}

08012128 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 8012128:	b580      	push	{r7, lr}
 801212a:	b084      	sub	sp, #16
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
 8012130:	460b      	mov	r3, r1
 8012132:	70fb      	strb	r3, [r7, #3]
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 8012134:	78fb      	ldrb	r3, [r7, #3]
 8012136:	2b41      	cmp	r3, #65	; 0x41
 8012138:	d103      	bne.n	8012142 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x1a>
                        InitAllAddresses();
 801213a:	6878      	ldr	r0, [r7, #4]
 801213c:	f000 f841 	bl	80121c2 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 8012140:	e00b      	b.n	801215a <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x32>
                }
                uint8_t index = FindAddressIndex(addr);
 8012142:	78fb      	ldrb	r3, [r7, #3]
 8012144:	4619      	mov	r1, r3
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	f000 f854 	bl	80121f4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 801214c:	4603      	mov	r3, r0
 801214e:	73fb      	strb	r3, [r7, #15]
                FreeAddressByIndex(index);
 8012150:	7bfb      	ldrb	r3, [r7, #15]
 8012152:	4619      	mov	r1, r3
 8012154:	6878      	ldr	r0, [r7, #4]
 8012156:	f000 f893 	bl	8012280 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 801215a:	3710      	adds	r7, #16
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}

08012160 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:
        void InitEntry(uint8_t index) {
 8012160:	b480      	push	{r7}
 8012162:	b083      	sub	sp, #12
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
 8012168:	460b      	mov	r3, r1
 801216a:	70fb      	strb	r3, [r7, #3]
                thePool[index].address.devAddress = 0;
 801216c:	78fa      	ldrb	r2, [r7, #3]
 801216e:	6879      	ldr	r1, [r7, #4]
 8012170:	4613      	mov	r3, r2
 8012172:	00db      	lsls	r3, r3, #3
 8012174:	1a9b      	subs	r3, r3, r2
 8012176:	440b      	add	r3, r1
 8012178:	330c      	adds	r3, #12
 801217a:	2200      	movs	r2, #0
 801217c:	701a      	strb	r2, [r3, #0]
                thePool[index].epcount = 1;
 801217e:	78fa      	ldrb	r2, [r7, #3]
 8012180:	6879      	ldr	r1, [r7, #4]
 8012182:	4613      	mov	r3, r2
 8012184:	00db      	lsls	r3, r3, #3
 8012186:	1a9b      	subs	r3, r3, r2
 8012188:	440b      	add	r3, r1
 801218a:	330d      	adds	r3, #13
 801218c:	2201      	movs	r2, #1
 801218e:	701a      	strb	r2, [r3, #0]
                thePool[index].lowspeed = 0;
 8012190:	78fa      	ldrb	r2, [r7, #3]
 8012192:	6879      	ldr	r1, [r7, #4]
 8012194:	4613      	mov	r3, r2
 8012196:	00db      	lsls	r3, r3, #3
 8012198:	1a9b      	subs	r3, r3, r2
 801219a:	440b      	add	r3, r1
 801219c:	330e      	adds	r3, #14
 801219e:	2200      	movs	r2, #0
 80121a0:	701a      	strb	r2, [r3, #0]
                thePool[index].epinfo = &dev0ep;
 80121a2:	78fa      	ldrb	r2, [r7, #3]
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	1d19      	adds	r1, r3, #4
 80121a8:	6878      	ldr	r0, [r7, #4]
 80121aa:	4613      	mov	r3, r2
 80121ac:	00db      	lsls	r3, r3, #3
 80121ae:	1a9b      	subs	r3, r3, r2
 80121b0:	4403      	add	r3, r0
 80121b2:	3308      	adds	r3, #8
 80121b4:	6019      	str	r1, [r3, #0]
        };
 80121b6:	bf00      	nop
 80121b8:	370c      	adds	r7, #12
 80121ba:	46bd      	mov	sp, r7
 80121bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c0:	4770      	bx	lr

080121c2 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
        void InitAllAddresses() {
 80121c2:	b580      	push	{r7, lr}
 80121c4:	b084      	sub	sp, #16
 80121c6:	af00      	add	r7, sp, #0
 80121c8:	6078      	str	r0, [r7, #4]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 80121ca:	2301      	movs	r3, #1
 80121cc:	73fb      	strb	r3, [r7, #15]
 80121ce:	7bfb      	ldrb	r3, [r7, #15]
 80121d0:	2b0f      	cmp	r3, #15
 80121d2:	d808      	bhi.n	80121e6 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x24>
                        InitEntry(i);
 80121d4:	7bfb      	ldrb	r3, [r7, #15]
 80121d6:	4619      	mov	r1, r3
 80121d8:	6878      	ldr	r0, [r7, #4]
 80121da:	f7ff ffc1 	bl	8012160 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 80121de:	7bfb      	ldrb	r3, [r7, #15]
 80121e0:	3301      	adds	r3, #1
 80121e2:	73fb      	strb	r3, [r7, #15]
 80121e4:	e7f3      	b.n	80121ce <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0xc>
                hubCounter = 0;
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	2200      	movs	r2, #0
 80121ea:	71da      	strb	r2, [r3, #7]
        };
 80121ec:	bf00      	nop
 80121ee:	3710      	adds	r7, #16
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd80      	pop	{r7, pc}

080121f4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
        uint8_t FindAddressIndex(uint8_t address = 0) {
 80121f4:	b480      	push	{r7}
 80121f6:	b085      	sub	sp, #20
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
 80121fc:	460b      	mov	r3, r1
 80121fe:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 8012200:	2301      	movs	r3, #1
 8012202:	73fb      	strb	r3, [r7, #15]
 8012204:	7bfb      	ldrb	r3, [r7, #15]
 8012206:	2b0f      	cmp	r3, #15
 8012208:	d810      	bhi.n	801222c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x38>
                        if(thePool[i].address.devAddress == address)
 801220a:	7bfa      	ldrb	r2, [r7, #15]
 801220c:	6879      	ldr	r1, [r7, #4]
 801220e:	4613      	mov	r3, r2
 8012210:	00db      	lsls	r3, r3, #3
 8012212:	1a9b      	subs	r3, r3, r2
 8012214:	440b      	add	r3, r1
 8012216:	330c      	adds	r3, #12
 8012218:	781b      	ldrb	r3, [r3, #0]
 801221a:	78fa      	ldrb	r2, [r7, #3]
 801221c:	429a      	cmp	r2, r3
 801221e:	d101      	bne.n	8012224 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x30>
                                return i;
 8012220:	7bfb      	ldrb	r3, [r7, #15]
 8012222:	e004      	b.n	801222e <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x3a>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 8012224:	7bfb      	ldrb	r3, [r7, #15]
 8012226:	3301      	adds	r3, #1
 8012228:	73fb      	strb	r3, [r7, #15]
 801222a:	e7eb      	b.n	8012204 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x10>
                return 0;
 801222c:	2300      	movs	r3, #0
        };
 801222e:	4618      	mov	r0, r3
 8012230:	3714      	adds	r7, #20
 8012232:	46bd      	mov	sp, r7
 8012234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012238:	4770      	bx	lr

0801223a <_ZN8MAX3421eI3P102P9E10IntHandlerEv>:

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
 801223a:	b580      	push	{r7, lr}
 801223c:	b084      	sub	sp, #16
 801223e:	af00      	add	r7, sp, #0
 8012240:	6078      	str	r0, [r7, #4]
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
 8012242:	2300      	movs	r3, #0
 8012244:	73fb      	strb	r3, [r7, #15]
        HIRQ = regRd(rHIRQ); //determine interrupt source
 8012246:	21c8      	movs	r1, #200	; 0xc8
 8012248:	6878      	ldr	r0, [r7, #4]
 801224a:	f7ef fafb 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801224e:	4603      	mov	r3, r0
 8012250:	73bb      	strb	r3, [r7, #14]
        //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
        //    HIRQ_sendback |= bmFRAMEIRQ;
        //}//end FRAMEIRQ handling
        if(HIRQ & bmCONDETIRQ) {
 8012252:	7bbb      	ldrb	r3, [r7, #14]
 8012254:	f003 0320 	and.w	r3, r3, #32
 8012258:	2b00      	cmp	r3, #0
 801225a:	d006      	beq.n	801226a <_ZN8MAX3421eI3P102P9E10IntHandlerEv+0x30>
                busprobe();
 801225c:	6878      	ldr	r0, [r7, #4]
 801225e:	f7ef fb13 	bl	8001888 <_ZN8MAX3421eI3P102P9E8busprobeEv>
                HIRQ_sendback |= bmCONDETIRQ;
 8012262:	7bfb      	ldrb	r3, [r7, #15]
 8012264:	f043 0320 	orr.w	r3, r3, #32
 8012268:	73fb      	strb	r3, [r7, #15]
        }
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        regWr(rHIRQ, HIRQ_sendback);
 801226a:	7bfb      	ldrb	r3, [r7, #15]
 801226c:	461a      	mov	r2, r3
 801226e:	21c8      	movs	r1, #200	; 0xc8
 8012270:	6878      	ldr	r0, [r7, #4]
 8012272:	f7ef fa95 	bl	80017a0 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        return ( HIRQ_sendback);
 8012276:	7bfb      	ldrb	r3, [r7, #15]
}
 8012278:	4618      	mov	r0, r3
 801227a:	3710      	adds	r7, #16
 801227c:	46bd      	mov	sp, r7
 801227e:	bd80      	pop	{r7, pc}

08012280 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
        void FreeAddressByIndex(uint8_t index) {
 8012280:	b580      	push	{r7, lr}
 8012282:	b084      	sub	sp, #16
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
 8012288:	460b      	mov	r3, r1
 801228a:	70fb      	strb	r3, [r7, #3]
                if(index == 0)
 801228c:	78fb      	ldrb	r3, [r7, #3]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d03a      	beq.n	8012308 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x88>
                UsbDeviceAddress uda = thePool[index].address;
 8012292:	78fa      	ldrb	r2, [r7, #3]
 8012294:	6879      	ldr	r1, [r7, #4]
 8012296:	4613      	mov	r3, r2
 8012298:	00db      	lsls	r3, r3, #3
 801229a:	1a9b      	subs	r3, r3, r2
 801229c:	440b      	add	r3, r1
 801229e:	330c      	adds	r3, #12
 80122a0:	781b      	ldrb	r3, [r3, #0]
 80122a2:	733b      	strb	r3, [r7, #12]
                if(uda.bmHub == 1) {
 80122a4:	7b3b      	ldrb	r3, [r7, #12]
 80122a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122aa:	b2db      	uxtb	r3, r3
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d025      	beq.n	80122fc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 80122b0:	2301      	movs	r3, #1
 80122b2:	73fb      	strb	r3, [r7, #15]
 80122b4:	7bfb      	ldrb	r3, [r7, #15]
 80122b6:	461a      	mov	r2, r3
 80122b8:	7b39      	ldrb	r1, [r7, #12]
 80122ba:	6878      	ldr	r0, [r7, #4]
 80122bc:	f000 f828 	bl	8012310 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 80122c0:	4603      	mov	r3, r0
 80122c2:	73fb      	strb	r3, [r7, #15]
 80122c4:	7bfb      	ldrb	r3, [r7, #15]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	bf14      	ite	ne
 80122ca:	2301      	movne	r3, #1
 80122cc:	2300      	moveq	r3, #0
 80122ce:	b2db      	uxtb	r3, r3
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d005      	beq.n	80122e0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x60>
                                FreeAddressByIndex(i);
 80122d4:	7bfb      	ldrb	r3, [r7, #15]
 80122d6:	4619      	mov	r1, r3
 80122d8:	6878      	ldr	r0, [r7, #4]
 80122da:	f7ff ffd1 	bl	8012280 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 80122de:	e7e9      	b.n	80122b4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x34>
                        if(hubCounter == uda.bmAddress)
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	79db      	ldrb	r3, [r3, #7]
 80122e4:	7b3a      	ldrb	r2, [r7, #12]
 80122e6:	f3c2 0202 	ubfx	r2, r2, #0, #3
 80122ea:	b2d2      	uxtb	r2, r2
 80122ec:	4293      	cmp	r3, r2
 80122ee:	d105      	bne.n	80122fc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                                hubCounter--;
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	79db      	ldrb	r3, [r3, #7]
 80122f4:	3b01      	subs	r3, #1
 80122f6:	b2da      	uxtb	r2, r3
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	71da      	strb	r2, [r3, #7]
                InitEntry(index);
 80122fc:	78fb      	ldrb	r3, [r7, #3]
 80122fe:	4619      	mov	r1, r3
 8012300:	6878      	ldr	r0, [r7, #4]
 8012302:	f7ff ff2d 	bl	8012160 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 8012306:	e000      	b.n	801230a <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x8a>
                        return;
 8012308:	bf00      	nop
        }
 801230a:	3710      	adds	r7, #16
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}

08012310 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 8012310:	b480      	push	{r7}
 8012312:	b085      	sub	sp, #20
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
 8012318:	7039      	strb	r1, [r7, #0]
 801231a:	4613      	mov	r3, r2
 801231c:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 801231e:	78fb      	ldrb	r3, [r7, #3]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d004      	beq.n	801232e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 8012324:	78fb      	ldrb	r3, [r7, #3]
 8012326:	2b0f      	cmp	r3, #15
 8012328:	d801      	bhi.n	801232e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 801232a:	78fb      	ldrb	r3, [r7, #3]
 801232c:	e000      	b.n	8012330 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x20>
 801232e:	2301      	movs	r3, #1
 8012330:	73fb      	strb	r3, [r7, #15]
 8012332:	7bfb      	ldrb	r3, [r7, #15]
 8012334:	2b0f      	cmp	r3, #15
 8012336:	d816      	bhi.n	8012366 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x56>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 8012338:	7bfa      	ldrb	r2, [r7, #15]
 801233a:	6879      	ldr	r1, [r7, #4]
 801233c:	4613      	mov	r3, r2
 801233e:	00db      	lsls	r3, r3, #3
 8012340:	1a9b      	subs	r3, r3, r2
 8012342:	440b      	add	r3, r1
 8012344:	3308      	adds	r3, #8
 8012346:	791b      	ldrb	r3, [r3, #4]
 8012348:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 801234c:	b2da      	uxtb	r2, r3
 801234e:	783b      	ldrb	r3, [r7, #0]
 8012350:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8012354:	b2db      	uxtb	r3, r3
 8012356:	429a      	cmp	r2, r3
 8012358:	d101      	bne.n	801235e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x4e>
                                return i;
 801235a:	7bfb      	ldrb	r3, [r7, #15]
 801235c:	e004      	b.n	8012368 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x58>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 801235e:	7bfb      	ldrb	r3, [r7, #15]
 8012360:	3301      	adds	r3, #1
 8012362:	73fb      	strb	r3, [r7, #15]
 8012364:	e7e5      	b.n	8012332 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x22>
                return 0;
 8012366:	2300      	movs	r3, #0
        };
 8012368:	4618      	mov	r0, r3
 801236a:	3714      	adds	r7, #20
 801236c:	46bd      	mov	sp, r7
 801236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012372:	4770      	bx	lr

08012374 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 8012374:	b480      	push	{r7}
 8012376:	b085      	sub	sp, #20
 8012378:	af00      	add	r7, sp, #0
 801237a:	60f8      	str	r0, [r7, #12]
 801237c:	60b9      	str	r1, [r7, #8]
 801237e:	607a      	str	r2, [r7, #4]
        if(!pBuf) {
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d101      	bne.n	801238c <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
 8012388:	2300      	movs	r3, #0
 801238a:	e031      	b.n	80123f0 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	791b      	ldrb	r3, [r3, #4]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d022      	beq.n	80123da <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	881b      	ldrh	r3, [r3, #0]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d01e      	beq.n	80123da <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
                pBuf[valueSize - countDown] = (**pp);
 801239c:	68bb      	ldr	r3, [r7, #8]
 801239e:	681a      	ldr	r2, [r3, #0]
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	68f9      	ldr	r1, [r7, #12]
 80123a6:	7949      	ldrb	r1, [r1, #5]
 80123a8:	4608      	mov	r0, r1
 80123aa:	68f9      	ldr	r1, [r7, #12]
 80123ac:	7909      	ldrb	r1, [r1, #4]
 80123ae:	1a41      	subs	r1, r0, r1
 80123b0:	440b      	add	r3, r1
 80123b2:	7812      	ldrb	r2, [r2, #0]
 80123b4:	701a      	strb	r2, [r3, #0]
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	791b      	ldrb	r3, [r3, #4]
 80123ba:	3b01      	subs	r3, #1
 80123bc:	b2da      	uxtb	r2, r3
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	711a      	strb	r2, [r3, #4]
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	881b      	ldrh	r3, [r3, #0]
 80123c6:	3b01      	subs	r3, #1
 80123c8:	b29a      	uxth	r2, r3
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	801a      	strh	r2, [r3, #0]
 80123ce:	68bb      	ldr	r3, [r7, #8]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	1c5a      	adds	r2, r3, #1
 80123d4:	68bb      	ldr	r3, [r7, #8]
 80123d6:	601a      	str	r2, [r3, #0]
 80123d8:	e7d8      	b.n	801238c <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>

        if(countDown)
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	791b      	ldrb	r3, [r3, #4]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d001      	beq.n	80123e6 <_ZN20MultiByteValueParser5ParseEPPhPt+0x72>
                return false;
 80123e2:	2300      	movs	r3, #0
 80123e4:	e004      	b.n	80123f0 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>

        countDown = valueSize;
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	795a      	ldrb	r2, [r3, #5]
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	711a      	strb	r2, [r3, #4]
        return true;
 80123ee:	2301      	movs	r3, #1
}
 80123f0:	4618      	mov	r0, r3
 80123f2:	3714      	adds	r7, #20
 80123f4:	46bd      	mov	sp, r7
 80123f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fa:	4770      	bx	lr

080123fc <__cxa_pure_virtual>:
 80123fc:	b508      	push	{r3, lr}
 80123fe:	f000 f80d 	bl	801241c <_ZSt9terminatev>

08012402 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8012402:	b508      	push	{r3, lr}
 8012404:	4780      	blx	r0
 8012406:	f000 f80e 	bl	8012426 <abort>
	...

0801240c <_ZSt13get_terminatev>:
 801240c:	4b02      	ldr	r3, [pc, #8]	; (8012418 <_ZSt13get_terminatev+0xc>)
 801240e:	6818      	ldr	r0, [r3, #0]
 8012410:	f3bf 8f5b 	dmb	ish
 8012414:	4770      	bx	lr
 8012416:	bf00      	nop
 8012418:	2000013c 	.word	0x2000013c

0801241c <_ZSt9terminatev>:
 801241c:	b508      	push	{r3, lr}
 801241e:	f7ff fff5 	bl	801240c <_ZSt13get_terminatev>
 8012422:	f7ff ffee 	bl	8012402 <_ZN10__cxxabiv111__terminateEPFvvE>

08012426 <abort>:
 8012426:	b508      	push	{r3, lr}
 8012428:	2006      	movs	r0, #6
 801242a:	f000 f86b 	bl	8012504 <raise>
 801242e:	2001      	movs	r0, #1
 8012430:	f7ef fc5a 	bl	8001ce8 <_exit>

08012434 <__errno>:
 8012434:	4b01      	ldr	r3, [pc, #4]	; (801243c <__errno+0x8>)
 8012436:	6818      	ldr	r0, [r3, #0]
 8012438:	4770      	bx	lr
 801243a:	bf00      	nop
 801243c:	20000140 	.word	0x20000140

08012440 <__libc_init_array>:
 8012440:	b570      	push	{r4, r5, r6, lr}
 8012442:	4d0d      	ldr	r5, [pc, #52]	; (8012478 <__libc_init_array+0x38>)
 8012444:	4c0d      	ldr	r4, [pc, #52]	; (801247c <__libc_init_array+0x3c>)
 8012446:	1b64      	subs	r4, r4, r5
 8012448:	10a4      	asrs	r4, r4, #2
 801244a:	2600      	movs	r6, #0
 801244c:	42a6      	cmp	r6, r4
 801244e:	d109      	bne.n	8012464 <__libc_init_array+0x24>
 8012450:	4d0b      	ldr	r5, [pc, #44]	; (8012480 <__libc_init_array+0x40>)
 8012452:	4c0c      	ldr	r4, [pc, #48]	; (8012484 <__libc_init_array+0x44>)
 8012454:	f000 f884 	bl	8012560 <_init>
 8012458:	1b64      	subs	r4, r4, r5
 801245a:	10a4      	asrs	r4, r4, #2
 801245c:	2600      	movs	r6, #0
 801245e:	42a6      	cmp	r6, r4
 8012460:	d105      	bne.n	801246e <__libc_init_array+0x2e>
 8012462:	bd70      	pop	{r4, r5, r6, pc}
 8012464:	f855 3b04 	ldr.w	r3, [r5], #4
 8012468:	4798      	blx	r3
 801246a:	3601      	adds	r6, #1
 801246c:	e7ee      	b.n	801244c <__libc_init_array+0xc>
 801246e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012472:	4798      	blx	r3
 8012474:	3601      	adds	r6, #1
 8012476:	e7f2      	b.n	801245e <__libc_init_array+0x1e>
 8012478:	08012970 	.word	0x08012970
 801247c:	08012970 	.word	0x08012970
 8012480:	08012970 	.word	0x08012970
 8012484:	08012978 	.word	0x08012978

08012488 <memcpy>:
 8012488:	440a      	add	r2, r1
 801248a:	4291      	cmp	r1, r2
 801248c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012490:	d100      	bne.n	8012494 <memcpy+0xc>
 8012492:	4770      	bx	lr
 8012494:	b510      	push	{r4, lr}
 8012496:	f811 4b01 	ldrb.w	r4, [r1], #1
 801249a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801249e:	4291      	cmp	r1, r2
 80124a0:	d1f9      	bne.n	8012496 <memcpy+0xe>
 80124a2:	bd10      	pop	{r4, pc}

080124a4 <memset>:
 80124a4:	4402      	add	r2, r0
 80124a6:	4603      	mov	r3, r0
 80124a8:	4293      	cmp	r3, r2
 80124aa:	d100      	bne.n	80124ae <memset+0xa>
 80124ac:	4770      	bx	lr
 80124ae:	f803 1b01 	strb.w	r1, [r3], #1
 80124b2:	e7f9      	b.n	80124a8 <memset+0x4>

080124b4 <_raise_r>:
 80124b4:	291f      	cmp	r1, #31
 80124b6:	b538      	push	{r3, r4, r5, lr}
 80124b8:	4604      	mov	r4, r0
 80124ba:	460d      	mov	r5, r1
 80124bc:	d904      	bls.n	80124c8 <_raise_r+0x14>
 80124be:	2316      	movs	r3, #22
 80124c0:	6003      	str	r3, [r0, #0]
 80124c2:	f04f 30ff 	mov.w	r0, #4294967295
 80124c6:	bd38      	pop	{r3, r4, r5, pc}
 80124c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80124ca:	b112      	cbz	r2, 80124d2 <_raise_r+0x1e>
 80124cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80124d0:	b94b      	cbnz	r3, 80124e6 <_raise_r+0x32>
 80124d2:	4620      	mov	r0, r4
 80124d4:	f000 f830 	bl	8012538 <_getpid_r>
 80124d8:	462a      	mov	r2, r5
 80124da:	4601      	mov	r1, r0
 80124dc:	4620      	mov	r0, r4
 80124de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124e2:	f000 b817 	b.w	8012514 <_kill_r>
 80124e6:	2b01      	cmp	r3, #1
 80124e8:	d00a      	beq.n	8012500 <_raise_r+0x4c>
 80124ea:	1c59      	adds	r1, r3, #1
 80124ec:	d103      	bne.n	80124f6 <_raise_r+0x42>
 80124ee:	2316      	movs	r3, #22
 80124f0:	6003      	str	r3, [r0, #0]
 80124f2:	2001      	movs	r0, #1
 80124f4:	e7e7      	b.n	80124c6 <_raise_r+0x12>
 80124f6:	2400      	movs	r4, #0
 80124f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80124fc:	4628      	mov	r0, r5
 80124fe:	4798      	blx	r3
 8012500:	2000      	movs	r0, #0
 8012502:	e7e0      	b.n	80124c6 <_raise_r+0x12>

08012504 <raise>:
 8012504:	4b02      	ldr	r3, [pc, #8]	; (8012510 <raise+0xc>)
 8012506:	4601      	mov	r1, r0
 8012508:	6818      	ldr	r0, [r3, #0]
 801250a:	f7ff bfd3 	b.w	80124b4 <_raise_r>
 801250e:	bf00      	nop
 8012510:	20000140 	.word	0x20000140

08012514 <_kill_r>:
 8012514:	b538      	push	{r3, r4, r5, lr}
 8012516:	4d07      	ldr	r5, [pc, #28]	; (8012534 <_kill_r+0x20>)
 8012518:	2300      	movs	r3, #0
 801251a:	4604      	mov	r4, r0
 801251c:	4608      	mov	r0, r1
 801251e:	4611      	mov	r1, r2
 8012520:	602b      	str	r3, [r5, #0]
 8012522:	f7ef fbd1 	bl	8001cc8 <_kill>
 8012526:	1c43      	adds	r3, r0, #1
 8012528:	d102      	bne.n	8012530 <_kill_r+0x1c>
 801252a:	682b      	ldr	r3, [r5, #0]
 801252c:	b103      	cbz	r3, 8012530 <_kill_r+0x1c>
 801252e:	6023      	str	r3, [r4, #0]
 8012530:	bd38      	pop	{r3, r4, r5, pc}
 8012532:	bf00      	nop
 8012534:	200058ec 	.word	0x200058ec

08012538 <_getpid_r>:
 8012538:	f7ef bbbe 	b.w	8001cb8 <_getpid>

0801253c <strncmp>:
 801253c:	b510      	push	{r4, lr}
 801253e:	b16a      	cbz	r2, 801255c <strncmp+0x20>
 8012540:	3901      	subs	r1, #1
 8012542:	1884      	adds	r4, r0, r2
 8012544:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012548:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801254c:	4293      	cmp	r3, r2
 801254e:	d103      	bne.n	8012558 <strncmp+0x1c>
 8012550:	42a0      	cmp	r0, r4
 8012552:	d001      	beq.n	8012558 <strncmp+0x1c>
 8012554:	2b00      	cmp	r3, #0
 8012556:	d1f5      	bne.n	8012544 <strncmp+0x8>
 8012558:	1a98      	subs	r0, r3, r2
 801255a:	bd10      	pop	{r4, pc}
 801255c:	4610      	mov	r0, r2
 801255e:	e7fc      	b.n	801255a <strncmp+0x1e>

08012560 <_init>:
 8012560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012562:	bf00      	nop
 8012564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012566:	bc08      	pop	{r3}
 8012568:	469e      	mov	lr, r3
 801256a:	4770      	bx	lr

0801256c <_fini>:
 801256c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801256e:	bf00      	nop
 8012570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012572:	bc08      	pop	{r3}
 8012574:	469e      	mov	lr, r3
 8012576:	4770      	bx	lr
