
xbox_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010abc  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08010c84  08010c84  00020c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011104  08011104  000301d4  2**0
                  CONTENTS
  4 .ARM          00000008  08011104  08011104  00021104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801110c  0801110c  000301d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801110c  0801110c  0002110c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011114  08011114  00021114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08011118  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d78  200001d4  080112ec  000301d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f4c  080112ec  00030f4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004c505  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006b85  00000000  00000000  0007c709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b0  00000000  00000000  00083290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001770  00000000  00000000  00084b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c494  00000000  00000000  000862b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020086  00000000  00000000  000b2744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef33e  00000000  00000000  000d27ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c1b08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ebc  00000000  00000000  001c1b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001d4 	.word	0x200001d4
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08010c6c 	.word	0x08010c6c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001d8 	.word	0x200001d8
 8000204:	08010c6c 	.word	0x08010c6c

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2f>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b88:	bf24      	itt	cs
 8000b8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b92:	d90d      	bls.n	8000bb0 <__aeabi_d2f+0x30>
 8000b94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba8:	bf08      	it	eq
 8000baa:	f020 0001 	biceq.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb4:	d121      	bne.n	8000bfa <__aeabi_d2f+0x7a>
 8000bb6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bba:	bfbc      	itt	lt
 8000bbc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	4770      	bxlt	lr
 8000bc2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bca:	f1c2 0218 	rsb	r2, r2, #24
 8000bce:	f1c2 0c20 	rsb	ip, r2, #32
 8000bd2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bda:	bf18      	it	ne
 8000bdc:	f040 0001 	orrne.w	r0, r0, #1
 8000be0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bec:	ea40 000c 	orr.w	r0, r0, ip
 8000bf0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf8:	e7cc      	b.n	8000b94 <__aeabi_d2f+0x14>
 8000bfa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfe:	d107      	bne.n	8000c10 <__aeabi_d2f+0x90>
 8000c00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c04:	bf1e      	ittt	ne
 8000c06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0e:	4770      	bxne	lr
 8000c10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_uldivmod>:
 8000c20:	b953      	cbnz	r3, 8000c38 <__aeabi_uldivmod+0x18>
 8000c22:	b94a      	cbnz	r2, 8000c38 <__aeabi_uldivmod+0x18>
 8000c24:	2900      	cmp	r1, #0
 8000c26:	bf08      	it	eq
 8000c28:	2800      	cmpeq	r0, #0
 8000c2a:	bf1c      	itt	ne
 8000c2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c30:	f04f 30ff 	movne.w	r0, #4294967295
 8000c34:	f000 b96e 	b.w	8000f14 <__aeabi_idiv0>
 8000c38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c40:	f000 f806 	bl	8000c50 <__udivmoddi4>
 8000c44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4c:	b004      	add	sp, #16
 8000c4e:	4770      	bx	lr

08000c50 <__udivmoddi4>:
 8000c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c54:	9d08      	ldr	r5, [sp, #32]
 8000c56:	4604      	mov	r4, r0
 8000c58:	468c      	mov	ip, r1
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f040 8083 	bne.w	8000d66 <__udivmoddi4+0x116>
 8000c60:	428a      	cmp	r2, r1
 8000c62:	4617      	mov	r7, r2
 8000c64:	d947      	bls.n	8000cf6 <__udivmoddi4+0xa6>
 8000c66:	fab2 f282 	clz	r2, r2
 8000c6a:	b142      	cbz	r2, 8000c7e <__udivmoddi4+0x2e>
 8000c6c:	f1c2 0020 	rsb	r0, r2, #32
 8000c70:	fa24 f000 	lsr.w	r0, r4, r0
 8000c74:	4091      	lsls	r1, r2
 8000c76:	4097      	lsls	r7, r2
 8000c78:	ea40 0c01 	orr.w	ip, r0, r1
 8000c7c:	4094      	lsls	r4, r2
 8000c7e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c82:	0c23      	lsrs	r3, r4, #16
 8000c84:	fbbc f6f8 	udiv	r6, ip, r8
 8000c88:	fa1f fe87 	uxth.w	lr, r7
 8000c8c:	fb08 c116 	mls	r1, r8, r6, ip
 8000c90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c94:	fb06 f10e 	mul.w	r1, r6, lr
 8000c98:	4299      	cmp	r1, r3
 8000c9a:	d909      	bls.n	8000cb0 <__udivmoddi4+0x60>
 8000c9c:	18fb      	adds	r3, r7, r3
 8000c9e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ca2:	f080 8119 	bcs.w	8000ed8 <__udivmoddi4+0x288>
 8000ca6:	4299      	cmp	r1, r3
 8000ca8:	f240 8116 	bls.w	8000ed8 <__udivmoddi4+0x288>
 8000cac:	3e02      	subs	r6, #2
 8000cae:	443b      	add	r3, r7
 8000cb0:	1a5b      	subs	r3, r3, r1
 8000cb2:	b2a4      	uxth	r4, r4
 8000cb4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc4:	45a6      	cmp	lr, r4
 8000cc6:	d909      	bls.n	8000cdc <__udivmoddi4+0x8c>
 8000cc8:	193c      	adds	r4, r7, r4
 8000cca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cce:	f080 8105 	bcs.w	8000edc <__udivmoddi4+0x28c>
 8000cd2:	45a6      	cmp	lr, r4
 8000cd4:	f240 8102 	bls.w	8000edc <__udivmoddi4+0x28c>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	443c      	add	r4, r7
 8000cdc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce0:	eba4 040e 	sub.w	r4, r4, lr
 8000ce4:	2600      	movs	r6, #0
 8000ce6:	b11d      	cbz	r5, 8000cf0 <__udivmoddi4+0xa0>
 8000ce8:	40d4      	lsrs	r4, r2
 8000cea:	2300      	movs	r3, #0
 8000cec:	e9c5 4300 	strd	r4, r3, [r5]
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	b902      	cbnz	r2, 8000cfa <__udivmoddi4+0xaa>
 8000cf8:	deff      	udf	#255	; 0xff
 8000cfa:	fab2 f282 	clz	r2, r2
 8000cfe:	2a00      	cmp	r2, #0
 8000d00:	d150      	bne.n	8000da4 <__udivmoddi4+0x154>
 8000d02:	1bcb      	subs	r3, r1, r7
 8000d04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d08:	fa1f f887 	uxth.w	r8, r7
 8000d0c:	2601      	movs	r6, #1
 8000d0e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d12:	0c21      	lsrs	r1, r4, #16
 8000d14:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb08 f30c 	mul.w	r3, r8, ip
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0xe4>
 8000d24:	1879      	adds	r1, r7, r1
 8000d26:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0xe2>
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	f200 80e9 	bhi.w	8000f04 <__udivmoddi4+0x2b4>
 8000d32:	4684      	mov	ip, r0
 8000d34:	1ac9      	subs	r1, r1, r3
 8000d36:	b2a3      	uxth	r3, r4
 8000d38:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d40:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d44:	fb08 f800 	mul.w	r8, r8, r0
 8000d48:	45a0      	cmp	r8, r4
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x10c>
 8000d4c:	193c      	adds	r4, r7, r4
 8000d4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x10a>
 8000d54:	45a0      	cmp	r8, r4
 8000d56:	f200 80d9 	bhi.w	8000f0c <__udivmoddi4+0x2bc>
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	eba4 0408 	sub.w	r4, r4, r8
 8000d60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d64:	e7bf      	b.n	8000ce6 <__udivmoddi4+0x96>
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d909      	bls.n	8000d7e <__udivmoddi4+0x12e>
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	f000 80b1 	beq.w	8000ed2 <__udivmoddi4+0x282>
 8000d70:	2600      	movs	r6, #0
 8000d72:	e9c5 0100 	strd	r0, r1, [r5]
 8000d76:	4630      	mov	r0, r6
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	fab3 f683 	clz	r6, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d14a      	bne.n	8000e1c <__udivmoddi4+0x1cc>
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d302      	bcc.n	8000d90 <__udivmoddi4+0x140>
 8000d8a:	4282      	cmp	r2, r0
 8000d8c:	f200 80b8 	bhi.w	8000f00 <__udivmoddi4+0x2b0>
 8000d90:	1a84      	subs	r4, r0, r2
 8000d92:	eb61 0103 	sbc.w	r1, r1, r3
 8000d96:	2001      	movs	r0, #1
 8000d98:	468c      	mov	ip, r1
 8000d9a:	2d00      	cmp	r5, #0
 8000d9c:	d0a8      	beq.n	8000cf0 <__udivmoddi4+0xa0>
 8000d9e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000da2:	e7a5      	b.n	8000cf0 <__udivmoddi4+0xa0>
 8000da4:	f1c2 0320 	rsb	r3, r2, #32
 8000da8:	fa20 f603 	lsr.w	r6, r0, r3
 8000dac:	4097      	lsls	r7, r2
 8000dae:	fa01 f002 	lsl.w	r0, r1, r2
 8000db2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db6:	40d9      	lsrs	r1, r3
 8000db8:	4330      	orrs	r0, r6
 8000dba:	0c03      	lsrs	r3, r0, #16
 8000dbc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dc0:	fa1f f887 	uxth.w	r8, r7
 8000dc4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dcc:	fb06 f108 	mul.w	r1, r6, r8
 8000dd0:	4299      	cmp	r1, r3
 8000dd2:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd6:	d909      	bls.n	8000dec <__udivmoddi4+0x19c>
 8000dd8:	18fb      	adds	r3, r7, r3
 8000dda:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dde:	f080 808d 	bcs.w	8000efc <__udivmoddi4+0x2ac>
 8000de2:	4299      	cmp	r1, r3
 8000de4:	f240 808a 	bls.w	8000efc <__udivmoddi4+0x2ac>
 8000de8:	3e02      	subs	r6, #2
 8000dea:	443b      	add	r3, r7
 8000dec:	1a5b      	subs	r3, r3, r1
 8000dee:	b281      	uxth	r1, r0
 8000df0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dfc:	fb00 f308 	mul.w	r3, r0, r8
 8000e00:	428b      	cmp	r3, r1
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x1c4>
 8000e04:	1879      	adds	r1, r7, r1
 8000e06:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e0a:	d273      	bcs.n	8000ef4 <__udivmoddi4+0x2a4>
 8000e0c:	428b      	cmp	r3, r1
 8000e0e:	d971      	bls.n	8000ef4 <__udivmoddi4+0x2a4>
 8000e10:	3802      	subs	r0, #2
 8000e12:	4439      	add	r1, r7
 8000e14:	1acb      	subs	r3, r1, r3
 8000e16:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e1a:	e778      	b.n	8000d0e <__udivmoddi4+0xbe>
 8000e1c:	f1c6 0c20 	rsb	ip, r6, #32
 8000e20:	fa03 f406 	lsl.w	r4, r3, r6
 8000e24:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e28:	431c      	orrs	r4, r3
 8000e2a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e32:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e36:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e3a:	431f      	orrs	r7, r3
 8000e3c:	0c3b      	lsrs	r3, r7, #16
 8000e3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e42:	fa1f f884 	uxth.w	r8, r4
 8000e46:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e4a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e4e:	fb09 fa08 	mul.w	sl, r9, r8
 8000e52:	458a      	cmp	sl, r1
 8000e54:	fa02 f206 	lsl.w	r2, r2, r6
 8000e58:	fa00 f306 	lsl.w	r3, r0, r6
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x220>
 8000e5e:	1861      	adds	r1, r4, r1
 8000e60:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e64:	d248      	bcs.n	8000ef8 <__udivmoddi4+0x2a8>
 8000e66:	458a      	cmp	sl, r1
 8000e68:	d946      	bls.n	8000ef8 <__udivmoddi4+0x2a8>
 8000e6a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e6e:	4421      	add	r1, r4
 8000e70:	eba1 010a 	sub.w	r1, r1, sl
 8000e74:	b2bf      	uxth	r7, r7
 8000e76:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e7a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e7e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e82:	fb00 f808 	mul.w	r8, r0, r8
 8000e86:	45b8      	cmp	r8, r7
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x24a>
 8000e8a:	19e7      	adds	r7, r4, r7
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d22e      	bcs.n	8000ef0 <__udivmoddi4+0x2a0>
 8000e92:	45b8      	cmp	r8, r7
 8000e94:	d92c      	bls.n	8000ef0 <__udivmoddi4+0x2a0>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4427      	add	r7, r4
 8000e9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e9e:	eba7 0708 	sub.w	r7, r7, r8
 8000ea2:	fba0 8902 	umull	r8, r9, r0, r2
 8000ea6:	454f      	cmp	r7, r9
 8000ea8:	46c6      	mov	lr, r8
 8000eaa:	4649      	mov	r1, r9
 8000eac:	d31a      	bcc.n	8000ee4 <__udivmoddi4+0x294>
 8000eae:	d017      	beq.n	8000ee0 <__udivmoddi4+0x290>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x27a>
 8000eb2:	ebb3 020e 	subs.w	r2, r3, lr
 8000eb6:	eb67 0701 	sbc.w	r7, r7, r1
 8000eba:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ebe:	40f2      	lsrs	r2, r6
 8000ec0:	ea4c 0202 	orr.w	r2, ip, r2
 8000ec4:	40f7      	lsrs	r7, r6
 8000ec6:	e9c5 2700 	strd	r2, r7, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	462e      	mov	r6, r5
 8000ed4:	4628      	mov	r0, r5
 8000ed6:	e70b      	b.n	8000cf0 <__udivmoddi4+0xa0>
 8000ed8:	4606      	mov	r6, r0
 8000eda:	e6e9      	b.n	8000cb0 <__udivmoddi4+0x60>
 8000edc:	4618      	mov	r0, r3
 8000ede:	e6fd      	b.n	8000cdc <__udivmoddi4+0x8c>
 8000ee0:	4543      	cmp	r3, r8
 8000ee2:	d2e5      	bcs.n	8000eb0 <__udivmoddi4+0x260>
 8000ee4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ee8:	eb69 0104 	sbc.w	r1, r9, r4
 8000eec:	3801      	subs	r0, #1
 8000eee:	e7df      	b.n	8000eb0 <__udivmoddi4+0x260>
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	e7d2      	b.n	8000e9a <__udivmoddi4+0x24a>
 8000ef4:	4660      	mov	r0, ip
 8000ef6:	e78d      	b.n	8000e14 <__udivmoddi4+0x1c4>
 8000ef8:	4681      	mov	r9, r0
 8000efa:	e7b9      	b.n	8000e70 <__udivmoddi4+0x220>
 8000efc:	4666      	mov	r6, ip
 8000efe:	e775      	b.n	8000dec <__udivmoddi4+0x19c>
 8000f00:	4630      	mov	r0, r6
 8000f02:	e74a      	b.n	8000d9a <__udivmoddi4+0x14a>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	4439      	add	r1, r7
 8000f0a:	e713      	b.n	8000d34 <__udivmoddi4+0xe4>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	443c      	add	r4, r7
 8000f10:	e724      	b.n	8000d5c <__udivmoddi4+0x10c>
 8000f12:	bf00      	nop

08000f14 <__aeabi_idiv0>:
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 8000f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	ed87 0b00 	vstr	d0, [r7]
 8000f22:	683c      	ldr	r4, [r7, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	461e      	mov	r6, r3
 8000f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <_ZSt5isinfd+0x5c>)
 8000f34:	4620      	mov	r0, r4
 8000f36:	4629      	mov	r1, r5
 8000f38:	f7ff fdc4 	bl	8000ac4 <__aeabi_dcmpun>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d10b      	bne.n	8000f5a <_ZSt5isinfd+0x42>
 8000f42:	f04f 32ff 	mov.w	r2, #4294967295
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <_ZSt5isinfd+0x5c>)
 8000f48:	4620      	mov	r0, r4
 8000f4a:	4629      	mov	r1, r5
 8000f4c:	f7ff fd9c 	bl	8000a88 <__aeabi_dcmple>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <_ZSt5isinfd+0x42>
 8000f56:	2300      	movs	r3, #0
 8000f58:	461e      	mov	r6, r3
 8000f5a:	b2f3      	uxtb	r3, r6
 8000f5c:	f083 0301 	eor.w	r3, r3, #1
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	bf14      	ite	ne
 8000f66:	2301      	movne	r3, #1
 8000f68:	2300      	moveq	r3, #0
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f74:	7fefffff 	.word	0x7fefffff

08000f78 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	ed87 0b00 	vstr	d0, [r7]
 8000f82:	2301      	movs	r3, #1
 8000f84:	461c      	mov	r4, r3
 8000f86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f8e:	f7ff fd99 	bl	8000ac4 <__aeabi_dcmpun>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d101      	bne.n	8000f9c <_ZSt5isnand+0x24>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	461c      	mov	r4, r3
 8000f9c:	b2e3      	uxtb	r3, r4
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	bf14      	ite	ne
 8000fa2:	2301      	movne	r3, #1
 8000fa4:	2300      	moveq	r3, #0
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	4618      	mov	r0, r3
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd90      	pop	{r4, r7, pc}

08000fb0 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d101      	bne.n	8000fc4 <_ZN5Print5writeEPKc+0x14>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	e00d      	b.n	8000fe0 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	681c      	ldr	r4, [r3, #0]
 8000fcc:	6838      	ldr	r0, [r7, #0]
 8000fce:	f7ff f91b 	bl	8000208 <strlen>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	6839      	ldr	r1, [r7, #0]
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	47a0      	blx	r4
 8000fdc:	4603      	mov	r3, r0
 8000fde:	bf00      	nop
    }
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd90      	pop	{r4, r7, pc}

08000fe8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	1e5a      	subs	r2, r3, #1
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	bf14      	ite	ne
 8001002:	2301      	movne	r3, #1
 8001004:	2300      	moveq	r3, #0
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00e      	beq.n	800102a <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	1c59      	adds	r1, r3, #1
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	4619      	mov	r1, r3
 800101c:	68f8      	ldr	r0, [r7, #12]
 800101e:	4790      	blx	r2
 8001020:	4602      	mov	r2, r0
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	4413      	add	r3, r2
 8001026:	617b      	str	r3, [r7, #20]
  while (size--) {
 8001028:	e7e6      	b.n	8000ff8 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 800102a:	697b      	ldr	r3, [r7, #20]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 800103e:	6839      	ldr	r1, [r7, #0]
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 f805 	bl	8001050 <_ZN5Print5printEPKc>
 8001046:	4603      	mov	r3, r0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  return write(str);
 800105a:	6839      	ldr	r1, [r7, #0]
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ffa7 	bl	8000fb0 <_ZN5Print5writeEPKc>
 8001062:	4603      	mov	r3, r0
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	70fb      	strb	r3, [r7, #3]
  return write(c);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	78fa      	ldrb	r2, [r7, #3]
 8001080:	4611      	mov	r1, r2
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	4798      	blx	r3
 8001086:	4603      	mov	r3, r0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <_ZN5Print5printEhi>:

size_t Print::print(unsigned char b, int base)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	460b      	mov	r3, r1
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
 800109e:	7afb      	ldrb	r3, [r7, #11]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4619      	mov	r1, r3
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f000 f856 	bl	8001156 <_ZN5Print5printEmi>
 80010aa:	4603      	mov	r3, r0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <_ZN5Print5printEii>:

size_t Print::print(int n, int base)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	68b9      	ldr	r1, [r7, #8]
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f000 f805 	bl	80010d4 <_ZN5Print5printEli>
 80010ca:	4603      	mov	r3, r0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d109      	bne.n	80010fa <_ZN5Print5printEli+0x26>
    return write(n);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	4611      	mov	r1, r2
 80010f2:	68f8      	ldr	r0, [r7, #12]
 80010f4:	4798      	blx	r3
 80010f6:	4603      	mov	r3, r0
 80010f8:	e029      	b.n	800114e <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b0a      	cmp	r3, #10
 80010fe:	d11d      	bne.n	800113c <_ZN5Print5printEli+0x68>
    if (n < 0) {
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	2b00      	cmp	r3, #0
 8001104:	da12      	bge.n	800112c <_ZN5Print5printEli+0x58>
      int t = print('-');
 8001106:	212d      	movs	r1, #45	; 0x2d
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f7ff ffaf 	bl	800106c <_ZN5Print5printEc>
 800110e:	4603      	mov	r3, r0
 8001110:	617b      	str	r3, [r7, #20]
      n = -n;
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	425b      	negs	r3, r3
 8001116:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	220a      	movs	r2, #10
 800111c:	4619      	mov	r1, r3
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f000 f84d 	bl	80011be <_ZN5Print11printNumberEmh>
 8001124:	4602      	mov	r2, r0
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	4413      	add	r3, r2
 800112a:	e010      	b.n	800114e <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	220a      	movs	r2, #10
 8001130:	4619      	mov	r1, r3
 8001132:	68f8      	ldr	r0, [r7, #12]
 8001134:	f000 f843 	bl	80011be <_ZN5Print11printNumberEmh>
 8001138:	4603      	mov	r3, r0
 800113a:	e008      	b.n	800114e <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	4619      	mov	r1, r3
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f000 f83a 	bl	80011be <_ZN5Print11printNumberEmh>
 800114a:	4603      	mov	r3, r0
 800114c:	bf00      	nop
  }
}
 800114e:	4618      	mov	r0, r3
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b084      	sub	sp, #16
 800115a:	af00      	add	r7, sp, #0
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d109      	bne.n	800117c <_ZN5Print5printEmi+0x26>
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	4611      	mov	r1, r2
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	4798      	blx	r3
 8001178:	4603      	mov	r3, r0
 800117a:	e008      	b.n	800118e <_ZN5Print5printEmi+0x38>
  else return printNumber(n, base);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	68b9      	ldr	r1, [r7, #8]
 8001184:	68f8      	ldr	r0, [r7, #12]
 8001186:	f000 f81a 	bl	80011be <_ZN5Print11printNumberEmh>
 800118a:	4603      	mov	r3, r0
 800118c:	bf00      	nop
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <_ZN5Print5printEdi>:

size_t Print::print(double n, int digits)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b084      	sub	sp, #16
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	ed87 0b00 	vstr	d0, [r7]
 80011a2:	60b9      	str	r1, [r7, #8]
  return printFloat(n, digits);
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	4619      	mov	r1, r3
 80011aa:	ed97 0b00 	vldr	d0, [r7]
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f000 f84a 	bl	8001248 <_ZN5Print10printFloatEdh>
 80011b4:	4603      	mov	r3, r0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80011be:	b580      	push	{r7, lr}
 80011c0:	b090      	sub	sp, #64	; 0x40
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	60f8      	str	r0, [r7, #12]
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	4613      	mov	r3, r2
 80011ca:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	3320      	adds	r3, #32
 80011d2:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 80011d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d801      	bhi.n	80011e4 <_ZN5Print11printNumberEmh+0x26>
 80011e0:	230a      	movs	r3, #10
 80011e2:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f0:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 80011f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	79f9      	ldrb	r1, [r7, #7]
 80011fc:	fb11 f303 	smulbb	r3, r1, r3
 8001200:	b2db      	uxtb	r3, r3
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8001208:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800120c:	2b09      	cmp	r3, #9
 800120e:	d804      	bhi.n	800121a <_ZN5Print11printNumberEmh+0x5c>
 8001210:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001214:	3330      	adds	r3, #48	; 0x30
 8001216:	b2db      	uxtb	r3, r3
 8001218:	e003      	b.n	8001222 <_ZN5Print11printNumberEmh+0x64>
 800121a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800121e:	3337      	adds	r3, #55	; 0x37
 8001220:	b2db      	uxtb	r3, r3
 8001222:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001224:	3a01      	subs	r2, #1
 8001226:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001228:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800122a:	7013      	strb	r3, [r2, #0]
  } while(n);
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d000      	beq.n	8001234 <_ZN5Print11printNumberEmh+0x76>
  do {
 8001232:	e7d7      	b.n	80011e4 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 8001234:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f7ff feba 	bl	8000fb0 <_ZN5Print5writeEPKc>
 800123c:	4603      	mov	r3, r0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3740      	adds	r7, #64	; 0x40
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <_ZN5Print10printFloatEdh>:

size_t Print::printFloat(double number, uint8_t digits) 
{ 
 8001248:	b580      	push	{r7, lr}
 800124a:	b08e      	sub	sp, #56	; 0x38
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	ed87 0b00 	vstr	d0, [r7]
 8001254:	460b      	mov	r3, r1
 8001256:	72fb      	strb	r3, [r7, #11]
  size_t n = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (isnan(number)) return print("nan");
 800125c:	ed97 0b00 	vldr	d0, [r7]
 8001260:	f7ff fe8a 	bl	8000f78 <_ZSt5isnand>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d005      	beq.n	8001276 <_ZN5Print10printFloatEdh+0x2e>
 800126a:	4969      	ldr	r1, [pc, #420]	; (8001410 <_ZN5Print10printFloatEdh+0x1c8>)
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f7ff feef 	bl	8001050 <_ZN5Print5printEPKc>
 8001272:	4603      	mov	r3, r0
 8001274:	e0c7      	b.n	8001406 <_ZN5Print10printFloatEdh+0x1be>
  if (isinf(number)) return print("inf");
 8001276:	ed97 0b00 	vldr	d0, [r7]
 800127a:	f7ff fe4d 	bl	8000f18 <_ZSt5isinfd>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d005      	beq.n	8001290 <_ZN5Print10printFloatEdh+0x48>
 8001284:	4963      	ldr	r1, [pc, #396]	; (8001414 <_ZN5Print10printFloatEdh+0x1cc>)
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f7ff fee2 	bl	8001050 <_ZN5Print5printEPKc>
 800128c:	4603      	mov	r3, r0
 800128e:	e0ba      	b.n	8001406 <_ZN5Print10printFloatEdh+0x1be>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 8001290:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001294:	4b60      	ldr	r3, [pc, #384]	; (8001418 <_ZN5Print10printFloatEdh+0x1d0>)
 8001296:	e9d7 0100 	ldrd	r0, r1, [r7]
 800129a:	f7ff fc09 	bl	8000ab0 <__aeabi_dcmpgt>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d005      	beq.n	80012b0 <_ZN5Print10printFloatEdh+0x68>
 80012a4:	495d      	ldr	r1, [pc, #372]	; (800141c <_ZN5Print10printFloatEdh+0x1d4>)
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f7ff fed2 	bl	8001050 <_ZN5Print5printEPKc>
 80012ac:	4603      	mov	r3, r0
 80012ae:	e0aa      	b.n	8001406 <_ZN5Print10printFloatEdh+0x1be>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80012b0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80012b4:	4b5a      	ldr	r3, [pc, #360]	; (8001420 <_ZN5Print10printFloatEdh+0x1d8>)
 80012b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012ba:	f7ff fbdb 	bl	8000a74 <__aeabi_dcmplt>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <_ZN5Print10printFloatEdh+0x88>
 80012c4:	4955      	ldr	r1, [pc, #340]	; (800141c <_ZN5Print10printFloatEdh+0x1d4>)
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	f7ff fec2 	bl	8001050 <_ZN5Print5printEPKc>
 80012cc:	4603      	mov	r3, r0
 80012ce:	e09a      	b.n	8001406 <_ZN5Print10printFloatEdh+0x1be>
  
  // Handle negative numbers
  if (number < 0.0)
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	f04f 0300 	mov.w	r3, #0
 80012d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012dc:	f7ff fbca 	bl	8000a74 <__aeabi_dcmplt>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00d      	beq.n	8001302 <_ZN5Print10printFloatEdh+0xba>
  {
     n += print('-');
 80012e6:	212d      	movs	r1, #45	; 0x2d
 80012e8:	68f8      	ldr	r0, [r7, #12]
 80012ea:	f7ff febf 	bl	800106c <_ZN5Print5printEc>
 80012ee:	4602      	mov	r2, r0
 80012f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f2:	4413      	add	r3, r2
 80012f4:	637b      	str	r3, [r7, #52]	; 0x34
     number = -number;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001300:	607b      	str	r3, [r7, #4]
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b47      	ldr	r3, [pc, #284]	; (8001424 <_ZN5Print10printFloatEdh+0x1dc>)
 8001308:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  for (uint8_t i=0; i<digits; ++i)
 800130c:	2300      	movs	r3, #0
 800130e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001312:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001316:	7afb      	ldrb	r3, [r7, #11]
 8001318:	429a      	cmp	r2, r3
 800131a:	d210      	bcs.n	800133e <_ZN5Print10printFloatEdh+0xf6>
    rounding /= 10.0;
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	4b41      	ldr	r3, [pc, #260]	; (8001428 <_ZN5Print10printFloatEdh+0x1e0>)
 8001322:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001326:	f7ff fa5d 	bl	80007e4 <__aeabi_ddiv>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  for (uint8_t i=0; i<digits; ++i)
 8001332:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001336:	3301      	adds	r3, #1
 8001338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800133c:	e7e9      	b.n	8001312 <_ZN5Print10printFloatEdh+0xca>
  
  number += rounding;
 800133e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001342:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001346:	f7fe ff6d 	bl	8000224 <__adddf3>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	e9c7 2300 	strd	r2, r3, [r7]

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 8001352:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001356:	f7ff fbf3 	bl	8000b40 <__aeabi_d2uiz>
 800135a:	4603      	mov	r3, r0
 800135c:	617b      	str	r3, [r7, #20]
  double remainder = number - (double)int_part;
 800135e:	6978      	ldr	r0, [r7, #20]
 8001360:	f7ff f89c 	bl	800049c <__aeabi_ui2d>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	e9d7 0100 	ldrd	r0, r1, [r7]
 800136c:	f7fe ff58 	bl	8000220 <__aeabi_dsub>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	e9c7 2306 	strd	r2, r3, [r7, #24]
  n += print(int_part);
 8001378:	220a      	movs	r2, #10
 800137a:	6979      	ldr	r1, [r7, #20]
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f7ff feea 	bl	8001156 <_ZN5Print5printEmi>
 8001382:	4602      	mov	r2, r0
 8001384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001386:	4413      	add	r3, r2
 8001388:	637b      	str	r3, [r7, #52]	; 0x34

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 800138a:	7afb      	ldrb	r3, [r7, #11]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d007      	beq.n	80013a0 <_ZN5Print10printFloatEdh+0x158>
    n += print("."); 
 8001390:	4926      	ldr	r1, [pc, #152]	; (800142c <_ZN5Print10printFloatEdh+0x1e4>)
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f7ff fe5c 	bl	8001050 <_ZN5Print5printEPKc>
 8001398:	4602      	mov	r2, r0
 800139a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800139c:	4413      	add	r3, r2
 800139e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80013a0:	7afb      	ldrb	r3, [r7, #11]
 80013a2:	1e5a      	subs	r2, r3, #1
 80013a4:	72fa      	strb	r2, [r7, #11]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	bf14      	ite	ne
 80013aa:	2301      	movne	r3, #1
 80013ac:	2300      	moveq	r3, #0
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d027      	beq.n	8001404 <_ZN5Print10printFloatEdh+0x1bc>
  {
    remainder *= 10.0;
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <_ZN5Print10printFloatEdh+0x1e0>)
 80013ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013be:	f7ff f8e7 	bl	8000590 <__aeabi_dmul>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int toPrint = int(remainder);
 80013ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013ce:	f7ff fb8f 	bl	8000af0 <__aeabi_d2iz>
 80013d2:	4603      	mov	r3, r0
 80013d4:	613b      	str	r3, [r7, #16]
    n += print(toPrint);
 80013d6:	220a      	movs	r2, #10
 80013d8:	6939      	ldr	r1, [r7, #16]
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f7ff fe6a 	bl	80010b4 <_ZN5Print5printEii>
 80013e0:	4602      	mov	r2, r0
 80013e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013e4:	4413      	add	r3, r2
 80013e6:	637b      	str	r3, [r7, #52]	; 0x34
    remainder -= toPrint; 
 80013e8:	6938      	ldr	r0, [r7, #16]
 80013ea:	f7ff f867 	bl	80004bc <__aeabi_i2d>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013f6:	f7fe ff13 	bl	8000220 <__aeabi_dsub>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
  while (digits-- > 0)
 8001402:	e7cd      	b.n	80013a0 <_ZN5Print10printFloatEdh+0x158>
  } 
  
  return n;
 8001404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001406:	4618      	mov	r0, r3
 8001408:	3738      	adds	r7, #56	; 0x38
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	08010c88 	.word	0x08010c88
 8001414:	08010c8c 	.word	0x08010c8c
 8001418:	41efffff 	.word	0x41efffff
 800141c:	08010c90 	.word	0x08010c90
 8001420:	c1efffff 	.word	0xc1efffff
 8001424:	3fe00000 	.word	0x3fe00000
 8001428:	40240000 	.word	0x40240000
 800142c:	08010c94 	.word	0x08010c94

08001430 <_ZN11SerialClass5writeEh>:
#include "SerialClass.h"

size_t SerialClass::write(uint8_t data) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	70fb      	strb	r3, [r7, #3]
	return write(&data, 1);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	3304      	adds	r3, #4
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	1cf9      	adds	r1, r7, #3
 8001446:	2201      	movs	r2, #1
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	4798      	blx	r3
 800144c:	4603      	mov	r3, r0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <_ZN11SerialClass5writeEPKhj>:

size_t SerialClass::write(const uint8_t *buffer, size_t size) {
 8001456:	b580      	push	{r7, lr}
 8001458:	b086      	sub	sp, #24
 800145a:	af00      	add	r7, sp, #0
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
	uint8_t *pBuffer = (uint8_t*)buffer;
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(pUART_Handle, pBuffer, size, HAL_MAX_DELAY);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6918      	ldr	r0, [r3, #16]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	b29a      	uxth	r2, r3
 800146e:	f04f 33ff 	mov.w	r3, #4294967295
 8001472:	6979      	ldr	r1, [r7, #20]
 8001474:	f005 fa75 	bl	8006962 <HAL_UART_Transmit>
	return size;
 8001478:	687b      	ldr	r3, [r7, #4]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <_ZN11SerialClass4readEv>:

int SerialClass::read() {
 8001482:	b580      	push	{r7, lr}
 8001484:	b084      	sub	sp, #16
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
	uint8_t data;
	HAL_UART_Receive(pUART_Handle, &data, 1, HAL_MAX_DELAY);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6918      	ldr	r0, [r3, #16]
 800148e:	f107 010f 	add.w	r1, r7, #15
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	2201      	movs	r2, #1
 8001498:	f005 faf5 	bl	8006a86 <HAL_UART_Receive>
	return data;
 800149c:	7bfb      	ldrb	r3, [r7, #15]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <_ZN11SerialClass9availableEv>:

int SerialClass::available() {
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
	return -1;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <_ZN11SerialClass4peekEv>:

int SerialClass::peek() {
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
	return -1;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <_ZN11SerialClass5flushEv>:

void SerialClass::flush() {
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	4a06      	ldr	r2, [pc, #24]	; (8001510 <_ZN5PrintC1Ev+0x24>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	08010ea4 	.word	0x08010ea4

08001514 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff ffe4 	bl	80014ec <_ZN5PrintC1Ev>
 8001524:	4a05      	ldr	r2, [pc, #20]	; (800153c <_ZN6StreamC1Ev+0x28>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	08010f1c 	.word	0x08010f1c

08001540 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>:
#include "Stream.h"
#include "stm32f4xx_hal.h"

class SerialClass : public Stream {
public:
	SerialClass(UART_HandleTypeDef *UART_Handle) : pUART_Handle(UART_Handle) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ffe1 	bl	8001514 <_ZN6StreamC1Ev>
 8001552:	4a05      	ldr	r2, [pc, #20]	; (8001568 <_ZN11SerialClassC1EP20__UART_HandleTypeDef+0x28>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	611a      	str	r2, [r3, #16]
	};
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	08010eb4 	.word	0x08010eb4

0800156c <_ZN2P910SetDirReadEv>:
MAKE_PIN(P4, GPIOB, GPIO_PIN_5); // D4
MAKE_PIN(P5, GPIOB, GPIO_PIN_4); // D5
MAKE_PIN(P6, GPIOB, GPIO_PIN_10); // D6
MAKE_PIN(P7, GPIOA, GPIO_PIN_8); // D7
MAKE_PIN(P8, GPIOA, GPIO_PIN_9); // D8
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <_ZN2P910SetDirReadEv+0x24>)
 8001572:	2280      	movs	r2, #128	; 0x80
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <_ZN2P910SetDirReadEv+0x24>)
 8001578:	2200      	movs	r2, #0
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <_ZN2P910SetDirReadEv+0x24>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	4903      	ldr	r1, [pc, #12]	; (8001590 <_ZN2P910SetDirReadEv+0x24>)
 8001584:	4803      	ldr	r0, [pc, #12]	; (8001594 <_ZN2P910SetDirReadEv+0x28>)
 8001586:	f001 ffe7 	bl	8003558 <HAL_GPIO_Init>
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200001f0 	.word	0x200001f0
 8001594:	40020800 	.word	0x40020800

08001598 <_ZN3P103SetEv>:
MAKE_PIN(P10, GPIOB, GPIO_PIN_6); // D10
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
 800159c:	2201      	movs	r2, #1
 800159e:	2140      	movs	r1, #64	; 0x40
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <_ZN3P103SetEv+0x14>)
 80015a2:	f002 f985 	bl	80038b0 <HAL_GPIO_WritePin>
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40020400 	.word	0x40020400

080015b0 <_ZN3P105ClearEv>:
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	2200      	movs	r2, #0
 80015b6:	2140      	movs	r1, #64	; 0x40
 80015b8:	4802      	ldr	r0, [pc, #8]	; (80015c4 <_ZN3P105ClearEv+0x14>)
 80015ba:	f002 f979 	bl	80038b0 <HAL_GPIO_WritePin>
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40020400 	.word	0x40020400

080015c8 <_ZN3P1011SetDirWriteEv>:
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <_ZN3P1011SetDirWriteEv+0x28>)
 80015ce:	2240      	movs	r2, #64	; 0x40
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <_ZN3P1011SetDirWriteEv+0x28>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <_ZN3P1011SetDirWriteEv+0x28>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <_ZN3P1011SetDirWriteEv+0x28>)
 80015e0:	2203      	movs	r2, #3
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	4902      	ldr	r1, [pc, #8]	; (80015f0 <_ZN3P1011SetDirWriteEv+0x28>)
 80015e6:	4803      	ldr	r0, [pc, #12]	; (80015f4 <_ZN3P1011SetDirWriteEv+0x2c>)
 80015e8:	f001 ffb6 	bl	8003558 <HAL_GPIO_Init>
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000204 	.word	0x20000204
 80015f4:	40020400 	.word	0x40020400

080015f8 <_ZN3BTD11pairWithHIDEv>:
        bool motionPlusInside;
        /** True if it's a Wii U Pro Controller. */
        bool wiiUProController;

        /** Call this function to pair with a HID device */
        void pairWithHID() {
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
                waitingForConnection = false;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	721a      	strb	r2, [r3, #8]
                pairWithHIDDevice = true;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2206      	movs	r2, #6
 8001612:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        };
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <_ZN5BTHID4pairEv>:

        /** True if a device is connected */
        bool connected;

        /** Call this to start the pairing sequence with a device */
        void pair(void) {
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
                if(pBtd)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d004      	beq.n	800163c <_ZN5BTHID4pairEv+0x1a>
                        pBtd->pairWithHID();
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff ffde 	bl	80015f8 <_ZN3BTD11pairWithHIDEv>
        };
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <_ZN5BTHID6onInitEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        void onInit() {
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
                if(pFuncOnInit)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <_ZN5BTHID6onInitEv+0x16>
                        pFuncOnInit(); // Call the user function
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	4798      	blx	r3
                OnInitBTHID();
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	331c      	adds	r3, #28
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	4798      	blx	r3
        };
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <_ZN5BTHID21ParseBTHIDControlDataEhPh>:
        };
        /**
         * Same as ParseBTHIDData for reports that are sent through the
         * interrupt pipe (in response to a GET_REPORT).
         */
        virtual void ParseBTHIDControlData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 800166e:	b480      	push	{r7}
 8001670:	b085      	sub	sp, #20
 8001672:	af00      	add	r7, sp, #0
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	460b      	mov	r3, r1
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	72fb      	strb	r3, [r7, #11]
                return;
 800167c:	bf00      	nop
        }
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <_ZN9PS4ParserC1Ev>:

/** This class parses all the data sent by the PS4 controller */
class PS4Parser {
public:
        /** Constructor for the PS4Parser class. */
        PS4Parser() {
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <_ZN9PS4ParserC1Ev+0x20>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	601a      	str	r2, [r3, #0]
                Reset();
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f00d fb14 	bl	800ecc4 <_ZN9PS4Parser5ResetEv>
        };
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	08010f10 	.word	0x08010f10

080016ac <_ZN9PS4Parser4getXEhh>:
         * @param  xyId   The controller sends out three packets with the same structure.
         *                The third one will contain the last measure, but if you read from the controller then there is only be data in the first one.
         *                For that reason it will be set to 0 if the argument is omitted.
         * @return        Returns the x-coordinate of the finger.
         */
        uint16_t getX(uint8_t finger = 0, uint8_t xyId = 0) {
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	70fb      	strb	r3, [r7, #3]
 80016b8:	4613      	mov	r3, r2
 80016ba:	70bb      	strb	r3, [r7, #2]
                return ps4Data.xy[xyId].finger[finger].x;
 80016bc:	78ba      	ldrb	r2, [r7, #2]
 80016be:	78fb      	ldrb	r3, [r7, #3]
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	0098      	lsls	r0, r3, #2
 80016c4:	4613      	mov	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	4413      	add	r3, r2
 80016ca:	4403      	add	r3, r0
 80016cc:	440b      	add	r3, r1
 80016ce:	3320      	adds	r3, #32
 80016d0:	79da      	ldrb	r2, [r3, #7]
 80016d2:	7a1b      	ldrb	r3, [r3, #8]
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	021b      	lsls	r3, r3, #8
 80016da:	4313      	orrs	r3, r2
 80016dc:	b29b      	uxth	r3, r3
        };
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <_ZN9PS4Parser4getYEhh>:
         * @param  xyId   The controller sends out three packets with the same structure.
         *                The third one will contain the last measure, but if you read from the controller then there is only be data in the first one.
         *                For that reason it will be set to 0 if the argument is omitted.
         * @return        Returns the y-coordinate of the finger.
         */
        uint16_t getY(uint8_t finger = 0, uint8_t xyId = 0) {
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	460b      	mov	r3, r1
 80016f4:	70fb      	strb	r3, [r7, #3]
 80016f6:	4613      	mov	r3, r2
 80016f8:	70bb      	strb	r3, [r7, #2]
                return ps4Data.xy[xyId].finger[finger].y;
 80016fa:	78ba      	ldrb	r2, [r7, #2]
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	0098      	lsls	r0, r3, #2
 8001702:	4613      	mov	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	4413      	add	r3, r2
 8001708:	4403      	add	r3, r0
 800170a:	440b      	add	r3, r1
 800170c:	3320      	adds	r3, #32
 800170e:	7a1a      	ldrb	r2, [r3, #8]
 8001710:	0912      	lsrs	r2, r2, #4
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	7a5b      	ldrb	r3, [r3, #9]
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	4313      	orrs	r3, r2
 800171a:	b29b      	uxth	r3, r3
        };
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <_ZN9PS4Parser10isTouchingEhh>:
         * @param  xyId   The controller sends out three packets with the same structure.
         *                The third one will contain the last measure, but if you read from the controller then there is only be data in the first one.
         *                For that reason it will be set to 0 if the argument is omitted.
         * @return        Returns true if the specific finger is touching the touchpad.
         */
        bool isTouching(uint8_t finger = 0, uint8_t xyId = 0) {
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	70fb      	strb	r3, [r7, #3]
 8001734:	4613      	mov	r3, r2
 8001736:	70bb      	strb	r3, [r7, #2]
                return !(ps4Data.xy[xyId].finger[finger].touching); // The bit is cleared when a finger is touching the touchpad
 8001738:	78ba      	ldrb	r2, [r7, #2]
 800173a:	78fb      	ldrb	r3, [r7, #3]
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	0098      	lsls	r0, r3, #2
 8001740:	4613      	mov	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	4413      	add	r3, r2
 8001746:	4403      	add	r3, r0
 8001748:	440b      	add	r3, r1
 800174a:	3320      	adds	r3, #32
 800174c:	799b      	ldrb	r3, [r3, #6]
 800174e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f083 0301 	eor.w	r3, r3, #1
 8001758:	b2db      	uxtb	r3, r3
        };
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <_ZN9PS4Parser8getAngleE9AngleEnum>:
        /**
         * Get the angle of the controller calculated using the accelerometer.
         * @param  a Either ::Pitch or ::Roll.
         * @return   Return the angle in the range of 0-360.
         */
        float getAngle(AngleEnum a) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	70fb      	strb	r3, [r7, #3]
                if (a == Pitch)
 8001774:	78fb      	ldrb	r3, [r7, #3]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d12e      	bne.n	80017d8 <_ZN9PS4Parser8getAngleE9AngleEnum+0x70>
                        return (atan2f(ps4Data.accY, ps4Data.accZ) + PI) * RAD_TO_DEG;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001780:	ee07 3a90 	vmov	s15, r3
 8001784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800178e:	ee07 3a10 	vmov	s14, r3
 8001792:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001796:	eef0 0a47 	vmov.f32	s1, s14
 800179a:	eeb0 0a67 	vmov.f32	s0, s15
 800179e:	f00f f84a 	bl	8010836 <atan2f>
 80017a2:	ee10 3a10 	vmov	r3, s0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fe9a 	bl	80004e0 <__aeabi_f2d>
 80017ac:	a326      	add	r3, pc, #152	; (adr r3, 8001848 <_ZN9PS4Parser8getAngleE9AngleEnum+0xe0>)
 80017ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b2:	f7fe fd37 	bl	8000224 <__adddf3>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	a324      	add	r3, pc, #144	; (adr r3, 8001850 <_ZN9PS4Parser8getAngleE9AngleEnum+0xe8>)
 80017c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c4:	f7fe fee4 	bl	8000590 <__aeabi_dmul>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4610      	mov	r0, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	f7ff f9d6 	bl	8000b80 <__aeabi_d2f>
 80017d4:	4603      	mov	r3, r0
 80017d6:	e02d      	b.n	8001834 <_ZN9PS4Parser8getAngleE9AngleEnum+0xcc>
                else
                        return (atan2f(ps4Data.accX, ps4Data.accZ) + PI) * RAD_TO_DEG;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80017de:	ee07 3a90 	vmov	s15, r3
 80017e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80017ec:	ee07 3a10 	vmov	s14, r3
 80017f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80017f4:	eef0 0a47 	vmov.f32	s1, s14
 80017f8:	eeb0 0a67 	vmov.f32	s0, s15
 80017fc:	f00f f81b 	bl	8010836 <atan2f>
 8001800:	ee10 3a10 	vmov	r3, s0
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fe6b 	bl	80004e0 <__aeabi_f2d>
 800180a:	a30f      	add	r3, pc, #60	; (adr r3, 8001848 <_ZN9PS4Parser8getAngleE9AngleEnum+0xe0>)
 800180c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001810:	f7fe fd08 	bl	8000224 <__adddf3>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	a30c      	add	r3, pc, #48	; (adr r3, 8001850 <_ZN9PS4Parser8getAngleE9AngleEnum+0xe8>)
 800181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001822:	f7fe feb5 	bl	8000590 <__aeabi_dmul>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f7ff f9a7 	bl	8000b80 <__aeabi_d2f>
 8001832:	4603      	mov	r3, r0
 8001834:	ee07 3a90 	vmov	s15, r3
        };
 8001838:	eeb0 0a67 	vmov.f32	s0, s15
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	f3af 8000 	nop.w
 8001848:	54442d18 	.word	0x54442d18
 800184c:	400921fb 	.word	0x400921fb
 8001850:	1a63c1f8 	.word	0x1a63c1f8
 8001854:	404ca5dc 	.word	0x404ca5dc

08001858 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>:

        /**
         * Turn on rumble.
         * @param mode Either ::RumbleHigh or ::RumbleLow.
         */
        void setRumbleOn(RumbleEnum mode) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	70fb      	strb	r3, [r7, #3]
                if (mode == RumbleLow)
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	2b20      	cmp	r3, #32
 8001868:	d105      	bne.n	8001876 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x1e>
                        setRumbleOn(0x00, 0xFF);
 800186a:	22ff      	movs	r2, #255	; 0xff
 800186c:	2100      	movs	r1, #0
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f80a 	bl	8001888 <_ZN9PS4Parser11setRumbleOnEhh>
                else
                        setRumbleOn(0xFF, 0x00);
        };
 8001874:	e004      	b.n	8001880 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x28>
                        setRumbleOn(0xFF, 0x00);
 8001876:	2200      	movs	r2, #0
 8001878:	21ff      	movs	r1, #255	; 0xff
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f804 	bl	8001888 <_ZN9PS4Parser11setRumbleOnEhh>
        };
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <_ZN9PS4Parser11setRumbleOnEhh>:
        /**
         * Turn on rumble.
         * @param bigRumble   Value for big motor.
         * @param smallRumble Value for small motor.
         */
        void setRumbleOn(uint8_t bigRumble, uint8_t smallRumble) {
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	70fb      	strb	r3, [r7, #3]
 8001894:	4613      	mov	r3, r2
 8001896:	70bb      	strb	r3, [r7, #2]
                ps4Output.bigRumble = bigRumble;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	78fa      	ldrb	r2, [r7, #3]
 800189c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                ps4Output.smallRumble = smallRumble;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	78ba      	ldrb	r2, [r7, #2]
 80018a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                ps4Output.reportChanged = true;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <_ZN9PS4Parser6setLedEhhh>:

        /**
         * Use this to set the color using RGB values.
         * @param r,g,b RGB value.
         */
        void setLed(uint8_t r, uint8_t g, uint8_t b) {
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	4608      	mov	r0, r1
 80018c6:	4611      	mov	r1, r2
 80018c8:	461a      	mov	r2, r3
 80018ca:	4603      	mov	r3, r0
 80018cc:	70fb      	strb	r3, [r7, #3]
 80018ce:	460b      	mov	r3, r1
 80018d0:	70bb      	strb	r3, [r7, #2]
 80018d2:	4613      	mov	r3, r2
 80018d4:	707b      	strb	r3, [r7, #1]
                ps4Output.r = r;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	78fa      	ldrb	r2, [r7, #3]
 80018da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                ps4Output.g = g;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	78ba      	ldrb	r2, [r7, #2]
 80018e2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                ps4Output.b = b;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	787a      	ldrb	r2, [r7, #1]
 80018ea:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                ps4Output.reportChanged = true;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <_ZN9PS4Parser6setLedE10ColorsEnum>:

        /**
         * Use this to set the color using the predefined colors in ::ColorsEnum.
         * @param color The desired color.
         */
        void setLed(ColorsEnum color) {
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
                setLed((uint8_t)(color >> 16), (uint8_t)(color >> 8), (uint8_t)(color));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	141b      	asrs	r3, r3, #16
 8001910:	b2d9      	uxtb	r1, r3
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	121b      	asrs	r3, r3, #8
 8001916:	b2da      	uxtb	r2, r3
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ffcd 	bl	80018bc <_ZN9PS4Parser6setLedEhhh>
        };
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <_ZN9PS4Parser11setLedFlashEhh>:
        /**
         * Set the LEDs flash time.
         * @param flashOn  Time to flash bright (255 = 2.5 seconds).
         * @param flashOff Time to flash dark (255 = 2.5 seconds).
         */
        void setLedFlash(uint8_t flashOn, uint8_t flashOff) {
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	460b      	mov	r3, r1
 8001934:	70fb      	strb	r3, [r7, #3]
 8001936:	4613      	mov	r3, r2
 8001938:	70bb      	strb	r3, [r7, #2]
                ps4Output.flashOn = flashOn;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	78fa      	ldrb	r2, [r7, #3]
 800193e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
                ps4Output.flashOff = flashOff;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	78ba      	ldrb	r2, [r7, #2]
 8001946:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                ps4Output.reportChanged = true;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
	...

08001960 <_ZN5PS4BTC1EP3BTDbPKc>:
         * Constructor for the PS4BT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         * @param  pin   Write the pin to BTD#btdPin. If argument is omitted, then "0000" will be used.
         */
        PS4BT(BTD *p, bool pair = false, const char *pin = "0000") :
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	4613      	mov	r3, r2
 800196e:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair, pin) {
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	79fa      	ldrb	r2, [r7, #7]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	68b9      	ldr	r1, [r7, #8]
 8001978:	f00b ffd8 	bl	800d92c <_ZN5BTHIDC1EP3BTDbPKc>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	3378      	adds	r3, #120	; 0x78
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fe81 	bl	8001688 <_ZN9PS4ParserC1Ev>
 8001986:	4a08      	ldr	r2, [pc, #32]	; (80019a8 <_ZN5PS4BTC1EP3BTDbPKc+0x48>)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	4a07      	ldr	r2, [pc, #28]	; (80019ac <_ZN5PS4BTC1EP3BTDbPKc+0x4c>)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	679a      	str	r2, [r3, #120]	; 0x78
                PS4Parser::Reset();
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	3378      	adds	r3, #120	; 0x78
 8001996:	4618      	mov	r0, r3
 8001998:	f00d f994 	bl	800ecc4 <_ZN9PS4Parser5ResetEv>
        };
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	08010ed4 	.word	0x08010ed4
 80019ac:	08010f04 	.word	0x08010f04

080019b0 <_ZN5PS4BT9connectedEv>:

        /**
         * Used to check if a PS4 controller is connected.
         * @return Returns true if it is connected.
         */
        bool connected() {
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
                return BTHID::connected;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	7d5b      	ldrb	r3, [r3, #21]
        };
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <_ZN5PS4BT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	460b      	mov	r3, r1
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	72fb      	strb	r3, [r7, #11]
                PS4Parser::Parse(len, buf);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	3378      	adds	r3, #120	; 0x78
 80019da:	7af9      	ldrb	r1, [r7, #11]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	4618      	mov	r0, r3
 80019e0:	f00d f8ab 	bl	800eb3a <_ZN9PS4Parser5ParseEhPh>
        };
 80019e4:	bf00      	nop
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_ZN5PS4BT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3378      	adds	r3, #120	; 0x78
 80019f8:	4618      	mov	r0, r3
 80019fa:	f00d f963 	bl	800ecc4 <_ZN9PS4Parser5ResetEv>
                enable_sixaxis(); // Make the controller send out the entire output report
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f855 	bl	8001aae <_ZN5PS4BT14enable_sixaxisEv>
                if (!pFuncOnInit)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d105      	bne.n	8001a18 <_ZN5PS4BT11OnInitBTHIDEv+0x2c>
                        setLed(Blue); // Only call this is a user function has not been set
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3378      	adds	r3, #120	; 0x78
 8001a10:	21ff      	movs	r1, #255	; 0xff
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff ff75 	bl	8001902 <_ZN9PS4Parser6setLedE10ColorsEnum>
        };
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <_ZN5PS4BT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3378      	adds	r3, #120	; 0x78
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f00d f949 	bl	800ecc4 <_ZN9PS4Parser5ResetEv>
        };
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <_ZN5PS4BT16sendOutputReportEP9PS4Output>:
        /**@}*/

        /** @name PS4Parser implementation */
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b096      	sub	sp, #88	; 0x58
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]
                uint8_t buf[79];
                memset(buf, 0, sizeof(buf));
 8001a44:	f107 0308 	add.w	r3, r7, #8
 8001a48:	224f      	movs	r2, #79	; 0x4f
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f00f f8af 	bl	8010bb0 <memset>

                buf[0] = 0x52; // HID BT Set_report (0x50) | Report Type (Output 0x02)
 8001a52:	2352      	movs	r3, #82	; 0x52
 8001a54:	723b      	strb	r3, [r7, #8]
                buf[1] = 0x11; // Report ID
 8001a56:	2311      	movs	r3, #17
 8001a58:	727b      	strb	r3, [r7, #9]
                buf[2] = 0x80;
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	72bb      	strb	r3, [r7, #10]
                buf[4]= 0xFF;
 8001a5e:	23ff      	movs	r3, #255	; 0xff
 8001a60:	733b      	strb	r3, [r7, #12]

                buf[7] = output->smallRumble; // Small Rumble
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	785b      	ldrb	r3, [r3, #1]
 8001a66:	73fb      	strb	r3, [r7, #15]
                buf[8] = output->bigRumble; // Big rumble
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	743b      	strb	r3, [r7, #16]

                buf[9] = output->r; // Red
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	789b      	ldrb	r3, [r3, #2]
 8001a72:	747b      	strb	r3, [r7, #17]
                buf[10] = output->g; // Green
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	78db      	ldrb	r3, [r3, #3]
 8001a78:	74bb      	strb	r3, [r7, #18]
                buf[11] = output->b; // Blue
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	791b      	ldrb	r3, [r3, #4]
 8001a7e:	74fb      	strb	r3, [r7, #19]

                buf[12] = output->flashOn; // Time to flash bright (255 = 2.5 seconds)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	795b      	ldrb	r3, [r3, #5]
 8001a84:	753b      	strb	r3, [r7, #20]
                buf[13] = output->flashOff; // Time to flash dark (255 = 2.5 seconds)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	799b      	ldrb	r3, [r3, #6]
 8001a8a:	757b      	strb	r3, [r7, #21]

                output->reportChanged = false;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	71da      	strb	r2, [r3, #7]

                // The PS4 console actually set the four last bytes to a CRC32 checksum, but it seems like it is actually not needed

                HID_Command(buf, sizeof(buf));
 8001a92:	f107 0308 	add.w	r3, r7, #8
 8001a96:	224f      	movs	r2, #79	; 0x4f
 8001a98:	4619      	mov	r1, r3
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f81a 	bl	8001ad4 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8001aa0:	bf00      	nop
 8001aa2:	3758      	adds	r7, #88	; 0x58
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <_ZThn120_N5PS4BT16sendOutputReportEP9PS4Output>:
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8001aa8:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 8001aac:	e7c5      	b.n	8001a3a <_ZN5PS4BT16sendOutputReportEP9PS4Output>

08001aae <_ZN5PS4BT14enable_sixaxisEv>:
        /**@}*/

private:
        void enable_sixaxis() { // Command used to make the PS4 controller send out the entire output report
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b084      	sub	sp, #16
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
                uint8_t buf[2];
                buf[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
 8001ab6:	2343      	movs	r3, #67	; 0x43
 8001ab8:	733b      	strb	r3, [r7, #12]
                buf[1] = 0x02; // Report ID
 8001aba:	2302      	movs	r3, #2
 8001abc:	737b      	strb	r3, [r7, #13]

                HID_Command(buf, 2);
 8001abe:	f107 030c 	add.w	r3, r7, #12
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f804 	bl	8001ad4 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8001acc:	bf00      	nop
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <_ZN5PS4BT11HID_CommandEPhh>:

        void HID_Command(uint8_t *data, uint8_t nbytes) {
 8001ad4:	b590      	push	{r4, r7, lr}
 8001ad6:	b087      	sub	sp, #28
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	71fb      	strb	r3, [r7, #7]
                pBtd->L2CAP_Command(hci_handle, data, nbytes, control_scid[0], control_scid[1]);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6898      	ldr	r0, [r3, #8]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8999      	ldrh	r1, [r3, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	7d9b      	ldrb	r3, [r3, #22]
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	7dd2      	ldrb	r2, [r2, #23]
 8001af2:	79fc      	ldrb	r4, [r7, #7]
 8001af4:	9201      	str	r2, [sp, #4]
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	4623      	mov	r3, r4
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	f00a ffae 	bl	800ca5c <_ZN3BTD13L2CAP_CommandEtPhhhh>
        };
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd90      	pop	{r4, r7, pc}

08001b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b0e:	f001 f8ed 	bl	8002cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b12:	f000 fc0f 	bl	8002334 <SystemClock_Config>
//  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
//  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0); // SysTick_IRQn interrupt configuration
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b16:	f000 fd87 	bl	8002628 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8001b1a:	f000 fd57 	bl	80025cc <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8001b1e:	f000 fd19 	bl	8002554 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8001b22:	f008 f8d1 	bl	8009cc8 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8001b26:	f000 fcb9 	bl	800249c <_ZL12MX_ADC1_Initv>
  /* USER CODE BEGIN 2 */
  SPI_Handle = hspi1;
 8001b2a:	4abc      	ldr	r2, [pc, #752]	; (8001e1c <main+0x314>)
 8001b2c:	4bbc      	ldr	r3, [pc, #752]	; (8001e20 <main+0x318>)
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	2358      	movs	r3, #88	; 0x58
 8001b34:	461a      	mov	r2, r3
 8001b36:	f00f f82d 	bl	8010b94 <memcpy>
  UART_Handle = huart2;
 8001b3a:	4aba      	ldr	r2, [pc, #744]	; (8001e24 <main+0x31c>)
 8001b3c:	4bba      	ldr	r3, [pc, #744]	; (8001e28 <main+0x320>)
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	2344      	movs	r3, #68	; 0x44
 8001b44:	461a      	mov	r2, r3
 8001b46:	f00f f825 	bl	8010b94 <memcpy>

  struct gameHID_t gameHID;
  gameHID.JoyX = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	713b      	strb	r3, [r7, #4]
  gameHID.JoyY = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	717b      	strb	r3, [r7, #5]
  gameHID.Joy2X = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	71bb      	strb	r3, [r7, #6]
  gameHID.Joy2Y = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	71fb      	strb	r3, [r7, #7]
  gameHID.Joy_LT = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	723b      	strb	r3, [r7, #8]
  gameHID.Joy_RT = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	727b      	strb	r3, [r7, #9]
  //gameHID.Buttons = 0; 	// Button, one byte, button is bit #0

  //int8_t counter1 = 0; // counter for making the fake values wrapping around


  if (Usb.Init() == -1) {
 8001b62:	48b2      	ldr	r0, [pc, #712]	; (8001e2c <main+0x324>)
 8001b64:	f000 fdbf 	bl	80026e6 <_ZN8MAX3421eI3P102P9E4InitEv>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b6e:	bf0c      	ite	eq
 8001b70:	2301      	moveq	r3, #1
 8001b72:	2300      	movne	r3, #0
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d004      	beq.n	8001b84 <main+0x7c>
  		Serial.print(F("\r\nOSC did not start"));
 8001b7a:	49ad      	ldr	r1, [pc, #692]	; (8001e30 <main+0x328>)
 8001b7c:	48ad      	ldr	r0, [pc, #692]	; (8001e34 <main+0x32c>)
 8001b7e:	f7ff fa59 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
  		while (1); // Halt
 8001b82:	e7fe      	b.n	8001b82 <main+0x7a>
  	}
  	Serial.print(F("\r\nPS4 Bluetooth Library Started"));
 8001b84:	49ac      	ldr	r1, [pc, #688]	; (8001e38 <main+0x330>)
 8001b86:	48ab      	ldr	r0, [pc, #684]	; (8001e34 <main+0x32c>)
 8001b88:	f7ff fa54 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Usb.Task();
 8001b8c:	48a7      	ldr	r0, [pc, #668]	; (8001e2c <main+0x324>)
 8001b8e:	f00d fdf5 	bl	800f77c <_ZN3USB4TaskEv>
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	2208      	movs	r2, #8
 8001b96:	4619      	mov	r1, r3
 8001b98:	48a8      	ldr	r0, [pc, #672]	; (8001e3c <main+0x334>)
 8001b9a:	f006 fea5 	bl	80088e8 <USBD_HID_SendReport>
		//gameHID.JoyY = counter1*4;
		//gameHID.JoyB1 = ~gameHID.JoyB1; //
		//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
		//HAL_Delay(100);

		if (PS4.connected()) {
 8001b9e:	48a8      	ldr	r0, [pc, #672]	; (8001e40 <main+0x338>)
 8001ba0:	f7ff ff06 	bl	80019b0 <_ZN5PS4BT9connectedEv>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 838b 	beq.w	80022c2 <main+0x7ba>
			if (PS4.getAnalogHat(LeftHatX) > 137 || PS4.getAnalogHat(LeftHatX) < 117 || PS4.getAnalogHat(LeftHatY) > 137 || PS4.getAnalogHat(LeftHatY) < 117 || PS4.getAnalogHat(RightHatX) > 137 || PS4.getAnalogHat(RightHatX) < 117 || PS4.getAnalogHat(RightHatY) > 137 || PS4.getAnalogHat(RightHatY) < 117) {
 8001bac:	2100      	movs	r1, #0
 8001bae:	48a5      	ldr	r0, [pc, #660]	; (8001e44 <main+0x33c>)
 8001bb0:	f00c ffb3 	bl	800eb1a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b89      	cmp	r3, #137	; 0x89
 8001bb8:	d830      	bhi.n	8001c1c <main+0x114>
 8001bba:	2100      	movs	r1, #0
 8001bbc:	48a1      	ldr	r0, [pc, #644]	; (8001e44 <main+0x33c>)
 8001bbe:	f00c ffac 	bl	800eb1a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b74      	cmp	r3, #116	; 0x74
 8001bc6:	d929      	bls.n	8001c1c <main+0x114>
 8001bc8:	2101      	movs	r1, #1
 8001bca:	489e      	ldr	r0, [pc, #632]	; (8001e44 <main+0x33c>)
 8001bcc:	f00c ffa5 	bl	800eb1a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b89      	cmp	r3, #137	; 0x89
 8001bd4:	d822      	bhi.n	8001c1c <main+0x114>
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	489a      	ldr	r0, [pc, #616]	; (8001e44 <main+0x33c>)
 8001bda:	f00c ff9e 	bl	800eb1a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b74      	cmp	r3, #116	; 0x74
 8001be2:	d91b      	bls.n	8001c1c <main+0x114>
 8001be4:	2102      	movs	r1, #2
 8001be6:	4897      	ldr	r0, [pc, #604]	; (8001e44 <main+0x33c>)
 8001be8:	f00c ff97 	bl	800eb1a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b89      	cmp	r3, #137	; 0x89
 8001bf0:	d814      	bhi.n	8001c1c <main+0x114>
 8001bf2:	2102      	movs	r1, #2
 8001bf4:	4893      	ldr	r0, [pc, #588]	; (8001e44 <main+0x33c>)
 8001bf6:	f00c ff90 	bl	800eb1a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b74      	cmp	r3, #116	; 0x74
 8001bfe:	d90d      	bls.n	8001c1c <main+0x114>
 8001c00:	2103      	movs	r1, #3
 8001c02:	4890      	ldr	r0, [pc, #576]	; (8001e44 <main+0x33c>)
 8001c04:	f00c ff89 	bl	800eb1a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b89      	cmp	r3, #137	; 0x89
 8001c0c:	d806      	bhi.n	8001c1c <main+0x114>
 8001c0e:	2103      	movs	r1, #3
 8001c10:	488c      	ldr	r0, [pc, #560]	; (8001e44 <main+0x33c>)
 8001c12:	f00c ff82 	bl	800eb1a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b74      	cmp	r3, #116	; 0x74
 8001c1a:	d801      	bhi.n	8001c20 <main+0x118>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <main+0x11a>
 8001c20:	2300      	movs	r3, #0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d061      	beq.n	8001cea <main+0x1e2>

				gameHID.JoyX = PS4.getAnalogHat(LeftHatX) - 128;
 8001c26:	2100      	movs	r1, #0
 8001c28:	4886      	ldr	r0, [pc, #536]	; (8001e44 <main+0x33c>)
 8001c2a:	f00c ff76 	bl	800eb1a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	3b80      	subs	r3, #128	; 0x80
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	b25b      	sxtb	r3, r3
 8001c36:	713b      	strb	r3, [r7, #4]
				gameHID.JoyY = PS4.getAnalogHat(LeftHatY) - 128;
 8001c38:	2101      	movs	r1, #1
 8001c3a:	4882      	ldr	r0, [pc, #520]	; (8001e44 <main+0x33c>)
 8001c3c:	f00c ff6d 	bl	800eb1a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001c40:	4603      	mov	r3, r0
 8001c42:	3b80      	subs	r3, #128	; 0x80
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	b25b      	sxtb	r3, r3
 8001c48:	717b      	strb	r3, [r7, #5]
				gameHID.JoyX = PS4.getAnalogHat(RightHatX) - 128;
 8001c4a:	2102      	movs	r1, #2
 8001c4c:	487d      	ldr	r0, [pc, #500]	; (8001e44 <main+0x33c>)
 8001c4e:	f00c ff64 	bl	800eb1a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001c52:	4603      	mov	r3, r0
 8001c54:	3b80      	subs	r3, #128	; 0x80
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	b25b      	sxtb	r3, r3
 8001c5a:	713b      	strb	r3, [r7, #4]
				gameHID.JoyY = PS4.getAnalogHat(RightHatY) - 128;
 8001c5c:	2103      	movs	r1, #3
 8001c5e:	4879      	ldr	r0, [pc, #484]	; (8001e44 <main+0x33c>)
 8001c60:	f00c ff5b 	bl	800eb1a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001c64:	4603      	mov	r3, r0
 8001c66:	3b80      	subs	r3, #128	; 0x80
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	b25b      	sxtb	r3, r3
 8001c6c:	717b      	strb	r3, [r7, #5]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	2208      	movs	r2, #8
 8001c72:	4619      	mov	r1, r3
 8001c74:	4871      	ldr	r0, [pc, #452]	; (8001e3c <main+0x334>)
 8001c76:	f006 fe37 	bl	80088e8 <USBD_HID_SendReport>

				Serial.print(F("\r\nLeftHatX: "));
 8001c7a:	4973      	ldr	r1, [pc, #460]	; (8001e48 <main+0x340>)
 8001c7c:	486d      	ldr	r0, [pc, #436]	; (8001e34 <main+0x32c>)
 8001c7e:	f7ff f9d9 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(PS4.getAnalogHat(LeftHatX));
 8001c82:	2100      	movs	r1, #0
 8001c84:	486f      	ldr	r0, [pc, #444]	; (8001e44 <main+0x33c>)
 8001c86:	f00c ff48 	bl	800eb1a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	220a      	movs	r2, #10
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4868      	ldr	r0, [pc, #416]	; (8001e34 <main+0x32c>)
 8001c92:	f7ff f9fd 	bl	8001090 <_ZN5Print5printEhi>
				Serial.print(F("\tLeftHatY: "));
 8001c96:	496d      	ldr	r1, [pc, #436]	; (8001e4c <main+0x344>)
 8001c98:	4866      	ldr	r0, [pc, #408]	; (8001e34 <main+0x32c>)
 8001c9a:	f7ff f9cb 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(PS4.getAnalogHat(LeftHatY));
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	4868      	ldr	r0, [pc, #416]	; (8001e44 <main+0x33c>)
 8001ca2:	f00c ff3a 	bl	800eb1a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	220a      	movs	r2, #10
 8001caa:	4619      	mov	r1, r3
 8001cac:	4861      	ldr	r0, [pc, #388]	; (8001e34 <main+0x32c>)
 8001cae:	f7ff f9ef 	bl	8001090 <_ZN5Print5printEhi>
				Serial.print(F("\tRightHatX: "));
 8001cb2:	4967      	ldr	r1, [pc, #412]	; (8001e50 <main+0x348>)
 8001cb4:	485f      	ldr	r0, [pc, #380]	; (8001e34 <main+0x32c>)
 8001cb6:	f7ff f9bd 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(PS4.getAnalogHat(RightHatX));
 8001cba:	2102      	movs	r1, #2
 8001cbc:	4861      	ldr	r0, [pc, #388]	; (8001e44 <main+0x33c>)
 8001cbe:	f00c ff2c 	bl	800eb1a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	220a      	movs	r2, #10
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	485a      	ldr	r0, [pc, #360]	; (8001e34 <main+0x32c>)
 8001cca:	f7ff f9e1 	bl	8001090 <_ZN5Print5printEhi>
				Serial.print(F("\tRightHatY: "));
 8001cce:	4961      	ldr	r1, [pc, #388]	; (8001e54 <main+0x34c>)
 8001cd0:	4858      	ldr	r0, [pc, #352]	; (8001e34 <main+0x32c>)
 8001cd2:	f7ff f9af 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(PS4.getAnalogHat(RightHatY));
 8001cd6:	2103      	movs	r1, #3
 8001cd8:	485a      	ldr	r0, [pc, #360]	; (8001e44 <main+0x33c>)
 8001cda:	f00c ff1e 	bl	800eb1a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	220a      	movs	r2, #10
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4853      	ldr	r0, [pc, #332]	; (8001e34 <main+0x32c>)
 8001ce6:	f7ff f9d3 	bl	8001090 <_ZN5Print5printEhi>
			}

			if (PS4.getAnalogButton(L2) || PS4.getAnalogButton(R2)) { // These are the only analog buttons on the PS4 controller
 8001cea:	2108      	movs	r1, #8
 8001cec:	4855      	ldr	r0, [pc, #340]	; (8001e44 <main+0x33c>)
 8001cee:	f00c fefb 	bl	800eae8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d106      	bne.n	8001d06 <main+0x1fe>
 8001cf8:	2109      	movs	r1, #9
 8001cfa:	4852      	ldr	r0, [pc, #328]	; (8001e44 <main+0x33c>)
 8001cfc:	f00c fef4 	bl	800eae8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <main+0x202>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <main+0x204>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d033      	beq.n	8001d78 <main+0x270>
				gameHID.Joy_LT = PS4.getAnalogButton(L2) - 128;
 8001d10:	2108      	movs	r1, #8
 8001d12:	484c      	ldr	r0, [pc, #304]	; (8001e44 <main+0x33c>)
 8001d14:	f00c fee8 	bl	800eae8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	3b80      	subs	r3, #128	; 0x80
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	b25b      	sxtb	r3, r3
 8001d20:	723b      	strb	r3, [r7, #8]
				gameHID.Joy_RT = PS4.getAnalogButton(R2) - 128;
 8001d22:	2109      	movs	r1, #9
 8001d24:	4847      	ldr	r0, [pc, #284]	; (8001e44 <main+0x33c>)
 8001d26:	f00c fedf 	bl	800eae8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	3b80      	subs	r3, #128	; 0x80
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	b25b      	sxtb	r3, r3
 8001d32:	727b      	strb	r3, [r7, #9]

				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	2208      	movs	r2, #8
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4840      	ldr	r0, [pc, #256]	; (8001e3c <main+0x334>)
 8001d3c:	f006 fdd4 	bl	80088e8 <USBD_HID_SendReport>
				Serial.print(F("\r\nL2: "));
 8001d40:	4945      	ldr	r1, [pc, #276]	; (8001e58 <main+0x350>)
 8001d42:	483c      	ldr	r0, [pc, #240]	; (8001e34 <main+0x32c>)
 8001d44:	f7ff f976 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(PS4.getAnalogButton(L2));
 8001d48:	2108      	movs	r1, #8
 8001d4a:	483e      	ldr	r0, [pc, #248]	; (8001e44 <main+0x33c>)
 8001d4c:	f00c fecc 	bl	800eae8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001d50:	4603      	mov	r3, r0
 8001d52:	220a      	movs	r2, #10
 8001d54:	4619      	mov	r1, r3
 8001d56:	4837      	ldr	r0, [pc, #220]	; (8001e34 <main+0x32c>)
 8001d58:	f7ff f99a 	bl	8001090 <_ZN5Print5printEhi>
				Serial.print(F("\tR2: "));
 8001d5c:	493f      	ldr	r1, [pc, #252]	; (8001e5c <main+0x354>)
 8001d5e:	4835      	ldr	r0, [pc, #212]	; (8001e34 <main+0x32c>)
 8001d60:	f7ff f968 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(PS4.getAnalogButton(R2));
 8001d64:	2109      	movs	r1, #9
 8001d66:	4837      	ldr	r0, [pc, #220]	; (8001e44 <main+0x33c>)
 8001d68:	f00c febe 	bl	800eae8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	220a      	movs	r2, #10
 8001d70:	4619      	mov	r1, r3
 8001d72:	4830      	ldr	r0, [pc, #192]	; (8001e34 <main+0x32c>)
 8001d74:	f7ff f98c 	bl	8001090 <_ZN5Print5printEhi>
			}
			if (PS4.getAnalogButton(L2) != oldL2Value || PS4.getAnalogButton(R2) != oldR2Value) // Only write value if it's different
 8001d78:	2108      	movs	r1, #8
 8001d7a:	4832      	ldr	r0, [pc, #200]	; (8001e44 <main+0x33c>)
 8001d7c:	f00c feb4 	bl	800eae8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461a      	mov	r2, r3
 8001d84:	4b36      	ldr	r3, [pc, #216]	; (8001e60 <main+0x358>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d109      	bne.n	8001da0 <main+0x298>
 8001d8c:	2109      	movs	r1, #9
 8001d8e:	482d      	ldr	r0, [pc, #180]	; (8001e44 <main+0x33c>)
 8001d90:	f00c feaa 	bl	800eae8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001d94:	4603      	mov	r3, r0
 8001d96:	461a      	mov	r2, r3
 8001d98:	4b32      	ldr	r3, [pc, #200]	; (8001e64 <main+0x35c>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d001      	beq.n	8001da4 <main+0x29c>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <main+0x29e>
 8001da4:	2300      	movs	r3, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00f      	beq.n	8001dca <main+0x2c2>
				PS4.setRumbleOn(PS4.getAnalogButton(L2), PS4.getAnalogButton(R2));
 8001daa:	2108      	movs	r1, #8
 8001dac:	4825      	ldr	r0, [pc, #148]	; (8001e44 <main+0x33c>)
 8001dae:	f00c fe9b 	bl	800eae8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001db2:	4603      	mov	r3, r0
 8001db4:	461c      	mov	r4, r3
 8001db6:	2109      	movs	r1, #9
 8001db8:	4822      	ldr	r0, [pc, #136]	; (8001e44 <main+0x33c>)
 8001dba:	f00c fe95 	bl	800eae8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4621      	mov	r1, r4
 8001dc4:	481f      	ldr	r0, [pc, #124]	; (8001e44 <main+0x33c>)
 8001dc6:	f7ff fd5f 	bl	8001888 <_ZN9PS4Parser11setRumbleOnEhh>
			oldL2Value = PS4.getAnalogButton(L2);
 8001dca:	2108      	movs	r1, #8
 8001dcc:	481d      	ldr	r0, [pc, #116]	; (8001e44 <main+0x33c>)
 8001dce:	f00c fe8b 	bl	800eae8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <main+0x358>)
 8001dd8:	701a      	strb	r2, [r3, #0]
			oldR2Value = PS4.getAnalogButton(R2);
 8001dda:	2109      	movs	r1, #9
 8001ddc:	4819      	ldr	r0, [pc, #100]	; (8001e44 <main+0x33c>)
 8001dde:	f00c fe83 	bl	800eae8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001de2:	4603      	mov	r3, r0
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <main+0x35c>)
 8001de8:	701a      	strb	r2, [r3, #0]

			if (PS4.getButtonClick(PS)) {
 8001dea:	2110      	movs	r1, #16
 8001dec:	4815      	ldr	r0, [pc, #84]	; (8001e44 <main+0x33c>)
 8001dee:	f00c fe3b 	bl	800ea68 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d039      	beq.n	8001e6c <main+0x364>
				gameHID.ps4ButtonsTag.button_ps = 1;
 8001df8:	7abb      	ldrb	r3, [r7, #10]
 8001dfa:	f043 0302 	orr.w	r3, r3, #2
 8001dfe:	72bb      	strb	r3, [r7, #10]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	2208      	movs	r2, #8
 8001e04:	4619      	mov	r1, r3
 8001e06:	480d      	ldr	r0, [pc, #52]	; (8001e3c <main+0x334>)
 8001e08:	f006 fd6e 	bl	80088e8 <USBD_HID_SendReport>
				Serial.print(F("\r\nPS"));
 8001e0c:	4916      	ldr	r1, [pc, #88]	; (8001e68 <main+0x360>)
 8001e0e:	4809      	ldr	r0, [pc, #36]	; (8001e34 <main+0x32c>)
 8001e10:	f7ff f910 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
				PS4.disconnect();
 8001e14:	480a      	ldr	r0, [pc, #40]	; (8001e40 <main+0x338>)
 8001e16:	f00b fdfa 	bl	800da0e <_ZN5BTHID10disconnectEv>
 8001e1a:	e6b7      	b.n	8001b8c <main+0x84>
 8001e1c:	200002fc 	.word	0x200002fc
 8001e20:	20000260 	.word	0x20000260
 8001e24:	20000354 	.word	0x20000354
 8001e28:	200002b8 	.word	0x200002b8
 8001e2c:	200003ac 	.word	0x200003ac
 8001e30:	08010c98 	.word	0x08010c98
 8001e34:	20000398 	.word	0x20000398
 8001e38:	08010cac 	.word	0x08010cac
 8001e3c:	20000670 	.word	0x20000670
 8001e40:	20000580 	.word	0x20000580
 8001e44:	200005f8 	.word	0x200005f8
 8001e48:	08010ccc 	.word	0x08010ccc
 8001e4c:	08010cdc 	.word	0x08010cdc
 8001e50:	08010ce8 	.word	0x08010ce8
 8001e54:	08010cf8 	.word	0x08010cf8
 8001e58:	08010d08 	.word	0x08010d08
 8001e5c:	08010d10 	.word	0x08010d10
 8001e60:	2000064a 	.word	0x2000064a
 8001e64:	2000064b 	.word	0x2000064b
 8001e68:	08010d18 	.word	0x08010d18
			} else {
				if (PS4.getButtonClick(TRIANGLE)) {
 8001e6c:	210c      	movs	r1, #12
 8001e6e:	48c9      	ldr	r0, [pc, #804]	; (8002194 <main+0x68c>)
 8001e70:	f00c fdfa 	bl	800ea68 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d011      	beq.n	8001e9e <main+0x396>
					gameHID.ps4ButtonsTag.button_triangle = 1;
 8001e7a:	7afb      	ldrb	r3, [r7, #11]
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	72fb      	strb	r3, [r7, #11]
					USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	2208      	movs	r2, #8
 8001e86:	4619      	mov	r1, r3
 8001e88:	48c3      	ldr	r0, [pc, #780]	; (8002198 <main+0x690>)
 8001e8a:	f006 fd2d 	bl	80088e8 <USBD_HID_SendReport>
					Serial.print(F("\r\nTraingle"));
 8001e8e:	49c3      	ldr	r1, [pc, #780]	; (800219c <main+0x694>)
 8001e90:	48c3      	ldr	r0, [pc, #780]	; (80021a0 <main+0x698>)
 8001e92:	f7ff f8cf 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
					PS4.setRumbleOn(RumbleLow);
 8001e96:	2120      	movs	r1, #32
 8001e98:	48be      	ldr	r0, [pc, #760]	; (8002194 <main+0x68c>)
 8001e9a:	f7ff fcdd 	bl	8001858 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>
				}
				if (PS4.getButtonClick(CIRCLE)) {
 8001e9e:	210d      	movs	r1, #13
 8001ea0:	48bc      	ldr	r0, [pc, #752]	; (8002194 <main+0x68c>)
 8001ea2:	f00c fde1 	bl	800ea68 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d011      	beq.n	8001ed0 <main+0x3c8>
					gameHID.ps4ButtonsTag.button_circle = 1;
 8001eac:	7abb      	ldrb	r3, [r7, #10]
 8001eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb2:	72bb      	strb	r3, [r7, #10]
					USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	2208      	movs	r2, #8
 8001eb8:	4619      	mov	r1, r3
 8001eba:	48b7      	ldr	r0, [pc, #732]	; (8002198 <main+0x690>)
 8001ebc:	f006 fd14 	bl	80088e8 <USBD_HID_SendReport>
					Serial.print(F("\r\nCircle"));
 8001ec0:	49b8      	ldr	r1, [pc, #736]	; (80021a4 <main+0x69c>)
 8001ec2:	48b7      	ldr	r0, [pc, #732]	; (80021a0 <main+0x698>)
 8001ec4:	f7ff f8b6 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
					PS4.setRumbleOn(RumbleHigh);
 8001ec8:	2110      	movs	r1, #16
 8001eca:	48b2      	ldr	r0, [pc, #712]	; (8002194 <main+0x68c>)
 8001ecc:	f7ff fcc4 	bl	8001858 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>
				}
				if (PS4.getButtonClick(CROSS)) {
 8001ed0:	210e      	movs	r1, #14
 8001ed2:	48b0      	ldr	r0, [pc, #704]	; (8002194 <main+0x68c>)
 8001ed4:	f00c fdc8 	bl	800ea68 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d012      	beq.n	8001f04 <main+0x3fc>
					gameHID.ps4ButtonsTag.button_cross = 1;
 8001ede:	7abb      	ldrb	r3, [r7, #10]
 8001ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ee4:	72bb      	strb	r3, [r7, #10]
					USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	2208      	movs	r2, #8
 8001eea:	4619      	mov	r1, r3
 8001eec:	48aa      	ldr	r0, [pc, #680]	; (8002198 <main+0x690>)
 8001eee:	f006 fcfb 	bl	80088e8 <USBD_HID_SendReport>
					Serial.print(F("\r\nCross"));
 8001ef2:	49ad      	ldr	r1, [pc, #692]	; (80021a8 <main+0x6a0>)
 8001ef4:	48aa      	ldr	r0, [pc, #680]	; (80021a0 <main+0x698>)
 8001ef6:	f7ff f89d 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
					PS4.setLedFlash(10, 10); // Set it to blink rapidly
 8001efa:	220a      	movs	r2, #10
 8001efc:	210a      	movs	r1, #10
 8001efe:	48a5      	ldr	r0, [pc, #660]	; (8002194 <main+0x68c>)
 8001f00:	f7ff fd13 	bl	800192a <_ZN9PS4Parser11setLedFlashEhh>
				}
				if (PS4.getButtonClick(SQUARE)) {
 8001f04:	210f      	movs	r1, #15
 8001f06:	48a3      	ldr	r0, [pc, #652]	; (8002194 <main+0x68c>)
 8001f08:	f00c fdae 	bl	800ea68 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d012      	beq.n	8001f38 <main+0x430>
					gameHID.ps4ButtonsTag.button_square = 1;
 8001f12:	7afb      	ldrb	r3, [r7, #11]
 8001f14:	f043 0302 	orr.w	r3, r3, #2
 8001f18:	72fb      	strb	r3, [r7, #11]
					USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8001f1a:	1d3b      	adds	r3, r7, #4
 8001f1c:	2208      	movs	r2, #8
 8001f1e:	4619      	mov	r1, r3
 8001f20:	489d      	ldr	r0, [pc, #628]	; (8002198 <main+0x690>)
 8001f22:	f006 fce1 	bl	80088e8 <USBD_HID_SendReport>
					Serial.print(F("\r\nSquare"));
 8001f26:	49a1      	ldr	r1, [pc, #644]	; (80021ac <main+0x6a4>)
 8001f28:	489d      	ldr	r0, [pc, #628]	; (80021a0 <main+0x698>)
 8001f2a:	f7ff f883 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
					PS4.setLedFlash(0, 0); // Turn off blinking
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2100      	movs	r1, #0
 8001f32:	4898      	ldr	r0, [pc, #608]	; (8002194 <main+0x68c>)
 8001f34:	f7ff fcf9 	bl	800192a <_ZN9PS4Parser11setLedFlashEhh>
				}

				if (PS4.getButtonClick(UP)) {
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4896      	ldr	r0, [pc, #600]	; (8002194 <main+0x68c>)
 8001f3c:	f00c fd94 	bl	800ea68 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d012      	beq.n	8001f6c <main+0x464>
					gameHID.ps4ButtonsTag.button_dpad_up = 1;
 8001f46:	7afb      	ldrb	r3, [r7, #11]
 8001f48:	f043 0304 	orr.w	r3, r3, #4
 8001f4c:	72fb      	strb	r3, [r7, #11]
					USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	2208      	movs	r2, #8
 8001f52:	4619      	mov	r1, r3
 8001f54:	4890      	ldr	r0, [pc, #576]	; (8002198 <main+0x690>)
 8001f56:	f006 fcc7 	bl	80088e8 <USBD_HID_SendReport>
					Serial.print(F("\r\nUp"));
 8001f5a:	4995      	ldr	r1, [pc, #596]	; (80021b0 <main+0x6a8>)
 8001f5c:	4890      	ldr	r0, [pc, #576]	; (80021a0 <main+0x698>)
 8001f5e:	f7ff f869 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
					PS4.setLed(Red);
 8001f62:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8001f66:	488b      	ldr	r0, [pc, #556]	; (8002194 <main+0x68c>)
 8001f68:	f7ff fccb 	bl	8001902 <_ZN9PS4Parser6setLedE10ColorsEnum>
				}
				if (PS4.getButtonClick(RIGHT)) {
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	4889      	ldr	r0, [pc, #548]	; (8002194 <main+0x68c>)
 8001f70:	f00c fd7a 	bl	800ea68 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d011      	beq.n	8001f9e <main+0x496>
					gameHID.ps4ButtonsTag.button_dpad_right = 1;
 8001f7a:	7afb      	ldrb	r3, [r7, #11]
 8001f7c:	f043 0308 	orr.w	r3, r3, #8
 8001f80:	72fb      	strb	r3, [r7, #11]
					USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8001f82:	1d3b      	adds	r3, r7, #4
 8001f84:	2208      	movs	r2, #8
 8001f86:	4619      	mov	r1, r3
 8001f88:	4883      	ldr	r0, [pc, #524]	; (8002198 <main+0x690>)
 8001f8a:	f006 fcad 	bl	80088e8 <USBD_HID_SendReport>
					Serial.print(F("\r\nRight"));
 8001f8e:	4989      	ldr	r1, [pc, #548]	; (80021b4 <main+0x6ac>)
 8001f90:	4883      	ldr	r0, [pc, #524]	; (80021a0 <main+0x698>)
 8001f92:	f7ff f84f 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
					PS4.setLed(Blue);
 8001f96:	21ff      	movs	r1, #255	; 0xff
 8001f98:	487e      	ldr	r0, [pc, #504]	; (8002194 <main+0x68c>)
 8001f9a:	f7ff fcb2 	bl	8001902 <_ZN9PS4Parser6setLedE10ColorsEnum>
				}
				if (PS4.getButtonClick(DOWN)) {
 8001f9e:	2102      	movs	r1, #2
 8001fa0:	487c      	ldr	r0, [pc, #496]	; (8002194 <main+0x68c>)
 8001fa2:	f00c fd61 	bl	800ea68 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d011      	beq.n	8001fd0 <main+0x4c8>
					gameHID.ps4ButtonsTag.button_dpad_down = 1;
 8001fac:	7afb      	ldrb	r3, [r7, #11]
 8001fae:	f043 0320 	orr.w	r3, r3, #32
 8001fb2:	72fb      	strb	r3, [r7, #11]
					USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	2208      	movs	r2, #8
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4877      	ldr	r0, [pc, #476]	; (8002198 <main+0x690>)
 8001fbc:	f006 fc94 	bl	80088e8 <USBD_HID_SendReport>
					Serial.print(F("\r\nDown"));
 8001fc0:	497d      	ldr	r1, [pc, #500]	; (80021b8 <main+0x6b0>)
 8001fc2:	4877      	ldr	r0, [pc, #476]	; (80021a0 <main+0x698>)
 8001fc4:	f7ff f836 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
					PS4.setLed(Yellow);
 8001fc8:	497c      	ldr	r1, [pc, #496]	; (80021bc <main+0x6b4>)
 8001fca:	4872      	ldr	r0, [pc, #456]	; (8002194 <main+0x68c>)
 8001fcc:	f7ff fc99 	bl	8001902 <_ZN9PS4Parser6setLedE10ColorsEnum>
				}
				if (PS4.getButtonClick(LEFT)) {
 8001fd0:	2103      	movs	r1, #3
 8001fd2:	4870      	ldr	r0, [pc, #448]	; (8002194 <main+0x68c>)
 8001fd4:	f00c fd48 	bl	800ea68 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d012      	beq.n	8002004 <main+0x4fc>
					gameHID.ps4ButtonsTag.button_dpad_left = 1;
 8001fde:	7afb      	ldrb	r3, [r7, #11]
 8001fe0:	f043 0310 	orr.w	r3, r3, #16
 8001fe4:	72fb      	strb	r3, [r7, #11]
					USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8001fe6:	1d3b      	adds	r3, r7, #4
 8001fe8:	2208      	movs	r2, #8
 8001fea:	4619      	mov	r1, r3
 8001fec:	486a      	ldr	r0, [pc, #424]	; (8002198 <main+0x690>)
 8001fee:	f006 fc7b 	bl	80088e8 <USBD_HID_SendReport>
					Serial.print(F("\r\nLeft"));
 8001ff2:	4973      	ldr	r1, [pc, #460]	; (80021c0 <main+0x6b8>)
 8001ff4:	486a      	ldr	r0, [pc, #424]	; (80021a0 <main+0x698>)
 8001ff6:	f7ff f81d 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
					PS4.setLed(Green);
 8001ffa:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001ffe:	4865      	ldr	r0, [pc, #404]	; (8002194 <main+0x68c>)
 8002000:	f7ff fc7f 	bl	8001902 <_ZN9PS4Parser6setLedE10ColorsEnum>
				}

				if (PS4.getButtonClick(L1)) {
 8002004:	210a      	movs	r1, #10
 8002006:	4863      	ldr	r0, [pc, #396]	; (8002194 <main+0x68c>)
 8002008:	f00c fd2e 	bl	800ea68 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00d      	beq.n	800202e <main+0x526>
					gameHID.ps4ButtonsTag.button_left_trigger = 1;
 8002012:	7abb      	ldrb	r3, [r7, #10]
 8002014:	f043 0320 	orr.w	r3, r3, #32
 8002018:	72bb      	strb	r3, [r7, #10]
					USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	2208      	movs	r2, #8
 800201e:	4619      	mov	r1, r3
 8002020:	485d      	ldr	r0, [pc, #372]	; (8002198 <main+0x690>)
 8002022:	f006 fc61 	bl	80088e8 <USBD_HID_SendReport>
					Serial.print(F("\r\nL1"));
 8002026:	4967      	ldr	r1, [pc, #412]	; (80021c4 <main+0x6bc>)
 8002028:	485d      	ldr	r0, [pc, #372]	; (80021a0 <main+0x698>)
 800202a:	f7ff f803 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
				}
				if (PS4.getButtonClick(L3)) {
 800202e:	2106      	movs	r1, #6
 8002030:	4858      	ldr	r0, [pc, #352]	; (8002194 <main+0x68c>)
 8002032:	f00c fd19 	bl	800ea68 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00d      	beq.n	8002058 <main+0x550>
					gameHID.ps4ButtonsTag.button_left_thumb = 1;
 800203c:	7afb      	ldrb	r3, [r7, #11]
 800203e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002042:	72fb      	strb	r3, [r7, #11]
					USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	2208      	movs	r2, #8
 8002048:	4619      	mov	r1, r3
 800204a:	4853      	ldr	r0, [pc, #332]	; (8002198 <main+0x690>)
 800204c:	f006 fc4c 	bl	80088e8 <USBD_HID_SendReport>
					Serial.print(F("\r\nL3"));
 8002050:	495d      	ldr	r1, [pc, #372]	; (80021c8 <main+0x6c0>)
 8002052:	4853      	ldr	r0, [pc, #332]	; (80021a0 <main+0x698>)
 8002054:	f7fe ffee 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
				}
				if (PS4.getButtonClick(R1)) {
 8002058:	210b      	movs	r1, #11
 800205a:	484e      	ldr	r0, [pc, #312]	; (8002194 <main+0x68c>)
 800205c:	f00c fd04 	bl	800ea68 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00d      	beq.n	8002082 <main+0x57a>
					gameHID.ps4ButtonsTag.button_right_trigger = 1;
 8002066:	7abb      	ldrb	r3, [r7, #10]
 8002068:	f043 0310 	orr.w	r3, r3, #16
 800206c:	72bb      	strb	r3, [r7, #10]
					USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 800206e:	1d3b      	adds	r3, r7, #4
 8002070:	2208      	movs	r2, #8
 8002072:	4619      	mov	r1, r3
 8002074:	4848      	ldr	r0, [pc, #288]	; (8002198 <main+0x690>)
 8002076:	f006 fc37 	bl	80088e8 <USBD_HID_SendReport>
					Serial.print(F("\r\nR1"));
 800207a:	4954      	ldr	r1, [pc, #336]	; (80021cc <main+0x6c4>)
 800207c:	4848      	ldr	r0, [pc, #288]	; (80021a0 <main+0x698>)
 800207e:	f7fe ffd9 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
				}
				if (PS4.getButtonClick(R3)) {
 8002082:	2107      	movs	r1, #7
 8002084:	4843      	ldr	r0, [pc, #268]	; (8002194 <main+0x68c>)
 8002086:	f00c fcef 	bl	800ea68 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00d      	beq.n	80020ac <main+0x5a4>
					gameHID.ps4ButtonsTag.button_right_thumb = 1;
 8002090:	7afb      	ldrb	r3, [r7, #11]
 8002092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002096:	72fb      	strb	r3, [r7, #11]
					USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8002098:	1d3b      	adds	r3, r7, #4
 800209a:	2208      	movs	r2, #8
 800209c:	4619      	mov	r1, r3
 800209e:	483e      	ldr	r0, [pc, #248]	; (8002198 <main+0x690>)
 80020a0:	f006 fc22 	bl	80088e8 <USBD_HID_SendReport>
					Serial.print(F("\r\nR3"));
 80020a4:	494a      	ldr	r1, [pc, #296]	; (80021d0 <main+0x6c8>)
 80020a6:	483e      	ldr	r0, [pc, #248]	; (80021a0 <main+0x698>)
 80020a8:	f7fe ffc4 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
				}

				if (PS4.getButtonClick(SHARE)) {
 80020ac:	2104      	movs	r1, #4
 80020ae:	4839      	ldr	r0, [pc, #228]	; (8002194 <main+0x68c>)
 80020b0:	f00c fcda 	bl	800ea68 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d009      	beq.n	80020ce <main+0x5c6>
					gameHID.ps4ButtonsTag.button_share = 1;
 80020ba:	7abb      	ldrb	r3, [r7, #10]
 80020bc:	f043 0308 	orr.w	r3, r3, #8
 80020c0:	72bb      	strb	r3, [r7, #10]
					USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	2208      	movs	r2, #8
 80020c6:	4619      	mov	r1, r3
 80020c8:	4833      	ldr	r0, [pc, #204]	; (8002198 <main+0x690>)
 80020ca:	f006 fc0d 	bl	80088e8 <USBD_HID_SendReport>
				}
					Serial.print(F("\r\nShare"));
 80020ce:	4941      	ldr	r1, [pc, #260]	; (80021d4 <main+0x6cc>)
 80020d0:	4833      	ldr	r0, [pc, #204]	; (80021a0 <main+0x698>)
 80020d2:	f7fe ffaf 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
				if (PS4.getButtonClick(OPTIONS)) {
 80020d6:	2105      	movs	r1, #5
 80020d8:	482e      	ldr	r0, [pc, #184]	; (8002194 <main+0x68c>)
 80020da:	f00c fcc5 	bl	800ea68 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d014      	beq.n	800210e <main+0x606>
					gameHID.ps4ButtonsTag.button_start = 1;
 80020e4:	7abb      	ldrb	r3, [r7, #10]
 80020e6:	f043 0304 	orr.w	r3, r3, #4
 80020ea:	72bb      	strb	r3, [r7, #10]
					USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 80020ec:	1d3b      	adds	r3, r7, #4
 80020ee:	2208      	movs	r2, #8
 80020f0:	4619      	mov	r1, r3
 80020f2:	4829      	ldr	r0, [pc, #164]	; (8002198 <main+0x690>)
 80020f4:	f006 fbf8 	bl	80088e8 <USBD_HID_SendReport>
					Serial.print(F("\r\nOptions"));
 80020f8:	4937      	ldr	r1, [pc, #220]	; (80021d8 <main+0x6d0>)
 80020fa:	4829      	ldr	r0, [pc, #164]	; (80021a0 <main+0x698>)
 80020fc:	f7fe ff9a 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
					printAngle = !printAngle;
 8002100:	4b36      	ldr	r3, [pc, #216]	; (80021dc <main+0x6d4>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	f083 0301 	eor.w	r3, r3, #1
 8002108:	b2da      	uxtb	r2, r3
 800210a:	4b34      	ldr	r3, [pc, #208]	; (80021dc <main+0x6d4>)
 800210c:	701a      	strb	r2, [r3, #0]
				}
				if (PS4.getButtonClick(TOUCHPAD)) {
 800210e:	2111      	movs	r1, #17
 8002110:	4820      	ldr	r0, [pc, #128]	; (8002194 <main+0x68c>)
 8002112:	f00c fca9 	bl	800ea68 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00a      	beq.n	8002132 <main+0x62a>
					Serial.print(F("\r\nTouchpad"));
 800211c:	4930      	ldr	r1, [pc, #192]	; (80021e0 <main+0x6d8>)
 800211e:	4820      	ldr	r0, [pc, #128]	; (80021a0 <main+0x698>)
 8002120:	f7fe ff88 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
					printTouch = !printTouch;
 8002124:	4b2f      	ldr	r3, [pc, #188]	; (80021e4 <main+0x6dc>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	f083 0301 	eor.w	r3, r3, #1
 800212c:	b2da      	uxtb	r2, r3
 800212e:	4b2d      	ldr	r3, [pc, #180]	; (80021e4 <main+0x6dc>)
 8002130:	701a      	strb	r2, [r3, #0]
				}

				if (printAngle) { // Print angle calculated using the accelerometer only
 8002132:	4b2a      	ldr	r3, [pc, #168]	; (80021dc <main+0x6d4>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d029      	beq.n	800218e <main+0x686>
					Serial.print("\r\nPitch: "); // As I have set "-specs=nano.specs" in the linker flags, printf does not support printing floating point number
 800213a:	492b      	ldr	r1, [pc, #172]	; (80021e8 <main+0x6e0>)
 800213c:	4818      	ldr	r0, [pc, #96]	; (80021a0 <main+0x698>)
 800213e:	f7fe ff87 	bl	8001050 <_ZN5Print5printEPKc>
					Serial.print(PS4.getAngle(Pitch));
 8002142:	2101      	movs	r1, #1
 8002144:	4813      	ldr	r0, [pc, #76]	; (8002194 <main+0x68c>)
 8002146:	f7ff fb0f 	bl	8001768 <_ZN9PS4Parser8getAngleE9AngleEnum>
 800214a:	ee10 3a10 	vmov	r3, s0
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe f9c6 	bl	80004e0 <__aeabi_f2d>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	2102      	movs	r1, #2
 800215a:	ec43 2b10 	vmov	d0, r2, r3
 800215e:	4810      	ldr	r0, [pc, #64]	; (80021a0 <main+0x698>)
 8002160:	f7ff f819 	bl	8001196 <_ZN5Print5printEdi>
					Serial.print("\tRoll: ");
 8002164:	4921      	ldr	r1, [pc, #132]	; (80021ec <main+0x6e4>)
 8002166:	480e      	ldr	r0, [pc, #56]	; (80021a0 <main+0x698>)
 8002168:	f7fe ff72 	bl	8001050 <_ZN5Print5printEPKc>
					Serial.print(PS4.getAngle(Roll));
 800216c:	2102      	movs	r1, #2
 800216e:	4809      	ldr	r0, [pc, #36]	; (8002194 <main+0x68c>)
 8002170:	f7ff fafa 	bl	8001768 <_ZN9PS4Parser8getAngleE9AngleEnum>
 8002174:	ee10 3a10 	vmov	r3, s0
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe f9b1 	bl	80004e0 <__aeabi_f2d>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	2102      	movs	r1, #2
 8002184:	ec43 2b10 	vmov	d0, r2, r3
 8002188:	4805      	ldr	r0, [pc, #20]	; (80021a0 <main+0x698>)
 800218a:	f7ff f804 	bl	8001196 <_ZN5Print5printEdi>
				}

				if (printTouch) { // Print the x, y coordinates of the touchpad
 800218e:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <main+0x6dc>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	e02d      	b.n	80021f0 <main+0x6e8>
 8002194:	200005f8 	.word	0x200005f8
 8002198:	20000670 	.word	0x20000670
 800219c:	08010d20 	.word	0x08010d20
 80021a0:	20000398 	.word	0x20000398
 80021a4:	08010d2c 	.word	0x08010d2c
 80021a8:	08010d38 	.word	0x08010d38
 80021ac:	08010d40 	.word	0x08010d40
 80021b0:	08010d4c 	.word	0x08010d4c
 80021b4:	08010d54 	.word	0x08010d54
 80021b8:	08010d5c 	.word	0x08010d5c
 80021bc:	00ffeb04 	.word	0x00ffeb04
 80021c0:	08010d64 	.word	0x08010d64
 80021c4:	08010d6c 	.word	0x08010d6c
 80021c8:	08010d74 	.word	0x08010d74
 80021cc:	08010d7c 	.word	0x08010d7c
 80021d0:	08010d84 	.word	0x08010d84
 80021d4:	08010d8c 	.word	0x08010d8c
 80021d8:	08010d94 	.word	0x08010d94
 80021dc:	20000648 	.word	0x20000648
 80021e0:	08010da0 	.word	0x08010da0
 80021e4:	20000649 	.word	0x20000649
 80021e8:	08010dac 	.word	0x08010dac
 80021ec:	08010db8 	.word	0x08010db8
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f43f accb 	beq.w	8001b8c <main+0x84>
					if (PS4.isTouching(0) || PS4.isTouching(1)) // Print newline and carriage return if any of the fingers are touching the touchpad
 80021f6:	2200      	movs	r2, #0
 80021f8:	2100      	movs	r1, #0
 80021fa:	4843      	ldr	r0, [pc, #268]	; (8002308 <main+0x800>)
 80021fc:	f7ff fa94 	bl	8001728 <_ZN9PS4Parser10isTouchingEhh>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d107      	bne.n	8002216 <main+0x70e>
 8002206:	2200      	movs	r2, #0
 8002208:	2101      	movs	r1, #1
 800220a:	483f      	ldr	r0, [pc, #252]	; (8002308 <main+0x800>)
 800220c:	f7ff fa8c 	bl	8001728 <_ZN9PS4Parser10isTouchingEhh>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <main+0x712>
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <main+0x714>
 800221a:	2300      	movs	r3, #0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <main+0x720>
						Serial.print(F("\r\n"));
 8002220:	493a      	ldr	r1, [pc, #232]	; (800230c <main+0x804>)
 8002222:	483b      	ldr	r0, [pc, #236]	; (8002310 <main+0x808>)
 8002224:	f7fe ff06 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
					for (uint8_t i = 0; i < 2; i++) { // The touchpad track two fingers
 8002228:	2300      	movs	r3, #0
 800222a:	73fb      	strb	r3, [r7, #15]
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	2b01      	cmp	r3, #1
 8002230:	f63f acac 	bhi.w	8001b8c <main+0x84>
						if (PS4.isTouching(i)) { // Print the position of the finger if it is touching the touchpad
 8002234:	7bfb      	ldrb	r3, [r7, #15]
 8002236:	2200      	movs	r2, #0
 8002238:	4619      	mov	r1, r3
 800223a:	4833      	ldr	r0, [pc, #204]	; (8002308 <main+0x800>)
 800223c:	f7ff fa74 	bl	8001728 <_ZN9PS4Parser10isTouchingEhh>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d039      	beq.n	80022ba <main+0x7b2>
							Serial.print(F("X")); Serial.print(i + 1); Serial.print(F(": "));
 8002246:	4933      	ldr	r1, [pc, #204]	; (8002314 <main+0x80c>)
 8002248:	4831      	ldr	r0, [pc, #196]	; (8002310 <main+0x808>)
 800224a:	f7fe fef3 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
 800224e:	7bfb      	ldrb	r3, [r7, #15]
 8002250:	3301      	adds	r3, #1
 8002252:	220a      	movs	r2, #10
 8002254:	4619      	mov	r1, r3
 8002256:	482e      	ldr	r0, [pc, #184]	; (8002310 <main+0x808>)
 8002258:	f7fe ff2c 	bl	80010b4 <_ZN5Print5printEii>
 800225c:	492e      	ldr	r1, [pc, #184]	; (8002318 <main+0x810>)
 800225e:	482c      	ldr	r0, [pc, #176]	; (8002310 <main+0x808>)
 8002260:	f7fe fee8 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
							Serial.print(PS4.getX(i));
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	2200      	movs	r2, #0
 8002268:	4619      	mov	r1, r3
 800226a:	4827      	ldr	r0, [pc, #156]	; (8002308 <main+0x800>)
 800226c:	f7ff fa1e 	bl	80016ac <_ZN9PS4Parser4getXEhh>
 8002270:	4603      	mov	r3, r0
 8002272:	220a      	movs	r2, #10
 8002274:	4619      	mov	r1, r3
 8002276:	4826      	ldr	r0, [pc, #152]	; (8002310 <main+0x808>)
 8002278:	f7fe ff1c 	bl	80010b4 <_ZN5Print5printEii>
							Serial.print(F("\tY")); Serial.print(i + 1); Serial.print(F(": "));
 800227c:	4927      	ldr	r1, [pc, #156]	; (800231c <main+0x814>)
 800227e:	4824      	ldr	r0, [pc, #144]	; (8002310 <main+0x808>)
 8002280:	f7fe fed8 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	3301      	adds	r3, #1
 8002288:	220a      	movs	r2, #10
 800228a:	4619      	mov	r1, r3
 800228c:	4820      	ldr	r0, [pc, #128]	; (8002310 <main+0x808>)
 800228e:	f7fe ff11 	bl	80010b4 <_ZN5Print5printEii>
 8002292:	4921      	ldr	r1, [pc, #132]	; (8002318 <main+0x810>)
 8002294:	481e      	ldr	r0, [pc, #120]	; (8002310 <main+0x808>)
 8002296:	f7fe fecd 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
							Serial.print(PS4.getY(i));
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	2200      	movs	r2, #0
 800229e:	4619      	mov	r1, r3
 80022a0:	4819      	ldr	r0, [pc, #100]	; (8002308 <main+0x800>)
 80022a2:	f7ff fa22 	bl	80016ea <_ZN9PS4Parser4getYEhh>
 80022a6:	4603      	mov	r3, r0
 80022a8:	220a      	movs	r2, #10
 80022aa:	4619      	mov	r1, r3
 80022ac:	4818      	ldr	r0, [pc, #96]	; (8002310 <main+0x808>)
 80022ae:	f7fe ff01 	bl	80010b4 <_ZN5Print5printEii>
							Serial.print(F("\t"));
 80022b2:	491b      	ldr	r1, [pc, #108]	; (8002320 <main+0x818>)
 80022b4:	4816      	ldr	r0, [pc, #88]	; (8002310 <main+0x808>)
 80022b6:	f7fe febd 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
					for (uint8_t i = 0; i < 2; i++) { // The touchpad track two fingers
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	3301      	adds	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
 80022c0:	e7b4      	b.n	800222c <main+0x724>
					}
				}


			}
		} else if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 80022c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022c6:	4817      	ldr	r0, [pc, #92]	; (8002324 <main+0x81c>)
 80022c8:	f001 fada 	bl	8003880 <HAL_GPIO_ReadPin>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	bf0c      	ite	eq
 80022d2:	2301      	moveq	r3, #1
 80022d4:	2300      	movne	r3, #0
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d011      	beq.n	8002300 <main+0x7f8>
		    if (!buttonPressed) {
 80022dc:	4b12      	ldr	r3, [pc, #72]	; (8002328 <main+0x820>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	f083 0301 	eor.w	r3, r3, #1
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d006      	beq.n	80022f8 <main+0x7f0>
		    	Serial.print(F("\r\nButton Pressed"));
 80022ea:	4910      	ldr	r1, [pc, #64]	; (800232c <main+0x824>)
 80022ec:	4808      	ldr	r0, [pc, #32]	; (8002310 <main+0x808>)
 80022ee:	f7fe fea1 	bl	8001034 <_ZN5Print5printEPK19__FlashStringHelper>
		        PS4.pair(); // Start paring routine if user button was just pressed
 80022f2:	480f      	ldr	r0, [pc, #60]	; (8002330 <main+0x828>)
 80022f4:	f7ff f995 	bl	8001622 <_ZN5BTHID4pairEv>
		    }
		    buttonPressed = true;
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <main+0x820>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]
 80022fe:	e445      	b.n	8001b8c <main+0x84>
		} else
		    buttonPressed = false;
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <main+0x820>)
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
  }
 8002306:	e441      	b.n	8001b8c <main+0x84>
 8002308:	200005f8 	.word	0x200005f8
 800230c:	08010dc0 	.word	0x08010dc0
 8002310:	20000398 	.word	0x20000398
 8002314:	08010dc4 	.word	0x08010dc4
 8002318:	08010dc8 	.word	0x08010dc8
 800231c:	08010dcc 	.word	0x08010dcc
 8002320:	08010dd0 	.word	0x08010dd0
 8002324:	40020800 	.word	0x40020800
 8002328:	2000064c 	.word	0x2000064c
 800232c:	08010dd4 	.word	0x08010dd4
 8002330:	20000580 	.word	0x20000580

08002334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b0ac      	sub	sp, #176	; 0xb0
 8002338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800233a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800233e:	2234      	movs	r2, #52	; 0x34
 8002340:	2100      	movs	r1, #0
 8002342:	4618      	mov	r0, r3
 8002344:	f00e fc34 	bl	8010bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002348:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002358:	f107 030c 	add.w	r3, r7, #12
 800235c:	225c      	movs	r2, #92	; 0x5c
 800235e:	2100      	movs	r1, #0
 8002360:	4618      	mov	r0, r3
 8002362:	f00e fc25 	bl	8010bb0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	4b49      	ldr	r3, [pc, #292]	; (8002490 <SystemClock_Config+0x15c>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	4a48      	ldr	r2, [pc, #288]	; (8002490 <SystemClock_Config+0x15c>)
 8002370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002374:	6413      	str	r3, [r2, #64]	; 0x40
 8002376:	4b46      	ldr	r3, [pc, #280]	; (8002490 <SystemClock_Config+0x15c>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002382:	2300      	movs	r3, #0
 8002384:	607b      	str	r3, [r7, #4]
 8002386:	4b43      	ldr	r3, [pc, #268]	; (8002494 <SystemClock_Config+0x160>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800238e:	4a41      	ldr	r2, [pc, #260]	; (8002494 <SystemClock_Config+0x160>)
 8002390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	4b3f      	ldr	r3, [pc, #252]	; (8002494 <SystemClock_Config+0x160>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800239e:	607b      	str	r3, [r7, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023a2:	2301      	movs	r3, #1
 80023a4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023ae:	2302      	movs	r3, #2
 80023b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 80023bc:	2304      	movs	r3, #4
 80023be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80023c2:	2348      	movs	r3, #72	; 0x48
 80023c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023c8:	2302      	movs	r3, #2
 80023ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80023ce:	2303      	movs	r3, #3
 80023d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80023d4:	2302      	movs	r3, #2
 80023d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023da:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80023de:	4618      	mov	r0, r3
 80023e0:	f003 fa2c 	bl	800583c <HAL_RCC_OscConfig>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	bf14      	ite	ne
 80023ea:	2301      	movne	r3, #1
 80023ec:	2300      	moveq	r3, #0
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80023f4:	f000 f972 	bl	80026dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023f8:	230f      	movs	r3, #15
 80023fa:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023fc:	2302      	movs	r3, #2
 80023fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002400:	2300      	movs	r3, #0
 8002402:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002408:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800240a:	2300      	movs	r3, #0
 800240c:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800240e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002412:	2102      	movs	r1, #2
 8002414:	4618      	mov	r0, r3
 8002416:	f002 fc1b 	bl	8004c50 <HAL_RCC_ClockConfig>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	bf14      	ite	ne
 8002420:	2301      	movne	r3, #1
 8002422:	2300      	moveq	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800242a:	f000 f957 	bl	80026dc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800242e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002432:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8002434:	2300      	movs	r3, #0
 8002436:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002438:	f107 030c 	add.w	r3, r7, #12
 800243c:	4618      	mov	r0, r3
 800243e:	f002 fd21 	bl	8004e84 <HAL_RCCEx_PeriphCLKConfig>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	bf14      	ite	ne
 8002448:	2301      	movne	r3, #1
 800244a:	2300      	moveq	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <SystemClock_Config+0x122>
  {
    Error_Handler();
 8002452:	f000 f943 	bl	80026dc <Error_Handler>
  }
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_10);
 8002456:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800245a:	210a      	movs	r1, #10
 800245c:	4618      	mov	r0, r3
 800245e:	f002 fbf7 	bl	8004c50 <HAL_RCC_ClockConfig>

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000000); // NOTE: Edited, so it increments every us
 8002462:	f002 fcdb 	bl	8004e1c <HAL_RCC_GetHCLKFreq>
 8002466:	4603      	mov	r3, r0
 8002468:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <SystemClock_Config+0x164>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	0c9b      	lsrs	r3, r3, #18
 8002470:	4618      	mov	r0, r3
 8002472:	f001 f848 	bl	8003506 <HAL_SYSTICK_Config>

	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002476:	2004      	movs	r0, #4
 8002478:	f001 f852 	bl	8003520 <HAL_SYSTICK_CLKSourceConfig>

	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0); // SysTick_IRQn interrupt configuration
 800247c:	2200      	movs	r2, #0
 800247e:	2100      	movs	r1, #0
 8002480:	f04f 30ff 	mov.w	r0, #4294967295
 8002484:	f001 f815 	bl	80034b2 <HAL_NVIC_SetPriority>

}
 8002488:	bf00      	nop
 800248a:	37b0      	adds	r7, #176	; 0xb0
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40023800 	.word	0x40023800
 8002494:	40007000 	.word	0x40007000
 8002498:	431bde83 	.word	0x431bde83

0800249c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024a2:	463b      	mov	r3, r7
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80024ae:	4b26      	ldr	r3, [pc, #152]	; (8002548 <_ZL12MX_ADC1_Initv+0xac>)
 80024b0:	4a26      	ldr	r2, [pc, #152]	; (800254c <_ZL12MX_ADC1_Initv+0xb0>)
 80024b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80024b4:	4b24      	ldr	r3, [pc, #144]	; (8002548 <_ZL12MX_ADC1_Initv+0xac>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80024ba:	4b23      	ldr	r3, [pc, #140]	; (8002548 <_ZL12MX_ADC1_Initv+0xac>)
 80024bc:	2200      	movs	r2, #0
 80024be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80024c0:	4b21      	ldr	r3, [pc, #132]	; (8002548 <_ZL12MX_ADC1_Initv+0xac>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80024c6:	4b20      	ldr	r3, [pc, #128]	; (8002548 <_ZL12MX_ADC1_Initv+0xac>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80024cc:	4b1e      	ldr	r3, [pc, #120]	; (8002548 <_ZL12MX_ADC1_Initv+0xac>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80024d4:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <_ZL12MX_ADC1_Initv+0xac>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024da:	4b1b      	ldr	r3, [pc, #108]	; (8002548 <_ZL12MX_ADC1_Initv+0xac>)
 80024dc:	4a1c      	ldr	r2, [pc, #112]	; (8002550 <_ZL12MX_ADC1_Initv+0xb4>)
 80024de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024e0:	4b19      	ldr	r3, [pc, #100]	; (8002548 <_ZL12MX_ADC1_Initv+0xac>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80024e6:	4b18      	ldr	r3, [pc, #96]	; (8002548 <_ZL12MX_ADC1_Initv+0xac>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80024ec:	4b16      	ldr	r3, [pc, #88]	; (8002548 <_ZL12MX_ADC1_Initv+0xac>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024f4:	4b14      	ldr	r3, [pc, #80]	; (8002548 <_ZL12MX_ADC1_Initv+0xac>)
 80024f6:	2201      	movs	r2, #1
 80024f8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024fa:	4813      	ldr	r0, [pc, #76]	; (8002548 <_ZL12MX_ADC1_Initv+0xac>)
 80024fc:	f000 fc8c 	bl	8002e18 <HAL_ADC_Init>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	bf14      	ite	ne
 8002506:	2301      	movne	r3, #1
 8002508:	2300      	moveq	r3, #0
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 8002510:	f000 f8e4 	bl	80026dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002514:	230d      	movs	r3, #13
 8002516:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002518:	2301      	movs	r3, #1
 800251a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800251c:	2300      	movs	r3, #0
 800251e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002520:	463b      	mov	r3, r7
 8002522:	4619      	mov	r1, r3
 8002524:	4808      	ldr	r0, [pc, #32]	; (8002548 <_ZL12MX_ADC1_Initv+0xac>)
 8002526:	f000 fcbb 	bl	8002ea0 <HAL_ADC_ConfigChannel>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	bf14      	ite	ne
 8002530:	2301      	movne	r3, #1
 8002532:	2300      	moveq	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 800253a:	f000 f8cf 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000218 	.word	0x20000218
 800254c:	40012000 	.word	0x40012000
 8002550:	0f000001 	.word	0x0f000001

08002554 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002558:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <_ZL12MX_SPI1_Initv+0x70>)
 800255a:	4a1b      	ldr	r2, [pc, #108]	; (80025c8 <_ZL12MX_SPI1_Initv+0x74>)
 800255c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800255e:	4b19      	ldr	r3, [pc, #100]	; (80025c4 <_ZL12MX_SPI1_Initv+0x70>)
 8002560:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002564:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002566:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <_ZL12MX_SPI1_Initv+0x70>)
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800256c:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <_ZL12MX_SPI1_Initv+0x70>)
 800256e:	2200      	movs	r2, #0
 8002570:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002572:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <_ZL12MX_SPI1_Initv+0x70>)
 8002574:	2200      	movs	r2, #0
 8002576:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002578:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <_ZL12MX_SPI1_Initv+0x70>)
 800257a:	2200      	movs	r2, #0
 800257c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <_ZL12MX_SPI1_Initv+0x70>)
 8002580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002584:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002586:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <_ZL12MX_SPI1_Initv+0x70>)
 8002588:	2218      	movs	r2, #24
 800258a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800258c:	4b0d      	ldr	r3, [pc, #52]	; (80025c4 <_ZL12MX_SPI1_Initv+0x70>)
 800258e:	2200      	movs	r2, #0
 8002590:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002592:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <_ZL12MX_SPI1_Initv+0x70>)
 8002594:	2200      	movs	r2, #0
 8002596:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002598:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <_ZL12MX_SPI1_Initv+0x70>)
 800259a:	2200      	movs	r2, #0
 800259c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <_ZL12MX_SPI1_Initv+0x70>)
 80025a0:	220a      	movs	r2, #10
 80025a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025a4:	4807      	ldr	r0, [pc, #28]	; (80025c4 <_ZL12MX_SPI1_Initv+0x70>)
 80025a6:	f003 fbe7 	bl	8005d78 <HAL_SPI_Init>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	bf14      	ite	ne
 80025b0:	2301      	movne	r3, #1
 80025b2:	2300      	moveq	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 80025ba:	f000 f88f 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000260 	.word	0x20000260
 80025c8:	40013000 	.word	0x40013000

080025cc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025d0:	4b13      	ldr	r3, [pc, #76]	; (8002620 <_ZL19MX_USART2_UART_Initv+0x54>)
 80025d2:	4a14      	ldr	r2, [pc, #80]	; (8002624 <_ZL19MX_USART2_UART_Initv+0x58>)
 80025d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025d6:	4b12      	ldr	r3, [pc, #72]	; (8002620 <_ZL19MX_USART2_UART_Initv+0x54>)
 80025d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025de:	4b10      	ldr	r3, [pc, #64]	; (8002620 <_ZL19MX_USART2_UART_Initv+0x54>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025e4:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <_ZL19MX_USART2_UART_Initv+0x54>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025ea:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <_ZL19MX_USART2_UART_Initv+0x54>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <_ZL19MX_USART2_UART_Initv+0x54>)
 80025f2:	220c      	movs	r2, #12
 80025f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025f6:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <_ZL19MX_USART2_UART_Initv+0x54>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <_ZL19MX_USART2_UART_Initv+0x54>)
 80025fe:	2200      	movs	r2, #0
 8002600:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002602:	4807      	ldr	r0, [pc, #28]	; (8002620 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002604:	f004 f960 	bl	80068c8 <HAL_UART_Init>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	bf14      	ite	ne
 800260e:	2301      	movne	r3, #1
 8002610:	2300      	moveq	r3, #0
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002618:	f000 f860 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800261c:	bf00      	nop
 800261e:	bd80      	pop	{r7, pc}
 8002620:	200002b8 	.word	0x200002b8
 8002624:	40004400 	.word	0x40004400

08002628 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08a      	sub	sp, #40	; 0x28
 800262c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262e:	f107 0314 	add.w	r3, r7, #20
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	60da      	str	r2, [r3, #12]
 800263c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	4b23      	ldr	r3, [pc, #140]	; (80026d0 <_ZL12MX_GPIO_Initv+0xa8>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	4a22      	ldr	r2, [pc, #136]	; (80026d0 <_ZL12MX_GPIO_Initv+0xa8>)
 8002648:	f043 0304 	orr.w	r3, r3, #4
 800264c:	6313      	str	r3, [r2, #48]	; 0x30
 800264e:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <_ZL12MX_GPIO_Initv+0xa8>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <_ZL12MX_GPIO_Initv+0xa8>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	4a1b      	ldr	r2, [pc, #108]	; (80026d0 <_ZL12MX_GPIO_Initv+0xa8>)
 8002664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002668:	6313      	str	r3, [r2, #48]	; 0x30
 800266a:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <_ZL12MX_GPIO_Initv+0xa8>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <_ZL12MX_GPIO_Initv+0xa8>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	4a14      	ldr	r2, [pc, #80]	; (80026d0 <_ZL12MX_GPIO_Initv+0xa8>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <_ZL12MX_GPIO_Initv+0xa8>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	607b      	str	r3, [r7, #4]
 8002696:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <_ZL12MX_GPIO_Initv+0xa8>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	4a0d      	ldr	r2, [pc, #52]	; (80026d0 <_ZL12MX_GPIO_Initv+0xa8>)
 800269c:	f043 0302 	orr.w	r3, r3, #2
 80026a0:	6313      	str	r3, [r2, #48]	; 0x30
 80026a2:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <_ZL12MX_GPIO_Initv+0xa8>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	607b      	str	r3, [r7, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80026ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026b4:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <_ZL12MX_GPIO_Initv+0xac>)
 80026b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	4619      	mov	r1, r3
 80026c2:	4805      	ldr	r0, [pc, #20]	; (80026d8 <_ZL12MX_GPIO_Initv+0xb0>)
 80026c4:	f000 ff48 	bl	8003558 <HAL_GPIO_Init>

}
 80026c8:	bf00      	nop
 80026ca:	3728      	adds	r7, #40	; 0x28
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40023800 	.word	0x40023800
 80026d4:	10210000 	.word	0x10210000
 80026d8:	40020800 	.word	0x40020800

080026dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026e0:	b672      	cpsid	i
}
 80026e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026e4:	e7fe      	b.n	80026e4 <Error_Handler+0x8>

080026e6 <_ZN8MAX3421eI3P102P9E4InitEv>:
        return ( i);
}

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
template< typename SPI_SS, typename INTR >
int8_t MAX3421e< SPI_SS, INTR >::Init() {
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
        XMEM_ACQUIRE_SPI();
        // Moved here.
        // you really should not init hardware in the constructor when it involves locks.
        // Also avoids the vbus flicker issue confusing some devices.
        /* pin and peripheral setup */
        SPI_SS::SetDirWrite();
 80026ee:	f7fe ff6b 	bl	80015c8 <_ZN3P1011SetDirWriteEv>
        SPI_SS::Set();
 80026f2:	f7fe ff51 	bl	8001598 <_ZN3P103SetEv>
        spi::init();
 80026f6:	f000 f845 	bl	8002784 <_ZN3SPiI3P133P113P123P10E4initEv>
        INTR::SetDirRead();
 80026fa:	f7fe ff37 	bl	800156c <_ZN2P910SetDirReadEv>
        XMEM_RELEASE_SPI();
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 80026fe:	2218      	movs	r2, #24
 8002700:	2188      	movs	r1, #136	; 0x88
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f846 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f865 	bl	80027d8 <_ZN8MAX3421eI3P102P9E5resetEv>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	bf0c      	ite	eq
 8002714:	2301      	moveq	r3, #1
 8002716:	2300      	movne	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <_ZN8MAX3421eI3P102P9E4InitEv+0x3e>
                return ( -1);
 800271e:	f04f 33ff 	mov.w	r3, #4294967295
 8002722:	e02b      	b.n	800277c <_ZN8MAX3421eI3P102P9E4InitEv+0x96>
        }

        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 8002724:	22c1      	movs	r2, #193	; 0xc1
 8002726:	21d8      	movs	r1, #216	; 0xd8
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f833 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 800272e:	2260      	movs	r2, #96	; 0x60
 8002730:	21d0      	movs	r1, #208	; 0xd0
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f82e 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        /* check if device is connected */
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 8002738:	2204      	movs	r2, #4
 800273a:	21e8      	movs	r1, #232	; 0xe8
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f829 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 8002742:	21e8      	movs	r1, #232	; 0xe8
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f877 	bl	8002838 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800274a:	4603      	mov	r3, r0
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf0c      	ite	eq
 8002754:	2301      	moveq	r3, #1
 8002756:	2300      	movne	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d000      	beq.n	8002760 <_ZN8MAX3421eI3P102P9E4InitEv+0x7a>
 800275e:	e7f0      	b.n	8002742 <_ZN8MAX3421eI3P102P9E4InitEv+0x5c>

        busprobe(); //check if anything is connected
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f88b 	bl	800287c <_ZN8MAX3421eI3P102P9E8busprobeEv>

        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 8002766:	2220      	movs	r2, #32
 8002768:	21c8      	movs	r1, #200	; 0xc8
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f812 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
 8002770:	2201      	movs	r2, #1
 8002772:	2180      	movs	r1, #128	; 0x80
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f80d 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return ( 0);
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <_ZN3SPiI3P133P113P123P10E4initEv>:
        static void init() {
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
        }
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
	...

08002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>:
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	70fb      	strb	r3, [r7, #3]
 80027a0:	4613      	mov	r3, r2
 80027a2:	70bb      	strb	r3, [r7, #2]
        SPI_SS::Clear();
 80027a4:	f7fe ff04 	bl	80015b0 <_ZN3P105ClearEv>
        c[0] = reg | 0x02;
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	f043 0302 	orr.w	r3, r3, #2
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	733b      	strb	r3, [r7, #12]
        c[1] = data;
 80027b2:	78bb      	ldrb	r3, [r7, #2]
 80027b4:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(&SPI_Handle, c, 2, HAL_MAX_DELAY);
 80027b6:	f107 010c 	add.w	r1, r7, #12
 80027ba:	f04f 33ff 	mov.w	r3, #4294967295
 80027be:	2202      	movs	r2, #2
 80027c0:	4804      	ldr	r0, [pc, #16]	; (80027d4 <_ZN8MAX3421eI3P102P9E5regWrEhh+0x40>)
 80027c2:	f003 fb62 	bl	8005e8a <HAL_SPI_Transmit>
        SPI_SS::Set();
 80027c6:	f7fe fee7 	bl	8001598 <_ZN3P103SetEv>
        return;
 80027ca:	bf00      	nop
};
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	200002fc 	.word	0x200002fc

080027d8 <_ZN8MAX3421eI3P102P9E5resetEv>:
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
        uint16_t i = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	81fb      	strh	r3, [r7, #14]
        regWr(rUSBCTL, bmCHIPRES);
 80027e4:	2220      	movs	r2, #32
 80027e6:	2178      	movs	r1, #120	; 0x78
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7ff ffd3 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rUSBCTL, 0x00);
 80027ee:	2200      	movs	r2, #0
 80027f0:	2178      	movs	r1, #120	; 0x78
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff ffce 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(++i) {
 80027f8:	89fb      	ldrh	r3, [r7, #14]
 80027fa:	3301      	adds	r3, #1
 80027fc:	81fb      	strh	r3, [r7, #14]
 80027fe:	89fb      	ldrh	r3, [r7, #14]
 8002800:	2b00      	cmp	r3, #0
 8002802:	bf14      	ite	ne
 8002804:	2301      	movne	r3, #1
 8002806:	2300      	moveq	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00f      	beq.n	800282e <_ZN8MAX3421eI3P102P9E5resetEv+0x56>
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 800280e:	2168      	movs	r1, #104	; 0x68
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f811 	bl	8002838 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8002816:	4603      	mov	r3, r0
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	bf14      	ite	ne
 8002820:	2301      	movne	r3, #1
 8002822:	2300      	moveq	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d100      	bne.n	800282c <_ZN8MAX3421eI3P102P9E5resetEv+0x54>
        while(++i) {
 800282a:	e7e5      	b.n	80027f8 <_ZN8MAX3421eI3P102P9E5resetEv+0x20>
                        break;
 800282c:	bf00      	nop
        return ( i);
 800282e:	89fb      	ldrh	r3, [r7, #14]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <_ZN8MAX3421eI3P102P9E5regRdEh>:
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	70fb      	strb	r3, [r7, #3]
        SPI_SS::Clear();
 8002844:	f7fe feb4 	bl	80015b0 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8002848:	1cf9      	adds	r1, r7, #3
 800284a:	f04f 33ff 	mov.w	r3, #4294967295
 800284e:	2201      	movs	r2, #1
 8002850:	4809      	ldr	r0, [pc, #36]	; (8002878 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 8002852:	f003 fb1a 	bl	8005e8a <HAL_SPI_Transmit>
        uint8_t rv = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	73fb      	strb	r3, [r7, #15]
        HAL_SPI_Receive(&SPI_Handle, &rv, 1, HAL_MAX_DELAY);
 800285a:	f107 010f 	add.w	r1, r7, #15
 800285e:	f04f 33ff 	mov.w	r3, #4294967295
 8002862:	2201      	movs	r2, #1
 8002864:	4804      	ldr	r0, [pc, #16]	; (8002878 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 8002866:	f003 fc4c 	bl	8006102 <HAL_SPI_Receive>
        SPI_SS::Set();
 800286a:	f7fe fe95 	bl	8001598 <_ZN3P103SetEv>
        return (rv);
 800286e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	200002fc 	.word	0x200002fc

0800287c <_ZN8MAX3421eI3P102P9E8busprobeEv>:
        return ( 0);
}

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
 8002884:	21f8      	movs	r1, #248	; 0xf8
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff ffd6 	bl	8002838 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800288c:	4603      	mov	r3, r0
 800288e:	73fb      	strb	r3, [r7, #15]
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002896:	73fb      	strb	r3, [r7, #15]
        switch(bus_sample) { //start full-speed or low-speed host
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	2bc0      	cmp	r3, #192	; 0xc0
 800289c:	d04a      	beq.n	8002934 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xb8>
 800289e:	2bc0      	cmp	r3, #192	; 0xc0
 80028a0:	dc55      	bgt.n	800294e <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 80028a2:	2b80      	cmp	r3, #128	; 0x80
 80028a4:	d006      	beq.n	80028b4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x38>
 80028a6:	2b80      	cmp	r3, #128	; 0x80
 80028a8:	dc51      	bgt.n	800294e <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d046      	beq.n	800293c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xc0>
 80028ae:	2b40      	cmp	r3, #64	; 0x40
 80028b0:	d020      	beq.n	80028f4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x78>
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
                        vbusState = SE0;
                        break;
        }//end switch( bus_sample )
}
 80028b2:	e04c      	b.n	800294e <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 80028b4:	21d8      	movs	r1, #216	; 0xd8
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ffbe 	bl	8002838 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80028bc:	4603      	mov	r3, r0
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	bf0c      	ite	eq
 80028c6:	2301      	moveq	r3, #1
 80028c8:	2300      	movne	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x66>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 80028d0:	22c9      	movs	r2, #201	; 0xc9
 80028d2:	21d8      	movs	r1, #216	; 0xd8
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ff5d 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 80028da:	4b1f      	ldr	r3, [pc, #124]	; (8002958 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80028dc:	2202      	movs	r2, #2
 80028de:	701a      	strb	r2, [r3, #0]
                        break;
 80028e0:	e035      	b.n	800294e <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 80028e2:	22cb      	movs	r2, #203	; 0xcb
 80028e4:	21d8      	movs	r1, #216	; 0xd8
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7ff ff54 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 80028ec:	4b1a      	ldr	r3, [pc, #104]	; (8002958 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80028ee:	2203      	movs	r2, #3
 80028f0:	701a      	strb	r2, [r3, #0]
                        break;
 80028f2:	e02c      	b.n	800294e <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 80028f4:	21d8      	movs	r1, #216	; 0xd8
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff ff9e 	bl	8002838 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	bf0c      	ite	eq
 8002906:	2301      	moveq	r3, #1
 8002908:	2300      	movne	r3, #0
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xa6>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8002910:	22cb      	movs	r2, #203	; 0xcb
 8002912:	21d8      	movs	r1, #216	; 0xd8
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7ff ff3d 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 800291a:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800291c:	2203      	movs	r2, #3
 800291e:	701a      	strb	r2, [r3, #0]
                        break;
 8002920:	e015      	b.n	800294e <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 8002922:	22c9      	movs	r2, #201	; 0xc9
 8002924:	21d8      	movs	r1, #216	; 0xd8
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff ff34 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 800292c:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800292e:	2202      	movs	r2, #2
 8002930:	701a      	strb	r2, [r3, #0]
                        break;
 8002932:	e00c      	b.n	800294e <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        vbusState = SE1;
 8002934:	4b08      	ldr	r3, [pc, #32]	; (8002958 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8002936:	2201      	movs	r2, #1
 8002938:	701a      	strb	r2, [r3, #0]
                        break;
 800293a:	e008      	b.n	800294e <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 800293c:	22d1      	movs	r2, #209	; 0xd1
 800293e:	21d8      	movs	r1, #216	; 0xd8
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff ff27 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        vbusState = SE0;
 8002946:	4b04      	ldr	r3, [pc, #16]	; (8002958 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
                        break;
 800294c:	bf00      	nop
}
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	2000064d 	.word	0x2000064d

0800295c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d115      	bne.n	8002998 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002972:	4293      	cmp	r3, r2
 8002974:	d110      	bne.n	8002998 <_Z41__static_initialization_and_destruction_0ii+0x3c>
SerialClass Serial(&huart2);
 8002976:	490a      	ldr	r1, [pc, #40]	; (80029a0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002978:	480a      	ldr	r0, [pc, #40]	; (80029a4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800297a:	f7fe fde1 	bl	8001540 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>
USB Usb;
 800297e:	480a      	ldr	r0, [pc, #40]	; (80029a8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002980:	f00c fa3e 	bl	800ee00 <_ZN3USBC1Ev>
BTD Btd(&Usb);
 8002984:	4908      	ldr	r1, [pc, #32]	; (80029a8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002986:	4809      	ldr	r0, [pc, #36]	; (80029ac <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002988:	f008 f844 	bl	800aa14 <_ZN3BTDC1EP3USB>
PS4BT PS4(&Btd);
 800298c:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800298e:	2200      	movs	r2, #0
 8002990:	4906      	ldr	r1, [pc, #24]	; (80029ac <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002992:	4808      	ldr	r0, [pc, #32]	; (80029b4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002994:	f7fe ffe4 	bl	8001960 <_ZN5PS4BTC1EP3BTDbPKc>
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	200002b8 	.word	0x200002b8
 80029a4:	20000398 	.word	0x20000398
 80029a8:	200003ac 	.word	0x200003ac
 80029ac:	20000468 	.word	0x20000468
 80029b0:	08010de8 	.word	0x08010de8
 80029b4:	20000580 	.word	0x20000580

080029b8 <_GLOBAL__sub_I_hadc1>:
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029c0:	2001      	movs	r0, #1
 80029c2:	f7ff ffcb 	bl	800295c <_Z41__static_initialization_and_destruction_0ii>
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	607b      	str	r3, [r7, #4]
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <HAL_MspInit+0x4c>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	4a0f      	ldr	r2, [pc, #60]	; (8002a14 <HAL_MspInit+0x4c>)
 80029d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029dc:	6453      	str	r3, [r2, #68]	; 0x44
 80029de:	4b0d      	ldr	r3, [pc, #52]	; (8002a14 <HAL_MspInit+0x4c>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e6:	607b      	str	r3, [r7, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	603b      	str	r3, [r7, #0]
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <HAL_MspInit+0x4c>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	4a08      	ldr	r2, [pc, #32]	; (8002a14 <HAL_MspInit+0x4c>)
 80029f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f8:	6413      	str	r3, [r2, #64]	; 0x40
 80029fa:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <HAL_MspInit+0x4c>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002a06:	2007      	movs	r0, #7
 8002a08:	f000 fd48 	bl	800349c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a0c:	bf00      	nop
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40023800 	.word	0x40023800

08002a18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08a      	sub	sp, #40	; 0x28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a20:	f107 0314 	add.w	r3, r7, #20
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
 8002a2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a17      	ldr	r2, [pc, #92]	; (8002a94 <HAL_ADC_MspInit+0x7c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d127      	bne.n	8002a8a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	4b16      	ldr	r3, [pc, #88]	; (8002a98 <HAL_ADC_MspInit+0x80>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	4a15      	ldr	r2, [pc, #84]	; (8002a98 <HAL_ADC_MspInit+0x80>)
 8002a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a48:	6453      	str	r3, [r2, #68]	; 0x44
 8002a4a:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <HAL_ADC_MspInit+0x80>)
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a52:	613b      	str	r3, [r7, #16]
 8002a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <HAL_ADC_MspInit+0x80>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	4a0e      	ldr	r2, [pc, #56]	; (8002a98 <HAL_ADC_MspInit+0x80>)
 8002a60:	f043 0304 	orr.w	r3, r3, #4
 8002a64:	6313      	str	r3, [r2, #48]	; 0x30
 8002a66:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <HAL_ADC_MspInit+0x80>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a72:	2308      	movs	r3, #8
 8002a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a76:	2303      	movs	r3, #3
 8002a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a7e:	f107 0314 	add.w	r3, r7, #20
 8002a82:	4619      	mov	r1, r3
 8002a84:	4805      	ldr	r0, [pc, #20]	; (8002a9c <HAL_ADC_MspInit+0x84>)
 8002a86:	f000 fd67 	bl	8003558 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a8a:	bf00      	nop
 8002a8c:	3728      	adds	r7, #40	; 0x28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40012000 	.word	0x40012000
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	40020800 	.word	0x40020800

08002aa0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08a      	sub	sp, #40	; 0x28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a19      	ldr	r2, [pc, #100]	; (8002b24 <HAL_SPI_MspInit+0x84>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d12b      	bne.n	8002b1a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	4b18      	ldr	r3, [pc, #96]	; (8002b28 <HAL_SPI_MspInit+0x88>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	4a17      	ldr	r2, [pc, #92]	; (8002b28 <HAL_SPI_MspInit+0x88>)
 8002acc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad2:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <HAL_SPI_MspInit+0x88>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <HAL_SPI_MspInit+0x88>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	4a10      	ldr	r2, [pc, #64]	; (8002b28 <HAL_SPI_MspInit+0x88>)
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	6313      	str	r3, [r2, #48]	; 0x30
 8002aee:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <HAL_SPI_MspInit+0x88>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002afa:	23e0      	movs	r3, #224	; 0xe0
 8002afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afe:	2302      	movs	r3, #2
 8002b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b06:	2303      	movs	r3, #3
 8002b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b0a:	2305      	movs	r3, #5
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0e:	f107 0314 	add.w	r3, r7, #20
 8002b12:	4619      	mov	r1, r3
 8002b14:	4805      	ldr	r0, [pc, #20]	; (8002b2c <HAL_SPI_MspInit+0x8c>)
 8002b16:	f000 fd1f 	bl	8003558 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b1a:	bf00      	nop
 8002b1c:	3728      	adds	r7, #40	; 0x28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40013000 	.word	0x40013000
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40020000 	.word	0x40020000

08002b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08a      	sub	sp, #40	; 0x28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b38:	f107 0314 	add.w	r3, r7, #20
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	60da      	str	r2, [r3, #12]
 8002b46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a19      	ldr	r2, [pc, #100]	; (8002bb4 <HAL_UART_MspInit+0x84>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d12b      	bne.n	8002baa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	4b18      	ldr	r3, [pc, #96]	; (8002bb8 <HAL_UART_MspInit+0x88>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	4a17      	ldr	r2, [pc, #92]	; (8002bb8 <HAL_UART_MspInit+0x88>)
 8002b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b60:	6413      	str	r3, [r2, #64]	; 0x40
 8002b62:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <HAL_UART_MspInit+0x88>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <HAL_UART_MspInit+0x88>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	4a10      	ldr	r2, [pc, #64]	; (8002bb8 <HAL_UART_MspInit+0x88>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7e:	4b0e      	ldr	r3, [pc, #56]	; (8002bb8 <HAL_UART_MspInit+0x88>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b8a:	230c      	movs	r3, #12
 8002b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b96:	2303      	movs	r3, #3
 8002b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b9a:	2307      	movs	r3, #7
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9e:	f107 0314 	add.w	r3, r7, #20
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4805      	ldr	r0, [pc, #20]	; (8002bbc <HAL_UART_MspInit+0x8c>)
 8002ba6:	f000 fcd7 	bl	8003558 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002baa:	bf00      	nop
 8002bac:	3728      	adds	r7, #40	; 0x28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40004400 	.word	0x40004400
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	40020000 	.word	0x40020000

08002bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bc4:	e7fe      	b.n	8002bc4 <NMI_Handler+0x4>

08002bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bca:	e7fe      	b.n	8002bca <HardFault_Handler+0x4>

08002bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bd0:	e7fe      	b.n	8002bd0 <MemManage_Handler+0x4>

08002bd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bd6:	e7fe      	b.n	8002bd6 <BusFault_Handler+0x4>

08002bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bdc:	e7fe      	b.n	8002bdc <UsageFault_Handler+0x4>

08002bde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bde:	b480      	push	{r7}
 8002be0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002be2:	bf00      	nop
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bf0:	bf00      	nop
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c0c:	f000 f8c0 	bl	8002d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c10:	bf00      	nop
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002c18:	4802      	ldr	r0, [pc, #8]	; (8002c24 <OTG_FS_IRQHandler+0x10>)
 8002c1a:	f000 ffb9 	bl	8003b90 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20000b40 	.word	0x20000b40

08002c28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
	return 1;
 8002c2c:	2301      	movs	r3, #1
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <_kill>:

int _kill(int pid, int sig)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c42:	f00d ff7d 	bl	8010b40 <__errno>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2216      	movs	r2, #22
 8002c4a:	601a      	str	r2, [r3, #0]
	return -1;
 8002c4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <_exit>:

void _exit (int status)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c60:	f04f 31ff 	mov.w	r1, #4294967295
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7ff ffe7 	bl	8002c38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c6a:	e7fe      	b.n	8002c6a <_exit+0x12>

08002c6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c70:	4b08      	ldr	r3, [pc, #32]	; (8002c94 <SystemInit+0x28>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c76:	4a07      	ldr	r2, [pc, #28]	; (8002c94 <SystemInit+0x28>)
 8002c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c80:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <SystemInit+0x28>)
 8002c82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c86:	609a      	str	r2, [r3, #8]
#endif
}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cd0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c9e:	e003      	b.n	8002ca8 <LoopCopyDataInit>

08002ca0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ca0:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002ca2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ca4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ca6:	3104      	adds	r1, #4

08002ca8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ca8:	480b      	ldr	r0, [pc, #44]	; (8002cd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002caa:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002cac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002cae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002cb0:	d3f6      	bcc.n	8002ca0 <CopyDataInit>
  ldr  r2, =_sbss
 8002cb2:	4a0b      	ldr	r2, [pc, #44]	; (8002ce0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002cb4:	e002      	b.n	8002cbc <LoopFillZerobss>

08002cb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002cb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002cb8:	f842 3b04 	str.w	r3, [r2], #4

08002cbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002cbc:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002cbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002cc0:	d3f9      	bcc.n	8002cb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002cc2:	f7ff ffd3 	bl	8002c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cc6:	f00d ff41 	bl	8010b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cca:	f7fe ff1d 	bl	8001b08 <main>
  bx  lr    
 8002cce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002cd0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002cd4:	08011118 	.word	0x08011118
  ldr  r0, =_sdata
 8002cd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002cdc:	200001d4 	.word	0x200001d4
  ldr  r2, =_sbss
 8002ce0:	200001d4 	.word	0x200001d4
  ldr  r3, = _ebss
 8002ce4:	20000f4c 	.word	0x20000f4c

08002ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ce8:	e7fe      	b.n	8002ce8 <ADC_IRQHandler>
	...

08002cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cf0:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <HAL_Init+0x40>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a0d      	ldr	r2, [pc, #52]	; (8002d2c <HAL_Init+0x40>)
 8002cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <HAL_Init+0x40>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a0a      	ldr	r2, [pc, #40]	; (8002d2c <HAL_Init+0x40>)
 8002d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d08:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <HAL_Init+0x40>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a07      	ldr	r2, [pc, #28]	; (8002d2c <HAL_Init+0x40>)
 8002d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d14:	2003      	movs	r0, #3
 8002d16:	f000 fbc1 	bl	800349c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	f000 f808 	bl	8002d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d20:	f7ff fe52 	bl	80029c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40023c00 	.word	0x40023c00

08002d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d38:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <HAL_InitTick+0x54>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <HAL_InitTick+0x58>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	4619      	mov	r1, r3
 8002d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 fbd9 	bl	8003506 <HAL_SYSTICK_Config>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e00e      	b.n	8002d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b0f      	cmp	r3, #15
 8002d62:	d80a      	bhi.n	8002d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d64:	2200      	movs	r2, #0
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	f04f 30ff 	mov.w	r0, #4294967295
 8002d6c:	f000 fba1 	bl	80034b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d70:	4a06      	ldr	r2, [pc, #24]	; (8002d8c <HAL_InitTick+0x5c>)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
 8002d78:	e000      	b.n	8002d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20000000 	.word	0x20000000
 8002d88:	20000008 	.word	0x20000008
 8002d8c:	20000004 	.word	0x20000004

08002d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d94:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <HAL_IncTick+0x20>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <HAL_IncTick+0x24>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4413      	add	r3, r2
 8002da0:	4a04      	ldr	r2, [pc, #16]	; (8002db4 <HAL_IncTick+0x24>)
 8002da2:	6013      	str	r3, [r2, #0]
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	20000008 	.word	0x20000008
 8002db4:	2000066c 	.word	0x2000066c

08002db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return uwTick;
 8002dbc:	4b03      	ldr	r3, [pc, #12]	; (8002dcc <HAL_GetTick+0x14>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	2000066c 	.word	0x2000066c

08002dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dd8:	f7ff ffee 	bl	8002db8 <HAL_GetTick>
 8002ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de8:	d005      	beq.n	8002df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dea:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <HAL_Delay+0x44>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4413      	add	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002df6:	bf00      	nop
 8002df8:	f7ff ffde 	bl	8002db8 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d8f7      	bhi.n	8002df8 <HAL_Delay+0x28>
  {
  }
}
 8002e08:	bf00      	nop
 8002e0a:	bf00      	nop
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000008 	.word	0x20000008

08002e18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e033      	b.n	8002e96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff fdee 	bl	8002a18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f003 0310 	and.w	r3, r3, #16
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d118      	bne.n	8002e88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e5e:	f023 0302 	bic.w	r3, r3, #2
 8002e62:	f043 0202 	orr.w	r2, r3, #2
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f94a 	bl	8003104 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f023 0303 	bic.w	r3, r3, #3
 8002e7e:	f043 0201 	orr.w	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
 8002e86:	e001      	b.n	8002e8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x1c>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e113      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x244>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b09      	cmp	r3, #9
 8002eca:	d925      	bls.n	8002f18 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68d9      	ldr	r1, [r3, #12]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4613      	mov	r3, r2
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	4413      	add	r3, r2
 8002ee0:	3b1e      	subs	r3, #30
 8002ee2:	2207      	movs	r2, #7
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43da      	mvns	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	400a      	ands	r2, r1
 8002ef0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68d9      	ldr	r1, [r3, #12]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	4618      	mov	r0, r3
 8002f04:	4603      	mov	r3, r0
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	4403      	add	r3, r0
 8002f0a:	3b1e      	subs	r3, #30
 8002f0c:	409a      	lsls	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	60da      	str	r2, [r3, #12]
 8002f16:	e022      	b.n	8002f5e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6919      	ldr	r1, [r3, #16]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	461a      	mov	r2, r3
 8002f26:	4613      	mov	r3, r2
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	4413      	add	r3, r2
 8002f2c:	2207      	movs	r2, #7
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43da      	mvns	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	400a      	ands	r2, r1
 8002f3a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6919      	ldr	r1, [r3, #16]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	4603      	mov	r3, r0
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	4403      	add	r3, r0
 8002f54:	409a      	lsls	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b06      	cmp	r3, #6
 8002f64:	d824      	bhi.n	8002fb0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	3b05      	subs	r3, #5
 8002f78:	221f      	movs	r2, #31
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43da      	mvns	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	400a      	ands	r2, r1
 8002f86:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	4618      	mov	r0, r3
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3b05      	subs	r3, #5
 8002fa2:	fa00 f203 	lsl.w	r2, r0, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	635a      	str	r2, [r3, #52]	; 0x34
 8002fae:	e04c      	b.n	800304a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b0c      	cmp	r3, #12
 8002fb6:	d824      	bhi.n	8003002 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3b23      	subs	r3, #35	; 0x23
 8002fca:	221f      	movs	r2, #31
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43da      	mvns	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	400a      	ands	r2, r1
 8002fd8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3b23      	subs	r3, #35	; 0x23
 8002ff4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30
 8003000:	e023      	b.n	800304a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	3b41      	subs	r3, #65	; 0x41
 8003014:	221f      	movs	r2, #31
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43da      	mvns	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	400a      	ands	r2, r1
 8003022:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	b29b      	uxth	r3, r3
 8003030:	4618      	mov	r0, r3
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	3b41      	subs	r3, #65	; 0x41
 800303e:	fa00 f203 	lsl.w	r2, r0, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800304a:	4b29      	ldr	r3, [pc, #164]	; (80030f0 <HAL_ADC_ConfigChannel+0x250>)
 800304c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a28      	ldr	r2, [pc, #160]	; (80030f4 <HAL_ADC_ConfigChannel+0x254>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d10f      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x1d8>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b12      	cmp	r3, #18
 800305e:	d10b      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a1d      	ldr	r2, [pc, #116]	; (80030f4 <HAL_ADC_ConfigChannel+0x254>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d12b      	bne.n	80030da <HAL_ADC_ConfigChannel+0x23a>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a1c      	ldr	r2, [pc, #112]	; (80030f8 <HAL_ADC_ConfigChannel+0x258>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d003      	beq.n	8003094 <HAL_ADC_ConfigChannel+0x1f4>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b11      	cmp	r3, #17
 8003092:	d122      	bne.n	80030da <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a11      	ldr	r2, [pc, #68]	; (80030f8 <HAL_ADC_ConfigChannel+0x258>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d111      	bne.n	80030da <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030b6:	4b11      	ldr	r3, [pc, #68]	; (80030fc <HAL_ADC_ConfigChannel+0x25c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a11      	ldr	r2, [pc, #68]	; (8003100 <HAL_ADC_ConfigChannel+0x260>)
 80030bc:	fba2 2303 	umull	r2, r3, r2, r3
 80030c0:	0c9a      	lsrs	r2, r3, #18
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030cc:	e002      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	3b01      	subs	r3, #1
 80030d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f9      	bne.n	80030ce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	40012300 	.word	0x40012300
 80030f4:	40012000 	.word	0x40012000
 80030f8:	10000012 	.word	0x10000012
 80030fc:	20000000 	.word	0x20000000
 8003100:	431bde83 	.word	0x431bde83

08003104 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800310c:	4b79      	ldr	r3, [pc, #484]	; (80032f4 <ADC_Init+0x1f0>)
 800310e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	431a      	orrs	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003138:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6859      	ldr	r1, [r3, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	021a      	lsls	r2, r3, #8
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800315c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6859      	ldr	r1, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800317e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6899      	ldr	r1, [r3, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003196:	4a58      	ldr	r2, [pc, #352]	; (80032f8 <ADC_Init+0x1f4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d022      	beq.n	80031e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6899      	ldr	r1, [r3, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6899      	ldr	r1, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	609a      	str	r2, [r3, #8]
 80031e0:	e00f      	b.n	8003202 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003200:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0202 	bic.w	r2, r2, #2
 8003210:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6899      	ldr	r1, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	7e1b      	ldrb	r3, [r3, #24]
 800321c:	005a      	lsls	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 3020 	ldrb.w	r3, [r3, #32]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d01b      	beq.n	8003268 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800323e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800324e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6859      	ldr	r1, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	3b01      	subs	r3, #1
 800325c:	035a      	lsls	r2, r3, #13
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	e007      	b.n	8003278 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003276:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003286:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	3b01      	subs	r3, #1
 8003294:	051a      	lsls	r2, r3, #20
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6899      	ldr	r1, [r3, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032ba:	025a      	lsls	r2, r3, #9
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6899      	ldr	r1, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	029a      	lsls	r2, r3, #10
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	609a      	str	r2, [r3, #8]
}
 80032e8:	bf00      	nop
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	40012300 	.word	0x40012300
 80032f8:	0f000001 	.word	0x0f000001

080032fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <__NVIC_SetPriorityGrouping+0x44>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003318:	4013      	ands	r3, r2
 800331a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800332c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800332e:	4a04      	ldr	r2, [pc, #16]	; (8003340 <__NVIC_SetPriorityGrouping+0x44>)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	60d3      	str	r3, [r2, #12]
}
 8003334:	bf00      	nop
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	e000ed00 	.word	0xe000ed00

08003344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003348:	4b04      	ldr	r3, [pc, #16]	; (800335c <__NVIC_GetPriorityGrouping+0x18>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	0a1b      	lsrs	r3, r3, #8
 800334e:	f003 0307 	and.w	r3, r3, #7
}
 8003352:	4618      	mov	r0, r3
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	e000ed00 	.word	0xe000ed00

08003360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	2b00      	cmp	r3, #0
 8003370:	db0b      	blt.n	800338a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	f003 021f 	and.w	r2, r3, #31
 8003378:	4907      	ldr	r1, [pc, #28]	; (8003398 <__NVIC_EnableIRQ+0x38>)
 800337a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	2001      	movs	r0, #1
 8003382:	fa00 f202 	lsl.w	r2, r0, r2
 8003386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	e000e100 	.word	0xe000e100

0800339c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	6039      	str	r1, [r7, #0]
 80033a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	db0a      	blt.n	80033c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	490c      	ldr	r1, [pc, #48]	; (80033e8 <__NVIC_SetPriority+0x4c>)
 80033b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ba:	0112      	lsls	r2, r2, #4
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	440b      	add	r3, r1
 80033c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033c4:	e00a      	b.n	80033dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	4908      	ldr	r1, [pc, #32]	; (80033ec <__NVIC_SetPriority+0x50>)
 80033cc:	79fb      	ldrb	r3, [r7, #7]
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	3b04      	subs	r3, #4
 80033d4:	0112      	lsls	r2, r2, #4
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	440b      	add	r3, r1
 80033da:	761a      	strb	r2, [r3, #24]
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	e000e100 	.word	0xe000e100
 80033ec:	e000ed00 	.word	0xe000ed00

080033f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b089      	sub	sp, #36	; 0x24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f1c3 0307 	rsb	r3, r3, #7
 800340a:	2b04      	cmp	r3, #4
 800340c:	bf28      	it	cs
 800340e:	2304      	movcs	r3, #4
 8003410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3304      	adds	r3, #4
 8003416:	2b06      	cmp	r3, #6
 8003418:	d902      	bls.n	8003420 <NVIC_EncodePriority+0x30>
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	3b03      	subs	r3, #3
 800341e:	e000      	b.n	8003422 <NVIC_EncodePriority+0x32>
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003424:	f04f 32ff 	mov.w	r2, #4294967295
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43da      	mvns	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	401a      	ands	r2, r3
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003438:	f04f 31ff 	mov.w	r1, #4294967295
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	fa01 f303 	lsl.w	r3, r1, r3
 8003442:	43d9      	mvns	r1, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003448:	4313      	orrs	r3, r2
         );
}
 800344a:	4618      	mov	r0, r3
 800344c:	3724      	adds	r7, #36	; 0x24
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
	...

08003458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3b01      	subs	r3, #1
 8003464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003468:	d301      	bcc.n	800346e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800346a:	2301      	movs	r3, #1
 800346c:	e00f      	b.n	800348e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800346e:	4a0a      	ldr	r2, [pc, #40]	; (8003498 <SysTick_Config+0x40>)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3b01      	subs	r3, #1
 8003474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003476:	210f      	movs	r1, #15
 8003478:	f04f 30ff 	mov.w	r0, #4294967295
 800347c:	f7ff ff8e 	bl	800339c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <SysTick_Config+0x40>)
 8003482:	2200      	movs	r2, #0
 8003484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003486:	4b04      	ldr	r3, [pc, #16]	; (8003498 <SysTick_Config+0x40>)
 8003488:	2207      	movs	r2, #7
 800348a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	e000e010 	.word	0xe000e010

0800349c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7ff ff29 	bl	80032fc <__NVIC_SetPriorityGrouping>
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b086      	sub	sp, #24
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	4603      	mov	r3, r0
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034c4:	f7ff ff3e 	bl	8003344 <__NVIC_GetPriorityGrouping>
 80034c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	6978      	ldr	r0, [r7, #20]
 80034d0:	f7ff ff8e 	bl	80033f0 <NVIC_EncodePriority>
 80034d4:	4602      	mov	r2, r0
 80034d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034da:	4611      	mov	r1, r2
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff ff5d 	bl	800339c <__NVIC_SetPriority>
}
 80034e2:	bf00      	nop
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	4603      	mov	r3, r0
 80034f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff ff31 	bl	8003360 <__NVIC_EnableIRQ>
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff ffa2 	bl	8003458 <SysTick_Config>
 8003514:	4603      	mov	r3, r0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b04      	cmp	r3, #4
 800352c:	d106      	bne.n	800353c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800352e:	4b09      	ldr	r3, [pc, #36]	; (8003554 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a08      	ldr	r2, [pc, #32]	; (8003554 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003534:	f043 0304 	orr.w	r3, r3, #4
 8003538:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800353a:	e005      	b.n	8003548 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800353c:	4b05      	ldr	r3, [pc, #20]	; (8003554 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a04      	ldr	r2, [pc, #16]	; (8003554 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003542:	f023 0304 	bic.w	r3, r3, #4
 8003546:	6013      	str	r3, [r2, #0]
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	e000e010 	.word	0xe000e010

08003558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003558:	b480      	push	{r7}
 800355a:	b089      	sub	sp, #36	; 0x24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003562:	2300      	movs	r3, #0
 8003564:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003566:	2300      	movs	r3, #0
 8003568:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800356a:	2300      	movs	r3, #0
 800356c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800356e:	2300      	movs	r3, #0
 8003570:	61fb      	str	r3, [r7, #28]
 8003572:	e165      	b.n	8003840 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003574:	2201      	movs	r2, #1
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	4013      	ands	r3, r2
 8003586:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	429a      	cmp	r2, r3
 800358e:	f040 8154 	bne.w	800383a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	2b01      	cmp	r3, #1
 800359c:	d005      	beq.n	80035aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d130      	bne.n	800360c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	2203      	movs	r2, #3
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	43db      	mvns	r3, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4013      	ands	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035e0:	2201      	movs	r2, #1
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4013      	ands	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	091b      	lsrs	r3, r3, #4
 80035f6:	f003 0201 	and.w	r2, r3, #1
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4313      	orrs	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 0303 	and.w	r3, r3, #3
 8003614:	2b03      	cmp	r3, #3
 8003616:	d017      	beq.n	8003648 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	2203      	movs	r2, #3
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	43db      	mvns	r3, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4013      	ands	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d123      	bne.n	800369c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	08da      	lsrs	r2, r3, #3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3208      	adds	r2, #8
 800365c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003660:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	220f      	movs	r2, #15
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4313      	orrs	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	08da      	lsrs	r2, r3, #3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3208      	adds	r2, #8
 8003696:	69b9      	ldr	r1, [r7, #24]
 8003698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	2203      	movs	r2, #3
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	43db      	mvns	r3, r3
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	4013      	ands	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 0203 	and.w	r2, r3, #3
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 80ae 	beq.w	800383a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	4b5d      	ldr	r3, [pc, #372]	; (8003858 <HAL_GPIO_Init+0x300>)
 80036e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e6:	4a5c      	ldr	r2, [pc, #368]	; (8003858 <HAL_GPIO_Init+0x300>)
 80036e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036ec:	6453      	str	r3, [r2, #68]	; 0x44
 80036ee:	4b5a      	ldr	r3, [pc, #360]	; (8003858 <HAL_GPIO_Init+0x300>)
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036fa:	4a58      	ldr	r2, [pc, #352]	; (800385c <HAL_GPIO_Init+0x304>)
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	089b      	lsrs	r3, r3, #2
 8003700:	3302      	adds	r3, #2
 8003702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	220f      	movs	r2, #15
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	43db      	mvns	r3, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4013      	ands	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a4f      	ldr	r2, [pc, #316]	; (8003860 <HAL_GPIO_Init+0x308>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d025      	beq.n	8003772 <HAL_GPIO_Init+0x21a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a4e      	ldr	r2, [pc, #312]	; (8003864 <HAL_GPIO_Init+0x30c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d01f      	beq.n	800376e <HAL_GPIO_Init+0x216>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a4d      	ldr	r2, [pc, #308]	; (8003868 <HAL_GPIO_Init+0x310>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d019      	beq.n	800376a <HAL_GPIO_Init+0x212>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a4c      	ldr	r2, [pc, #304]	; (800386c <HAL_GPIO_Init+0x314>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d013      	beq.n	8003766 <HAL_GPIO_Init+0x20e>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a4b      	ldr	r2, [pc, #300]	; (8003870 <HAL_GPIO_Init+0x318>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d00d      	beq.n	8003762 <HAL_GPIO_Init+0x20a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a4a      	ldr	r2, [pc, #296]	; (8003874 <HAL_GPIO_Init+0x31c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d007      	beq.n	800375e <HAL_GPIO_Init+0x206>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a49      	ldr	r2, [pc, #292]	; (8003878 <HAL_GPIO_Init+0x320>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d101      	bne.n	800375a <HAL_GPIO_Init+0x202>
 8003756:	2306      	movs	r3, #6
 8003758:	e00c      	b.n	8003774 <HAL_GPIO_Init+0x21c>
 800375a:	2307      	movs	r3, #7
 800375c:	e00a      	b.n	8003774 <HAL_GPIO_Init+0x21c>
 800375e:	2305      	movs	r3, #5
 8003760:	e008      	b.n	8003774 <HAL_GPIO_Init+0x21c>
 8003762:	2304      	movs	r3, #4
 8003764:	e006      	b.n	8003774 <HAL_GPIO_Init+0x21c>
 8003766:	2303      	movs	r3, #3
 8003768:	e004      	b.n	8003774 <HAL_GPIO_Init+0x21c>
 800376a:	2302      	movs	r3, #2
 800376c:	e002      	b.n	8003774 <HAL_GPIO_Init+0x21c>
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <HAL_GPIO_Init+0x21c>
 8003772:	2300      	movs	r3, #0
 8003774:	69fa      	ldr	r2, [r7, #28]
 8003776:	f002 0203 	and.w	r2, r2, #3
 800377a:	0092      	lsls	r2, r2, #2
 800377c:	4093      	lsls	r3, r2
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4313      	orrs	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003784:	4935      	ldr	r1, [pc, #212]	; (800385c <HAL_GPIO_Init+0x304>)
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	089b      	lsrs	r3, r3, #2
 800378a:	3302      	adds	r3, #2
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003792:	4b3a      	ldr	r3, [pc, #232]	; (800387c <HAL_GPIO_Init+0x324>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	43db      	mvns	r3, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4013      	ands	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037b6:	4a31      	ldr	r2, [pc, #196]	; (800387c <HAL_GPIO_Init+0x324>)
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037bc:	4b2f      	ldr	r3, [pc, #188]	; (800387c <HAL_GPIO_Init+0x324>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	43db      	mvns	r3, r3
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4013      	ands	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	4313      	orrs	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037e0:	4a26      	ldr	r2, [pc, #152]	; (800387c <HAL_GPIO_Init+0x324>)
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037e6:	4b25      	ldr	r3, [pc, #148]	; (800387c <HAL_GPIO_Init+0x324>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	43db      	mvns	r3, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4013      	ands	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	4313      	orrs	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800380a:	4a1c      	ldr	r2, [pc, #112]	; (800387c <HAL_GPIO_Init+0x324>)
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003810:	4b1a      	ldr	r3, [pc, #104]	; (800387c <HAL_GPIO_Init+0x324>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	43db      	mvns	r3, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4013      	ands	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003834:	4a11      	ldr	r2, [pc, #68]	; (800387c <HAL_GPIO_Init+0x324>)
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	3301      	adds	r3, #1
 800383e:	61fb      	str	r3, [r7, #28]
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	2b0f      	cmp	r3, #15
 8003844:	f67f ae96 	bls.w	8003574 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003848:	bf00      	nop
 800384a:	bf00      	nop
 800384c:	3724      	adds	r7, #36	; 0x24
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40023800 	.word	0x40023800
 800385c:	40013800 	.word	0x40013800
 8003860:	40020000 	.word	0x40020000
 8003864:	40020400 	.word	0x40020400
 8003868:	40020800 	.word	0x40020800
 800386c:	40020c00 	.word	0x40020c00
 8003870:	40021000 	.word	0x40021000
 8003874:	40021400 	.word	0x40021400
 8003878:	40021800 	.word	0x40021800
 800387c:	40013c00 	.word	0x40013c00

08003880 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	887b      	ldrh	r3, [r7, #2]
 8003892:	4013      	ands	r3, r2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d002      	beq.n	800389e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003898:	2301      	movs	r3, #1
 800389a:	73fb      	strb	r3, [r7, #15]
 800389c:	e001      	b.n	80038a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800389e:	2300      	movs	r3, #0
 80038a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	807b      	strh	r3, [r7, #2]
 80038bc:	4613      	mov	r3, r2
 80038be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038c0:	787b      	ldrb	r3, [r7, #1]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038c6:	887a      	ldrh	r2, [r7, #2]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038cc:	e003      	b.n	80038d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038ce:	887b      	ldrh	r3, [r7, #2]
 80038d0:	041a      	lsls	r2, r3, #16
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	619a      	str	r2, [r3, #24]
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038e4:	b08f      	sub	sp, #60	; 0x3c
 80038e6:	af0a      	add	r7, sp, #40	; 0x28
 80038e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e116      	b.n	8003b22 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f006 fb22 	bl	8009f58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2203      	movs	r2, #3
 8003918:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003924:	2b00      	cmp	r3, #0
 8003926:	d102      	bne.n	800392e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f003 fc71 	bl	800721a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	603b      	str	r3, [r7, #0]
 800393e:	687e      	ldr	r6, [r7, #4]
 8003940:	466d      	mov	r5, sp
 8003942:	f106 0410 	add.w	r4, r6, #16
 8003946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003948:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800394a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800394c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800394e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003952:	e885 0003 	stmia.w	r5, {r0, r1}
 8003956:	1d33      	adds	r3, r6, #4
 8003958:	cb0e      	ldmia	r3, {r1, r2, r3}
 800395a:	6838      	ldr	r0, [r7, #0]
 800395c:	f003 fb48 	bl	8006ff0 <USB_CoreInit>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2202      	movs	r2, #2
 800396a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e0d7      	b.n	8003b22 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2100      	movs	r1, #0
 8003978:	4618      	mov	r0, r3
 800397a:	f003 fc5f 	bl	800723c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800397e:	2300      	movs	r3, #0
 8003980:	73fb      	strb	r3, [r7, #15]
 8003982:	e04a      	b.n	8003a1a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003984:	7bfa      	ldrb	r2, [r7, #15]
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	4613      	mov	r3, r2
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	1a9b      	subs	r3, r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	333d      	adds	r3, #61	; 0x3d
 8003994:	2201      	movs	r2, #1
 8003996:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003998:	7bfa      	ldrb	r2, [r7, #15]
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	1a9b      	subs	r3, r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	333c      	adds	r3, #60	; 0x3c
 80039a8:	7bfa      	ldrb	r2, [r7, #15]
 80039aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039ac:	7bfa      	ldrb	r2, [r7, #15]
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
 80039b0:	b298      	uxth	r0, r3
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	3342      	adds	r3, #66	; 0x42
 80039c0:	4602      	mov	r2, r0
 80039c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039c4:	7bfa      	ldrb	r2, [r7, #15]
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	333f      	adds	r3, #63	; 0x3f
 80039d4:	2200      	movs	r2, #0
 80039d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039d8:	7bfa      	ldrb	r2, [r7, #15]
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	4613      	mov	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	1a9b      	subs	r3, r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	3344      	adds	r3, #68	; 0x44
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039ec:	7bfa      	ldrb	r2, [r7, #15]
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	3348      	adds	r3, #72	; 0x48
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a00:	7bfa      	ldrb	r2, [r7, #15]
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	1a9b      	subs	r3, r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	3350      	adds	r3, #80	; 0x50
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
 8003a16:	3301      	adds	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
 8003a1a:	7bfa      	ldrb	r2, [r7, #15]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d3af      	bcc.n	8003984 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a24:	2300      	movs	r3, #0
 8003a26:	73fb      	strb	r3, [r7, #15]
 8003a28:	e044      	b.n	8003ab4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a2a:	7bfa      	ldrb	r2, [r7, #15]
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	1a9b      	subs	r3, r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a40:	7bfa      	ldrb	r2, [r7, #15]
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	1a9b      	subs	r3, r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003a52:	7bfa      	ldrb	r2, [r7, #15]
 8003a54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a56:	7bfa      	ldrb	r2, [r7, #15]
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	1a9b      	subs	r3, r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003a68:	2200      	movs	r2, #0
 8003a6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a6c:	7bfa      	ldrb	r2, [r7, #15]
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	1a9b      	subs	r3, r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a82:	7bfa      	ldrb	r2, [r7, #15]
 8003a84:	6879      	ldr	r1, [r7, #4]
 8003a86:	4613      	mov	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	1a9b      	subs	r3, r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	440b      	add	r3, r1
 8003a90:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a98:	7bfa      	ldrb	r2, [r7, #15]
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	73fb      	strb	r3, [r7, #15]
 8003ab4:	7bfa      	ldrb	r2, [r7, #15]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d3b5      	bcc.n	8003a2a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	603b      	str	r3, [r7, #0]
 8003ac4:	687e      	ldr	r6, [r7, #4]
 8003ac6:	466d      	mov	r5, sp
 8003ac8:	f106 0410 	add.w	r4, r6, #16
 8003acc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ace:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ad0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ad2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ad4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ad8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003adc:	1d33      	adds	r3, r6, #4
 8003ade:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ae0:	6838      	ldr	r0, [r7, #0]
 8003ae2:	f003 fbd5 	bl	8007290 <USB_DevInit>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e014      	b.n	8003b22 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d102      	bne.n	8003b16 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f001 f879 	bl	8004c08 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f004 fc10 	bl	8008340 <USB_DevDisconnect>

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b2a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b084      	sub	sp, #16
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d101      	bne.n	8003b46 <HAL_PCD_Start+0x1c>
 8003b42:	2302      	movs	r3, #2
 8003b44:	e020      	b.n	8003b88 <HAL_PCD_Start+0x5e>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d109      	bne.n	8003b6a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d005      	beq.n	8003b6a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f003 fb42 	bl	80071f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f004 fbc0 	bl	80082fe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b90:	b590      	push	{r4, r7, lr}
 8003b92:	b08d      	sub	sp, #52	; 0x34
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f004 fc7e 	bl	80084a8 <USB_GetMode>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f040 83ca 	bne.w	8004348 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f004 fbe2 	bl	8008382 <USB_ReadInterrupts>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 83c0 	beq.w	8004346 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f004 fbd9 	bl	8008382 <USB_ReadInterrupts>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d107      	bne.n	8003bea <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695a      	ldr	r2, [r3, #20]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f002 0202 	and.w	r2, r2, #2
 8003be8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f004 fbc7 	bl	8008382 <USB_ReadInterrupts>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	f003 0310 	and.w	r3, r3, #16
 8003bfa:	2b10      	cmp	r3, #16
 8003bfc:	d161      	bne.n	8003cc2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	699a      	ldr	r2, [r3, #24]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0210 	bic.w	r2, r2, #16
 8003c0c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	f003 020f 	and.w	r2, r3, #15
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	1a9b      	subs	r3, r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	4413      	add	r3, r2
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	0c5b      	lsrs	r3, r3, #17
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d124      	bne.n	8003c84 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003c40:	4013      	ands	r3, r2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d035      	beq.n	8003cb2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	091b      	lsrs	r3, r3, #4
 8003c4e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	461a      	mov	r2, r3
 8003c58:	6a38      	ldr	r0, [r7, #32]
 8003c5a:	f004 fa2d 	bl	80080b8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	091b      	lsrs	r3, r3, #4
 8003c66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c6a:	441a      	add	r2, r3
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	699a      	ldr	r2, [r3, #24]
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	091b      	lsrs	r3, r3, #4
 8003c78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c7c:	441a      	add	r2, r3
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	619a      	str	r2, [r3, #24]
 8003c82:	e016      	b.n	8003cb2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	0c5b      	lsrs	r3, r3, #17
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	2b06      	cmp	r3, #6
 8003c8e:	d110      	bne.n	8003cb2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c96:	2208      	movs	r2, #8
 8003c98:	4619      	mov	r1, r3
 8003c9a:	6a38      	ldr	r0, [r7, #32]
 8003c9c:	f004 fa0c 	bl	80080b8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	699a      	ldr	r2, [r3, #24]
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	091b      	lsrs	r3, r3, #4
 8003ca8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cac:	441a      	add	r2, r3
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699a      	ldr	r2, [r3, #24]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f042 0210 	orr.w	r2, r2, #16
 8003cc0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f004 fb5b 	bl	8008382 <USB_ReadInterrupts>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cd2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003cd6:	d16e      	bne.n	8003db6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f004 fb61 	bl	80083a8 <USB_ReadDevAllOutEpInterrupt>
 8003ce6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003ce8:	e062      	b.n	8003db0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d057      	beq.n	8003da4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f004 fb86 	bl	8008410 <USB_ReadDevOutEPInterrupt>
 8003d04:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00c      	beq.n	8003d2a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	2301      	movs	r3, #1
 8003d20:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003d22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 fdc5 	bl	80048b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f003 0308 	and.w	r3, r3, #8
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00c      	beq.n	8003d4e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	015a      	lsls	r2, r3, #5
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d40:	461a      	mov	r2, r3
 8003d42:	2308      	movs	r3, #8
 8003d44:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003d46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 febf 	bl	8004acc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d008      	beq.n	8003d6a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	015a      	lsls	r2, r3, #5
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d64:	461a      	mov	r2, r3
 8003d66:	2310      	movs	r3, #16
 8003d68:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f003 0320 	and.w	r3, r3, #32
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d008      	beq.n	8003d86 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d80:	461a      	mov	r2, r3
 8003d82:	2320      	movs	r3, #32
 8003d84:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d009      	beq.n	8003da4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003da2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	3301      	adds	r3, #1
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dac:	085b      	lsrs	r3, r3, #1
 8003dae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d199      	bne.n	8003cea <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f004 fae1 	bl	8008382 <USB_ReadInterrupts>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dca:	f040 80c0 	bne.w	8003f4e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f004 fb02 	bl	80083dc <USB_ReadDevAllInEpInterrupt>
 8003dd8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003dde:	e0b2      	b.n	8003f46 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 80a7 	beq.w	8003f3a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	4611      	mov	r1, r2
 8003df6:	4618      	mov	r0, r3
 8003df8:	f004 fb28 	bl	800844c <USB_ReadDevInEPInterrupt>
 8003dfc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d057      	beq.n	8003eb8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	2201      	movs	r2, #1
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	43db      	mvns	r3, r3
 8003e22:	69f9      	ldr	r1, [r7, #28]
 8003e24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e28:	4013      	ands	r3, r2
 8003e2a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e38:	461a      	mov	r2, r3
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d132      	bne.n	8003eac <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	1a9b      	subs	r3, r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	440b      	add	r3, r1
 8003e54:	3348      	adds	r3, #72	; 0x48
 8003e56:	6819      	ldr	r1, [r3, #0]
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	1a9b      	subs	r3, r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4403      	add	r3, r0
 8003e66:	3344      	adds	r3, #68	; 0x44
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4419      	add	r1, r3
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e70:	4613      	mov	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4403      	add	r3, r0
 8003e7a:	3348      	adds	r3, #72	; 0x48
 8003e7c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d113      	bne.n	8003eac <HAL_PCD_IRQHandler+0x31c>
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e88:	4613      	mov	r3, r2
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	1a9b      	subs	r3, r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	3350      	adds	r3, #80	; 0x50
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d108      	bne.n	8003eac <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	f004 fb30 	bl	800850c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f006 f8d1 	bl	800a05a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d008      	beq.n	8003ed4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ece:	461a      	mov	r2, r3
 8003ed0:	2308      	movs	r3, #8
 8003ed2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	f003 0310 	and.w	r3, r3, #16
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d008      	beq.n	8003ef0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	015a      	lsls	r2, r3, #5
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eea:	461a      	mov	r2, r3
 8003eec:	2310      	movs	r3, #16
 8003eee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d008      	beq.n	8003f0c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	015a      	lsls	r2, r3, #5
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f06:	461a      	mov	r2, r3
 8003f08:	2340      	movs	r3, #64	; 0x40
 8003f0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d008      	beq.n	8003f28 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f22:	461a      	mov	r2, r3
 8003f24:	2302      	movs	r3, #2
 8003f26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003f32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fc30 	bl	800479a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f42:	085b      	lsrs	r3, r3, #1
 8003f44:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f47f af49 	bne.w	8003de0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f004 fa15 	bl	8008382 <USB_ReadInterrupts>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f62:	d122      	bne.n	8003faa <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	69fa      	ldr	r2, [r7, #28]
 8003f6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f72:	f023 0301 	bic.w	r3, r3, #1
 8003f76:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d108      	bne.n	8003f94 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f006 faa1 	bl	800a4d4 <HAL_PCDEx_LPM_Callback>
 8003f92:	e002      	b.n	8003f9a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f006 f8d7 	bl	800a148 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695a      	ldr	r2, [r3, #20]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003fa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f004 f9e7 	bl	8008382 <USB_ReadInterrupts>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fbe:	d112      	bne.n	8003fe6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d102      	bne.n	8003fd6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f006 f893 	bl	800a0fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003fe4:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f004 f9c9 	bl	8008382 <USB_ReadInterrupts>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ff6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ffa:	d121      	bne.n	8004040 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695a      	ldr	r2, [r3, #20]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800400a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004012:	2b00      	cmp	r3, #0
 8004014:	d111      	bne.n	800403a <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004024:	089b      	lsrs	r3, r3, #2
 8004026:	f003 020f 	and.w	r2, r3, #15
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004030:	2101      	movs	r1, #1
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f006 fa4e 	bl	800a4d4 <HAL_PCDEx_LPM_Callback>
 8004038:	e002      	b.n	8004040 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f006 f85e 	bl	800a0fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4618      	mov	r0, r3
 8004046:	f004 f99c 	bl	8008382 <USB_ReadInterrupts>
 800404a:	4603      	mov	r3, r0
 800404c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004054:	f040 80c7 	bne.w	80041e6 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	69fa      	ldr	r2, [r7, #28]
 8004062:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004066:	f023 0301 	bic.w	r3, r3, #1
 800406a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2110      	movs	r1, #16
 8004072:	4618      	mov	r0, r3
 8004074:	f003 fa6a 	bl	800754c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004078:	2300      	movs	r3, #0
 800407a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800407c:	e056      	b.n	800412c <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800407e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800408a:	461a      	mov	r2, r3
 800408c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004090:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	4413      	add	r3, r2
 800409a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040a2:	0151      	lsls	r1, r2, #5
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	440a      	add	r2, r1
 80040a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040b0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80040b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040c2:	0151      	lsls	r1, r2, #5
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	440a      	add	r2, r1
 80040c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80040d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040de:	461a      	mov	r2, r3
 80040e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040e4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80040e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040f6:	0151      	lsls	r1, r2, #5
 80040f8:	69fa      	ldr	r2, [r7, #28]
 80040fa:	440a      	add	r2, r1
 80040fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004100:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004104:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	4413      	add	r3, r2
 800410e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004116:	0151      	lsls	r1, r2, #5
 8004118:	69fa      	ldr	r2, [r7, #28]
 800411a:	440a      	add	r2, r1
 800411c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004120:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004124:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004128:	3301      	adds	r3, #1
 800412a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004132:	429a      	cmp	r2, r3
 8004134:	d3a3      	bcc.n	800407e <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	69fa      	ldr	r2, [r7, #28]
 8004140:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004144:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004148:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414e:	2b00      	cmp	r3, #0
 8004150:	d016      	beq.n	8004180 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800415c:	69fa      	ldr	r2, [r7, #28]
 800415e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004162:	f043 030b 	orr.w	r3, r3, #11
 8004166:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	69fa      	ldr	r2, [r7, #28]
 8004174:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004178:	f043 030b 	orr.w	r3, r3, #11
 800417c:	6453      	str	r3, [r2, #68]	; 0x44
 800417e:	e015      	b.n	80041ac <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	69fa      	ldr	r2, [r7, #28]
 800418a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800418e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004192:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004196:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	69fa      	ldr	r2, [r7, #28]
 80041a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041a6:	f043 030b 	orr.w	r3, r3, #11
 80041aa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80041be:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6818      	ldr	r0, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80041d0:	461a      	mov	r2, r3
 80041d2:	f004 f99b 	bl	800850c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695a      	ldr	r2, [r3, #20]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80041e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f004 f8c9 	bl	8008382 <USB_ReadInterrupts>
 80041f0:	4603      	mov	r3, r0
 80041f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041fa:	d124      	bne.n	8004246 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	f004 f95f 	bl	80084c4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f003 f9ff 	bl	800760e <USB_GetDevSpeed>
 8004210:	4603      	mov	r3, r0
 8004212:	461a      	mov	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681c      	ldr	r4, [r3, #0]
 800421c:	f000 fdfe 	bl	8004e1c <HAL_RCC_GetHCLKFreq>
 8004220:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004226:	b2db      	uxtb	r3, r3
 8004228:	461a      	mov	r2, r3
 800422a:	4620      	mov	r0, r4
 800422c:	f002 ff42 	bl	80070b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f005 ff3a 	bl	800a0aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695a      	ldr	r2, [r3, #20]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004244:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f004 f899 	bl	8008382 <USB_ReadInterrupts>
 8004250:	4603      	mov	r3, r0
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b08      	cmp	r3, #8
 8004258:	d10a      	bne.n	8004270 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f005 ff17 	bl	800a08e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695a      	ldr	r2, [r3, #20]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f002 0208 	and.w	r2, r2, #8
 800426e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f004 f884 	bl	8008382 <USB_ReadInterrupts>
 800427a:	4603      	mov	r3, r0
 800427c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004284:	d10f      	bne.n	80042a6 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004286:	2300      	movs	r3, #0
 8004288:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	b2db      	uxtb	r3, r3
 800428e:	4619      	mov	r1, r3
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f005 ff79 	bl	800a188 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695a      	ldr	r2, [r3, #20]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80042a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f004 f869 	bl	8008382 <USB_ReadInterrupts>
 80042b0:	4603      	mov	r3, r0
 80042b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042ba:	d10f      	bne.n	80042dc <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	4619      	mov	r1, r3
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f005 ff4c 	bl	800a164 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695a      	ldr	r2, [r3, #20]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80042da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f004 f84e 	bl	8008382 <USB_ReadInterrupts>
 80042e6:	4603      	mov	r3, r0
 80042e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f0:	d10a      	bne.n	8004308 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f005 ff5a 	bl	800a1ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695a      	ldr	r2, [r3, #20]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004306:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4618      	mov	r0, r3
 800430e:	f004 f838 	bl	8008382 <USB_ReadInterrupts>
 8004312:	4603      	mov	r3, r0
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b04      	cmp	r3, #4
 800431a:	d115      	bne.n	8004348 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	f003 0304 	and.w	r3, r3, #4
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f005 ff4a 	bl	800a1c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6859      	ldr	r1, [r3, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	430a      	orrs	r2, r1
 8004342:	605a      	str	r2, [r3, #4]
 8004344:	e000      	b.n	8004348 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8004346:	bf00      	nop
    }
  }
}
 8004348:	3734      	adds	r7, #52	; 0x34
 800434a:	46bd      	mov	sp, r7
 800434c:	bd90      	pop	{r4, r7, pc}

0800434e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b082      	sub	sp, #8
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	460b      	mov	r3, r1
 8004358:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <HAL_PCD_SetAddress+0x1a>
 8004364:	2302      	movs	r3, #2
 8004366:	e013      	b.n	8004390 <HAL_PCD_SetAddress+0x42>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	78fa      	ldrb	r2, [r7, #3]
 8004374:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	78fa      	ldrb	r2, [r7, #3]
 800437e:	4611      	mov	r1, r2
 8004380:	4618      	mov	r0, r3
 8004382:	f003 ff96 	bl	80082b2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	4608      	mov	r0, r1
 80043a2:	4611      	mov	r1, r2
 80043a4:	461a      	mov	r2, r3
 80043a6:	4603      	mov	r3, r0
 80043a8:	70fb      	strb	r3, [r7, #3]
 80043aa:	460b      	mov	r3, r1
 80043ac:	803b      	strh	r3, [r7, #0]
 80043ae:	4613      	mov	r3, r2
 80043b0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80043b2:	2300      	movs	r3, #0
 80043b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	da0f      	bge.n	80043de <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043be:	78fb      	ldrb	r3, [r7, #3]
 80043c0:	f003 020f 	and.w	r2, r3, #15
 80043c4:	4613      	mov	r3, r2
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	1a9b      	subs	r3, r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	3338      	adds	r3, #56	; 0x38
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	4413      	add	r3, r2
 80043d2:	3304      	adds	r3, #4
 80043d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2201      	movs	r2, #1
 80043da:	705a      	strb	r2, [r3, #1]
 80043dc:	e00f      	b.n	80043fe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043de:	78fb      	ldrb	r3, [r7, #3]
 80043e0:	f003 020f 	and.w	r2, r3, #15
 80043e4:	4613      	mov	r3, r2
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	1a9b      	subs	r3, r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	4413      	add	r3, r2
 80043f4:	3304      	adds	r3, #4
 80043f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80043fe:	78fb      	ldrb	r3, [r7, #3]
 8004400:	f003 030f 	and.w	r3, r3, #15
 8004404:	b2da      	uxtb	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800440a:	883a      	ldrh	r2, [r7, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	78ba      	ldrb	r2, [r7, #2]
 8004414:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	785b      	ldrb	r3, [r3, #1]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d004      	beq.n	8004428 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004428:	78bb      	ldrb	r3, [r7, #2]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d102      	bne.n	8004434 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800443a:	2b01      	cmp	r3, #1
 800443c:	d101      	bne.n	8004442 <HAL_PCD_EP_Open+0xaa>
 800443e:	2302      	movs	r3, #2
 8004440:	e00e      	b.n	8004460 <HAL_PCD_EP_Open+0xc8>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68f9      	ldr	r1, [r7, #12]
 8004450:	4618      	mov	r0, r3
 8004452:	f003 f901 	bl	8007658 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800445e:	7afb      	ldrb	r3, [r7, #11]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	460b      	mov	r3, r1
 8004472:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004474:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004478:	2b00      	cmp	r3, #0
 800447a:	da0f      	bge.n	800449c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800447c:	78fb      	ldrb	r3, [r7, #3]
 800447e:	f003 020f 	and.w	r2, r3, #15
 8004482:	4613      	mov	r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	1a9b      	subs	r3, r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	3338      	adds	r3, #56	; 0x38
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	4413      	add	r3, r2
 8004490:	3304      	adds	r3, #4
 8004492:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2201      	movs	r2, #1
 8004498:	705a      	strb	r2, [r3, #1]
 800449a:	e00f      	b.n	80044bc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800449c:	78fb      	ldrb	r3, [r7, #3]
 800449e:	f003 020f 	and.w	r2, r3, #15
 80044a2:	4613      	mov	r3, r2
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	1a9b      	subs	r3, r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	4413      	add	r3, r2
 80044b2:	3304      	adds	r3, #4
 80044b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80044bc:	78fb      	ldrb	r3, [r7, #3]
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_PCD_EP_Close+0x6e>
 80044d2:	2302      	movs	r3, #2
 80044d4:	e00e      	b.n	80044f4 <HAL_PCD_EP_Close+0x8c>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68f9      	ldr	r1, [r7, #12]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f003 f93f 	bl	8007768 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	607a      	str	r2, [r7, #4]
 8004506:	603b      	str	r3, [r7, #0]
 8004508:	460b      	mov	r3, r1
 800450a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800450c:	7afb      	ldrb	r3, [r7, #11]
 800450e:	f003 020f 	and.w	r2, r3, #15
 8004512:	4613      	mov	r3, r2
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	1a9b      	subs	r3, r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4413      	add	r3, r2
 8004522:	3304      	adds	r3, #4
 8004524:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2200      	movs	r2, #0
 8004536:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	2200      	movs	r2, #0
 800453c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800453e:	7afb      	ldrb	r3, [r7, #11]
 8004540:	f003 030f 	and.w	r3, r3, #15
 8004544:	b2da      	uxtb	r2, r3
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d102      	bne.n	8004558 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004558:	7afb      	ldrb	r3, [r7, #11]
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	2b00      	cmp	r3, #0
 8004560:	d109      	bne.n	8004576 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	b2db      	uxtb	r3, r3
 800456c:	461a      	mov	r2, r3
 800456e:	6979      	ldr	r1, [r7, #20]
 8004570:	f003 fc1a 	bl	8007da8 <USB_EP0StartXfer>
 8004574:	e008      	b.n	8004588 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6818      	ldr	r0, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	b2db      	uxtb	r3, r3
 8004580:	461a      	mov	r2, r3
 8004582:	6979      	ldr	r1, [r7, #20]
 8004584:	f003 f9cc 	bl	8007920 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b086      	sub	sp, #24
 8004596:	af00      	add	r7, sp, #0
 8004598:	60f8      	str	r0, [r7, #12]
 800459a:	607a      	str	r2, [r7, #4]
 800459c:	603b      	str	r3, [r7, #0]
 800459e:	460b      	mov	r3, r1
 80045a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045a2:	7afb      	ldrb	r3, [r7, #11]
 80045a4:	f003 020f 	and.w	r2, r3, #15
 80045a8:	4613      	mov	r3, r2
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	1a9b      	subs	r3, r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	3338      	adds	r3, #56	; 0x38
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	4413      	add	r3, r2
 80045b6:	3304      	adds	r3, #4
 80045b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2200      	movs	r2, #0
 80045ca:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2201      	movs	r2, #1
 80045d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045d2:	7afb      	ldrb	r3, [r7, #11]
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d102      	bne.n	80045ec <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045ec:	7afb      	ldrb	r3, [r7, #11]
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d109      	bne.n	800460a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6818      	ldr	r0, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	461a      	mov	r2, r3
 8004602:	6979      	ldr	r1, [r7, #20]
 8004604:	f003 fbd0 	bl	8007da8 <USB_EP0StartXfer>
 8004608:	e008      	b.n	800461c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6818      	ldr	r0, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	b2db      	uxtb	r3, r3
 8004614:	461a      	mov	r2, r3
 8004616:	6979      	ldr	r1, [r7, #20]
 8004618:	f003 f982 	bl	8007920 <USB_EPStartXfer>
  }

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b084      	sub	sp, #16
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	460b      	mov	r3, r1
 8004630:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004632:	78fb      	ldrb	r3, [r7, #3]
 8004634:	f003 020f 	and.w	r2, r3, #15
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	429a      	cmp	r2, r3
 800463e:	d901      	bls.n	8004644 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e050      	b.n	80046e6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004644:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004648:	2b00      	cmp	r3, #0
 800464a:	da0f      	bge.n	800466c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800464c:	78fb      	ldrb	r3, [r7, #3]
 800464e:	f003 020f 	and.w	r2, r3, #15
 8004652:	4613      	mov	r3, r2
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	1a9b      	subs	r3, r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	3338      	adds	r3, #56	; 0x38
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	4413      	add	r3, r2
 8004660:	3304      	adds	r3, #4
 8004662:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2201      	movs	r2, #1
 8004668:	705a      	strb	r2, [r3, #1]
 800466a:	e00d      	b.n	8004688 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800466c:	78fa      	ldrb	r2, [r7, #3]
 800466e:	4613      	mov	r3, r2
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	1a9b      	subs	r3, r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	4413      	add	r3, r2
 800467e:	3304      	adds	r3, #4
 8004680:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2201      	movs	r2, #1
 800468c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800468e:	78fb      	ldrb	r3, [r7, #3]
 8004690:	f003 030f 	and.w	r3, r3, #15
 8004694:	b2da      	uxtb	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <HAL_PCD_EP_SetStall+0x82>
 80046a4:	2302      	movs	r3, #2
 80046a6:	e01e      	b.n	80046e6 <HAL_PCD_EP_SetStall+0xc0>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68f9      	ldr	r1, [r7, #12]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f003 fd27 	bl	800810a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046bc:	78fb      	ldrb	r3, [r7, #3]
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10a      	bne.n	80046dc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6818      	ldr	r0, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	b2d9      	uxtb	r1, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80046d6:	461a      	mov	r2, r3
 80046d8:	f003 ff18 	bl	800850c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b084      	sub	sp, #16
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
 80046f6:	460b      	mov	r3, r1
 80046f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80046fa:	78fb      	ldrb	r3, [r7, #3]
 80046fc:	f003 020f 	and.w	r2, r3, #15
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	429a      	cmp	r2, r3
 8004706:	d901      	bls.n	800470c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e042      	b.n	8004792 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800470c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004710:	2b00      	cmp	r3, #0
 8004712:	da0f      	bge.n	8004734 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004714:	78fb      	ldrb	r3, [r7, #3]
 8004716:	f003 020f 	and.w	r2, r3, #15
 800471a:	4613      	mov	r3, r2
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	1a9b      	subs	r3, r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	3338      	adds	r3, #56	; 0x38
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	4413      	add	r3, r2
 8004728:	3304      	adds	r3, #4
 800472a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2201      	movs	r2, #1
 8004730:	705a      	strb	r2, [r3, #1]
 8004732:	e00f      	b.n	8004754 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004734:	78fb      	ldrb	r3, [r7, #3]
 8004736:	f003 020f 	and.w	r2, r3, #15
 800473a:	4613      	mov	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	1a9b      	subs	r3, r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	4413      	add	r3, r2
 800474a:	3304      	adds	r3, #4
 800474c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800475a:	78fb      	ldrb	r3, [r7, #3]
 800475c:	f003 030f 	and.w	r3, r3, #15
 8004760:	b2da      	uxtb	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800476c:	2b01      	cmp	r3, #1
 800476e:	d101      	bne.n	8004774 <HAL_PCD_EP_ClrStall+0x86>
 8004770:	2302      	movs	r3, #2
 8004772:	e00e      	b.n	8004792 <HAL_PCD_EP_ClrStall+0xa4>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68f9      	ldr	r1, [r7, #12]
 8004782:	4618      	mov	r0, r3
 8004784:	f003 fd2f 	bl	80081e6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b08a      	sub	sp, #40	; 0x28
 800479e:	af02      	add	r7, sp, #8
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	4613      	mov	r3, r2
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	1a9b      	subs	r3, r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	3338      	adds	r3, #56	; 0x38
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	4413      	add	r3, r2
 80047be:	3304      	adds	r3, #4
 80047c0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	699a      	ldr	r2, [r3, #24]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d901      	bls.n	80047d2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e06c      	b.n	80048ac <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	695a      	ldr	r2, [r3, #20]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	69fa      	ldr	r2, [r7, #28]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d902      	bls.n	80047ee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	3303      	adds	r3, #3
 80047f2:	089b      	lsrs	r3, r3, #2
 80047f4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047f6:	e02b      	b.n	8004850 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	695a      	ldr	r2, [r3, #20]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	69fa      	ldr	r2, [r7, #28]
 800480a:	429a      	cmp	r2, r3
 800480c:	d902      	bls.n	8004814 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	3303      	adds	r3, #3
 8004818:	089b      	lsrs	r3, r3, #2
 800481a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	68d9      	ldr	r1, [r3, #12]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	b2da      	uxtb	r2, r3
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800482c:	b2db      	uxtb	r3, r3
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	4603      	mov	r3, r0
 8004832:	6978      	ldr	r0, [r7, #20]
 8004834:	f003 fc0b 	bl	800804e <USB_WritePacket>

    ep->xfer_buff  += len;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	441a      	add	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	699a      	ldr	r2, [r3, #24]
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	441a      	add	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	b29b      	uxth	r3, r3
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	429a      	cmp	r2, r3
 8004864:	d809      	bhi.n	800487a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	699a      	ldr	r2, [r3, #24]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800486e:	429a      	cmp	r2, r3
 8004870:	d203      	bcs.n	800487a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1be      	bne.n	80047f8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	695a      	ldr	r2, [r3, #20]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	429a      	cmp	r2, r3
 8004884:	d811      	bhi.n	80048aa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	f003 030f 	and.w	r3, r3, #15
 800488c:	2201      	movs	r2, #1
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	43db      	mvns	r3, r3
 80048a0:	6939      	ldr	r1, [r7, #16]
 80048a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048a6:	4013      	ands	r3, r2
 80048a8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3720      	adds	r7, #32
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	333c      	adds	r3, #60	; 0x3c
 80048cc:	3304      	adds	r3, #4
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	f040 80a0 	bne.w	8004a2c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d015      	beq.n	8004922 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4a72      	ldr	r2, [pc, #456]	; (8004ac4 <PCD_EP_OutXfrComplete_int+0x210>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	f240 80dd 	bls.w	8004aba <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 80d7 	beq.w	8004aba <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	015a      	lsls	r2, r3, #5
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	4413      	add	r3, r2
 8004914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004918:	461a      	mov	r2, r3
 800491a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800491e:	6093      	str	r3, [r2, #8]
 8004920:	e0cb      	b.n	8004aba <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f003 0320 	and.w	r3, r3, #32
 8004928:	2b00      	cmp	r3, #0
 800492a:	d009      	beq.n	8004940 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004938:	461a      	mov	r2, r3
 800493a:	2320      	movs	r3, #32
 800493c:	6093      	str	r3, [r2, #8]
 800493e:	e0bc      	b.n	8004aba <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004946:	2b00      	cmp	r3, #0
 8004948:	f040 80b7 	bne.w	8004aba <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4a5d      	ldr	r2, [pc, #372]	; (8004ac4 <PCD_EP_OutXfrComplete_int+0x210>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d90f      	bls.n	8004974 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00a      	beq.n	8004974 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496a:	461a      	mov	r2, r3
 800496c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004970:	6093      	str	r3, [r2, #8]
 8004972:	e0a2      	b.n	8004aba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004974:	6879      	ldr	r1, [r7, #4]
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	4613      	mov	r3, r2
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	1a9b      	subs	r3, r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	440b      	add	r3, r1
 8004982:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004986:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	0159      	lsls	r1, r3, #5
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	440b      	add	r3, r1
 8004990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800499a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	4613      	mov	r3, r2
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	1a9b      	subs	r3, r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4403      	add	r3, r0
 80049aa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80049ae:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	4613      	mov	r3, r2
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	1a9b      	subs	r3, r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80049c2:	6819      	ldr	r1, [r3, #0]
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	4613      	mov	r3, r2
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	1a9b      	subs	r3, r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4403      	add	r3, r0
 80049d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4419      	add	r1, r3
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	4613      	mov	r3, r2
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4403      	add	r3, r0
 80049e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80049ec:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d114      	bne.n	8004a1e <PCD_EP_OutXfrComplete_int+0x16a>
 80049f4:	6879      	ldr	r1, [r7, #4]
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	4613      	mov	r3, r2
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	1a9b      	subs	r3, r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	440b      	add	r3, r1
 8004a02:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d108      	bne.n	8004a1e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6818      	ldr	r0, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a16:	461a      	mov	r2, r3
 8004a18:	2101      	movs	r1, #1
 8004a1a:	f003 fd77 	bl	800850c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	4619      	mov	r1, r3
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f005 fafd 	bl	800a024 <HAL_PCD_DataOutStageCallback>
 8004a2a:	e046      	b.n	8004aba <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4a26      	ldr	r2, [pc, #152]	; (8004ac8 <PCD_EP_OutXfrComplete_int+0x214>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d124      	bne.n	8004a7e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00a      	beq.n	8004a54 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a50:	6093      	str	r3, [r2, #8]
 8004a52:	e032      	b.n	8004aba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d008      	beq.n	8004a70 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	2320      	movs	r3, #32
 8004a6e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	4619      	mov	r1, r3
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f005 fad4 	bl	800a024 <HAL_PCD_DataOutStageCallback>
 8004a7c:	e01d      	b.n	8004aba <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d114      	bne.n	8004aae <PCD_EP_OutXfrComplete_int+0x1fa>
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	1a9b      	subs	r3, r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	440b      	add	r3, r1
 8004a92:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d108      	bne.n	8004aae <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6818      	ldr	r0, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	f003 fd2f 	bl	800850c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f005 fab5 	bl	800a024 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	4f54300a 	.word	0x4f54300a
 8004ac8:	4f54310a 	.word	0x4f54310a

08004acc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	333c      	adds	r3, #60	; 0x3c
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4a15      	ldr	r2, [pc, #84]	; (8004b54 <PCD_EP_OutSetupPacket_int+0x88>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d90e      	bls.n	8004b20 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d009      	beq.n	8004b20 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b18:	461a      	mov	r2, r3
 8004b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b1e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f005 fa6d 	bl	800a000 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4a0a      	ldr	r2, [pc, #40]	; (8004b54 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d90c      	bls.n	8004b48 <PCD_EP_OutSetupPacket_int+0x7c>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d108      	bne.n	8004b48 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6818      	ldr	r0, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004b40:	461a      	mov	r2, r3
 8004b42:	2101      	movs	r1, #1
 8004b44:	f003 fce2 	bl	800850c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	4f54300a 	.word	0x4f54300a

08004b58 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	460b      	mov	r3, r1
 8004b62:	70fb      	strb	r3, [r7, #3]
 8004b64:	4613      	mov	r3, r2
 8004b66:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004b70:	78fb      	ldrb	r3, [r7, #3]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d107      	bne.n	8004b86 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004b76:	883b      	ldrh	r3, [r7, #0]
 8004b78:	0419      	lsls	r1, r3, #16
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	629a      	str	r2, [r3, #40]	; 0x28
 8004b84:	e028      	b.n	8004bd8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8c:	0c1b      	lsrs	r3, r3, #16
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	4413      	add	r3, r2
 8004b92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b94:	2300      	movs	r3, #0
 8004b96:	73fb      	strb	r3, [r7, #15]
 8004b98:	e00d      	b.n	8004bb6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ba0:	3340      	adds	r3, #64	; 0x40
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	0c1b      	lsrs	r3, r3, #16
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	4413      	add	r3, r2
 8004bae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	73fb      	strb	r3, [r7, #15]
 8004bb6:	7bfa      	ldrb	r2, [r7, #15]
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d3ec      	bcc.n	8004b9a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004bc0:	883b      	ldrh	r3, [r7, #0]
 8004bc2:	0418      	lsls	r0, r3, #16
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6819      	ldr	r1, [r3, #0]
 8004bc8:	78fb      	ldrb	r3, [r7, #3]
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	4302      	orrs	r2, r0
 8004bd0:	3340      	adds	r3, #64	; 0x40
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	887a      	ldrh	r2, [r7, #2]
 8004bf8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c3a:	f043 0303 	orr.w	r3, r3, #3
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e0cc      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c64:	4b68      	ldr	r3, [pc, #416]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d90c      	bls.n	8004c8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c72:	4b65      	ldr	r3, [pc, #404]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c7a:	4b63      	ldr	r3, [pc, #396]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 030f 	and.w	r3, r3, #15
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d001      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e0b8      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d020      	beq.n	8004cda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d005      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ca4:	4b59      	ldr	r3, [pc, #356]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	4a58      	ldr	r2, [pc, #352]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004caa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0308 	and.w	r3, r3, #8
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d005      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cbc:	4b53      	ldr	r3, [pc, #332]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	4a52      	ldr	r2, [pc, #328]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cc8:	4b50      	ldr	r3, [pc, #320]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	494d      	ldr	r1, [pc, #308]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d044      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d107      	bne.n	8004cfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cee:	4b47      	ldr	r3, [pc, #284]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d119      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e07f      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d003      	beq.n	8004d0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d0a:	2b03      	cmp	r3, #3
 8004d0c:	d107      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d0e:	4b3f      	ldr	r3, [pc, #252]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d109      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e06f      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d1e:	4b3b      	ldr	r3, [pc, #236]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e067      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d2e:	4b37      	ldr	r3, [pc, #220]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f023 0203 	bic.w	r2, r3, #3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	4934      	ldr	r1, [pc, #208]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d40:	f7fe f83a 	bl	8002db8 <HAL_GetTick>
 8004d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d46:	e00a      	b.n	8004d5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d48:	f7fe f836 	bl	8002db8 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e04f      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d5e:	4b2b      	ldr	r3, [pc, #172]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 020c 	and.w	r2, r3, #12
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d1eb      	bne.n	8004d48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d70:	4b25      	ldr	r3, [pc, #148]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 030f 	and.w	r3, r3, #15
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d20c      	bcs.n	8004d98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d7e:	4b22      	ldr	r3, [pc, #136]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d86:	4b20      	ldr	r3, [pc, #128]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 030f 	and.w	r3, r3, #15
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d001      	beq.n	8004d98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e032      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d008      	beq.n	8004db6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004da4:	4b19      	ldr	r3, [pc, #100]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	4916      	ldr	r1, [pc, #88]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d009      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dc2:	4b12      	ldr	r3, [pc, #72]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	490e      	ldr	r1, [pc, #56]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004dd6:	f000 fb7f 	bl	80054d8 <HAL_RCC_GetSysClockFreq>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	091b      	lsrs	r3, r3, #4
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	490a      	ldr	r1, [pc, #40]	; (8004e10 <HAL_RCC_ClockConfig+0x1c0>)
 8004de8:	5ccb      	ldrb	r3, [r1, r3]
 8004dea:	fa22 f303 	lsr.w	r3, r2, r3
 8004dee:	4a09      	ldr	r2, [pc, #36]	; (8004e14 <HAL_RCC_ClockConfig+0x1c4>)
 8004df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004df2:	4b09      	ldr	r3, [pc, #36]	; (8004e18 <HAL_RCC_ClockConfig+0x1c8>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fd ff9a 	bl	8002d30 <HAL_InitTick>

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	40023c00 	.word	0x40023c00
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	08010f34 	.word	0x08010f34
 8004e14:	20000000 	.word	0x20000000
 8004e18:	20000004 	.word	0x20000004

08004e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e20:	4b03      	ldr	r3, [pc, #12]	; (8004e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e22:	681b      	ldr	r3, [r3, #0]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	20000000 	.word	0x20000000

08004e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e38:	f7ff fff0 	bl	8004e1c <HAL_RCC_GetHCLKFreq>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	0a9b      	lsrs	r3, r3, #10
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	4903      	ldr	r1, [pc, #12]	; (8004e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e4a:	5ccb      	ldrb	r3, [r1, r3]
 8004e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	40023800 	.word	0x40023800
 8004e58:	08010f44 	.word	0x08010f44

08004e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e60:	f7ff ffdc 	bl	8004e1c <HAL_RCC_GetHCLKFreq>
 8004e64:	4602      	mov	r2, r0
 8004e66:	4b05      	ldr	r3, [pc, #20]	; (8004e7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	0b5b      	lsrs	r3, r3, #13
 8004e6c:	f003 0307 	and.w	r3, r3, #7
 8004e70:	4903      	ldr	r1, [pc, #12]	; (8004e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e72:	5ccb      	ldrb	r3, [r1, r3]
 8004e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	08010f44 	.word	0x08010f44

08004e84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08c      	sub	sp, #48	; 0x30
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d010      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004ebc:	4b6f      	ldr	r3, [pc, #444]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ec2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eca:	496c      	ldr	r1, [pc, #432]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004eda:	2301      	movs	r3, #1
 8004edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d010      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004eea:	4b64      	ldr	r3, [pc, #400]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ef0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef8:	4960      	ldr	r1, [pc, #384]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d017      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f18:	4b58      	ldr	r3, [pc, #352]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f26:	4955      	ldr	r1, [pc, #340]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f36:	d101      	bne.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004f44:	2301      	movs	r3, #1
 8004f46:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0308 	and.w	r3, r3, #8
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d017      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f54:	4b49      	ldr	r3, [pc, #292]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f62:	4946      	ldr	r1, [pc, #280]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f72:	d101      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004f74:	2301      	movs	r3, #1
 8004f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004f80:	2301      	movs	r3, #1
 8004f82:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0320 	and.w	r3, r3, #32
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 808a 	beq.w	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f92:	2300      	movs	r3, #0
 8004f94:	60bb      	str	r3, [r7, #8]
 8004f96:	4b39      	ldr	r3, [pc, #228]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	4a38      	ldr	r2, [pc, #224]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8004fa2:	4b36      	ldr	r3, [pc, #216]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004faa:	60bb      	str	r3, [r7, #8]
 8004fac:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004fae:	4b34      	ldr	r3, [pc, #208]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a33      	ldr	r2, [pc, #204]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fb8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004fba:	f7fd fefd 	bl	8002db8 <HAL_GetTick>
 8004fbe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fc0:	e008      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004fc2:	f7fd fef9 	bl	8002db8 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e278      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fd4:	4b2a      	ldr	r3, [pc, #168]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0f0      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fe0:	4b26      	ldr	r3, [pc, #152]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fe8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d02f      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff8:	6a3a      	ldr	r2, [r7, #32]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d028      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ffe:	4b1f      	ldr	r3, [pc, #124]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005006:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005008:	4b1e      	ldr	r3, [pc, #120]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800500a:	2201      	movs	r2, #1
 800500c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800500e:	4b1d      	ldr	r3, [pc, #116]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005014:	4a19      	ldr	r2, [pc, #100]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800501a:	4b18      	ldr	r3, [pc, #96]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800501c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b01      	cmp	r3, #1
 8005024:	d114      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005026:	f7fd fec7 	bl	8002db8 <HAL_GetTick>
 800502a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800502c:	e00a      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800502e:	f7fd fec3 	bl	8002db8 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	f241 3288 	movw	r2, #5000	; 0x1388
 800503c:	4293      	cmp	r3, r2
 800503e:	d901      	bls.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e240      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005044:	4b0d      	ldr	r3, [pc, #52]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0ee      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005054:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005058:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800505c:	d114      	bne.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800505e:	4b07      	ldr	r3, [pc, #28]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800506e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005072:	4902      	ldr	r1, [pc, #8]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005074:	4313      	orrs	r3, r2
 8005076:	608b      	str	r3, [r1, #8]
 8005078:	e00c      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800507a:	bf00      	nop
 800507c:	40023800 	.word	0x40023800
 8005080:	40007000 	.word	0x40007000
 8005084:	42470e40 	.word	0x42470e40
 8005088:	4b4a      	ldr	r3, [pc, #296]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	4a49      	ldr	r2, [pc, #292]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800508e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005092:	6093      	str	r3, [r2, #8]
 8005094:	4b47      	ldr	r3, [pc, #284]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005096:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050a0:	4944      	ldr	r1, [pc, #272]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0310 	and.w	r3, r3, #16
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d004      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80050b8:	4b3f      	ldr	r3, [pc, #252]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80050ba:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00a      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80050c8:	4b3a      	ldr	r3, [pc, #232]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80050ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d6:	4937      	ldr	r1, [pc, #220]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80050ea:	4b32      	ldr	r3, [pc, #200]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80050ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050f0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050f8:	492e      	ldr	r1, [pc, #184]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005108:	2b00      	cmp	r3, #0
 800510a:	d011      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800510c:	4b29      	ldr	r3, [pc, #164]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800510e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005112:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511a:	4926      	ldr	r1, [pc, #152]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800511c:	4313      	orrs	r3, r2
 800511e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005126:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800512a:	d101      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800512c:	2301      	movs	r3, #1
 800512e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800513c:	4b1d      	ldr	r3, [pc, #116]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800513e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005142:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514a:	491a      	ldr	r1, [pc, #104]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800515a:	2b00      	cmp	r3, #0
 800515c:	d011      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800515e:	4b15      	ldr	r3, [pc, #84]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005164:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800516c:	4911      	ldr	r1, [pc, #68]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800517c:	d101      	bne.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800517e:	2301      	movs	r3, #1
 8005180:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005184:	2b01      	cmp	r3, #1
 8005186:	d005      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005190:	f040 80ff 	bne.w	8005392 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005194:	4b09      	ldr	r3, [pc, #36]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005196:	2200      	movs	r2, #0
 8005198:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800519a:	f7fd fe0d 	bl	8002db8 <HAL_GetTick>
 800519e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051a0:	e00e      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051a2:	f7fd fe09 	bl	8002db8 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d907      	bls.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e188      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80051b4:	40023800 	.word	0x40023800
 80051b8:	424711e0 	.word	0x424711e0
 80051bc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051c0:	4b7e      	ldr	r3, [pc, #504]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1ea      	bne.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d009      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d028      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d124      	bne.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80051f4:	4b71      	ldr	r3, [pc, #452]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80051f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051fa:	0c1b      	lsrs	r3, r3, #16
 80051fc:	f003 0303 	and.w	r3, r3, #3
 8005200:	3301      	adds	r3, #1
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005206:	4b6d      	ldr	r3, [pc, #436]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800520c:	0e1b      	lsrs	r3, r3, #24
 800520e:	f003 030f 	and.w	r3, r3, #15
 8005212:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	019b      	lsls	r3, r3, #6
 800521e:	431a      	orrs	r2, r3
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	085b      	lsrs	r3, r3, #1
 8005224:	3b01      	subs	r3, #1
 8005226:	041b      	lsls	r3, r3, #16
 8005228:	431a      	orrs	r2, r3
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	061b      	lsls	r3, r3, #24
 800522e:	431a      	orrs	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	071b      	lsls	r3, r3, #28
 8005236:	4961      	ldr	r1, [pc, #388]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005238:	4313      	orrs	r3, r2
 800523a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0304 	and.w	r3, r3, #4
 8005246:	2b00      	cmp	r3, #0
 8005248:	d004      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005252:	d00a      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800525c:	2b00      	cmp	r3, #0
 800525e:	d035      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005264:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005268:	d130      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800526a:	4b54      	ldr	r3, [pc, #336]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800526c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005270:	0c1b      	lsrs	r3, r3, #16
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	3301      	adds	r3, #1
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800527c:	4b4f      	ldr	r3, [pc, #316]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800527e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005282:	0f1b      	lsrs	r3, r3, #28
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	019b      	lsls	r3, r3, #6
 8005294:	431a      	orrs	r2, r3
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	085b      	lsrs	r3, r3, #1
 800529a:	3b01      	subs	r3, #1
 800529c:	041b      	lsls	r3, r3, #16
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	061b      	lsls	r3, r3, #24
 80052a6:	431a      	orrs	r2, r3
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	071b      	lsls	r3, r3, #28
 80052ac:	4943      	ldr	r1, [pc, #268]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80052b4:	4b41      	ldr	r3, [pc, #260]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052ba:	f023 021f 	bic.w	r2, r3, #31
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c2:	3b01      	subs	r3, #1
 80052c4:	493d      	ldr	r1, [pc, #244]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d029      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052e0:	d124      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80052e2:	4b36      	ldr	r3, [pc, #216]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052e8:	0c1b      	lsrs	r3, r3, #16
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	3301      	adds	r3, #1
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052f4:	4b31      	ldr	r3, [pc, #196]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052fa:	0f1b      	lsrs	r3, r3, #28
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	019b      	lsls	r3, r3, #6
 800530c:	431a      	orrs	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	085b      	lsrs	r3, r3, #1
 8005314:	3b01      	subs	r3, #1
 8005316:	041b      	lsls	r3, r3, #16
 8005318:	431a      	orrs	r2, r3
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	061b      	lsls	r3, r3, #24
 800531e:	431a      	orrs	r2, r3
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	071b      	lsls	r3, r3, #28
 8005324:	4925      	ldr	r1, [pc, #148]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005326:	4313      	orrs	r3, r2
 8005328:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005334:	2b00      	cmp	r3, #0
 8005336:	d016      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	019b      	lsls	r3, r3, #6
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	085b      	lsrs	r3, r3, #1
 800534a:	3b01      	subs	r3, #1
 800534c:	041b      	lsls	r3, r3, #16
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	061b      	lsls	r3, r3, #24
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	071b      	lsls	r3, r3, #28
 800535e:	4917      	ldr	r1, [pc, #92]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005360:	4313      	orrs	r3, r2
 8005362:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005366:	4b16      	ldr	r3, [pc, #88]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005368:	2201      	movs	r2, #1
 800536a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800536c:	f7fd fd24 	bl	8002db8 <HAL_GetTick>
 8005370:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005372:	e008      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005374:	f7fd fd20 	bl	8002db8 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b02      	cmp	r3, #2
 8005380:	d901      	bls.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e09f      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005386:	4b0d      	ldr	r3, [pc, #52]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0f0      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8005392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005394:	2b01      	cmp	r3, #1
 8005396:	f040 8095 	bne.w	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800539a:	4b0a      	ldr	r3, [pc, #40]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800539c:	2200      	movs	r2, #0
 800539e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053a0:	f7fd fd0a 	bl	8002db8 <HAL_GetTick>
 80053a4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80053a6:	e00f      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80053a8:	f7fd fd06 	bl	8002db8 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d908      	bls.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e085      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80053ba:	bf00      	nop
 80053bc:	40023800 	.word	0x40023800
 80053c0:	42470068 	.word	0x42470068
 80053c4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80053c8:	4b41      	ldr	r3, [pc, #260]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053d4:	d0e8      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x566>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d009      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d02b      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d127      	bne.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80053fe:	4b34      	ldr	r3, [pc, #208]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005404:	0c1b      	lsrs	r3, r3, #16
 8005406:	f003 0303 	and.w	r3, r3, #3
 800540a:	3301      	adds	r3, #1
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	699a      	ldr	r2, [r3, #24]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	019b      	lsls	r3, r3, #6
 800541a:	431a      	orrs	r2, r3
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	085b      	lsrs	r3, r3, #1
 8005420:	3b01      	subs	r3, #1
 8005422:	041b      	lsls	r3, r3, #16
 8005424:	431a      	orrs	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	061b      	lsls	r3, r3, #24
 800542c:	4928      	ldr	r1, [pc, #160]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005434:	4b26      	ldr	r3, [pc, #152]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005436:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800543a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005442:	3b01      	subs	r3, #1
 8005444:	021b      	lsls	r3, r3, #8
 8005446:	4922      	ldr	r1, [pc, #136]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005448:	4313      	orrs	r3, r2
 800544a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005456:	2b00      	cmp	r3, #0
 8005458:	d01d      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005462:	d118      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005464:	4b1a      	ldr	r3, [pc, #104]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546a:	0e1b      	lsrs	r3, r3, #24
 800546c:	f003 030f 	and.w	r3, r3, #15
 8005470:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	699a      	ldr	r2, [r3, #24]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	019b      	lsls	r3, r3, #6
 800547c:	431a      	orrs	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	085b      	lsrs	r3, r3, #1
 8005484:	3b01      	subs	r3, #1
 8005486:	041b      	lsls	r3, r3, #16
 8005488:	431a      	orrs	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	061b      	lsls	r3, r3, #24
 800548e:	4910      	ldr	r1, [pc, #64]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005490:	4313      	orrs	r3, r2
 8005492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005496:	4b0f      	ldr	r3, [pc, #60]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005498:	2201      	movs	r2, #1
 800549a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800549c:	f7fd fc8c 	bl	8002db8 <HAL_GetTick>
 80054a0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054a2:	e008      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80054a4:	f7fd fc88 	bl	8002db8 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e007      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054b6:	4b06      	ldr	r3, [pc, #24]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054c2:	d1ef      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3730      	adds	r7, #48	; 0x30
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	40023800 	.word	0x40023800
 80054d4:	42470070 	.word	0x42470070

080054d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054dc:	b088      	sub	sp, #32
 80054de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80054e8:	2300      	movs	r3, #0
 80054ea:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054f4:	4bce      	ldr	r3, [pc, #824]	; (8005830 <HAL_RCC_GetSysClockFreq+0x358>)
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f003 030c 	and.w	r3, r3, #12
 80054fc:	2b0c      	cmp	r3, #12
 80054fe:	f200 818d 	bhi.w	800581c <HAL_RCC_GetSysClockFreq+0x344>
 8005502:	a201      	add	r2, pc, #4	; (adr r2, 8005508 <HAL_RCC_GetSysClockFreq+0x30>)
 8005504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005508:	0800553d 	.word	0x0800553d
 800550c:	0800581d 	.word	0x0800581d
 8005510:	0800581d 	.word	0x0800581d
 8005514:	0800581d 	.word	0x0800581d
 8005518:	08005543 	.word	0x08005543
 800551c:	0800581d 	.word	0x0800581d
 8005520:	0800581d 	.word	0x0800581d
 8005524:	0800581d 	.word	0x0800581d
 8005528:	08005549 	.word	0x08005549
 800552c:	0800581d 	.word	0x0800581d
 8005530:	0800581d 	.word	0x0800581d
 8005534:	0800581d 	.word	0x0800581d
 8005538:	080056bd 	.word	0x080056bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800553c:	4bbd      	ldr	r3, [pc, #756]	; (8005834 <HAL_RCC_GetSysClockFreq+0x35c>)
 800553e:	61bb      	str	r3, [r7, #24]
       break;
 8005540:	e16f      	b.n	8005822 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005542:	4bbd      	ldr	r3, [pc, #756]	; (8005838 <HAL_RCC_GetSysClockFreq+0x360>)
 8005544:	61bb      	str	r3, [r7, #24]
      break;
 8005546:	e16c      	b.n	8005822 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005548:	4bb9      	ldr	r3, [pc, #740]	; (8005830 <HAL_RCC_GetSysClockFreq+0x358>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005550:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005552:	4bb7      	ldr	r3, [pc, #732]	; (8005830 <HAL_RCC_GetSysClockFreq+0x358>)
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d053      	beq.n	8005606 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800555e:	4bb4      	ldr	r3, [pc, #720]	; (8005830 <HAL_RCC_GetSysClockFreq+0x358>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	099b      	lsrs	r3, r3, #6
 8005564:	461a      	mov	r2, r3
 8005566:	f04f 0300 	mov.w	r3, #0
 800556a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800556e:	f04f 0100 	mov.w	r1, #0
 8005572:	ea02 0400 	and.w	r4, r2, r0
 8005576:	603c      	str	r4, [r7, #0]
 8005578:	400b      	ands	r3, r1
 800557a:	607b      	str	r3, [r7, #4]
 800557c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005580:	4620      	mov	r0, r4
 8005582:	4629      	mov	r1, r5
 8005584:	f04f 0200 	mov.w	r2, #0
 8005588:	f04f 0300 	mov.w	r3, #0
 800558c:	014b      	lsls	r3, r1, #5
 800558e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005592:	0142      	lsls	r2, r0, #5
 8005594:	4610      	mov	r0, r2
 8005596:	4619      	mov	r1, r3
 8005598:	4623      	mov	r3, r4
 800559a:	1ac0      	subs	r0, r0, r3
 800559c:	462b      	mov	r3, r5
 800559e:	eb61 0103 	sbc.w	r1, r1, r3
 80055a2:	f04f 0200 	mov.w	r2, #0
 80055a6:	f04f 0300 	mov.w	r3, #0
 80055aa:	018b      	lsls	r3, r1, #6
 80055ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80055b0:	0182      	lsls	r2, r0, #6
 80055b2:	1a12      	subs	r2, r2, r0
 80055b4:	eb63 0301 	sbc.w	r3, r3, r1
 80055b8:	f04f 0000 	mov.w	r0, #0
 80055bc:	f04f 0100 	mov.w	r1, #0
 80055c0:	00d9      	lsls	r1, r3, #3
 80055c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055c6:	00d0      	lsls	r0, r2, #3
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	4621      	mov	r1, r4
 80055ce:	1852      	adds	r2, r2, r1
 80055d0:	4629      	mov	r1, r5
 80055d2:	eb43 0101 	adc.w	r1, r3, r1
 80055d6:	460b      	mov	r3, r1
 80055d8:	f04f 0000 	mov.w	r0, #0
 80055dc:	f04f 0100 	mov.w	r1, #0
 80055e0:	0259      	lsls	r1, r3, #9
 80055e2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80055e6:	0250      	lsls	r0, r2, #9
 80055e8:	4602      	mov	r2, r0
 80055ea:	460b      	mov	r3, r1
 80055ec:	4610      	mov	r0, r2
 80055ee:	4619      	mov	r1, r3
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	461a      	mov	r2, r3
 80055f4:	f04f 0300 	mov.w	r3, #0
 80055f8:	f7fb fb12 	bl	8000c20 <__aeabi_uldivmod>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	4613      	mov	r3, r2
 8005602:	61fb      	str	r3, [r7, #28]
 8005604:	e04c      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005606:	4b8a      	ldr	r3, [pc, #552]	; (8005830 <HAL_RCC_GetSysClockFreq+0x358>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	099b      	lsrs	r3, r3, #6
 800560c:	461a      	mov	r2, r3
 800560e:	f04f 0300 	mov.w	r3, #0
 8005612:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005616:	f04f 0100 	mov.w	r1, #0
 800561a:	ea02 0a00 	and.w	sl, r2, r0
 800561e:	ea03 0b01 	and.w	fp, r3, r1
 8005622:	4650      	mov	r0, sl
 8005624:	4659      	mov	r1, fp
 8005626:	f04f 0200 	mov.w	r2, #0
 800562a:	f04f 0300 	mov.w	r3, #0
 800562e:	014b      	lsls	r3, r1, #5
 8005630:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005634:	0142      	lsls	r2, r0, #5
 8005636:	4610      	mov	r0, r2
 8005638:	4619      	mov	r1, r3
 800563a:	ebb0 000a 	subs.w	r0, r0, sl
 800563e:	eb61 010b 	sbc.w	r1, r1, fp
 8005642:	f04f 0200 	mov.w	r2, #0
 8005646:	f04f 0300 	mov.w	r3, #0
 800564a:	018b      	lsls	r3, r1, #6
 800564c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005650:	0182      	lsls	r2, r0, #6
 8005652:	1a12      	subs	r2, r2, r0
 8005654:	eb63 0301 	sbc.w	r3, r3, r1
 8005658:	f04f 0000 	mov.w	r0, #0
 800565c:	f04f 0100 	mov.w	r1, #0
 8005660:	00d9      	lsls	r1, r3, #3
 8005662:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005666:	00d0      	lsls	r0, r2, #3
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	eb12 020a 	adds.w	r2, r2, sl
 8005670:	eb43 030b 	adc.w	r3, r3, fp
 8005674:	f04f 0000 	mov.w	r0, #0
 8005678:	f04f 0100 	mov.w	r1, #0
 800567c:	0299      	lsls	r1, r3, #10
 800567e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005682:	0290      	lsls	r0, r2, #10
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4610      	mov	r0, r2
 800568a:	4619      	mov	r1, r3
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	461a      	mov	r2, r3
 8005690:	f04f 0300 	mov.w	r3, #0
 8005694:	f7fb fac4 	bl	8000c20 <__aeabi_uldivmod>
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	4613      	mov	r3, r2
 800569e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056a0:	4b63      	ldr	r3, [pc, #396]	; (8005830 <HAL_RCC_GetSysClockFreq+0x358>)
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	0c1b      	lsrs	r3, r3, #16
 80056a6:	f003 0303 	and.w	r3, r3, #3
 80056aa:	3301      	adds	r3, #1
 80056ac:	005b      	lsls	r3, r3, #1
 80056ae:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80056b0:	69fa      	ldr	r2, [r7, #28]
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b8:	61bb      	str	r3, [r7, #24]
      break;
 80056ba:	e0b2      	b.n	8005822 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056bc:	4b5c      	ldr	r3, [pc, #368]	; (8005830 <HAL_RCC_GetSysClockFreq+0x358>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056c4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056c6:	4b5a      	ldr	r3, [pc, #360]	; (8005830 <HAL_RCC_GetSysClockFreq+0x358>)
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d04d      	beq.n	800576e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056d2:	4b57      	ldr	r3, [pc, #348]	; (8005830 <HAL_RCC_GetSysClockFreq+0x358>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	099b      	lsrs	r3, r3, #6
 80056d8:	461a      	mov	r2, r3
 80056da:	f04f 0300 	mov.w	r3, #0
 80056de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80056e2:	f04f 0100 	mov.w	r1, #0
 80056e6:	ea02 0800 	and.w	r8, r2, r0
 80056ea:	ea03 0901 	and.w	r9, r3, r1
 80056ee:	4640      	mov	r0, r8
 80056f0:	4649      	mov	r1, r9
 80056f2:	f04f 0200 	mov.w	r2, #0
 80056f6:	f04f 0300 	mov.w	r3, #0
 80056fa:	014b      	lsls	r3, r1, #5
 80056fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005700:	0142      	lsls	r2, r0, #5
 8005702:	4610      	mov	r0, r2
 8005704:	4619      	mov	r1, r3
 8005706:	ebb0 0008 	subs.w	r0, r0, r8
 800570a:	eb61 0109 	sbc.w	r1, r1, r9
 800570e:	f04f 0200 	mov.w	r2, #0
 8005712:	f04f 0300 	mov.w	r3, #0
 8005716:	018b      	lsls	r3, r1, #6
 8005718:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800571c:	0182      	lsls	r2, r0, #6
 800571e:	1a12      	subs	r2, r2, r0
 8005720:	eb63 0301 	sbc.w	r3, r3, r1
 8005724:	f04f 0000 	mov.w	r0, #0
 8005728:	f04f 0100 	mov.w	r1, #0
 800572c:	00d9      	lsls	r1, r3, #3
 800572e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005732:	00d0      	lsls	r0, r2, #3
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	eb12 0208 	adds.w	r2, r2, r8
 800573c:	eb43 0309 	adc.w	r3, r3, r9
 8005740:	f04f 0000 	mov.w	r0, #0
 8005744:	f04f 0100 	mov.w	r1, #0
 8005748:	0259      	lsls	r1, r3, #9
 800574a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800574e:	0250      	lsls	r0, r2, #9
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	4610      	mov	r0, r2
 8005756:	4619      	mov	r1, r3
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	461a      	mov	r2, r3
 800575c:	f04f 0300 	mov.w	r3, #0
 8005760:	f7fb fa5e 	bl	8000c20 <__aeabi_uldivmod>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	4613      	mov	r3, r2
 800576a:	61fb      	str	r3, [r7, #28]
 800576c:	e04a      	b.n	8005804 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800576e:	4b30      	ldr	r3, [pc, #192]	; (8005830 <HAL_RCC_GetSysClockFreq+0x358>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	099b      	lsrs	r3, r3, #6
 8005774:	461a      	mov	r2, r3
 8005776:	f04f 0300 	mov.w	r3, #0
 800577a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800577e:	f04f 0100 	mov.w	r1, #0
 8005782:	ea02 0400 	and.w	r4, r2, r0
 8005786:	ea03 0501 	and.w	r5, r3, r1
 800578a:	4620      	mov	r0, r4
 800578c:	4629      	mov	r1, r5
 800578e:	f04f 0200 	mov.w	r2, #0
 8005792:	f04f 0300 	mov.w	r3, #0
 8005796:	014b      	lsls	r3, r1, #5
 8005798:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800579c:	0142      	lsls	r2, r0, #5
 800579e:	4610      	mov	r0, r2
 80057a0:	4619      	mov	r1, r3
 80057a2:	1b00      	subs	r0, r0, r4
 80057a4:	eb61 0105 	sbc.w	r1, r1, r5
 80057a8:	f04f 0200 	mov.w	r2, #0
 80057ac:	f04f 0300 	mov.w	r3, #0
 80057b0:	018b      	lsls	r3, r1, #6
 80057b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80057b6:	0182      	lsls	r2, r0, #6
 80057b8:	1a12      	subs	r2, r2, r0
 80057ba:	eb63 0301 	sbc.w	r3, r3, r1
 80057be:	f04f 0000 	mov.w	r0, #0
 80057c2:	f04f 0100 	mov.w	r1, #0
 80057c6:	00d9      	lsls	r1, r3, #3
 80057c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057cc:	00d0      	lsls	r0, r2, #3
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	1912      	adds	r2, r2, r4
 80057d4:	eb45 0303 	adc.w	r3, r5, r3
 80057d8:	f04f 0000 	mov.w	r0, #0
 80057dc:	f04f 0100 	mov.w	r1, #0
 80057e0:	0299      	lsls	r1, r3, #10
 80057e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80057e6:	0290      	lsls	r0, r2, #10
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4610      	mov	r0, r2
 80057ee:	4619      	mov	r1, r3
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	461a      	mov	r2, r3
 80057f4:	f04f 0300 	mov.w	r3, #0
 80057f8:	f7fb fa12 	bl	8000c20 <__aeabi_uldivmod>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	4613      	mov	r3, r2
 8005802:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005804:	4b0a      	ldr	r3, [pc, #40]	; (8005830 <HAL_RCC_GetSysClockFreq+0x358>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	0f1b      	lsrs	r3, r3, #28
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005810:	69fa      	ldr	r2, [r7, #28]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	fbb2 f3f3 	udiv	r3, r2, r3
 8005818:	61bb      	str	r3, [r7, #24]
      break;
 800581a:	e002      	b.n	8005822 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800581c:	4b05      	ldr	r3, [pc, #20]	; (8005834 <HAL_RCC_GetSysClockFreq+0x35c>)
 800581e:	61bb      	str	r3, [r7, #24]
      break;
 8005820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005822:	69bb      	ldr	r3, [r7, #24]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3720      	adds	r7, #32
 8005828:	46bd      	mov	sp, r7
 800582a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800582e:	bf00      	nop
 8005830:	40023800 	.word	0x40023800
 8005834:	00f42400 	.word	0x00f42400
 8005838:	007a1200 	.word	0x007a1200

0800583c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e28d      	b.n	8005d6a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	f000 8083 	beq.w	8005962 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800585c:	4b94      	ldr	r3, [pc, #592]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f003 030c 	and.w	r3, r3, #12
 8005864:	2b04      	cmp	r3, #4
 8005866:	d019      	beq.n	800589c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005868:	4b91      	ldr	r3, [pc, #580]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005870:	2b08      	cmp	r3, #8
 8005872:	d106      	bne.n	8005882 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005874:	4b8e      	ldr	r3, [pc, #568]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800587c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005880:	d00c      	beq.n	800589c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005882:	4b8b      	ldr	r3, [pc, #556]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800588a:	2b0c      	cmp	r3, #12
 800588c:	d112      	bne.n	80058b4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800588e:	4b88      	ldr	r3, [pc, #544]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005896:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800589a:	d10b      	bne.n	80058b4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800589c:	4b84      	ldr	r3, [pc, #528]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d05b      	beq.n	8005960 <HAL_RCC_OscConfig+0x124>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d157      	bne.n	8005960 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e25a      	b.n	8005d6a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058bc:	d106      	bne.n	80058cc <HAL_RCC_OscConfig+0x90>
 80058be:	4b7c      	ldr	r3, [pc, #496]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a7b      	ldr	r2, [pc, #492]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 80058c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058c8:	6013      	str	r3, [r2, #0]
 80058ca:	e01d      	b.n	8005908 <HAL_RCC_OscConfig+0xcc>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058d4:	d10c      	bne.n	80058f0 <HAL_RCC_OscConfig+0xb4>
 80058d6:	4b76      	ldr	r3, [pc, #472]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a75      	ldr	r2, [pc, #468]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 80058dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	4b73      	ldr	r3, [pc, #460]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a72      	ldr	r2, [pc, #456]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 80058e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ec:	6013      	str	r3, [r2, #0]
 80058ee:	e00b      	b.n	8005908 <HAL_RCC_OscConfig+0xcc>
 80058f0:	4b6f      	ldr	r3, [pc, #444]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a6e      	ldr	r2, [pc, #440]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 80058f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058fa:	6013      	str	r3, [r2, #0]
 80058fc:	4b6c      	ldr	r3, [pc, #432]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a6b      	ldr	r2, [pc, #428]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 8005902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d013      	beq.n	8005938 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005910:	f7fd fa52 	bl	8002db8 <HAL_GetTick>
 8005914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005916:	e008      	b.n	800592a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005918:	f7fd fa4e 	bl	8002db8 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b64      	cmp	r3, #100	; 0x64
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e21f      	b.n	8005d6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800592a:	4b61      	ldr	r3, [pc, #388]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d0f0      	beq.n	8005918 <HAL_RCC_OscConfig+0xdc>
 8005936:	e014      	b.n	8005962 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005938:	f7fd fa3e 	bl	8002db8 <HAL_GetTick>
 800593c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800593e:	e008      	b.n	8005952 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005940:	f7fd fa3a 	bl	8002db8 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b64      	cmp	r3, #100	; 0x64
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e20b      	b.n	8005d6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005952:	4b57      	ldr	r3, [pc, #348]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1f0      	bne.n	8005940 <HAL_RCC_OscConfig+0x104>
 800595e:	e000      	b.n	8005962 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d06f      	beq.n	8005a4e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800596e:	4b50      	ldr	r3, [pc, #320]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 030c 	and.w	r3, r3, #12
 8005976:	2b00      	cmp	r3, #0
 8005978:	d017      	beq.n	80059aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800597a:	4b4d      	ldr	r3, [pc, #308]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005982:	2b08      	cmp	r3, #8
 8005984:	d105      	bne.n	8005992 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005986:	4b4a      	ldr	r3, [pc, #296]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00b      	beq.n	80059aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005992:	4b47      	ldr	r3, [pc, #284]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800599a:	2b0c      	cmp	r3, #12
 800599c:	d11c      	bne.n	80059d8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800599e:	4b44      	ldr	r3, [pc, #272]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d116      	bne.n	80059d8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059aa:	4b41      	ldr	r3, [pc, #260]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d005      	beq.n	80059c2 <HAL_RCC_OscConfig+0x186>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d001      	beq.n	80059c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e1d3      	b.n	8005d6a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059c2:	4b3b      	ldr	r3, [pc, #236]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	4937      	ldr	r1, [pc, #220]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059d6:	e03a      	b.n	8005a4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d020      	beq.n	8005a22 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059e0:	4b34      	ldr	r3, [pc, #208]	; (8005ab4 <HAL_RCC_OscConfig+0x278>)
 80059e2:	2201      	movs	r2, #1
 80059e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e6:	f7fd f9e7 	bl	8002db8 <HAL_GetTick>
 80059ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ec:	e008      	b.n	8005a00 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059ee:	f7fd f9e3 	bl	8002db8 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d901      	bls.n	8005a00 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e1b4      	b.n	8005d6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a00:	4b2b      	ldr	r3, [pc, #172]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d0f0      	beq.n	80059ee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a0c:	4b28      	ldr	r3, [pc, #160]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	4925      	ldr	r1, [pc, #148]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	600b      	str	r3, [r1, #0]
 8005a20:	e015      	b.n	8005a4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a22:	4b24      	ldr	r3, [pc, #144]	; (8005ab4 <HAL_RCC_OscConfig+0x278>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a28:	f7fd f9c6 	bl	8002db8 <HAL_GetTick>
 8005a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a30:	f7fd f9c2 	bl	8002db8 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e193      	b.n	8005d6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a42:	4b1b      	ldr	r3, [pc, #108]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1f0      	bne.n	8005a30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0308 	and.w	r3, r3, #8
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d036      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d016      	beq.n	8005a90 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a62:	4b15      	ldr	r3, [pc, #84]	; (8005ab8 <HAL_RCC_OscConfig+0x27c>)
 8005a64:	2201      	movs	r2, #1
 8005a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a68:	f7fd f9a6 	bl	8002db8 <HAL_GetTick>
 8005a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a6e:	e008      	b.n	8005a82 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a70:	f7fd f9a2 	bl	8002db8 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e173      	b.n	8005d6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a82:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 8005a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0f0      	beq.n	8005a70 <HAL_RCC_OscConfig+0x234>
 8005a8e:	e01b      	b.n	8005ac8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a90:	4b09      	ldr	r3, [pc, #36]	; (8005ab8 <HAL_RCC_OscConfig+0x27c>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a96:	f7fd f98f 	bl	8002db8 <HAL_GetTick>
 8005a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a9c:	e00e      	b.n	8005abc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a9e:	f7fd f98b 	bl	8002db8 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d907      	bls.n	8005abc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e15c      	b.n	8005d6a <HAL_RCC_OscConfig+0x52e>
 8005ab0:	40023800 	.word	0x40023800
 8005ab4:	42470000 	.word	0x42470000
 8005ab8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005abc:	4b8a      	ldr	r3, [pc, #552]	; (8005ce8 <HAL_RCC_OscConfig+0x4ac>)
 8005abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1ea      	bne.n	8005a9e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0304 	and.w	r3, r3, #4
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 8097 	beq.w	8005c04 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ada:	4b83      	ldr	r3, [pc, #524]	; (8005ce8 <HAL_RCC_OscConfig+0x4ac>)
 8005adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10f      	bne.n	8005b06 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60bb      	str	r3, [r7, #8]
 8005aea:	4b7f      	ldr	r3, [pc, #508]	; (8005ce8 <HAL_RCC_OscConfig+0x4ac>)
 8005aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aee:	4a7e      	ldr	r2, [pc, #504]	; (8005ce8 <HAL_RCC_OscConfig+0x4ac>)
 8005af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af4:	6413      	str	r3, [r2, #64]	; 0x40
 8005af6:	4b7c      	ldr	r3, [pc, #496]	; (8005ce8 <HAL_RCC_OscConfig+0x4ac>)
 8005af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005afe:	60bb      	str	r3, [r7, #8]
 8005b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b02:	2301      	movs	r3, #1
 8005b04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b06:	4b79      	ldr	r3, [pc, #484]	; (8005cec <HAL_RCC_OscConfig+0x4b0>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d118      	bne.n	8005b44 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b12:	4b76      	ldr	r3, [pc, #472]	; (8005cec <HAL_RCC_OscConfig+0x4b0>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a75      	ldr	r2, [pc, #468]	; (8005cec <HAL_RCC_OscConfig+0x4b0>)
 8005b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b1e:	f7fd f94b 	bl	8002db8 <HAL_GetTick>
 8005b22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b24:	e008      	b.n	8005b38 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b26:	f7fd f947 	bl	8002db8 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d901      	bls.n	8005b38 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e118      	b.n	8005d6a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b38:	4b6c      	ldr	r3, [pc, #432]	; (8005cec <HAL_RCC_OscConfig+0x4b0>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d0f0      	beq.n	8005b26 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d106      	bne.n	8005b5a <HAL_RCC_OscConfig+0x31e>
 8005b4c:	4b66      	ldr	r3, [pc, #408]	; (8005ce8 <HAL_RCC_OscConfig+0x4ac>)
 8005b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b50:	4a65      	ldr	r2, [pc, #404]	; (8005ce8 <HAL_RCC_OscConfig+0x4ac>)
 8005b52:	f043 0301 	orr.w	r3, r3, #1
 8005b56:	6713      	str	r3, [r2, #112]	; 0x70
 8005b58:	e01c      	b.n	8005b94 <HAL_RCC_OscConfig+0x358>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	2b05      	cmp	r3, #5
 8005b60:	d10c      	bne.n	8005b7c <HAL_RCC_OscConfig+0x340>
 8005b62:	4b61      	ldr	r3, [pc, #388]	; (8005ce8 <HAL_RCC_OscConfig+0x4ac>)
 8005b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b66:	4a60      	ldr	r2, [pc, #384]	; (8005ce8 <HAL_RCC_OscConfig+0x4ac>)
 8005b68:	f043 0304 	orr.w	r3, r3, #4
 8005b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b6e:	4b5e      	ldr	r3, [pc, #376]	; (8005ce8 <HAL_RCC_OscConfig+0x4ac>)
 8005b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b72:	4a5d      	ldr	r2, [pc, #372]	; (8005ce8 <HAL_RCC_OscConfig+0x4ac>)
 8005b74:	f043 0301 	orr.w	r3, r3, #1
 8005b78:	6713      	str	r3, [r2, #112]	; 0x70
 8005b7a:	e00b      	b.n	8005b94 <HAL_RCC_OscConfig+0x358>
 8005b7c:	4b5a      	ldr	r3, [pc, #360]	; (8005ce8 <HAL_RCC_OscConfig+0x4ac>)
 8005b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b80:	4a59      	ldr	r2, [pc, #356]	; (8005ce8 <HAL_RCC_OscConfig+0x4ac>)
 8005b82:	f023 0301 	bic.w	r3, r3, #1
 8005b86:	6713      	str	r3, [r2, #112]	; 0x70
 8005b88:	4b57      	ldr	r3, [pc, #348]	; (8005ce8 <HAL_RCC_OscConfig+0x4ac>)
 8005b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8c:	4a56      	ldr	r2, [pc, #344]	; (8005ce8 <HAL_RCC_OscConfig+0x4ac>)
 8005b8e:	f023 0304 	bic.w	r3, r3, #4
 8005b92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d015      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b9c:	f7fd f90c 	bl	8002db8 <HAL_GetTick>
 8005ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba2:	e00a      	b.n	8005bba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ba4:	f7fd f908 	bl	8002db8 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e0d7      	b.n	8005d6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bba:	4b4b      	ldr	r3, [pc, #300]	; (8005ce8 <HAL_RCC_OscConfig+0x4ac>)
 8005bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d0ee      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x368>
 8005bc6:	e014      	b.n	8005bf2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc8:	f7fd f8f6 	bl	8002db8 <HAL_GetTick>
 8005bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bce:	e00a      	b.n	8005be6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bd0:	f7fd f8f2 	bl	8002db8 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e0c1      	b.n	8005d6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005be6:	4b40      	ldr	r3, [pc, #256]	; (8005ce8 <HAL_RCC_OscConfig+0x4ac>)
 8005be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1ee      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bf2:	7dfb      	ldrb	r3, [r7, #23]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d105      	bne.n	8005c04 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bf8:	4b3b      	ldr	r3, [pc, #236]	; (8005ce8 <HAL_RCC_OscConfig+0x4ac>)
 8005bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfc:	4a3a      	ldr	r2, [pc, #232]	; (8005ce8 <HAL_RCC_OscConfig+0x4ac>)
 8005bfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 80ad 	beq.w	8005d68 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c0e:	4b36      	ldr	r3, [pc, #216]	; (8005ce8 <HAL_RCC_OscConfig+0x4ac>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f003 030c 	and.w	r3, r3, #12
 8005c16:	2b08      	cmp	r3, #8
 8005c18:	d060      	beq.n	8005cdc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d145      	bne.n	8005cae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c22:	4b33      	ldr	r3, [pc, #204]	; (8005cf0 <HAL_RCC_OscConfig+0x4b4>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c28:	f7fd f8c6 	bl	8002db8 <HAL_GetTick>
 8005c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c2e:	e008      	b.n	8005c42 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c30:	f7fd f8c2 	bl	8002db8 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e093      	b.n	8005d6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c42:	4b29      	ldr	r3, [pc, #164]	; (8005ce8 <HAL_RCC_OscConfig+0x4ac>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1f0      	bne.n	8005c30 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	69da      	ldr	r2, [r3, #28]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	431a      	orrs	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	019b      	lsls	r3, r3, #6
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c64:	085b      	lsrs	r3, r3, #1
 8005c66:	3b01      	subs	r3, #1
 8005c68:	041b      	lsls	r3, r3, #16
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c70:	061b      	lsls	r3, r3, #24
 8005c72:	431a      	orrs	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c78:	071b      	lsls	r3, r3, #28
 8005c7a:	491b      	ldr	r1, [pc, #108]	; (8005ce8 <HAL_RCC_OscConfig+0x4ac>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c80:	4b1b      	ldr	r3, [pc, #108]	; (8005cf0 <HAL_RCC_OscConfig+0x4b4>)
 8005c82:	2201      	movs	r2, #1
 8005c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c86:	f7fd f897 	bl	8002db8 <HAL_GetTick>
 8005c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c8c:	e008      	b.n	8005ca0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c8e:	f7fd f893 	bl	8002db8 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e064      	b.n	8005d6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ca0:	4b11      	ldr	r3, [pc, #68]	; (8005ce8 <HAL_RCC_OscConfig+0x4ac>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0f0      	beq.n	8005c8e <HAL_RCC_OscConfig+0x452>
 8005cac:	e05c      	b.n	8005d68 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cae:	4b10      	ldr	r3, [pc, #64]	; (8005cf0 <HAL_RCC_OscConfig+0x4b4>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb4:	f7fd f880 	bl	8002db8 <HAL_GetTick>
 8005cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cba:	e008      	b.n	8005cce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cbc:	f7fd f87c 	bl	8002db8 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e04d      	b.n	8005d6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cce:	4b06      	ldr	r3, [pc, #24]	; (8005ce8 <HAL_RCC_OscConfig+0x4ac>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1f0      	bne.n	8005cbc <HAL_RCC_OscConfig+0x480>
 8005cda:	e045      	b.n	8005d68 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d107      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e040      	b.n	8005d6a <HAL_RCC_OscConfig+0x52e>
 8005ce8:	40023800 	.word	0x40023800
 8005cec:	40007000 	.word	0x40007000
 8005cf0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005cf4:	4b1f      	ldr	r3, [pc, #124]	; (8005d74 <HAL_RCC_OscConfig+0x538>)
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d030      	beq.n	8005d64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d129      	bne.n	8005d64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d122      	bne.n	8005d64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d24:	4013      	ands	r3, r2
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d119      	bne.n	8005d64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3a:	085b      	lsrs	r3, r3, #1
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d10f      	bne.n	8005d64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d107      	bne.n	8005d64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d001      	beq.n	8005d68 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e000      	b.n	8005d6a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3718      	adds	r7, #24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	40023800 	.word	0x40023800

08005d78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e07b      	b.n	8005e82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d108      	bne.n	8005da4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d9a:	d009      	beq.n	8005db0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	61da      	str	r2, [r3, #28]
 8005da2:	e005      	b.n	8005db0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d106      	bne.n	8005dd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7fc fe68 	bl	8002aa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005de6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e20:	431a      	orrs	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e34:	ea42 0103 	orr.w	r1, r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	0c1b      	lsrs	r3, r3, #16
 8005e4e:	f003 0104 	and.w	r1, r3, #4
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e56:	f003 0210 	and.w	r2, r3, #16
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69da      	ldr	r2, [r3, #28]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b088      	sub	sp, #32
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	603b      	str	r3, [r7, #0]
 8005e96:	4613      	mov	r3, r2
 8005e98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d101      	bne.n	8005eac <HAL_SPI_Transmit+0x22>
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	e126      	b.n	80060fa <HAL_SPI_Transmit+0x270>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005eb4:	f7fc ff80 	bl	8002db8 <HAL_GetTick>
 8005eb8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005eba:	88fb      	ldrh	r3, [r7, #6]
 8005ebc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d002      	beq.n	8005ed0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005eca:	2302      	movs	r3, #2
 8005ecc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ece:	e10b      	b.n	80060e8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <HAL_SPI_Transmit+0x52>
 8005ed6:	88fb      	ldrh	r3, [r7, #6]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d102      	bne.n	8005ee2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ee0:	e102      	b.n	80060e8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2203      	movs	r2, #3
 8005ee6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	88fa      	ldrh	r2, [r7, #6]
 8005efa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	88fa      	ldrh	r2, [r7, #6]
 8005f00:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f28:	d10f      	bne.n	8005f4a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f54:	2b40      	cmp	r3, #64	; 0x40
 8005f56:	d007      	beq.n	8005f68 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f70:	d14b      	bne.n	800600a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d002      	beq.n	8005f80 <HAL_SPI_Transmit+0xf6>
 8005f7a:	8afb      	ldrh	r3, [r7, #22]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d13e      	bne.n	8005ffe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f84:	881a      	ldrh	r2, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f90:	1c9a      	adds	r2, r3, #2
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005fa4:	e02b      	b.n	8005ffe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d112      	bne.n	8005fda <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb8:	881a      	ldrh	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc4:	1c9a      	adds	r2, r3, #2
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	86da      	strh	r2, [r3, #54]	; 0x36
 8005fd8:	e011      	b.n	8005ffe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fda:	f7fc feed 	bl	8002db8 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d803      	bhi.n	8005ff2 <HAL_SPI_Transmit+0x168>
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff0:	d102      	bne.n	8005ff8 <HAL_SPI_Transmit+0x16e>
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d102      	bne.n	8005ffe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ffc:	e074      	b.n	80060e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006002:	b29b      	uxth	r3, r3
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1ce      	bne.n	8005fa6 <HAL_SPI_Transmit+0x11c>
 8006008:	e04c      	b.n	80060a4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <HAL_SPI_Transmit+0x18e>
 8006012:	8afb      	ldrh	r3, [r7, #22]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d140      	bne.n	800609a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	330c      	adds	r3, #12
 8006022:	7812      	ldrb	r2, [r2, #0]
 8006024:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006034:	b29b      	uxth	r3, r3
 8006036:	3b01      	subs	r3, #1
 8006038:	b29a      	uxth	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800603e:	e02c      	b.n	800609a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b02      	cmp	r3, #2
 800604c:	d113      	bne.n	8006076 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	330c      	adds	r3, #12
 8006058:	7812      	ldrb	r2, [r2, #0]
 800605a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800606a:	b29b      	uxth	r3, r3
 800606c:	3b01      	subs	r3, #1
 800606e:	b29a      	uxth	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	86da      	strh	r2, [r3, #54]	; 0x36
 8006074:	e011      	b.n	800609a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006076:	f7fc fe9f 	bl	8002db8 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	429a      	cmp	r2, r3
 8006084:	d803      	bhi.n	800608e <HAL_SPI_Transmit+0x204>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608c:	d102      	bne.n	8006094 <HAL_SPI_Transmit+0x20a>
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d102      	bne.n	800609a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006098:	e026      	b.n	80060e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800609e:	b29b      	uxth	r3, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1cd      	bne.n	8006040 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	6839      	ldr	r1, [r7, #0]
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 fbcb 	bl	8006844 <SPI_EndRxTxTransaction>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d002      	beq.n	80060ba <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2220      	movs	r2, #32
 80060b8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10a      	bne.n	80060d8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060c2:	2300      	movs	r3, #0
 80060c4:	613b      	str	r3, [r7, #16]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	613b      	str	r3, [r7, #16]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	613b      	str	r3, [r7, #16]
 80060d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	77fb      	strb	r3, [r7, #31]
 80060e4:	e000      	b.n	80060e8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80060e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80060f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3720      	adds	r7, #32
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b088      	sub	sp, #32
 8006106:	af02      	add	r7, sp, #8
 8006108:	60f8      	str	r0, [r7, #12]
 800610a:	60b9      	str	r1, [r7, #8]
 800610c:	603b      	str	r3, [r7, #0]
 800610e:	4613      	mov	r3, r2
 8006110:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006112:	2300      	movs	r3, #0
 8006114:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800611e:	d112      	bne.n	8006146 <HAL_SPI_Receive+0x44>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10e      	bne.n	8006146 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2204      	movs	r2, #4
 800612c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006130:	88fa      	ldrh	r2, [r7, #6]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	4613      	mov	r3, r2
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	68b9      	ldr	r1, [r7, #8]
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 f8f1 	bl	8006324 <HAL_SPI_TransmitReceive>
 8006142:	4603      	mov	r3, r0
 8006144:	e0ea      	b.n	800631c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800614c:	2b01      	cmp	r3, #1
 800614e:	d101      	bne.n	8006154 <HAL_SPI_Receive+0x52>
 8006150:	2302      	movs	r3, #2
 8006152:	e0e3      	b.n	800631c <HAL_SPI_Receive+0x21a>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800615c:	f7fc fe2c 	bl	8002db8 <HAL_GetTick>
 8006160:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b01      	cmp	r3, #1
 800616c:	d002      	beq.n	8006174 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800616e:	2302      	movs	r3, #2
 8006170:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006172:	e0ca      	b.n	800630a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d002      	beq.n	8006180 <HAL_SPI_Receive+0x7e>
 800617a:	88fb      	ldrh	r3, [r7, #6]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d102      	bne.n	8006186 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006184:	e0c1      	b.n	800630a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2204      	movs	r2, #4
 800618a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	88fa      	ldrh	r2, [r7, #6]
 800619e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	88fa      	ldrh	r2, [r7, #6]
 80061a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061cc:	d10f      	bne.n	80061ee <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f8:	2b40      	cmp	r3, #64	; 0x40
 80061fa:	d007      	beq.n	800620c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800620a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d162      	bne.n	80062da <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006214:	e02e      	b.n	8006274 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	2b01      	cmp	r3, #1
 8006222:	d115      	bne.n	8006250 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f103 020c 	add.w	r2, r3, #12
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006230:	7812      	ldrb	r2, [r2, #0]
 8006232:	b2d2      	uxtb	r2, r2
 8006234:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006244:	b29b      	uxth	r3, r3
 8006246:	3b01      	subs	r3, #1
 8006248:	b29a      	uxth	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800624e:	e011      	b.n	8006274 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006250:	f7fc fdb2 	bl	8002db8 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	429a      	cmp	r2, r3
 800625e:	d803      	bhi.n	8006268 <HAL_SPI_Receive+0x166>
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006266:	d102      	bne.n	800626e <HAL_SPI_Receive+0x16c>
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d102      	bne.n	8006274 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006272:	e04a      	b.n	800630a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006278:	b29b      	uxth	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1cb      	bne.n	8006216 <HAL_SPI_Receive+0x114>
 800627e:	e031      	b.n	80062e4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b01      	cmp	r3, #1
 800628c:	d113      	bne.n	80062b6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68da      	ldr	r2, [r3, #12]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006298:	b292      	uxth	r2, r2
 800629a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a0:	1c9a      	adds	r2, r3, #2
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	3b01      	subs	r3, #1
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062b4:	e011      	b.n	80062da <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062b6:	f7fc fd7f 	bl	8002db8 <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d803      	bhi.n	80062ce <HAL_SPI_Receive+0x1cc>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062cc:	d102      	bne.n	80062d4 <HAL_SPI_Receive+0x1d2>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d102      	bne.n	80062da <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80062d8:	e017      	b.n	800630a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062de:	b29b      	uxth	r3, r3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1cd      	bne.n	8006280 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	6839      	ldr	r1, [r7, #0]
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f000 fa45 	bl	8006778 <SPI_EndRxTransaction>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d002      	beq.n	80062fa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2220      	movs	r2, #32
 80062f8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d002      	beq.n	8006308 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	75fb      	strb	r3, [r7, #23]
 8006306:	e000      	b.n	800630a <HAL_SPI_Receive+0x208>
  }

error :
 8006308:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800631a:	7dfb      	ldrb	r3, [r7, #23]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3718      	adds	r7, #24
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b08c      	sub	sp, #48	; 0x30
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
 8006330:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006332:	2301      	movs	r3, #1
 8006334:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006342:	2b01      	cmp	r3, #1
 8006344:	d101      	bne.n	800634a <HAL_SPI_TransmitReceive+0x26>
 8006346:	2302      	movs	r3, #2
 8006348:	e18a      	b.n	8006660 <HAL_SPI_TransmitReceive+0x33c>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006352:	f7fc fd31 	bl	8002db8 <HAL_GetTick>
 8006356:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800635e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006368:	887b      	ldrh	r3, [r7, #2]
 800636a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800636c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006370:	2b01      	cmp	r3, #1
 8006372:	d00f      	beq.n	8006394 <HAL_SPI_TransmitReceive+0x70>
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800637a:	d107      	bne.n	800638c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d103      	bne.n	800638c <HAL_SPI_TransmitReceive+0x68>
 8006384:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006388:	2b04      	cmp	r3, #4
 800638a:	d003      	beq.n	8006394 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800638c:	2302      	movs	r3, #2
 800638e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006392:	e15b      	b.n	800664c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d005      	beq.n	80063a6 <HAL_SPI_TransmitReceive+0x82>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <HAL_SPI_TransmitReceive+0x82>
 80063a0:	887b      	ldrh	r3, [r7, #2]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d103      	bne.n	80063ae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80063ac:	e14e      	b.n	800664c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b04      	cmp	r3, #4
 80063b8:	d003      	beq.n	80063c2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2205      	movs	r2, #5
 80063be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	887a      	ldrh	r2, [r7, #2]
 80063d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	887a      	ldrh	r2, [r7, #2]
 80063d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	887a      	ldrh	r2, [r7, #2]
 80063e4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	887a      	ldrh	r2, [r7, #2]
 80063ea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006402:	2b40      	cmp	r3, #64	; 0x40
 8006404:	d007      	beq.n	8006416 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006414:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800641e:	d178      	bne.n	8006512 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <HAL_SPI_TransmitReceive+0x10a>
 8006428:	8b7b      	ldrh	r3, [r7, #26]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d166      	bne.n	80064fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006432:	881a      	ldrh	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643e:	1c9a      	adds	r2, r3, #2
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006448:	b29b      	uxth	r3, r3
 800644a:	3b01      	subs	r3, #1
 800644c:	b29a      	uxth	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006452:	e053      	b.n	80064fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 0302 	and.w	r3, r3, #2
 800645e:	2b02      	cmp	r3, #2
 8006460:	d11b      	bne.n	800649a <HAL_SPI_TransmitReceive+0x176>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006466:	b29b      	uxth	r3, r3
 8006468:	2b00      	cmp	r3, #0
 800646a:	d016      	beq.n	800649a <HAL_SPI_TransmitReceive+0x176>
 800646c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646e:	2b01      	cmp	r3, #1
 8006470:	d113      	bne.n	800649a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006476:	881a      	ldrh	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006482:	1c9a      	adds	r2, r3, #2
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800648c:	b29b      	uxth	r3, r3
 800648e:	3b01      	subs	r3, #1
 8006490:	b29a      	uxth	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d119      	bne.n	80064dc <HAL_SPI_TransmitReceive+0x1b8>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d014      	beq.n	80064dc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68da      	ldr	r2, [r3, #12]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064bc:	b292      	uxth	r2, r2
 80064be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c4:	1c9a      	adds	r2, r3, #2
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	3b01      	subs	r3, #1
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064d8:	2301      	movs	r3, #1
 80064da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80064dc:	f7fc fc6c 	bl	8002db8 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d807      	bhi.n	80064fc <HAL_SPI_TransmitReceive+0x1d8>
 80064ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f2:	d003      	beq.n	80064fc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80064fa:	e0a7      	b.n	800664c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006500:	b29b      	uxth	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1a6      	bne.n	8006454 <HAL_SPI_TransmitReceive+0x130>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800650a:	b29b      	uxth	r3, r3
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1a1      	bne.n	8006454 <HAL_SPI_TransmitReceive+0x130>
 8006510:	e07c      	b.n	800660c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <HAL_SPI_TransmitReceive+0x1fc>
 800651a:	8b7b      	ldrh	r3, [r7, #26]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d16b      	bne.n	80065f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	330c      	adds	r3, #12
 800652a:	7812      	ldrb	r2, [r2, #0]
 800652c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800653c:	b29b      	uxth	r3, r3
 800653e:	3b01      	subs	r3, #1
 8006540:	b29a      	uxth	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006546:	e057      	b.n	80065f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b02      	cmp	r3, #2
 8006554:	d11c      	bne.n	8006590 <HAL_SPI_TransmitReceive+0x26c>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800655a:	b29b      	uxth	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	d017      	beq.n	8006590 <HAL_SPI_TransmitReceive+0x26c>
 8006560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006562:	2b01      	cmp	r3, #1
 8006564:	d114      	bne.n	8006590 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	330c      	adds	r3, #12
 8006570:	7812      	ldrb	r2, [r2, #0]
 8006572:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006582:	b29b      	uxth	r3, r3
 8006584:	3b01      	subs	r3, #1
 8006586:	b29a      	uxth	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800658c:	2300      	movs	r3, #0
 800658e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b01      	cmp	r3, #1
 800659c:	d119      	bne.n	80065d2 <HAL_SPI_TransmitReceive+0x2ae>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d014      	beq.n	80065d2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68da      	ldr	r2, [r3, #12]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b2:	b2d2      	uxtb	r2, r2
 80065b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	3b01      	subs	r3, #1
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065ce:	2301      	movs	r3, #1
 80065d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80065d2:	f7fc fbf1 	bl	8002db8 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065de:	429a      	cmp	r2, r3
 80065e0:	d803      	bhi.n	80065ea <HAL_SPI_TransmitReceive+0x2c6>
 80065e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e8:	d102      	bne.n	80065f0 <HAL_SPI_TransmitReceive+0x2cc>
 80065ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d103      	bne.n	80065f8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80065f6:	e029      	b.n	800664c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1a2      	bne.n	8006548 <HAL_SPI_TransmitReceive+0x224>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006606:	b29b      	uxth	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	d19d      	bne.n	8006548 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800660c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800660e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f000 f917 	bl	8006844 <SPI_EndRxTxTransaction>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d006      	beq.n	800662a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2220      	movs	r2, #32
 8006626:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006628:	e010      	b.n	800664c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10b      	bne.n	800664a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006632:	2300      	movs	r3, #0
 8006634:	617b      	str	r3, [r7, #20]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	617b      	str	r3, [r7, #20]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	617b      	str	r3, [r7, #20]
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	e000      	b.n	800664c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800664a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800665c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006660:	4618      	mov	r0, r3
 8006662:	3730      	adds	r7, #48	; 0x30
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b088      	sub	sp, #32
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	603b      	str	r3, [r7, #0]
 8006674:	4613      	mov	r3, r2
 8006676:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006678:	f7fc fb9e 	bl	8002db8 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006680:	1a9b      	subs	r3, r3, r2
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	4413      	add	r3, r2
 8006686:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006688:	f7fc fb96 	bl	8002db8 <HAL_GetTick>
 800668c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800668e:	4b39      	ldr	r3, [pc, #228]	; (8006774 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	015b      	lsls	r3, r3, #5
 8006694:	0d1b      	lsrs	r3, r3, #20
 8006696:	69fa      	ldr	r2, [r7, #28]
 8006698:	fb02 f303 	mul.w	r3, r2, r3
 800669c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800669e:	e054      	b.n	800674a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a6:	d050      	beq.n	800674a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066a8:	f7fc fb86 	bl	8002db8 <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	69fa      	ldr	r2, [r7, #28]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d902      	bls.n	80066be <SPI_WaitFlagStateUntilTimeout+0x56>
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d13d      	bne.n	800673a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80066cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066d6:	d111      	bne.n	80066fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066e0:	d004      	beq.n	80066ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ea:	d107      	bne.n	80066fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006704:	d10f      	bne.n	8006726 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006714:	601a      	str	r2, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006724:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e017      	b.n	800676a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006740:	2300      	movs	r3, #0
 8006742:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	3b01      	subs	r3, #1
 8006748:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689a      	ldr	r2, [r3, #8]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	4013      	ands	r3, r2
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	429a      	cmp	r2, r3
 8006758:	bf0c      	ite	eq
 800675a:	2301      	moveq	r3, #1
 800675c:	2300      	movne	r3, #0
 800675e:	b2db      	uxtb	r3, r3
 8006760:	461a      	mov	r2, r3
 8006762:	79fb      	ldrb	r3, [r7, #7]
 8006764:	429a      	cmp	r2, r3
 8006766:	d19b      	bne.n	80066a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3720      	adds	r7, #32
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	20000000 	.word	0x20000000

08006778 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af02      	add	r7, sp, #8
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800678c:	d111      	bne.n	80067b2 <SPI_EndRxTransaction+0x3a>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006796:	d004      	beq.n	80067a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067a0:	d107      	bne.n	80067b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067b0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067ba:	d12a      	bne.n	8006812 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067c4:	d012      	beq.n	80067ec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2200      	movs	r2, #0
 80067ce:	2180      	movs	r1, #128	; 0x80
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f7ff ff49 	bl	8006668 <SPI_WaitFlagStateUntilTimeout>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d02d      	beq.n	8006838 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e0:	f043 0220 	orr.w	r2, r3, #32
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e026      	b.n	800683a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	2200      	movs	r2, #0
 80067f4:	2101      	movs	r1, #1
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f7ff ff36 	bl	8006668 <SPI_WaitFlagStateUntilTimeout>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d01a      	beq.n	8006838 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006806:	f043 0220 	orr.w	r2, r3, #32
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e013      	b.n	800683a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	2200      	movs	r2, #0
 800681a:	2101      	movs	r1, #1
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f7ff ff23 	bl	8006668 <SPI_WaitFlagStateUntilTimeout>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d007      	beq.n	8006838 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800682c:	f043 0220 	orr.w	r2, r3, #32
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e000      	b.n	800683a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
	...

08006844 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b088      	sub	sp, #32
 8006848:	af02      	add	r7, sp, #8
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006850:	4b1b      	ldr	r3, [pc, #108]	; (80068c0 <SPI_EndRxTxTransaction+0x7c>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a1b      	ldr	r2, [pc, #108]	; (80068c4 <SPI_EndRxTxTransaction+0x80>)
 8006856:	fba2 2303 	umull	r2, r3, r2, r3
 800685a:	0d5b      	lsrs	r3, r3, #21
 800685c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006860:	fb02 f303 	mul.w	r3, r2, r3
 8006864:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800686e:	d112      	bne.n	8006896 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2200      	movs	r2, #0
 8006878:	2180      	movs	r1, #128	; 0x80
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f7ff fef4 	bl	8006668 <SPI_WaitFlagStateUntilTimeout>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d016      	beq.n	80068b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688a:	f043 0220 	orr.w	r2, r3, #32
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e00f      	b.n	80068b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00a      	beq.n	80068b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	3b01      	subs	r3, #1
 80068a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ac:	2b80      	cmp	r3, #128	; 0x80
 80068ae:	d0f2      	beq.n	8006896 <SPI_EndRxTxTransaction+0x52>
 80068b0:	e000      	b.n	80068b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80068b2:	bf00      	nop
  }

  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3718      	adds	r7, #24
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	20000000 	.word	0x20000000
 80068c4:	165e9f81 	.word	0x165e9f81

080068c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e03f      	b.n	800695a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d106      	bne.n	80068f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7fc f91e 	bl	8002b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2224      	movs	r2, #36	; 0x24
 80068f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68da      	ldr	r2, [r3, #12]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800690a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f9a7 	bl	8006c60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	691a      	ldr	r2, [r3, #16]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006920:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	695a      	ldr	r2, [r3, #20]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006930:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68da      	ldr	r2, [r3, #12]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006940:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2220      	movs	r2, #32
 800694c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2220      	movs	r2, #32
 8006954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b08a      	sub	sp, #40	; 0x28
 8006966:	af02      	add	r7, sp, #8
 8006968:	60f8      	str	r0, [r7, #12]
 800696a:	60b9      	str	r1, [r7, #8]
 800696c:	603b      	str	r3, [r7, #0]
 800696e:	4613      	mov	r3, r2
 8006970:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006972:	2300      	movs	r3, #0
 8006974:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b20      	cmp	r3, #32
 8006980:	d17c      	bne.n	8006a7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <HAL_UART_Transmit+0x2c>
 8006988:	88fb      	ldrh	r3, [r7, #6]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e075      	b.n	8006a7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006998:	2b01      	cmp	r3, #1
 800699a:	d101      	bne.n	80069a0 <HAL_UART_Transmit+0x3e>
 800699c:	2302      	movs	r3, #2
 800699e:	e06e      	b.n	8006a7e <HAL_UART_Transmit+0x11c>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2221      	movs	r2, #33	; 0x21
 80069b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069b6:	f7fc f9ff 	bl	8002db8 <HAL_GetTick>
 80069ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	88fa      	ldrh	r2, [r7, #6]
 80069c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	88fa      	ldrh	r2, [r7, #6]
 80069c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d0:	d108      	bne.n	80069e4 <HAL_UART_Transmit+0x82>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d104      	bne.n	80069e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80069da:	2300      	movs	r3, #0
 80069dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	61bb      	str	r3, [r7, #24]
 80069e2:	e003      	b.n	80069ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069e8:	2300      	movs	r3, #0
 80069ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80069f4:	e02a      	b.n	8006a4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	2200      	movs	r2, #0
 80069fe:	2180      	movs	r1, #128	; 0x80
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 f8e2 	bl	8006bca <UART_WaitOnFlagUntilTimeout>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e036      	b.n	8006a7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10b      	bne.n	8006a2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	3302      	adds	r3, #2
 8006a2a:	61bb      	str	r3, [r7, #24]
 8006a2c:	e007      	b.n	8006a3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	781a      	ldrb	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	3b01      	subs	r3, #1
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1cf      	bne.n	80069f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	2140      	movs	r1, #64	; 0x40
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f000 f8b2 	bl	8006bca <UART_WaitOnFlagUntilTimeout>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d001      	beq.n	8006a70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e006      	b.n	8006a7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2220      	movs	r2, #32
 8006a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	e000      	b.n	8006a7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006a7c:	2302      	movs	r3, #2
  }
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3720      	adds	r7, #32
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b08a      	sub	sp, #40	; 0x28
 8006a8a:	af02      	add	r7, sp, #8
 8006a8c:	60f8      	str	r0, [r7, #12]
 8006a8e:	60b9      	str	r1, [r7, #8]
 8006a90:	603b      	str	r3, [r7, #0]
 8006a92:	4613      	mov	r3, r2
 8006a94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b20      	cmp	r3, #32
 8006aa4:	f040 808c 	bne.w	8006bc0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d002      	beq.n	8006ab4 <HAL_UART_Receive+0x2e>
 8006aae:	88fb      	ldrh	r3, [r7, #6]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e084      	b.n	8006bc2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d101      	bne.n	8006ac6 <HAL_UART_Receive+0x40>
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	e07d      	b.n	8006bc2 <HAL_UART_Receive+0x13c>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2222      	movs	r2, #34	; 0x22
 8006ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ae2:	f7fc f969 	bl	8002db8 <HAL_GetTick>
 8006ae6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	88fa      	ldrh	r2, [r7, #6]
 8006aec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	88fa      	ldrh	r2, [r7, #6]
 8006af2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006afc:	d108      	bne.n	8006b10 <HAL_UART_Receive+0x8a>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d104      	bne.n	8006b10 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006b06:	2300      	movs	r3, #0
 8006b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	61bb      	str	r3, [r7, #24]
 8006b0e:	e003      	b.n	8006b18 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b14:	2300      	movs	r3, #0
 8006b16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006b20:	e043      	b.n	8006baa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	9300      	str	r3, [sp, #0]
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	2120      	movs	r1, #32
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f000 f84c 	bl	8006bca <UART_WaitOnFlagUntilTimeout>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d001      	beq.n	8006b3c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e042      	b.n	8006bc2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10c      	bne.n	8006b5c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	3302      	adds	r3, #2
 8006b58:	61bb      	str	r3, [r7, #24]
 8006b5a:	e01f      	b.n	8006b9c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b64:	d007      	beq.n	8006b76 <HAL_UART_Receive+0xf0>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10a      	bne.n	8006b84 <HAL_UART_Receive+0xfe>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d106      	bne.n	8006b84 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	701a      	strb	r2, [r3, #0]
 8006b82:	e008      	b.n	8006b96 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b90:	b2da      	uxtb	r2, r3
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1b6      	bne.n	8006b22 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	e000      	b.n	8006bc2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006bc0:	2302      	movs	r3, #2
  }
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3720      	adds	r7, #32
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b084      	sub	sp, #16
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	60f8      	str	r0, [r7, #12]
 8006bd2:	60b9      	str	r1, [r7, #8]
 8006bd4:	603b      	str	r3, [r7, #0]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bda:	e02c      	b.n	8006c36 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be2:	d028      	beq.n	8006c36 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d007      	beq.n	8006bfa <UART_WaitOnFlagUntilTimeout+0x30>
 8006bea:	f7fc f8e5 	bl	8002db8 <HAL_GetTick>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d21d      	bcs.n	8006c36 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68da      	ldr	r2, [r3, #12]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c08:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	695a      	ldr	r2, [r3, #20]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 0201 	bic.w	r2, r2, #1
 8006c18:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2220      	movs	r2, #32
 8006c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e00f      	b.n	8006c56 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	4013      	ands	r3, r2
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	bf0c      	ite	eq
 8006c46:	2301      	moveq	r3, #1
 8006c48:	2300      	movne	r3, #0
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	79fb      	ldrb	r3, [r7, #7]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d0c3      	beq.n	8006bdc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
	...

08006c60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c64:	b09f      	sub	sp, #124	; 0x7c
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c76:	68d9      	ldr	r1, [r3, #12]
 8006c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	ea40 0301 	orr.w	r3, r0, r1
 8006c80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c84:	689a      	ldr	r2, [r3, #8]
 8006c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	431a      	orrs	r2, r3
 8006c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ca4:	f021 010c 	bic.w	r1, r1, #12
 8006ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cae:	430b      	orrs	r3, r1
 8006cb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	695b      	ldr	r3, [r3, #20]
 8006cb8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cbe:	6999      	ldr	r1, [r3, #24]
 8006cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	ea40 0301 	orr.w	r3, r0, r1
 8006cc8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	4bc5      	ldr	r3, [pc, #788]	; (8006fe4 <UART_SetConfig+0x384>)
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d004      	beq.n	8006cde <UART_SetConfig+0x7e>
 8006cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	4bc3      	ldr	r3, [pc, #780]	; (8006fe8 <UART_SetConfig+0x388>)
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d103      	bne.n	8006ce6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cde:	f7fe f8bd 	bl	8004e5c <HAL_RCC_GetPCLK2Freq>
 8006ce2:	6778      	str	r0, [r7, #116]	; 0x74
 8006ce4:	e002      	b.n	8006cec <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ce6:	f7fe f8a5 	bl	8004e34 <HAL_RCC_GetPCLK1Freq>
 8006cea:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cee:	69db      	ldr	r3, [r3, #28]
 8006cf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cf4:	f040 80b6 	bne.w	8006e64 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cfa:	461c      	mov	r4, r3
 8006cfc:	f04f 0500 	mov.w	r5, #0
 8006d00:	4622      	mov	r2, r4
 8006d02:	462b      	mov	r3, r5
 8006d04:	1891      	adds	r1, r2, r2
 8006d06:	6439      	str	r1, [r7, #64]	; 0x40
 8006d08:	415b      	adcs	r3, r3
 8006d0a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d0c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d10:	1912      	adds	r2, r2, r4
 8006d12:	eb45 0303 	adc.w	r3, r5, r3
 8006d16:	f04f 0000 	mov.w	r0, #0
 8006d1a:	f04f 0100 	mov.w	r1, #0
 8006d1e:	00d9      	lsls	r1, r3, #3
 8006d20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d24:	00d0      	lsls	r0, r2, #3
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	1911      	adds	r1, r2, r4
 8006d2c:	6639      	str	r1, [r7, #96]	; 0x60
 8006d2e:	416b      	adcs	r3, r5
 8006d30:	667b      	str	r3, [r7, #100]	; 0x64
 8006d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	461a      	mov	r2, r3
 8006d38:	f04f 0300 	mov.w	r3, #0
 8006d3c:	1891      	adds	r1, r2, r2
 8006d3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d40:	415b      	adcs	r3, r3
 8006d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d48:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006d4c:	f7f9 ff68 	bl	8000c20 <__aeabi_uldivmod>
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	4ba5      	ldr	r3, [pc, #660]	; (8006fec <UART_SetConfig+0x38c>)
 8006d56:	fba3 2302 	umull	r2, r3, r3, r2
 8006d5a:	095b      	lsrs	r3, r3, #5
 8006d5c:	011e      	lsls	r6, r3, #4
 8006d5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d60:	461c      	mov	r4, r3
 8006d62:	f04f 0500 	mov.w	r5, #0
 8006d66:	4622      	mov	r2, r4
 8006d68:	462b      	mov	r3, r5
 8006d6a:	1891      	adds	r1, r2, r2
 8006d6c:	6339      	str	r1, [r7, #48]	; 0x30
 8006d6e:	415b      	adcs	r3, r3
 8006d70:	637b      	str	r3, [r7, #52]	; 0x34
 8006d72:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006d76:	1912      	adds	r2, r2, r4
 8006d78:	eb45 0303 	adc.w	r3, r5, r3
 8006d7c:	f04f 0000 	mov.w	r0, #0
 8006d80:	f04f 0100 	mov.w	r1, #0
 8006d84:	00d9      	lsls	r1, r3, #3
 8006d86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d8a:	00d0      	lsls	r0, r2, #3
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	460b      	mov	r3, r1
 8006d90:	1911      	adds	r1, r2, r4
 8006d92:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d94:	416b      	adcs	r3, r5
 8006d96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	f04f 0300 	mov.w	r3, #0
 8006da2:	1891      	adds	r1, r2, r2
 8006da4:	62b9      	str	r1, [r7, #40]	; 0x28
 8006da6:	415b      	adcs	r3, r3
 8006da8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006daa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006dae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006db2:	f7f9 ff35 	bl	8000c20 <__aeabi_uldivmod>
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	4b8c      	ldr	r3, [pc, #560]	; (8006fec <UART_SetConfig+0x38c>)
 8006dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8006dc0:	095b      	lsrs	r3, r3, #5
 8006dc2:	2164      	movs	r1, #100	; 0x64
 8006dc4:	fb01 f303 	mul.w	r3, r1, r3
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	00db      	lsls	r3, r3, #3
 8006dcc:	3332      	adds	r3, #50	; 0x32
 8006dce:	4a87      	ldr	r2, [pc, #540]	; (8006fec <UART_SetConfig+0x38c>)
 8006dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd4:	095b      	lsrs	r3, r3, #5
 8006dd6:	005b      	lsls	r3, r3, #1
 8006dd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ddc:	441e      	add	r6, r3
 8006dde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006de0:	4618      	mov	r0, r3
 8006de2:	f04f 0100 	mov.w	r1, #0
 8006de6:	4602      	mov	r2, r0
 8006de8:	460b      	mov	r3, r1
 8006dea:	1894      	adds	r4, r2, r2
 8006dec:	623c      	str	r4, [r7, #32]
 8006dee:	415b      	adcs	r3, r3
 8006df0:	627b      	str	r3, [r7, #36]	; 0x24
 8006df2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006df6:	1812      	adds	r2, r2, r0
 8006df8:	eb41 0303 	adc.w	r3, r1, r3
 8006dfc:	f04f 0400 	mov.w	r4, #0
 8006e00:	f04f 0500 	mov.w	r5, #0
 8006e04:	00dd      	lsls	r5, r3, #3
 8006e06:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006e0a:	00d4      	lsls	r4, r2, #3
 8006e0c:	4622      	mov	r2, r4
 8006e0e:	462b      	mov	r3, r5
 8006e10:	1814      	adds	r4, r2, r0
 8006e12:	653c      	str	r4, [r7, #80]	; 0x50
 8006e14:	414b      	adcs	r3, r1
 8006e16:	657b      	str	r3, [r7, #84]	; 0x54
 8006e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	f04f 0300 	mov.w	r3, #0
 8006e22:	1891      	adds	r1, r2, r2
 8006e24:	61b9      	str	r1, [r7, #24]
 8006e26:	415b      	adcs	r3, r3
 8006e28:	61fb      	str	r3, [r7, #28]
 8006e2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e2e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006e32:	f7f9 fef5 	bl	8000c20 <__aeabi_uldivmod>
 8006e36:	4602      	mov	r2, r0
 8006e38:	460b      	mov	r3, r1
 8006e3a:	4b6c      	ldr	r3, [pc, #432]	; (8006fec <UART_SetConfig+0x38c>)
 8006e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e40:	095b      	lsrs	r3, r3, #5
 8006e42:	2164      	movs	r1, #100	; 0x64
 8006e44:	fb01 f303 	mul.w	r3, r1, r3
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	00db      	lsls	r3, r3, #3
 8006e4c:	3332      	adds	r3, #50	; 0x32
 8006e4e:	4a67      	ldr	r2, [pc, #412]	; (8006fec <UART_SetConfig+0x38c>)
 8006e50:	fba2 2303 	umull	r2, r3, r2, r3
 8006e54:	095b      	lsrs	r3, r3, #5
 8006e56:	f003 0207 	and.w	r2, r3, #7
 8006e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4432      	add	r2, r6
 8006e60:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e62:	e0b9      	b.n	8006fd8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e66:	461c      	mov	r4, r3
 8006e68:	f04f 0500 	mov.w	r5, #0
 8006e6c:	4622      	mov	r2, r4
 8006e6e:	462b      	mov	r3, r5
 8006e70:	1891      	adds	r1, r2, r2
 8006e72:	6139      	str	r1, [r7, #16]
 8006e74:	415b      	adcs	r3, r3
 8006e76:	617b      	str	r3, [r7, #20]
 8006e78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006e7c:	1912      	adds	r2, r2, r4
 8006e7e:	eb45 0303 	adc.w	r3, r5, r3
 8006e82:	f04f 0000 	mov.w	r0, #0
 8006e86:	f04f 0100 	mov.w	r1, #0
 8006e8a:	00d9      	lsls	r1, r3, #3
 8006e8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e90:	00d0      	lsls	r0, r2, #3
 8006e92:	4602      	mov	r2, r0
 8006e94:	460b      	mov	r3, r1
 8006e96:	eb12 0804 	adds.w	r8, r2, r4
 8006e9a:	eb43 0905 	adc.w	r9, r3, r5
 8006e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f04f 0100 	mov.w	r1, #0
 8006ea8:	f04f 0200 	mov.w	r2, #0
 8006eac:	f04f 0300 	mov.w	r3, #0
 8006eb0:	008b      	lsls	r3, r1, #2
 8006eb2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006eb6:	0082      	lsls	r2, r0, #2
 8006eb8:	4640      	mov	r0, r8
 8006eba:	4649      	mov	r1, r9
 8006ebc:	f7f9 feb0 	bl	8000c20 <__aeabi_uldivmod>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4b49      	ldr	r3, [pc, #292]	; (8006fec <UART_SetConfig+0x38c>)
 8006ec6:	fba3 2302 	umull	r2, r3, r3, r2
 8006eca:	095b      	lsrs	r3, r3, #5
 8006ecc:	011e      	lsls	r6, r3, #4
 8006ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f04f 0100 	mov.w	r1, #0
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	460b      	mov	r3, r1
 8006eda:	1894      	adds	r4, r2, r2
 8006edc:	60bc      	str	r4, [r7, #8]
 8006ede:	415b      	adcs	r3, r3
 8006ee0:	60fb      	str	r3, [r7, #12]
 8006ee2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ee6:	1812      	adds	r2, r2, r0
 8006ee8:	eb41 0303 	adc.w	r3, r1, r3
 8006eec:	f04f 0400 	mov.w	r4, #0
 8006ef0:	f04f 0500 	mov.w	r5, #0
 8006ef4:	00dd      	lsls	r5, r3, #3
 8006ef6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006efa:	00d4      	lsls	r4, r2, #3
 8006efc:	4622      	mov	r2, r4
 8006efe:	462b      	mov	r3, r5
 8006f00:	1814      	adds	r4, r2, r0
 8006f02:	64bc      	str	r4, [r7, #72]	; 0x48
 8006f04:	414b      	adcs	r3, r1
 8006f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f04f 0100 	mov.w	r1, #0
 8006f12:	f04f 0200 	mov.w	r2, #0
 8006f16:	f04f 0300 	mov.w	r3, #0
 8006f1a:	008b      	lsls	r3, r1, #2
 8006f1c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f20:	0082      	lsls	r2, r0, #2
 8006f22:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006f26:	f7f9 fe7b 	bl	8000c20 <__aeabi_uldivmod>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	4b2f      	ldr	r3, [pc, #188]	; (8006fec <UART_SetConfig+0x38c>)
 8006f30:	fba3 1302 	umull	r1, r3, r3, r2
 8006f34:	095b      	lsrs	r3, r3, #5
 8006f36:	2164      	movs	r1, #100	; 0x64
 8006f38:	fb01 f303 	mul.w	r3, r1, r3
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	011b      	lsls	r3, r3, #4
 8006f40:	3332      	adds	r3, #50	; 0x32
 8006f42:	4a2a      	ldr	r2, [pc, #168]	; (8006fec <UART_SetConfig+0x38c>)
 8006f44:	fba2 2303 	umull	r2, r3, r2, r3
 8006f48:	095b      	lsrs	r3, r3, #5
 8006f4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f4e:	441e      	add	r6, r3
 8006f50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f52:	4618      	mov	r0, r3
 8006f54:	f04f 0100 	mov.w	r1, #0
 8006f58:	4602      	mov	r2, r0
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	1894      	adds	r4, r2, r2
 8006f5e:	603c      	str	r4, [r7, #0]
 8006f60:	415b      	adcs	r3, r3
 8006f62:	607b      	str	r3, [r7, #4]
 8006f64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f68:	1812      	adds	r2, r2, r0
 8006f6a:	eb41 0303 	adc.w	r3, r1, r3
 8006f6e:	f04f 0400 	mov.w	r4, #0
 8006f72:	f04f 0500 	mov.w	r5, #0
 8006f76:	00dd      	lsls	r5, r3, #3
 8006f78:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f7c:	00d4      	lsls	r4, r2, #3
 8006f7e:	4622      	mov	r2, r4
 8006f80:	462b      	mov	r3, r5
 8006f82:	eb12 0a00 	adds.w	sl, r2, r0
 8006f86:	eb43 0b01 	adc.w	fp, r3, r1
 8006f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f04f 0100 	mov.w	r1, #0
 8006f94:	f04f 0200 	mov.w	r2, #0
 8006f98:	f04f 0300 	mov.w	r3, #0
 8006f9c:	008b      	lsls	r3, r1, #2
 8006f9e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006fa2:	0082      	lsls	r2, r0, #2
 8006fa4:	4650      	mov	r0, sl
 8006fa6:	4659      	mov	r1, fp
 8006fa8:	f7f9 fe3a 	bl	8000c20 <__aeabi_uldivmod>
 8006fac:	4602      	mov	r2, r0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	4b0e      	ldr	r3, [pc, #56]	; (8006fec <UART_SetConfig+0x38c>)
 8006fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8006fb6:	095b      	lsrs	r3, r3, #5
 8006fb8:	2164      	movs	r1, #100	; 0x64
 8006fba:	fb01 f303 	mul.w	r3, r1, r3
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	011b      	lsls	r3, r3, #4
 8006fc2:	3332      	adds	r3, #50	; 0x32
 8006fc4:	4a09      	ldr	r2, [pc, #36]	; (8006fec <UART_SetConfig+0x38c>)
 8006fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fca:	095b      	lsrs	r3, r3, #5
 8006fcc:	f003 020f 	and.w	r2, r3, #15
 8006fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4432      	add	r2, r6
 8006fd6:	609a      	str	r2, [r3, #8]
}
 8006fd8:	bf00      	nop
 8006fda:	377c      	adds	r7, #124	; 0x7c
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe2:	bf00      	nop
 8006fe4:	40011000 	.word	0x40011000
 8006fe8:	40011400 	.word	0x40011400
 8006fec:	51eb851f 	.word	0x51eb851f

08006ff0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ff0:	b084      	sub	sp, #16
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b084      	sub	sp, #16
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
 8006ffa:	f107 001c 	add.w	r0, r7, #28
 8006ffe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007004:	2b01      	cmp	r3, #1
 8007006:	d122      	bne.n	800704e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800701c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007032:	2b01      	cmp	r3, #1
 8007034:	d105      	bne.n	8007042 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f001 fac0 	bl	80085c8 <USB_CoreReset>
 8007048:	4603      	mov	r3, r0
 800704a:	73fb      	strb	r3, [r7, #15]
 800704c:	e01a      	b.n	8007084 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f001 fab4 	bl	80085c8 <USB_CoreReset>
 8007060:	4603      	mov	r3, r0
 8007062:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007066:	2b00      	cmp	r3, #0
 8007068:	d106      	bne.n	8007078 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	639a      	str	r2, [r3, #56]	; 0x38
 8007076:	e005      	b.n	8007084 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007086:	2b01      	cmp	r3, #1
 8007088:	d10b      	bne.n	80070a2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f043 0206 	orr.w	r2, r3, #6
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f043 0220 	orr.w	r2, r3, #32
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80070a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070ae:	b004      	add	sp, #16
 80070b0:	4770      	bx	lr
	...

080070b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	4613      	mov	r3, r2
 80070c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80070c2:	79fb      	ldrb	r3, [r7, #7]
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d165      	bne.n	8007194 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	4a41      	ldr	r2, [pc, #260]	; (80071d0 <USB_SetTurnaroundTime+0x11c>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d906      	bls.n	80070de <USB_SetTurnaroundTime+0x2a>
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	4a40      	ldr	r2, [pc, #256]	; (80071d4 <USB_SetTurnaroundTime+0x120>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d202      	bcs.n	80070de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80070d8:	230f      	movs	r3, #15
 80070da:	617b      	str	r3, [r7, #20]
 80070dc:	e062      	b.n	80071a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	4a3c      	ldr	r2, [pc, #240]	; (80071d4 <USB_SetTurnaroundTime+0x120>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d306      	bcc.n	80070f4 <USB_SetTurnaroundTime+0x40>
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	4a3b      	ldr	r2, [pc, #236]	; (80071d8 <USB_SetTurnaroundTime+0x124>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d202      	bcs.n	80070f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80070ee:	230e      	movs	r3, #14
 80070f0:	617b      	str	r3, [r7, #20]
 80070f2:	e057      	b.n	80071a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	4a38      	ldr	r2, [pc, #224]	; (80071d8 <USB_SetTurnaroundTime+0x124>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d306      	bcc.n	800710a <USB_SetTurnaroundTime+0x56>
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	4a37      	ldr	r2, [pc, #220]	; (80071dc <USB_SetTurnaroundTime+0x128>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d202      	bcs.n	800710a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007104:	230d      	movs	r3, #13
 8007106:	617b      	str	r3, [r7, #20]
 8007108:	e04c      	b.n	80071a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	4a33      	ldr	r2, [pc, #204]	; (80071dc <USB_SetTurnaroundTime+0x128>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d306      	bcc.n	8007120 <USB_SetTurnaroundTime+0x6c>
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	4a32      	ldr	r2, [pc, #200]	; (80071e0 <USB_SetTurnaroundTime+0x12c>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d802      	bhi.n	8007120 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800711a:	230c      	movs	r3, #12
 800711c:	617b      	str	r3, [r7, #20]
 800711e:	e041      	b.n	80071a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	4a2f      	ldr	r2, [pc, #188]	; (80071e0 <USB_SetTurnaroundTime+0x12c>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d906      	bls.n	8007136 <USB_SetTurnaroundTime+0x82>
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	4a2e      	ldr	r2, [pc, #184]	; (80071e4 <USB_SetTurnaroundTime+0x130>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d802      	bhi.n	8007136 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007130:	230b      	movs	r3, #11
 8007132:	617b      	str	r3, [r7, #20]
 8007134:	e036      	b.n	80071a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	4a2a      	ldr	r2, [pc, #168]	; (80071e4 <USB_SetTurnaroundTime+0x130>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d906      	bls.n	800714c <USB_SetTurnaroundTime+0x98>
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	4a29      	ldr	r2, [pc, #164]	; (80071e8 <USB_SetTurnaroundTime+0x134>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d802      	bhi.n	800714c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007146:	230a      	movs	r3, #10
 8007148:	617b      	str	r3, [r7, #20]
 800714a:	e02b      	b.n	80071a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	4a26      	ldr	r2, [pc, #152]	; (80071e8 <USB_SetTurnaroundTime+0x134>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d906      	bls.n	8007162 <USB_SetTurnaroundTime+0xae>
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	4a25      	ldr	r2, [pc, #148]	; (80071ec <USB_SetTurnaroundTime+0x138>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d202      	bcs.n	8007162 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800715c:	2309      	movs	r3, #9
 800715e:	617b      	str	r3, [r7, #20]
 8007160:	e020      	b.n	80071a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	4a21      	ldr	r2, [pc, #132]	; (80071ec <USB_SetTurnaroundTime+0x138>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d306      	bcc.n	8007178 <USB_SetTurnaroundTime+0xc4>
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	4a20      	ldr	r2, [pc, #128]	; (80071f0 <USB_SetTurnaroundTime+0x13c>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d802      	bhi.n	8007178 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007172:	2308      	movs	r3, #8
 8007174:	617b      	str	r3, [r7, #20]
 8007176:	e015      	b.n	80071a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	4a1d      	ldr	r2, [pc, #116]	; (80071f0 <USB_SetTurnaroundTime+0x13c>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d906      	bls.n	800718e <USB_SetTurnaroundTime+0xda>
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	4a1c      	ldr	r2, [pc, #112]	; (80071f4 <USB_SetTurnaroundTime+0x140>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d202      	bcs.n	800718e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007188:	2307      	movs	r3, #7
 800718a:	617b      	str	r3, [r7, #20]
 800718c:	e00a      	b.n	80071a4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800718e:	2306      	movs	r3, #6
 8007190:	617b      	str	r3, [r7, #20]
 8007192:	e007      	b.n	80071a4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007194:	79fb      	ldrb	r3, [r7, #7]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d102      	bne.n	80071a0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800719a:	2309      	movs	r3, #9
 800719c:	617b      	str	r3, [r7, #20]
 800719e:	e001      	b.n	80071a4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80071a0:	2309      	movs	r3, #9
 80071a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	68da      	ldr	r2, [r3, #12]
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	029b      	lsls	r3, r3, #10
 80071b8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80071bc:	431a      	orrs	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	371c      	adds	r7, #28
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	00d8acbf 	.word	0x00d8acbf
 80071d4:	00e4e1c0 	.word	0x00e4e1c0
 80071d8:	00f42400 	.word	0x00f42400
 80071dc:	01067380 	.word	0x01067380
 80071e0:	011a499f 	.word	0x011a499f
 80071e4:	01312cff 	.word	0x01312cff
 80071e8:	014ca43f 	.word	0x014ca43f
 80071ec:	016e3600 	.word	0x016e3600
 80071f0:	01a6ab1f 	.word	0x01a6ab1f
 80071f4:	01e84800 	.word	0x01e84800

080071f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f043 0201 	orr.w	r2, r3, #1
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	370c      	adds	r7, #12
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr

0800721a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800721a:	b480      	push	{r7}
 800721c:	b083      	sub	sp, #12
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f023 0201 	bic.w	r2, r3, #1
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	460b      	mov	r3, r1
 8007246:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007254:	78fb      	ldrb	r3, [r7, #3]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d106      	bne.n	8007268 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	60da      	str	r2, [r3, #12]
 8007266:	e00b      	b.n	8007280 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007268:	78fb      	ldrb	r3, [r7, #3]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d106      	bne.n	800727c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	60da      	str	r2, [r3, #12]
 800727a:	e001      	b.n	8007280 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e003      	b.n	8007288 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007280:	2032      	movs	r0, #50	; 0x32
 8007282:	f7fb fda5 	bl	8002dd0 <HAL_Delay>

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007290:	b084      	sub	sp, #16
 8007292:	b580      	push	{r7, lr}
 8007294:	b086      	sub	sp, #24
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
 800729a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800729e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80072aa:	2300      	movs	r3, #0
 80072ac:	613b      	str	r3, [r7, #16]
 80072ae:	e009      	b.n	80072c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	3340      	adds	r3, #64	; 0x40
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4413      	add	r3, r2
 80072ba:	2200      	movs	r2, #0
 80072bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	3301      	adds	r3, #1
 80072c2:	613b      	str	r3, [r7, #16]
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	2b0e      	cmp	r3, #14
 80072c8:	d9f2      	bls.n	80072b0 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80072ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d11c      	bne.n	800730a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072de:	f043 0302 	orr.w	r3, r3, #2
 80072e2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	e005      	b.n	8007316 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800731c:	461a      	mov	r2, r3
 800731e:	2300      	movs	r3, #0
 8007320:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007328:	4619      	mov	r1, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007330:	461a      	mov	r2, r3
 8007332:	680b      	ldr	r3, [r1, #0]
 8007334:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007338:	2b01      	cmp	r3, #1
 800733a:	d10c      	bne.n	8007356 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800733c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733e:	2b00      	cmp	r3, #0
 8007340:	d104      	bne.n	800734c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007342:	2100      	movs	r1, #0
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f949 	bl	80075dc <USB_SetDevSpeed>
 800734a:	e008      	b.n	800735e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800734c:	2101      	movs	r1, #1
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f944 	bl	80075dc <USB_SetDevSpeed>
 8007354:	e003      	b.n	800735e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007356:	2103      	movs	r1, #3
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 f93f 	bl	80075dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800735e:	2110      	movs	r1, #16
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f8f3 	bl	800754c <USB_FlushTxFifo>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f911 	bl	8007598 <USB_FlushRxFifo>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007386:	461a      	mov	r2, r3
 8007388:	2300      	movs	r3, #0
 800738a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007392:	461a      	mov	r2, r3
 8007394:	2300      	movs	r3, #0
 8007396:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800739e:	461a      	mov	r2, r3
 80073a0:	2300      	movs	r3, #0
 80073a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073a4:	2300      	movs	r3, #0
 80073a6:	613b      	str	r3, [r7, #16]
 80073a8:	e043      	b.n	8007432 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	015a      	lsls	r2, r3, #5
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073c0:	d118      	bne.n	80073f4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10a      	bne.n	80073de <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	015a      	lsls	r2, r3, #5
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d4:	461a      	mov	r2, r3
 80073d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80073da:	6013      	str	r3, [r2, #0]
 80073dc:	e013      	b.n	8007406 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	015a      	lsls	r2, r3, #5
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	4413      	add	r3, r2
 80073e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ea:	461a      	mov	r2, r3
 80073ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80073f0:	6013      	str	r3, [r2, #0]
 80073f2:	e008      	b.n	8007406 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007400:	461a      	mov	r2, r3
 8007402:	2300      	movs	r3, #0
 8007404:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	4413      	add	r3, r2
 800740e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007412:	461a      	mov	r2, r3
 8007414:	2300      	movs	r3, #0
 8007416:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	015a      	lsls	r2, r3, #5
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	4413      	add	r3, r2
 8007420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007424:	461a      	mov	r2, r3
 8007426:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800742a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	3301      	adds	r3, #1
 8007430:	613b      	str	r3, [r7, #16]
 8007432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	429a      	cmp	r2, r3
 8007438:	d3b7      	bcc.n	80073aa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800743a:	2300      	movs	r3, #0
 800743c:	613b      	str	r3, [r7, #16]
 800743e:	e043      	b.n	80074c8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	015a      	lsls	r2, r3, #5
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	4413      	add	r3, r2
 8007448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007452:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007456:	d118      	bne.n	800748a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10a      	bne.n	8007474 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	4413      	add	r3, r2
 8007466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800746a:	461a      	mov	r2, r3
 800746c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007470:	6013      	str	r3, [r2, #0]
 8007472:	e013      	b.n	800749c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	4413      	add	r3, r2
 800747c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007480:	461a      	mov	r2, r3
 8007482:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007486:	6013      	str	r3, [r2, #0]
 8007488:	e008      	b.n	800749c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	015a      	lsls	r2, r3, #5
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	4413      	add	r3, r2
 8007492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007496:	461a      	mov	r2, r3
 8007498:	2300      	movs	r3, #0
 800749a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	015a      	lsls	r2, r3, #5
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	4413      	add	r3, r2
 80074a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a8:	461a      	mov	r2, r3
 80074aa:	2300      	movs	r3, #0
 80074ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ba:	461a      	mov	r2, r3
 80074bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80074c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	3301      	adds	r3, #1
 80074c6:	613b      	str	r3, [r7, #16]
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d3b7      	bcc.n	8007440 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80074f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80074f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d105      	bne.n	8007504 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	f043 0210 	orr.w	r2, r3, #16
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	699a      	ldr	r2, [r3, #24]
 8007508:	4b0f      	ldr	r3, [pc, #60]	; (8007548 <USB_DevInit+0x2b8>)
 800750a:	4313      	orrs	r3, r2
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007512:	2b00      	cmp	r3, #0
 8007514:	d005      	beq.n	8007522 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	f043 0208 	orr.w	r2, r3, #8
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007524:	2b01      	cmp	r3, #1
 8007526:	d107      	bne.n	8007538 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007530:	f043 0304 	orr.w	r3, r3, #4
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007538:	7dfb      	ldrb	r3, [r7, #23]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007544:	b004      	add	sp, #16
 8007546:	4770      	bx	lr
 8007548:	803c3800 	.word	0x803c3800

0800754c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007556:	2300      	movs	r3, #0
 8007558:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	019b      	lsls	r3, r3, #6
 800755e:	f043 0220 	orr.w	r2, r3, #32
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	3301      	adds	r3, #1
 800756a:	60fb      	str	r3, [r7, #12]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	4a09      	ldr	r2, [pc, #36]	; (8007594 <USB_FlushTxFifo+0x48>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d901      	bls.n	8007578 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e006      	b.n	8007586 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	f003 0320 	and.w	r3, r3, #32
 8007580:	2b20      	cmp	r3, #32
 8007582:	d0f0      	beq.n	8007566 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	00030d40 	.word	0x00030d40

08007598 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80075a0:	2300      	movs	r3, #0
 80075a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2210      	movs	r2, #16
 80075a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	3301      	adds	r3, #1
 80075ae:	60fb      	str	r3, [r7, #12]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	4a09      	ldr	r2, [pc, #36]	; (80075d8 <USB_FlushRxFifo+0x40>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d901      	bls.n	80075bc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e006      	b.n	80075ca <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	f003 0310 	and.w	r3, r3, #16
 80075c4:	2b10      	cmp	r3, #16
 80075c6:	d0f0      	beq.n	80075aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	00030d40 	.word	0x00030d40

080075dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	460b      	mov	r3, r1
 80075e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	78fb      	ldrb	r3, [r7, #3]
 80075f6:	68f9      	ldr	r1, [r7, #12]
 80075f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075fc:	4313      	orrs	r3, r2
 80075fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3714      	adds	r7, #20
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800760e:	b480      	push	{r7}
 8007610:	b087      	sub	sp, #28
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f003 0306 	and.w	r3, r3, #6
 8007626:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d102      	bne.n	8007634 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800762e:	2300      	movs	r3, #0
 8007630:	75fb      	strb	r3, [r7, #23]
 8007632:	e00a      	b.n	800764a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2b02      	cmp	r3, #2
 8007638:	d002      	beq.n	8007640 <USB_GetDevSpeed+0x32>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2b06      	cmp	r3, #6
 800763e:	d102      	bne.n	8007646 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007640:	2302      	movs	r3, #2
 8007642:	75fb      	strb	r3, [r7, #23]
 8007644:	e001      	b.n	800764a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007646:	230f      	movs	r3, #15
 8007648:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800764a:	7dfb      	ldrb	r3, [r7, #23]
}
 800764c:	4618      	mov	r0, r3
 800764e:	371c      	adds	r7, #28
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	785b      	ldrb	r3, [r3, #1]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d13a      	bne.n	80076ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800767a:	69da      	ldr	r2, [r3, #28]
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	f003 030f 	and.w	r3, r3, #15
 8007684:	2101      	movs	r1, #1
 8007686:	fa01 f303 	lsl.w	r3, r1, r3
 800768a:	b29b      	uxth	r3, r3
 800768c:	68f9      	ldr	r1, [r7, #12]
 800768e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007692:	4313      	orrs	r3, r2
 8007694:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	015a      	lsls	r2, r3, #5
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	4413      	add	r3, r2
 800769e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d155      	bne.n	8007758 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	015a      	lsls	r2, r3, #5
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4413      	add	r3, r2
 80076b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	78db      	ldrb	r3, [r3, #3]
 80076c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80076c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	059b      	lsls	r3, r3, #22
 80076ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80076d0:	4313      	orrs	r3, r2
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	0151      	lsls	r1, r2, #5
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	440a      	add	r2, r1
 80076da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076e6:	6013      	str	r3, [r2, #0]
 80076e8:	e036      	b.n	8007758 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076f0:	69da      	ldr	r2, [r3, #28]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	f003 030f 	and.w	r3, r3, #15
 80076fa:	2101      	movs	r1, #1
 80076fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007700:	041b      	lsls	r3, r3, #16
 8007702:	68f9      	ldr	r1, [r7, #12]
 8007704:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007708:	4313      	orrs	r3, r2
 800770a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	4413      	add	r3, r2
 8007714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d11a      	bne.n	8007758 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	015a      	lsls	r2, r3, #5
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	4413      	add	r3, r2
 800772a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	78db      	ldrb	r3, [r3, #3]
 800773c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800773e:	430b      	orrs	r3, r1
 8007740:	4313      	orrs	r3, r2
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	0151      	lsls	r1, r2, #5
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	440a      	add	r2, r1
 800774a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800774e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007756:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
	...

08007768 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	785b      	ldrb	r3, [r3, #1]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d161      	bne.n	8007848 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	015a      	lsls	r2, r3, #5
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	4413      	add	r3, r2
 800778c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007796:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800779a:	d11f      	bne.n	80077dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	015a      	lsls	r2, r3, #5
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4413      	add	r3, r2
 80077a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	0151      	lsls	r1, r2, #5
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	440a      	add	r2, r1
 80077b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80077ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	015a      	lsls	r2, r3, #5
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	4413      	add	r3, r2
 80077c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	0151      	lsls	r1, r2, #5
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	440a      	add	r2, r1
 80077d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	f003 030f 	and.w	r3, r3, #15
 80077ec:	2101      	movs	r1, #1
 80077ee:	fa01 f303 	lsl.w	r3, r1, r3
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	43db      	mvns	r3, r3
 80077f6:	68f9      	ldr	r1, [r7, #12]
 80077f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077fc:	4013      	ands	r3, r2
 80077fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007806:	69da      	ldr	r2, [r3, #28]
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	f003 030f 	and.w	r3, r3, #15
 8007810:	2101      	movs	r1, #1
 8007812:	fa01 f303 	lsl.w	r3, r1, r3
 8007816:	b29b      	uxth	r3, r3
 8007818:	43db      	mvns	r3, r3
 800781a:	68f9      	ldr	r1, [r7, #12]
 800781c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007820:	4013      	ands	r3, r2
 8007822:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	015a      	lsls	r2, r3, #5
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	4413      	add	r3, r2
 800782c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	0159      	lsls	r1, r3, #5
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	440b      	add	r3, r1
 800783a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800783e:	4619      	mov	r1, r3
 8007840:	4b35      	ldr	r3, [pc, #212]	; (8007918 <USB_DeactivateEndpoint+0x1b0>)
 8007842:	4013      	ands	r3, r2
 8007844:	600b      	str	r3, [r1, #0]
 8007846:	e060      	b.n	800790a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	015a      	lsls	r2, r3, #5
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	4413      	add	r3, r2
 8007850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800785a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800785e:	d11f      	bne.n	80078a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	015a      	lsls	r2, r3, #5
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	4413      	add	r3, r2
 8007868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	0151      	lsls	r1, r2, #5
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	440a      	add	r2, r1
 8007876:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800787a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800787e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	015a      	lsls	r2, r3, #5
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	4413      	add	r3, r2
 8007888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	0151      	lsls	r1, r2, #5
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	440a      	add	r2, r1
 8007896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800789a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800789e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	f003 030f 	and.w	r3, r3, #15
 80078b0:	2101      	movs	r1, #1
 80078b2:	fa01 f303 	lsl.w	r3, r1, r3
 80078b6:	041b      	lsls	r3, r3, #16
 80078b8:	43db      	mvns	r3, r3
 80078ba:	68f9      	ldr	r1, [r7, #12]
 80078bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078c0:	4013      	ands	r3, r2
 80078c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ca:	69da      	ldr	r2, [r3, #28]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	f003 030f 	and.w	r3, r3, #15
 80078d4:	2101      	movs	r1, #1
 80078d6:	fa01 f303 	lsl.w	r3, r1, r3
 80078da:	041b      	lsls	r3, r3, #16
 80078dc:	43db      	mvns	r3, r3
 80078de:	68f9      	ldr	r1, [r7, #12]
 80078e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078e4:	4013      	ands	r3, r2
 80078e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	015a      	lsls	r2, r3, #5
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	4413      	add	r3, r2
 80078f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	0159      	lsls	r1, r3, #5
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	440b      	add	r3, r1
 80078fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007902:	4619      	mov	r1, r3
 8007904:	4b05      	ldr	r3, [pc, #20]	; (800791c <USB_DeactivateEndpoint+0x1b4>)
 8007906:	4013      	ands	r3, r2
 8007908:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3714      	adds	r7, #20
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	ec337800 	.word	0xec337800
 800791c:	eff37800 	.word	0xeff37800

08007920 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b08a      	sub	sp, #40	; 0x28
 8007924:	af02      	add	r7, sp, #8
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	4613      	mov	r3, r2
 800792c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	785b      	ldrb	r3, [r3, #1]
 800793c:	2b01      	cmp	r3, #1
 800793e:	f040 815c 	bne.w	8007bfa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d132      	bne.n	80079b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	015a      	lsls	r2, r3, #5
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	4413      	add	r3, r2
 8007952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	69ba      	ldr	r2, [r7, #24]
 800795a:	0151      	lsls	r1, r2, #5
 800795c:	69fa      	ldr	r2, [r7, #28]
 800795e:	440a      	add	r2, r1
 8007960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007964:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007968:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800796c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	015a      	lsls	r2, r3, #5
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	4413      	add	r3, r2
 8007976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	69ba      	ldr	r2, [r7, #24]
 800797e:	0151      	lsls	r1, r2, #5
 8007980:	69fa      	ldr	r2, [r7, #28]
 8007982:	440a      	add	r2, r1
 8007984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007988:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800798c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	015a      	lsls	r2, r3, #5
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	4413      	add	r3, r2
 8007996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	69ba      	ldr	r2, [r7, #24]
 800799e:	0151      	lsls	r1, r2, #5
 80079a0:	69fa      	ldr	r2, [r7, #28]
 80079a2:	440a      	add	r2, r1
 80079a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079a8:	0cdb      	lsrs	r3, r3, #19
 80079aa:	04db      	lsls	r3, r3, #19
 80079ac:	6113      	str	r3, [r2, #16]
 80079ae:	e074      	b.n	8007a9a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	015a      	lsls	r2, r3, #5
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	4413      	add	r3, r2
 80079b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	69ba      	ldr	r2, [r7, #24]
 80079c0:	0151      	lsls	r1, r2, #5
 80079c2:	69fa      	ldr	r2, [r7, #28]
 80079c4:	440a      	add	r2, r1
 80079c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ca:	0cdb      	lsrs	r3, r3, #19
 80079cc:	04db      	lsls	r3, r3, #19
 80079ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	015a      	lsls	r2, r3, #5
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	4413      	add	r3, r2
 80079d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	69ba      	ldr	r2, [r7, #24]
 80079e0:	0151      	lsls	r1, r2, #5
 80079e2:	69fa      	ldr	r2, [r7, #28]
 80079e4:	440a      	add	r2, r1
 80079e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80079ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80079f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	015a      	lsls	r2, r3, #5
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a00:	691a      	ldr	r2, [r3, #16]
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	6959      	ldr	r1, [r3, #20]
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	440b      	add	r3, r1
 8007a0c:	1e59      	subs	r1, r3, #1
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a16:	04d9      	lsls	r1, r3, #19
 8007a18:	4b9d      	ldr	r3, [pc, #628]	; (8007c90 <USB_EPStartXfer+0x370>)
 8007a1a:	400b      	ands	r3, r1
 8007a1c:	69b9      	ldr	r1, [r7, #24]
 8007a1e:	0148      	lsls	r0, r1, #5
 8007a20:	69f9      	ldr	r1, [r7, #28]
 8007a22:	4401      	add	r1, r0
 8007a24:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	015a      	lsls	r2, r3, #5
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	4413      	add	r3, r2
 8007a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a38:	691a      	ldr	r2, [r3, #16]
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a42:	69b9      	ldr	r1, [r7, #24]
 8007a44:	0148      	lsls	r0, r1, #5
 8007a46:	69f9      	ldr	r1, [r7, #28]
 8007a48:	4401      	add	r1, r0
 8007a4a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	78db      	ldrb	r3, [r3, #3]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d11f      	bne.n	8007a9a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	015a      	lsls	r2, r3, #5
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	4413      	add	r3, r2
 8007a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	69ba      	ldr	r2, [r7, #24]
 8007a6a:	0151      	lsls	r1, r2, #5
 8007a6c:	69fa      	ldr	r2, [r7, #28]
 8007a6e:	440a      	add	r2, r1
 8007a70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a74:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007a78:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	015a      	lsls	r2, r3, #5
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	4413      	add	r3, r2
 8007a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	69ba      	ldr	r2, [r7, #24]
 8007a8a:	0151      	lsls	r1, r2, #5
 8007a8c:	69fa      	ldr	r2, [r7, #28]
 8007a8e:	440a      	add	r2, r1
 8007a90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a98:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007a9a:	79fb      	ldrb	r3, [r7, #7]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d14b      	bne.n	8007b38 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d009      	beq.n	8007abc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	78db      	ldrb	r3, [r3, #3]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d128      	bne.n	8007b16 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d110      	bne.n	8007af6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	015a      	lsls	r2, r3, #5
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	4413      	add	r3, r2
 8007adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	69ba      	ldr	r2, [r7, #24]
 8007ae4:	0151      	lsls	r1, r2, #5
 8007ae6:	69fa      	ldr	r2, [r7, #28]
 8007ae8:	440a      	add	r2, r1
 8007aea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007af2:	6013      	str	r3, [r2, #0]
 8007af4:	e00f      	b.n	8007b16 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	015a      	lsls	r2, r3, #5
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	4413      	add	r3, r2
 8007afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	0151      	lsls	r1, r2, #5
 8007b08:	69fa      	ldr	r2, [r7, #28]
 8007b0a:	440a      	add	r2, r1
 8007b0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b14:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	015a      	lsls	r2, r3, #5
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	69ba      	ldr	r2, [r7, #24]
 8007b26:	0151      	lsls	r1, r2, #5
 8007b28:	69fa      	ldr	r2, [r7, #28]
 8007b2a:	440a      	add	r2, r1
 8007b2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b34:	6013      	str	r3, [r2, #0]
 8007b36:	e12f      	b.n	8007d98 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	015a      	lsls	r2, r3, #5
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	4413      	add	r3, r2
 8007b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	69ba      	ldr	r2, [r7, #24]
 8007b48:	0151      	lsls	r1, r2, #5
 8007b4a:	69fa      	ldr	r2, [r7, #28]
 8007b4c:	440a      	add	r2, r1
 8007b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b56:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	78db      	ldrb	r3, [r3, #3]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d015      	beq.n	8007b8c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 8117 	beq.w	8007d98 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	f003 030f 	and.w	r3, r3, #15
 8007b7a:	2101      	movs	r1, #1
 8007b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b80:	69f9      	ldr	r1, [r7, #28]
 8007b82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b86:	4313      	orrs	r3, r2
 8007b88:	634b      	str	r3, [r1, #52]	; 0x34
 8007b8a:	e105      	b.n	8007d98 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d110      	bne.n	8007bbe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	015a      	lsls	r2, r3, #5
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	69ba      	ldr	r2, [r7, #24]
 8007bac:	0151      	lsls	r1, r2, #5
 8007bae:	69fa      	ldr	r2, [r7, #28]
 8007bb0:	440a      	add	r2, r1
 8007bb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007bba:	6013      	str	r3, [r2, #0]
 8007bbc:	e00f      	b.n	8007bde <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	015a      	lsls	r2, r3, #5
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	69ba      	ldr	r2, [r7, #24]
 8007bce:	0151      	lsls	r1, r2, #5
 8007bd0:	69fa      	ldr	r2, [r7, #28]
 8007bd2:	440a      	add	r2, r1
 8007bd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bdc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	68d9      	ldr	r1, [r3, #12]
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	781a      	ldrb	r2, [r3, #0]
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	b298      	uxth	r0, r3
 8007bec:	79fb      	ldrb	r3, [r7, #7]
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f000 fa2b 	bl	800804e <USB_WritePacket>
 8007bf8:	e0ce      	b.n	8007d98 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	015a      	lsls	r2, r3, #5
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	4413      	add	r3, r2
 8007c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	69ba      	ldr	r2, [r7, #24]
 8007c0a:	0151      	lsls	r1, r2, #5
 8007c0c:	69fa      	ldr	r2, [r7, #28]
 8007c0e:	440a      	add	r2, r1
 8007c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c14:	0cdb      	lsrs	r3, r3, #19
 8007c16:	04db      	lsls	r3, r3, #19
 8007c18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	015a      	lsls	r2, r3, #5
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	4413      	add	r3, r2
 8007c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	69ba      	ldr	r2, [r7, #24]
 8007c2a:	0151      	lsls	r1, r2, #5
 8007c2c:	69fa      	ldr	r2, [r7, #28]
 8007c2e:	440a      	add	r2, r1
 8007c30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c3c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d126      	bne.n	8007c94 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c52:	691a      	ldr	r2, [r3, #16]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c5c:	69b9      	ldr	r1, [r7, #24]
 8007c5e:	0148      	lsls	r0, r1, #5
 8007c60:	69f9      	ldr	r1, [r7, #28]
 8007c62:	4401      	add	r1, r0
 8007c64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	015a      	lsls	r2, r3, #5
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	4413      	add	r3, r2
 8007c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	69ba      	ldr	r2, [r7, #24]
 8007c7c:	0151      	lsls	r1, r2, #5
 8007c7e:	69fa      	ldr	r2, [r7, #28]
 8007c80:	440a      	add	r2, r1
 8007c82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c8a:	6113      	str	r3, [r2, #16]
 8007c8c:	e036      	b.n	8007cfc <USB_EPStartXfer+0x3dc>
 8007c8e:	bf00      	nop
 8007c90:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	695a      	ldr	r2, [r3, #20]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	1e5a      	subs	r2, r3, #1
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ca8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	015a      	lsls	r2, r3, #5
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cb6:	691a      	ldr	r2, [r3, #16]
 8007cb8:	8afb      	ldrh	r3, [r7, #22]
 8007cba:	04d9      	lsls	r1, r3, #19
 8007cbc:	4b39      	ldr	r3, [pc, #228]	; (8007da4 <USB_EPStartXfer+0x484>)
 8007cbe:	400b      	ands	r3, r1
 8007cc0:	69b9      	ldr	r1, [r7, #24]
 8007cc2:	0148      	lsls	r0, r1, #5
 8007cc4:	69f9      	ldr	r1, [r7, #28]
 8007cc6:	4401      	add	r1, r0
 8007cc8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	015a      	lsls	r2, r3, #5
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cdc:	691a      	ldr	r2, [r3, #16]
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	8af9      	ldrh	r1, [r7, #22]
 8007ce4:	fb01 f303 	mul.w	r3, r1, r3
 8007ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cec:	69b9      	ldr	r1, [r7, #24]
 8007cee:	0148      	lsls	r0, r1, #5
 8007cf0:	69f9      	ldr	r1, [r7, #28]
 8007cf2:	4401      	add	r1, r0
 8007cf4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007cfc:	79fb      	ldrb	r3, [r7, #7]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d10d      	bne.n	8007d1e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d009      	beq.n	8007d1e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	68d9      	ldr	r1, [r3, #12]
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	015a      	lsls	r2, r3, #5
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	4413      	add	r3, r2
 8007d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d1a:	460a      	mov	r2, r1
 8007d1c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	78db      	ldrb	r3, [r3, #3]
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d128      	bne.n	8007d78 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d110      	bne.n	8007d58 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	015a      	lsls	r2, r3, #5
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	69ba      	ldr	r2, [r7, #24]
 8007d46:	0151      	lsls	r1, r2, #5
 8007d48:	69fa      	ldr	r2, [r7, #28]
 8007d4a:	440a      	add	r2, r1
 8007d4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d54:	6013      	str	r3, [r2, #0]
 8007d56:	e00f      	b.n	8007d78 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	015a      	lsls	r2, r3, #5
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	4413      	add	r3, r2
 8007d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	69ba      	ldr	r2, [r7, #24]
 8007d68:	0151      	lsls	r1, r2, #5
 8007d6a:	69fa      	ldr	r2, [r7, #28]
 8007d6c:	440a      	add	r2, r1
 8007d6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d76:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	015a      	lsls	r2, r3, #5
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	69ba      	ldr	r2, [r7, #24]
 8007d88:	0151      	lsls	r1, r2, #5
 8007d8a:	69fa      	ldr	r2, [r7, #28]
 8007d8c:	440a      	add	r2, r1
 8007d8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3720      	adds	r7, #32
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	1ff80000 	.word	0x1ff80000

08007da8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b087      	sub	sp, #28
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	4613      	mov	r3, r2
 8007db4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	785b      	ldrb	r3, [r3, #1]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	f040 80cd 	bne.w	8007f64 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d132      	bne.n	8007e38 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	015a      	lsls	r2, r3, #5
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	0151      	lsls	r1, r2, #5
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	440a      	add	r2, r1
 8007de8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007df0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007df4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	015a      	lsls	r2, r3, #5
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	693a      	ldr	r2, [r7, #16]
 8007e06:	0151      	lsls	r1, r2, #5
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	440a      	add	r2, r1
 8007e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	015a      	lsls	r2, r3, #5
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	0151      	lsls	r1, r2, #5
 8007e28:	697a      	ldr	r2, [r7, #20]
 8007e2a:	440a      	add	r2, r1
 8007e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e30:	0cdb      	lsrs	r3, r3, #19
 8007e32:	04db      	lsls	r3, r3, #19
 8007e34:	6113      	str	r3, [r2, #16]
 8007e36:	e04e      	b.n	8007ed6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	015a      	lsls	r2, r3, #5
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	4413      	add	r3, r2
 8007e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	0151      	lsls	r1, r2, #5
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	440a      	add	r2, r1
 8007e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e52:	0cdb      	lsrs	r3, r3, #19
 8007e54:	04db      	lsls	r3, r3, #19
 8007e56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	015a      	lsls	r2, r3, #5
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	4413      	add	r3, r2
 8007e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	0151      	lsls	r1, r2, #5
 8007e6a:	697a      	ldr	r2, [r7, #20]
 8007e6c:	440a      	add	r2, r1
 8007e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e7a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	695a      	ldr	r2, [r3, #20]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d903      	bls.n	8007e90 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	689a      	ldr	r2, [r3, #8]
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	0151      	lsls	r1, r2, #5
 8007ea2:	697a      	ldr	r2, [r7, #20]
 8007ea4:	440a      	add	r2, r1
 8007ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007eae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	015a      	lsls	r2, r3, #5
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ebc:	691a      	ldr	r2, [r3, #16]
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ec6:	6939      	ldr	r1, [r7, #16]
 8007ec8:	0148      	lsls	r0, r1, #5
 8007eca:	6979      	ldr	r1, [r7, #20]
 8007ecc:	4401      	add	r1, r0
 8007ece:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007ed6:	79fb      	ldrb	r3, [r7, #7]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d11e      	bne.n	8007f1a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d009      	beq.n	8007ef8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	015a      	lsls	r2, r3, #5
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	4413      	add	r3, r2
 8007eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	015a      	lsls	r2, r3, #5
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	4413      	add	r3, r2
 8007f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	0151      	lsls	r1, r2, #5
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	440a      	add	r2, r1
 8007f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f16:	6013      	str	r3, [r2, #0]
 8007f18:	e092      	b.n	8008040 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	015a      	lsls	r2, r3, #5
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	4413      	add	r3, r2
 8007f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	0151      	lsls	r1, r2, #5
 8007f2c:	697a      	ldr	r2, [r7, #20]
 8007f2e:	440a      	add	r2, r1
 8007f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f38:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d07e      	beq.n	8008040 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	f003 030f 	and.w	r3, r3, #15
 8007f52:	2101      	movs	r1, #1
 8007f54:	fa01 f303 	lsl.w	r3, r1, r3
 8007f58:	6979      	ldr	r1, [r7, #20]
 8007f5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	634b      	str	r3, [r1, #52]	; 0x34
 8007f62:	e06d      	b.n	8008040 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	015a      	lsls	r2, r3, #5
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	0151      	lsls	r1, r2, #5
 8007f76:	697a      	ldr	r2, [r7, #20]
 8007f78:	440a      	add	r2, r1
 8007f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f7e:	0cdb      	lsrs	r3, r3, #19
 8007f80:	04db      	lsls	r3, r3, #19
 8007f82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	015a      	lsls	r2, r3, #5
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	693a      	ldr	r2, [r7, #16]
 8007f94:	0151      	lsls	r1, r2, #5
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	440a      	add	r2, r1
 8007f9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f9e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007fa2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007fa6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	695b      	ldr	r3, [r3, #20]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d003      	beq.n	8007fb8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	689a      	ldr	r2, [r3, #8]
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	0151      	lsls	r1, r2, #5
 8007fca:	697a      	ldr	r2, [r7, #20]
 8007fcc:	440a      	add	r2, r1
 8007fce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fd6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	015a      	lsls	r2, r3, #5
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe4:	691a      	ldr	r2, [r3, #16]
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fee:	6939      	ldr	r1, [r7, #16]
 8007ff0:	0148      	lsls	r0, r1, #5
 8007ff2:	6979      	ldr	r1, [r7, #20]
 8007ff4:	4401      	add	r1, r0
 8007ff6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007ffe:	79fb      	ldrb	r3, [r7, #7]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d10d      	bne.n	8008020 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d009      	beq.n	8008020 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	68d9      	ldr	r1, [r3, #12]
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	015a      	lsls	r2, r3, #5
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	4413      	add	r3, r2
 8008018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800801c:	460a      	mov	r2, r1
 800801e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	015a      	lsls	r2, r3, #5
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	4413      	add	r3, r2
 8008028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	0151      	lsls	r1, r2, #5
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	440a      	add	r2, r1
 8008036:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800803a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800803e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	371c      	adds	r7, #28
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800804e:	b480      	push	{r7}
 8008050:	b089      	sub	sp, #36	; 0x24
 8008052:	af00      	add	r7, sp, #0
 8008054:	60f8      	str	r0, [r7, #12]
 8008056:	60b9      	str	r1, [r7, #8]
 8008058:	4611      	mov	r1, r2
 800805a:	461a      	mov	r2, r3
 800805c:	460b      	mov	r3, r1
 800805e:	71fb      	strb	r3, [r7, #7]
 8008060:	4613      	mov	r3, r2
 8008062:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800806c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008070:	2b00      	cmp	r3, #0
 8008072:	d11a      	bne.n	80080aa <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008074:	88bb      	ldrh	r3, [r7, #4]
 8008076:	3303      	adds	r3, #3
 8008078:	089b      	lsrs	r3, r3, #2
 800807a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800807c:	2300      	movs	r3, #0
 800807e:	61bb      	str	r3, [r7, #24]
 8008080:	e00f      	b.n	80080a2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008082:	79fb      	ldrb	r3, [r7, #7]
 8008084:	031a      	lsls	r2, r3, #12
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	4413      	add	r3, r2
 800808a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800808e:	461a      	mov	r2, r3
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	3304      	adds	r3, #4
 800809a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	3301      	adds	r3, #1
 80080a0:	61bb      	str	r3, [r7, #24]
 80080a2:	69ba      	ldr	r2, [r7, #24]
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d3eb      	bcc.n	8008082 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3724      	adds	r7, #36	; 0x24
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b089      	sub	sp, #36	; 0x24
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	4613      	mov	r3, r2
 80080c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80080ce:	88fb      	ldrh	r3, [r7, #6]
 80080d0:	3303      	adds	r3, #3
 80080d2:	089b      	lsrs	r3, r3, #2
 80080d4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80080d6:	2300      	movs	r3, #0
 80080d8:	61bb      	str	r3, [r7, #24]
 80080da:	e00b      	b.n	80080f4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	3304      	adds	r3, #4
 80080ec:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	3301      	adds	r3, #1
 80080f2:	61bb      	str	r3, [r7, #24]
 80080f4:	69ba      	ldr	r2, [r7, #24]
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d3ef      	bcc.n	80080dc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80080fc:	69fb      	ldr	r3, [r7, #28]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3724      	adds	r7, #36	; 0x24
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr

0800810a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800810a:	b480      	push	{r7}
 800810c:	b085      	sub	sp, #20
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
 8008112:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	785b      	ldrb	r3, [r3, #1]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d12c      	bne.n	8008180 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	015a      	lsls	r2, r3, #5
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	4413      	add	r3, r2
 800812e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	db12      	blt.n	800815e <USB_EPSetStall+0x54>
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00f      	beq.n	800815e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	015a      	lsls	r2, r3, #5
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	4413      	add	r3, r2
 8008146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68ba      	ldr	r2, [r7, #8]
 800814e:	0151      	lsls	r1, r2, #5
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	440a      	add	r2, r1
 8008154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008158:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800815c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	015a      	lsls	r2, r3, #5
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	4413      	add	r3, r2
 8008166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	0151      	lsls	r1, r2, #5
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	440a      	add	r2, r1
 8008174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008178:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800817c:	6013      	str	r3, [r2, #0]
 800817e:	e02b      	b.n	80081d8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	015a      	lsls	r2, r3, #5
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	4413      	add	r3, r2
 8008188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	db12      	blt.n	80081b8 <USB_EPSetStall+0xae>
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00f      	beq.n	80081b8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	0151      	lsls	r1, r2, #5
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	440a      	add	r2, r1
 80081ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80081b6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	015a      	lsls	r2, r3, #5
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	4413      	add	r3, r2
 80081c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68ba      	ldr	r2, [r7, #8]
 80081c8:	0151      	lsls	r1, r2, #5
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	440a      	add	r2, r1
 80081ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80081d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b085      	sub	sp, #20
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	785b      	ldrb	r3, [r3, #1]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d128      	bne.n	8008254 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	4413      	add	r3, r2
 800820a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	0151      	lsls	r1, r2, #5
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	440a      	add	r2, r1
 8008218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800821c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008220:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	78db      	ldrb	r3, [r3, #3]
 8008226:	2b03      	cmp	r3, #3
 8008228:	d003      	beq.n	8008232 <USB_EPClearStall+0x4c>
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	78db      	ldrb	r3, [r3, #3]
 800822e:	2b02      	cmp	r3, #2
 8008230:	d138      	bne.n	80082a4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	015a      	lsls	r2, r3, #5
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	4413      	add	r3, r2
 800823a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	0151      	lsls	r1, r2, #5
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	440a      	add	r2, r1
 8008248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800824c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008250:	6013      	str	r3, [r2, #0]
 8008252:	e027      	b.n	80082a4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	015a      	lsls	r2, r3, #5
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	4413      	add	r3, r2
 800825c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	0151      	lsls	r1, r2, #5
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	440a      	add	r2, r1
 800826a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800826e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008272:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	78db      	ldrb	r3, [r3, #3]
 8008278:	2b03      	cmp	r3, #3
 800827a:	d003      	beq.n	8008284 <USB_EPClearStall+0x9e>
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	78db      	ldrb	r3, [r3, #3]
 8008280:	2b02      	cmp	r3, #2
 8008282:	d10f      	bne.n	80082a4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	015a      	lsls	r2, r3, #5
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	4413      	add	r3, r2
 800828c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	0151      	lsls	r1, r2, #5
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	440a      	add	r2, r1
 800829a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800829e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082a2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80082b2:	b480      	push	{r7}
 80082b4:	b085      	sub	sp, #20
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	460b      	mov	r3, r1
 80082bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80082d4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	78fb      	ldrb	r3, [r7, #3]
 80082e0:	011b      	lsls	r3, r3, #4
 80082e2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80082e6:	68f9      	ldr	r1, [r7, #12]
 80082e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082ec:	4313      	orrs	r3, r2
 80082ee:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3714      	adds	r7, #20
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80082fe:	b480      	push	{r7}
 8008300:	b085      	sub	sp, #20
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008318:	f023 0303 	bic.w	r3, r3, #3
 800831c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800832c:	f023 0302 	bic.w	r3, r3, #2
 8008330:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3714      	adds	r7, #20
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800835a:	f023 0303 	bic.w	r3, r3, #3
 800835e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800836e:	f043 0302 	orr.w	r3, r3, #2
 8008372:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008382:	b480      	push	{r7}
 8008384:	b085      	sub	sp, #20
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	695b      	ldr	r3, [r3, #20]
 800838e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	4013      	ands	r3, r2
 8008398:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800839a:	68fb      	ldr	r3, [r7, #12]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3714      	adds	r7, #20
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083c4:	69db      	ldr	r3, [r3, #28]
 80083c6:	68ba      	ldr	r2, [r7, #8]
 80083c8:	4013      	ands	r3, r2
 80083ca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	0c1b      	lsrs	r3, r3, #16
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3714      	adds	r7, #20
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ee:	699b      	ldr	r3, [r3, #24]
 80083f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083f8:	69db      	ldr	r3, [r3, #28]
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	4013      	ands	r3, r2
 80083fe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	b29b      	uxth	r3, r3
}
 8008404:	4618      	mov	r0, r3
 8008406:	3714      	adds	r7, #20
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	460b      	mov	r3, r1
 800841a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008420:	78fb      	ldrb	r3, [r7, #3]
 8008422:	015a      	lsls	r2, r3, #5
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	4413      	add	r3, r2
 8008428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008436:	695b      	ldr	r3, [r3, #20]
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	4013      	ands	r3, r2
 800843c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800843e:	68bb      	ldr	r3, [r7, #8]
}
 8008440:	4618      	mov	r0, r3
 8008442:	3714      	adds	r7, #20
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800844c:	b480      	push	{r7}
 800844e:	b087      	sub	sp, #28
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	460b      	mov	r3, r1
 8008456:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800846c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800846e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008470:	78fb      	ldrb	r3, [r7, #3]
 8008472:	f003 030f 	and.w	r3, r3, #15
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	fa22 f303 	lsr.w	r3, r2, r3
 800847c:	01db      	lsls	r3, r3, #7
 800847e:	b2db      	uxtb	r3, r3
 8008480:	693a      	ldr	r2, [r7, #16]
 8008482:	4313      	orrs	r3, r2
 8008484:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008486:	78fb      	ldrb	r3, [r7, #3]
 8008488:	015a      	lsls	r2, r3, #5
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	4413      	add	r3, r2
 800848e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	693a      	ldr	r2, [r7, #16]
 8008496:	4013      	ands	r3, r2
 8008498:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800849a:	68bb      	ldr	r3, [r7, #8]
}
 800849c:	4618      	mov	r0, r3
 800849e:	371c      	adds	r7, #28
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	f003 0301 	and.w	r3, r3, #1
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80084e2:	f023 0307 	bic.w	r3, r3, #7
 80084e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3714      	adds	r7, #20
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr
	...

0800850c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800850c:	b480      	push	{r7}
 800850e:	b087      	sub	sp, #28
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	460b      	mov	r3, r1
 8008516:	607a      	str	r2, [r7, #4]
 8008518:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	333c      	adds	r3, #60	; 0x3c
 8008522:	3304      	adds	r3, #4
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	4a26      	ldr	r2, [pc, #152]	; (80085c4 <USB_EP0_OutStart+0xb8>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d90a      	bls.n	8008546 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800853c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008540:	d101      	bne.n	8008546 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008542:	2300      	movs	r3, #0
 8008544:	e037      	b.n	80085b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854c:	461a      	mov	r2, r3
 800854e:	2300      	movs	r3, #0
 8008550:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008560:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008564:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008574:	f043 0318 	orr.w	r3, r3, #24
 8008578:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008588:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800858c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800858e:	7afb      	ldrb	r3, [r7, #11]
 8008590:	2b01      	cmp	r3, #1
 8008592:	d10f      	bne.n	80085b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800859a:	461a      	mov	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	697a      	ldr	r2, [r7, #20]
 80085aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80085b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80085b4:	2300      	movs	r3, #0
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	371c      	adds	r7, #28
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	4f54300a 	.word	0x4f54300a

080085c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80085d0:	2300      	movs	r3, #0
 80085d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	3301      	adds	r3, #1
 80085d8:	60fb      	str	r3, [r7, #12]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	4a13      	ldr	r2, [pc, #76]	; (800862c <USB_CoreReset+0x64>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d901      	bls.n	80085e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80085e2:	2303      	movs	r3, #3
 80085e4:	e01b      	b.n	800861e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	daf2      	bge.n	80085d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80085ee:	2300      	movs	r3, #0
 80085f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	f043 0201 	orr.w	r2, r3, #1
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	3301      	adds	r3, #1
 8008602:	60fb      	str	r3, [r7, #12]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	4a09      	ldr	r2, [pc, #36]	; (800862c <USB_CoreReset+0x64>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d901      	bls.n	8008610 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800860c:	2303      	movs	r3, #3
 800860e:	e006      	b.n	800861e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	f003 0301 	and.w	r3, r3, #1
 8008618:	2b01      	cmp	r3, #1
 800861a:	d0f0      	beq.n	80085fe <USB_CoreReset+0x36>

  return HAL_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3714      	adds	r7, #20
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	00030d40 	.word	0x00030d40

08008630 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	460b      	mov	r3, r1
 800863a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800863c:	2010      	movs	r0, #16
 800863e:	f001 ff97 	bl	800a570 <USBD_static_malloc>
 8008642:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d105      	bne.n	8008656 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008652:	2302      	movs	r3, #2
 8008654:	e01b      	b.n	800868e <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	7c1b      	ldrb	r3, [r3, #16]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d103      	bne.n	800866e <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2207      	movs	r2, #7
 800866a:	875a      	strh	r2, [r3, #58]	; 0x3a
 800866c:	e002      	b.n	8008674 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	220a      	movs	r2, #10
 8008672:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008674:	2304      	movs	r3, #4
 8008676:	2203      	movs	r2, #3
 8008678:	2181      	movs	r1, #129	; 0x81
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f001 fe19 	bl	800a2b2 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b082      	sub	sp, #8
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
 800869e:	460b      	mov	r3, r1
 80086a0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80086a2:	2181      	movs	r1, #129	; 0x81
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f001 fe2a 	bl	800a2fe <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d009      	beq.n	80086d4 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086c6:	4618      	mov	r0, r3
 80086c8:	f001 ff60 	bl	800a58c <USBD_static_free>
    pdev->pClassData = NULL;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
	...

080086e0 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086f0:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80086f6:	2300      	movs	r3, #0
 80086f8:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d101      	bne.n	8008704 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008700:	2303      	movs	r3, #3
 8008702:	e0e8      	b.n	80088d6 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800870c:	2b00      	cmp	r3, #0
 800870e:	d046      	beq.n	800879e <USBD_HID_Setup+0xbe>
 8008710:	2b20      	cmp	r3, #32
 8008712:	f040 80d8 	bne.w	80088c6 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	785b      	ldrb	r3, [r3, #1]
 800871a:	3b02      	subs	r3, #2
 800871c:	2b09      	cmp	r3, #9
 800871e:	d836      	bhi.n	800878e <USBD_HID_Setup+0xae>
 8008720:	a201      	add	r2, pc, #4	; (adr r2, 8008728 <USBD_HID_Setup+0x48>)
 8008722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008726:	bf00      	nop
 8008728:	0800877f 	.word	0x0800877f
 800872c:	0800875f 	.word	0x0800875f
 8008730:	0800878f 	.word	0x0800878f
 8008734:	0800878f 	.word	0x0800878f
 8008738:	0800878f 	.word	0x0800878f
 800873c:	0800878f 	.word	0x0800878f
 8008740:	0800878f 	.word	0x0800878f
 8008744:	0800878f 	.word	0x0800878f
 8008748:	0800876d 	.word	0x0800876d
 800874c:	08008751 	.word	0x08008751
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	885b      	ldrh	r3, [r3, #2]
 8008754:	b2db      	uxtb	r3, r3
 8008756:	461a      	mov	r2, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	601a      	str	r2, [r3, #0]
          break;
 800875c:	e01e      	b.n	800879c <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2201      	movs	r2, #1
 8008762:	4619      	mov	r1, r3
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f001 fa4c 	bl	8009c02 <USBD_CtlSendData>
          break;
 800876a:	e017      	b.n	800879c <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	885b      	ldrh	r3, [r3, #2]
 8008770:	0a1b      	lsrs	r3, r3, #8
 8008772:	b29b      	uxth	r3, r3
 8008774:	b2db      	uxtb	r3, r3
 8008776:	461a      	mov	r2, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	605a      	str	r2, [r3, #4]
          break;
 800877c:	e00e      	b.n	800879c <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	3304      	adds	r3, #4
 8008782:	2201      	movs	r2, #1
 8008784:	4619      	mov	r1, r3
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f001 fa3b 	bl	8009c02 <USBD_CtlSendData>
          break;
 800878c:	e006      	b.n	800879c <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f001 f9c5 	bl	8009b20 <USBD_CtlError>
          ret = USBD_FAIL;
 8008796:	2303      	movs	r3, #3
 8008798:	75fb      	strb	r3, [r7, #23]
          break;
 800879a:	bf00      	nop
      }
      break;
 800879c:	e09a      	b.n	80088d4 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	785b      	ldrb	r3, [r3, #1]
 80087a2:	2b0b      	cmp	r3, #11
 80087a4:	f200 8086 	bhi.w	80088b4 <USBD_HID_Setup+0x1d4>
 80087a8:	a201      	add	r2, pc, #4	; (adr r2, 80087b0 <USBD_HID_Setup+0xd0>)
 80087aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ae:	bf00      	nop
 80087b0:	080087e1 	.word	0x080087e1
 80087b4:	080088c3 	.word	0x080088c3
 80087b8:	080088b5 	.word	0x080088b5
 80087bc:	080088b5 	.word	0x080088b5
 80087c0:	080088b5 	.word	0x080088b5
 80087c4:	080088b5 	.word	0x080088b5
 80087c8:	0800880b 	.word	0x0800880b
 80087cc:	080088b5 	.word	0x080088b5
 80087d0:	080088b5 	.word	0x080088b5
 80087d4:	080088b5 	.word	0x080088b5
 80087d8:	08008863 	.word	0x08008863
 80087dc:	0800888d 	.word	0x0800888d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	2b03      	cmp	r3, #3
 80087ea:	d107      	bne.n	80087fc <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80087ec:	f107 030a 	add.w	r3, r7, #10
 80087f0:	2202      	movs	r2, #2
 80087f2:	4619      	mov	r1, r3
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f001 fa04 	bl	8009c02 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80087fa:	e063      	b.n	80088c4 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80087fc:	6839      	ldr	r1, [r7, #0]
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f001 f98e 	bl	8009b20 <USBD_CtlError>
            ret = USBD_FAIL;
 8008804:	2303      	movs	r3, #3
 8008806:	75fb      	strb	r3, [r7, #23]
          break;
 8008808:	e05c      	b.n	80088c4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	885b      	ldrh	r3, [r3, #2]
 800880e:	0a1b      	lsrs	r3, r3, #8
 8008810:	b29b      	uxth	r3, r3
 8008812:	2b22      	cmp	r3, #34	; 0x22
 8008814:	d108      	bne.n	8008828 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	88db      	ldrh	r3, [r3, #6]
 800881a:	2b42      	cmp	r3, #66	; 0x42
 800881c:	bf28      	it	cs
 800881e:	2342      	movcs	r3, #66	; 0x42
 8008820:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8008822:	4b2f      	ldr	r3, [pc, #188]	; (80088e0 <USBD_HID_Setup+0x200>)
 8008824:	613b      	str	r3, [r7, #16]
 8008826:	e015      	b.n	8008854 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	885b      	ldrh	r3, [r3, #2]
 800882c:	0a1b      	lsrs	r3, r3, #8
 800882e:	b29b      	uxth	r3, r3
 8008830:	2b21      	cmp	r3, #33	; 0x21
 8008832:	d108      	bne.n	8008846 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8008834:	4b2b      	ldr	r3, [pc, #172]	; (80088e4 <USBD_HID_Setup+0x204>)
 8008836:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	88db      	ldrh	r3, [r3, #6]
 800883c:	2b09      	cmp	r3, #9
 800883e:	bf28      	it	cs
 8008840:	2309      	movcs	r3, #9
 8008842:	82bb      	strh	r3, [r7, #20]
 8008844:	e006      	b.n	8008854 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f001 f969 	bl	8009b20 <USBD_CtlError>
            ret = USBD_FAIL;
 800884e:	2303      	movs	r3, #3
 8008850:	75fb      	strb	r3, [r7, #23]
            break;
 8008852:	e037      	b.n	80088c4 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008854:	8abb      	ldrh	r3, [r7, #20]
 8008856:	461a      	mov	r2, r3
 8008858:	6939      	ldr	r1, [r7, #16]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f001 f9d1 	bl	8009c02 <USBD_CtlSendData>
          break;
 8008860:	e030      	b.n	80088c4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b03      	cmp	r3, #3
 800886c:	d107      	bne.n	800887e <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	3308      	adds	r3, #8
 8008872:	2201      	movs	r2, #1
 8008874:	4619      	mov	r1, r3
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f001 f9c3 	bl	8009c02 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800887c:	e022      	b.n	80088c4 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800887e:	6839      	ldr	r1, [r7, #0]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f001 f94d 	bl	8009b20 <USBD_CtlError>
            ret = USBD_FAIL;
 8008886:	2303      	movs	r3, #3
 8008888:	75fb      	strb	r3, [r7, #23]
          break;
 800888a:	e01b      	b.n	80088c4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008892:	b2db      	uxtb	r3, r3
 8008894:	2b03      	cmp	r3, #3
 8008896:	d106      	bne.n	80088a6 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	885b      	ldrh	r3, [r3, #2]
 800889c:	b2db      	uxtb	r3, r3
 800889e:	461a      	mov	r2, r3
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088a4:	e00e      	b.n	80088c4 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80088a6:	6839      	ldr	r1, [r7, #0]
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f001 f939 	bl	8009b20 <USBD_CtlError>
            ret = USBD_FAIL;
 80088ae:	2303      	movs	r3, #3
 80088b0:	75fb      	strb	r3, [r7, #23]
          break;
 80088b2:	e007      	b.n	80088c4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80088b4:	6839      	ldr	r1, [r7, #0]
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f001 f932 	bl	8009b20 <USBD_CtlError>
          ret = USBD_FAIL;
 80088bc:	2303      	movs	r3, #3
 80088be:	75fb      	strb	r3, [r7, #23]
          break;
 80088c0:	e000      	b.n	80088c4 <USBD_HID_Setup+0x1e4>
          break;
 80088c2:	bf00      	nop
      }
      break;
 80088c4:	e006      	b.n	80088d4 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f001 f929 	bl	8009b20 <USBD_CtlError>
      ret = USBD_FAIL;
 80088ce:	2303      	movs	r3, #3
 80088d0:	75fb      	strb	r3, [r7, #23]
      break;
 80088d2:	bf00      	nop
  }

  return (uint8_t)ret;
 80088d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3718      	adds	r7, #24
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	200000c8 	.word	0x200000c8
 80088e4:	200000b0 	.word	0x200000b0

080088e8 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b086      	sub	sp, #24
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	4613      	mov	r3, r2
 80088f4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088fc:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d101      	bne.n	8008908 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8008904:	2303      	movs	r3, #3
 8008906:	e013      	b.n	8008930 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800890e:	b2db      	uxtb	r3, r3
 8008910:	2b03      	cmp	r3, #3
 8008912:	d10c      	bne.n	800892e <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	7b1b      	ldrb	r3, [r3, #12]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d108      	bne.n	800892e <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	2201      	movs	r2, #1
 8008920:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8008922:	88fb      	ldrh	r3, [r7, #6]
 8008924:	68ba      	ldr	r2, [r7, #8]
 8008926:	2181      	movs	r1, #129	; 0x81
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f001 fd90 	bl	800a44e <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3718      	adds	r7, #24
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2222      	movs	r2, #34	; 0x22
 8008944:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8008946:	4b03      	ldr	r3, [pc, #12]	; (8008954 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008948:	4618      	mov	r0, r3
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr
 8008954:	20000044 	.word	0x20000044

08008958 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2222      	movs	r2, #34	; 0x22
 8008964:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8008966:	4b03      	ldr	r3, [pc, #12]	; (8008974 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8008968:	4618      	mov	r0, r3
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr
 8008974:	20000068 	.word	0x20000068

08008978 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2222      	movs	r2, #34	; 0x22
 8008984:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8008986:	4b03      	ldr	r3, [pc, #12]	; (8008994 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008988:	4618      	mov	r0, r3
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr
 8008994:	2000008c 	.word	0x2000008c

08008998 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	460b      	mov	r3, r1
 80089a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089aa:	2200      	movs	r2, #0
 80089ac:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	220a      	movs	r2, #10
 80089c8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80089ca:	4b03      	ldr	r3, [pc, #12]	; (80089d8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr
 80089d8:	200000bc 	.word	0x200000bc

080089dc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b086      	sub	sp, #24
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	4613      	mov	r3, r2
 80089e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d101      	bne.n	80089f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80089f0:	2303      	movs	r3, #3
 80089f2:	e01f      	b.n	8008a34 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d003      	beq.n	8008a1a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	79fa      	ldrb	r2, [r7, #7]
 8008a26:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	f001 fbdb 	bl	800a1e4 <USBD_LL_Init>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3718      	adds	r7, #24
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a46:	2300      	movs	r3, #0
 8008a48:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d101      	bne.n	8008a54 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008a50:	2303      	movs	r3, #3
 8008a52:	e016      	b.n	8008a82 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	683a      	ldr	r2, [r7, #0]
 8008a58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d00b      	beq.n	8008a80 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a70:	f107 020e 	add.w	r2, r7, #14
 8008a74:	4610      	mov	r0, r2
 8008a76:	4798      	blx	r3
 8008a78:	4602      	mov	r2, r0
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b082      	sub	sp, #8
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f001 fbf2 	bl	800a27c <USBD_LL_Start>
 8008a98:	4603      	mov	r3, r0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3708      	adds	r7, #8
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008aa2:	b480      	push	{r7}
 8008aa4:	b083      	sub	sp, #12
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	370c      	adds	r7, #12
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d009      	beq.n	8008ae6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	78fa      	ldrb	r2, [r7, #3]
 8008adc:	4611      	mov	r1, r2
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	4798      	blx	r3
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3710      	adds	r7, #16
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	460b      	mov	r3, r1
 8008afa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d007      	beq.n	8008b16 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	78fa      	ldrb	r2, [r7, #3]
 8008b10:	4611      	mov	r1, r2
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	4798      	blx	r3
  }

  return USBD_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b30:	6839      	ldr	r1, [r7, #0]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 ffba 	bl	8009aac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008b46:	461a      	mov	r2, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008b54:	f003 031f 	and.w	r3, r3, #31
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	d01a      	beq.n	8008b92 <USBD_LL_SetupStage+0x72>
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d822      	bhi.n	8008ba6 <USBD_LL_SetupStage+0x86>
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d002      	beq.n	8008b6a <USBD_LL_SetupStage+0x4a>
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d00a      	beq.n	8008b7e <USBD_LL_SetupStage+0x5e>
 8008b68:	e01d      	b.n	8008ba6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b70:	4619      	mov	r1, r3
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fa62 	bl	800903c <USBD_StdDevReq>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b7c:	e020      	b.n	8008bc0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b84:	4619      	mov	r1, r3
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fac6 	bl	8009118 <USBD_StdItfReq>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b90:	e016      	b.n	8008bc0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b98:	4619      	mov	r1, r3
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fb05 	bl	80091aa <USBD_StdEPReq>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ba4:	e00c      	b.n	8008bc0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008bac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f001 fbc1 	bl	800a33c <USBD_LL_StallEP>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	73fb      	strb	r3, [r7, #15]
      break;
 8008bbe:	bf00      	nop
  }

  return ret;
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b086      	sub	sp, #24
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	60f8      	str	r0, [r7, #12]
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	607a      	str	r2, [r7, #4]
 8008bd6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008bd8:	7afb      	ldrb	r3, [r7, #11]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d138      	bne.n	8008c50 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008be4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008bec:	2b03      	cmp	r3, #3
 8008bee:	d14a      	bne.n	8008c86 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	689a      	ldr	r2, [r3, #8]
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d913      	bls.n	8008c24 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	689a      	ldr	r2, [r3, #8]
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	1ad2      	subs	r2, r2, r3
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	68da      	ldr	r2, [r3, #12]
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	4293      	cmp	r3, r2
 8008c14:	bf28      	it	cs
 8008c16:	4613      	movcs	r3, r2
 8008c18:	461a      	mov	r2, r3
 8008c1a:	6879      	ldr	r1, [r7, #4]
 8008c1c:	68f8      	ldr	r0, [r7, #12]
 8008c1e:	f001 f81c 	bl	8009c5a <USBD_CtlContinueRx>
 8008c22:	e030      	b.n	8008c86 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	2b03      	cmp	r3, #3
 8008c2e:	d10b      	bne.n	8008c48 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c36:	691b      	ldr	r3, [r3, #16]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d005      	beq.n	8008c48 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f001 f817 	bl	8009c7c <USBD_CtlSendStatus>
 8008c4e:	e01a      	b.n	8008c86 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	2b03      	cmp	r3, #3
 8008c5a:	d114      	bne.n	8008c86 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00e      	beq.n	8008c86 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c6e:	699b      	ldr	r3, [r3, #24]
 8008c70:	7afa      	ldrb	r2, [r7, #11]
 8008c72:	4611      	mov	r1, r2
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	4798      	blx	r3
 8008c78:	4603      	mov	r3, r0
 8008c7a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008c7c:	7dfb      	ldrb	r3, [r7, #23]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008c82:	7dfb      	ldrb	r3, [r7, #23]
 8008c84:	e000      	b.n	8008c88 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3718      	adds	r7, #24
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b086      	sub	sp, #24
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	607a      	str	r2, [r7, #4]
 8008c9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008c9e:	7afb      	ldrb	r3, [r7, #11]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d16b      	bne.n	8008d7c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	3314      	adds	r3, #20
 8008ca8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d156      	bne.n	8008d62 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	689a      	ldr	r2, [r3, #8]
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d914      	bls.n	8008cea <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	689a      	ldr	r2, [r3, #8]
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	1ad2      	subs	r2, r2, r3
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	6879      	ldr	r1, [r7, #4]
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f000 ffae 	bl	8009c38 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cdc:	2300      	movs	r3, #0
 8008cde:	2200      	movs	r2, #0
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	68f8      	ldr	r0, [r7, #12]
 8008ce4:	f001 fbd4 	bl	800a490 <USBD_LL_PrepareReceive>
 8008ce8:	e03b      	b.n	8008d62 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	68da      	ldr	r2, [r3, #12]
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d11c      	bne.n	8008d30 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	685a      	ldr	r2, [r3, #4]
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d316      	bcc.n	8008d30 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	685a      	ldr	r2, [r3, #4]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d20f      	bcs.n	8008d30 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008d10:	2200      	movs	r2, #0
 8008d12:	2100      	movs	r1, #0
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f000 ff8f 	bl	8009c38 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d22:	2300      	movs	r3, #0
 8008d24:	2200      	movs	r2, #0
 8008d26:	2100      	movs	r1, #0
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f001 fbb1 	bl	800a490 <USBD_LL_PrepareReceive>
 8008d2e:	e018      	b.n	8008d62 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	2b03      	cmp	r3, #3
 8008d3a:	d10b      	bne.n	8008d54 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d005      	beq.n	8008d54 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d54:	2180      	movs	r1, #128	; 0x80
 8008d56:	68f8      	ldr	r0, [r7, #12]
 8008d58:	f001 faf0 	bl	800a33c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f000 ffa0 	bl	8009ca2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d122      	bne.n	8008db2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f7ff fe98 	bl	8008aa2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008d7a:	e01a      	b.n	8008db2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	2b03      	cmp	r3, #3
 8008d86:	d114      	bne.n	8008db2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d8e:	695b      	ldr	r3, [r3, #20]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00e      	beq.n	8008db2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d9a:	695b      	ldr	r3, [r3, #20]
 8008d9c:	7afa      	ldrb	r2, [r7, #11]
 8008d9e:	4611      	mov	r1, r2
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	4798      	blx	r3
 8008da4:	4603      	mov	r3, r0
 8008da6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008da8:	7dfb      	ldrb	r3, [r7, #23]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d001      	beq.n	8008db2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008dae:	7dfb      	ldrb	r3, [r7, #23]
 8008db0:	e000      	b.n	8008db4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3718      	adds	r7, #24
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d101      	bne.n	8008df0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008dec:	2303      	movs	r3, #3
 8008dee:	e02f      	b.n	8008e50 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00f      	beq.n	8008e1a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d009      	beq.n	8008e1a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	6852      	ldr	r2, [r2, #4]
 8008e12:	b2d2      	uxtb	r2, r2
 8008e14:	4611      	mov	r1, r2
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e1a:	2340      	movs	r3, #64	; 0x40
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	2100      	movs	r1, #0
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f001 fa46 	bl	800a2b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2240      	movs	r2, #64	; 0x40
 8008e32:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e36:	2340      	movs	r3, #64	; 0x40
 8008e38:	2200      	movs	r2, #0
 8008e3a:	2180      	movs	r1, #128	; 0x80
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f001 fa38 	bl	800a2b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2201      	movs	r2, #1
 8008e46:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2240      	movs	r2, #64	; 0x40
 8008e4c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	460b      	mov	r3, r1
 8008e62:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	78fa      	ldrb	r2, [r7, #3]
 8008e68:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e86:	b2da      	uxtb	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2204      	movs	r2, #4
 8008e92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008e96:	2300      	movs	r3, #0
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	2b04      	cmp	r3, #4
 8008eb6:	d106      	bne.n	8008ec6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008ebe:	b2da      	uxtb	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d101      	bne.n	8008eea <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	e012      	b.n	8008f10 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b03      	cmp	r3, #3
 8008ef4:	d10b      	bne.n	8008f0e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008efc:	69db      	ldr	r3, [r3, #28]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d005      	beq.n	8008f0e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f08:	69db      	ldr	r3, [r3, #28]
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	460b      	mov	r3, r1
 8008f22:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e014      	b.n	8008f5c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	2b03      	cmp	r3, #3
 8008f3c:	d10d      	bne.n	8008f5a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f44:	6a1b      	ldr	r3, [r3, #32]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d007      	beq.n	8008f5a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f50:	6a1b      	ldr	r3, [r3, #32]
 8008f52:	78fa      	ldrb	r2, [r7, #3]
 8008f54:	4611      	mov	r1, r2
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3708      	adds	r7, #8
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d101      	bne.n	8008f7e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	e014      	b.n	8008fa8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	2b03      	cmp	r3, #3
 8008f88:	d10d      	bne.n	8008fa6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d007      	beq.n	8008fa6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9e:	78fa      	ldrb	r2, [r7, #3]
 8008fa0:	4611      	mov	r1, r2
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	370c      	adds	r7, #12
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr

08008fc6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b082      	sub	sp, #8
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d009      	beq.n	8008ff4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	6852      	ldr	r2, [r2, #4]
 8008fec:	b2d2      	uxtb	r2, r2
 8008fee:	4611      	mov	r1, r2
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	4798      	blx	r3
  }

  return USBD_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3708      	adds	r7, #8
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008ffe:	b480      	push	{r7}
 8009000:	b087      	sub	sp, #28
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	3301      	adds	r3, #1
 8009014:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800901c:	8a3b      	ldrh	r3, [r7, #16]
 800901e:	021b      	lsls	r3, r3, #8
 8009020:	b21a      	sxth	r2, r3
 8009022:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009026:	4313      	orrs	r3, r2
 8009028:	b21b      	sxth	r3, r3
 800902a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800902c:	89fb      	ldrh	r3, [r7, #14]
}
 800902e:	4618      	mov	r0, r3
 8009030:	371c      	adds	r7, #28
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
	...

0800903c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009046:	2300      	movs	r3, #0
 8009048:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009052:	2b40      	cmp	r3, #64	; 0x40
 8009054:	d005      	beq.n	8009062 <USBD_StdDevReq+0x26>
 8009056:	2b40      	cmp	r3, #64	; 0x40
 8009058:	d853      	bhi.n	8009102 <USBD_StdDevReq+0xc6>
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00b      	beq.n	8009076 <USBD_StdDevReq+0x3a>
 800905e:	2b20      	cmp	r3, #32
 8009060:	d14f      	bne.n	8009102 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	6839      	ldr	r1, [r7, #0]
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	4798      	blx	r3
 8009070:	4603      	mov	r3, r0
 8009072:	73fb      	strb	r3, [r7, #15]
      break;
 8009074:	e04a      	b.n	800910c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	785b      	ldrb	r3, [r3, #1]
 800907a:	2b09      	cmp	r3, #9
 800907c:	d83b      	bhi.n	80090f6 <USBD_StdDevReq+0xba>
 800907e:	a201      	add	r2, pc, #4	; (adr r2, 8009084 <USBD_StdDevReq+0x48>)
 8009080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009084:	080090d9 	.word	0x080090d9
 8009088:	080090ed 	.word	0x080090ed
 800908c:	080090f7 	.word	0x080090f7
 8009090:	080090e3 	.word	0x080090e3
 8009094:	080090f7 	.word	0x080090f7
 8009098:	080090b7 	.word	0x080090b7
 800909c:	080090ad 	.word	0x080090ad
 80090a0:	080090f7 	.word	0x080090f7
 80090a4:	080090cf 	.word	0x080090cf
 80090a8:	080090c1 	.word	0x080090c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80090ac:	6839      	ldr	r1, [r7, #0]
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f9de 	bl	8009470 <USBD_GetDescriptor>
          break;
 80090b4:	e024      	b.n	8009100 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80090b6:	6839      	ldr	r1, [r7, #0]
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 fb6d 	bl	8009798 <USBD_SetAddress>
          break;
 80090be:	e01f      	b.n	8009100 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80090c0:	6839      	ldr	r1, [r7, #0]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 fbac 	bl	8009820 <USBD_SetConfig>
 80090c8:	4603      	mov	r3, r0
 80090ca:	73fb      	strb	r3, [r7, #15]
          break;
 80090cc:	e018      	b.n	8009100 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80090ce:	6839      	ldr	r1, [r7, #0]
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fc4b 	bl	800996c <USBD_GetConfig>
          break;
 80090d6:	e013      	b.n	8009100 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80090d8:	6839      	ldr	r1, [r7, #0]
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 fc7c 	bl	80099d8 <USBD_GetStatus>
          break;
 80090e0:	e00e      	b.n	8009100 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80090e2:	6839      	ldr	r1, [r7, #0]
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fcab 	bl	8009a40 <USBD_SetFeature>
          break;
 80090ea:	e009      	b.n	8009100 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80090ec:	6839      	ldr	r1, [r7, #0]
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fcba 	bl	8009a68 <USBD_ClrFeature>
          break;
 80090f4:	e004      	b.n	8009100 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fd11 	bl	8009b20 <USBD_CtlError>
          break;
 80090fe:	bf00      	nop
      }
      break;
 8009100:	e004      	b.n	800910c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009102:	6839      	ldr	r1, [r7, #0]
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 fd0b 	bl	8009b20 <USBD_CtlError>
      break;
 800910a:	bf00      	nop
  }

  return ret;
 800910c:	7bfb      	ldrb	r3, [r7, #15]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop

08009118 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009122:	2300      	movs	r3, #0
 8009124:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800912e:	2b40      	cmp	r3, #64	; 0x40
 8009130:	d005      	beq.n	800913e <USBD_StdItfReq+0x26>
 8009132:	2b40      	cmp	r3, #64	; 0x40
 8009134:	d82f      	bhi.n	8009196 <USBD_StdItfReq+0x7e>
 8009136:	2b00      	cmp	r3, #0
 8009138:	d001      	beq.n	800913e <USBD_StdItfReq+0x26>
 800913a:	2b20      	cmp	r3, #32
 800913c:	d12b      	bne.n	8009196 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009144:	b2db      	uxtb	r3, r3
 8009146:	3b01      	subs	r3, #1
 8009148:	2b02      	cmp	r3, #2
 800914a:	d81d      	bhi.n	8009188 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	889b      	ldrh	r3, [r3, #4]
 8009150:	b2db      	uxtb	r3, r3
 8009152:	2b01      	cmp	r3, #1
 8009154:	d813      	bhi.n	800917e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	6839      	ldr	r1, [r7, #0]
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	4798      	blx	r3
 8009164:	4603      	mov	r3, r0
 8009166:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	88db      	ldrh	r3, [r3, #6]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d110      	bne.n	8009192 <USBD_StdItfReq+0x7a>
 8009170:	7bfb      	ldrb	r3, [r7, #15]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d10d      	bne.n	8009192 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 fd80 	bl	8009c7c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800917c:	e009      	b.n	8009192 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800917e:	6839      	ldr	r1, [r7, #0]
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 fccd 	bl	8009b20 <USBD_CtlError>
          break;
 8009186:	e004      	b.n	8009192 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009188:	6839      	ldr	r1, [r7, #0]
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 fcc8 	bl	8009b20 <USBD_CtlError>
          break;
 8009190:	e000      	b.n	8009194 <USBD_StdItfReq+0x7c>
          break;
 8009192:	bf00      	nop
      }
      break;
 8009194:	e004      	b.n	80091a0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009196:	6839      	ldr	r1, [r7, #0]
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 fcc1 	bl	8009b20 <USBD_CtlError>
      break;
 800919e:	bf00      	nop
  }

  return ret;
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b084      	sub	sp, #16
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
 80091b2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80091b4:	2300      	movs	r3, #0
 80091b6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	889b      	ldrh	r3, [r3, #4]
 80091bc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091c6:	2b40      	cmp	r3, #64	; 0x40
 80091c8:	d007      	beq.n	80091da <USBD_StdEPReq+0x30>
 80091ca:	2b40      	cmp	r3, #64	; 0x40
 80091cc:	f200 8145 	bhi.w	800945a <USBD_StdEPReq+0x2b0>
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00c      	beq.n	80091ee <USBD_StdEPReq+0x44>
 80091d4:	2b20      	cmp	r3, #32
 80091d6:	f040 8140 	bne.w	800945a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	6839      	ldr	r1, [r7, #0]
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	4798      	blx	r3
 80091e8:	4603      	mov	r3, r0
 80091ea:	73fb      	strb	r3, [r7, #15]
      break;
 80091ec:	e13a      	b.n	8009464 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	785b      	ldrb	r3, [r3, #1]
 80091f2:	2b03      	cmp	r3, #3
 80091f4:	d007      	beq.n	8009206 <USBD_StdEPReq+0x5c>
 80091f6:	2b03      	cmp	r3, #3
 80091f8:	f300 8129 	bgt.w	800944e <USBD_StdEPReq+0x2a4>
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d07f      	beq.n	8009300 <USBD_StdEPReq+0x156>
 8009200:	2b01      	cmp	r3, #1
 8009202:	d03c      	beq.n	800927e <USBD_StdEPReq+0xd4>
 8009204:	e123      	b.n	800944e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800920c:	b2db      	uxtb	r3, r3
 800920e:	2b02      	cmp	r3, #2
 8009210:	d002      	beq.n	8009218 <USBD_StdEPReq+0x6e>
 8009212:	2b03      	cmp	r3, #3
 8009214:	d016      	beq.n	8009244 <USBD_StdEPReq+0x9a>
 8009216:	e02c      	b.n	8009272 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009218:	7bbb      	ldrb	r3, [r7, #14]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00d      	beq.n	800923a <USBD_StdEPReq+0x90>
 800921e:	7bbb      	ldrb	r3, [r7, #14]
 8009220:	2b80      	cmp	r3, #128	; 0x80
 8009222:	d00a      	beq.n	800923a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009224:	7bbb      	ldrb	r3, [r7, #14]
 8009226:	4619      	mov	r1, r3
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f001 f887 	bl	800a33c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800922e:	2180      	movs	r1, #128	; 0x80
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f001 f883 	bl	800a33c <USBD_LL_StallEP>
 8009236:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009238:	e020      	b.n	800927c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800923a:	6839      	ldr	r1, [r7, #0]
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 fc6f 	bl	8009b20 <USBD_CtlError>
              break;
 8009242:	e01b      	b.n	800927c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	885b      	ldrh	r3, [r3, #2]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10e      	bne.n	800926a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800924c:	7bbb      	ldrb	r3, [r7, #14]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00b      	beq.n	800926a <USBD_StdEPReq+0xc0>
 8009252:	7bbb      	ldrb	r3, [r7, #14]
 8009254:	2b80      	cmp	r3, #128	; 0x80
 8009256:	d008      	beq.n	800926a <USBD_StdEPReq+0xc0>
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	88db      	ldrh	r3, [r3, #6]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d104      	bne.n	800926a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009260:	7bbb      	ldrb	r3, [r7, #14]
 8009262:	4619      	mov	r1, r3
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f001 f869 	bl	800a33c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 fd06 	bl	8009c7c <USBD_CtlSendStatus>

              break;
 8009270:	e004      	b.n	800927c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009272:	6839      	ldr	r1, [r7, #0]
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fc53 	bl	8009b20 <USBD_CtlError>
              break;
 800927a:	bf00      	nop
          }
          break;
 800927c:	e0ec      	b.n	8009458 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009284:	b2db      	uxtb	r3, r3
 8009286:	2b02      	cmp	r3, #2
 8009288:	d002      	beq.n	8009290 <USBD_StdEPReq+0xe6>
 800928a:	2b03      	cmp	r3, #3
 800928c:	d016      	beq.n	80092bc <USBD_StdEPReq+0x112>
 800928e:	e030      	b.n	80092f2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009290:	7bbb      	ldrb	r3, [r7, #14]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00d      	beq.n	80092b2 <USBD_StdEPReq+0x108>
 8009296:	7bbb      	ldrb	r3, [r7, #14]
 8009298:	2b80      	cmp	r3, #128	; 0x80
 800929a:	d00a      	beq.n	80092b2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800929c:	7bbb      	ldrb	r3, [r7, #14]
 800929e:	4619      	mov	r1, r3
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f001 f84b 	bl	800a33c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80092a6:	2180      	movs	r1, #128	; 0x80
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f001 f847 	bl	800a33c <USBD_LL_StallEP>
 80092ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80092b0:	e025      	b.n	80092fe <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80092b2:	6839      	ldr	r1, [r7, #0]
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 fc33 	bl	8009b20 <USBD_CtlError>
              break;
 80092ba:	e020      	b.n	80092fe <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	885b      	ldrh	r3, [r3, #2]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d11b      	bne.n	80092fc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80092c4:	7bbb      	ldrb	r3, [r7, #14]
 80092c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d004      	beq.n	80092d8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80092ce:	7bbb      	ldrb	r3, [r7, #14]
 80092d0:	4619      	mov	r1, r3
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f001 f851 	bl	800a37a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fccf 	bl	8009c7c <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	6839      	ldr	r1, [r7, #0]
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	4798      	blx	r3
 80092ec:	4603      	mov	r3, r0
 80092ee:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80092f0:	e004      	b.n	80092fc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80092f2:	6839      	ldr	r1, [r7, #0]
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 fc13 	bl	8009b20 <USBD_CtlError>
              break;
 80092fa:	e000      	b.n	80092fe <USBD_StdEPReq+0x154>
              break;
 80092fc:	bf00      	nop
          }
          break;
 80092fe:	e0ab      	b.n	8009458 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009306:	b2db      	uxtb	r3, r3
 8009308:	2b02      	cmp	r3, #2
 800930a:	d002      	beq.n	8009312 <USBD_StdEPReq+0x168>
 800930c:	2b03      	cmp	r3, #3
 800930e:	d032      	beq.n	8009376 <USBD_StdEPReq+0x1cc>
 8009310:	e097      	b.n	8009442 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009312:	7bbb      	ldrb	r3, [r7, #14]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d007      	beq.n	8009328 <USBD_StdEPReq+0x17e>
 8009318:	7bbb      	ldrb	r3, [r7, #14]
 800931a:	2b80      	cmp	r3, #128	; 0x80
 800931c:	d004      	beq.n	8009328 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 fbfd 	bl	8009b20 <USBD_CtlError>
                break;
 8009326:	e091      	b.n	800944c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009328:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800932c:	2b00      	cmp	r3, #0
 800932e:	da0b      	bge.n	8009348 <USBD_StdEPReq+0x19e>
 8009330:	7bbb      	ldrb	r3, [r7, #14]
 8009332:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009336:	4613      	mov	r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4413      	add	r3, r2
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	3310      	adds	r3, #16
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	4413      	add	r3, r2
 8009344:	3304      	adds	r3, #4
 8009346:	e00b      	b.n	8009360 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009348:	7bbb      	ldrb	r3, [r7, #14]
 800934a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800934e:	4613      	mov	r3, r2
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	4413      	add	r3, r2
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	4413      	add	r3, r2
 800935e:	3304      	adds	r3, #4
 8009360:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	2200      	movs	r2, #0
 8009366:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	2202      	movs	r2, #2
 800936c:	4619      	mov	r1, r3
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 fc47 	bl	8009c02 <USBD_CtlSendData>
              break;
 8009374:	e06a      	b.n	800944c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009376:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800937a:	2b00      	cmp	r3, #0
 800937c:	da11      	bge.n	80093a2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800937e:	7bbb      	ldrb	r3, [r7, #14]
 8009380:	f003 020f 	and.w	r2, r3, #15
 8009384:	6879      	ldr	r1, [r7, #4]
 8009386:	4613      	mov	r3, r2
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	4413      	add	r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	440b      	add	r3, r1
 8009390:	3324      	adds	r3, #36	; 0x24
 8009392:	881b      	ldrh	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d117      	bne.n	80093c8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009398:	6839      	ldr	r1, [r7, #0]
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 fbc0 	bl	8009b20 <USBD_CtlError>
                  break;
 80093a0:	e054      	b.n	800944c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80093a2:	7bbb      	ldrb	r3, [r7, #14]
 80093a4:	f003 020f 	and.w	r2, r3, #15
 80093a8:	6879      	ldr	r1, [r7, #4]
 80093aa:	4613      	mov	r3, r2
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	4413      	add	r3, r2
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	440b      	add	r3, r1
 80093b4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80093b8:	881b      	ldrh	r3, [r3, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d104      	bne.n	80093c8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80093be:	6839      	ldr	r1, [r7, #0]
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 fbad 	bl	8009b20 <USBD_CtlError>
                  break;
 80093c6:	e041      	b.n	800944c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	da0b      	bge.n	80093e8 <USBD_StdEPReq+0x23e>
 80093d0:	7bbb      	ldrb	r3, [r7, #14]
 80093d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093d6:	4613      	mov	r3, r2
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	4413      	add	r3, r2
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	3310      	adds	r3, #16
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	4413      	add	r3, r2
 80093e4:	3304      	adds	r3, #4
 80093e6:	e00b      	b.n	8009400 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80093e8:	7bbb      	ldrb	r3, [r7, #14]
 80093ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093ee:	4613      	mov	r3, r2
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	4413      	add	r3, r2
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	4413      	add	r3, r2
 80093fe:	3304      	adds	r3, #4
 8009400:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009402:	7bbb      	ldrb	r3, [r7, #14]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d002      	beq.n	800940e <USBD_StdEPReq+0x264>
 8009408:	7bbb      	ldrb	r3, [r7, #14]
 800940a:	2b80      	cmp	r3, #128	; 0x80
 800940c:	d103      	bne.n	8009416 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	2200      	movs	r2, #0
 8009412:	601a      	str	r2, [r3, #0]
 8009414:	e00e      	b.n	8009434 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009416:	7bbb      	ldrb	r3, [r7, #14]
 8009418:	4619      	mov	r1, r3
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 ffcc 	bl	800a3b8 <USBD_LL_IsStallEP>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d003      	beq.n	800942e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	2201      	movs	r2, #1
 800942a:	601a      	str	r2, [r3, #0]
 800942c:	e002      	b.n	8009434 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	2200      	movs	r2, #0
 8009432:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	2202      	movs	r2, #2
 8009438:	4619      	mov	r1, r3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 fbe1 	bl	8009c02 <USBD_CtlSendData>
              break;
 8009440:	e004      	b.n	800944c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009442:	6839      	ldr	r1, [r7, #0]
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 fb6b 	bl	8009b20 <USBD_CtlError>
              break;
 800944a:	bf00      	nop
          }
          break;
 800944c:	e004      	b.n	8009458 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800944e:	6839      	ldr	r1, [r7, #0]
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 fb65 	bl	8009b20 <USBD_CtlError>
          break;
 8009456:	bf00      	nop
      }
      break;
 8009458:	e004      	b.n	8009464 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800945a:	6839      	ldr	r1, [r7, #0]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 fb5f 	bl	8009b20 <USBD_CtlError>
      break;
 8009462:	bf00      	nop
  }

  return ret;
 8009464:	7bfb      	ldrb	r3, [r7, #15]
}
 8009466:	4618      	mov	r0, r3
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
	...

08009470 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800947a:	2300      	movs	r3, #0
 800947c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800947e:	2300      	movs	r3, #0
 8009480:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009482:	2300      	movs	r3, #0
 8009484:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	885b      	ldrh	r3, [r3, #2]
 800948a:	0a1b      	lsrs	r3, r3, #8
 800948c:	b29b      	uxth	r3, r3
 800948e:	3b01      	subs	r3, #1
 8009490:	2b0e      	cmp	r3, #14
 8009492:	f200 8152 	bhi.w	800973a <USBD_GetDescriptor+0x2ca>
 8009496:	a201      	add	r2, pc, #4	; (adr r2, 800949c <USBD_GetDescriptor+0x2c>)
 8009498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800949c:	0800950d 	.word	0x0800950d
 80094a0:	08009525 	.word	0x08009525
 80094a4:	08009565 	.word	0x08009565
 80094a8:	0800973b 	.word	0x0800973b
 80094ac:	0800973b 	.word	0x0800973b
 80094b0:	080096db 	.word	0x080096db
 80094b4:	08009707 	.word	0x08009707
 80094b8:	0800973b 	.word	0x0800973b
 80094bc:	0800973b 	.word	0x0800973b
 80094c0:	0800973b 	.word	0x0800973b
 80094c4:	0800973b 	.word	0x0800973b
 80094c8:	0800973b 	.word	0x0800973b
 80094cc:	0800973b 	.word	0x0800973b
 80094d0:	0800973b 	.word	0x0800973b
 80094d4:	080094d9 	.word	0x080094d9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094de:	69db      	ldr	r3, [r3, #28]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d00b      	beq.n	80094fc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ea:	69db      	ldr	r3, [r3, #28]
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	7c12      	ldrb	r2, [r2, #16]
 80094f0:	f107 0108 	add.w	r1, r7, #8
 80094f4:	4610      	mov	r0, r2
 80094f6:	4798      	blx	r3
 80094f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094fa:	e126      	b.n	800974a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80094fc:	6839      	ldr	r1, [r7, #0]
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 fb0e 	bl	8009b20 <USBD_CtlError>
        err++;
 8009504:	7afb      	ldrb	r3, [r7, #11]
 8009506:	3301      	adds	r3, #1
 8009508:	72fb      	strb	r3, [r7, #11]
      break;
 800950a:	e11e      	b.n	800974a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	7c12      	ldrb	r2, [r2, #16]
 8009518:	f107 0108 	add.w	r1, r7, #8
 800951c:	4610      	mov	r0, r2
 800951e:	4798      	blx	r3
 8009520:	60f8      	str	r0, [r7, #12]
      break;
 8009522:	e112      	b.n	800974a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	7c1b      	ldrb	r3, [r3, #16]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10d      	bne.n	8009548 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009534:	f107 0208 	add.w	r2, r7, #8
 8009538:	4610      	mov	r0, r2
 800953a:	4798      	blx	r3
 800953c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	3301      	adds	r3, #1
 8009542:	2202      	movs	r2, #2
 8009544:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009546:	e100      	b.n	800974a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800954e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009550:	f107 0208 	add.w	r2, r7, #8
 8009554:	4610      	mov	r0, r2
 8009556:	4798      	blx	r3
 8009558:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	3301      	adds	r3, #1
 800955e:	2202      	movs	r2, #2
 8009560:	701a      	strb	r2, [r3, #0]
      break;
 8009562:	e0f2      	b.n	800974a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	885b      	ldrh	r3, [r3, #2]
 8009568:	b2db      	uxtb	r3, r3
 800956a:	2b05      	cmp	r3, #5
 800956c:	f200 80ac 	bhi.w	80096c8 <USBD_GetDescriptor+0x258>
 8009570:	a201      	add	r2, pc, #4	; (adr r2, 8009578 <USBD_GetDescriptor+0x108>)
 8009572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009576:	bf00      	nop
 8009578:	08009591 	.word	0x08009591
 800957c:	080095c5 	.word	0x080095c5
 8009580:	080095f9 	.word	0x080095f9
 8009584:	0800962d 	.word	0x0800962d
 8009588:	08009661 	.word	0x08009661
 800958c:	08009695 	.word	0x08009695
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d00b      	beq.n	80095b4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	7c12      	ldrb	r2, [r2, #16]
 80095a8:	f107 0108 	add.w	r1, r7, #8
 80095ac:	4610      	mov	r0, r2
 80095ae:	4798      	blx	r3
 80095b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095b2:	e091      	b.n	80096d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80095b4:	6839      	ldr	r1, [r7, #0]
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 fab2 	bl	8009b20 <USBD_CtlError>
            err++;
 80095bc:	7afb      	ldrb	r3, [r7, #11]
 80095be:	3301      	adds	r3, #1
 80095c0:	72fb      	strb	r3, [r7, #11]
          break;
 80095c2:	e089      	b.n	80096d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00b      	beq.n	80095e8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	7c12      	ldrb	r2, [r2, #16]
 80095dc:	f107 0108 	add.w	r1, r7, #8
 80095e0:	4610      	mov	r0, r2
 80095e2:	4798      	blx	r3
 80095e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095e6:	e077      	b.n	80096d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80095e8:	6839      	ldr	r1, [r7, #0]
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 fa98 	bl	8009b20 <USBD_CtlError>
            err++;
 80095f0:	7afb      	ldrb	r3, [r7, #11]
 80095f2:	3301      	adds	r3, #1
 80095f4:	72fb      	strb	r3, [r7, #11]
          break;
 80095f6:	e06f      	b.n	80096d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d00b      	beq.n	800961c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	7c12      	ldrb	r2, [r2, #16]
 8009610:	f107 0108 	add.w	r1, r7, #8
 8009614:	4610      	mov	r0, r2
 8009616:	4798      	blx	r3
 8009618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800961a:	e05d      	b.n	80096d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800961c:	6839      	ldr	r1, [r7, #0]
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fa7e 	bl	8009b20 <USBD_CtlError>
            err++;
 8009624:	7afb      	ldrb	r3, [r7, #11]
 8009626:	3301      	adds	r3, #1
 8009628:	72fb      	strb	r3, [r7, #11]
          break;
 800962a:	e055      	b.n	80096d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00b      	beq.n	8009650 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	7c12      	ldrb	r2, [r2, #16]
 8009644:	f107 0108 	add.w	r1, r7, #8
 8009648:	4610      	mov	r0, r2
 800964a:	4798      	blx	r3
 800964c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800964e:	e043      	b.n	80096d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009650:	6839      	ldr	r1, [r7, #0]
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 fa64 	bl	8009b20 <USBD_CtlError>
            err++;
 8009658:	7afb      	ldrb	r3, [r7, #11]
 800965a:	3301      	adds	r3, #1
 800965c:	72fb      	strb	r3, [r7, #11]
          break;
 800965e:	e03b      	b.n	80096d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009666:	695b      	ldr	r3, [r3, #20]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d00b      	beq.n	8009684 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009672:	695b      	ldr	r3, [r3, #20]
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	7c12      	ldrb	r2, [r2, #16]
 8009678:	f107 0108 	add.w	r1, r7, #8
 800967c:	4610      	mov	r0, r2
 800967e:	4798      	blx	r3
 8009680:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009682:	e029      	b.n	80096d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009684:	6839      	ldr	r1, [r7, #0]
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 fa4a 	bl	8009b20 <USBD_CtlError>
            err++;
 800968c:	7afb      	ldrb	r3, [r7, #11]
 800968e:	3301      	adds	r3, #1
 8009690:	72fb      	strb	r3, [r7, #11]
          break;
 8009692:	e021      	b.n	80096d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800969a:	699b      	ldr	r3, [r3, #24]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d00b      	beq.n	80096b8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	7c12      	ldrb	r2, [r2, #16]
 80096ac:	f107 0108 	add.w	r1, r7, #8
 80096b0:	4610      	mov	r0, r2
 80096b2:	4798      	blx	r3
 80096b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096b6:	e00f      	b.n	80096d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80096b8:	6839      	ldr	r1, [r7, #0]
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 fa30 	bl	8009b20 <USBD_CtlError>
            err++;
 80096c0:	7afb      	ldrb	r3, [r7, #11]
 80096c2:	3301      	adds	r3, #1
 80096c4:	72fb      	strb	r3, [r7, #11]
          break;
 80096c6:	e007      	b.n	80096d8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80096c8:	6839      	ldr	r1, [r7, #0]
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fa28 	bl	8009b20 <USBD_CtlError>
          err++;
 80096d0:	7afb      	ldrb	r3, [r7, #11]
 80096d2:	3301      	adds	r3, #1
 80096d4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80096d6:	bf00      	nop
      }
      break;
 80096d8:	e037      	b.n	800974a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	7c1b      	ldrb	r3, [r3, #16]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d109      	bne.n	80096f6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ea:	f107 0208 	add.w	r2, r7, #8
 80096ee:	4610      	mov	r0, r2
 80096f0:	4798      	blx	r3
 80096f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80096f4:	e029      	b.n	800974a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80096f6:	6839      	ldr	r1, [r7, #0]
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 fa11 	bl	8009b20 <USBD_CtlError>
        err++;
 80096fe:	7afb      	ldrb	r3, [r7, #11]
 8009700:	3301      	adds	r3, #1
 8009702:	72fb      	strb	r3, [r7, #11]
      break;
 8009704:	e021      	b.n	800974a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	7c1b      	ldrb	r3, [r3, #16]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10d      	bne.n	800972a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009716:	f107 0208 	add.w	r2, r7, #8
 800971a:	4610      	mov	r0, r2
 800971c:	4798      	blx	r3
 800971e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	3301      	adds	r3, #1
 8009724:	2207      	movs	r2, #7
 8009726:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009728:	e00f      	b.n	800974a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800972a:	6839      	ldr	r1, [r7, #0]
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 f9f7 	bl	8009b20 <USBD_CtlError>
        err++;
 8009732:	7afb      	ldrb	r3, [r7, #11]
 8009734:	3301      	adds	r3, #1
 8009736:	72fb      	strb	r3, [r7, #11]
      break;
 8009738:	e007      	b.n	800974a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800973a:	6839      	ldr	r1, [r7, #0]
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 f9ef 	bl	8009b20 <USBD_CtlError>
      err++;
 8009742:	7afb      	ldrb	r3, [r7, #11]
 8009744:	3301      	adds	r3, #1
 8009746:	72fb      	strb	r3, [r7, #11]
      break;
 8009748:	bf00      	nop
  }

  if (err != 0U)
 800974a:	7afb      	ldrb	r3, [r7, #11]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d11e      	bne.n	800978e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	88db      	ldrh	r3, [r3, #6]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d016      	beq.n	8009786 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009758:	893b      	ldrh	r3, [r7, #8]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00e      	beq.n	800977c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	88da      	ldrh	r2, [r3, #6]
 8009762:	893b      	ldrh	r3, [r7, #8]
 8009764:	4293      	cmp	r3, r2
 8009766:	bf28      	it	cs
 8009768:	4613      	movcs	r3, r2
 800976a:	b29b      	uxth	r3, r3
 800976c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800976e:	893b      	ldrh	r3, [r7, #8]
 8009770:	461a      	mov	r2, r3
 8009772:	68f9      	ldr	r1, [r7, #12]
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 fa44 	bl	8009c02 <USBD_CtlSendData>
 800977a:	e009      	b.n	8009790 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800977c:	6839      	ldr	r1, [r7, #0]
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 f9ce 	bl	8009b20 <USBD_CtlError>
 8009784:	e004      	b.n	8009790 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 fa78 	bl	8009c7c <USBD_CtlSendStatus>
 800978c:	e000      	b.n	8009790 <USBD_GetDescriptor+0x320>
    return;
 800978e:	bf00      	nop
  }
}
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop

08009798 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	889b      	ldrh	r3, [r3, #4]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d131      	bne.n	800980e <USBD_SetAddress+0x76>
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	88db      	ldrh	r3, [r3, #6]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d12d      	bne.n	800980e <USBD_SetAddress+0x76>
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	885b      	ldrh	r3, [r3, #2]
 80097b6:	2b7f      	cmp	r3, #127	; 0x7f
 80097b8:	d829      	bhi.n	800980e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	885b      	ldrh	r3, [r3, #2]
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	2b03      	cmp	r3, #3
 80097d0:	d104      	bne.n	80097dc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80097d2:	6839      	ldr	r1, [r7, #0]
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 f9a3 	bl	8009b20 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097da:	e01d      	b.n	8009818 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	7bfa      	ldrb	r2, [r7, #15]
 80097e0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80097e4:	7bfb      	ldrb	r3, [r7, #15]
 80097e6:	4619      	mov	r1, r3
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 fe11 	bl	800a410 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 fa44 	bl	8009c7c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80097f4:	7bfb      	ldrb	r3, [r7, #15]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d004      	beq.n	8009804 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2202      	movs	r2, #2
 80097fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009802:	e009      	b.n	8009818 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800980c:	e004      	b.n	8009818 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800980e:	6839      	ldr	r1, [r7, #0]
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 f985 	bl	8009b20 <USBD_CtlError>
  }
}
 8009816:	bf00      	nop
 8009818:	bf00      	nop
 800981a:	3710      	adds	r7, #16
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	885b      	ldrh	r3, [r3, #2]
 8009832:	b2da      	uxtb	r2, r3
 8009834:	4b4c      	ldr	r3, [pc, #304]	; (8009968 <USBD_SetConfig+0x148>)
 8009836:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009838:	4b4b      	ldr	r3, [pc, #300]	; (8009968 <USBD_SetConfig+0x148>)
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	2b01      	cmp	r3, #1
 800983e:	d905      	bls.n	800984c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009840:	6839      	ldr	r1, [r7, #0]
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 f96c 	bl	8009b20 <USBD_CtlError>
    return USBD_FAIL;
 8009848:	2303      	movs	r3, #3
 800984a:	e088      	b.n	800995e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009852:	b2db      	uxtb	r3, r3
 8009854:	2b02      	cmp	r3, #2
 8009856:	d002      	beq.n	800985e <USBD_SetConfig+0x3e>
 8009858:	2b03      	cmp	r3, #3
 800985a:	d025      	beq.n	80098a8 <USBD_SetConfig+0x88>
 800985c:	e071      	b.n	8009942 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800985e:	4b42      	ldr	r3, [pc, #264]	; (8009968 <USBD_SetConfig+0x148>)
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d01c      	beq.n	80098a0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009866:	4b40      	ldr	r3, [pc, #256]	; (8009968 <USBD_SetConfig+0x148>)
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	461a      	mov	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009870:	4b3d      	ldr	r3, [pc, #244]	; (8009968 <USBD_SetConfig+0x148>)
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	4619      	mov	r1, r3
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f7ff f91e 	bl	8008ab8 <USBD_SetClassConfig>
 800987c:	4603      	mov	r3, r0
 800987e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009880:	7bfb      	ldrb	r3, [r7, #15]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d004      	beq.n	8009890 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009886:	6839      	ldr	r1, [r7, #0]
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 f949 	bl	8009b20 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800988e:	e065      	b.n	800995c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 f9f3 	bl	8009c7c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2203      	movs	r2, #3
 800989a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800989e:	e05d      	b.n	800995c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 f9eb 	bl	8009c7c <USBD_CtlSendStatus>
      break;
 80098a6:	e059      	b.n	800995c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80098a8:	4b2f      	ldr	r3, [pc, #188]	; (8009968 <USBD_SetConfig+0x148>)
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d112      	bne.n	80098d6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2202      	movs	r2, #2
 80098b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80098b8:	4b2b      	ldr	r3, [pc, #172]	; (8009968 <USBD_SetConfig+0x148>)
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	461a      	mov	r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80098c2:	4b29      	ldr	r3, [pc, #164]	; (8009968 <USBD_SetConfig+0x148>)
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	4619      	mov	r1, r3
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f7ff f911 	bl	8008af0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 f9d4 	bl	8009c7c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80098d4:	e042      	b.n	800995c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80098d6:	4b24      	ldr	r3, [pc, #144]	; (8009968 <USBD_SetConfig+0x148>)
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	461a      	mov	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d02a      	beq.n	800993a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	4619      	mov	r1, r3
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f7ff f8ff 	bl	8008af0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80098f2:	4b1d      	ldr	r3, [pc, #116]	; (8009968 <USBD_SetConfig+0x148>)
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	461a      	mov	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80098fc:	4b1a      	ldr	r3, [pc, #104]	; (8009968 <USBD_SetConfig+0x148>)
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	4619      	mov	r1, r3
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f7ff f8d8 	bl	8008ab8 <USBD_SetClassConfig>
 8009908:	4603      	mov	r3, r0
 800990a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800990c:	7bfb      	ldrb	r3, [r7, #15]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00f      	beq.n	8009932 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009912:	6839      	ldr	r1, [r7, #0]
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 f903 	bl	8009b20 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	b2db      	uxtb	r3, r3
 8009920:	4619      	mov	r1, r3
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f7ff f8e4 	bl	8008af0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2202      	movs	r2, #2
 800992c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009930:	e014      	b.n	800995c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 f9a2 	bl	8009c7c <USBD_CtlSendStatus>
      break;
 8009938:	e010      	b.n	800995c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 f99e 	bl	8009c7c <USBD_CtlSendStatus>
      break;
 8009940:	e00c      	b.n	800995c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009942:	6839      	ldr	r1, [r7, #0]
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 f8eb 	bl	8009b20 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800994a:	4b07      	ldr	r3, [pc, #28]	; (8009968 <USBD_SetConfig+0x148>)
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	4619      	mov	r1, r3
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f7ff f8cd 	bl	8008af0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009956:	2303      	movs	r3, #3
 8009958:	73fb      	strb	r3, [r7, #15]
      break;
 800995a:	bf00      	nop
  }

  return ret;
 800995c:	7bfb      	ldrb	r3, [r7, #15]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	2000064e 	.word	0x2000064e

0800996c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	88db      	ldrh	r3, [r3, #6]
 800997a:	2b01      	cmp	r3, #1
 800997c:	d004      	beq.n	8009988 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800997e:	6839      	ldr	r1, [r7, #0]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f8cd 	bl	8009b20 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009986:	e023      	b.n	80099d0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800998e:	b2db      	uxtb	r3, r3
 8009990:	2b02      	cmp	r3, #2
 8009992:	dc02      	bgt.n	800999a <USBD_GetConfig+0x2e>
 8009994:	2b00      	cmp	r3, #0
 8009996:	dc03      	bgt.n	80099a0 <USBD_GetConfig+0x34>
 8009998:	e015      	b.n	80099c6 <USBD_GetConfig+0x5a>
 800999a:	2b03      	cmp	r3, #3
 800999c:	d00b      	beq.n	80099b6 <USBD_GetConfig+0x4a>
 800999e:	e012      	b.n	80099c6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	3308      	adds	r3, #8
 80099aa:	2201      	movs	r2, #1
 80099ac:	4619      	mov	r1, r3
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 f927 	bl	8009c02 <USBD_CtlSendData>
        break;
 80099b4:	e00c      	b.n	80099d0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	3304      	adds	r3, #4
 80099ba:	2201      	movs	r2, #1
 80099bc:	4619      	mov	r1, r3
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 f91f 	bl	8009c02 <USBD_CtlSendData>
        break;
 80099c4:	e004      	b.n	80099d0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80099c6:	6839      	ldr	r1, [r7, #0]
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 f8a9 	bl	8009b20 <USBD_CtlError>
        break;
 80099ce:	bf00      	nop
}
 80099d0:	bf00      	nop
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	3b01      	subs	r3, #1
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d81e      	bhi.n	8009a2e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	88db      	ldrh	r3, [r3, #6]
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d004      	beq.n	8009a02 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80099f8:	6839      	ldr	r1, [r7, #0]
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 f890 	bl	8009b20 <USBD_CtlError>
        break;
 8009a00:	e01a      	b.n	8009a38 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2201      	movs	r2, #1
 8009a06:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d005      	beq.n	8009a1e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	f043 0202 	orr.w	r2, r3, #2
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	330c      	adds	r3, #12
 8009a22:	2202      	movs	r2, #2
 8009a24:	4619      	mov	r1, r3
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 f8eb 	bl	8009c02 <USBD_CtlSendData>
      break;
 8009a2c:	e004      	b.n	8009a38 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009a2e:	6839      	ldr	r1, [r7, #0]
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 f875 	bl	8009b20 <USBD_CtlError>
      break;
 8009a36:	bf00      	nop
  }
}
 8009a38:	bf00      	nop
 8009a3a:	3708      	adds	r7, #8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	885b      	ldrh	r3, [r3, #2]
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d106      	bne.n	8009a60 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2201      	movs	r2, #1
 8009a56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 f90e 	bl	8009c7c <USBD_CtlSendStatus>
  }
}
 8009a60:	bf00      	nop
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	d80b      	bhi.n	8009a98 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	885b      	ldrh	r3, [r3, #2]
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d10c      	bne.n	8009aa2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 f8f3 	bl	8009c7c <USBD_CtlSendStatus>
      }
      break;
 8009a96:	e004      	b.n	8009aa2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009a98:	6839      	ldr	r1, [r7, #0]
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 f840 	bl	8009b20 <USBD_CtlError>
      break;
 8009aa0:	e000      	b.n	8009aa4 <USBD_ClrFeature+0x3c>
      break;
 8009aa2:	bf00      	nop
  }
}
 8009aa4:	bf00      	nop
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	781a      	ldrb	r2, [r3, #0]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	781a      	ldrb	r2, [r3, #0]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009ad6:	68f8      	ldr	r0, [r7, #12]
 8009ad8:	f7ff fa91 	bl	8008ffe <SWAPBYTE>
 8009adc:	4603      	mov	r3, r0
 8009ade:	461a      	mov	r2, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	3301      	adds	r3, #1
 8009aee:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009af0:	68f8      	ldr	r0, [r7, #12]
 8009af2:	f7ff fa84 	bl	8008ffe <SWAPBYTE>
 8009af6:	4603      	mov	r3, r0
 8009af8:	461a      	mov	r2, r3
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	3301      	adds	r3, #1
 8009b02:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	3301      	adds	r3, #1
 8009b08:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	f7ff fa77 	bl	8008ffe <SWAPBYTE>
 8009b10:	4603      	mov	r3, r0
 8009b12:	461a      	mov	r2, r3
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	80da      	strh	r2, [r3, #6]
}
 8009b18:	bf00      	nop
 8009b1a:	3710      	adds	r7, #16
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b2a:	2180      	movs	r1, #128	; 0x80
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 fc05 	bl	800a33c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009b32:	2100      	movs	r1, #0
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 fc01 	bl	800a33c <USBD_LL_StallEP>
}
 8009b3a:	bf00      	nop
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b086      	sub	sp, #24
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	60f8      	str	r0, [r7, #12]
 8009b4a:	60b9      	str	r1, [r7, #8]
 8009b4c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d036      	beq.n	8009bc6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009b5c:	6938      	ldr	r0, [r7, #16]
 8009b5e:	f000 f836 	bl	8009bce <USBD_GetLen>
 8009b62:	4603      	mov	r3, r0
 8009b64:	3301      	adds	r3, #1
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	005b      	lsls	r3, r3, #1
 8009b6a:	b29a      	uxth	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009b70:	7dfb      	ldrb	r3, [r7, #23]
 8009b72:	68ba      	ldr	r2, [r7, #8]
 8009b74:	4413      	add	r3, r2
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	7812      	ldrb	r2, [r2, #0]
 8009b7a:	701a      	strb	r2, [r3, #0]
  idx++;
 8009b7c:	7dfb      	ldrb	r3, [r7, #23]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009b82:	7dfb      	ldrb	r3, [r7, #23]
 8009b84:	68ba      	ldr	r2, [r7, #8]
 8009b86:	4413      	add	r3, r2
 8009b88:	2203      	movs	r2, #3
 8009b8a:	701a      	strb	r2, [r3, #0]
  idx++;
 8009b8c:	7dfb      	ldrb	r3, [r7, #23]
 8009b8e:	3301      	adds	r3, #1
 8009b90:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009b92:	e013      	b.n	8009bbc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009b94:	7dfb      	ldrb	r3, [r7, #23]
 8009b96:	68ba      	ldr	r2, [r7, #8]
 8009b98:	4413      	add	r3, r2
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	7812      	ldrb	r2, [r2, #0]
 8009b9e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	613b      	str	r3, [r7, #16]
    idx++;
 8009ba6:	7dfb      	ldrb	r3, [r7, #23]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009bac:	7dfb      	ldrb	r3, [r7, #23]
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	701a      	strb	r2, [r3, #0]
    idx++;
 8009bb6:	7dfb      	ldrb	r3, [r7, #23]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d1e7      	bne.n	8009b94 <USBD_GetString+0x52>
 8009bc4:	e000      	b.n	8009bc8 <USBD_GetString+0x86>
    return;
 8009bc6:	bf00      	nop
  }
}
 8009bc8:	3718      	adds	r7, #24
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009bce:	b480      	push	{r7}
 8009bd0:	b085      	sub	sp, #20
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009bde:	e005      	b.n	8009bec <USBD_GetLen+0x1e>
  {
    len++;
 8009be0:	7bfb      	ldrb	r3, [r7, #15]
 8009be2:	3301      	adds	r3, #1
 8009be4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	3301      	adds	r3, #1
 8009bea:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d1f5      	bne.n	8009be0 <USBD_GetLen+0x12>
  }

  return len;
 8009bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3714      	adds	r7, #20
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr

08009c02 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b084      	sub	sp, #16
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	60f8      	str	r0, [r7, #12]
 8009c0a:	60b9      	str	r1, [r7, #8]
 8009c0c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2202      	movs	r2, #2
 8009c12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	68ba      	ldr	r2, [r7, #8]
 8009c26:	2100      	movs	r1, #0
 8009c28:	68f8      	ldr	r0, [r7, #12]
 8009c2a:	f000 fc10 	bl	800a44e <USBD_LL_Transmit>

  return USBD_OK;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	68ba      	ldr	r2, [r7, #8]
 8009c48:	2100      	movs	r1, #0
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f000 fbff 	bl	800a44e <USBD_LL_Transmit>

  return USBD_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b084      	sub	sp, #16
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	60f8      	str	r0, [r7, #12]
 8009c62:	60b9      	str	r1, [r7, #8]
 8009c64:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	68ba      	ldr	r2, [r7, #8]
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	68f8      	ldr	r0, [r7, #12]
 8009c6e:	f000 fc0f 	bl	800a490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2204      	movs	r2, #4
 8009c88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	2200      	movs	r2, #0
 8009c90:	2100      	movs	r1, #0
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 fbdb 	bl	800a44e <USBD_LL_Transmit>

  return USBD_OK;
 8009c98:	2300      	movs	r3, #0
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3708      	adds	r7, #8
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	b082      	sub	sp, #8
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2205      	movs	r2, #5
 8009cae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	2100      	movs	r1, #0
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 fbe9 	bl	800a490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cbe:	2300      	movs	r3, #0
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009ccc:	2200      	movs	r2, #0
 8009cce:	490e      	ldr	r1, [pc, #56]	; (8009d08 <MX_USB_DEVICE_Init+0x40>)
 8009cd0:	480e      	ldr	r0, [pc, #56]	; (8009d0c <MX_USB_DEVICE_Init+0x44>)
 8009cd2:	f7fe fe83 	bl	80089dc <USBD_Init>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d001      	beq.n	8009ce0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009cdc:	f7f8 fcfe 	bl	80026dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009ce0:	490b      	ldr	r1, [pc, #44]	; (8009d10 <MX_USB_DEVICE_Init+0x48>)
 8009ce2:	480a      	ldr	r0, [pc, #40]	; (8009d0c <MX_USB_DEVICE_Init+0x44>)
 8009ce4:	f7fe feaa 	bl	8008a3c <USBD_RegisterClass>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d001      	beq.n	8009cf2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009cee:	f7f8 fcf5 	bl	80026dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009cf2:	4806      	ldr	r0, [pc, #24]	; (8009d0c <MX_USB_DEVICE_Init+0x44>)
 8009cf4:	f7fe fec9 	bl	8008a8a <USBD_Start>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d001      	beq.n	8009d02 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8009cfe:	f7f8 fced 	bl	80026dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009d02:	bf00      	nop
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	2000010c 	.word	0x2000010c
 8009d0c:	20000670 	.word	0x20000670
 8009d10:	2000000c 	.word	0x2000000c

08009d14 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	6039      	str	r1, [r7, #0]
 8009d1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	2212      	movs	r2, #18
 8009d24:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009d26:	4b03      	ldr	r3, [pc, #12]	; (8009d34 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr
 8009d34:	2000012c 	.word	0x2000012c

08009d38 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	4603      	mov	r3, r0
 8009d40:	6039      	str	r1, [r7, #0]
 8009d42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	2204      	movs	r2, #4
 8009d48:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009d4a:	4b03      	ldr	r3, [pc, #12]	; (8009d58 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr
 8009d58:	2000014c 	.word	0x2000014c

08009d5c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	4603      	mov	r3, r0
 8009d64:	6039      	str	r1, [r7, #0]
 8009d66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d68:	79fb      	ldrb	r3, [r7, #7]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d105      	bne.n	8009d7a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d6e:	683a      	ldr	r2, [r7, #0]
 8009d70:	4907      	ldr	r1, [pc, #28]	; (8009d90 <USBD_FS_ProductStrDescriptor+0x34>)
 8009d72:	4808      	ldr	r0, [pc, #32]	; (8009d94 <USBD_FS_ProductStrDescriptor+0x38>)
 8009d74:	f7ff fee5 	bl	8009b42 <USBD_GetString>
 8009d78:	e004      	b.n	8009d84 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d7a:	683a      	ldr	r2, [r7, #0]
 8009d7c:	4904      	ldr	r1, [pc, #16]	; (8009d90 <USBD_FS_ProductStrDescriptor+0x34>)
 8009d7e:	4805      	ldr	r0, [pc, #20]	; (8009d94 <USBD_FS_ProductStrDescriptor+0x38>)
 8009d80:	f7ff fedf 	bl	8009b42 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d84:	4b02      	ldr	r3, [pc, #8]	; (8009d90 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3708      	adds	r7, #8
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	20000940 	.word	0x20000940
 8009d94:	08010df0 	.word	0x08010df0

08009d98 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	4603      	mov	r3, r0
 8009da0:	6039      	str	r1, [r7, #0]
 8009da2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009da4:	683a      	ldr	r2, [r7, #0]
 8009da6:	4904      	ldr	r1, [pc, #16]	; (8009db8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009da8:	4804      	ldr	r0, [pc, #16]	; (8009dbc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009daa:	f7ff feca 	bl	8009b42 <USBD_GetString>
  return USBD_StrDesc;
 8009dae:	4b02      	ldr	r3, [pc, #8]	; (8009db8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3708      	adds	r7, #8
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	20000940 	.word	0x20000940
 8009dbc:	08010e08 	.word	0x08010e08

08009dc0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	6039      	str	r1, [r7, #0]
 8009dca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	221a      	movs	r2, #26
 8009dd0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009dd2:	f000 f855 	bl	8009e80 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009dd6:	4b02      	ldr	r3, [pc, #8]	; (8009de0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	20000150 	.word	0x20000150

08009de4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	4603      	mov	r3, r0
 8009dec:	6039      	str	r1, [r7, #0]
 8009dee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009df0:	79fb      	ldrb	r3, [r7, #7]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d105      	bne.n	8009e02 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009df6:	683a      	ldr	r2, [r7, #0]
 8009df8:	4907      	ldr	r1, [pc, #28]	; (8009e18 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009dfa:	4808      	ldr	r0, [pc, #32]	; (8009e1c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009dfc:	f7ff fea1 	bl	8009b42 <USBD_GetString>
 8009e00:	e004      	b.n	8009e0c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e02:	683a      	ldr	r2, [r7, #0]
 8009e04:	4904      	ldr	r1, [pc, #16]	; (8009e18 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e06:	4805      	ldr	r0, [pc, #20]	; (8009e1c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e08:	f7ff fe9b 	bl	8009b42 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e0c:	4b02      	ldr	r3, [pc, #8]	; (8009e18 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3708      	adds	r7, #8
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	20000940 	.word	0x20000940
 8009e1c:	08010e1c 	.word	0x08010e1c

08009e20 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	4603      	mov	r3, r0
 8009e28:	6039      	str	r1, [r7, #0]
 8009e2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e2c:	79fb      	ldrb	r3, [r7, #7]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d105      	bne.n	8009e3e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e32:	683a      	ldr	r2, [r7, #0]
 8009e34:	4907      	ldr	r1, [pc, #28]	; (8009e54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e36:	4808      	ldr	r0, [pc, #32]	; (8009e58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e38:	f7ff fe83 	bl	8009b42 <USBD_GetString>
 8009e3c:	e004      	b.n	8009e48 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e3e:	683a      	ldr	r2, [r7, #0]
 8009e40:	4904      	ldr	r1, [pc, #16]	; (8009e54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e42:	4805      	ldr	r0, [pc, #20]	; (8009e58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e44:	f7ff fe7d 	bl	8009b42 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e48:	4b02      	ldr	r3, [pc, #8]	; (8009e54 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3708      	adds	r7, #8
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	20000940 	.word	0x20000940
 8009e58:	08010e28 	.word	0x08010e28

08009e5c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	4603      	mov	r3, r0
 8009e64:	6039      	str	r1, [r7, #0]
 8009e66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	220c      	movs	r2, #12
 8009e6c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009e6e:	4b03      	ldr	r3, [pc, #12]	; (8009e7c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	20000140 	.word	0x20000140

08009e80 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009e86:	4b0f      	ldr	r3, [pc, #60]	; (8009ec4 <Get_SerialNum+0x44>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009e8c:	4b0e      	ldr	r3, [pc, #56]	; (8009ec8 <Get_SerialNum+0x48>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009e92:	4b0e      	ldr	r3, [pc, #56]	; (8009ecc <Get_SerialNum+0x4c>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	4413      	add	r3, r2
 8009e9e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d009      	beq.n	8009eba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009ea6:	2208      	movs	r2, #8
 8009ea8:	4909      	ldr	r1, [pc, #36]	; (8009ed0 <Get_SerialNum+0x50>)
 8009eaa:	68f8      	ldr	r0, [r7, #12]
 8009eac:	f000 f814 	bl	8009ed8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009eb0:	2204      	movs	r2, #4
 8009eb2:	4908      	ldr	r1, [pc, #32]	; (8009ed4 <Get_SerialNum+0x54>)
 8009eb4:	68b8      	ldr	r0, [r7, #8]
 8009eb6:	f000 f80f 	bl	8009ed8 <IntToUnicode>
  }
}
 8009eba:	bf00      	nop
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	1fff7a10 	.word	0x1fff7a10
 8009ec8:	1fff7a14 	.word	0x1fff7a14
 8009ecc:	1fff7a18 	.word	0x1fff7a18
 8009ed0:	20000152 	.word	0x20000152
 8009ed4:	20000162 	.word	0x20000162

08009ed8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b087      	sub	sp, #28
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009eea:	2300      	movs	r3, #0
 8009eec:	75fb      	strb	r3, [r7, #23]
 8009eee:	e027      	b.n	8009f40 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	0f1b      	lsrs	r3, r3, #28
 8009ef4:	2b09      	cmp	r3, #9
 8009ef6:	d80b      	bhi.n	8009f10 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	0f1b      	lsrs	r3, r3, #28
 8009efc:	b2da      	uxtb	r2, r3
 8009efe:	7dfb      	ldrb	r3, [r7, #23]
 8009f00:	005b      	lsls	r3, r3, #1
 8009f02:	4619      	mov	r1, r3
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	440b      	add	r3, r1
 8009f08:	3230      	adds	r2, #48	; 0x30
 8009f0a:	b2d2      	uxtb	r2, r2
 8009f0c:	701a      	strb	r2, [r3, #0]
 8009f0e:	e00a      	b.n	8009f26 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	0f1b      	lsrs	r3, r3, #28
 8009f14:	b2da      	uxtb	r2, r3
 8009f16:	7dfb      	ldrb	r3, [r7, #23]
 8009f18:	005b      	lsls	r3, r3, #1
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	440b      	add	r3, r1
 8009f20:	3237      	adds	r2, #55	; 0x37
 8009f22:	b2d2      	uxtb	r2, r2
 8009f24:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	011b      	lsls	r3, r3, #4
 8009f2a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009f2c:	7dfb      	ldrb	r3, [r7, #23]
 8009f2e:	005b      	lsls	r3, r3, #1
 8009f30:	3301      	adds	r3, #1
 8009f32:	68ba      	ldr	r2, [r7, #8]
 8009f34:	4413      	add	r3, r2
 8009f36:	2200      	movs	r2, #0
 8009f38:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009f3a:	7dfb      	ldrb	r3, [r7, #23]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	75fb      	strb	r3, [r7, #23]
 8009f40:	7dfa      	ldrb	r2, [r7, #23]
 8009f42:	79fb      	ldrb	r3, [r7, #7]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d3d3      	bcc.n	8009ef0 <IntToUnicode+0x18>
  }
}
 8009f48:	bf00      	nop
 8009f4a:	bf00      	nop
 8009f4c:	371c      	adds	r7, #28
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr
	...

08009f58 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b08a      	sub	sp, #40	; 0x28
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f60:	f107 0314 	add.w	r3, r7, #20
 8009f64:	2200      	movs	r2, #0
 8009f66:	601a      	str	r2, [r3, #0]
 8009f68:	605a      	str	r2, [r3, #4]
 8009f6a:	609a      	str	r2, [r3, #8]
 8009f6c:	60da      	str	r2, [r3, #12]
 8009f6e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f78:	d13a      	bne.n	8009ff0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	613b      	str	r3, [r7, #16]
 8009f7e:	4b1e      	ldr	r3, [pc, #120]	; (8009ff8 <HAL_PCD_MspInit+0xa0>)
 8009f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f82:	4a1d      	ldr	r2, [pc, #116]	; (8009ff8 <HAL_PCD_MspInit+0xa0>)
 8009f84:	f043 0301 	orr.w	r3, r3, #1
 8009f88:	6313      	str	r3, [r2, #48]	; 0x30
 8009f8a:	4b1b      	ldr	r3, [pc, #108]	; (8009ff8 <HAL_PCD_MspInit+0xa0>)
 8009f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f8e:	f003 0301 	and.w	r3, r3, #1
 8009f92:	613b      	str	r3, [r7, #16]
 8009f94:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009f96:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f9c:	2302      	movs	r3, #2
 8009f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009fa8:	230a      	movs	r3, #10
 8009faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009fac:	f107 0314 	add.w	r3, r7, #20
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	4812      	ldr	r0, [pc, #72]	; (8009ffc <HAL_PCD_MspInit+0xa4>)
 8009fb4:	f7f9 fad0 	bl	8003558 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009fb8:	4b0f      	ldr	r3, [pc, #60]	; (8009ff8 <HAL_PCD_MspInit+0xa0>)
 8009fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fbc:	4a0e      	ldr	r2, [pc, #56]	; (8009ff8 <HAL_PCD_MspInit+0xa0>)
 8009fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fc2:	6353      	str	r3, [r2, #52]	; 0x34
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	60fb      	str	r3, [r7, #12]
 8009fc8:	4b0b      	ldr	r3, [pc, #44]	; (8009ff8 <HAL_PCD_MspInit+0xa0>)
 8009fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fcc:	4a0a      	ldr	r2, [pc, #40]	; (8009ff8 <HAL_PCD_MspInit+0xa0>)
 8009fce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009fd2:	6453      	str	r3, [r2, #68]	; 0x44
 8009fd4:	4b08      	ldr	r3, [pc, #32]	; (8009ff8 <HAL_PCD_MspInit+0xa0>)
 8009fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fdc:	60fb      	str	r3, [r7, #12]
 8009fde:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	2100      	movs	r1, #0
 8009fe4:	2043      	movs	r0, #67	; 0x43
 8009fe6:	f7f9 fa64 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009fea:	2043      	movs	r0, #67	; 0x43
 8009fec:	f7f9 fa7d 	bl	80034ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009ff0:	bf00      	nop
 8009ff2:	3728      	adds	r7, #40	; 0x28
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}
 8009ff8:	40023800 	.word	0x40023800
 8009ffc:	40020000 	.word	0x40020000

0800a000 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b082      	sub	sp, #8
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a014:	4619      	mov	r1, r3
 800a016:	4610      	mov	r0, r2
 800a018:	f7fe fd82 	bl	8008b20 <USBD_LL_SetupStage>
}
 800a01c:	bf00      	nop
 800a01e:	3708      	adds	r7, #8
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	460b      	mov	r3, r1
 800a02e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a036:	78fa      	ldrb	r2, [r7, #3]
 800a038:	6879      	ldr	r1, [r7, #4]
 800a03a:	4613      	mov	r3, r2
 800a03c:	00db      	lsls	r3, r3, #3
 800a03e:	1a9b      	subs	r3, r3, r2
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	440b      	add	r3, r1
 800a044:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	78fb      	ldrb	r3, [r7, #3]
 800a04c:	4619      	mov	r1, r3
 800a04e:	f7fe fdbc 	bl	8008bca <USBD_LL_DataOutStage>
}
 800a052:	bf00      	nop
 800a054:	3708      	adds	r7, #8
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b082      	sub	sp, #8
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
 800a062:	460b      	mov	r3, r1
 800a064:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a06c:	78fa      	ldrb	r2, [r7, #3]
 800a06e:	6879      	ldr	r1, [r7, #4]
 800a070:	4613      	mov	r3, r2
 800a072:	00db      	lsls	r3, r3, #3
 800a074:	1a9b      	subs	r3, r3, r2
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	440b      	add	r3, r1
 800a07a:	3348      	adds	r3, #72	; 0x48
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	78fb      	ldrb	r3, [r7, #3]
 800a080:	4619      	mov	r1, r3
 800a082:	f7fe fe05 	bl	8008c90 <USBD_LL_DataInStage>
}
 800a086:	bf00      	nop
 800a088:	3708      	adds	r7, #8
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b082      	sub	sp, #8
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7fe ff19 	bl	8008ed4 <USBD_LL_SOF>
}
 800a0a2:	bf00      	nop
 800a0a4:	3708      	adds	r7, #8
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b084      	sub	sp, #16
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d102      	bne.n	800a0c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	73fb      	strb	r3, [r7, #15]
 800a0c2:	e008      	b.n	800a0d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d102      	bne.n	800a0d2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	73fb      	strb	r3, [r7, #15]
 800a0d0:	e001      	b.n	800a0d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a0d2:	f7f8 fb03 	bl	80026dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a0dc:	7bfa      	ldrb	r2, [r7, #15]
 800a0de:	4611      	mov	r1, r2
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f7fe feb9 	bl	8008e58 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7fe fe65 	bl	8008dbc <USBD_LL_Reset>
}
 800a0f2:	bf00      	nop
 800a0f4:	3710      	adds	r7, #16
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
	...

0800a0fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7fe feb4 	bl	8008e78 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	6812      	ldr	r2, [r2, #0]
 800a11e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a122:	f043 0301 	orr.w	r3, r3, #1
 800a126:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6a1b      	ldr	r3, [r3, #32]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d005      	beq.n	800a13c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a130:	4b04      	ldr	r3, [pc, #16]	; (800a144 <HAL_PCD_SuspendCallback+0x48>)
 800a132:	691b      	ldr	r3, [r3, #16]
 800a134:	4a03      	ldr	r2, [pc, #12]	; (800a144 <HAL_PCD_SuspendCallback+0x48>)
 800a136:	f043 0306 	orr.w	r3, r3, #6
 800a13a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a13c:	bf00      	nop
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	e000ed00 	.word	0xe000ed00

0800a148 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a156:	4618      	mov	r0, r3
 800a158:	f7fe fea4 	bl	8008ea4 <USBD_LL_Resume>
}
 800a15c:	bf00      	nop
 800a15e:	3708      	adds	r7, #8
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b082      	sub	sp, #8
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	460b      	mov	r3, r1
 800a16e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a176:	78fa      	ldrb	r2, [r7, #3]
 800a178:	4611      	mov	r1, r2
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7fe fef2 	bl	8008f64 <USBD_LL_IsoOUTIncomplete>
}
 800a180:	bf00      	nop
 800a182:	3708      	adds	r7, #8
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	460b      	mov	r3, r1
 800a192:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a19a:	78fa      	ldrb	r2, [r7, #3]
 800a19c:	4611      	mov	r1, r2
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7fe feba 	bl	8008f18 <USBD_LL_IsoINIncomplete>
}
 800a1a4:	bf00      	nop
 800a1a6:	3708      	adds	r7, #8
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7fe fef8 	bl	8008fb0 <USBD_LL_DevConnected>
}
 800a1c0:	bf00      	nop
 800a1c2:	3708      	adds	r7, #8
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7fe fef5 	bl	8008fc6 <USBD_LL_DevDisconnected>
}
 800a1dc:	bf00      	nop
 800a1de:	3708      	adds	r7, #8
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d13c      	bne.n	800a26e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a1f4:	4a20      	ldr	r2, [pc, #128]	; (800a278 <USBD_LL_Init+0x94>)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	4a1e      	ldr	r2, [pc, #120]	; (800a278 <USBD_LL_Init+0x94>)
 800a200:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a204:	4b1c      	ldr	r3, [pc, #112]	; (800a278 <USBD_LL_Init+0x94>)
 800a206:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a20a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a20c:	4b1a      	ldr	r3, [pc, #104]	; (800a278 <USBD_LL_Init+0x94>)
 800a20e:	2206      	movs	r2, #6
 800a210:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a212:	4b19      	ldr	r3, [pc, #100]	; (800a278 <USBD_LL_Init+0x94>)
 800a214:	2202      	movs	r2, #2
 800a216:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a218:	4b17      	ldr	r3, [pc, #92]	; (800a278 <USBD_LL_Init+0x94>)
 800a21a:	2200      	movs	r2, #0
 800a21c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a21e:	4b16      	ldr	r3, [pc, #88]	; (800a278 <USBD_LL_Init+0x94>)
 800a220:	2202      	movs	r2, #2
 800a222:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a224:	4b14      	ldr	r3, [pc, #80]	; (800a278 <USBD_LL_Init+0x94>)
 800a226:	2200      	movs	r2, #0
 800a228:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a22a:	4b13      	ldr	r3, [pc, #76]	; (800a278 <USBD_LL_Init+0x94>)
 800a22c:	2200      	movs	r2, #0
 800a22e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a230:	4b11      	ldr	r3, [pc, #68]	; (800a278 <USBD_LL_Init+0x94>)
 800a232:	2200      	movs	r2, #0
 800a234:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a236:	4b10      	ldr	r3, [pc, #64]	; (800a278 <USBD_LL_Init+0x94>)
 800a238:	2200      	movs	r2, #0
 800a23a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a23c:	4b0e      	ldr	r3, [pc, #56]	; (800a278 <USBD_LL_Init+0x94>)
 800a23e:	2200      	movs	r2, #0
 800a240:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a242:	480d      	ldr	r0, [pc, #52]	; (800a278 <USBD_LL_Init+0x94>)
 800a244:	f7f9 fb4d 	bl	80038e2 <HAL_PCD_Init>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d001      	beq.n	800a252 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a24e:	f7f8 fa45 	bl	80026dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a252:	2180      	movs	r1, #128	; 0x80
 800a254:	4808      	ldr	r0, [pc, #32]	; (800a278 <USBD_LL_Init+0x94>)
 800a256:	f7fa fcc6 	bl	8004be6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a25a:	2240      	movs	r2, #64	; 0x40
 800a25c:	2100      	movs	r1, #0
 800a25e:	4806      	ldr	r0, [pc, #24]	; (800a278 <USBD_LL_Init+0x94>)
 800a260:	f7fa fc7a 	bl	8004b58 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a264:	2280      	movs	r2, #128	; 0x80
 800a266:	2101      	movs	r1, #1
 800a268:	4803      	ldr	r0, [pc, #12]	; (800a278 <USBD_LL_Init+0x94>)
 800a26a:	f7fa fc75 	bl	8004b58 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	3708      	adds	r7, #8
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}
 800a278:	20000b40 	.word	0x20000b40

0800a27c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a284:	2300      	movs	r3, #0
 800a286:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a288:	2300      	movs	r3, #0
 800a28a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a292:	4618      	mov	r0, r3
 800a294:	f7f9 fc49 	bl	8003b2a <HAL_PCD_Start>
 800a298:	4603      	mov	r3, r0
 800a29a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a29c:	7bfb      	ldrb	r3, [r7, #15]
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f000 f97e 	bl	800a5a0 <USBD_Get_USB_Status>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b084      	sub	sp, #16
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
 800a2ba:	4608      	mov	r0, r1
 800a2bc:	4611      	mov	r1, r2
 800a2be:	461a      	mov	r2, r3
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	70fb      	strb	r3, [r7, #3]
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	70bb      	strb	r3, [r7, #2]
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a2da:	78bb      	ldrb	r3, [r7, #2]
 800a2dc:	883a      	ldrh	r2, [r7, #0]
 800a2de:	78f9      	ldrb	r1, [r7, #3]
 800a2e0:	f7fa f85a 	bl	8004398 <HAL_PCD_EP_Open>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2e8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f000 f958 	bl	800a5a0 <USBD_Get_USB_Status>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3710      	adds	r7, #16
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b084      	sub	sp, #16
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
 800a306:	460b      	mov	r3, r1
 800a308:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a30a:	2300      	movs	r3, #0
 800a30c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a30e:	2300      	movs	r3, #0
 800a310:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a318:	78fa      	ldrb	r2, [r7, #3]
 800a31a:	4611      	mov	r1, r2
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7fa f8a3 	bl	8004468 <HAL_PCD_EP_Close>
 800a322:	4603      	mov	r3, r0
 800a324:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a326:	7bfb      	ldrb	r3, [r7, #15]
 800a328:	4618      	mov	r0, r3
 800a32a:	f000 f939 	bl	800a5a0 <USBD_Get_USB_Status>
 800a32e:	4603      	mov	r3, r0
 800a330:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a332:	7bbb      	ldrb	r3, [r7, #14]
}
 800a334:	4618      	mov	r0, r3
 800a336:	3710      	adds	r7, #16
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	460b      	mov	r3, r1
 800a346:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a348:	2300      	movs	r3, #0
 800a34a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a34c:	2300      	movs	r3, #0
 800a34e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a356:	78fa      	ldrb	r2, [r7, #3]
 800a358:	4611      	mov	r1, r2
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7fa f963 	bl	8004626 <HAL_PCD_EP_SetStall>
 800a360:	4603      	mov	r3, r0
 800a362:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a364:	7bfb      	ldrb	r3, [r7, #15]
 800a366:	4618      	mov	r0, r3
 800a368:	f000 f91a 	bl	800a5a0 <USBD_Get_USB_Status>
 800a36c:	4603      	mov	r3, r0
 800a36e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a370:	7bbb      	ldrb	r3, [r7, #14]
}
 800a372:	4618      	mov	r0, r3
 800a374:	3710      	adds	r7, #16
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b084      	sub	sp, #16
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	460b      	mov	r3, r1
 800a384:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a386:	2300      	movs	r3, #0
 800a388:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a38a:	2300      	movs	r3, #0
 800a38c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a394:	78fa      	ldrb	r2, [r7, #3]
 800a396:	4611      	mov	r1, r2
 800a398:	4618      	mov	r0, r3
 800a39a:	f7fa f9a8 	bl	80046ee <HAL_PCD_EP_ClrStall>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3a2:	7bfb      	ldrb	r3, [r7, #15]
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f000 f8fb 	bl	800a5a0 <USBD_Get_USB_Status>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3710      	adds	r7, #16
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b085      	sub	sp, #20
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a3ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a3cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	da0b      	bge.n	800a3ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a3d4:	78fb      	ldrb	r3, [r7, #3]
 800a3d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3da:	68f9      	ldr	r1, [r7, #12]
 800a3dc:	4613      	mov	r3, r2
 800a3de:	00db      	lsls	r3, r3, #3
 800a3e0:	1a9b      	subs	r3, r3, r2
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	440b      	add	r3, r1
 800a3e6:	333e      	adds	r3, #62	; 0x3e
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	e00b      	b.n	800a404 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a3ec:	78fb      	ldrb	r3, [r7, #3]
 800a3ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3f2:	68f9      	ldr	r1, [r7, #12]
 800a3f4:	4613      	mov	r3, r2
 800a3f6:	00db      	lsls	r3, r3, #3
 800a3f8:	1a9b      	subs	r3, r3, r2
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	440b      	add	r3, r1
 800a3fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a402:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a404:	4618      	mov	r0, r3
 800a406:	3714      	adds	r7, #20
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	460b      	mov	r3, r1
 800a41a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a41c:	2300      	movs	r3, #0
 800a41e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a420:	2300      	movs	r3, #0
 800a422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a42a:	78fa      	ldrb	r2, [r7, #3]
 800a42c:	4611      	mov	r1, r2
 800a42e:	4618      	mov	r0, r3
 800a430:	f7f9 ff8d 	bl	800434e <HAL_PCD_SetAddress>
 800a434:	4603      	mov	r3, r0
 800a436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a438:	7bfb      	ldrb	r3, [r7, #15]
 800a43a:	4618      	mov	r0, r3
 800a43c:	f000 f8b0 	bl	800a5a0 <USBD_Get_USB_Status>
 800a440:	4603      	mov	r3, r0
 800a442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a444:	7bbb      	ldrb	r3, [r7, #14]
}
 800a446:	4618      	mov	r0, r3
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b086      	sub	sp, #24
 800a452:	af00      	add	r7, sp, #0
 800a454:	60f8      	str	r0, [r7, #12]
 800a456:	607a      	str	r2, [r7, #4]
 800a458:	603b      	str	r3, [r7, #0]
 800a45a:	460b      	mov	r3, r1
 800a45c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a45e:	2300      	movs	r3, #0
 800a460:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a462:	2300      	movs	r3, #0
 800a464:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a46c:	7af9      	ldrb	r1, [r7, #11]
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	f7fa f88e 	bl	8004592 <HAL_PCD_EP_Transmit>
 800a476:	4603      	mov	r3, r0
 800a478:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a47a:	7dfb      	ldrb	r3, [r7, #23]
 800a47c:	4618      	mov	r0, r3
 800a47e:	f000 f88f 	bl	800a5a0 <USBD_Get_USB_Status>
 800a482:	4603      	mov	r3, r0
 800a484:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a486:	7dbb      	ldrb	r3, [r7, #22]
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3718      	adds	r7, #24
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b086      	sub	sp, #24
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	607a      	str	r2, [r7, #4]
 800a49a:	603b      	str	r3, [r7, #0]
 800a49c:	460b      	mov	r3, r1
 800a49e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a4ae:	7af9      	ldrb	r1, [r7, #11]
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	f7fa f822 	bl	80044fc <HAL_PCD_EP_Receive>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4bc:	7dfb      	ldrb	r3, [r7, #23]
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f000 f86e 	bl	800a5a0 <USBD_Get_USB_Status>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a4c8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3718      	adds	r7, #24
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
	...

0800a4d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	460b      	mov	r3, r1
 800a4de:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a4e0:	78fb      	ldrb	r3, [r7, #3]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d002      	beq.n	800a4ec <HAL_PCDEx_LPM_Callback+0x18>
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d01f      	beq.n	800a52a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a4ea:	e03b      	b.n	800a564 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6a1b      	ldr	r3, [r3, #32]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d007      	beq.n	800a504 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800a4f4:	f7f7 ff1e 	bl	8002334 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4f8:	4b1c      	ldr	r3, [pc, #112]	; (800a56c <HAL_PCDEx_LPM_Callback+0x98>)
 800a4fa:	691b      	ldr	r3, [r3, #16]
 800a4fc:	4a1b      	ldr	r2, [pc, #108]	; (800a56c <HAL_PCDEx_LPM_Callback+0x98>)
 800a4fe:	f023 0306 	bic.w	r3, r3, #6
 800a502:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	6812      	ldr	r2, [r2, #0]
 800a512:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a516:	f023 0301 	bic.w	r3, r3, #1
 800a51a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a522:	4618      	mov	r0, r3
 800a524:	f7fe fcbe 	bl	8008ea4 <USBD_LL_Resume>
    break;
 800a528:	e01c      	b.n	800a564 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	6812      	ldr	r2, [r2, #0]
 800a538:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a53c:	f043 0301 	orr.w	r3, r3, #1
 800a540:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a548:	4618      	mov	r0, r3
 800a54a:	f7fe fc95 	bl	8008e78 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a1b      	ldr	r3, [r3, #32]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d005      	beq.n	800a562 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a556:	4b05      	ldr	r3, [pc, #20]	; (800a56c <HAL_PCDEx_LPM_Callback+0x98>)
 800a558:	691b      	ldr	r3, [r3, #16]
 800a55a:	4a04      	ldr	r2, [pc, #16]	; (800a56c <HAL_PCDEx_LPM_Callback+0x98>)
 800a55c:	f043 0306 	orr.w	r3, r3, #6
 800a560:	6113      	str	r3, [r2, #16]
    break;
 800a562:	bf00      	nop
}
 800a564:	bf00      	nop
 800a566:	3708      	adds	r7, #8
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	e000ed00 	.word	0xe000ed00

0800a570 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a578:	4b03      	ldr	r3, [pc, #12]	; (800a588 <USBD_static_malloc+0x18>)
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	370c      	adds	r7, #12
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	20000650 	.word	0x20000650

0800a58c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]

}
 800a594:	bf00      	nop
 800a596:	370c      	adds	r7, #12
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b085      	sub	sp, #20
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a5ae:	79fb      	ldrb	r3, [r7, #7]
 800a5b0:	2b03      	cmp	r3, #3
 800a5b2:	d817      	bhi.n	800a5e4 <USBD_Get_USB_Status+0x44>
 800a5b4:	a201      	add	r2, pc, #4	; (adr r2, 800a5bc <USBD_Get_USB_Status+0x1c>)
 800a5b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ba:	bf00      	nop
 800a5bc:	0800a5cd 	.word	0x0800a5cd
 800a5c0:	0800a5d3 	.word	0x0800a5d3
 800a5c4:	0800a5d9 	.word	0x0800a5d9
 800a5c8:	0800a5df 	.word	0x0800a5df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a5d0:	e00b      	b.n	800a5ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a5d2:	2303      	movs	r3, #3
 800a5d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a5d6:	e008      	b.n	800a5ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	73fb      	strb	r3, [r7, #15]
    break;
 800a5dc:	e005      	b.n	800a5ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	73fb      	strb	r3, [r7, #15]
    break;
 800a5e2:	e002      	b.n	800a5ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a5e4:	2303      	movs	r3, #3
 800a5e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a5e8:	bf00      	nop
  }
  return usb_status;
 800a5ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3714      	adds	r7, #20
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	4608      	mov	r0, r1
 800a602:	4611      	mov	r1, r2
 800a604:	461a      	mov	r2, r3
 800a606:	4603      	mov	r3, r0
 800a608:	70fb      	strb	r3, [r7, #3]
 800a60a:	460b      	mov	r3, r1
 800a60c:	70bb      	strb	r3, [r7, #2]
 800a60e:	4613      	mov	r3, r2
 800a610:	707b      	strb	r3, [r7, #1]
                return 0;
 800a612:	2300      	movs	r3, #0
        }
 800a614:	4618      	mov	r0, r3
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800a620:	b480      	push	{r7}
 800a622:	b083      	sub	sp, #12
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	4608      	mov	r0, r1
 800a62a:	4611      	mov	r1, r2
 800a62c:	461a      	mov	r2, r3
 800a62e:	4603      	mov	r3, r0
 800a630:	70fb      	strb	r3, [r7, #3]
 800a632:	460b      	mov	r3, r1
 800a634:	70bb      	strb	r3, [r7, #2]
 800a636:	4613      	mov	r3, r2
 800a638:	707b      	strb	r3, [r7, #1]
                return 0;
 800a63a:	2300      	movs	r3, #0
        }
 800a63c:	4618      	mov	r0, r3
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
                return 0;
 800a650:	2300      	movs	r3, #0
        }
 800a652:	4618      	mov	r0, r3
 800a654:	370c      	adds	r7, #12
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr

0800a65e <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 800a65e:	b480      	push	{r7}
 800a660:	b083      	sub	sp, #12
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
                return 0;
 800a666:	2300      	movs	r3, #0
        }
 800a668:	4618      	mov	r0, r3
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
                return 0;
 800a67c:	2300      	movs	r3, #0
        }
 800a67e:	4618      	mov	r0, r3
 800a680:	370c      	adds	r7, #12
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr

0800a68a <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 800a68a:	b480      	push	{r7}
 800a68c:	b083      	sub	sp, #12
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
 800a692:	460b      	mov	r3, r1
 800a694:	70fb      	strb	r3, [r7, #3]
                return;
 800a696:	bf00      	nop
        } // Note used for hubs only!
 800a698:	370c      	adds	r7, #12
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr

0800a6a2 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 800a6a2:	b480      	push	{r7}
 800a6a4:	b083      	sub	sp, #12
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	807b      	strh	r3, [r7, #2]
 800a6ae:	4613      	mov	r3, r2
 800a6b0:	803b      	strh	r3, [r7, #0]
                return false;
 800a6b2:	2300      	movs	r3, #0
        }
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	370c      	adds	r7, #12
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	70fb      	strb	r3, [r7, #3]
                return false;
 800a6cc:	2300      	movs	r3, #0
        }
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	370c      	adds	r7, #12
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr

0800a6da <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 800a6da:	b480      	push	{r7}
 800a6dc:	b083      	sub	sp, #12
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	70fb      	strb	r3, [r7, #3]
                return true;
 800a6e6:	2301      	movs	r3, #1
        }
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
                return (AddressPool&)addrPool;
 800a6fc:	687b      	ldr	r3, [r7, #4]
        };
 800a6fe:	4618      	mov	r0, r3
 800a700:	370c      	adds	r7, #12
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr

0800a70a <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 800a70a:	b480      	push	{r7}
 800a70c:	b085      	sub	sp, #20
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
 800a712:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800a714:	2300      	movs	r3, #0
 800a716:	73fb      	strb	r3, [r7, #15]
 800a718:	7bfb      	ldrb	r3, [r7, #15]
 800a71a:	2b0f      	cmp	r3, #15
 800a71c:	d812      	bhi.n	800a744 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3a>
                        if(!devConfig[i]) {
 800a71e:	7bfa      	ldrb	r2, [r7, #15]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	321e      	adds	r2, #30
 800a724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d107      	bne.n	800a73c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x32>
                                devConfig[i] = pdev;
 800a72c:	7bfa      	ldrb	r2, [r7, #15]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	321e      	adds	r2, #30
 800a732:	6839      	ldr	r1, [r7, #0]
 800a734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                return 0;
 800a738:	2300      	movs	r3, #0
 800a73a:	e004      	b.n	800a746 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3c>
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800a73c:	7bfb      	ldrb	r3, [r7, #15]
 800a73e:	3301      	adds	r3, #1
 800a740:	73fb      	strb	r3, [r7, #15]
 800a742:	e7e9      	b.n	800a718 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0xe>
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 800a744:	23d3      	movs	r3, #211	; 0xd3
        };
 800a746:	4618      	mov	r0, r3
 800a748:	3714      	adds	r7, #20
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr

0800a752 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 800a752:	b480      	push	{r7}
 800a754:	b083      	sub	sp, #12
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2200      	movs	r2, #0
 800a75e:	701a      	strb	r2, [r3, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	705a      	strb	r2, [r3, #1]
 800a766:	2200      	movs	r2, #0
 800a768:	709a      	strb	r2, [r3, #2]
 800a76a:	2200      	movs	r2, #0
 800a76c:	70da      	strb	r2, [r3, #3]
 800a76e:	2200      	movs	r2, #0
 800a770:	711a      	strb	r2, [r3, #4]
        };
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	4618      	mov	r0, r3
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	601a      	str	r2, [r3, #0]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	711a      	strb	r2, [r3, #4]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2200      	movs	r2, #0
 800a798:	715a      	strb	r2, [r3, #5]
        };
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4618      	mov	r0, r3
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	601a      	str	r2, [r3, #0]
                countDown = valueSize = pbuf->valueSize;
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	781a      	ldrb	r2, [r3, #0]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	715a      	strb	r2, [r3, #5]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	795a      	ldrb	r2, [r3, #5]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	711a      	strb	r2, [r3, #4]
        };
 800a7cc:	bf00      	nop
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	601a      	str	r2, [r3, #0]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	711a      	strb	r2, [r3, #4]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	80da      	strh	r2, [r3, #6]
        };
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	601a      	str	r2, [r3, #0]
                countDown = 0;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	80da      	strh	r2, [r3, #6]
        };
 800a81a:	bf00      	nop
 800a81c:	370c      	adds	r7, #12
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr

0800a826 <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 800a826:	b480      	push	{r7}
 800a828:	b085      	sub	sp, #20
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	60f8      	str	r0, [r7, #12]
 800a82e:	60b9      	str	r1, [r7, #8]
 800a830:	607a      	str	r2, [r7, #4]
 800a832:	807b      	strh	r3, [r7, #2]
                switch(nStage) {
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	791b      	ldrb	r3, [r3, #4]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d002      	beq.n	800a842 <_ZN11ByteSkipper4SkipEPPhPtt+0x1c>
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d009      	beq.n	800a854 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>
 800a840:	e029      	b.n	800a896 <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                        case 0:
                                countDown = bytes_to_skip;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	887a      	ldrh	r2, [r7, #2]
 800a846:	80da      	strh	r2, [r3, #6]
                                nStage++;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	791b      	ldrb	r3, [r3, #4]
 800a84c:	3301      	adds	r3, #1
 800a84e:	b2da      	uxtb	r2, r3
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	711a      	strb	r2, [r3, #4]
                                // fall through
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	88db      	ldrh	r3, [r3, #6]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d015      	beq.n	800a888 <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	881b      	ldrh	r3, [r3, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d011      	beq.n	800a888 <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	88db      	ldrh	r3, [r3, #6]
 800a868:	3b01      	subs	r3, #1
 800a86a:	b29a      	uxth	r2, r3
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	80da      	strh	r2, [r3, #6]
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	1c5a      	adds	r2, r3, #1
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	601a      	str	r2, [r3, #0]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	881b      	ldrh	r3, [r3, #0]
 800a87e:	3b01      	subs	r3, #1
 800a880:	b29a      	uxth	r2, r3
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	801a      	strh	r2, [r3, #0]
 800a886:	e7e5      	b.n	800a854 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>

                                if(!countDown)
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	88db      	ldrh	r3, [r3, #6]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d102      	bne.n	800a896 <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                                        nStage = 0;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2200      	movs	r2, #0
 800a894:	711a      	strb	r2, [r3, #4]
                };
                return (!countDown);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	88db      	ldrh	r3, [r3, #6]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	bf0c      	ite	eq
 800a89e:	2301      	moveq	r3, #1
 800a8a0:	2300      	movne	r3, #0
 800a8a2:	b2db      	uxtb	r3, r3
        };
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3714      	adds	r7, #20
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	4608      	mov	r0, r1
 800a8ba:	4611      	mov	r1, r2
 800a8bc:	461a      	mov	r2, r3
 800a8be:	4603      	mov	r3, r0
 800a8c0:	70fb      	strb	r3, [r7, #3]
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	70bb      	strb	r3, [r7, #2]
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	707b      	strb	r3, [r7, #1]
        };
 800a8ca:	bf00      	nop
 800a8cc:	370c      	adds	r7, #12
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr
	...

0800a8d8 <_ZN15USBDeviceConfigC1Ev>:
class USBDeviceConfig {
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	4a04      	ldr	r2, [pc, #16]	; (800a8f4 <_ZN15USBDeviceConfigC1Ev+0x1c>)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	601a      	str	r2, [r3, #0]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr
 800a8f4:	08010fc4 	.word	0x08010fc4

0800a8f8 <_ZN17UsbConfigXtracterC1Ev>:
class UsbConfigXtracter {
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	4a04      	ldr	r2, [pc, #16]	; (800a914 <_ZN17UsbConfigXtracterC1Ev+0x1c>)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	601a      	str	r2, [r3, #0]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4618      	mov	r0, r3
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	08010fac 	.word	0x08010fac

0800a918 <_ZN3BTD10GetAddressEv>:
        virtual uint8_t GetAddress() {
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
                return bAddress;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
        };
 800a926:	4618      	mov	r0, r3
 800a928:	370c      	adds	r7, #12
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr

0800a932 <_ZN3BTD7isReadyEv>:
        virtual bool isReady() {
 800a932:	b480      	push	{r7}
 800a934:	b083      	sub	sp, #12
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
                return bPollEnable;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
        };
 800a940:	4618      	mov	r0, r3
 800a942:	370c      	adds	r7, #12
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <_ZN3BTD10DEVCLASSOKEh>:
        virtual bool DEVCLASSOK(uint8_t klass) {
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	460b      	mov	r3, r1
 800a956:	70fb      	strb	r3, [r7, #3]
                return (klass == USB_CLASS_WIRELESS_CTRL);
 800a958:	78fb      	ldrb	r3, [r7, #3]
 800a95a:	2be0      	cmp	r3, #224	; 0xe0
 800a95c:	bf0c      	ite	eq
 800a95e:	2301      	moveq	r3, #1
 800a960:	2300      	movne	r3, #0
 800a962:	b2db      	uxtb	r3, r3
        };
 800a964:	4618      	mov	r0, r3
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <_ZN3BTD8VIDPIDOKEtt>:
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	460b      	mov	r3, r1
 800a97a:	807b      	strh	r3, [r7, #2]
 800a97c:	4613      	mov	r3, r2
 800a97e:	803b      	strh	r3, [r7, #0]
                if((vid == IOGEAR_GBU521_VID && pid == IOGEAR_GBU521_PID) || (vid == BELKIN_F8T065BF_VID && pid == BELKIN_F8T065BF_PID))
 800a980:	887b      	ldrh	r3, [r7, #2]
 800a982:	f640 225c 	movw	r2, #2652	; 0xa5c
 800a986:	4293      	cmp	r3, r2
 800a988:	d104      	bne.n	800a994 <_ZN3BTD8VIDPIDOKEtt+0x24>
 800a98a:	883b      	ldrh	r3, [r7, #0]
 800a98c:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800a990:	4293      	cmp	r3, r2
 800a992:	d009      	beq.n	800a9a8 <_ZN3BTD8VIDPIDOKEtt+0x38>
 800a994:	887b      	ldrh	r3, [r7, #2]
 800a996:	f240 520d 	movw	r2, #1293	; 0x50d
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d106      	bne.n	800a9ac <_ZN3BTD8VIDPIDOKEtt+0x3c>
 800a99e:	883b      	ldrh	r3, [r7, #0]
 800a9a0:	f240 625a 	movw	r2, #1626	; 0x65a
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d101      	bne.n	800a9ac <_ZN3BTD8VIDPIDOKEtt+0x3c>
                        return true;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	e02d      	b.n	800aa08 <_ZN3BTD8VIDPIDOKEtt+0x98>
                if(my_bdaddr[0] != 0x00 || my_bdaddr[1] != 0x00 || my_bdaddr[2] != 0x00 || my_bdaddr[3] != 0x00 || my_bdaddr[4] != 0x00 || my_bdaddr[5] != 0x00) { // Check if Bluetooth address is set
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	7d1b      	ldrb	r3, [r3, #20]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d113      	bne.n	800a9dc <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	7d5b      	ldrb	r3, [r3, #21]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10f      	bne.n	800a9dc <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	7d9b      	ldrb	r3, [r3, #22]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d10b      	bne.n	800a9dc <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	7ddb      	ldrb	r3, [r3, #23]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d107      	bne.n	800a9dc <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	7e1b      	ldrb	r3, [r3, #24]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d103      	bne.n	800a9dc <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	7e5b      	ldrb	r3, [r3, #25]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d014      	beq.n	800aa06 <_ZN3BTD8VIDPIDOKEtt+0x96>
                        if(vid == PS3_VID && (pid == PS3_PID || pid == PS3NAVIGATION_PID || pid == PS3MOVE_PID))
 800a9dc:	887b      	ldrh	r3, [r7, #2]
 800a9de:	f240 524c 	movw	r2, #1356	; 0x54c
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d10f      	bne.n	800aa06 <_ZN3BTD8VIDPIDOKEtt+0x96>
 800a9e6:	883b      	ldrh	r3, [r7, #0]
 800a9e8:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800a9ec:	d009      	beq.n	800aa02 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800a9ee:	883b      	ldrh	r3, [r7, #0]
 800a9f0:	f240 422f 	movw	r2, #1071	; 0x42f
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d004      	beq.n	800aa02 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800a9f8:	883b      	ldrh	r3, [r7, #0]
 800a9fa:	f240 32d5 	movw	r2, #981	; 0x3d5
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d101      	bne.n	800aa06 <_ZN3BTD8VIDPIDOKEtt+0x96>
                                return true;
 800aa02:	2301      	movs	r3, #1
 800aa04:	e000      	b.n	800aa08 <_ZN3BTD8VIDPIDOKEtt+0x98>
                return false;
 800aa06:	2300      	movs	r3, #0
        };
 800aa08:	4618      	mov	r0, r3
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <_ZN3BTDC1EP3USB>:
const uint8_t BTD::BTD_CONTROL_PIPE = 0;
const uint8_t BTD::BTD_EVENT_PIPE = 1;
const uint8_t BTD::BTD_DATAIN_PIPE = 2;
const uint8_t BTD::BTD_DATAOUT_PIPE = 3;

BTD::BTD(USB *p) :
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
bAddress(0), // Device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
simple_pairing_supported(false),
bPollEnable(false) // Don't start polling before dongle is connected
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7ff ff59 	bl	800a8d8 <_ZN15USBDeviceConfigC1Ev>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	3304      	adds	r3, #4
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7ff ff64 	bl	800a8f8 <_ZN17UsbConfigXtracterC1Ev>
 800aa30:	4a2b      	ldr	r2, [pc, #172]	; (800aae0 <_ZN3BTDC1EP3USB+0xcc>)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	601a      	str	r2, [r3, #0]
 800aa36:	4a2b      	ldr	r2, [pc, #172]	; (800aae4 <_ZN3BTDC1EP3USB+0xd0>)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	605a      	str	r2, [r3, #4]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	683a      	ldr	r2, [r7, #0]
 800aa68:	64da      	str	r2, [r3, #76]	; 0x4c
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2201      	movs	r2, #1
 800aa76:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	661a      	str	r2, [r3, #96]	; 0x60
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
{
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800aa98:	2300      	movs	r3, #0
 800aa9a:	73fb      	strb	r3, [r7, #15]
 800aa9c:	7bfb      	ldrb	r3, [r7, #15]
 800aa9e:	2b03      	cmp	r3, #3
 800aaa0:	d80a      	bhi.n	800aab8 <_ZN3BTDC1EP3USB+0xa4>
                btService[i] = NULL;
 800aaa2:	7bfb      	ldrb	r3, [r7, #15]
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	3318      	adds	r3, #24
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	4413      	add	r3, r2
 800aaac:	2200      	movs	r2, #0
 800aaae:	605a      	str	r2, [r3, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800aab0:	7bfb      	ldrb	r3, [r7, #15]
 800aab2:	3301      	adds	r3, #1
 800aab4:	73fb      	strb	r3, [r7, #15]
 800aab6:	e7f1      	b.n	800aa9c <_ZN3BTDC1EP3USB+0x88>

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 fa83 	bl	800afc4 <_ZN3BTD10InitializeEv>

        if(pUsb) // Register in USB subsystem
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d006      	beq.n	800aad4 <_ZN3BTDC1EP3USB+0xc0>
                pUsb->RegisterDeviceClass(this); // Set devConfig[] entry
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	4611      	mov	r1, r2
 800aace:	4618      	mov	r0, r3
 800aad0:	f7ff fe1b 	bl	800a70a <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4618      	mov	r0, r3
 800aad8:	3710      	adds	r7, #16
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	08010f6c 	.word	0x08010f6c
 800aae4:	08010fa0 	.word	0x08010fa0

0800aae8 <_ZN3BTD15ConfigureDeviceEhhb>:

uint8_t BTD::ConfigureDevice(uint8_t parent, uint8_t port, bool lowspeed) {
 800aae8:	b590      	push	{r4, r7, lr}
 800aaea:	b08f      	sub	sp, #60	; 0x3c
 800aaec:	af02      	add	r7, sp, #8
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	4608      	mov	r0, r1
 800aaf2:	4611      	mov	r1, r2
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	70fb      	strb	r3, [r7, #3]
 800aafa:	460b      	mov	r3, r1
 800aafc:	70bb      	strb	r3, [r7, #2]
 800aafe:	4613      	mov	r3, r2
 800ab00:	707b      	strb	r3, [r7, #1]
        const uint8_t constBufSize = sizeof (USB_DEVICE_DESCRIPTOR);
 800ab02:	2312      	movs	r3, #18
 800ab04:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        uint8_t buf[constBufSize];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 800ab08:	f107 0308 	add.w	r3, r7, #8
 800ab0c:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t rcode;
        UsbDevice *p = NULL;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	627b      	str	r3, [r7, #36]	; 0x24
        EpInfo *oldep_ptr = NULL;
 800ab12:	2300      	movs	r3, #0
 800ab14:	623b      	str	r3, [r7, #32]

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 fa54 	bl	800afc4 <_ZN3BTD10InitializeEv>

        AddressPool &addrPool = pUsb->GetAddressPool(); // Get memory address of USB device address pool
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7ff fde7 	bl	800a6f4 <_ZN3USB14GetAddressPoolEv>
 800ab26:	61f8      	str	r0, [r7, #28]
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD ConfigureDevice"), 0x80);
#endif

        if(bAddress) { // Check if address has already been assigned to an instance
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d001      	beq.n	800ab36 <_ZN3BTD15ConfigureDeviceEhhb+0x4e>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 800ab32:	23d9      	movs	r3, #217	; 0xd9
 800ab34:	e087      	b.n	800ac46 <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        p = addrPool.GetUsbDevicePtr(0); // Get pointer to pseudo device with address 0 assigned
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2100      	movs	r1, #0
 800ab3e:	69f8      	ldr	r0, [r7, #28]
 800ab40:	4798      	blx	r3
 800ab42:	6278      	str	r0, [r7, #36]	; 0x24
        if(!p) {
 800ab44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d101      	bne.n	800ab4e <_ZN3BTD15ConfigureDeviceEhhb+0x66>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800ab4a:	23d6      	movs	r3, #214	; 0xd6
 800ab4c:	e07b      	b.n	800ac46 <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if(!p->epinfo) {
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d101      	bne.n	800ab5a <_ZN3BTD15ConfigureDeviceEhhb+0x72>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 800ab56:	23d7      	movs	r3, #215	; 0xd7
 800ab58:	e075      	b.n	800ac46 <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        oldep_ptr = p->epinfo; // Save old pointer to EP_RECORD of address 0
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	623b      	str	r3, [r7, #32]
        p->epinfo = epInfo; // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f103 0251 	add.w	r2, r3, #81	; 0x51
 800ab66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab68:	601a      	str	r2, [r3, #0]
        p->lowspeed = lowspeed;
 800ab6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6c:	787a      	ldrb	r2, [r7, #1]
 800ab6e:	719a      	strb	r2, [r3, #6]
        rcode = pUsb->getDevDescr(0, 0, constBufSize, (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ab74:	f107 0308 	add.w	r3, r7, #8
 800ab78:	9300      	str	r3, [sp, #0]
 800ab7a:	2312      	movs	r3, #18
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	2100      	movs	r1, #0
 800ab80:	f005 fa43 	bl	801000a <_ZN3USB11getDevDescrEhhtPh>
 800ab84:	4603      	mov	r3, r0
 800ab86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        p->epinfo = oldep_ptr; // Restore p->epinfo
 800ab8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8c:	6a3a      	ldr	r2, [r7, #32]
 800ab8e:	601a      	str	r2, [r3, #0]

        if(rcode)
 800ab90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d146      	bne.n	800ac26 <_ZN3BTD15ConfigureDeviceEhhb+0x13e>
                goto FailGetDevDescr;

        bAddress = addrPool.AllocAddress(parent, false, port); // Allocate new address according to device class
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	3304      	adds	r3, #4
 800ab9e:	681c      	ldr	r4, [r3, #0]
 800aba0:	78bb      	ldrb	r3, [r7, #2]
 800aba2:	78f9      	ldrb	r1, [r7, #3]
 800aba4:	2200      	movs	r2, #0
 800aba6:	69f8      	ldr	r0, [r7, #28]
 800aba8:	47a0      	blx	r4
 800abaa:	4603      	mov	r3, r0
 800abac:	461a      	mov	r2, r3
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(!bAddress) {
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d101      	bne.n	800abc2 <_ZN3BTD15ConfigureDeviceEhhb+0xda>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nOut of address space"), 0x80);
#endif
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800abbe:	23d4      	movs	r3, #212	; 0xd4
 800abc0:	e041      	b.n	800ac46 <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if (udd->bDeviceClass == 0x09) // Some dongles have an USB hub inside
 800abc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc4:	791b      	ldrb	r3, [r3, #4]
 800abc6:	2b09      	cmp	r3, #9
 800abc8:	d017      	beq.n	800abfa <_ZN3BTD15ConfigureDeviceEhhb+0x112>
                goto FailHub;

        epInfo[0].maxPktSize = udd->bMaxPacketSize0; // Extract Max Packet Size from device descriptor
 800abca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abcc:	79da      	ldrb	r2, [r3, #7]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        epInfo[1].epAddr = udd->bNumConfigurations; // Steal and abuse from epInfo structure to save memory
 800abd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd6:	7c5a      	ldrb	r2, [r3, #17]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        VID = udd->idVendor;
 800abde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe0:	891b      	ldrh	r3, [r3, #8]
 800abe2:	b29a      	uxth	r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        PID = udd->idProduct;
 800abea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abec:	895b      	ldrh	r3, [r3, #10]
 800abee:	b29a      	uxth	r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

        return USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET;
 800abf6:	23e0      	movs	r3, #224	; 0xe0
 800abf8:	e025      	b.n	800ac46 <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailHub;
 800abfa:	bf00      	nop

FailHub:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nPlease create a hub instance in your code: \"USBHub Hub1(&Usb);\""), 0x80);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ac06:	2300      	movs	r3, #0
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f005 fa9b 	bl	8010144 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800ac0e:	23d1      	movs	r3, #209	; 0xd1
 800ac10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	3308      	adds	r3, #8
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	4798      	blx	r3
        return rcode;
 800ac20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac24:	e00f      	b.n	800ac46 <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailGetDevDescr;
 800ac26:	bf00      	nop

FailGetDevDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetDevDescr(rcode);
#endif
        if(rcode != hrJERR)
 800ac28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac2c:	2b0d      	cmp	r3, #13
 800ac2e:	d002      	beq.n	800ac36 <_ZN3BTD15ConfigureDeviceEhhb+0x14e>
                rcode = USB_ERROR_FailGetDevDescr;
 800ac30:	23e1      	movs	r3, #225	; 0xe1
 800ac32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	3308      	adds	r3, #8
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	4798      	blx	r3
        return rcode;
 800ac42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
};
 800ac46:	4618      	mov	r0, r3
 800ac48:	3734      	adds	r7, #52	; 0x34
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd90      	pop	{r4, r7, pc}
	...

0800ac50 <_ZN3BTD4InitEhhb>:

uint8_t BTD::Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed) {
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b096      	sub	sp, #88	; 0x58
 800ac54:	af02      	add	r7, sp, #8
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	4608      	mov	r0, r1
 800ac5a:	4611      	mov	r1, r2
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	4603      	mov	r3, r0
 800ac60:	70fb      	strb	r3, [r7, #3]
 800ac62:	460b      	mov	r3, r1
 800ac64:	70bb      	strb	r3, [r7, #2]
 800ac66:	4613      	mov	r3, r2
 800ac68:	707b      	strb	r3, [r7, #1]
        uint8_t rcode;
        uint8_t num_of_conf = epInfo[1].epAddr; // Number of configurations
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800ac70:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        epInfo[1].epAddr = 0;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        AddressPool &addrPool = pUsb->GetAddressPool();
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7ff fd37 	bl	800a6f4 <_ZN3USB14GetAddressPoolEv>
 800ac86:	64b8      	str	r0, [r7, #72]	; 0x48
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD Init"), 0x80);
#endif
        UsbDevice *p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800ac88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800ac94:	4611      	mov	r1, r2
 800ac96:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ac98:	4798      	blx	r3
 800ac9a:	6478      	str	r0, [r7, #68]	; 0x44

        if(!p) {
 800ac9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d101      	bne.n	800aca6 <_ZN3BTD4InitEhhb+0x56>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800aca2:	23d6      	movs	r3, #214	; 0xd6
 800aca4:	e189      	b.n	800afba <_ZN3BTD4InitEhhb+0x36a>
        }

        delay(300); // Assign new address to the device
 800aca6:	48b8      	ldr	r0, [pc, #736]	; (800af88 <_ZN3BTD4InitEhhb+0x338>)
 800aca8:	f7f8 f892 	bl	8002dd0 <HAL_Delay>

        rcode = pUsb->setAddr(0, 0, bAddress); // Assign new address to the device
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800acb6:	2200      	movs	r2, #0
 800acb8:	2100      	movs	r1, #0
 800acba:	f005 fa43 	bl	8010144 <_ZN3USB7setAddrEhhh>
 800acbe:	4603      	mov	r3, r0
 800acc0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode) {
 800acc4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d003      	beq.n	800acd4 <_ZN3BTD4InitEhhb+0x84>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                p->lowspeed = false;
 800accc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acce:	2200      	movs	r2, #0
 800acd0:	719a      	strb	r2, [r3, #6]
                goto Fail;
 800acd2:	e16a      	b.n	800afaa <_ZN3BTD4InitEhhb+0x35a>
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif

        p->lowspeed = false;
 800acd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acd6:	2200      	movs	r2, #0
 800acd8:	719a      	strb	r2, [r3, #6]

        p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800acda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800ace6:	4611      	mov	r1, r2
 800ace8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800acea:	4798      	blx	r3
 800acec:	6478      	str	r0, [r7, #68]	; 0x44
        if(!p) {
 800acee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d101      	bne.n	800acf8 <_ZN3BTD4InitEhhb+0xa8>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800acf4:	23d6      	movs	r3, #214	; 0xd6
 800acf6:	e160      	b.n	800afba <_ZN3BTD4InitEhhb+0x36a>
        }

        p->lowspeed = lowspeed;
 800acf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acfa:	787a      	ldrb	r2, [r7, #1]
 800acfc:	719a      	strb	r2, [r3, #6]

        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo); // Assign epInfo to epinfo pointer - only EP0 is known
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	3351      	adds	r3, #81	; 0x51
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	f004 f8d6 	bl	800eebe <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800ad12:	4603      	mov	r3, r0
 800ad14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode)
 800ad18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f040 8128 	bne.w	800af72 <_ZN3BTD4InitEhhb+0x322>
                goto FailSetDevTblEntry;

        if(VID == PS3_VID && (PID == PS3_PID || PID == PS3NAVIGATION_PID || PID == PS3MOVE_PID)) {
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800ad28:	f240 524c 	movw	r2, #1356	; 0x54c
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d177      	bne.n	800ae20 <_ZN3BTD4InitEhhb+0x1d0>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ad36:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800ad3a:	d00d      	beq.n	800ad58 <_ZN3BTD4InitEhhb+0x108>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ad42:	f240 422f 	movw	r2, #1071	; 0x42f
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d006      	beq.n	800ad58 <_ZN3BTD4InitEhhb+0x108>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ad50:	f240 32d5 	movw	r2, #981	; 0x3d5
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d163      	bne.n	800ae20 <_ZN3BTD4InitEhhb+0x1d0>
                delay(100);
 800ad58:	488c      	ldr	r0, [pc, #560]	; (800af8c <_ZN3BTD4InitEhhb+0x33c>)
 800ad5a:	f7f8 f839 	bl	8002dd0 <HAL_Delay>
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 1); // We only need the Control endpoint, so we don't have to initialize the other endpoints of device
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ad6e:	2301      	movs	r3, #1
 800ad70:	f005 fa18 	bl	80101a4 <_ZN3USB7setConfEhhh>
 800ad74:	4603      	mov	r3, r0
 800ad76:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800ad7a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	f040 80f9 	bne.w	800af76 <_ZN3BTD4InitEhhb+0x326>
                                Notify(PSTR("\r\nNavigation Controller Connected"), 0x80);
                } else // It must be a Motion controller
                        Notify(PSTR("\r\nMotion Controller Connected"), 0x80);
#endif

                if(my_bdaddr[0] == 0x00 && my_bdaddr[1] == 0x00 && my_bdaddr[2] == 0x00 && my_bdaddr[3] == 0x00 && my_bdaddr[4] == 0x00 && my_bdaddr[5] == 0x00) {
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	7d1b      	ldrb	r3, [r3, #20]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d113      	bne.n	800adb4 <_ZN3BTD4InitEhhb+0x164>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	7d5b      	ldrb	r3, [r3, #21]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d10f      	bne.n	800adb4 <_ZN3BTD4InitEhhb+0x164>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	7d9b      	ldrb	r3, [r3, #22]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d10b      	bne.n	800adb4 <_ZN3BTD4InitEhhb+0x164>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	7ddb      	ldrb	r3, [r3, #23]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d107      	bne.n	800adb4 <_ZN3BTD4InitEhhb+0x164>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	7e1b      	ldrb	r3, [r3, #24]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d103      	bne.n	800adb4 <_ZN3BTD4InitEhhb+0x164>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	7e5b      	ldrb	r3, [r3, #25]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d019      	beq.n	800ade8 <_ZN3BTD4InitEhhb+0x198>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPlease plug in the dongle before trying to pair with the PS3 Controller\r\nor set the Bluetooth address in the constructor of the PS3BT class"), 0x80);
#endif
                } else {
                        if(PID == PS3_PID || PID == PS3NAVIGATION_PID)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800adba:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800adbe:	d006      	beq.n	800adce <_ZN3BTD4InitEhhb+0x17e>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800adc6:	f240 422f 	movw	r2, #1071	; 0x42f
 800adca:	4293      	cmp	r3, r2
 800adcc:	d106      	bne.n	800addc <_ZN3BTD4InitEhhb+0x18c>
                                setBdaddr(my_bdaddr); // Set internal Bluetooth address
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	3314      	adds	r3, #20
 800add2:	4619      	mov	r1, r3
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f002 f8c3 	bl	800cf60 <_ZN3BTD9setBdaddrEPh>
 800adda:	e005      	b.n	800ade8 <_ZN3BTD4InitEhhb+0x198>
                        else
                                setMoveBdaddr(my_bdaddr); // Set internal Bluetooth address
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	3314      	adds	r3, #20
 800ade0:	4619      	mov	r1, r3
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f002 f8fc 	bl	800cfe0 <_ZN3BTD13setMoveBdaddrEPh>
                        }
                        D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                }

                pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 0); // Reset configuration value
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800adf8:	2300      	movs	r3, #0
 800adfa:	f005 f9d3 	bl	80101a4 <_ZN3USB7setConfEhhh>
                pUsb->setAddr(bAddress, 0, 0); // Reset address
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ae08:	2300      	movs	r3, #0
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f005 f99a 	bl	8010144 <_ZN3USB7setAddrEhhh>
                Release(); // Release device
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	3308      	adds	r3, #8
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	4798      	blx	r3
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED; // Return
 800ae1c:	23d1      	movs	r3, #209	; 0xd1
 800ae1e:	e0cc      	b.n	800afba <_ZN3BTD4InitEhhb+0x36a>
        } else {
                // Check if attached device is a Bluetooth dongle and fill endpoint data structure
                // First interface in the configuration must have Bluetooth assigned Class/Subclass/Protocol
                // And 3 endpoints - interrupt-IN, bulk-IN, bulk-OUT, not necessarily in this order
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800ae20:	2300      	movs	r3, #0
 800ae22:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800ae26:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800ae2a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d25e      	bcs.n	800aef0 <_ZN3BTD4InitEhhb+0x2a0>
                        if((VID == IOGEAR_GBU521_VID && PID == IOGEAR_GBU521_PID) || (VID == BELKIN_F8T065BF_VID && PID == BELKIN_F8T065BF_PID)) {
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800ae38:	f640 225c 	movw	r2, #2652	; 0xa5c
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d106      	bne.n	800ae4e <_ZN3BTD4InitEhhb+0x1fe>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ae46:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d00d      	beq.n	800ae6a <_ZN3BTD4InitEhhb+0x21a>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800ae54:	f240 520d 	movw	r2, #1293	; 0x50d
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d120      	bne.n	800ae9e <_ZN3BTD4InitEhhb+0x24e>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ae62:	f240 625a 	movw	r2, #1626	; 0x65a
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d119      	bne.n	800ae9e <_ZN3BTD4InitEhhb+0x24e>
                                ConfigDescParser<USB_CLASS_VENDOR_SPECIFIC, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Workaround issue with some dongles
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	1d1a      	adds	r2, r3, #4
 800ae6e:	f107 0308 	add.w	r3, r7, #8
 800ae72:	4611      	mov	r1, r2
 800ae74:	4618      	mov	r0, r3
 800ae76:	f002 f907 	bl	800d088 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ae84:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800ae88:	f107 0308 	add.w	r3, r7, #8
 800ae8c:	9300      	str	r3, [sp, #0]
 800ae8e:	4613      	mov	r3, r2
 800ae90:	2200      	movs	r2, #0
 800ae92:	f005 f90a 	bl	80100aa <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800ae96:	4603      	mov	r3, r0
 800ae98:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ae9c:	e018      	b.n	800aed0 <_ZN3BTD4InitEhhb+0x280>
                        } else {
                                ConfigDescParser<USB_CLASS_WIRELESS_CTRL, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Set class id according to the specification
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	1d1a      	adds	r2, r3, #4
 800aea2:	f107 0308 	add.w	r3, r7, #8
 800aea6:	4611      	mov	r1, r2
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f002 f93b 	bl	800d124 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800aeb8:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800aebc:	f107 0308 	add.w	r3, r7, #8
 800aec0:	9300      	str	r3, [sp, #0]
 800aec2:	4613      	mov	r3, r2
 800aec4:	2200      	movs	r2, #0
 800aec6:	f005 f8f0 	bl	80100aa <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800aeca:	4603      	mov	r3, r0
 800aecc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        }
                        if(rcode) // Check error code
 800aed0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d150      	bne.n	800af7a <_ZN3BTD4InitEhhb+0x32a>
                                goto FailGetConfDescr;
                        if(bNumEP >= BTD_MAX_ENDPOINTS) // All endpoints extracted
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800aede:	2b03      	cmp	r3, #3
 800aee0:	d805      	bhi.n	800aeee <_ZN3BTD4InitEhhb+0x29e>
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800aee2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800aee6:	3301      	adds	r3, #1
 800aee8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800aeec:	e79b      	b.n	800ae26 <_ZN3BTD4InitEhhb+0x1d6>
                                break;
 800aeee:	bf00      	nop
                }

                if(bNumEP < BTD_MAX_ENDPOINTS)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800aef6:	2b03      	cmp	r3, #3
 800aef8:	d94a      	bls.n	800af90 <_ZN3BTD4InitEhhb+0x340>
                        goto FailUnknownDevice;

                // Assign epInfo to epinfo pointer - this time all 3 endpoins
                rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	3351      	adds	r3, #81	; 0x51
 800af0e:	f003 ffd6 	bl	800eebe <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800af12:	4603      	mov	r3, r0
 800af14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800af18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d12e      	bne.n	800af7e <_ZN3BTD4InitEhhb+0x32e>
                        goto FailSetDevTblEntry;

                // Set Configuration Value
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bConfNum);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800af36:	f005 f935 	bl	80101a4 <_ZN3USB7setConfEhhh>
 800af3a:	4603      	mov	r3, r0
 800af3c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800af40:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800af44:	2b00      	cmp	r3, #0
 800af46:	d11c      	bne.n	800af82 <_ZN3BTD4InitEhhb+0x332>
                        goto FailSetConfDescr;

                hci_num_reset_loops = 100; // only loop 100 times before trying to send the hci reset command
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2264      	movs	r2, #100	; 0x64
 800af4c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                hci_counter = 0;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                hci_state = HCI_INIT_STATE;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                waitingForConnection = false;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2200      	movs	r2, #0
 800af64:	721a      	strb	r2, [r3, #8]
                bPollEnable = true;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2201      	movs	r2, #1
 800af6a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nBluetooth Dongle Initialized"), 0x80);
#endif
        }
        return 0; // Successful configuration
 800af6e:	2300      	movs	r3, #0
 800af70:	e023      	b.n	800afba <_ZN3BTD4InitEhhb+0x36a>
                goto FailSetDevTblEntry;
 800af72:	bf00      	nop
 800af74:	e019      	b.n	800afaa <_ZN3BTD4InitEhhb+0x35a>
                        goto FailSetConfDescr;
 800af76:	bf00      	nop
 800af78:	e017      	b.n	800afaa <_ZN3BTD4InitEhhb+0x35a>
                                goto FailGetConfDescr;
 800af7a:	bf00      	nop
 800af7c:	e015      	b.n	800afaa <_ZN3BTD4InitEhhb+0x35a>
                        goto FailSetDevTblEntry;
 800af7e:	bf00      	nop
 800af80:	e013      	b.n	800afaa <_ZN3BTD4InitEhhb+0x35a>
                        goto FailSetConfDescr;
 800af82:	bf00      	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 800af84:	e011      	b.n	800afaa <_ZN3BTD4InitEhhb+0x35a>
 800af86:	bf00      	nop
 800af88:	000493e0 	.word	0x000493e0
 800af8c:	000186a0 	.word	0x000186a0
                        goto FailUnknownDevice;
 800af90:	bf00      	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800af9c:	2300      	movs	r3, #0
 800af9e:	2200      	movs	r2, #0
 800afa0:	f005 f8d0 	bl	8010144 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800afa4:	23d1      	movs	r3, #209	; 0xd1
 800afa6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nBTD Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	3308      	adds	r3, #8
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	4798      	blx	r3
        return rcode;
 800afb6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3750      	adds	r7, #80	; 0x50
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
 800afc2:	bf00      	nop

0800afc4 <_ZN3BTD10InitializeEv>:

void BTD::Initialize() {
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800afcc:	2300      	movs	r3, #0
 800afce:	73fb      	strb	r3, [r7, #15]
 800afd0:	7bfb      	ldrb	r3, [r7, #15]
 800afd2:	2b03      	cmp	r3, #3
 800afd4:	d845      	bhi.n	800b062 <_ZN3BTD10InitializeEv+0x9e>
                epInfo[i].epAddr = 0;
 800afd6:	7bfa      	ldrb	r2, [r7, #15]
 800afd8:	6879      	ldr	r1, [r7, #4]
 800afda:	4613      	mov	r3, r2
 800afdc:	005b      	lsls	r3, r3, #1
 800afde:	4413      	add	r3, r2
 800afe0:	440b      	add	r3, r1
 800afe2:	3351      	adds	r3, #81	; 0x51
 800afe4:	2200      	movs	r2, #0
 800afe6:	701a      	strb	r2, [r3, #0]
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 800afe8:	7bfb      	ldrb	r3, [r7, #15]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d001      	beq.n	800aff2 <_ZN3BTD10InitializeEv+0x2e>
 800afee:	2000      	movs	r0, #0
 800aff0:	e000      	b.n	800aff4 <_ZN3BTD10InitializeEv+0x30>
 800aff2:	2008      	movs	r0, #8
 800aff4:	7bfa      	ldrb	r2, [r7, #15]
 800aff6:	6879      	ldr	r1, [r7, #4]
 800aff8:	4613      	mov	r3, r2
 800affa:	005b      	lsls	r3, r3, #1
 800affc:	4413      	add	r3, r2
 800affe:	440b      	add	r3, r1
 800b000:	3352      	adds	r3, #82	; 0x52
 800b002:	4602      	mov	r2, r0
 800b004:	701a      	strb	r2, [r3, #0]
                epInfo[i].bmSndToggle = 0;
 800b006:	7bfa      	ldrb	r2, [r7, #15]
 800b008:	6879      	ldr	r1, [r7, #4]
 800b00a:	4613      	mov	r3, r2
 800b00c:	005b      	lsls	r3, r3, #1
 800b00e:	4413      	add	r3, r2
 800b010:	440b      	add	r3, r1
 800b012:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800b016:	78d3      	ldrb	r3, [r2, #3]
 800b018:	f36f 0300 	bfc	r3, #0, #1
 800b01c:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmRcvToggle = 0;
 800b01e:	7bfa      	ldrb	r2, [r7, #15]
 800b020:	6879      	ldr	r1, [r7, #4]
 800b022:	4613      	mov	r3, r2
 800b024:	005b      	lsls	r3, r3, #1
 800b026:	4413      	add	r3, r2
 800b028:	440b      	add	r3, r1
 800b02a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800b02e:	78d3      	ldrb	r3, [r2, #3]
 800b030:	f36f 0341 	bfc	r3, #1, #1
 800b034:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 800b036:	7bfb      	ldrb	r3, [r7, #15]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d001      	beq.n	800b040 <_ZN3BTD10InitializeEv+0x7c>
 800b03c:	2101      	movs	r1, #1
 800b03e:	e000      	b.n	800b042 <_ZN3BTD10InitializeEv+0x7e>
 800b040:	210f      	movs	r1, #15
 800b042:	7bfa      	ldrb	r2, [r7, #15]
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	4613      	mov	r3, r2
 800b048:	005b      	lsls	r3, r3, #1
 800b04a:	4413      	add	r3, r2
 800b04c:	4403      	add	r3, r0
 800b04e:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800b052:	78d3      	ldrb	r3, [r2, #3]
 800b054:	f361 0387 	bfi	r3, r1, #2, #6
 800b058:	70d3      	strb	r3, [r2, #3]
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800b05a:	7bfb      	ldrb	r3, [r7, #15]
 800b05c:	3301      	adds	r3, #1
 800b05e:	73fb      	strb	r3, [r7, #15]
 800b060:	e7b6      	b.n	800afd0 <_ZN3BTD10InitializeEv+0xc>
        }
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800b062:	2300      	movs	r3, #0
 800b064:	73fb      	strb	r3, [r7, #15]
 800b066:	7bfb      	ldrb	r3, [r7, #15]
 800b068:	2b03      	cmp	r3, #3
 800b06a:	d81c      	bhi.n	800b0a6 <_ZN3BTD10InitializeEv+0xe2>
                if(btService[i])
 800b06c:	7bfb      	ldrb	r3, [r7, #15]
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	3318      	adds	r3, #24
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	4413      	add	r3, r2
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d010      	beq.n	800b09e <_ZN3BTD10InitializeEv+0xda>
                        btService[i]->Reset(); // Reset all Bluetooth services
 800b07c:	7bfb      	ldrb	r3, [r7, #15]
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	3318      	adds	r3, #24
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	4413      	add	r3, r2
 800b086:	6859      	ldr	r1, [r3, #4]
 800b088:	7bfb      	ldrb	r3, [r7, #15]
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	3318      	adds	r3, #24
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	4413      	add	r3, r2
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	3308      	adds	r3, #8
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4608      	mov	r0, r1
 800b09c:	4798      	blx	r3
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800b09e:	7bfb      	ldrb	r3, [r7, #15]
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	73fb      	strb	r3, [r7, #15]
 800b0a4:	e7df      	b.n	800b066 <_ZN3BTD10InitializeEv+0xa2>
        }

        connectToWii = false;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        incomingWii = false;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        connectToHIDDevice = false;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        incomingHIDDevice = false;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        incomingPSController = false;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        bAddress = 0; // Clear device address
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        bNumEP = 1; // Must have to be reset to 1
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        qNextPollTime = 0; // Reset next poll time
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	661a      	str	r2, [r3, #96]	; 0x60
        pollInterval = 0;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bPollEnable = false; // Don't start polling before dongle is connected
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        simple_pairing_supported = false;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
}
 800b0fc:	bf00      	nop
 800b0fe:	3710      	adds	r7, #16
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:

/* Extracts interrupt-IN, bulk-IN, bulk-OUT endpoint information from config descriptor */
void BTD::EndpointXtract(uint8_t conf, uint8_t iface __attribute__((unused)), uint8_t alt, uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *pep) {
 800b104:	b480      	push	{r7}
 800b106:	b085      	sub	sp, #20
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	4608      	mov	r0, r1
 800b10e:	4611      	mov	r1, r2
 800b110:	461a      	mov	r2, r3
 800b112:	4603      	mov	r3, r0
 800b114:	70fb      	strb	r3, [r7, #3]
 800b116:	460b      	mov	r3, r1
 800b118:	70bb      	strb	r3, [r7, #2]
 800b11a:	4613      	mov	r3, r2
 800b11c:	707b      	strb	r3, [r7, #1]
        //ErrorMessage<uint8_t>(PSTR("Conf.Val"),conf);
        //ErrorMessage<uint8_t>(PSTR("Iface Num"),iface);
        //ErrorMessage<uint8_t>(PSTR("Alt.Set"),alt);

        if(alt) // Wrong interface - by BT spec, no alt setting
 800b11e:	787b      	ldrb	r3, [r7, #1]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d15d      	bne.n	800b1e0 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xdc>
                return;

        bConfNum = conf;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	78fa      	ldrb	r2, [r7, #3]
 800b128:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) { // Interrupt In endpoint found
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	78db      	ldrb	r3, [r3, #3]
 800b130:	f003 0303 	and.w	r3, r3, #3
 800b134:	2b03      	cmp	r3, #3
 800b136:	d114      	bne.n	800b162 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
 800b138:	69fb      	ldr	r3, [r7, #28]
 800b13a:	789b      	ldrb	r3, [r3, #2]
 800b13c:	b25b      	sxtb	r3, r3
 800b13e:	2b00      	cmp	r3, #0
 800b140:	da0f      	bge.n	800b162 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
                index = BTD_EVENT_PIPE;
 800b142:	2301      	movs	r3, #1
 800b144:	73fb      	strb	r3, [r7, #15]
                epInfo[index].bmNakPower = USB_NAK_NOWAIT;
 800b146:	7bfa      	ldrb	r2, [r7, #15]
 800b148:	6879      	ldr	r1, [r7, #4]
 800b14a:	4613      	mov	r3, r2
 800b14c:	005b      	lsls	r3, r3, #1
 800b14e:	4413      	add	r3, r2
 800b150:	440b      	add	r3, r1
 800b152:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800b156:	78d3      	ldrb	r3, [r2, #3]
 800b158:	2101      	movs	r1, #1
 800b15a:	f361 0387 	bfi	r3, r1, #2, #6
 800b15e:	70d3      	strb	r3, [r2, #3]
 800b160:	e00e      	b.n	800b180 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7c>
        } else if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_BULK) // Bulk endpoint found
 800b162:	69fb      	ldr	r3, [r7, #28]
 800b164:	78db      	ldrb	r3, [r3, #3]
 800b166:	f003 0303 	and.w	r3, r3, #3
 800b16a:	2b02      	cmp	r3, #2
 800b16c:	d13a      	bne.n	800b1e4 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe0>
                index = ((pep->bEndpointAddress & 0x80) == 0x80) ? BTD_DATAIN_PIPE : BTD_DATAOUT_PIPE;
 800b16e:	69fb      	ldr	r3, [r7, #28]
 800b170:	789b      	ldrb	r3, [r3, #2]
 800b172:	b25b      	sxtb	r3, r3
 800b174:	2b00      	cmp	r3, #0
 800b176:	da01      	bge.n	800b17c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x78>
 800b178:	2302      	movs	r3, #2
 800b17a:	e000      	b.n	800b17e <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7a>
 800b17c:	2303      	movs	r3, #3
 800b17e:	73fb      	strb	r3, [r7, #15]
        else
            return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 800b180:	69fb      	ldr	r3, [r7, #28]
 800b182:	789b      	ldrb	r3, [r3, #2]
 800b184:	7bfa      	ldrb	r2, [r7, #15]
 800b186:	f003 030f 	and.w	r3, r3, #15
 800b18a:	b2d8      	uxtb	r0, r3
 800b18c:	6879      	ldr	r1, [r7, #4]
 800b18e:	4613      	mov	r3, r2
 800b190:	005b      	lsls	r3, r3, #1
 800b192:	4413      	add	r3, r2
 800b194:	440b      	add	r3, r1
 800b196:	3351      	adds	r3, #81	; 0x51
 800b198:	4602      	mov	r2, r0
 800b19a:	701a      	strb	r2, [r3, #0]
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 800b19c:	69fb      	ldr	r3, [r7, #28]
 800b19e:	889b      	ldrh	r3, [r3, #4]
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	7bfa      	ldrb	r2, [r7, #15]
 800b1a4:	b2d8      	uxtb	r0, r3
 800b1a6:	6879      	ldr	r1, [r7, #4]
 800b1a8:	4613      	mov	r3, r2
 800b1aa:	005b      	lsls	r3, r3, #1
 800b1ac:	4413      	add	r3, r2
 800b1ae:	440b      	add	r3, r1
 800b1b0:	3352      	adds	r3, #82	; 0x52
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	701a      	strb	r2, [r3, #0]
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	799b      	ldrb	r3, [r3, #6]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d204      	bcs.n	800b1ce <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xca>
                pollInterval = pep->bInterval;
 800b1c4:	69fb      	ldr	r3, [r7, #28]
 800b1c6:	799a      	ldrb	r2, [r3, #6]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bNumEP++;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	b2da      	uxtb	r2, r3
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800b1de:	e002      	b.n	800b1e6 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
                return;
 800b1e0:	bf00      	nop
 800b1e2:	e000      	b.n	800b1e6 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
            return;
 800b1e4:	bf00      	nop
}
 800b1e6:	3714      	adds	r7, #20
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <_ZThn4_N3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 800b1f0:	f1a0 0004 	sub.w	r0, r0, #4
 800b1f4:	f7ff bf86 	b.w	800b104 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

0800b1f8 <_ZN3BTD7ReleaseEv>:
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}

/* Performs a cleanup after failed Init() attempt */
uint8_t BTD::Release() {
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
        Initialize(); // Set all variables, endpoint structs etc. to default values
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f7ff fedf 	bl	800afc4 <_ZN3BTD10InitializeEv>
        pUsb->GetAddressPool().FreeAddress(bAddress);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7ff fa72 	bl	800a6f4 <_ZN3USB14GetAddressPoolEv>
 800b210:	4603      	mov	r3, r0
 800b212:	681a      	ldr	r2, [r3, #0]
 800b214:	3208      	adds	r2, #8
 800b216:	6812      	ldr	r2, [r2, #0]
 800b218:	6879      	ldr	r1, [r7, #4]
 800b21a:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
 800b21e:	4618      	mov	r0, r3
 800b220:	4790      	blx	r2
        return 0;
 800b222:	2300      	movs	r3, #0
}
 800b224:	4618      	mov	r0, r3
 800b226:	3708      	adds	r7, #8
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <_ZN3BTD4PollEv>:

uint8_t BTD::Poll() {
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
        if(!bPollEnable)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800b23a:	f083 0301 	eor.w	r3, r3, #1
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	2b00      	cmp	r3, #0
 800b242:	d001      	beq.n	800b248 <_ZN3BTD4PollEv+0x1c>
                return 0;
 800b244:	2300      	movs	r3, #0
 800b246:	e025      	b.n	800b294 <_ZN3BTD4PollEv+0x68>
        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Don't poll if shorter than polling interval
 800b248:	f7f7 fdb6 	bl	8002db8 <HAL_GetTick>
 800b24c:	4603      	mov	r3, r0
 800b24e:	4a13      	ldr	r2, [pc, #76]	; (800b29c <_ZN3BTD4PollEv+0x70>)
 800b250:	fba2 2303 	umull	r2, r3, r2, r3
 800b254:	099a      	lsrs	r2, r3, #6
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b25a:	1ad3      	subs	r3, r2, r3
 800b25c:	43db      	mvns	r3, r3
 800b25e:	0fdb      	lsrs	r3, r3, #31
 800b260:	b2db      	uxtb	r3, r3
 800b262:	2b00      	cmp	r3, #0
 800b264:	d015      	beq.n	800b292 <_ZN3BTD4PollEv+0x66>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 800b266:	f7f7 fda7 	bl	8002db8 <HAL_GetTick>
 800b26a:	4603      	mov	r3, r0
 800b26c:	4a0b      	ldr	r2, [pc, #44]	; (800b29c <_ZN3BTD4PollEv+0x70>)
 800b26e:	fba2 2303 	umull	r2, r3, r2, r3
 800b272:	099b      	lsrs	r3, r3, #6
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800b27a:	441a      	add	r2, r3
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	661a      	str	r2, [r3, #96]	; 0x60
                HCI_event_task(); // Poll the HCI event pipe
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 f80d 	bl	800b2a0 <_ZN3BTD14HCI_event_taskEv>
                HCI_task(); // HCI state machine
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 fb24 	bl	800b8d4 <_ZN3BTD8HCI_taskEv>
                ACL_event_task(); // Poll the ACL input pipe too
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 fe4d 	bl	800bf2c <_ZN3BTD14ACL_event_taskEv>
        }
        return 0;
 800b292:	2300      	movs	r3, #0
}
 800b294:	4618      	mov	r0, r3
 800b296:	3708      	adds	r7, #8
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}
 800b29c:	10624dd3 	.word	0x10624dd3

0800b2a0 <_ZN3BTD14HCI_event_taskEv>:
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
                if(btService[i])
                        btService[i]->disconnect();
};

void BTD::HCI_event_task() {
 800b2a0:	b5b0      	push	{r4, r5, r7, lr}
 800b2a2:	b088      	sub	sp, #32
 800b2a4:	af02      	add	r7, sp, #8
 800b2a6:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE; // Request more than 16 bytes anyway, the inTransfer routine will take care of this
 800b2a8:	2340      	movs	r3, #64	; 0x40
 800b2aa:	81bb      	strh	r3, [r7, #12]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_EVENT_PIPE ].epAddr, &length, hcibuf, pollInterval); // Input on endpoint 1
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	3389      	adds	r3, #137	; 0x89
 800b2c0:	687a      	ldr	r2, [r7, #4]
 800b2c2:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800b2c6:	f107 050c 	add.w	r5, r7, #12
 800b2ca:	9201      	str	r2, [sp, #4]
 800b2cc:	9300      	str	r3, [sp, #0]
 800b2ce:	462b      	mov	r3, r5
 800b2d0:	4622      	mov	r2, r4
 800b2d2:	f003 ff5c 	bl	800f18e <_ZN3USB10inTransferEhhPtPhh>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	73fb      	strb	r3, [r7, #15]

        if(!rcode || rcode == hrNAK) { // Check for errors
 800b2da:	7bfb      	ldrb	r3, [r7, #15]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d003      	beq.n	800b2e8 <_ZN3BTD14HCI_event_taskEv+0x48>
 800b2e0:	7bfb      	ldrb	r3, [r7, #15]
 800b2e2:	2b04      	cmp	r3, #4
 800b2e4:	f040 82f1 	bne.w	800b8ca <_ZN3BTD14HCI_event_taskEv+0x62a>
                switch(hcibuf[0]) { // Switch on event type
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	2b35      	cmp	r3, #53	; 0x35
 800b2f2:	f200 82ea 	bhi.w	800b8ca <_ZN3BTD14HCI_event_taskEv+0x62a>
 800b2f6:	a201      	add	r2, pc, #4	; (adr r2, 800b2fc <_ZN3BTD14HCI_event_taskEv+0x5c>)
 800b2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2fc:	0800b4dd 	.word	0x0800b4dd
 800b300:	0800b53d 	.word	0x0800b53d
 800b304:	0800b695 	.word	0x0800b695
 800b308:	0800b77f 	.word	0x0800b77f
 800b30c:	0800b6f1 	.word	0x0800b6f1
 800b310:	0800b83d 	.word	0x0800b83d
 800b314:	0800b723 	.word	0x0800b723
 800b318:	0800b8b5 	.word	0x0800b8b5
 800b31c:	0800b8b5 	.word	0x0800b8b5
 800b320:	0800b8cb 	.word	0x0800b8cb
 800b324:	0800b8cb 	.word	0x0800b8cb
 800b328:	0800b8b5 	.word	0x0800b8b5
 800b32c:	0800b8b5 	.word	0x0800b8b5
 800b330:	0800b3d5 	.word	0x0800b3d5
 800b334:	0800b8b5 	.word	0x0800b8b5
 800b338:	0800b8cb 	.word	0x0800b8cb
 800b33c:	0800b8cb 	.word	0x0800b8cb
 800b340:	0800b8b5 	.word	0x0800b8b5
 800b344:	0800b8b5 	.word	0x0800b8b5
 800b348:	0800b8cb 	.word	0x0800b8cb
 800b34c:	0800b8cb 	.word	0x0800b8cb
 800b350:	0800b80b 	.word	0x0800b80b
 800b354:	0800b835 	.word	0x0800b835
 800b358:	0800b8b5 	.word	0x0800b8b5
 800b35c:	0800b8b5 	.word	0x0800b8b5
 800b360:	0800b8b5 	.word	0x0800b8b5
 800b364:	0800b8b5 	.word	0x0800b8b5
 800b368:	0800b8cb 	.word	0x0800b8cb
 800b36c:	0800b8cb 	.word	0x0800b8cb
 800b370:	0800b8cb 	.word	0x0800b8cb
 800b374:	0800b8cb 	.word	0x0800b8cb
 800b378:	0800b8b5 	.word	0x0800b8b5
 800b37c:	0800b8cb 	.word	0x0800b8cb
 800b380:	0800b8cb 	.word	0x0800b8cb
 800b384:	0800b8cb 	.word	0x0800b8cb
 800b388:	0800b8cb 	.word	0x0800b8cb
 800b38c:	0800b8cb 	.word	0x0800b8cb
 800b390:	0800b8cb 	.word	0x0800b8cb
 800b394:	0800b8cb 	.word	0x0800b8cb
 800b398:	0800b8cb 	.word	0x0800b8cb
 800b39c:	0800b8cb 	.word	0x0800b8cb
 800b3a0:	0800b8cb 	.word	0x0800b8cb
 800b3a4:	0800b8cb 	.word	0x0800b8cb
 800b3a8:	0800b8cb 	.word	0x0800b8cb
 800b3ac:	0800b8cb 	.word	0x0800b8cb
 800b3b0:	0800b8cb 	.word	0x0800b8cb
 800b3b4:	0800b8cb 	.word	0x0800b8cb
 800b3b8:	0800b8cb 	.word	0x0800b8cb
 800b3bc:	0800b8a5 	.word	0x0800b8a5
 800b3c0:	0800b8b5 	.word	0x0800b8b5
 800b3c4:	0800b8ad 	.word	0x0800b8ad
 800b3c8:	0800b8cb 	.word	0x0800b8cb
 800b3cc:	0800b8cb 	.word	0x0800b8cb
 800b3d0:	0800b8b5 	.word	0x0800b8b5
                        case EV_COMMAND_COMPLETE:
                                if(!hcibuf[5]) { // Check if command succeeded
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	f040 826c 	bne.w	800b8b8 <_ZN3BTD14HCI_event_taskEv+0x618>
                                        hci_set_flag(HCI_FLAG_CMD_COMPLETE); // Set command complete flag
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b3e6:	f043 0301 	orr.w	r3, r3, #1
 800b3ea:	b29a      	uxth	r2, r3
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        if((hcibuf[3] == 0x01) && (hcibuf[4] == 0x10)) { // Parameters from read local version information
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	d114      	bne.n	800b426 <_ZN3BTD14HCI_event_taskEv+0x186>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b402:	2b10      	cmp	r3, #16
 800b404:	d10f      	bne.n	800b426 <_ZN3BTD14HCI_event_taskEv+0x186>
                                                hci_version = hcibuf[6]; // Used to check if it supports 2.0+EDR - see http://www.bluetooth.org/Technical/AssignedNumbers/hci.htm
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f893 208f 	ldrb.w	r2, [r3, #143]	; 0x8f
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                                if(!hci_check_flag(HCI_FLAG_READ_VERSION)) {
                                                        Notify(PSTR("\r\nHCI version: "), 0x80);
                                                        D_PrintHex<uint8_t > (hci_version, 0x80);
                                                }
#endif
                                                hci_set_flag(HCI_FLAG_READ_VERSION);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b41c:	b29a      	uxth	r2, r3
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800b424:	e059      	b.n	800b4da <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x04) && (hcibuf[4] == 0x10)) { // Parameters from read local extended features
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b42c:	2b04      	cmp	r3, #4
 800b42e:	d12a      	bne.n	800b486 <_ZN3BTD14HCI_event_taskEv+0x1e6>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b436:	2b10      	cmp	r3, #16
 800b438:	d125      	bne.n	800b486 <_ZN3BTD14HCI_event_taskEv+0x1e6>
                                                if(!hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b440:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b444:	2b00      	cmp	r3, #0
 800b446:	d114      	bne.n	800b472 <_ZN3BTD14HCI_event_taskEv+0x1d2>
                                                        for(uint8_t i = 0; i < 8; i++) {
                                                                Notify(PSTR(" "), 0x80);
                                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                                        }
#endif
                                                        if(hcibuf[6] == 0) { // Page 0
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d10f      	bne.n	800b472 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
#endif
                                                                if(hcibuf[8 + 6] & (1U << 3)) {
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800b458:	f003 0308 	and.w	r3, r3, #8
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d004      	beq.n	800b46a <_ZN3BTD14HCI_event_taskEv+0x1ca>
                                                                        simple_pairing_supported = true;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2201      	movs	r2, #1
 800b464:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800b468:	e003      	b.n	800b472 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("supports"), 0x80);
#endif
                                                                } else {
                                                                        simple_pairing_supported = false;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
                                                                Notify(PSTR(" secure simple pairing (host support)"), 0x80);
#endif
                                                        }
                                                }

                                                hci_set_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b478:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b47c:	b29a      	uxth	r2, r3
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800b484:	e029      	b.n	800b4da <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x09) && (hcibuf[4] == 0x10)) { // Parameters from read local bluetooth address
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b48c:	2b09      	cmp	r3, #9
 800b48e:	f040 8213 	bne.w	800b8b8 <_ZN3BTD14HCI_event_taskEv+0x618>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b498:	2b10      	cmp	r3, #16
 800b49a:	f040 820d 	bne.w	800b8b8 <_ZN3BTD14HCI_event_taskEv+0x618>
                                                for(uint8_t i = 0; i < 6; i++)
 800b49e:	2300      	movs	r3, #0
 800b4a0:	75fb      	strb	r3, [r7, #23]
 800b4a2:	7dfb      	ldrb	r3, [r7, #23]
 800b4a4:	2b05      	cmp	r3, #5
 800b4a6:	d80e      	bhi.n	800b4c6 <_ZN3BTD14HCI_event_taskEv+0x226>
                                                        my_bdaddr[i] = hcibuf[6 + i];
 800b4a8:	7dfb      	ldrb	r3, [r7, #23]
 800b4aa:	1d9a      	adds	r2, r3, #6
 800b4ac:	7dfb      	ldrb	r3, [r7, #23]
 800b4ae:	6879      	ldr	r1, [r7, #4]
 800b4b0:	440a      	add	r2, r1
 800b4b2:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	4413      	add	r3, r2
 800b4ba:	460a      	mov	r2, r1
 800b4bc:	751a      	strb	r2, [r3, #20]
                                                for(uint8_t i = 0; i < 6; i++)
 800b4be:	7dfb      	ldrb	r3, [r7, #23]
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	75fb      	strb	r3, [r7, #23]
 800b4c4:	e7ed      	b.n	800b4a2 <_ZN3BTD14HCI_event_taskEv+0x202>
                                                hci_set_flag(HCI_FLAG_READ_BDADDR);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b4cc:	f043 0320 	orr.w	r3, r3, #32
 800b4d0:	b29a      	uxth	r2, r3
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        }
                                }
                                break;
 800b4d8:	e1ee      	b.n	800b8b8 <_ZN3BTD14HCI_event_taskEv+0x618>
 800b4da:	e1ed      	b.n	800b8b8 <_ZN3BTD14HCI_event_taskEv+0x618>
#endif
                                }
                                break;

                        case EV_INQUIRY_COMPLETE:
                                if(inquiry_counter >= 5 && (pairWithWii || pairWithHIDDevice)) {
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800b4e2:	2b04      	cmp	r3, #4
 800b4e4:	d921      	bls.n	800b52a <_ZN3BTD14HCI_event_taskEv+0x28a>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d104      	bne.n	800b4fa <_ZN3BTD14HCI_event_taskEv+0x25a>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d017      	beq.n	800b52a <_ZN3BTD14HCI_event_taskEv+0x28a>
                                        inquiry_counter = 0;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nCouldn't find Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nCouldn't find HID device"), 0x80);
#endif
                                        connectToWii = false;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2200      	movs	r2, #0
 800b506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        pairWithWii = false;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2200      	movs	r2, #0
 800b50e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                                        connectToHIDDevice = false;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                        pairWithHIDDevice = false;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                        hci_state = HCI_SCANNING_STATE;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	220a      	movs	r2, #10
 800b526:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                }
                                inquiry_counter++;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800b530:	3301      	adds	r3, #1
 800b532:	b2da      	uxtb	r2, r3
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                break;
 800b53a:	e1c6      	b.n	800b8ca <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_INQUIRY_RESULT:
                                if(hcibuf[2]) { // Check that there is more than zero responses
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800b542:	2b00      	cmp	r3, #0
 800b544:	f000 81ba 	beq.w	800b8bc <_ZN3BTD14HCI_event_taskEv+0x61c>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nNumber of responses: "), 0x80);
                                        Notify(hcibuf[2], 0x80);
#endif
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800b548:	2300      	movs	r3, #0
 800b54a:	75bb      	strb	r3, [r7, #22]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800b552:	7dba      	ldrb	r2, [r7, #22]
 800b554:	429a      	cmp	r2, r3
 800b556:	f080 81b1 	bcs.w	800b8bc <_ZN3BTD14HCI_event_taskEv+0x61c>
                                                uint8_t offset = 8 * hcibuf[2] + 3 * i;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800b560:	00db      	lsls	r3, r3, #3
 800b562:	b2da      	uxtb	r2, r3
 800b564:	7dbb      	ldrb	r3, [r7, #22]
 800b566:	4619      	mov	r1, r3
 800b568:	0049      	lsls	r1, r1, #1
 800b56a:	440b      	add	r3, r1
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	4413      	add	r3, r2
 800b570:	73bb      	strb	r3, [r7, #14]

                                                for(uint8_t j = 0; j < 3; j++)
 800b572:	2300      	movs	r3, #0
 800b574:	757b      	strb	r3, [r7, #21]
 800b576:	7d7b      	ldrb	r3, [r7, #21]
 800b578:	2b02      	cmp	r3, #2
 800b57a:	d811      	bhi.n	800b5a0 <_ZN3BTD14HCI_event_taskEv+0x300>
                                                        classOfDevice[j] = hcibuf[j + 4 + offset];
 800b57c:	7d7b      	ldrb	r3, [r7, #21]
 800b57e:	1d1a      	adds	r2, r3, #4
 800b580:	7bbb      	ldrb	r3, [r7, #14]
 800b582:	441a      	add	r2, r3
 800b584:	7d7b      	ldrb	r3, [r7, #21]
 800b586:	6879      	ldr	r1, [r7, #4]
 800b588:	440a      	add	r2, r1
 800b58a:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	4413      	add	r3, r2
 800b592:	460a      	mov	r2, r1
 800b594:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                                for(uint8_t j = 0; j < 3; j++)
 800b598:	7d7b      	ldrb	r3, [r7, #21]
 800b59a:	3301      	adds	r3, #1
 800b59c:	757b      	strb	r3, [r7, #21]
 800b59e:	e7ea      	b.n	800b576 <_ZN3BTD14HCI_event_taskEv+0x2d6>
                                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                                Notify(PSTR(" "), 0x80);
                                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif

                                                if(pairWithWii && classOfDevice[2] == 0x00 && (classOfDevice[1] == 0x05) && (classOfDevice[0] & 0x0C)) { // See http://wiibrew.org/wiki/Wiimote#SDP_information
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d038      	beq.n	800b61c <_ZN3BTD14HCI_event_taskEv+0x37c>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d133      	bne.n	800b61c <_ZN3BTD14HCI_event_taskEv+0x37c>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800b5ba:	2b05      	cmp	r3, #5
 800b5bc:	d12e      	bne.n	800b61c <_ZN3BTD14HCI_event_taskEv+0x37c>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800b5c4:	f003 030c 	and.w	r3, r3, #12
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d027      	beq.n	800b61c <_ZN3BTD14HCI_event_taskEv+0x37c>
                                                        checkRemoteName = true; // Check remote name to distinguish between the different controllers
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

                                                        for(uint8_t j = 0; j < 6; j++)
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	753b      	strb	r3, [r7, #20]
 800b5d8:	7d3b      	ldrb	r3, [r7, #20]
 800b5da:	2b05      	cmp	r3, #5
 800b5dc:	d814      	bhi.n	800b608 <_ZN3BTD14HCI_event_taskEv+0x368>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800b5de:	7d3b      	ldrb	r3, [r7, #20]
 800b5e0:	1cd9      	adds	r1, r3, #3
 800b5e2:	7dba      	ldrb	r2, [r7, #22]
 800b5e4:	4613      	mov	r3, r2
 800b5e6:	005b      	lsls	r3, r3, #1
 800b5e8:	4413      	add	r3, r2
 800b5ea:	005b      	lsls	r3, r3, #1
 800b5ec:	18ca      	adds	r2, r1, r3
 800b5ee:	7d3b      	ldrb	r3, [r7, #20]
 800b5f0:	6879      	ldr	r1, [r7, #4]
 800b5f2:	440a      	add	r2, r1
 800b5f4:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	4413      	add	r3, r2
 800b5fc:	460a      	mov	r2, r1
 800b5fe:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800b600:	7d3b      	ldrb	r3, [r7, #20]
 800b602:	3301      	adds	r3, #1
 800b604:	753b      	strb	r3, [r7, #20]
 800b606:	e7e7      	b.n	800b5d8 <_ZN3BTD14HCI_event_taskEv+0x338>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b60e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b612:	b29a      	uxth	r2, r3
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800b61a:	e03a      	b.n	800b692 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                                } else if(pairWithHIDDevice && (classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad - see: http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800b622:	2b00      	cmp	r3, #0
 800b624:	d031      	beq.n	800b68a <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800b62c:	f003 030f 	and.w	r3, r3, #15
 800b630:	2b05      	cmp	r3, #5
 800b632:	d12a      	bne.n	800b68a <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800b63a:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d023      	beq.n	800b68a <_ZN3BTD14HCI_event_taskEv+0x3ea>
                                                        if(classOfDevice[0] & 0x40)
                                                                Notify(PSTR("\r\nKeyboard found"), 0x80);
                                                        if(classOfDevice[0] & 0x08)
                                                                Notify(PSTR("\r\nGamepad found"), 0x80);
#endif
                                                        for(uint8_t j = 0; j < 6; j++)
 800b642:	2300      	movs	r3, #0
 800b644:	74fb      	strb	r3, [r7, #19]
 800b646:	7cfb      	ldrb	r3, [r7, #19]
 800b648:	2b05      	cmp	r3, #5
 800b64a:	d814      	bhi.n	800b676 <_ZN3BTD14HCI_event_taskEv+0x3d6>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800b64c:	7cfb      	ldrb	r3, [r7, #19]
 800b64e:	1cd9      	adds	r1, r3, #3
 800b650:	7dba      	ldrb	r2, [r7, #22]
 800b652:	4613      	mov	r3, r2
 800b654:	005b      	lsls	r3, r3, #1
 800b656:	4413      	add	r3, r2
 800b658:	005b      	lsls	r3, r3, #1
 800b65a:	18ca      	adds	r2, r1, r3
 800b65c:	7cfb      	ldrb	r3, [r7, #19]
 800b65e:	6879      	ldr	r1, [r7, #4]
 800b660:	440a      	add	r2, r1
 800b662:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	4413      	add	r3, r2
 800b66a:	460a      	mov	r2, r1
 800b66c:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800b66e:	7cfb      	ldrb	r3, [r7, #19]
 800b670:	3301      	adds	r3, #1
 800b672:	74fb      	strb	r3, [r7, #19]
 800b674:	e7e7      	b.n	800b646 <_ZN3BTD14HCI_event_taskEv+0x3a6>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b67c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b680:	b29a      	uxth	r2, r3
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800b688:	e003      	b.n	800b692 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800b68a:	7dbb      	ldrb	r3, [r7, #22]
 800b68c:	3301      	adds	r3, #1
 800b68e:	75bb      	strb	r3, [r7, #22]
 800b690:	e75c      	b.n	800b54c <_ZN3BTD14HCI_event_taskEv+0x2ac>
                                                }
                                        }
                                }
                                break;
 800b692:	e113      	b.n	800b8bc <_ZN3BTD14HCI_event_taskEv+0x61c>

                        case EV_CONNECT_COMPLETE:
                                hci_set_flag(HCI_FLAG_CONNECT_EVENT);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b69a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b69e:	b29a      	uxth	r2, r3
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                if(!hcibuf[2]) { // Check if connected OK
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d11a      	bne.n	800b6e6 <_ZN3BTD14HCI_event_taskEv+0x446>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nConnection established"), 0x80);
#endif
                                        hci_handle = hcibuf[3] | ((hcibuf[4] & 0x0F) << 8); // Store the handle for the ACL connection
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b6b6:	b21a      	sxth	r2, r3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b6be:	021b      	lsls	r3, r3, #8
 800b6c0:	b21b      	sxth	r3, r3
 800b6c2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b6c6:	b21b      	sxth	r3, r3
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	b21b      	sxth	r3, r3
 800b6cc:	b29a      	uxth	r2, r3
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	835a      	strh	r2, [r3, #26]
                                        hci_set_flag(HCI_FLAG_CONNECT_COMPLETE); // Set connection complete flag
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b6d8:	f043 0302 	orr.w	r3, r3, #2
 800b6dc:	b29a      	uxth	r2, r3
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                }
                                break;
 800b6e4:	e0f1      	b.n	800b8ca <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2206      	movs	r2, #6
 800b6ea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800b6ee:	e0ec      	b.n	800b8ca <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_DISCONNECT_COMPLETE:
                                if(!hcibuf[2]) { // Check if disconnected OK
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	f040 80e2 	bne.w	800b8c0 <_ZN3BTD14HCI_event_taskEv+0x620>
                                        hci_set_flag(HCI_FLAG_DISCONNECT_COMPLETE); // Set disconnect command complete flag
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b702:	f043 0304 	orr.w	r3, r3, #4
 800b706:	b29a      	uxth	r2, r3
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE); // Clear connection complete flag
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b714:	f023 0302 	bic.w	r3, r3, #2
 800b718:	b29a      	uxth	r2, r3
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800b720:	e0ce      	b.n	800b8c0 <_ZN3BTD14HCI_event_taskEv+0x620>

                        case EV_REMOTE_NAME_COMPLETE:
                                if(!hcibuf[2]) { // Check if reading is OK
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800b728:	2b00      	cmp	r3, #0
 800b72a:	f040 80cb 	bne.w	800b8c4 <_ZN3BTD14HCI_event_taskEv+0x624>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800b72e:	2300      	movs	r3, #0
 800b730:	74bb      	strb	r3, [r7, #18]
 800b732:	7cbb      	ldrb	r3, [r7, #18]
 800b734:	2b1d      	cmp	r3, #29
 800b736:	d818      	bhi.n	800b76a <_ZN3BTD14HCI_event_taskEv+0x4ca>
                                                remote_name[i] = hcibuf[9 + i];
 800b738:	7cbb      	ldrb	r3, [r7, #18]
 800b73a:	f103 0209 	add.w	r2, r3, #9
 800b73e:	7cbb      	ldrb	r3, [r7, #18]
 800b740:	6879      	ldr	r1, [r7, #4]
 800b742:	440a      	add	r2, r1
 800b744:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800b748:	687a      	ldr	r2, [r7, #4]
 800b74a:	4413      	add	r3, r2
 800b74c:	460a      	mov	r2, r1
 800b74e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                                                if(remote_name[i] == '\0') // End of string
 800b752:	7cbb      	ldrb	r3, [r7, #18]
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	4413      	add	r3, r2
 800b758:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d003      	beq.n	800b768 <_ZN3BTD14HCI_event_taskEv+0x4c8>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800b760:	7cbb      	ldrb	r3, [r7, #18]
 800b762:	3301      	adds	r3, #1
 800b764:	74bb      	strb	r3, [r7, #18]
 800b766:	e7e4      	b.n	800b732 <_ZN3BTD14HCI_event_taskEv+0x492>
                                                        break;
 800b768:	bf00      	nop
                                        }
                                        // TODO: Always set '\0' in remote name!
                                        hci_set_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b770:	f043 0308 	orr.w	r3, r3, #8
 800b774:	b29a      	uxth	r2, r3
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800b77c:	e0a2      	b.n	800b8c4 <_ZN3BTD14HCI_event_taskEv+0x624>

                        case EV_INCOMING_CONNECT:
                                for(uint8_t i = 0; i < 6; i++)
 800b77e:	2300      	movs	r3, #0
 800b780:	747b      	strb	r3, [r7, #17]
 800b782:	7c7b      	ldrb	r3, [r7, #17]
 800b784:	2b05      	cmp	r3, #5
 800b786:	d80e      	bhi.n	800b7a6 <_ZN3BTD14HCI_event_taskEv+0x506>
                                        disc_bdaddr[i] = hcibuf[i + 2];
 800b788:	7c7b      	ldrb	r3, [r7, #17]
 800b78a:	1c9a      	adds	r2, r3, #2
 800b78c:	7c7b      	ldrb	r3, [r7, #17]
 800b78e:	6879      	ldr	r1, [r7, #4]
 800b790:	440a      	add	r2, r1
 800b792:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	4413      	add	r3, r2
 800b79a:	460a      	mov	r2, r1
 800b79c:	771a      	strb	r2, [r3, #28]
                                for(uint8_t i = 0; i < 6; i++)
 800b79e:	7c7b      	ldrb	r3, [r7, #17]
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	747b      	strb	r3, [r7, #17]
 800b7a4:	e7ed      	b.n	800b782 <_ZN3BTD14HCI_event_taskEv+0x4e2>

                                for(uint8_t i = 0; i < 3; i++)
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	743b      	strb	r3, [r7, #16]
 800b7aa:	7c3b      	ldrb	r3, [r7, #16]
 800b7ac:	2b02      	cmp	r3, #2
 800b7ae:	d810      	bhi.n	800b7d2 <_ZN3BTD14HCI_event_taskEv+0x532>
                                        classOfDevice[i] = hcibuf[i + 8];
 800b7b0:	7c3b      	ldrb	r3, [r7, #16]
 800b7b2:	f103 0208 	add.w	r2, r3, #8
 800b7b6:	7c3b      	ldrb	r3, [r7, #16]
 800b7b8:	6879      	ldr	r1, [r7, #4]
 800b7ba:	440a      	add	r2, r1
 800b7bc:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800b7c0:	687a      	ldr	r2, [r7, #4]
 800b7c2:	4413      	add	r3, r2
 800b7c4:	460a      	mov	r2, r1
 800b7c6:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                for(uint8_t i = 0; i < 3; i++)
 800b7ca:	7c3b      	ldrb	r3, [r7, #16]
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	743b      	strb	r3, [r7, #16]
 800b7d0:	e7eb      	b.n	800b7aa <_ZN3BTD14HCI_event_taskEv+0x50a>

                                if((classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800b7d8:	f003 030f 	and.w	r3, r3, #15
 800b7dc:	2b05      	cmp	r3, #5
 800b7de:	d10a      	bne.n	800b7f6 <_ZN3BTD14HCI_event_taskEv+0x556>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800b7e6:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d003      	beq.n	800b7f6 <_ZN3BTD14HCI_event_taskEv+0x556>
                                        if(classOfDevice[0] & 0x40)
                                                Notify(PSTR("\r\nKeyboard is connecting"), 0x80);
                                        if(classOfDevice[0] & 0x08)
                                                Notify(PSTR("\r\nGamepad is connecting"), 0x80);
#endif
                                        incomingHIDDevice = true;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif
                                hci_set_flag(HCI_FLAG_INCOMING_REQUEST);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b7fc:	f043 0310 	orr.w	r3, r3, #16
 800b800:	b29a      	uxth	r2, r3
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                break;
 800b808:	e05f      	b.n	800b8ca <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_PIN_CODE_REQUEST:
                                if(pairWithWii) {
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b810:	2b00      	cmp	r3, #0
 800b812:	d003      	beq.n	800b81c <_ZN3BTD14HCI_event_taskEv+0x57c>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPairing with Wiimote"), 0x80);
#endif
                                        hci_pin_code_request_reply();
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f000 feec 	bl	800c5f2 <_ZN3BTD26hci_pin_code_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
#endif
                                        hci_pin_code_negative_request_reply();
                                }
                                break;
 800b81a:	e056      	b.n	800b8ca <_ZN3BTD14HCI_event_taskEv+0x62a>
                                } else if(btdPin != NULL) {
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	691b      	ldr	r3, [r3, #16]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d003      	beq.n	800b82c <_ZN3BTD14HCI_event_taskEv+0x58c>
                                        hci_pin_code_request_reply();
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f000 fee4 	bl	800c5f2 <_ZN3BTD26hci_pin_code_request_replyEv>
                                break;
 800b82a:	e04e      	b.n	800b8ca <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_pin_code_negative_request_reply();
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 ff93 	bl	800c758 <_ZN3BTD35hci_pin_code_negative_request_replyEv>
                                break;
 800b832:	e04a      	b.n	800b8ca <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_LINK_KEY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived Key Request"), 0x80);
#endif
                                hci_link_key_request_negative_reply();
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 ffca 	bl	800c7ce <_ZN3BTD35hci_link_key_request_negative_replyEv>
                                break;
 800b83a:	e046      	b.n	800b8ca <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_AUTHENTICATION_COMPLETE:
                                if(!hcibuf[2]) { // Check if pairing was successful
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800b842:	2b00      	cmp	r3, #0
 800b844:	d123      	bne.n	800b88e <_ZN3BTD14HCI_event_taskEv+0x5ee>
                                        if(pairWithWii && !connectToWii) {
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d00c      	beq.n	800b86a <_ZN3BTD14HCI_event_taskEv+0x5ca>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b856:	f083 0301 	eor.w	r3, r3, #1
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d004      	beq.n	800b86a <_ZN3BTD14HCI_event_taskEv+0x5ca>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nPairing successful with Wiimote"), 0x80);
#endif
                                                connectToWii = true; // Used to indicate to the Wii service, that it should connect to this device
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2201      	movs	r2, #1
 800b864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                        hci_disconnect(hci_handle);
                                        hci_state = HCI_DISCONNECT_STATE;
                                }
                                break;
 800b868:	e02e      	b.n	800b8c8 <_ZN3BTD14HCI_event_taskEv+0x628>
                                        } else if(pairWithHIDDevice && !connectToHIDDevice) {
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800b870:	2b00      	cmp	r3, #0
 800b872:	d029      	beq.n	800b8c8 <_ZN3BTD14HCI_event_taskEv+0x628>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b87a:	f083 0301 	eor.w	r3, r3, #1
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	2b00      	cmp	r3, #0
 800b882:	d021      	beq.n	800b8c8 <_ZN3BTD14HCI_event_taskEv+0x628>
                                                connectToHIDDevice = true; // Used to indicate to the BTHID service, that it should connect to this device
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2201      	movs	r2, #1
 800b888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                break;
 800b88c:	e01c      	b.n	800b8c8 <_ZN3BTD14HCI_event_taskEv+0x628>
                                        hci_disconnect(hci_handle);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	8b5b      	ldrh	r3, [r3, #26]
 800b892:	4619      	mov	r1, r3
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f001 f882 	bl	800c99e <_ZN3BTD14hci_disconnectEt>
                                        hci_state = HCI_DISCONNECT_STATE;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2210      	movs	r2, #16
 800b89e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800b8a2:	e011      	b.n	800b8c8 <_ZN3BTD14HCI_event_taskEv+0x628>

                        case EV_IO_CAPABILITY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived IO Capability Request"), 0x80);
#endif
                                hci_io_capability_request_reply();
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f000 ffcd 	bl	800c844 <_ZN3BTD31hci_io_capability_request_replyEv>
                                break;
 800b8aa:	e00e      	b.n	800b8ca <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                }
#endif
#endif
                                // Simply confirm the connection, as the host has no "NoInputNoOutput" capabilities
                                hci_user_confirmation_request_reply();
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f001 f810 	bl	800c8d2 <_ZN3BTD35hci_user_confirmation_request_replyEv>
                                break;
 800b8b2:	e00a      	b.n	800b8ca <_ZN3BTD14HCI_event_taskEv+0x62a>
                                if(hcibuf[0] != 0x00) {
                                        Notify(PSTR("\r\nIgnore HCI Event: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[0], 0x80);
                                }
#endif
                                break;
 800b8b4:	bf00      	nop
 800b8b6:	e008      	b.n	800b8ca <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800b8b8:	bf00      	nop
 800b8ba:	e006      	b.n	800b8ca <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800b8bc:	bf00      	nop
 800b8be:	e004      	b.n	800b8ca <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800b8c0:	bf00      	nop
 800b8c2:	e002      	b.n	800b8ca <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800b8c4:	bf00      	nop
 800b8c6:	e000      	b.n	800b8ca <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800b8c8:	bf00      	nop
        else {
                Notify(PSTR("\r\nHCI event error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
}
 800b8ca:	bf00      	nop
 800b8cc:	3718      	adds	r7, #24
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bdb0      	pop	{r4, r5, r7, pc}
 800b8d2:	bf00      	nop

0800b8d4 <_ZN3BTD8HCI_taskEv>:

/* Poll Bluetooth and print result */
void BTD::HCI_task() {
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
        switch(hci_state) {
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b8e2:	2b13      	cmp	r3, #19
 800b8e4:	f200 82ef 	bhi.w	800bec6 <_ZN3BTD8HCI_taskEv+0x5f2>
 800b8e8:	a201      	add	r2, pc, #4	; (adr r2, 800b8f0 <_ZN3BTD8HCI_taskEv+0x1c>)
 800b8ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8ee:	bf00      	nop
 800b8f0:	0800b941 	.word	0x0800b941
 800b8f4:	0800b97b 	.word	0x0800b97b
 800b8f8:	0800ba01 	.word	0x0800ba01
 800b8fc:	0800ba21 	.word	0x0800ba21
 800b900:	0800ba41 	.word	0x0800ba41
 800b904:	0800ba95 	.word	0x0800ba95
 800b908:	0800bb3b 	.word	0x0800bb3b
 800b90c:	0800bb69 	.word	0x0800bb69
 800b910:	0800bba3 	.word	0x0800bba3
 800b914:	0800bbcb 	.word	0x0800bbcb
 800b918:	0800bc01 	.word	0x0800bc01
 800b91c:	0800bc5f 	.word	0x0800bc5f
 800b920:	0800bc9d 	.word	0x0800bc9d
 800b924:	0800bdc3 	.word	0x0800bdc3
 800b928:	0800bec7 	.word	0x0800bec7
 800b92c:	0800be09 	.word	0x0800be09
 800b930:	0800be37 	.word	0x0800be37
 800b934:	0800bacb 	.word	0x0800bacb
 800b938:	0800bb01 	.word	0x0800bb01
 800b93c:	0800bb21 	.word	0x0800bb21
                case HCI_INIT_STATE:
                        hci_counter++;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800b946:	3301      	adds	r3, #1
 800b948:	b29a      	uxth	r2, r3
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > hci_num_reset_loops) { // wait until we have looped x times to clear any old events
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800b95c:	429a      	cmp	r2, r3
 800b95e:	f240 82b4 	bls.w	800beca <_ZN3BTD8HCI_taskEv+0x5f6>
                                hci_reset();
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 fb7d 	bl	800c062 <_ZN3BTD9hci_resetEv>
                                hci_state = HCI_RESET_STATE;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2201      	movs	r2, #1
 800b96c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        }
                        break;
 800b978:	e2a7      	b.n	800beca <_ZN3BTD8HCI_taskEv+0x5f6>

                case HCI_RESET_STATE:
                        hci_counter++;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800b980:	3301      	adds	r3, #1
 800b982:	b29a      	uxth	r2, r3
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b990:	f003 0301 	and.w	r3, r3, #1
 800b994:	2b00      	cmp	r3, #0
 800b996:	d00b      	beq.n	800b9b0 <_ZN3BTD8HCI_taskEv+0xdc>
                                hci_counter = 0;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2200      	movs	r2, #0
 800b99c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Reset complete"), 0x80);
#endif
                                hci_state = HCI_CLASS_STATE;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2202      	movs	r2, #2
 800b9a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_write_class_of_device();
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f001 f830 	bl	800ca0e <_ZN3BTD25hci_write_class_of_deviceEv>
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
#endif
                                hci_state = HCI_INIT_STATE;
                                hci_counter = 0;
                        }
                        break;
 800b9ae:	e28e      	b.n	800bece <_ZN3BTD8HCI_taskEv+0x5fa>
                        } else if(hci_counter > hci_num_reset_loops) {
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	f240 8286 	bls.w	800bece <_ZN3BTD8HCI_taskEv+0x5fa>
                                hci_num_reset_loops *= 10;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	0092      	lsls	r2, r2, #2
 800b9cc:	4413      	add	r3, r2
 800b9ce:	005b      	lsls	r3, r3, #1
 800b9d0:	b29a      	uxth	r2, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                if(hci_num_reset_loops > 2000)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800b9de:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b9e2:	d904      	bls.n	800b9ee <_ZN3BTD8HCI_taskEv+0x11a>
                                        hci_num_reset_loops = 2000;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b9ea:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                hci_state = HCI_INIT_STATE;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        break;
 800b9fe:	e266      	b.n	800bece <_ZN3BTD8HCI_taskEv+0x5fa>

                case HCI_CLASS_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ba06:	f003 0301 	and.w	r3, r3, #1
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	f000 8261 	beq.w	800bed2 <_ZN3BTD8HCI_taskEv+0x5fe>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWrite class of device"), 0x80);
#endif
                                hci_state = HCI_BDADDR_STATE;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2203      	movs	r2, #3
 800ba14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_read_bdaddr();
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 fb72 	bl	800c102 <_ZN3BTD15hci_read_bdaddrEv>
                        }
                        break;
 800ba1e:	e258      	b.n	800bed2 <_ZN3BTD8HCI_taskEv+0x5fe>

                case HCI_BDADDR_STATE:
                        if(hci_check_flag(HCI_FLAG_READ_BDADDR)) {
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ba26:	f003 0320 	and.w	r3, r3, #32
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	f000 8253 	beq.w	800bed6 <_ZN3BTD8HCI_taskEv+0x602>
                                        D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                                hci_read_local_version_information();
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 fb8a 	bl	800c14a <_ZN3BTD34hci_read_local_version_informationEv>
                                hci_state = HCI_LOCAL_VERSION_STATE;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2204      	movs	r2, #4
 800ba3a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ba3e:	e24a      	b.n	800bed6 <_ZN3BTD8HCI_taskEv+0x602>

                case HCI_LOCAL_VERSION_STATE: // The local version is used by the PS3BT class
                        if(hci_check_flag(HCI_FLAG_READ_VERSION)) {
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ba46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	f000 8245 	beq.w	800beda <_ZN3BTD8HCI_taskEv+0x606>
                                if(btdName != NULL) {
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	68db      	ldr	r3, [r3, #12]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d00a      	beq.n	800ba6e <_ZN3BTD8HCI_taskEv+0x19a>
                                        hci_write_local_name(btdName);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f000 fc5d 	bl	800c31e <_ZN3BTD20hci_write_local_nameEPKc>
                                        hci_state = HCI_WRITE_NAME_STATE;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2205      	movs	r2, #5
 800ba68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800ba6c:	e235      	b.n	800beda <_ZN3BTD8HCI_taskEv+0x606>
                                } else if(useSimplePairing) {
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d008      	beq.n	800ba8a <_ZN3BTD8HCI_taskEv+0x1b6>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800ba78:	2100      	movs	r1, #0
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 fb89 	bl	800c192 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2211      	movs	r2, #17
 800ba84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800ba88:	e227      	b.n	800beda <_ZN3BTD8HCI_taskEv+0x606>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2206      	movs	r2, #6
 800ba8e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800ba92:	e222      	b.n	800beda <_ZN3BTD8HCI_taskEv+0x606>

                case HCI_WRITE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ba9a:	f003 0301 	and.w	r3, r3, #1
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	f000 821d 	beq.w	800bede <_ZN3BTD8HCI_taskEv+0x60a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nThe name was set to: "), 0x80);
                                NotifyStr(btdName, 0x80);
#endif
                                if(useSimplePairing) {
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d008      	beq.n	800bac0 <_ZN3BTD8HCI_taskEv+0x1ec>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800baae:	2100      	movs	r1, #0
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f000 fb6e 	bl	800c192 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2211      	movs	r2, #17
 800baba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800babe:	e20e      	b.n	800bede <_ZN3BTD8HCI_taskEv+0x60a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2206      	movs	r2, #6
 800bac4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800bac8:	e209      	b.n	800bede <_ZN3BTD8HCI_taskEv+0x60a>

                case HCI_LOCAL_EXTENDED_FEATURES_STATE:
                        if(hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800bad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	f000 8204 	beq.w	800bee2 <_ZN3BTD8HCI_taskEv+0x60e>
                                if(simple_pairing_supported) {
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d008      	beq.n	800baf6 <_ZN3BTD8HCI_taskEv+0x222>
                                        hci_write_simple_pairing_mode(true);
 800bae4:	2101      	movs	r1, #1
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 fc9d 	bl	800c426 <_ZN3BTD29hci_write_simple_pairing_modeEb>
                                        hci_state = HCI_WRITE_SIMPLE_PAIRING_STATE;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2212      	movs	r2, #18
 800baf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800baf4:	e1f5      	b.n	800bee2 <_ZN3BTD8HCI_taskEv+0x60e>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2206      	movs	r2, #6
 800bafa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800bafe:	e1f0      	b.n	800bee2 <_ZN3BTD8HCI_taskEv+0x60e>

                case HCI_WRITE_SIMPLE_PAIRING_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800bb06:	f003 0301 	and.w	r3, r3, #1
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	f000 81eb 	beq.w	800bee6 <_ZN3BTD8HCI_taskEv+0x612>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSimple pairing was enabled"), 0x80);
#endif
                                hci_set_event_mask();
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f000 fc4d 	bl	800c3b0 <_ZN3BTD18hci_set_event_maskEv>
                                hci_state = HCI_SET_EVENT_MASK_STATE;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2213      	movs	r2, #19
 800bb1a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800bb1e:	e1e2      	b.n	800bee6 <_ZN3BTD8HCI_taskEv+0x612>

                case HCI_SET_EVENT_MASK_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800bb26:	f003 0301 	and.w	r3, r3, #1
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	f000 81dd 	beq.w	800beea <_ZN3BTD8HCI_taskEv+0x616>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSet event mask completed"), 0x80);
#endif
                                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2206      	movs	r2, #6
 800bb34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800bb38:	e1d7      	b.n	800beea <_ZN3BTD8HCI_taskEv+0x616>

                case HCI_CHECK_DEVICE_SERVICE:
                        if(pairWithHIDDevice || pairWithWii) { // Check if it should try to connect to a Wiimote
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d104      	bne.n	800bb4e <_ZN3BTD8HCI_taskEv+0x27a>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d007      	beq.n	800bb5e <_ZN3BTD8HCI_taskEv+0x28a>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nStarting inquiry\r\nPress 1 & 2 on the Wiimote\r\nOr press the SYNC button if you are using a Wii U Pro Controller or a Wii Balance Board"), 0x80);
                                else
                                        Notify(PSTR("\r\nPlease enable discovery of your device"), 0x80);
#endif
                                hci_inquiry();
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 fc8f 	bl	800c472 <_ZN3BTD11hci_inquiryEv>
                                hci_state = HCI_INQUIRY_STATE;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2207      	movs	r2, #7
 800bb58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
                        break;
 800bb5c:	e1d8      	b.n	800bf10 <_ZN3BTD8HCI_taskEv+0x63c>
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	220a      	movs	r2, #10
 800bb62:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800bb66:	e1d3      	b.n	800bf10 <_ZN3BTD8HCI_taskEv+0x63c>

                case HCI_INQUIRY_STATE:
                        if(hci_check_flag(HCI_FLAG_DEVICE_FOUND)) {
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800bb6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	f000 81bb 	beq.w	800beee <_ZN3BTD8HCI_taskEv+0x61a>
                                hci_inquiry_cancel(); // Stop inquiry
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 fcb2 	bl	800c4e2 <_ZN3BTD18hci_inquiry_cancelEv>
                                if(pairWithWii)
                                        Notify(PSTR("Wiimote"), 0x80);
                                else
                                        Notify(PSTR("device"), 0x80);
#endif
                                if(checkRemoteName) {
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d007      	beq.n	800bb98 <_ZN3BTD8HCI_taskEv+0x2c4>
                                        hci_remote_name(); // We need to know the name to distinguish between the Wiimote, the new Wiimote with Motion Plus inside, a Wii U Pro Controller and a Wii Balance Board
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f000 fb74 	bl	800c276 <_ZN3BTD15hci_remote_nameEv>
                                        hci_state = HCI_REMOTE_NAME_STATE;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	220c      	movs	r2, #12
 800bb92:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
                        }
                        break;
 800bb96:	e1aa      	b.n	800beee <_ZN3BTD8HCI_taskEv+0x61a>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2208      	movs	r2, #8
 800bb9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800bba0:	e1a5      	b.n	800beee <_ZN3BTD8HCI_taskEv+0x61a>

                case HCI_CONNECT_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800bba8:	f003 0301 	and.w	r3, r3, #1
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	f000 81a0 	beq.w	800bef2 <_ZN3BTD8HCI_taskEv+0x61e>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nConnecting to Wiimote"), 0x80);
                                else
                                        Notify(PSTR("\r\nConnecting to HID device"), 0x80);
#endif
                                checkRemoteName = false;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                                hci_connect();
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 fcac 	bl	800c518 <_ZN3BTD11hci_connectEv>
                                hci_state = HCI_CONNECTED_DEVICE_STATE;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2209      	movs	r2, #9
 800bbc4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800bbc8:	e193      	b.n	800bef2 <_ZN3BTD8HCI_taskEv+0x61e>

                case HCI_CONNECTED_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_EVENT)) {
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800bbd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	f000 818e 	beq.w	800bef6 <_ZN3BTD8HCI_taskEv+0x622>
                                if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800bbe0:	f003 0302 	and.w	r3, r3, #2
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d007      	beq.n	800bbf8 <_ZN3BTD8HCI_taskEv+0x324>
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nConnected to Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nConnected to HID device"), 0x80);
#endif
                                        hci_authentication_request(); // This will start the pairing with the device
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 fead 	bl	800c948 <_ZN3BTD26hci_authentication_requestEv>
                                        hci_state = HCI_SCANNING_STATE;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	220a      	movs	r2, #10
 800bbf2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
#endif
                                        hci_connect(); // Try to connect one more time
                                }
                        }
                        break;
 800bbf6:	e17e      	b.n	800bef6 <_ZN3BTD8HCI_taskEv+0x622>
                                        hci_connect(); // Try to connect one more time
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 fc8d 	bl	800c518 <_ZN3BTD11hci_connectEv>
                        break;
 800bbfe:	e17a      	b.n	800bef6 <_ZN3BTD8HCI_taskEv+0x622>

                case HCI_SCANNING_STATE:
                        if(!connectToWii && !pairWithWii && !connectToHIDDevice && !pairWithHIDDevice) {
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc06:	f083 0301 	eor.w	r3, r3, #1
 800bc0a:	b2db      	uxtb	r3, r3
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	f000 8174 	beq.w	800befa <_ZN3BTD8HCI_taskEv+0x626>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bc18:	f083 0301 	eor.w	r3, r3, #1
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	f000 816b 	beq.w	800befa <_ZN3BTD8HCI_taskEv+0x626>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bc2a:	f083 0301 	eor.w	r3, r3, #1
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	f000 8162 	beq.w	800befa <_ZN3BTD8HCI_taskEv+0x626>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800bc3c:	f083 0301 	eor.w	r3, r3, #1
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	f000 8159 	beq.w	800befa <_ZN3BTD8HCI_taskEv+0x626>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWait For Incoming Connection Request"), 0x80);
#endif
                                hci_write_scan_enable();
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 fa29 	bl	800c0a0 <_ZN3BTD21hci_write_scan_enableEv>
                                waitingForConnection = true;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2201      	movs	r2, #1
 800bc52:	721a      	strb	r2, [r3, #8]
                                hci_state = HCI_CONNECT_IN_STATE;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	220b      	movs	r2, #11
 800bc58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800bc5c:	e14d      	b.n	800befa <_ZN3BTD8HCI_taskEv+0x626>

                case HCI_CONNECT_IN_STATE:
                        if(hci_check_flag(HCI_FLAG_INCOMING_REQUEST)) {
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800bc64:	f003 0310 	and.w	r3, r3, #16
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d00a      	beq.n	800bc82 <_ZN3BTD8HCI_taskEv+0x3ae>
                                waitingForConnection = false;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	721a      	strb	r2, [r3, #8]
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nIncoming Connection Request"), 0x80);
#endif
                                hci_remote_name();
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 faff 	bl	800c276 <_ZN3BTD15hci_remote_nameEv>
                                hci_state = HCI_REMOTE_NAME_STATE;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	220c      	movs	r2, #12
 800bc7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
                                hci_state = HCI_DISCONNECT_STATE;
                        break;
 800bc80:	e13d      	b.n	800befe <_ZN3BTD8HCI_taskEv+0x62a>
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800bc88:	f003 0304 	and.w	r3, r3, #4
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	f000 8136 	beq.w	800befe <_ZN3BTD8HCI_taskEv+0x62a>
                                hci_state = HCI_DISCONNECT_STATE;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2210      	movs	r2, #16
 800bc96:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800bc9a:	e130      	b.n	800befe <_ZN3BTD8HCI_taskEv+0x62a>

                case HCI_REMOTE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_REMOTE_NAME_COMPLETE)) {
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800bca2:	f003 0308 	and.w	r3, r3, #8
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	f000 812b 	beq.w	800bf02 <_ZN3BTD8HCI_taskEv+0x62e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nRemote Name: "), 0x80);
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
                                        Notifyc(remote_name[i], 0x80);
#endif
                                if(strncmp((const char*)remote_name, "Nintendo", 8) == 0) {
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	3322      	adds	r3, #34	; 0x22
 800bcb0:	2208      	movs	r2, #8
 800bcb2:	4999      	ldr	r1, [pc, #612]	; (800bf18 <_ZN3BTD8HCI_taskEv+0x644>)
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f004 ffc7 	bl	8010c48 <strncmp>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d147      	bne.n	800bd50 <_ZN3BTD8HCI_taskEv+0x47c>
                                        incomingWii = true;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                                        motionPlusInside = false;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2200      	movs	r2, #0
 800bccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                                        wiiUProController = false;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                                        pairWiiUsingSync = false;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nWiimote is connecting"), 0x80);
#endif
                                        if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-TR", 22) == 0) {
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	3322      	adds	r3, #34	; 0x22
 800bce4:	2216      	movs	r2, #22
 800bce6:	498d      	ldr	r1, [pc, #564]	; (800bf1c <_ZN3BTD8HCI_taskEv+0x648>)
 800bce8:	4618      	mov	r0, r3
 800bcea:	f004 ffad 	bl	8010c48 <strncmp>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d104      	bne.n	800bcfe <_ZN3BTD8HCI_taskEv+0x42a>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" with Motion Plus Inside"), 0x80);
#endif
                                                motionPlusInside = true;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcfc:	e028      	b.n	800bd50 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-UC", 22) == 0) {
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	3322      	adds	r3, #34	; 0x22
 800bd02:	2216      	movs	r2, #22
 800bd04:	4986      	ldr	r1, [pc, #536]	; (800bf20 <_ZN3BTD8HCI_taskEv+0x64c>)
 800bd06:	4618      	mov	r0, r3
 800bd08:	f004 ff9e 	bl	8010c48 <strncmp>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d110      	bne.n	800bd34 <_ZN3BTD8HCI_taskEv+0x460>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii U Pro Controller"), 0x80);
#endif
                                                wiiUProController = motionPlusInside = pairWiiUsingSync = true;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2201      	movs	r2, #1
 800bd16:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd32:	e00d      	b.n	800bd50 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-WBC-01", 19) == 0) {
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	3322      	adds	r3, #34	; 0x22
 800bd38:	2213      	movs	r2, #19
 800bd3a:	497a      	ldr	r1, [pc, #488]	; (800bf24 <_ZN3BTD8HCI_taskEv+0x650>)
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f004 ff83 	bl	8010c48 <strncmp>
 800bd42:	4603      	mov	r3, r0
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d103      	bne.n	800bd50 <_ZN3BTD8HCI_taskEv+0x47c>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii Balance Board"), 0x80);
#endif
                                                pairWiiUsingSync = true;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
                                        }
                                }
                                if(classOfDevice[2] == 0 && classOfDevice[1] == 0x25 && classOfDevice[0] == 0x08 && strncmp((const char*)remote_name, "Wireless Controller", 19) == 0) {
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d117      	bne.n	800bd8a <_ZN3BTD8HCI_taskEv+0x4b6>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800bd60:	2b25      	cmp	r3, #37	; 0x25
 800bd62:	d112      	bne.n	800bd8a <_ZN3BTD8HCI_taskEv+0x4b6>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800bd6a:	2b08      	cmp	r3, #8
 800bd6c:	d10d      	bne.n	800bd8a <_ZN3BTD8HCI_taskEv+0x4b6>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	3322      	adds	r3, #34	; 0x22
 800bd72:	2213      	movs	r2, #19
 800bd74:	496c      	ldr	r1, [pc, #432]	; (800bf28 <_ZN3BTD8HCI_taskEv+0x654>)
 800bd76:	4618      	mov	r0, r3
 800bd78:	f004 ff66 	bl	8010c48 <strncmp>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d103      	bne.n	800bd8a <_ZN3BTD8HCI_taskEv+0x4b6>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPS4/PS5 controller is connecting"), 0x80);
#endif
                                        incomingPSController = true;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2201      	movs	r2, #1
 800bd86:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                                }
                                if((pairWithWii || pairWithHIDDevice) && checkRemoteName)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d104      	bne.n	800bd9e <_ZN3BTD8HCI_taskEv+0x4ca>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d009      	beq.n	800bdb2 <_ZN3BTD8HCI_taskEv+0x4de>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d004      	beq.n	800bdb2 <_ZN3BTD8HCI_taskEv+0x4de>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2208      	movs	r2, #8
 800bdac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                else {
                                        hci_accept_connection();
                                        hci_state = HCI_CONNECTED_STATE;
                                }
                        }
                        break;
 800bdb0:	e0a7      	b.n	800bf02 <_ZN3BTD8HCI_taskEv+0x62e>
                                        hci_accept_connection();
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 fa17 	bl	800c1e6 <_ZN3BTD21hci_accept_connectionEv>
                                        hci_state = HCI_CONNECTED_STATE;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	220d      	movs	r2, #13
 800bdbc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800bdc0:	e09f      	b.n	800bf02 <_ZN3BTD8HCI_taskEv+0x62e>

                case HCI_CONNECTED_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800bdc8:	f003 0302 	and.w	r3, r3, #2
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	f000 809a 	beq.w	800bf06 <_ZN3BTD8HCI_taskEv+0x632>
                                        D_PrintHex<uint8_t > (disc_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (disc_bdaddr[0], 0x80);
#endif
                                if(incomingPSController)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d003      	beq.n	800bde4 <_ZN3BTD8HCI_taskEv+0x510>
                                        connectToHIDDevice = true; // We should always connect to the PS4/PS5 controller
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2201      	movs	r2, #1
 800bde0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

                                // Clear these flags for a new connection
                                l2capConnectionClaimed = false;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2200      	movs	r2, #0
 800bde8:	725a      	strb	r2, [r3, #9]
                                sdpConnectionClaimed = false;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2200      	movs	r2, #0
 800bdee:	729a      	strb	r2, [r3, #10]
                                rfcommConnectionClaimed = false;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	72da      	strb	r2, [r3, #11]

                                hci_event_flag = 0;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                hci_state = HCI_DONE_STATE;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	220f      	movs	r2, #15
 800be02:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800be06:	e07e      	b.n	800bf06 <_ZN3BTD8HCI_taskEv+0x632>

                case HCI_DONE_STATE:
                        hci_counter++;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800be0e:	3301      	adds	r3, #1
 800be10:	b29a      	uxth	r2, r3
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > 1000) { // Wait until we have looped 1000 times to make sure that the L2CAP connection has been started
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800be1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be22:	d972      	bls.n	800bf0a <_ZN3BTD8HCI_taskEv+0x636>
                                hci_counter = 0;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2200      	movs	r2, #0
 800be28:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                                hci_state = HCI_SCANNING_STATE;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	220a      	movs	r2, #10
 800be30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800be34:	e069      	b.n	800bf0a <_ZN3BTD8HCI_taskEv+0x636>

                case HCI_DISCONNECT_STATE:
                        if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE)) {
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800be3c:	f003 0304 	and.w	r3, r3, #4
 800be40:	2b00      	cmp	r3, #0
 800be42:	d064      	beq.n	800bf0e <_ZN3BTD8HCI_taskEv+0x63a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Disconnected from Device"), 0x80);
#endif
                                hci_event_flag = 0; // Clear all flags
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2200      	movs	r2, #0
 800be48:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

                                // Reset all buffers
                                memset(hcibuf, 0, BULK_MAXPKTSIZE);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	3389      	adds	r3, #137	; 0x89
 800be50:	2240      	movs	r2, #64	; 0x40
 800be52:	2100      	movs	r1, #0
 800be54:	4618      	mov	r0, r3
 800be56:	f004 feab 	bl	8010bb0 <memset>
                                memset(l2capinbuf, 0, BULK_MAXPKTSIZE);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	33c9      	adds	r3, #201	; 0xc9
 800be5e:	2240      	movs	r2, #64	; 0x40
 800be60:	2100      	movs	r1, #0
 800be62:	4618      	mov	r0, r3
 800be64:	f004 fea4 	bl	8010bb0 <memset>

                                connectToWii = incomingWii = pairWithWii = false;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                connectToHIDDevice = incomingHIDDevice = pairWithHIDDevice = checkRemoteName = false;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                incomingPSController = false;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2200      	movs	r2, #0
 800beb8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

                                hci_state = HCI_SCANNING_STATE;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	220a      	movs	r2, #10
 800bec0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800bec4:	e023      	b.n	800bf0e <_ZN3BTD8HCI_taskEv+0x63a>
                default:
                        break;
 800bec6:	bf00      	nop
 800bec8:	e022      	b.n	800bf10 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800beca:	bf00      	nop
 800becc:	e020      	b.n	800bf10 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bece:	bf00      	nop
 800bed0:	e01e      	b.n	800bf10 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bed2:	bf00      	nop
 800bed4:	e01c      	b.n	800bf10 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bed6:	bf00      	nop
 800bed8:	e01a      	b.n	800bf10 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800beda:	bf00      	nop
 800bedc:	e018      	b.n	800bf10 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bede:	bf00      	nop
 800bee0:	e016      	b.n	800bf10 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bee2:	bf00      	nop
 800bee4:	e014      	b.n	800bf10 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bee6:	bf00      	nop
 800bee8:	e012      	b.n	800bf10 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800beea:	bf00      	nop
 800beec:	e010      	b.n	800bf10 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800beee:	bf00      	nop
 800bef0:	e00e      	b.n	800bf10 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bef2:	bf00      	nop
 800bef4:	e00c      	b.n	800bf10 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bef6:	bf00      	nop
 800bef8:	e00a      	b.n	800bf10 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800befa:	bf00      	nop
 800befc:	e008      	b.n	800bf10 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800befe:	bf00      	nop
 800bf00:	e006      	b.n	800bf10 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bf02:	bf00      	nop
 800bf04:	e004      	b.n	800bf10 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bf06:	bf00      	nop
 800bf08:	e002      	b.n	800bf10 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bf0a:	bf00      	nop
 800bf0c:	e000      	b.n	800bf10 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800bf0e:	bf00      	nop
        }
}
 800bf10:	bf00      	nop
 800bf12:	3708      	adds	r7, #8
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	08010e38 	.word	0x08010e38
 800bf1c:	08010e44 	.word	0x08010e44
 800bf20:	08010e5c 	.word	0x08010e5c
 800bf24:	08010e74 	.word	0x08010e74
 800bf28:	08010e88 	.word	0x08010e88

0800bf2c <_ZN3BTD14ACL_event_taskEv>:

void BTD::ACL_event_task() {
 800bf2c:	b5b0      	push	{r4, r5, r7, lr}
 800bf2e:	b086      	sub	sp, #24
 800bf30:	af02      	add	r7, sp, #8
 800bf32:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE;
 800bf34:	2340      	movs	r3, #64	; 0x40
 800bf36:	817b      	strh	r3, [r7, #10]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_DATAIN_PIPE ].epAddr, &length, l2capinbuf, pollInterval); // Input on endpoint 2
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f893 4057 	ldrb.w	r4, [r3, #87]	; 0x57
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	33c9      	adds	r3, #201	; 0xc9
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800bf52:	f107 050a 	add.w	r5, r7, #10
 800bf56:	9201      	str	r2, [sp, #4]
 800bf58:	9300      	str	r3, [sp, #0]
 800bf5a:	462b      	mov	r3, r5
 800bf5c:	4622      	mov	r2, r4
 800bf5e:	f003 f916 	bl	800f18e <_ZN3USB10inTransferEhhPtPhh>
 800bf62:	4603      	mov	r3, r0
 800bf64:	737b      	strb	r3, [r7, #13]

        if(!rcode) { // Check for errors
 800bf66:	7b7b      	ldrb	r3, [r7, #13]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d125      	bne.n	800bfb8 <_ZN3BTD14ACL_event_taskEv+0x8c>
                if(length > 0) { // Check if any data was read
 800bf6c:	897b      	ldrh	r3, [r7, #10]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d022      	beq.n	800bfb8 <_ZN3BTD14ACL_event_taskEv+0x8c>
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800bf72:	2300      	movs	r3, #0
 800bf74:	73fb      	strb	r3, [r7, #15]
 800bf76:	7bfb      	ldrb	r3, [r7, #15]
 800bf78:	2b03      	cmp	r3, #3
 800bf7a:	d81d      	bhi.n	800bfb8 <_ZN3BTD14ACL_event_taskEv+0x8c>
                                if(btService[i])
 800bf7c:	7bfb      	ldrb	r3, [r7, #15]
 800bf7e:	687a      	ldr	r2, [r7, #4]
 800bf80:	3318      	adds	r3, #24
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	4413      	add	r3, r2
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d011      	beq.n	800bfb0 <_ZN3BTD14ACL_event_taskEv+0x84>
                                        btService[i]->ACLData(l2capinbuf);
 800bf8c:	7bfb      	ldrb	r3, [r7, #15]
 800bf8e:	687a      	ldr	r2, [r7, #4]
 800bf90:	3318      	adds	r3, #24
 800bf92:	009b      	lsls	r3, r3, #2
 800bf94:	4413      	add	r3, r2
 800bf96:	6858      	ldr	r0, [r3, #4]
 800bf98:	7bfb      	ldrb	r3, [r7, #15]
 800bf9a:	687a      	ldr	r2, [r7, #4]
 800bf9c:	3318      	adds	r3, #24
 800bf9e:	009b      	lsls	r3, r3, #2
 800bfa0:	4413      	add	r3, r2
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	32c9      	adds	r2, #201	; 0xc9
 800bfac:	4611      	mov	r1, r2
 800bfae:	4798      	blx	r3
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800bfb0:	7bfb      	ldrb	r3, [r7, #15]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	73fb      	strb	r3, [r7, #15]
 800bfb6:	e7de      	b.n	800bf76 <_ZN3BTD14ACL_event_taskEv+0x4a>
        else if(rcode != hrNAK) {
                Notify(PSTR("\r\nACL data in error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800bfb8:	2300      	movs	r3, #0
 800bfba:	73bb      	strb	r3, [r7, #14]
 800bfbc:	7bbb      	ldrb	r3, [r7, #14]
 800bfbe:	2b03      	cmp	r3, #3
 800bfc0:	d81c      	bhi.n	800bffc <_ZN3BTD14ACL_event_taskEv+0xd0>
                if(btService[i])
 800bfc2:	7bbb      	ldrb	r3, [r7, #14]
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	3318      	adds	r3, #24
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	4413      	add	r3, r2
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d010      	beq.n	800bff4 <_ZN3BTD14ACL_event_taskEv+0xc8>
                        btService[i]->Run();
 800bfd2:	7bbb      	ldrb	r3, [r7, #14]
 800bfd4:	687a      	ldr	r2, [r7, #4]
 800bfd6:	3318      	adds	r3, #24
 800bfd8:	009b      	lsls	r3, r3, #2
 800bfda:	4413      	add	r3, r2
 800bfdc:	6859      	ldr	r1, [r3, #4]
 800bfde:	7bbb      	ldrb	r3, [r7, #14]
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	3318      	adds	r3, #24
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	4413      	add	r3, r2
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	3304      	adds	r3, #4
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4608      	mov	r0, r1
 800bff2:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800bff4:	7bbb      	ldrb	r3, [r7, #14]
 800bff6:	3301      	adds	r3, #1
 800bff8:	73bb      	strb	r3, [r7, #14]
 800bffa:	e7df      	b.n	800bfbc <_ZN3BTD14ACL_event_taskEv+0x90>
}
 800bffc:	bf00      	nop
 800bffe:	3710      	adds	r7, #16
 800c000:	46bd      	mov	sp, r7
 800c002:	bdb0      	pop	{r4, r5, r7, pc}

0800c004 <_ZN3BTD11HCI_CommandEPht>:

/************************************************************/
/*                    HCI Commands                        */

/************************************************************/
void BTD::HCI_Command(uint8_t* data, uint16_t nbytes) {
 800c004:	b580      	push	{r7, lr}
 800c006:	b08c      	sub	sp, #48	; 0x30
 800c008:	af08      	add	r7, sp, #32
 800c00a:	60f8      	str	r0, [r7, #12]
 800c00c:	60b9      	str	r1, [r7, #8]
 800c00e:	4613      	mov	r3, r2
 800c010:	80fb      	strh	r3, [r7, #6]
        hci_clear_flag(HCI_FLAG_CMD_COMPLETE);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c018:	f023 0301 	bic.w	r3, r3, #1
 800c01c:	b29a      	uxth	r2, r3
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        pUsb->ctrlReq(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bmREQ_HCI_OUT, 0x00, 0x00, 0x00, 0x00, nbytes, nbytes, data, NULL);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800c034:	2300      	movs	r3, #0
 800c036:	9307      	str	r3, [sp, #28]
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	9306      	str	r3, [sp, #24]
 800c03c:	88fb      	ldrh	r3, [r7, #6]
 800c03e:	9305      	str	r3, [sp, #20]
 800c040:	88fb      	ldrh	r3, [r7, #6]
 800c042:	9304      	str	r3, [sp, #16]
 800c044:	2300      	movs	r3, #0
 800c046:	9303      	str	r3, [sp, #12]
 800c048:	2300      	movs	r3, #0
 800c04a:	9302      	str	r3, [sp, #8]
 800c04c:	2300      	movs	r3, #0
 800c04e:	9301      	str	r3, [sp, #4]
 800c050:	2300      	movs	r3, #0
 800c052:	9300      	str	r3, [sp, #0]
 800c054:	2320      	movs	r3, #32
 800c056:	f002 ffc2 	bl	800efde <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800c05a:	bf00      	nop
 800c05c:	3710      	adds	r7, #16
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}

0800c062 <_ZN3BTD9hci_resetEv>:

void BTD::hci_reset() {
 800c062:	b580      	push	{r7, lr}
 800c064:	b082      	sub	sp, #8
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
        hci_event_flag = 0; // Clear all the flags
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2200      	movs	r2, #0
 800c06e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x03; // HCI OCF = 3
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2203      	movs	r2, #3
 800c076:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	220c      	movs	r2, #12
 800c07e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2200      	movs	r2, #0
 800c086:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	3389      	adds	r3, #137	; 0x89
 800c08e:	2203      	movs	r2, #3
 800c090:	4619      	mov	r1, r3
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f7ff ffb6 	bl	800c004 <_ZN3BTD11HCI_CommandEPht>
}
 800c098:	bf00      	nop
 800c09a:	3708      	adds	r7, #8
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <_ZN3BTD21hci_write_scan_enableEv>:

void BTD::hci_write_scan_enable() {
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_INCOMING_REQUEST);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c0ae:	f023 0310 	bic.w	r3, r3, #16
 800c0b2:	b29a      	uxth	r2, r3
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x1A; // HCI OCF = 1A
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	221a      	movs	r2, #26
 800c0be:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	220c      	movs	r2, #12
 800c0c6:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        if(btdName != NULL)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	68db      	ldr	r3, [r3, #12]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d004      	beq.n	800c0e4 <_ZN3BTD21hci_write_scan_enableEv+0x44>
                hcibuf[3] = 0x03; // Inquiry Scan enabled. Page Scan enabled.
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2203      	movs	r2, #3
 800c0de:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800c0e2:	e003      	b.n	800c0ec <_ZN3BTD21hci_write_scan_enableEv+0x4c>
        else
                hcibuf[3] = 0x02; // Inquiry Scan disabled. Page Scan enabled.
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2202      	movs	r2, #2
 800c0e8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	3389      	adds	r3, #137	; 0x89
 800c0f0:	2204      	movs	r2, #4
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f7ff ff85 	bl	800c004 <_ZN3BTD11HCI_CommandEPht>
}
 800c0fa:	bf00      	nop
 800c0fc:	3708      	adds	r7, #8
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}

0800c102 <_ZN3BTD15hci_read_bdaddrEv>:
        hcibuf[3] = 0x00; // Inquiry Scan disabled. Page Scan disabled.

        HCI_Command(hcibuf, 4);
}

void BTD::hci_read_bdaddr() {
 800c102:	b580      	push	{r7, lr}
 800c104:	b082      	sub	sp, #8
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_BDADDR);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c110:	f023 0320 	bic.w	r3, r3, #32
 800c114:	b29a      	uxth	r2, r3
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2209      	movs	r2, #9
 800c120:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2210      	movs	r2, #16
 800c128:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2200      	movs	r2, #0
 800c130:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	3389      	adds	r3, #137	; 0x89
 800c138:	2203      	movs	r2, #3
 800c13a:	4619      	mov	r1, r3
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f7ff ff61 	bl	800c004 <_ZN3BTD11HCI_CommandEPht>
}
 800c142:	bf00      	nop
 800c144:	3708      	adds	r7, #8
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}

0800c14a <_ZN3BTD34hci_read_local_version_informationEv>:

void BTD::hci_read_local_version_information() {
 800c14a:	b580      	push	{r7, lr}
 800c14c:	b082      	sub	sp, #8
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_VERSION);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c15c:	b29a      	uxth	r2, r3
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01; // HCI OCF = 1
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2201      	movs	r2, #1
 800c168:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2210      	movs	r2, #16
 800c170:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2200      	movs	r2, #0
 800c178:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	3389      	adds	r3, #137	; 0x89
 800c180:	2203      	movs	r2, #3
 800c182:	4619      	mov	r1, r3
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f7ff ff3d 	bl	800c004 <_ZN3BTD11HCI_CommandEPht>
}
 800c18a:	bf00      	nop
 800c18c:	3708      	adds	r7, #8
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}

0800c192 <_ZN3BTD32hci_read_local_extended_featuresEh>:

void BTD::hci_read_local_extended_features(uint8_t page_number) {
 800c192:	b580      	push	{r7, lr}
 800c194:	b082      	sub	sp, #8
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
 800c19a:	460b      	mov	r3, r1
 800c19c:	70fb      	strb	r3, [r7, #3]
        hci_clear_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c1a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c1a8:	b29a      	uxth	r2, r3
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x04; // HCI OCF = 4
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2204      	movs	r2, #4
 800c1b4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2210      	movs	r2, #16
 800c1bc:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = page_number;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	78fa      	ldrb	r2, [r7, #3]
 800c1cc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	3389      	adds	r3, #137	; 0x89
 800c1d4:	2204      	movs	r2, #4
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f7ff ff13 	bl	800c004 <_ZN3BTD11HCI_CommandEPht>
}
 800c1de:	bf00      	nop
 800c1e0:	3708      	adds	r7, #8
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}

0800c1e6 <_ZN3BTD21hci_accept_connectionEv>:

void BTD::hci_accept_connection() {
 800c1e6:	b580      	push	{r7, lr}
 800c1e8:	b082      	sub	sp, #8
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c1f4:	f023 0302 	bic.w	r3, r3, #2
 800c1f8:	b29a      	uxth	r2, r3
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2209      	movs	r2, #9
 800c204:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2204      	movs	r2, #4
 800c20c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x07; // parameter length 7
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2207      	movs	r2, #7
 800c214:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	7f1a      	ldrb	r2, [r3, #28]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	7f5a      	ldrb	r2, [r3, #29]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	7f9a      	ldrb	r2, [r3, #30]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	7fda      	ldrb	r2, [r3, #31]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f893 2020 	ldrb.w	r2, [r3, #32]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x00; // Switch role to master
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2200      	movs	r2, #0
 800c25c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

        HCI_Command(hcibuf, 10);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	3389      	adds	r3, #137	; 0x89
 800c264:	220a      	movs	r2, #10
 800c266:	4619      	mov	r1, r3
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f7ff fecb 	bl	800c004 <_ZN3BTD11HCI_CommandEPht>
}
 800c26e:	bf00      	nop
 800c270:	3708      	adds	r7, #8
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}

0800c276 <_ZN3BTD15hci_remote_nameEv>:

void BTD::hci_remote_name() {
 800c276:	b580      	push	{r7, lr}
 800c278:	b082      	sub	sp, #8
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c284:	f023 0308 	bic.w	r3, r3, #8
 800c288:	b29a      	uxth	r2, r3
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x19; // HCI OCF = 19
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2219      	movs	r2, #25
 800c294:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2204      	movs	r2, #4
 800c29c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0A; // parameter length = 10
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	220a      	movs	r2, #10
 800c2a4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	7f1a      	ldrb	r2, [r3, #28]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	7f5a      	ldrb	r2, [r3, #29]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	7f9a      	ldrb	r2, [r3, #30]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	7fda      	ldrb	r2, [r3, #31]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f893 2020 	ldrb.w	r2, [r3, #32]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x01; // Page Scan Repetition Mode
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // Reserved
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // Clock offset - low byte
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Clock offset - high byte
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2200      	movs	r2, #0
 800c304:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

        HCI_Command(hcibuf, 13);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	3389      	adds	r3, #137	; 0x89
 800c30c:	220d      	movs	r2, #13
 800c30e:	4619      	mov	r1, r3
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f7ff fe77 	bl	800c004 <_ZN3BTD11HCI_CommandEPht>
}
 800c316:	bf00      	nop
 800c318:	3708      	adds	r7, #8
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}

0800c31e <_ZN3BTD20hci_write_local_nameEPKc>:

void BTD::hci_write_local_name(const char* name) {
 800c31e:	b590      	push	{r4, r7, lr}
 800c320:	b085      	sub	sp, #20
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
 800c326:	6039      	str	r1, [r7, #0]
        hcibuf[0] = 0x13; // HCI OCF = 13
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2213      	movs	r2, #19
 800c32c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	220c      	movs	r2, #12
 800c334:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = strlen(name) + 1; // parameter length = the length of the string + end byte
 800c338:	6838      	ldr	r0, [r7, #0]
 800c33a:	f7f3 ff65 	bl	8000208 <strlen>
 800c33e:	4603      	mov	r3, r0
 800c340:	b2db      	uxtb	r3, r3
 800c342:	3301      	adds	r3, #1
 800c344:	b2da      	uxtb	r2, r3
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        uint8_t i;
        for(i = 0; i < strlen(name); i++)
 800c34c:	2300      	movs	r3, #0
 800c34e:	73fb      	strb	r3, [r7, #15]
 800c350:	7bfc      	ldrb	r4, [r7, #15]
 800c352:	6838      	ldr	r0, [r7, #0]
 800c354:	f7f3 ff58 	bl	8000208 <strlen>
 800c358:	4603      	mov	r3, r0
 800c35a:	429c      	cmp	r4, r3
 800c35c:	d20e      	bcs.n	800c37c <_ZN3BTD20hci_write_local_nameEPKc+0x5e>
                hcibuf[i + 3] = name[i];
 800c35e:	7bfb      	ldrb	r3, [r7, #15]
 800c360:	683a      	ldr	r2, [r7, #0]
 800c362:	441a      	add	r2, r3
 800c364:	7bfb      	ldrb	r3, [r7, #15]
 800c366:	3303      	adds	r3, #3
 800c368:	7811      	ldrb	r1, [r2, #0]
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	4413      	add	r3, r2
 800c36e:	460a      	mov	r2, r1
 800c370:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        for(i = 0; i < strlen(name); i++)
 800c374:	7bfb      	ldrb	r3, [r7, #15]
 800c376:	3301      	adds	r3, #1
 800c378:	73fb      	strb	r3, [r7, #15]
 800c37a:	e7e9      	b.n	800c350 <_ZN3BTD20hci_write_local_nameEPKc+0x32>
        hcibuf[i + 3] = 0x00; // End of string
 800c37c:	7bfb      	ldrb	r3, [r7, #15]
 800c37e:	3303      	adds	r3, #3
 800c380:	687a      	ldr	r2, [r7, #4]
 800c382:	4413      	add	r3, r2
 800c384:	2200      	movs	r2, #0
 800c386:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

        HCI_Command(hcibuf, 4 + strlen(name));
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f103 0489 	add.w	r4, r3, #137	; 0x89
 800c390:	6838      	ldr	r0, [r7, #0]
 800c392:	f7f3 ff39 	bl	8000208 <strlen>
 800c396:	4603      	mov	r3, r0
 800c398:	b29b      	uxth	r3, r3
 800c39a:	3304      	adds	r3, #4
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	461a      	mov	r2, r3
 800c3a0:	4621      	mov	r1, r4
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f7ff fe2e 	bl	800c004 <_ZN3BTD11HCI_CommandEPht>
}
 800c3a8:	bf00      	nop
 800c3aa:	3714      	adds	r7, #20
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd90      	pop	{r4, r7, pc}

0800c3b0 <_ZN3BTD18hci_set_event_maskEv>:

void BTD::hci_set_event_mask() {
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x01; // HCI OCF = 01
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	220c      	movs	r2, #12
 800c3c4:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x08;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2208      	movs	r2, #8
 800c3cc:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        // The first 6 bytes are the default of 1FFF FFFF FFFF
        // However we need to set bits 48-55 for simple pairing to work
        hcibuf[3] = 0xFF;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	22ff      	movs	r2, #255	; 0xff
 800c3d4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0xFF;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	22ff      	movs	r2, #255	; 0xff
 800c3dc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0xFF;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	22ff      	movs	r2, #255	; 0xff
 800c3e4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0xFF;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	22ff      	movs	r2, #255	; 0xff
 800c3ec:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0xFF;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	22ff      	movs	r2, #255	; 0xff
 800c3f4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = 0x1F;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	221f      	movs	r2, #31
 800c3fc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0xFF; // Enable bits 48-55 used for simple pairing
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	22ff      	movs	r2, #255	; 0xff
 800c404:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2200      	movs	r2, #0
 800c40c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

        HCI_Command(hcibuf, 11);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	3389      	adds	r3, #137	; 0x89
 800c414:	220b      	movs	r2, #11
 800c416:	4619      	mov	r1, r3
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f7ff fdf3 	bl	800c004 <_ZN3BTD11HCI_CommandEPht>
}
 800c41e:	bf00      	nop
 800c420:	3708      	adds	r7, #8
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}

0800c426 <_ZN3BTD29hci_write_simple_pairing_modeEb>:

void BTD::hci_write_simple_pairing_mode(bool enable) {
 800c426:	b580      	push	{r7, lr}
 800c428:	b082      	sub	sp, #8
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
 800c42e:	460b      	mov	r3, r1
 800c430:	70fb      	strb	r3, [r7, #3]
        hcibuf[0] = 0x56; // HCI OCF = 56
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2256      	movs	r2, #86	; 0x56
 800c436:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	220c      	movs	r2, #12
 800c43e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 1; // parameter length = 1
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2201      	movs	r2, #1
 800c446:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = enable ? 1 : 0;
 800c44a:	78fb      	ldrb	r3, [r7, #3]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d001      	beq.n	800c454 <_ZN3BTD29hci_write_simple_pairing_modeEb+0x2e>
 800c450:	2201      	movs	r2, #1
 800c452:	e000      	b.n	800c456 <_ZN3BTD29hci_write_simple_pairing_modeEb+0x30>
 800c454:	2200      	movs	r2, #0
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	3389      	adds	r3, #137	; 0x89
 800c460:	2204      	movs	r2, #4
 800c462:	4619      	mov	r1, r3
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f7ff fdcd 	bl	800c004 <_ZN3BTD11HCI_CommandEPht>
}
 800c46a:	bf00      	nop
 800c46c:	3708      	adds	r7, #8
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}

0800c472 <_ZN3BTD11hci_inquiryEv>:

void BTD::hci_inquiry() {
 800c472:	b580      	push	{r7, lr}
 800c474:	b082      	sub	sp, #8
 800c476:	af00      	add	r7, sp, #0
 800c478:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_DEVICE_FOUND);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c484:	b29a      	uxth	r2, r3
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2201      	movs	r2, #1
 800c490:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2204      	movs	r2, #4
 800c498:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x05; // Parameter Total Length = 5
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2205      	movs	r2, #5
 800c4a0:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x33; // LAP: Genera/Unlimited Inquiry Access Code (GIAC = 0x9E8B33) - see https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2233      	movs	r2, #51	; 0x33
 800c4a8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x8B;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	228b      	movs	r2, #139	; 0x8b
 800c4b0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x9E;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	229e      	movs	r2, #158	; 0x9e
 800c4b8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0x30; // Inquiry time = 61.44 sec (maximum)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2230      	movs	r2, #48	; 0x30
 800c4c0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0x0A; // 10 number of responses
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	220a      	movs	r2, #10
 800c4c8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        HCI_Command(hcibuf, 8);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	3389      	adds	r3, #137	; 0x89
 800c4d0:	2208      	movs	r2, #8
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f7ff fd95 	bl	800c004 <_ZN3BTD11HCI_CommandEPht>
}
 800c4da:	bf00      	nop
 800c4dc:	3708      	adds	r7, #8
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <_ZN3BTD18hci_inquiry_cancelEv>:

void BTD::hci_inquiry_cancel() {
 800c4e2:	b580      	push	{r7, lr}
 800c4e4:	b082      	sub	sp, #8
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x02;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2202      	movs	r2, #2
 800c4ee:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2204      	movs	r2, #4
 800c4f6:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00; // Parameter Total Length = 0
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	3389      	adds	r3, #137	; 0x89
 800c506:	2203      	movs	r2, #3
 800c508:	4619      	mov	r1, r3
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f7ff fd7a 	bl	800c004 <_ZN3BTD11HCI_CommandEPht>
}
 800c510:	bf00      	nop
 800c512:	3708      	adds	r7, #8
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <_ZN3BTD11hci_connectEv>:

void BTD::hci_connect() {
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
        hci_connect(disc_bdaddr); // Use last discovered device
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	331c      	adds	r3, #28
 800c524:	4619      	mov	r1, r3
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 f804 	bl	800c534 <_ZN3BTD11hci_connectEPh>
}
 800c52c:	bf00      	nop
 800c52e:	3708      	adds	r7, #8
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <_ZN3BTD11hci_connectEPh>:

void BTD::hci_connect(uint8_t *bdaddr) {
 800c534:	b580      	push	{r7, lr}
 800c536:	b082      	sub	sp, #8
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	6039      	str	r1, [r7, #0]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE | HCI_FLAG_CONNECT_EVENT);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c544:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800c548:	b29a      	uxth	r2, r3
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x05; // HCI OCF = 5
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2205      	movs	r2, #5
 800c554:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2204      	movs	r2, #4
 800c55c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0D; // parameter Total Length = 13
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	220d      	movs	r2, #13
 800c564:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = bdaddr[0]; // 6 octet bdaddr (LSB)
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	781a      	ldrb	r2, [r3, #0]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = bdaddr[1];
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	785a      	ldrb	r2, [r3, #1]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = bdaddr[2];
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	789a      	ldrb	r2, [r3, #2]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = bdaddr[3];
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	78da      	ldrb	r2, [r3, #3]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = bdaddr[4];
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	791a      	ldrb	r2, [r3, #4]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = bdaddr[5];
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	795a      	ldrb	r2, [r3, #5]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x18; // DM1 or DH1 may be used
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2218      	movs	r2, #24
 800c5a8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0xCC; // DM3, DH3, DM5, DH5 may be used
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	22cc      	movs	r2, #204	; 0xcc
 800c5b0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x01; // Page repetition mode R1
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Reserved
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
        hcibuf[13] = 0x00; // Clock offset
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
        hcibuf[14] = 0x00; // Invalid clock offset
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
        hcibuf[15] = 0x00; // Do not allow role switch
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        HCI_Command(hcibuf, 16);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	3389      	adds	r3, #137	; 0x89
 800c5e0:	2210      	movs	r2, #16
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f7ff fd0d 	bl	800c004 <_ZN3BTD11HCI_CommandEPht>
}
 800c5ea:	bf00      	nop
 800c5ec:	3708      	adds	r7, #8
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}

0800c5f2 <_ZN3BTD26hci_pin_code_request_replyEv>:

void BTD::hci_pin_code_request_reply() {
 800c5f2:	b590      	push	{r4, r7, lr}
 800c5f4:	b085      	sub	sp, #20
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0D; // HCI OCF = 0D
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	220d      	movs	r2, #13
 800c5fe:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2204      	movs	r2, #4
 800c606:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x17; // parameter length 23
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2217      	movs	r2, #23
 800c60e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	7f1a      	ldrb	r2, [r3, #28]
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	7f5a      	ldrb	r2, [r3, #29]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	7f9a      	ldrb	r2, [r3, #30]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	7fda      	ldrb	r2, [r3, #31]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f893 2020 	ldrb.w	r2, [r3, #32]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        if(pairWithWii) {
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d03f      	beq.n	800c6dc <_ZN3BTD26hci_pin_code_request_replyEv+0xea>
                hcibuf[9] = 6; // Pin length is the length of the Bluetooth address
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2206      	movs	r2, #6
 800c660:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                if(pairWiiUsingSync) {
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d013      	beq.n	800c696 <_ZN3BTD26hci_pin_code_request_replyEv+0xa4>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPairing with Wii controller via SYNC"), 0x80);
#endif
                        for(uint8_t i = 0; i < 6; i++)
 800c66e:	2300      	movs	r3, #0
 800c670:	73fb      	strb	r3, [r7, #15]
 800c672:	7bfb      	ldrb	r3, [r7, #15]
 800c674:	2b05      	cmp	r3, #5
 800c676:	d822      	bhi.n	800c6be <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = my_bdaddr[i]; // The pin is the Bluetooth dongles Bluetooth address backwards
 800c678:	7bfa      	ldrb	r2, [r7, #15]
 800c67a:	7bfb      	ldrb	r3, [r7, #15]
 800c67c:	330a      	adds	r3, #10
 800c67e:	6879      	ldr	r1, [r7, #4]
 800c680:	440a      	add	r2, r1
 800c682:	7d11      	ldrb	r1, [r2, #20]
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	4413      	add	r3, r2
 800c688:	460a      	mov	r2, r1
 800c68a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800c68e:	7bfb      	ldrb	r3, [r7, #15]
 800c690:	3301      	adds	r3, #1
 800c692:	73fb      	strb	r3, [r7, #15]
 800c694:	e7ed      	b.n	800c672 <_ZN3BTD26hci_pin_code_request_replyEv+0x80>
                } else {
                        for(uint8_t i = 0; i < 6; i++)
 800c696:	2300      	movs	r3, #0
 800c698:	73bb      	strb	r3, [r7, #14]
 800c69a:	7bbb      	ldrb	r3, [r7, #14]
 800c69c:	2b05      	cmp	r3, #5
 800c69e:	d80e      	bhi.n	800c6be <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = disc_bdaddr[i]; // The pin is the Wiimote's Bluetooth address backwards
 800c6a0:	7bba      	ldrb	r2, [r7, #14]
 800c6a2:	7bbb      	ldrb	r3, [r7, #14]
 800c6a4:	330a      	adds	r3, #10
 800c6a6:	6879      	ldr	r1, [r7, #4]
 800c6a8:	440a      	add	r2, r1
 800c6aa:	7f11      	ldrb	r1, [r2, #28]
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	4413      	add	r3, r2
 800c6b0:	460a      	mov	r2, r1
 800c6b2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800c6b6:	7bbb      	ldrb	r3, [r7, #14]
 800c6b8:	3301      	adds	r3, #1
 800c6ba:	73bb      	strb	r3, [r7, #14]
 800c6bc:	e7ed      	b.n	800c69a <_ZN3BTD26hci_pin_code_request_replyEv+0xa8>
                }
                for(uint8_t i = 16; i < 26; i++)
 800c6be:	2310      	movs	r3, #16
 800c6c0:	737b      	strb	r3, [r7, #13]
 800c6c2:	7b7b      	ldrb	r3, [r7, #13]
 800c6c4:	2b19      	cmp	r3, #25
 800c6c6:	d83c      	bhi.n	800c742 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i] = 0x00; // The rest should be 0
 800c6c8:	7b7b      	ldrb	r3, [r7, #13]
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	4413      	add	r3, r2
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(uint8_t i = 16; i < 26; i++)
 800c6d4:	7b7b      	ldrb	r3, [r7, #13]
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	737b      	strb	r3, [r7, #13]
 800c6da:	e7f2      	b.n	800c6c2 <_ZN3BTD26hci_pin_code_request_replyEv+0xd0>
        } else {
                hcibuf[9] = strlen(btdPin); // Length of pin
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	691b      	ldr	r3, [r3, #16]
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f7f3 fd91 	bl	8000208 <strlen>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	b2da      	uxtb	r2, r3
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                uint8_t i;
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	733b      	strb	r3, [r7, #12]
 800c6f4:	7b3c      	ldrb	r4, [r7, #12]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	691b      	ldr	r3, [r3, #16]
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f7f3 fd84 	bl	8000208 <strlen>
 800c700:	4603      	mov	r3, r0
 800c702:	429c      	cmp	r4, r3
 800c704:	d20f      	bcs.n	800c726 <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
                        hcibuf[i + 10] = btdPin[i];
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	691a      	ldr	r2, [r3, #16]
 800c70a:	7b3b      	ldrb	r3, [r7, #12]
 800c70c:	441a      	add	r2, r3
 800c70e:	7b3b      	ldrb	r3, [r7, #12]
 800c710:	330a      	adds	r3, #10
 800c712:	7811      	ldrb	r1, [r2, #0]
 800c714:	687a      	ldr	r2, [r7, #4]
 800c716:	4413      	add	r3, r2
 800c718:	460a      	mov	r2, r1
 800c71a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800c71e:	7b3b      	ldrb	r3, [r7, #12]
 800c720:	3301      	adds	r3, #1
 800c722:	733b      	strb	r3, [r7, #12]
 800c724:	e7e6      	b.n	800c6f4 <_ZN3BTD26hci_pin_code_request_replyEv+0x102>
                for(; i < 16; i++)
 800c726:	7b3b      	ldrb	r3, [r7, #12]
 800c728:	2b0f      	cmp	r3, #15
 800c72a:	d80a      	bhi.n	800c742 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i + 10] = 0x00; // The rest should be 0
 800c72c:	7b3b      	ldrb	r3, [r7, #12]
 800c72e:	330a      	adds	r3, #10
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	4413      	add	r3, r2
 800c734:	2200      	movs	r2, #0
 800c736:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(; i < 16; i++)
 800c73a:	7b3b      	ldrb	r3, [r7, #12]
 800c73c:	3301      	adds	r3, #1
 800c73e:	733b      	strb	r3, [r7, #12]
 800c740:	e7f1      	b.n	800c726 <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
        }

        HCI_Command(hcibuf, 26);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	3389      	adds	r3, #137	; 0x89
 800c746:	221a      	movs	r2, #26
 800c748:	4619      	mov	r1, r3
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f7ff fc5a 	bl	800c004 <_ZN3BTD11HCI_CommandEPht>
}
 800c750:	bf00      	nop
 800c752:	3714      	adds	r7, #20
 800c754:	46bd      	mov	sp, r7
 800c756:	bd90      	pop	{r4, r7, pc}

0800c758 <_ZN3BTD35hci_pin_code_negative_request_replyEv>:

void BTD::hci_pin_code_negative_request_reply() {
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0E; // HCI OCF = 0E
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	220e      	movs	r2, #14
 800c764:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2204      	movs	r2, #4
 800c76c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2206      	movs	r2, #6
 800c774:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	7f1a      	ldrb	r2, [r3, #28]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	7f5a      	ldrb	r2, [r3, #29]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	7f9a      	ldrb	r2, [r3, #30]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	7fda      	ldrb	r2, [r3, #31]
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f893 2020 	ldrb.w	r2, [r3, #32]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	3389      	adds	r3, #137	; 0x89
 800c7bc:	2209      	movs	r2, #9
 800c7be:	4619      	mov	r1, r3
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f7ff fc1f 	bl	800c004 <_ZN3BTD11HCI_CommandEPht>
}
 800c7c6:	bf00      	nop
 800c7c8:	3708      	adds	r7, #8
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}

0800c7ce <_ZN3BTD35hci_link_key_request_negative_replyEv>:

void BTD::hci_link_key_request_negative_reply() {
 800c7ce:	b580      	push	{r7, lr}
 800c7d0:	b082      	sub	sp, #8
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0C; // HCI OCF = 0C
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	220c      	movs	r2, #12
 800c7da:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2204      	movs	r2, #4
 800c7e2:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2206      	movs	r2, #6
 800c7ea:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	7f1a      	ldrb	r2, [r3, #28]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	7f5a      	ldrb	r2, [r3, #29]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	7f9a      	ldrb	r2, [r3, #30]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	7fda      	ldrb	r2, [r3, #31]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f893 2020 	ldrb.w	r2, [r3, #32]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	3389      	adds	r3, #137	; 0x89
 800c832:	2209      	movs	r2, #9
 800c834:	4619      	mov	r1, r3
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f7ff fbe4 	bl	800c004 <_ZN3BTD11HCI_CommandEPht>
}
 800c83c:	bf00      	nop
 800c83e:	3708      	adds	r7, #8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <_ZN3BTD31hci_io_capability_request_replyEv>:

void BTD::hci_io_capability_request_reply() {
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2B; // HCI OCF = 2B
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	222b      	movs	r2, #43	; 0x2b
 800c850:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2204      	movs	r2, #4
 800c858:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x09;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2209      	movs	r2, #9
 800c860:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	7f1a      	ldrb	r2, [r3, #28]
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	7f5a      	ldrb	r2, [r3, #29]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	7f9a      	ldrb	r2, [r3, #30]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	7fda      	ldrb	r2, [r3, #31]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f893 2020 	ldrb.w	r2, [r3, #32]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x03; // NoInputNoOutput
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2203      	movs	r2, #3
 800c8a8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // OOB authentication data not present
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // MITM Protection Not Required – No Bonding. Numeric comparison with automatic accept allowed
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

        HCI_Command(hcibuf, 12);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	3389      	adds	r3, #137	; 0x89
 800c8c0:	220c      	movs	r2, #12
 800c8c2:	4619      	mov	r1, r3
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f7ff fb9d 	bl	800c004 <_ZN3BTD11HCI_CommandEPht>
}
 800c8ca:	bf00      	nop
 800c8cc:	3708      	adds	r7, #8
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}

0800c8d2 <_ZN3BTD35hci_user_confirmation_request_replyEv>:

void BTD::hci_user_confirmation_request_reply() {
 800c8d2:	b580      	push	{r7, lr}
 800c8d4:	b082      	sub	sp, #8
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2C; // HCI OCF = 2C
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	222c      	movs	r2, #44	; 0x2c
 800c8de:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2204      	movs	r2, #4
 800c8e6:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2206      	movs	r2, #6
 800c8ee:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	7f1a      	ldrb	r2, [r3, #28]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	7f5a      	ldrb	r2, [r3, #29]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	7f9a      	ldrb	r2, [r3, #30]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	7fda      	ldrb	r2, [r3, #31]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f893 2020 	ldrb.w	r2, [r3, #32]
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	3389      	adds	r3, #137	; 0x89
 800c936:	2209      	movs	r2, #9
 800c938:	4619      	mov	r1, r3
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f7ff fb62 	bl	800c004 <_ZN3BTD11HCI_CommandEPht>
}
 800c940:	bf00      	nop
 800c942:	3708      	adds	r7, #8
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <_ZN3BTD26hci_authentication_requestEv>:

void BTD::hci_authentication_request() {
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x11; // HCI OCF = 11
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2211      	movs	r2, #17
 800c954:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2204      	movs	r2, #4
 800c95c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x02; // parameter length = 2
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2202      	movs	r2, #2
 800c964:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(hci_handle & 0xFF); //connection handle - low byte
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	8b5b      	ldrh	r3, [r3, #26]
 800c96c:	b2da      	uxtb	r2, r3
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((hci_handle >> 8) & 0x0F); //connection handle - high byte
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	8b5b      	ldrh	r3, [r3, #26]
 800c978:	121b      	asrs	r3, r3, #8
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	f003 030f 	and.w	r3, r3, #15
 800c980:	b2da      	uxtb	r2, r3
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

        HCI_Command(hcibuf, 5);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	3389      	adds	r3, #137	; 0x89
 800c98c:	2205      	movs	r2, #5
 800c98e:	4619      	mov	r1, r3
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f7ff fb37 	bl	800c004 <_ZN3BTD11HCI_CommandEPht>
}
 800c996:	bf00      	nop
 800c998:	3708      	adds	r7, #8
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}

0800c99e <_ZN3BTD14hci_disconnectEt>:

void BTD::hci_disconnect(uint16_t handle) { // This is called by the different services
 800c99e:	b580      	push	{r7, lr}
 800c9a0:	b082      	sub	sp, #8
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	6078      	str	r0, [r7, #4]
 800c9a6:	460b      	mov	r3, r1
 800c9a8:	807b      	strh	r3, [r7, #2]
        hci_clear_flag(HCI_FLAG_DISCONNECT_COMPLETE);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c9b0:	f023 0304 	bic.w	r3, r3, #4
 800c9b4:	b29a      	uxth	r2, r3
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x06; // HCI OCF = 6
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2206      	movs	r2, #6
 800c9c0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2204      	movs	r2, #4
 800c9c8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2203      	movs	r2, #3
 800c9d0:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(handle & 0xFF); //connection handle - low byte
 800c9d4:	887b      	ldrh	r3, [r7, #2]
 800c9d6:	b2da      	uxtb	r2, r3
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((handle >> 8) & 0x0F); //connection handle - high byte
 800c9de:	887b      	ldrh	r3, [r7, #2]
 800c9e0:	121b      	asrs	r3, r3, #8
 800c9e2:	b2db      	uxtb	r3, r3
 800c9e4:	f003 030f 	and.w	r3, r3, #15
 800c9e8:	b2da      	uxtb	r2, r3
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x13; // reason
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2213      	movs	r2, #19
 800c9f4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	3389      	adds	r3, #137	; 0x89
 800c9fc:	2206      	movs	r2, #6
 800c9fe:	4619      	mov	r1, r3
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f7ff faff 	bl	800c004 <_ZN3BTD11HCI_CommandEPht>
}
 800ca06:	bf00      	nop
 800ca08:	3708      	adds	r7, #8
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}

0800ca0e <_ZN3BTD25hci_write_class_of_deviceEv>:

void BTD::hci_write_class_of_device() { // See http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800ca0e:	b580      	push	{r7, lr}
 800ca10:	b082      	sub	sp, #8
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x24; // HCI OCF = 24
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2224      	movs	r2, #36	; 0x24
 800ca1a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	220c      	movs	r2, #12
 800ca22:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2203      	movs	r2, #3
 800ca2a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x04; // Robot
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2204      	movs	r2, #4
 800ca32:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x08; // Toy
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2208      	movs	r2, #8
 800ca3a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x00;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2200      	movs	r2, #0
 800ca42:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	3389      	adds	r3, #137	; 0x89
 800ca4a:	2206      	movs	r2, #6
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f7ff fad8 	bl	800c004 <_ZN3BTD11HCI_CommandEPht>
}
 800ca54:	bf00      	nop
 800ca56:	3708      	adds	r7, #8
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <_ZN3BTD13L2CAP_CommandEtPhhhh>:
 */
/************************************************************/
/*                    L2CAP Commands                        */

/************************************************************/
void BTD::L2CAP_Command(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh) {
 800ca5c:	b5b0      	push	{r4, r5, r7, lr}
 800ca5e:	b08a      	sub	sp, #40	; 0x28
 800ca60:	af02      	add	r7, sp, #8
 800ca62:	60f8      	str	r0, [r7, #12]
 800ca64:	607a      	str	r2, [r7, #4]
 800ca66:	461a      	mov	r2, r3
 800ca68:	460b      	mov	r3, r1
 800ca6a:	817b      	strh	r3, [r7, #10]
 800ca6c:	4613      	mov	r3, r2
 800ca6e:	727b      	strb	r3, [r7, #9]
                Notify(PSTR(" - Channel ID: "), 0x80);
                D_PrintHex<uint8_t > (channelHigh, 0x80);
                Notify(PSTR(" "), 0x80);
                D_PrintHex<uint8_t > (channelLow, 0x80);
#endif
        }
 800ca70:	466b      	mov	r3, sp
 800ca72:	461d      	mov	r5, r3
        uint8_t buf[8 + nbytes];
 800ca74:	7a7b      	ldrb	r3, [r7, #9]
 800ca76:	1ddc      	adds	r4, r3, #7
 800ca78:	61bc      	str	r4, [r7, #24]
 800ca7a:	4623      	mov	r3, r4
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f04f 0100 	mov.w	r1, #0
 800ca84:	f04f 0200 	mov.w	r2, #0
 800ca88:	f04f 0300 	mov.w	r3, #0
 800ca8c:	00cb      	lsls	r3, r1, #3
 800ca8e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800ca92:	00c2      	lsls	r2, r0, #3
 800ca94:	4623      	mov	r3, r4
 800ca96:	3301      	adds	r3, #1
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f04f 0100 	mov.w	r1, #0
 800ca9e:	f04f 0200 	mov.w	r2, #0
 800caa2:	f04f 0300 	mov.w	r3, #0
 800caa6:	00cb      	lsls	r3, r1, #3
 800caa8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800caac:	00c2      	lsls	r2, r0, #3
 800caae:	4623      	mov	r3, r4
 800cab0:	3301      	adds	r3, #1
 800cab2:	3307      	adds	r3, #7
 800cab4:	08db      	lsrs	r3, r3, #3
 800cab6:	00db      	lsls	r3, r3, #3
 800cab8:	ebad 0d03 	sub.w	sp, sp, r3
 800cabc:	ab02      	add	r3, sp, #8
 800cabe:	3300      	adds	r3, #0
 800cac0:	617b      	str	r3, [r7, #20]
        buf[0] = (uint8_t)(handle & 0xff); // HCI handle with PB,BC flag
 800cac2:	897b      	ldrh	r3, [r7, #10]
 800cac4:	b2da      	uxtb	r2, r3
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	701a      	strb	r2, [r3, #0]
        buf[1] = (uint8_t)(((handle >> 8) & 0x0f) | 0x20);
 800caca:	897b      	ldrh	r3, [r7, #10]
 800cacc:	121b      	asrs	r3, r3, #8
 800cace:	b25b      	sxtb	r3, r3
 800cad0:	f003 030f 	and.w	r3, r3, #15
 800cad4:	b25b      	sxtb	r3, r3
 800cad6:	f043 0320 	orr.w	r3, r3, #32
 800cada:	b25b      	sxtb	r3, r3
 800cadc:	b2da      	uxtb	r2, r3
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	705a      	strb	r2, [r3, #1]
        buf[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
 800cae2:	7a7b      	ldrb	r3, [r7, #9]
 800cae4:	3304      	adds	r3, #4
 800cae6:	b2da      	uxtb	r2, r3
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	709a      	strb	r2, [r3, #2]
        buf[3] = (uint8_t)((4 + nbytes) >> 8);
 800caec:	7a7b      	ldrb	r3, [r7, #9]
 800caee:	3304      	adds	r3, #4
 800caf0:	121b      	asrs	r3, r3, #8
 800caf2:	b2da      	uxtb	r2, r3
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	70da      	strb	r2, [r3, #3]
        buf[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	7a7a      	ldrb	r2, [r7, #9]
 800cafc:	711a      	strb	r2, [r3, #4]
        buf[5] = (uint8_t)(nbytes >> 8);
 800cafe:	7a7b      	ldrb	r3, [r7, #9]
 800cb00:	121b      	asrs	r3, r3, #8
 800cb02:	b2da      	uxtb	r2, r3
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	715a      	strb	r2, [r3, #5]
        buf[6] = channelLow;
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800cb0e:	719a      	strb	r2, [r3, #6]
        buf[7] = channelHigh;
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800cb16:	71da      	strb	r2, [r3, #7]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800cb18:	2300      	movs	r3, #0
 800cb1a:	83fb      	strh	r3, [r7, #30]
 800cb1c:	7a7b      	ldrb	r3, [r7, #9]
 800cb1e:	b29b      	uxth	r3, r3
 800cb20:	8bfa      	ldrh	r2, [r7, #30]
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d20b      	bcs.n	800cb3e <_ZN3BTD13L2CAP_CommandEtPhhhh+0xe2>
                buf[8 + i] = data[i];
 800cb26:	8bfb      	ldrh	r3, [r7, #30]
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	441a      	add	r2, r3
 800cb2c:	8bfb      	ldrh	r3, [r7, #30]
 800cb2e:	3308      	adds	r3, #8
 800cb30:	7811      	ldrb	r1, [r2, #0]
 800cb32:	697a      	ldr	r2, [r7, #20]
 800cb34:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800cb36:	8bfb      	ldrh	r3, [r7, #30]
 800cb38:	3301      	adds	r3, #1
 800cb3a:	83fb      	strh	r3, [r7, #30]
 800cb3c:	e7ee      	b.n	800cb1c <_ZN3BTD13L2CAP_CommandEtPhhhh+0xc0>
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ BTD_DATAOUT_PIPE ].epAddr, (8 + nbytes), buf);
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800cb4e:	7a7b      	ldrb	r3, [r7, #9]
 800cb50:	b29b      	uxth	r3, r3
 800cb52:	3308      	adds	r3, #8
 800cb54:	b29c      	uxth	r4, r3
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	9300      	str	r3, [sp, #0]
 800cb5a:	4623      	mov	r3, r4
 800cb5c:	f002 fc22 	bl	800f3a4 <_ZN3USB11outTransferEhhtPh>
 800cb60:	4603      	mov	r3, r0
 800cb62:	74fb      	strb	r3, [r7, #19]
        if(rcode) {
 800cb64:	7cfb      	ldrb	r3, [r7, #19]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d002      	beq.n	800cb70 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x114>
                delay(100); // This small delay prevents it from overflowing if it fails
 800cb6a:	4804      	ldr	r0, [pc, #16]	; (800cb7c <_ZN3BTD13L2CAP_CommandEtPhhhh+0x120>)
 800cb6c:	f7f6 f930 	bl	8002dd0 <HAL_Delay>
 800cb70:	46ad      	mov	sp, r5
}
 800cb72:	bf00      	nop
 800cb74:	3720      	adds	r7, #32
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bdb0      	pop	{r4, r5, r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	000186a0 	.word	0x000186a0

0800cb80 <_ZN3BTD24l2cap_connection_requestEthPht>:

void BTD::l2cap_connection_request(uint16_t handle, uint8_t rxid, uint8_t* scid, uint16_t psm) {
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b086      	sub	sp, #24
 800cb84:	af02      	add	r7, sp, #8
 800cb86:	60f8      	str	r0, [r7, #12]
 800cb88:	607b      	str	r3, [r7, #4]
 800cb8a:	460b      	mov	r3, r1
 800cb8c:	817b      	strh	r3, [r7, #10]
 800cb8e:	4613      	mov	r3, r2
 800cb90:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_REQUEST; // Code
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	2202      	movs	r2, #2
 800cb96:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	7a7a      	ldrb	r2, [r7, #9]
 800cb9e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	2204      	movs	r2, #4
 800cba6:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	2200      	movs	r2, #0
 800cbae:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = (uint8_t)(psm & 0xff); // PSM
 800cbb2:	8b3b      	ldrh	r3, [r7, #24]
 800cbb4:	b2da      	uxtb	r2, r3
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = (uint8_t)(psm >> 8);
 800cbbc:	8b3b      	ldrh	r3, [r7, #24]
 800cbbe:	121b      	asrs	r3, r3, #8
 800cbc0:	b2da      	uxtb	r2, r3
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	781a      	ldrb	r2, [r3, #0]
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	785a      	ldrb	r2, [r3, #1]
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	f203 1209 	addw	r2, r3, #265	; 0x109
 800cbe2:	8979      	ldrh	r1, [r7, #10]
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	9301      	str	r3, [sp, #4]
 800cbe8:	2301      	movs	r3, #1
 800cbea:	9300      	str	r3, [sp, #0]
 800cbec:	2308      	movs	r3, #8
 800cbee:	68f8      	ldr	r0, [r7, #12]
 800cbf0:	f7ff ff34 	bl	800ca5c <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800cbf4:	bf00      	nop
 800cbf6:	3710      	adds	r7, #16
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <_ZN3BTD25l2cap_connection_responseEthPhS0_h>:

void BTD::l2cap_connection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid, uint8_t result) {
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b086      	sub	sp, #24
 800cc00:	af02      	add	r7, sp, #8
 800cc02:	60f8      	str	r0, [r7, #12]
 800cc04:	607b      	str	r3, [r7, #4]
 800cc06:	460b      	mov	r3, r1
 800cc08:	817b      	strh	r3, [r7, #10]
 800cc0a:	4613      	mov	r3, r2
 800cc0c:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_RESPONSE; // Code
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2203      	movs	r2, #3
 800cc12:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	7a7a      	ldrb	r2, [r7, #9]
 800cc1a:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2208      	movs	r2, #8
 800cc22:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	781a      	ldrb	r2, [r3, #0]
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	785a      	ldrb	r2, [r3, #1]
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800cc42:	69bb      	ldr	r3, [r7, #24]
 800cc44:	781a      	ldrb	r2, [r3, #0]
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800cc4c:	69bb      	ldr	r3, [r7, #24]
 800cc4e:	785a      	ldrb	r2, [r3, #1]
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = result; // Result: Pending or Success
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	7f3a      	ldrb	r2, [r7, #28]
 800cc5a:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	2200      	movs	r2, #0
 800cc62:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00; // No further information
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2200      	movs	r2, #0
 800cc72:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	f203 1209 	addw	r2, r3, #265	; 0x109
 800cc7c:	8979      	ldrh	r1, [r7, #10]
 800cc7e:	2300      	movs	r3, #0
 800cc80:	9301      	str	r3, [sp, #4]
 800cc82:	2301      	movs	r3, #1
 800cc84:	9300      	str	r3, [sp, #0]
 800cc86:	230c      	movs	r3, #12
 800cc88:	68f8      	ldr	r0, [r7, #12]
 800cc8a:	f7ff fee7 	bl	800ca5c <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800cc8e:	bf00      	nop
 800cc90:	3710      	adds	r7, #16
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}

0800cc96 <_ZN3BTD20l2cap_config_requestEthPh>:

void BTD::l2cap_config_request(uint16_t handle, uint8_t rxid, uint8_t* dcid) {
 800cc96:	b580      	push	{r7, lr}
 800cc98:	b086      	sub	sp, #24
 800cc9a:	af02      	add	r7, sp, #8
 800cc9c:	60f8      	str	r0, [r7, #12]
 800cc9e:	607b      	str	r3, [r7, #4]
 800cca0:	460b      	mov	r3, r1
 800cca2:	817b      	strh	r3, [r7, #10]
 800cca4:	4613      	mov	r3, r2
 800cca6:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_REQUEST; // Code
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2204      	movs	r2, #4
 800ccac:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	7a7a      	ldrb	r2, [r7, #9]
 800ccb4:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2208      	movs	r2, #8
 800ccbc:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	781a      	ldrb	r2, [r3, #0]
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	785a      	ldrb	r2, [r3, #1]
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flags
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2200      	movs	r2, #0
 800cce0:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	2200      	movs	r2, #0
 800cce8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x01; // Config Opt: type = MTU (Maximum Transmission Unit) - Hint
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2201      	movs	r2, #1
 800ccf0:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x02; // Config Opt: length
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	2202      	movs	r2, #2
 800ccf8:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0xFF; // MTU
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	22ff      	movs	r2, #255	; 0xff
 800cd00:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0xFF;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	22ff      	movs	r2, #255	; 0xff
 800cd08:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f203 1209 	addw	r2, r3, #265	; 0x109
 800cd12:	8979      	ldrh	r1, [r7, #10]
 800cd14:	2300      	movs	r3, #0
 800cd16:	9301      	str	r3, [sp, #4]
 800cd18:	2301      	movs	r3, #1
 800cd1a:	9300      	str	r3, [sp, #0]
 800cd1c:	230c      	movs	r3, #12
 800cd1e:	68f8      	ldr	r0, [r7, #12]
 800cd20:	f7ff fe9c 	bl	800ca5c <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800cd24:	bf00      	nop
 800cd26:	3710      	adds	r7, #16
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}

0800cd2c <_ZN3BTD21l2cap_config_responseEthPh>:

void BTD::l2cap_config_response(uint16_t handle, uint8_t rxid, uint8_t* scid) {
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b086      	sub	sp, #24
 800cd30:	af02      	add	r7, sp, #8
 800cd32:	60f8      	str	r0, [r7, #12]
 800cd34:	607b      	str	r3, [r7, #4]
 800cd36:	460b      	mov	r3, r1
 800cd38:	817b      	strh	r3, [r7, #10]
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_RESPONSE; // Code
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	2205      	movs	r2, #5
 800cd42:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	7a7a      	ldrb	r2, [r7, #9]
 800cd4a:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x0A; // Length
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	220a      	movs	r2, #10
 800cd52:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = scid[0]; // Source CID
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	781a      	ldrb	r2, [r3, #0]
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = scid[1];
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	785a      	ldrb	r2, [r3, #1]
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flag
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2200      	movs	r2, #0
 800cd76:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00; // Result
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	2200      	movs	r2, #0
 800cd86:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x01; // Config
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	2201      	movs	r2, #1
 800cd96:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x02;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2202      	movs	r2, #2
 800cd9e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
        l2capoutbuf[12] = 0xA0;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	22a0      	movs	r2, #160	; 0xa0
 800cda6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
        l2capoutbuf[13] = 0x02;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	2202      	movs	r2, #2
 800cdae:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

        L2CAP_Command(handle, l2capoutbuf, 14);
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	f203 1209 	addw	r2, r3, #265	; 0x109
 800cdb8:	8979      	ldrh	r1, [r7, #10]
 800cdba:	2300      	movs	r3, #0
 800cdbc:	9301      	str	r3, [sp, #4]
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	9300      	str	r3, [sp, #0]
 800cdc2:	230e      	movs	r3, #14
 800cdc4:	68f8      	ldr	r0, [r7, #12]
 800cdc6:	f7ff fe49 	bl	800ca5c <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800cdca:	bf00      	nop
 800cdcc:	3710      	adds	r7, #16
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}

0800cdd2 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>:

void BTD::l2cap_disconnection_request(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800cdd2:	b580      	push	{r7, lr}
 800cdd4:	b086      	sub	sp, #24
 800cdd6:	af02      	add	r7, sp, #8
 800cdd8:	60f8      	str	r0, [r7, #12]
 800cdda:	607b      	str	r3, [r7, #4]
 800cddc:	460b      	mov	r3, r1
 800cdde:	817b      	strh	r3, [r7, #10]
 800cde0:	4613      	mov	r3, r2
 800cde2:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_REQUEST; // Code
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2206      	movs	r2, #6
 800cde8:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	7a7a      	ldrb	r2, [r7, #9]
 800cdf0:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2204      	movs	r2, #4
 800cdf8:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	781a      	ldrb	r2, [r3, #0]
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	785a      	ldrb	r2, [r3, #1]
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800ce18:	69bb      	ldr	r3, [r7, #24]
 800ce1a:	781a      	ldrb	r2, [r3, #0]
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800ce22:	69bb      	ldr	r3, [r7, #24]
 800ce24:	785a      	ldrb	r2, [r3, #1]
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	f203 1209 	addw	r2, r3, #265	; 0x109
 800ce32:	8979      	ldrh	r1, [r7, #10]
 800ce34:	2300      	movs	r3, #0
 800ce36:	9301      	str	r3, [sp, #4]
 800ce38:	2301      	movs	r3, #1
 800ce3a:	9300      	str	r3, [sp, #0]
 800ce3c:	2308      	movs	r3, #8
 800ce3e:	68f8      	ldr	r0, [r7, #12]
 800ce40:	f7ff fe0c 	bl	800ca5c <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800ce44:	bf00      	nop
 800ce46:	3710      	adds	r7, #16
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}

0800ce4c <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>:

void BTD::l2cap_disconnection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b086      	sub	sp, #24
 800ce50:	af02      	add	r7, sp, #8
 800ce52:	60f8      	str	r0, [r7, #12]
 800ce54:	607b      	str	r3, [r7, #4]
 800ce56:	460b      	mov	r3, r1
 800ce58:	817b      	strh	r3, [r7, #10]
 800ce5a:	4613      	mov	r3, r2
 800ce5c:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_RESPONSE; // Code
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2207      	movs	r2, #7
 800ce62:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	7a7a      	ldrb	r2, [r7, #9]
 800ce6a:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2204      	movs	r2, #4
 800ce72:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	781a      	ldrb	r2, [r3, #0]
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	785a      	ldrb	r2, [r3, #1]
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800ce92:	69bb      	ldr	r3, [r7, #24]
 800ce94:	781a      	ldrb	r2, [r3, #0]
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800ce9c:	69bb      	ldr	r3, [r7, #24]
 800ce9e:	785a      	ldrb	r2, [r3, #1]
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	f203 1209 	addw	r2, r3, #265	; 0x109
 800ceac:	8979      	ldrh	r1, [r7, #10]
 800ceae:	2300      	movs	r3, #0
 800ceb0:	9301      	str	r3, [sp, #4]
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	9300      	str	r3, [sp, #0]
 800ceb6:	2308      	movs	r3, #8
 800ceb8:	68f8      	ldr	r0, [r7, #12]
 800ceba:	f7ff fdcf 	bl	800ca5c <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800cebe:	bf00      	nop
 800cec0:	3710      	adds	r7, #16
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}

0800cec6 <_ZN3BTD26l2cap_information_responseEthhh>:

void BTD::l2cap_information_response(uint16_t handle, uint8_t rxid, uint8_t infoTypeLow, uint8_t infoTypeHigh) {
 800cec6:	b580      	push	{r7, lr}
 800cec8:	b084      	sub	sp, #16
 800ceca:	af02      	add	r7, sp, #8
 800cecc:	6078      	str	r0, [r7, #4]
 800cece:	4608      	mov	r0, r1
 800ced0:	4611      	mov	r1, r2
 800ced2:	461a      	mov	r2, r3
 800ced4:	4603      	mov	r3, r0
 800ced6:	807b      	strh	r3, [r7, #2]
 800ced8:	460b      	mov	r3, r1
 800ceda:	707b      	strb	r3, [r7, #1]
 800cedc:	4613      	mov	r3, r2
 800cede:	703b      	strb	r3, [r7, #0]
        l2capoutbuf[0] = L2CAP_CMD_INFORMATION_RESPONSE; // Code
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	220b      	movs	r2, #11
 800cee4:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	787a      	ldrb	r2, [r7, #1]
 800ceec:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2208      	movs	r2, #8
 800cef4:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2200      	movs	r2, #0
 800cefc:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = infoTypeLow;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	783a      	ldrb	r2, [r7, #0]
 800cf04:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = infoTypeHigh;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	7c3a      	ldrb	r2, [r7, #16]
 800cf0c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Result = success
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2200      	movs	r2, #0
 800cf14:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00; // Result = success
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2200      	movs	r2, #0
 800cf24:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2200      	movs	r2, #0
 800cf34:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f203 1209 	addw	r2, r3, #265	; 0x109
 800cf46:	8879      	ldrh	r1, [r7, #2]
 800cf48:	2300      	movs	r3, #0
 800cf4a:	9301      	str	r3, [sp, #4]
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	9300      	str	r3, [sp, #0]
 800cf50:	230c      	movs	r3, #12
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f7ff fd82 	bl	800ca5c <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800cf58:	bf00      	nop
 800cf5a:	3708      	adds	r7, #8
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}

0800cf60 <_ZN3BTD9setBdaddrEPh>:

/* PS3 Commands - only set Bluetooth address is implemented in this library */
void BTD::setBdaddr(uint8_t* bdaddr) {
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b08e      	sub	sp, #56	; 0x38
 800cf64:	af08      	add	r7, sp, #32
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[8];
        buf[0] = 0x01;
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	733b      	strb	r3, [r7, #12]
        buf[1] = 0x00;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	737b      	strb	r3, [r7, #13]

        for(uint8_t i = 0; i < 6; i++)
 800cf72:	2300      	movs	r3, #0
 800cf74:	75fb      	strb	r3, [r7, #23]
 800cf76:	7dfb      	ldrb	r3, [r7, #23]
 800cf78:	2b05      	cmp	r3, #5
 800cf7a:	d811      	bhi.n	800cfa0 <_ZN3BTD9setBdaddrEPh+0x40>
                buf[i + 2] = bdaddr[5 - i]; // Copy into buffer, has to be written reversed, so it is MSB first
 800cf7c:	7dfb      	ldrb	r3, [r7, #23]
 800cf7e:	f1c3 0305 	rsb	r3, r3, #5
 800cf82:	461a      	mov	r2, r3
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	441a      	add	r2, r3
 800cf88:	7dfb      	ldrb	r3, [r7, #23]
 800cf8a:	3302      	adds	r3, #2
 800cf8c:	7812      	ldrb	r2, [r2, #0]
 800cf8e:	f107 0118 	add.w	r1, r7, #24
 800cf92:	440b      	add	r3, r1
 800cf94:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800cf98:	7dfb      	ldrb	r3, [r7, #23]
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	75fb      	strb	r3, [r7, #23]
 800cf9e:	e7ea      	b.n	800cf76 <_ZN3BTD9setBdaddrEPh+0x16>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0xF5, 0x03, 0x00, 8, 8, buf, NULL);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	9307      	str	r3, [sp, #28]
 800cfb4:	f107 030c 	add.w	r3, r7, #12
 800cfb8:	9306      	str	r3, [sp, #24]
 800cfba:	2308      	movs	r3, #8
 800cfbc:	9305      	str	r3, [sp, #20]
 800cfbe:	2308      	movs	r3, #8
 800cfc0:	9304      	str	r3, [sp, #16]
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	9303      	str	r3, [sp, #12]
 800cfc6:	2303      	movs	r3, #3
 800cfc8:	9302      	str	r3, [sp, #8]
 800cfca:	23f5      	movs	r3, #245	; 0xf5
 800cfcc:	9301      	str	r3, [sp, #4]
 800cfce:	2309      	movs	r3, #9
 800cfd0:	9300      	str	r3, [sp, #0]
 800cfd2:	2321      	movs	r3, #33	; 0x21
 800cfd4:	f002 f803 	bl	800efde <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800cfd8:	bf00      	nop
 800cfda:	3718      	adds	r7, #24
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}

0800cfe0 <_ZN3BTD13setMoveBdaddrEPh>:

void BTD::setMoveBdaddr(uint8_t* bdaddr) {
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b08e      	sub	sp, #56	; 0x38
 800cfe4:	af08      	add	r7, sp, #32
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[11];
        buf[0] = 0x05;
 800cfea:	2305      	movs	r3, #5
 800cfec:	733b      	strb	r3, [r7, #12]
        buf[7] = 0x10;
 800cfee:	2310      	movs	r3, #16
 800cff0:	74fb      	strb	r3, [r7, #19]
        buf[8] = 0x01;
 800cff2:	2301      	movs	r3, #1
 800cff4:	753b      	strb	r3, [r7, #20]
        buf[9] = 0x02;
 800cff6:	2302      	movs	r3, #2
 800cff8:	757b      	strb	r3, [r7, #21]
        buf[10] = 0x12;
 800cffa:	2312      	movs	r3, #18
 800cffc:	75bb      	strb	r3, [r7, #22]

        for(uint8_t i = 0; i < 6; i++)
 800cffe:	2300      	movs	r3, #0
 800d000:	75fb      	strb	r3, [r7, #23]
 800d002:	7dfb      	ldrb	r3, [r7, #23]
 800d004:	2b05      	cmp	r3, #5
 800d006:	d80e      	bhi.n	800d026 <_ZN3BTD13setMoveBdaddrEPh+0x46>
                buf[i + 1] = bdaddr[i];
 800d008:	7dfb      	ldrb	r3, [r7, #23]
 800d00a:	683a      	ldr	r2, [r7, #0]
 800d00c:	441a      	add	r2, r3
 800d00e:	7dfb      	ldrb	r3, [r7, #23]
 800d010:	3301      	adds	r3, #1
 800d012:	7812      	ldrb	r2, [r2, #0]
 800d014:	f107 0118 	add.w	r1, r7, #24
 800d018:	440b      	add	r3, r1
 800d01a:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800d01e:	7dfb      	ldrb	r3, [r7, #23]
 800d020:	3301      	adds	r3, #1
 800d022:	75fb      	strb	r3, [r7, #23]
 800d024:	e7ed      	b.n	800d002 <_ZN3BTD13setMoveBdaddrEPh+0x22>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0x05), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0x05, 0x03, 0x00, 11, 11, buf, NULL);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800d036:	2300      	movs	r3, #0
 800d038:	9307      	str	r3, [sp, #28]
 800d03a:	f107 030c 	add.w	r3, r7, #12
 800d03e:	9306      	str	r3, [sp, #24]
 800d040:	230b      	movs	r3, #11
 800d042:	9305      	str	r3, [sp, #20]
 800d044:	230b      	movs	r3, #11
 800d046:	9304      	str	r3, [sp, #16]
 800d048:	2300      	movs	r3, #0
 800d04a:	9303      	str	r3, [sp, #12]
 800d04c:	2303      	movs	r3, #3
 800d04e:	9302      	str	r3, [sp, #8]
 800d050:	2305      	movs	r3, #5
 800d052:	9301      	str	r3, [sp, #4]
 800d054:	2309      	movs	r3, #9
 800d056:	9300      	str	r3, [sp, #0]
 800d058:	2321      	movs	r3, #33	; 0x21
 800d05a:	f001 ffc0 	bl	800efde <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800d05e:	bf00      	nop
 800d060:	3718      	adds	r7, #24
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}
	...

0800d068 <_ZN13USBReadParserC1Ev>:
class USBReadParser {
 800d068:	b480      	push	{r7}
 800d06a:	b083      	sub	sp, #12
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	4a04      	ldr	r2, [pc, #16]	; (800d084 <_ZN13USBReadParserC1Ev+0x1c>)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	601a      	str	r2, [r3, #0]
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	4618      	mov	r0, r3
 800d07a:	370c      	adds	r7, #12
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr
 800d084:	08010fb8 	.word	0x08010fb8

0800d088 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800d088:	b580      	push	{r7, lr}
 800d08a:	b082      	sub	sp, #8
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	6039      	str	r1, [r7, #0]
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	4618      	mov	r0, r3
 800d096:	f7ff ffe7 	bl	800d068 <_ZN13USBReadParserC1Ev>
 800d09a:	4a21      	ldr	r2, [pc, #132]	; (800d120 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	601a      	str	r2, [r3, #0]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	683a      	ldr	r2, [r7, #0]
 800d0a4:	605a      	str	r2, [r3, #4]
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	3308      	adds	r3, #8
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7fd fb51 	bl	800a752 <_ZN16MultiValueBufferC1Ev>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	3310      	adds	r3, #16
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7fd fb63 	bl	800a780 <_ZN20MultiByteValueParserC1Ev>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	3318      	adds	r3, #24
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7fd fb8a 	bl	800a7d8 <_ZN11ByteSkipperC1Ev>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f103 0220 	add.w	r2, r3, #32
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f103 0210 	add.w	r2, r3, #16
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	3308      	adds	r3, #8
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	4610      	mov	r0, r2
 800d0fe:	f7fd fb53 	bl	800a7a8 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f103 0218 	add.w	r2, r3, #24
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	3308      	adds	r3, #8
 800d10c:	4619      	mov	r1, r3
 800d10e:	4610      	mov	r0, r2
 800d110:	f7fd fb76 	bl	800a800 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	4618      	mov	r0, r3
 800d118:	3708      	adds	r7, #8
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
 800d11e:	bf00      	nop
 800d120:	08010f60 	.word	0x08010f60

0800d124 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800d124:	b580      	push	{r7, lr}
 800d126:	b082      	sub	sp, #8
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	6039      	str	r1, [r7, #0]
UseOr(false) {
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	4618      	mov	r0, r3
 800d132:	f7ff ff99 	bl	800d068 <_ZN13USBReadParserC1Ev>
 800d136:	4a21      	ldr	r2, [pc, #132]	; (800d1bc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	601a      	str	r2, [r3, #0]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	683a      	ldr	r2, [r7, #0]
 800d140:	605a      	str	r2, [r3, #4]
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	3308      	adds	r3, #8
 800d146:	4618      	mov	r0, r3
 800d148:	f7fd fb03 	bl	800a752 <_ZN16MultiValueBufferC1Ev>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	3310      	adds	r3, #16
 800d150:	4618      	mov	r0, r3
 800d152:	f7fd fb15 	bl	800a780 <_ZN20MultiByteValueParserC1Ev>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	3318      	adds	r3, #24
 800d15a:	4618      	mov	r0, r3
 800d15c:	f7fd fb3c 	bl	800a7d8 <_ZN11ByteSkipperC1Ev>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2200      	movs	r2, #0
 800d164:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2200      	movs	r2, #0
 800d16c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2200      	movs	r2, #0
 800d174:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2200      	movs	r2, #0
 800d17c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f103 0220 	add.w	r2, r3, #32
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f103 0210 	add.w	r2, r3, #16
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	3308      	adds	r3, #8
 800d196:	4619      	mov	r1, r3
 800d198:	4610      	mov	r0, r2
 800d19a:	f7fd fb05 	bl	800a7a8 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f103 0218 	add.w	r2, r3, #24
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	3308      	adds	r3, #8
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	4610      	mov	r0, r2
 800d1ac:	f7fd fb28 	bl	800a800 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3708      	adds	r7, #8
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	08010f54 	.word	0x08010f54

0800d1c0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b086      	sub	sp, #24
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	60f8      	str	r0, [r7, #12]
 800d1c8:	607a      	str	r2, [r7, #4]
 800d1ca:	603b      	str	r3, [r7, #0]
 800d1cc:	460b      	mov	r3, r1
 800d1ce:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800d1d0:	897b      	ldrh	r3, [r7, #10]
 800d1d2:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	613b      	str	r3, [r7, #16]

        while(cntdn)
 800d1d8:	8afb      	ldrh	r3, [r7, #22]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d00f      	beq.n	800d1fe <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800d1de:	f107 0216 	add.w	r2, r7, #22
 800d1e2:	f107 0310 	add.w	r3, r7, #16
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	68f8      	ldr	r0, [r7, #12]
 800d1ea:	f000 f82d 	bl	800d248 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	f083 0301 	eor.w	r3, r3, #1
 800d1f4:	b2db      	uxtb	r3, r3
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d100      	bne.n	800d1fc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800d1fa:	e7ed      	b.n	800d1d8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800d1fc:	bf00      	nop
}
 800d1fe:	3718      	adds	r7, #24
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}

0800d204 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt>:
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800d204:	b580      	push	{r7, lr}
 800d206:	b086      	sub	sp, #24
 800d208:	af00      	add	r7, sp, #0
 800d20a:	60f8      	str	r0, [r7, #12]
 800d20c:	607a      	str	r2, [r7, #4]
 800d20e:	603b      	str	r3, [r7, #0]
 800d210:	460b      	mov	r3, r1
 800d212:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800d214:	897b      	ldrh	r3, [r7, #10]
 800d216:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	613b      	str	r3, [r7, #16]
        while(cntdn)
 800d21c:	8afb      	ldrh	r3, [r7, #22]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d00f      	beq.n	800d242 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800d222:	f107 0216 	add.w	r2, r7, #22
 800d226:	f107 0310 	add.w	r3, r7, #16
 800d22a:	4619      	mov	r1, r3
 800d22c:	68f8      	ldr	r0, [r7, #12]
 800d22e:	f000 f981 	bl	800d534 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800d232:	4603      	mov	r3, r0
 800d234:	f083 0301 	eor.w	r3, r3, #1
 800d238:	b2db      	uxtb	r3, r3
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d100      	bne.n	800d240 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800d23e:	e7ed      	b.n	800d21c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800d240:	bf00      	nop
}
 800d242:	3718      	adds	r7, #24
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800d248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d24a:	b089      	sub	sp, #36	; 0x24
 800d24c:	af02      	add	r7, sp, #8
 800d24e:	60f8      	str	r0, [r7, #12]
 800d250:	60b9      	str	r1, [r7, #8]
 800d252:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	3320      	adds	r3, #32
 800d258:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	3320      	adds	r3, #32
 800d25e:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d266:	2b04      	cmp	r3, #4
 800d268:	f200 815e 	bhi.w	800d528 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800d26c:	a201      	add	r2, pc, #4	; (adr r2, 800d274 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800d26e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d272:	bf00      	nop
 800d274:	0800d289 	.word	0x0800d289
 800d278:	0800d2a9 	.word	0x0800d2a9
 800d27c:	0800d2eb 	.word	0x0800d2eb
 800d280:	0800d2ff 	.word	0x0800d2ff
 800d284:	0800d3c3 	.word	0x0800d3c3
                case 0:
                        theBuffer.valueSize = 2;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	2202      	movs	r2, #2
 800d28c:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	f103 0210 	add.w	r2, r3, #16
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	3308      	adds	r3, #8
 800d298:	4619      	mov	r1, r3
 800d29a:	4610      	mov	r0, r2
 800d29c:	f7fd fa84 	bl	800a7a8 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	3310      	adds	r3, #16
 800d2ac:	687a      	ldr	r2, [r7, #4]
 800d2ae:	68b9      	ldr	r1, [r7, #8]
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f003 fa67 	bl	8010784 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	f083 0301 	eor.w	r3, r3, #1
 800d2bc:	b2db      	uxtb	r3, r3
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d001      	beq.n	800d2c6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	e131      	b.n	800d52a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800d2cc:	781a      	ldrb	r2, [r3, #0]
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800d2da:	785a      	ldrb	r2, [r3, #1]
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	2202      	movs	r2, #2
 800d2e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	3320      	adds	r3, #32
 800d2ee:	1c9a      	adds	r2, r3, #2
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2203      	movs	r2, #3
 800d2fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 3:
                        switch(dscrType) {
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d304:	3b02      	subs	r3, #2
 800d306:	2b1f      	cmp	r3, #31
 800d308:	d847      	bhi.n	800d39a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800d30a:	a201      	add	r2, pc, #4	; (adr r2, 800d310 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800d30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d310:	0800d39b 	.word	0x0800d39b
 800d314:	0800d39b 	.word	0x0800d39b
 800d318:	0800d391 	.word	0x0800d391
 800d31c:	0800d39b 	.word	0x0800d39b
 800d320:	0800d39b 	.word	0x0800d39b
 800d324:	0800d39b 	.word	0x0800d39b
 800d328:	0800d39b 	.word	0x0800d39b
 800d32c:	0800d39b 	.word	0x0800d39b
 800d330:	0800d39b 	.word	0x0800d39b
 800d334:	0800d39b 	.word	0x0800d39b
 800d338:	0800d39b 	.word	0x0800d39b
 800d33c:	0800d39b 	.word	0x0800d39b
 800d340:	0800d39b 	.word	0x0800d39b
 800d344:	0800d39b 	.word	0x0800d39b
 800d348:	0800d39b 	.word	0x0800d39b
 800d34c:	0800d39b 	.word	0x0800d39b
 800d350:	0800d39b 	.word	0x0800d39b
 800d354:	0800d39b 	.word	0x0800d39b
 800d358:	0800d39b 	.word	0x0800d39b
 800d35c:	0800d39b 	.word	0x0800d39b
 800d360:	0800d39b 	.word	0x0800d39b
 800d364:	0800d39b 	.word	0x0800d39b
 800d368:	0800d39b 	.word	0x0800d39b
 800d36c:	0800d39b 	.word	0x0800d39b
 800d370:	0800d39b 	.word	0x0800d39b
 800d374:	0800d39b 	.word	0x0800d39b
 800d378:	0800d39b 	.word	0x0800d39b
 800d37c:	0800d39b 	.word	0x0800d39b
 800d380:	0800d39b 	.word	0x0800d39b
 800d384:	0800d39b 	.word	0x0800d39b
 800d388:	0800d39b 	.word	0x0800d39b
 800d38c:	0800d39b 	.word	0x0800d39b
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	2200      	movs	r2, #0
 800d394:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800d398:	bf00      	nop
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
                        }
                        theBuffer.valueSize = dscrLen - 2;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d3a0:	3b02      	subs	r3, #2
 800d3a2:	b2da      	uxtb	r2, r3
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	f103 0210 	add.w	r2, r3, #16
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	3308      	adds	r3, #8
 800d3b2:	4619      	mov	r1, r3
 800d3b4:	4610      	mov	r0, r2
 800d3b6:	f7fd f9f7 	bl	800a7a8 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	2204      	movs	r2, #4
 800d3be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 4:
                        switch(dscrType) {
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d3c8:	2b05      	cmp	r3, #5
 800d3ca:	d055      	beq.n	800d478 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800d3cc:	2b05      	cmp	r3, #5
 800d3ce:	f300 8085 	bgt.w	800d4dc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800d3d2:	2b02      	cmp	r3, #2
 800d3d4:	d002      	beq.n	800d3dc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800d3d6:	2b04      	cmp	r3, #4
 800d3d8:	d015      	beq.n	800d406 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800d3da:	e07f      	b.n	800d4dc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	3310      	adds	r3, #16
 800d3e0:	687a      	ldr	r2, [r7, #4]
 800d3e2:	68b9      	ldr	r1, [r7, #8]
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f003 f9cd 	bl	8010784 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	f083 0301 	eor.w	r3, r3, #1
 800d3f0:	b2db      	uxtb	r3, r3
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d001      	beq.n	800d3fa <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	e097      	b.n	800d52a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	795a      	ldrb	r2, [r3, #5]
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800d404:	e086      	b.n	800d514 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	3310      	adds	r3, #16
 800d40a:	687a      	ldr	r2, [r7, #4]
 800d40c:	68b9      	ldr	r1, [r7, #8]
 800d40e:	4618      	mov	r0, r3
 800d410:	f003 f9b8 	bl	8010784 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800d414:	4603      	mov	r3, r0
 800d416:	f083 0301 	eor.w	r3, r3, #1
 800d41a:	b2db      	uxtb	r3, r3
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d001      	beq.n	800d424 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800d420:	2300      	movs	r3, #0
 800d422:	e082      	b.n	800d52a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	795b      	ldrb	r3, [r3, #5]
 800d428:	2be0      	cmp	r3, #224	; 0xe0
 800d42a:	d16c      	bne.n	800d506 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	799b      	ldrb	r3, [r3, #6]
 800d430:	2b01      	cmp	r3, #1
 800d432:	d16a      	bne.n	800d50a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                                break;
                                        if(UseOr) {
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d004      	beq.n	800d448 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	79db      	ldrb	r3, [r3, #7]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d104      	bne.n	800d450 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800d446:	e065      	b.n	800d514 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	79db      	ldrb	r3, [r3, #7]
 800d44c:	2b01      	cmp	r3, #1
 800d44e:	d15e      	bne.n	800d50e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                                        break;
                                        }
                                        isGoodInterface = true;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	2201      	movs	r2, #1
 800d454:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	789a      	ldrb	r2, [r3, #2]
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	78da      	ldrb	r2, [r3, #3]
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800d46c:	693b      	ldr	r3, [r7, #16]
 800d46e:	79da      	ldrb	r2, [r3, #7]
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800d476:	e04d      	b.n	800d514 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	3310      	adds	r3, #16
 800d47c:	687a      	ldr	r2, [r7, #4]
 800d47e:	68b9      	ldr	r1, [r7, #8]
 800d480:	4618      	mov	r0, r3
 800d482:	f003 f97f 	bl	8010784 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800d486:	4603      	mov	r3, r0
 800d488:	f083 0301 	eor.w	r3, r3, #1
 800d48c:	b2db      	uxtb	r3, r3
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d001      	beq.n	800d496 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800d492:	2300      	movs	r3, #0
 800d494:	e049      	b.n	800d52a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d038      	beq.n	800d512 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d034      	beq.n	800d512 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	6858      	ldr	r0, [r3, #4]
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	681c      	ldr	r4, [r3, #0]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d4cc:	68fa      	ldr	r2, [r7, #12]
 800d4ce:	3220      	adds	r2, #32
 800d4d0:	9201      	str	r2, [sp, #4]
 800d4d2:	9300      	str	r3, [sp, #0]
 800d4d4:	4633      	mov	r3, r6
 800d4d6:	462a      	mov	r2, r5
 800d4d8:	47a0      	blx	r4
                                        break;
 800d4da:	e01a      	b.n	800d512 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f103 0018 	add.w	r0, r3, #24
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d4e8:	b29b      	uxth	r3, r3
 800d4ea:	3b02      	subs	r3, #2
 800d4ec:	b29b      	uxth	r3, r3
 800d4ee:	687a      	ldr	r2, [r7, #4]
 800d4f0:	68b9      	ldr	r1, [r7, #8]
 800d4f2:	f7fd f998 	bl	800a826 <_ZN11ByteSkipper4SkipEPPhPtt>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	f083 0301 	eor.w	r3, r3, #1
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d008      	beq.n	800d514 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800d502:	2300      	movs	r3, #0
 800d504:	e011      	b.n	800d52a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800d506:	bf00      	nop
 800d508:	e004      	b.n	800d514 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800d50a:	bf00      	nop
 800d50c:	e002      	b.n	800d514 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800d50e:	bf00      	nop
 800d510:	e000      	b.n	800d514 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800d512:	bf00      	nop
                        }
                        theBuffer.pValue = varBuffer;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	f103 0220 	add.w	r2, r3, #32
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	2200      	movs	r2, #0
 800d524:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
        return true;
 800d528:	2301      	movs	r3, #1
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	371c      	adds	r7, #28
 800d52e:	46bd      	mov	sp, r7
 800d530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d532:	bf00      	nop

0800d534 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800d534:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d536:	b089      	sub	sp, #36	; 0x24
 800d538:	af02      	add	r7, sp, #8
 800d53a:	60f8      	str	r0, [r7, #12]
 800d53c:	60b9      	str	r1, [r7, #8]
 800d53e:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	3320      	adds	r3, #32
 800d544:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	3320      	adds	r3, #32
 800d54a:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d552:	2b04      	cmp	r3, #4
 800d554:	f200 815e 	bhi.w	800d814 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800d558:	a201      	add	r2, pc, #4	; (adr r2, 800d560 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800d55a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d55e:	bf00      	nop
 800d560:	0800d575 	.word	0x0800d575
 800d564:	0800d595 	.word	0x0800d595
 800d568:	0800d5d7 	.word	0x0800d5d7
 800d56c:	0800d5eb 	.word	0x0800d5eb
 800d570:	0800d6af 	.word	0x0800d6af
                        theBuffer.valueSize = 2;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	2202      	movs	r2, #2
 800d578:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	f103 0210 	add.w	r2, r3, #16
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	3308      	adds	r3, #8
 800d584:	4619      	mov	r1, r3
 800d586:	4610      	mov	r0, r2
 800d588:	f7fd f90e 	bl	800a7a8 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	2201      	movs	r2, #1
 800d590:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        if(!valParser.Parse(pp, pcntdn))
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	3310      	adds	r3, #16
 800d598:	687a      	ldr	r2, [r7, #4]
 800d59a:	68b9      	ldr	r1, [r7, #8]
 800d59c:	4618      	mov	r0, r3
 800d59e:	f003 f8f1 	bl	8010784 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	f083 0301 	eor.w	r3, r3, #1
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d001      	beq.n	800d5b2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	e131      	b.n	800d816 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800d5b8:	781a      	ldrb	r2, [r3, #0]
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800d5c6:	785a      	ldrb	r2, [r3, #1]
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	2202      	movs	r2, #2
 800d5d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        theBuffer.pValue = varBuffer + 2;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	3320      	adds	r3, #32
 800d5da:	1c9a      	adds	r2, r3, #2
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	2203      	movs	r2, #3
 800d5e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d5f0:	3b02      	subs	r3, #2
 800d5f2:	2b1f      	cmp	r3, #31
 800d5f4:	d847      	bhi.n	800d686 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800d5f6:	a201      	add	r2, pc, #4	; (adr r2, 800d5fc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800d5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5fc:	0800d687 	.word	0x0800d687
 800d600:	0800d687 	.word	0x0800d687
 800d604:	0800d67d 	.word	0x0800d67d
 800d608:	0800d687 	.word	0x0800d687
 800d60c:	0800d687 	.word	0x0800d687
 800d610:	0800d687 	.word	0x0800d687
 800d614:	0800d687 	.word	0x0800d687
 800d618:	0800d687 	.word	0x0800d687
 800d61c:	0800d687 	.word	0x0800d687
 800d620:	0800d687 	.word	0x0800d687
 800d624:	0800d687 	.word	0x0800d687
 800d628:	0800d687 	.word	0x0800d687
 800d62c:	0800d687 	.word	0x0800d687
 800d630:	0800d687 	.word	0x0800d687
 800d634:	0800d687 	.word	0x0800d687
 800d638:	0800d687 	.word	0x0800d687
 800d63c:	0800d687 	.word	0x0800d687
 800d640:	0800d687 	.word	0x0800d687
 800d644:	0800d687 	.word	0x0800d687
 800d648:	0800d687 	.word	0x0800d687
 800d64c:	0800d687 	.word	0x0800d687
 800d650:	0800d687 	.word	0x0800d687
 800d654:	0800d687 	.word	0x0800d687
 800d658:	0800d687 	.word	0x0800d687
 800d65c:	0800d687 	.word	0x0800d687
 800d660:	0800d687 	.word	0x0800d687
 800d664:	0800d687 	.word	0x0800d687
 800d668:	0800d687 	.word	0x0800d687
 800d66c:	0800d687 	.word	0x0800d687
 800d670:	0800d687 	.word	0x0800d687
 800d674:	0800d687 	.word	0x0800d687
 800d678:	0800d687 	.word	0x0800d687
                                        isGoodInterface = false;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	2200      	movs	r2, #0
 800d680:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800d684:	bf00      	nop
                        theBuffer.valueSize = dscrLen - 2;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d68c:	3b02      	subs	r3, #2
 800d68e:	b2da      	uxtb	r2, r3
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f103 0210 	add.w	r2, r3, #16
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	3308      	adds	r3, #8
 800d69e:	4619      	mov	r1, r3
 800d6a0:	4610      	mov	r0, r2
 800d6a2:	f7fd f881 	bl	800a7a8 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	2204      	movs	r2, #4
 800d6aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d6b4:	2b05      	cmp	r3, #5
 800d6b6:	d055      	beq.n	800d764 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800d6b8:	2b05      	cmp	r3, #5
 800d6ba:	f300 8085 	bgt.w	800d7c8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800d6be:	2b02      	cmp	r3, #2
 800d6c0:	d002      	beq.n	800d6c8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800d6c2:	2b04      	cmp	r3, #4
 800d6c4:	d015      	beq.n	800d6f2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800d6c6:	e07f      	b.n	800d7c8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                        if(!valParser.Parse(pp, pcntdn))
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	3310      	adds	r3, #16
 800d6cc:	687a      	ldr	r2, [r7, #4]
 800d6ce:	68b9      	ldr	r1, [r7, #8]
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f003 f857 	bl	8010784 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	f083 0301 	eor.w	r3, r3, #1
 800d6dc:	b2db      	uxtb	r3, r3
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d001      	beq.n	800d6e6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	e097      	b.n	800d816 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	795a      	ldrb	r2, [r3, #5]
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800d6f0:	e086      	b.n	800d800 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	3310      	adds	r3, #16
 800d6f6:	687a      	ldr	r2, [r7, #4]
 800d6f8:	68b9      	ldr	r1, [r7, #8]
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f003 f842 	bl	8010784 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800d700:	4603      	mov	r3, r0
 800d702:	f083 0301 	eor.w	r3, r3, #1
 800d706:	b2db      	uxtb	r3, r3
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d001      	beq.n	800d710 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800d70c:	2300      	movs	r3, #0
 800d70e:	e082      	b.n	800d816 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	795b      	ldrb	r3, [r3, #5]
 800d714:	2bff      	cmp	r3, #255	; 0xff
 800d716:	d16c      	bne.n	800d7f2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	799b      	ldrb	r3, [r3, #6]
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	d16a      	bne.n	800d7f6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                        if(UseOr) {
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d726:	2b00      	cmp	r3, #0
 800d728:	d004      	beq.n	800d734 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	79db      	ldrb	r3, [r3, #7]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d104      	bne.n	800d73c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800d732:	e065      	b.n	800d800 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	79db      	ldrb	r3, [r3, #7]
 800d738:	2b01      	cmp	r3, #1
 800d73a:	d15e      	bne.n	800d7fa <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                        isGoodInterface = true;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	2201      	movs	r2, #1
 800d740:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	789a      	ldrb	r2, [r3, #2]
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	78da      	ldrb	r2, [r3, #3]
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	79da      	ldrb	r2, [r3, #7]
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800d762:	e04d      	b.n	800d800 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	3310      	adds	r3, #16
 800d768:	687a      	ldr	r2, [r7, #4]
 800d76a:	68b9      	ldr	r1, [r7, #8]
 800d76c:	4618      	mov	r0, r3
 800d76e:	f003 f809 	bl	8010784 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800d772:	4603      	mov	r3, r0
 800d774:	f083 0301 	eor.w	r3, r3, #1
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d001      	beq.n	800d782 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800d77e:	2300      	movs	r3, #0
 800d780:	e049      	b.n	800d816 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d038      	beq.n	800d7fe <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	685b      	ldr	r3, [r3, #4]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d034      	beq.n	800d7fe <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	6858      	ldr	r0, [r3, #4]
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	685b      	ldr	r3, [r3, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	681c      	ldr	r4, [r3, #0]
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d7b8:	68fa      	ldr	r2, [r7, #12]
 800d7ba:	3220      	adds	r2, #32
 800d7bc:	9201      	str	r2, [sp, #4]
 800d7be:	9300      	str	r3, [sp, #0]
 800d7c0:	4633      	mov	r3, r6
 800d7c2:	462a      	mov	r2, r5
 800d7c4:	47a0      	blx	r4
                                        break;
 800d7c6:	e01a      	b.n	800d7fe <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	f103 0018 	add.w	r0, r3, #24
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d7d4:	b29b      	uxth	r3, r3
 800d7d6:	3b02      	subs	r3, #2
 800d7d8:	b29b      	uxth	r3, r3
 800d7da:	687a      	ldr	r2, [r7, #4]
 800d7dc:	68b9      	ldr	r1, [r7, #8]
 800d7de:	f7fd f822 	bl	800a826 <_ZN11ByteSkipper4SkipEPPhPtt>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	f083 0301 	eor.w	r3, r3, #1
 800d7e8:	b2db      	uxtb	r3, r3
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d008      	beq.n	800d800 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	e011      	b.n	800d816 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800d7f2:	bf00      	nop
 800d7f4:	e004      	b.n	800d800 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800d7f6:	bf00      	nop
 800d7f8:	e002      	b.n	800d800 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800d7fa:	bf00      	nop
 800d7fc:	e000      	b.n	800d800 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800d7fe:	bf00      	nop
                        theBuffer.pValue = varBuffer;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	f103 0220 	add.w	r2, r3, #32
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2200      	movs	r2, #0
 800d810:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return true;
 800d814:	2301      	movs	r3, #1
}
 800d816:	4618      	mov	r0, r3
 800d818:	371c      	adds	r7, #28
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d81e:	bf00      	nop

0800d820 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>:
        int8_t registerBluetoothService(BluetoothService *pService) {
 800d820:	b480      	push	{r7}
 800d822:	b085      	sub	sp, #20
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
 800d828:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800d82a:	2300      	movs	r3, #0
 800d82c:	73fb      	strb	r3, [r7, #15]
 800d82e:	7bfb      	ldrb	r3, [r7, #15]
 800d830:	2b03      	cmp	r3, #3
 800d832:	d815      	bhi.n	800d860 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x40>
                        if(!btService[i]) {
 800d834:	7bfb      	ldrb	r3, [r7, #15]
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	3318      	adds	r3, #24
 800d83a:	009b      	lsls	r3, r3, #2
 800d83c:	4413      	add	r3, r2
 800d83e:	685b      	ldr	r3, [r3, #4]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d109      	bne.n	800d858 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x38>
                                btService[i] = pService;
 800d844:	7bfb      	ldrb	r3, [r7, #15]
 800d846:	687a      	ldr	r2, [r7, #4]
 800d848:	3318      	adds	r3, #24
 800d84a:	009b      	lsls	r3, r3, #2
 800d84c:	4413      	add	r3, r2
 800d84e:	683a      	ldr	r2, [r7, #0]
 800d850:	605a      	str	r2, [r3, #4]
                                return i; // Return ID
 800d852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d856:	e005      	b.n	800d864 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x44>
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800d858:	7bfb      	ldrb	r3, [r7, #15]
 800d85a:	3301      	adds	r3, #1
 800d85c:	73fb      	strb	r3, [r7, #15]
 800d85e:	e7e6      	b.n	800d82e <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0xe>
                return -1; // Error registering BluetoothService
 800d860:	f04f 33ff 	mov.w	r3, #4294967295
        };
 800d864:	4618      	mov	r0, r3
 800d866:	3714      	adds	r7, #20
 800d868:	46bd      	mov	sp, r7
 800d86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86e:	4770      	bx	lr

0800d870 <_ZN16BluetoothServiceC1EP3BTD>:
};

/** All Bluetooth services should inherit this class. */
class BluetoothService {
public:
        BluetoothService(BTD *p) : pBtd(p) {
 800d870:	b580      	push	{r7, lr}
 800d872:	b082      	sub	sp, #8
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	6039      	str	r1, [r7, #0]
 800d87a:	4a0a      	ldr	r2, [pc, #40]	; (800d8a4 <_ZN16BluetoothServiceC1EP3BTD+0x34>)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	601a      	str	r2, [r3, #0]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	683a      	ldr	r2, [r7, #0]
 800d884:	609a      	str	r2, [r3, #8]
                if(pBtd)
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	689b      	ldr	r3, [r3, #8]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d005      	beq.n	800d89a <_ZN16BluetoothServiceC1EP3BTD+0x2a>
                        pBtd->registerBluetoothService(this); // Register it as a Bluetooth service
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	689b      	ldr	r3, [r3, #8]
 800d892:	6879      	ldr	r1, [r7, #4]
 800d894:	4618      	mov	r0, r3
 800d896:	f7ff ffc3 	bl	800d820 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>
        };
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	4618      	mov	r0, r3
 800d89e:	3708      	adds	r7, #8
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}
 800d8a4:	0801101c 	.word	0x0801101c

0800d8a8 <_ZN16BluetoothService14checkHciHandleEPht>:
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void onInit() = 0;

        /** Used to check if the incoming L2CAP data matches the HCI Handle */
        bool checkHciHandle(uint8_t *buf, uint16_t handle) {
 800d8a8:	b480      	push	{r7}
 800d8aa:	b085      	sub	sp, #20
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	60f8      	str	r0, [r7, #12]
 800d8b0:	60b9      	str	r1, [r7, #8]
 800d8b2:	4613      	mov	r3, r2
 800d8b4:	80fb      	strh	r3, [r7, #6]
                return (buf[0] == (handle & 0xFF)) && (buf[1] == ((handle >> 8) | 0x20));
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	88fb      	ldrh	r3, [r7, #6]
 800d8be:	b2db      	uxtb	r3, r3
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d10b      	bne.n	800d8dc <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	781b      	ldrb	r3, [r3, #0]
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	88fb      	ldrh	r3, [r7, #6]
 800d8ce:	121b      	asrs	r3, r3, #8
 800d8d0:	f043 0320 	orr.w	r3, r3, #32
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d101      	bne.n	800d8dc <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800d8d8:	2301      	movs	r3, #1
 800d8da:	e000      	b.n	800d8de <_ZN16BluetoothService14checkHciHandleEPht+0x36>
 800d8dc:	2300      	movs	r3, #0
        }
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3714      	adds	r7, #20
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e8:	4770      	bx	lr

0800d8ea <_ZN5BTHID14ParseBTHIDDataEhPh>:
        virtual void ParseBTHIDData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 800d8ea:	b480      	push	{r7}
 800d8ec:	b085      	sub	sp, #20
 800d8ee:	af00      	add	r7, sp, #0
 800d8f0:	60f8      	str	r0, [r7, #12]
 800d8f2:	460b      	mov	r3, r1
 800d8f4:	607a      	str	r2, [r7, #4]
 800d8f6:	72fb      	strb	r3, [r7, #11]
                return;
 800d8f8:	bf00      	nop
        };
 800d8fa:	3714      	adds	r7, #20
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr

0800d904 <_ZN5BTHID11OnInitBTHIDEv>:
        /** Called when a device is connected */
        virtual void OnInitBTHID() {
 800d904:	b480      	push	{r7}
 800d906:	b083      	sub	sp, #12
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
                return;
 800d90c:	bf00      	nop
        };
 800d90e:	370c      	adds	r7, #12
 800d910:	46bd      	mov	sp, r7
 800d912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d916:	4770      	bx	lr

0800d918 <_ZN5BTHID10ResetBTHIDEv>:
        /** Used to reset any buffers in the class that inherits this */
        virtual void ResetBTHID() {
 800d918:	b480      	push	{r7}
 800d91a:	b083      	sub	sp, #12
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
                return;
 800d920:	bf00      	nop
        }
 800d922:	370c      	adds	r7, #12
 800d924:	46bd      	mov	sp, r7
 800d926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92a:	4770      	bx	lr

0800d92c <_ZN5BTHIDC1EP3BTDbPKc>:
#include "BTHID.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the HID device

BTHID::BTHID(BTD *p, bool pair, const char *pin) :
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b086      	sub	sp, #24
 800d930:	af00      	add	r7, sp, #0
 800d932:	60f8      	str	r0, [r7, #12]
 800d934:	60b9      	str	r1, [r7, #8]
 800d936:	603b      	str	r3, [r7, #0]
 800d938:	4613      	mov	r3, r2
 800d93a:	71fb      	strb	r3, [r7, #7]
BluetoothService(p), // Pointer to USB class instance - mandatory
protocolMode(USB_HID_BOOT_PROTOCOL) {
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	68b9      	ldr	r1, [r7, #8]
 800d940:	4618      	mov	r0, r3
 800d942:	f7ff ff95 	bl	800d870 <_ZN16BluetoothServiceC1EP3BTD>
 800d946:	4a1f      	ldr	r2, [pc, #124]	; (800d9c4 <_ZN5BTHIDC1EP3BTDbPKc+0x98>)
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	601a      	str	r2, [r3, #0]
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	2200      	movs	r2, #0
 800d950:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800d954:	2300      	movs	r3, #0
 800d956:	75fb      	strb	r3, [r7, #23]
 800d958:	7dfb      	ldrb	r3, [r7, #23]
 800d95a:	2b01      	cmp	r3, #1
 800d95c:	d809      	bhi.n	800d972 <_ZN5BTHIDC1EP3BTDbPKc+0x46>
                pRptParser[i] = NULL;
 800d95e:	7dfa      	ldrb	r2, [r7, #23]
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	3208      	adds	r2, #8
 800d964:	2100      	movs	r1, #0
 800d966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800d96a:	7dfb      	ldrb	r3, [r7, #23]
 800d96c:	3301      	adds	r3, #1
 800d96e:	75fb      	strb	r3, [r7, #23]
 800d970:	e7f2      	b.n	800d958 <_ZN5BTHIDC1EP3BTDbPKc+0x2c>

        pBtd->pairWithHIDDevice = pair;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	689b      	ldr	r3, [r3, #8]
 800d976:	79fa      	ldrb	r2, [r7, #7]
 800d978:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        pBtd->btdPin = pin;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	689b      	ldr	r3, [r3, #8]
 800d980:	683a      	ldr	r2, [r7, #0]
 800d982:	611a      	str	r2, [r3, #16]

        /* Set device cid for the control and intterrupt channelse - LSB */
        sdp_dcid[0] = 0x50; // 0x0050
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	2250      	movs	r2, #80	; 0x50
 800d988:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        sdp_dcid[1] = 0x00;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	2200      	movs	r2, #0
 800d990:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        control_dcid[0] = 0x70; // 0x0070
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	2270      	movs	r2, #112	; 0x70
 800d998:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        control_dcid[1] = 0x00;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        interrupt_dcid[0] = 0x71; // 0x0071
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	2271      	movs	r2, #113	; 0x71
 800d9a8:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        interrupt_dcid[1] = 0x00;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

        Reset();
 800d9b4:	68f8      	ldr	r0, [r7, #12]
 800d9b6:	f000 f807 	bl	800d9c8 <_ZN5BTHID5ResetEv>
}
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3718      	adds	r7, #24
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}
 800d9c4:	08010ff0 	.word	0x08010ff0

0800d9c8 <_ZN5BTHID5ResetEv>:

void BTHID::Reset() {
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
        connected = false;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	755a      	strb	r2, [r3, #21]
        activeConnection = false;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2200      	movs	r2, #0
 800d9da:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDPConnected = false;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        l2cap_event_flag = 0; // Reset flags
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	611a      	str	r2, [r3, #16]
        l2cap_sdp_state = L2CAP_SDP_WAIT;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	220a      	movs	r2, #10
 800d9f0:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_WAIT;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ResetBTHID();
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	3320      	adds	r3, #32
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	4798      	blx	r3
}
 800da06:	bf00      	nop
 800da08:	3708      	adds	r7, #8
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}

0800da0e <_ZN5BTHID10disconnectEv>:

void BTHID::disconnect() { // Use this void to disconnect the device
 800da0e:	b590      	push	{r4, r7, lr}
 800da10:	b085      	sub	sp, #20
 800da12:	af02      	add	r7, sp, #8
 800da14:	6078      	str	r0, [r7, #4]
        if(SDPConnected)
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d014      	beq.n	800da4a <_ZN5BTHID10disconnectEv+0x3c>
                pBtd->l2cap_disconnection_request(hci_handle, ++identifier, sdp_scid, sdp_dcid);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6898      	ldr	r0, [r3, #8]
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	8999      	ldrh	r1, [r3, #12]
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	7d1b      	ldrb	r3, [r3, #20]
 800da2c:	3301      	adds	r3, #1
 800da2e:	b2da      	uxtb	r2, r3
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	751a      	strb	r2, [r3, #20]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	7d1a      	ldrb	r2, [r3, #20]
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f103 041b 	add.w	r4, r3, #27
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	336f      	adds	r3, #111	; 0x6f
 800da42:	9300      	str	r3, [sp, #0]
 800da44:	4623      	mov	r3, r4
 800da46:	f7ff f9c4 	bl	800cdd2 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        // First the HID interrupt channel has to be disconnected, then the HID control channel and finally the HCI connection
        pBtd->l2cap_disconnection_request(hci_handle, ++identifier, interrupt_scid, interrupt_dcid);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6898      	ldr	r0, [r3, #8]
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	8999      	ldrh	r1, [r3, #12]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	7d1b      	ldrb	r3, [r3, #20]
 800da56:	3301      	adds	r3, #1
 800da58:	b2da      	uxtb	r2, r3
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	751a      	strb	r2, [r3, #20]
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	7d1a      	ldrb	r2, [r3, #20]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f103 0418 	add.w	r4, r3, #24
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	336d      	adds	r3, #109	; 0x6d
 800da6c:	9300      	str	r3, [sp, #0]
 800da6e:	4623      	mov	r3, r4
 800da70:	f7ff f9af 	bl	800cdd2 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        Reset();
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	3308      	adds	r3, #8
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	4798      	blx	r3
        l2cap_sdp_state = L2CAP_DISCONNECT_RESPONSE;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	220e      	movs	r2, #14
 800da84:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_INTERRUPT_DISCONNECT;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2209      	movs	r2, #9
 800da8a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 800da8e:	bf00      	nop
 800da90:	370c      	adds	r7, #12
 800da92:	46bd      	mov	sp, r7
 800da94:	bd90      	pop	{r4, r7, pc}
	...

0800da98 <_ZN5BTHID7ACLDataEPh>:

void BTHID::ACLData(uint8_t* l2capinbuf) {
 800da98:	b590      	push	{r4, r7, lr}
 800da9a:	b087      	sub	sp, #28
 800da9c:	af02      	add	r7, sp, #8
 800da9e:	6078      	str	r0, [r7, #4]
 800daa0:	6039      	str	r1, [r7, #0]
        if(!connected) {
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	7d5b      	ldrb	r3, [r3, #21]
 800daa6:	f083 0301 	eor.w	r3, r3, #1
 800daaa:	b2db      	uxtb	r3, r3
 800daac:	2b00      	cmp	r3, #0
 800daae:	d023      	beq.n	800daf8 <_ZN5BTHID7ACLDataEPh+0x60>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	3308      	adds	r3, #8
 800dab4:	781b      	ldrb	r3, [r3, #0]
 800dab6:	2b02      	cmp	r3, #2
 800dab8:	d11e      	bne.n	800daf8 <_ZN5BTHID7ACLDataEPh+0x60>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM && !pBtd->sdpConnectionClaimed) {
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	330c      	adds	r3, #12
 800dabe:	781b      	ldrb	r3, [r3, #0]
 800dac0:	461a      	mov	r2, r3
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	330d      	adds	r3, #13
 800dac6:	781b      	ldrb	r3, [r3, #0]
 800dac8:	021b      	lsls	r3, r3, #8
 800daca:	4313      	orrs	r3, r2
 800dacc:	2b01      	cmp	r3, #1
 800dace:	d113      	bne.n	800daf8 <_ZN5BTHID7ACLDataEPh+0x60>
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	689b      	ldr	r3, [r3, #8]
 800dad4:	7a9b      	ldrb	r3, [r3, #10]
 800dad6:	f083 0301 	eor.w	r3, r3, #1
 800dada:	b2db      	uxtb	r3, r3
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d00b      	beq.n	800daf8 <_ZN5BTHID7ACLDataEPh+0x60>
                                pBtd->sdpConnectionClaimed = true;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	689b      	ldr	r3, [r3, #8]
 800dae4:	2201      	movs	r2, #1
 800dae6:	729a      	strb	r2, [r3, #10]
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	689b      	ldr	r3, [r3, #8]
 800daec:	8b5a      	ldrh	r2, [r3, #26]
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	819a      	strh	r2, [r3, #12]
                                l2cap_sdp_state = L2CAP_SDP_WAIT; // Reset state
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	220a      	movs	r2, #10
 800daf6:	769a      	strb	r2, [r3, #26]
                        }
                }
        }

        if(!pBtd->l2capConnectionClaimed && pBtd->incomingHIDDevice && !connected && !activeConnection) {
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	689b      	ldr	r3, [r3, #8]
 800dafc:	7a5b      	ldrb	r3, [r3, #9]
 800dafe:	f083 0301 	eor.w	r3, r3, #1
 800db02:	b2db      	uxtb	r3, r3
 800db04:	2b00      	cmp	r3, #0
 800db06:	d03a      	beq.n	800db7e <_ZN5BTHID7ACLDataEPh+0xe6>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	689b      	ldr	r3, [r3, #8]
 800db0c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800db10:	2b00      	cmp	r3, #0
 800db12:	d034      	beq.n	800db7e <_ZN5BTHID7ACLDataEPh+0xe6>
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	7d5b      	ldrb	r3, [r3, #21]
 800db18:	f083 0301 	eor.w	r3, r3, #1
 800db1c:	b2db      	uxtb	r3, r3
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d02d      	beq.n	800db7e <_ZN5BTHID7ACLDataEPh+0xe6>
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800db28:	f083 0301 	eor.w	r3, r3, #1
 800db2c:	b2db      	uxtb	r3, r3
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d025      	beq.n	800db7e <_ZN5BTHID7ACLDataEPh+0xe6>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	3308      	adds	r3, #8
 800db36:	781b      	ldrb	r3, [r3, #0]
 800db38:	2b02      	cmp	r3, #2
 800db3a:	d120      	bne.n	800db7e <_ZN5BTHID7ACLDataEPh+0xe6>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	330c      	adds	r3, #12
 800db40:	781b      	ldrb	r3, [r3, #0]
 800db42:	461a      	mov	r2, r3
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	330d      	adds	r3, #13
 800db48:	781b      	ldrb	r3, [r3, #0]
 800db4a:	021b      	lsls	r3, r3, #8
 800db4c:	4313      	orrs	r3, r2
 800db4e:	2b11      	cmp	r3, #17
 800db50:	d115      	bne.n	800db7e <_ZN5BTHID7ACLDataEPh+0xe6>
                                pBtd->incomingHIDDevice = false;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	689b      	ldr	r3, [r3, #8]
 800db56:	2200      	movs	r2, #0
 800db58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                pBtd->l2capConnectionClaimed = true; // Claim that the incoming connection belongs to this service
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	689b      	ldr	r3, [r3, #8]
 800db60:	2201      	movs	r2, #1
 800db62:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2201      	movs	r2, #1
 800db68:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	689b      	ldr	r3, [r3, #8]
 800db70:	8b5a      	ldrh	r2, [r3, #26]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	819a      	strh	r2, [r3, #12]
                                l2cap_state = L2CAP_WAIT;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2200      	movs	r2, #0
 800db7a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                }
        }

        if(checkHciHandle(l2capinbuf, hci_handle)) { // acl_handle_ok
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	899b      	ldrh	r3, [r3, #12]
 800db84:	461a      	mov	r2, r3
 800db86:	6839      	ldr	r1, [r7, #0]
 800db88:	f7ff fe8e 	bl	800d8a8 <_ZN16BluetoothService14checkHciHandleEPht>
 800db8c:	4603      	mov	r3, r0
 800db8e:	2b00      	cmp	r3, #0
 800db90:	f000 83dd 	beq.w	800e34e <_ZN5BTHID7ACLDataEPh+0x8b6>
                if((l2capinbuf[6] | (l2capinbuf[7] << 8)) == 0x0001U) { // l2cap_control - Channel ID for ACL-U
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	3306      	adds	r3, #6
 800db98:	781b      	ldrb	r3, [r3, #0]
 800db9a:	461a      	mov	r2, r3
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	3307      	adds	r3, #7
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	021b      	lsls	r3, r3, #8
 800dba4:	4313      	orrs	r3, r2
 800dba6:	2b01      	cmp	r3, #1
 800dba8:	f040 829b 	bne.w	800e0e2 <_ZN5BTHID7ACLDataEPh+0x64a>
                        if(l2capinbuf[8] == L2CAP_CMD_COMMAND_REJECT) {
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	3308      	adds	r3, #8
 800dbb0:	781b      	ldrb	r3, [r3, #0]
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	f000 83c5 	beq.w	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[15], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
#endif
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_RESPONSE) {
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	3308      	adds	r3, #8
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	2b03      	cmp	r3, #3
 800dbc0:	f040 808d 	bne.w	800dcde <_ZN5BTHID7ACLDataEPh+0x246>
                                if(((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) && ((l2capinbuf[18] | (l2capinbuf[19] << 8)) == SUCCESSFUL)) { // Success
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	3310      	adds	r3, #16
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	461a      	mov	r2, r3
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	3311      	adds	r3, #17
 800dbd0:	781b      	ldrb	r3, [r3, #0]
 800dbd2:	021b      	lsls	r3, r3, #8
 800dbd4:	4313      	orrs	r3, r2
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	f040 83b3 	bne.w	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	3312      	adds	r3, #18
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	461a      	mov	r2, r3
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	3313      	adds	r3, #19
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	021b      	lsls	r3, r3, #8
 800dbec:	4313      	orrs	r3, r2
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	f040 83a7 	bne.w	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        if(l2capinbuf[14] == sdp_dcid[0] && l2capinbuf[15] == sdp_dcid[1]) {
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	330e      	adds	r3, #14
 800dbf8:	781a      	ldrb	r2, [r3, #0]
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800dc00:	429a      	cmp	r2, r3
 800dc02:	d124      	bne.n	800dc4e <_ZN5BTHID7ACLDataEPh+0x1b6>
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	330f      	adds	r3, #15
 800dc08:	781a      	ldrb	r2, [r3, #0]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d11c      	bne.n	800dc4e <_ZN5BTHID7ACLDataEPh+0x1b6>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	7a5a      	ldrb	r2, [r3, #9]
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	751a      	strb	r2, [r3, #20]
                                                sdp_scid[0] = l2capinbuf[12];
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	7b1a      	ldrb	r2, [r3, #12]
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	76da      	strb	r2, [r3, #27]
                                                sdp_scid[1] = l2capinbuf[13];
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	7b5a      	ldrb	r2, [r3, #13]
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	771a      	strb	r2, [r3, #28]
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nSend SDP Config Request"), 0x80);
#endif
                                                identifier++;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	7d1b      	ldrb	r3, [r3, #20]
 800dc30:	3301      	adds	r3, #1
 800dc32:	b2da      	uxtb	r2, r3
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	751a      	strb	r2, [r3, #20]
                                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6898      	ldr	r0, [r3, #8]
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	8999      	ldrh	r1, [r3, #12]
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	7d1a      	ldrb	r2, [r3, #20]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	331b      	adds	r3, #27
 800dc48:	f7ff f825 	bl	800cc96 <_ZN3BTD20l2cap_config_requestEthPh>
 800dc4c:	e379      	b.n	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        } else if(l2capinbuf[14] == control_dcid[0] && l2capinbuf[15] == control_dcid[1]) {
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	330e      	adds	r3, #14
 800dc52:	781a      	ldrb	r2, [r3, #0]
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d11a      	bne.n	800dc94 <_ZN5BTHID7ACLDataEPh+0x1fc>
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	330f      	adds	r3, #15
 800dc62:	781a      	ldrb	r2, [r3, #0]
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d112      	bne.n	800dc94 <_ZN5BTHID7ACLDataEPh+0x1fc>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	7a5a      	ldrb	r2, [r3, #9]
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	751a      	strb	r2, [r3, #20]
                                                control_scid[0] = l2capinbuf[12];
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	7b1a      	ldrb	r2, [r3, #12]
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	759a      	strb	r2, [r3, #22]
                                                control_scid[1] = l2capinbuf[13];
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	7b5a      	ldrb	r2, [r3, #13]
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	75da      	strb	r2, [r3, #23]
                                                l2cap_set_flag(L2CAP_FLAG_CONTROL_CONNECTED);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	691b      	ldr	r3, [r3, #16]
 800dc8a:	f043 0204 	orr.w	r2, r3, #4
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	611a      	str	r2, [r3, #16]
 800dc92:	e356      	b.n	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        } else if(l2capinbuf[14] == interrupt_dcid[0] && l2capinbuf[15] == interrupt_dcid[1]) {
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	330e      	adds	r3, #14
 800dc98:	781a      	ldrb	r2, [r3, #0]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800dca0:	429a      	cmp	r2, r3
 800dca2:	f040 834e 	bne.w	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	330f      	adds	r3, #15
 800dcaa:	781a      	ldrb	r2, [r3, #0]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	f040 8345 	bne.w	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	7a5a      	ldrb	r2, [r3, #9]
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	751a      	strb	r2, [r3, #20]
                                                interrupt_scid[0] = l2capinbuf[12];
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	7b1a      	ldrb	r2, [r3, #12]
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	761a      	strb	r2, [r3, #24]
                                                interrupt_scid[1] = l2capinbuf[13];
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	7b5a      	ldrb	r2, [r3, #13]
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	765a      	strb	r2, [r3, #25]
                                                l2cap_set_flag(L2CAP_FLAG_INTERRUPT_CONNECTED);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	691b      	ldr	r3, [r3, #16]
 800dcd4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	611a      	str	r2, [r3, #16]
 800dcdc:	e331      	b.n	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	3308      	adds	r3, #8
 800dce2:	781b      	ldrb	r3, [r3, #0]
 800dce4:	2b02      	cmp	r3, #2
 800dce6:	d15a      	bne.n	800dd9e <_ZN5BTHID7ACLDataEPh+0x306>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
                                Notify(PSTR(" Identifier: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[9], 0x80);
#endif
                                if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM) {
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	330c      	adds	r3, #12
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	461a      	mov	r2, r3
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	330d      	adds	r3, #13
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	021b      	lsls	r3, r3, #8
 800dcf8:	4313      	orrs	r3, r2
 800dcfa:	2b01      	cmp	r3, #1
 800dcfc:	d112      	bne.n	800dd24 <_ZN5BTHID7ACLDataEPh+0x28c>
                                        identifier = l2capinbuf[9];
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	7a5a      	ldrb	r2, [r3, #9]
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	751a      	strb	r2, [r3, #20]
                                        sdp_scid[0] = l2capinbuf[14];
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	7b9a      	ldrb	r2, [r3, #14]
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	76da      	strb	r2, [r3, #27]
                                        sdp_scid[1] = l2capinbuf[15];
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	7bda      	ldrb	r2, [r3, #15]
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	771a      	strb	r2, [r3, #28]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	691b      	ldr	r3, [r3, #16]
 800dd1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	611a      	str	r2, [r3, #16]
 800dd22:	e30e      	b.n	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	330c      	adds	r3, #12
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	461a      	mov	r2, r3
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	330d      	adds	r3, #13
 800dd30:	781b      	ldrb	r3, [r3, #0]
 800dd32:	021b      	lsls	r3, r3, #8
 800dd34:	4313      	orrs	r3, r2
 800dd36:	2b11      	cmp	r3, #17
 800dd38:	d112      	bne.n	800dd60 <_ZN5BTHID7ACLDataEPh+0x2c8>
                                        identifier = l2capinbuf[9];
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	7a5a      	ldrb	r2, [r3, #9]
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	751a      	strb	r2, [r3, #20]
                                        control_scid[0] = l2capinbuf[14];
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	7b9a      	ldrb	r2, [r3, #14]
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	759a      	strb	r2, [r3, #22]
                                        control_scid[1] = l2capinbuf[15];
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	7bda      	ldrb	r2, [r3, #15]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	75da      	strb	r2, [r3, #23]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	691b      	ldr	r3, [r3, #16]
 800dd56:	f043 0201 	orr.w	r2, r3, #1
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	611a      	str	r2, [r3, #16]
 800dd5e:	e2f0      	b.n	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_INTR_PSM) {
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	330c      	adds	r3, #12
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	461a      	mov	r2, r3
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	330d      	adds	r3, #13
 800dd6c:	781b      	ldrb	r3, [r3, #0]
 800dd6e:	021b      	lsls	r3, r3, #8
 800dd70:	4313      	orrs	r3, r2
 800dd72:	2b13      	cmp	r3, #19
 800dd74:	f040 82e5 	bne.w	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        identifier = l2capinbuf[9];
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	7a5a      	ldrb	r2, [r3, #9]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	751a      	strb	r2, [r3, #20]
                                        interrupt_scid[0] = l2capinbuf[14];
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	7b9a      	ldrb	r2, [r3, #14]
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	761a      	strb	r2, [r3, #24]
                                        interrupt_scid[1] = l2capinbuf[15];
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	7bda      	ldrb	r2, [r3, #15]
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	765a      	strb	r2, [r3, #25]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	691b      	ldr	r3, [r3, #16]
 800dd94:	f043 0210 	orr.w	r2, r3, #16
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	611a      	str	r2, [r3, #16]
 800dd9c:	e2d1      	b.n	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_RESPONSE) {
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	3308      	adds	r3, #8
 800dda2:	781b      	ldrb	r3, [r3, #0]
 800dda4:	2b05      	cmp	r3, #5
 800dda6:	d15e      	bne.n	800de66 <_ZN5BTHID7ACLDataEPh+0x3ce>
                                if((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) { // Success
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	3310      	adds	r3, #16
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	461a      	mov	r2, r3
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	3311      	adds	r3, #17
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	021b      	lsls	r3, r3, #8
 800ddb8:	4313      	orrs	r3, r2
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	f040 82c1 	bne.w	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	330c      	adds	r3, #12
 800ddc4:	781a      	ldrb	r2, [r3, #0]
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d112      	bne.n	800ddf6 <_ZN5BTHID7ACLDataEPh+0x35e>
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	330d      	adds	r3, #13
 800ddd4:	781a      	ldrb	r2, [r3, #0]
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d10a      	bne.n	800ddf6 <_ZN5BTHID7ACLDataEPh+0x35e>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	7a5a      	ldrb	r2, [r3, #9]
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	691b      	ldr	r3, [r3, #16]
 800ddec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	611a      	str	r2, [r3, #16]
 800ddf4:	e2a5      	b.n	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	330c      	adds	r3, #12
 800ddfa:	781a      	ldrb	r2, [r3, #0]
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800de02:	429a      	cmp	r2, r3
 800de04:	d112      	bne.n	800de2c <_ZN5BTHID7ACLDataEPh+0x394>
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	330d      	adds	r3, #13
 800de0a:	781a      	ldrb	r2, [r3, #0]
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800de12:	429a      	cmp	r2, r3
 800de14:	d10a      	bne.n	800de2c <_ZN5BTHID7ACLDataEPh+0x394>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	7a5a      	ldrb	r2, [r3, #9]
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	691b      	ldr	r3, [r3, #16]
 800de22:	f043 0202 	orr.w	r2, r3, #2
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	611a      	str	r2, [r3, #16]
 800de2a:	e28a      	b.n	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	330c      	adds	r3, #12
 800de30:	781a      	ldrb	r2, [r3, #0]
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800de38:	429a      	cmp	r2, r3
 800de3a:	f040 8282 	bne.w	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	330d      	adds	r3, #13
 800de42:	781a      	ldrb	r2, [r3, #0]
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800de4a:	429a      	cmp	r2, r3
 800de4c:	f040 8279 	bne.w	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	7a5a      	ldrb	r2, [r3, #9]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	691b      	ldr	r3, [r3, #16]
 800de5c:	f043 0220 	orr.w	r2, r3, #32
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	611a      	str	r2, [r3, #16]
 800de64:	e26d      	b.n	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_REQUEST) {
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	3308      	adds	r3, #8
 800de6a:	781b      	ldrb	r3, [r3, #0]
 800de6c:	2b04      	cmp	r3, #4
 800de6e:	d155      	bne.n	800df1c <_ZN5BTHID7ACLDataEPh+0x484>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	330c      	adds	r3, #12
 800de74:	781a      	ldrb	r2, [r3, #0]
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d113      	bne.n	800dea8 <_ZN5BTHID7ACLDataEPh+0x410>
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	330d      	adds	r3, #13
 800de84:	781a      	ldrb	r2, [r3, #0]
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800de8c:	429a      	cmp	r2, r3
 800de8e:	d10b      	bne.n	800dea8 <_ZN5BTHID7ACLDataEPh+0x410>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nSDP Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], sdp_scid);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6898      	ldr	r0, [r3, #8]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	8999      	ldrh	r1, [r3, #12]
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	3309      	adds	r3, #9
 800de9c:	781a      	ldrb	r2, [r3, #0]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	331b      	adds	r3, #27
 800dea2:	f7fe ff43 	bl	800cd2c <_ZN3BTD21l2cap_config_responseEthPh>
 800dea6:	e24c      	b.n	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	330c      	adds	r3, #12
 800deac:	781a      	ldrb	r2, [r3, #0]
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d113      	bne.n	800dee0 <_ZN5BTHID7ACLDataEPh+0x448>
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	330d      	adds	r3, #13
 800debc:	781a      	ldrb	r2, [r3, #0]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d10b      	bne.n	800dee0 <_ZN5BTHID7ACLDataEPh+0x448>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Control Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], control_scid);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6898      	ldr	r0, [r3, #8]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	8999      	ldrh	r1, [r3, #12]
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	3309      	adds	r3, #9
 800ded4:	781a      	ldrb	r2, [r3, #0]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	3316      	adds	r3, #22
 800deda:	f7fe ff27 	bl	800cd2c <_ZN3BTD21l2cap_config_responseEthPh>
 800dede:	e230      	b.n	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	330c      	adds	r3, #12
 800dee4:	781a      	ldrb	r2, [r3, #0]
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800deec:	429a      	cmp	r2, r3
 800deee:	f040 8228 	bne.w	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	330d      	adds	r3, #13
 800def6:	781a      	ldrb	r2, [r3, #0]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800defe:	429a      	cmp	r2, r3
 800df00:	f040 821f 	bne.w	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Interrupt Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], interrupt_scid);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6898      	ldr	r0, [r3, #8]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	8999      	ldrh	r1, [r3, #12]
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	3309      	adds	r3, #9
 800df10:	781a      	ldrb	r2, [r3, #0]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	3318      	adds	r3, #24
 800df16:	f7fe ff09 	bl	800cd2c <_ZN3BTD21l2cap_config_responseEthPh>
 800df1a:	e212      	b.n	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_REQUEST) {
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	3308      	adds	r3, #8
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	2b06      	cmp	r3, #6
 800df24:	d170      	bne.n	800e008 <_ZN5BTHID7ACLDataEPh+0x570>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	330c      	adds	r3, #12
 800df2a:	781a      	ldrb	r2, [r3, #0]
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800df32:	429a      	cmp	r2, r3
 800df34:	d112      	bne.n	800df5c <_ZN5BTHID7ACLDataEPh+0x4c4>
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	330d      	adds	r3, #13
 800df3a:	781a      	ldrb	r2, [r3, #0]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800df42:	429a      	cmp	r2, r3
 800df44:	d10a      	bne.n	800df5c <_ZN5BTHID7ACLDataEPh+0x4c4>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	7a5a      	ldrb	r2, [r3, #9]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	691b      	ldr	r3, [r3, #16]
 800df52:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	611a      	str	r2, [r3, #16]
 800df5a:	e1f2      	b.n	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	330c      	adds	r3, #12
 800df60:	781a      	ldrb	r2, [r3, #0]
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800df68:	429a      	cmp	r2, r3
 800df6a:	d121      	bne.n	800dfb0 <_ZN5BTHID7ACLDataEPh+0x518>
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	330d      	adds	r3, #13
 800df70:	781a      	ldrb	r2, [r3, #0]
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800df78:	429a      	cmp	r2, r3
 800df7a:	d119      	bne.n	800dfb0 <_ZN5BTHID7ACLDataEPh+0x518>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	7a5a      	ldrb	r2, [r3, #9]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, control_dcid, control_scid);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6898      	ldr	r0, [r3, #8]
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	8999      	ldrh	r1, [r3, #12]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	7d1a      	ldrb	r2, [r3, #20]
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	3316      	adds	r3, #22
 800df9a:	9300      	str	r3, [sp, #0]
 800df9c:	4623      	mov	r3, r4
 800df9e:	f7fe ff55 	bl	800ce4c <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	3308      	adds	r3, #8
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	4798      	blx	r3
 800dfae:	e1c8      	b.n	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	330c      	adds	r3, #12
 800dfb4:	781a      	ldrb	r2, [r3, #0]
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	f040 81c0 	bne.w	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	330d      	adds	r3, #13
 800dfc6:	781a      	ldrb	r2, [r3, #0]
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	f040 81b7 	bne.w	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	7a5a      	ldrb	r2, [r3, #9]
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6898      	ldr	r0, [r3, #8]
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	8999      	ldrh	r1, [r3, #12]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	7d1a      	ldrb	r2, [r3, #20]
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	3318      	adds	r3, #24
 800dff2:	9300      	str	r3, [sp, #0]
 800dff4:	4623      	mov	r3, r4
 800dff6:	f7fe ff29 	bl	800ce4c <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	3308      	adds	r3, #8
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	4798      	blx	r3
 800e006:	e19c      	b.n	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_RESPONSE) {
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	3308      	adds	r3, #8
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	2b07      	cmp	r3, #7
 800e010:	d14c      	bne.n	800e0ac <_ZN5BTHID7ACLDataEPh+0x614>
                                if(l2capinbuf[12] == sdp_scid[0] && l2capinbuf[13] == sdp_scid[1]) {
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	330c      	adds	r3, #12
 800e016:	781a      	ldrb	r2, [r3, #0]
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	7edb      	ldrb	r3, [r3, #27]
 800e01c:	429a      	cmp	r2, r3
 800e01e:	d111      	bne.n	800e044 <_ZN5BTHID7ACLDataEPh+0x5ac>
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	330d      	adds	r3, #13
 800e024:	781a      	ldrb	r2, [r3, #0]
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	7f1b      	ldrb	r3, [r3, #28]
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d10a      	bne.n	800e044 <_ZN5BTHID7ACLDataEPh+0x5ac>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	7a5a      	ldrb	r2, [r3, #9]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_RESPONSE);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	691b      	ldr	r3, [r3, #16]
 800e03a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	611a      	str	r2, [r3, #16]
 800e042:	e17e      	b.n	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == control_scid[0] && l2capinbuf[13] == control_scid[1]) {
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	330c      	adds	r3, #12
 800e048:	781a      	ldrb	r2, [r3, #0]
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	7d9b      	ldrb	r3, [r3, #22]
 800e04e:	429a      	cmp	r2, r3
 800e050:	d111      	bne.n	800e076 <_ZN5BTHID7ACLDataEPh+0x5de>
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	330d      	adds	r3, #13
 800e056:	781a      	ldrb	r2, [r3, #0]
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	7ddb      	ldrb	r3, [r3, #23]
 800e05c:	429a      	cmp	r2, r3
 800e05e:	d10a      	bne.n	800e076 <_ZN5BTHID7ACLDataEPh+0x5de>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	7a5a      	ldrb	r2, [r3, #9]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	691b      	ldr	r3, [r3, #16]
 800e06c:	f043 0208 	orr.w	r2, r3, #8
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	611a      	str	r2, [r3, #16]
 800e074:	e165      	b.n	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == interrupt_scid[0] && l2capinbuf[13] == interrupt_scid[1]) {
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	330c      	adds	r3, #12
 800e07a:	781a      	ldrb	r2, [r3, #0]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	7e1b      	ldrb	r3, [r3, #24]
 800e080:	429a      	cmp	r2, r3
 800e082:	f040 815e 	bne.w	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	330d      	adds	r3, #13
 800e08a:	781a      	ldrb	r2, [r3, #0]
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	7e5b      	ldrb	r3, [r3, #25]
 800e090:	429a      	cmp	r2, r3
 800e092:	f040 8156 	bne.w	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	7a5a      	ldrb	r2, [r3, #9]
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	691b      	ldr	r3, [r3, #16]
 800e0a2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	611a      	str	r2, [r3, #16]
 800e0aa:	e14a      	b.n	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_INFORMATION_REQUEST) {
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	3308      	adds	r3, #8
 800e0b0:	781b      	ldrb	r3, [r3, #0]
 800e0b2:	2b0a      	cmp	r3, #10
 800e0b4:	f040 8145 	bne.w	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nInformation request"), 0x80);
#endif
                                identifier = l2capinbuf[9];
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	7a5a      	ldrb	r2, [r3, #9]
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_information_response(hci_handle, identifier, l2capinbuf[12], l2capinbuf[13]);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6898      	ldr	r0, [r3, #8]
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	8999      	ldrh	r1, [r3, #12]
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	7d1a      	ldrb	r2, [r3, #20]
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	330c      	adds	r3, #12
 800e0d0:	781c      	ldrb	r4, [r3, #0]
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	330d      	adds	r3, #13
 800e0d6:	781b      	ldrb	r3, [r3, #0]
 800e0d8:	9300      	str	r3, [sp, #0]
 800e0da:	4623      	mov	r3, r4
 800e0dc:	f7fe fef3 	bl	800cec6 <_ZN3BTD26l2cap_information_responseEthhh>
 800e0e0:	e12f      	b.n	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                identifier = l2capinbuf[9];
                                Notify(PSTR("\r\nL2CAP Unknown Signaling Command: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == sdp_dcid[0] && l2capinbuf[7] == sdp_dcid[1]) { // SDP
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	3306      	adds	r3, #6
 800e0e6:	781a      	ldrb	r2, [r3, #0]
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	f040 8087 	bne.w	800e202 <_ZN5BTHID7ACLDataEPh+0x76a>
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	3307      	adds	r3, #7
 800e0f8:	781a      	ldrb	r2, [r3, #0]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800e100:	429a      	cmp	r2, r3
 800e102:	d17e      	bne.n	800e202 <_ZN5BTHID7ACLDataEPh+0x76a>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	3308      	adds	r3, #8
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	2b02      	cmp	r3, #2
 800e10c:	d131      	bne.n	800e172 <_ZN5BTHID7ACLDataEPh+0x6da>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_SEARCH_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_SEARCH_RESPONSE;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2203      	movs	r2, #3
 800e112:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	7a5a      	ldrb	r2, [r3, #9]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	7a9a      	ldrb	r2, [r3, #10]
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2200      	movs	r2, #0
 800e12e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2205      	movs	r2, #5
 800e136:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB TotalServiceRecordCount
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2200      	movs	r2, #0
 800e13e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x00; // LSB TotalServiceRecordCount = 0
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2200      	movs	r2, #0
 800e146:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                l2capoutbuf[7] = 0x00; // MSB CurrentServiceRecordCount
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2200      	movs	r2, #0
 800e14e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // LSB CurrentServiceRecordCount = 0
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	2200      	movs	r2, #0
 800e156:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2200      	movs	r2, #0
 800e15e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	3328      	adds	r3, #40	; 0x28
 800e166:	220a      	movs	r2, #10
 800e168:	4619      	mov	r1, r3
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f000 fb7a 	bl	800e864 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800e170:	e0e4      	b.n	800e33c <_ZN5BTHID7ACLDataEPh+0x8a4>
                        } else if(l2capinbuf[8] == SDP_SERVICE_ATTRIBUTE_REQUEST) {
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	3308      	adds	r3, #8
 800e176:	781b      	ldrb	r3, [r3, #0]
 800e178:	2b04      	cmp	r3, #4
 800e17a:	d131      	bne.n	800e1e0 <_ZN5BTHID7ACLDataEPh+0x748>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_ATTRIBUTE_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_ATTRIBUTE_RESPONSE;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2205      	movs	r2, #5
 800e180:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	7a5a      	ldrb	r2, [r3, #9]
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	7a9a      	ldrb	r2, [r3, #10]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2200      	movs	r2, #0
 800e19c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2205      	movs	r2, #5
 800e1a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB AttributeListByteCount
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x02; // LSB AttributeListByteCount = 2
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2202      	movs	r2, #2
 800e1b4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                // TODO: What to send?
                                l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2235      	movs	r2, #53	; 0x35
 800e1bc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // Length = 0
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	3328      	adds	r3, #40	; 0x28
 800e1d4:	220a      	movs	r2, #10
 800e1d6:	4619      	mov	r1, r3
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f000 fb43 	bl	800e864 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800e1de:	e0ad      	b.n	800e33c <_ZN5BTHID7ACLDataEPh+0x8a4>
                        } else if(l2capinbuf[8] == SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST) {
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	3308      	adds	r3, #8
 800e1e4:	781b      	ldrb	r3, [r3, #0]
 800e1e6:	2b06      	cmp	r3, #6
 800e1e8:	f040 80a8 	bne.w	800e33c <_ZN5BTHID7ACLDataEPh+0x8a4>
                                for(uint8_t i = 0; i < length; i++) {
                                        D_PrintHex<uint8_t > (l2capinbuf[13 + i], 0x80);
                                        Notify(PSTR(" "), 0x80);
                                }
#endif
                                serviceNotSupported(l2capinbuf[9], l2capinbuf[10]); // The service is not supported
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	3309      	adds	r3, #9
 800e1f0:	7819      	ldrb	r1, [r3, #0]
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	330a      	adds	r3, #10
 800e1f6:	781b      	ldrb	r3, [r3, #0]
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f000 fb4c 	bl	800e898 <_ZN5BTHID19serviceNotSupportedEhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800e200:	e09c      	b.n	800e33c <_ZN5BTHID7ACLDataEPh+0x8a4>
                        else {
                                Notify(PSTR("\r\nUnknown PDU: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == interrupt_dcid[0] && l2capinbuf[7] == interrupt_dcid[1]) { // l2cap_interrupt
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	3306      	adds	r3, #6
 800e206:	781a      	ldrb	r2, [r3, #0]
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800e20e:	429a      	cmp	r2, r3
 800e210:	d166      	bne.n	800e2e0 <_ZN5BTHID7ACLDataEPh+0x848>
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	3307      	adds	r3, #7
 800e216:	781a      	ldrb	r2, [r3, #0]
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800e21e:	429a      	cmp	r2, r3
 800e220:	d15e      	bne.n	800e2e0 <_ZN5BTHID7ACLDataEPh+0x848>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA1) { // HID BT DATA (0xA0) | Report Type (Input 0x01)
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	3308      	adds	r3, #8
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	2ba1      	cmp	r3, #161	; 0xa1
 800e22a:	f040 8089 	bne.w	800e340 <_ZN5BTHID7ACLDataEPh+0x8a8>
                                lastBtDataInputIntMillis = (uint32_t)millis(); // Store the timestamp of the report
 800e22e:	f7f4 fdc3 	bl	8002db8 <HAL_GetTick>
 800e232:	4603      	mov	r3, r0
 800e234:	4a48      	ldr	r2, [pc, #288]	; (800e358 <_ZN5BTHID7ACLDataEPh+0x8c0>)
 800e236:	fba2 2303 	umull	r2, r3, r2, r3
 800e23a:	099a      	lsrs	r2, r3, #6
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	675a      	str	r2, [r3, #116]	; 0x74

                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	3305      	adds	r3, #5
 800e244:	781b      	ldrb	r3, [r3, #0]
 800e246:	021b      	lsls	r3, r3, #8
 800e248:	b21a      	sxth	r2, r3
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	3304      	adds	r3, #4
 800e24e:	781b      	ldrb	r3, [r3, #0]
 800e250:	b21b      	sxth	r3, r3
 800e252:	4313      	orrs	r3, r2
 800e254:	b21b      	sxth	r3, r3
 800e256:	81fb      	strh	r3, [r7, #14]
                                ParseBTHIDData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	3314      	adds	r3, #20
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	89fa      	ldrh	r2, [r7, #14]
 800e262:	b2d2      	uxtb	r2, r2
 800e264:	3a01      	subs	r2, #1
 800e266:	b2d1      	uxtb	r1, r2
 800e268:	683a      	ldr	r2, [r7, #0]
 800e26a:	3209      	adds	r2, #9
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	4798      	blx	r3

                                switch(l2capinbuf[9]) { // Report ID
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	3309      	adds	r3, #9
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	2b01      	cmp	r3, #1
 800e278:	d002      	beq.n	800e280 <_ZN5BTHID7ACLDataEPh+0x7e8>
 800e27a:	2b02      	cmp	r3, #2
 800e27c:	d016      	beq.n	800e2ac <_ZN5BTHID7ACLDataEPh+0x814>
                        } else {
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nUnhandled L2CAP interrupt report: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
#endif
                        }
 800e27e:	e05f      	b.n	800e340 <_ZN5BTHID7ACLDataEPh+0x8a8>
                                                if(pRptParser[KEYBOARD_PARSER_ID])
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6a1b      	ldr	r3, [r3, #32]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d027      	beq.n	800e2d8 <_ZN5BTHID7ACLDataEPh+0x840>
                                                        pRptParser[KEYBOARD_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6a18      	ldr	r0, [r3, #32]
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6a1b      	ldr	r3, [r3, #32]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	681c      	ldr	r4, [r3, #0]
 800e294:	89fb      	ldrh	r3, [r7, #14]
 800e296:	b2db      	uxtb	r3, r3
 800e298:	3b02      	subs	r3, #2
 800e29a:	b2da      	uxtb	r2, r3
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	330a      	adds	r3, #10
 800e2a0:	9300      	str	r3, [sp, #0]
 800e2a2:	4613      	mov	r3, r2
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	6879      	ldr	r1, [r7, #4]
 800e2a8:	47a0      	blx	r4
                                                break;
 800e2aa:	e015      	b.n	800e2d8 <_ZN5BTHID7ACLDataEPh+0x840>
                                                if(pRptParser[MOUSE_PARSER_ID])
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d013      	beq.n	800e2dc <_ZN5BTHID7ACLDataEPh+0x844>
                                                        pRptParser[MOUSE_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	681c      	ldr	r4, [r3, #0]
 800e2c0:	89fb      	ldrh	r3, [r7, #14]
 800e2c2:	b2db      	uxtb	r3, r3
 800e2c4:	3b02      	subs	r3, #2
 800e2c6:	b2da      	uxtb	r2, r3
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	330a      	adds	r3, #10
 800e2cc:	9300      	str	r3, [sp, #0]
 800e2ce:	4613      	mov	r3, r2
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	6879      	ldr	r1, [r7, #4]
 800e2d4:	47a0      	blx	r4
                                                break;
 800e2d6:	e001      	b.n	800e2dc <_ZN5BTHID7ACLDataEPh+0x844>
                                                break;
 800e2d8:	bf00      	nop
 800e2da:	e031      	b.n	800e340 <_ZN5BTHID7ACLDataEPh+0x8a8>
                                                break;
 800e2dc:	bf00      	nop
                        }
 800e2de:	e02f      	b.n	800e340 <_ZN5BTHID7ACLDataEPh+0x8a8>
                } else if(l2capinbuf[6] == control_dcid[0] && l2capinbuf[7] == control_dcid[1]) { // l2cap_control
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	3306      	adds	r3, #6
 800e2e4:	781a      	ldrb	r2, [r3, #0]
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	d128      	bne.n	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	3307      	adds	r3, #7
 800e2f4:	781a      	ldrb	r2, [r3, #0]
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d120      	bne.n	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA3) { // HID BT DATA (0xA0) | Report Type (Feature 0x03)
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	3308      	adds	r3, #8
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	2ba3      	cmp	r3, #163	; 0xa3
 800e308:	d11b      	bne.n	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	3305      	adds	r3, #5
 800e30e:	781b      	ldrb	r3, [r3, #0]
 800e310:	021b      	lsls	r3, r3, #8
 800e312:	b21a      	sxth	r2, r3
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	3304      	adds	r3, #4
 800e318:	781b      	ldrb	r3, [r3, #0]
 800e31a:	b21b      	sxth	r3, r3
 800e31c:	4313      	orrs	r3, r2
 800e31e:	b21b      	sxth	r3, r3
 800e320:	81bb      	strh	r3, [r7, #12]
                                ParseBTHIDControlData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	3318      	adds	r3, #24
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	89ba      	ldrh	r2, [r7, #12]
 800e32c:	b2d2      	uxtb	r2, r2
 800e32e:	3a01      	subs	r2, #1
 800e330:	b2d1      	uxtb	r1, r2
 800e332:	683a      	ldr	r2, [r7, #0]
 800e334:	3209      	adds	r2, #9
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	4798      	blx	r3
 800e33a:	e002      	b.n	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800e33c:	bf00      	nop
 800e33e:	e000      	b.n	800e342 <_ZN5BTHID7ACLDataEPh+0x8aa>
                        }
 800e340:	bf00      	nop
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
                }
#endif
                SDP_task();
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f000 f80a 	bl	800e35c <_ZN5BTHID8SDP_taskEv>
                L2CAP_task();
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f000 f8b9 	bl	800e4c0 <_ZN5BTHID10L2CAP_taskEv>
        }
}
 800e34e:	bf00      	nop
 800e350:	3714      	adds	r7, #20
 800e352:	46bd      	mov	sp, r7
 800e354:	bd90      	pop	{r4, r7, pc}
 800e356:	bf00      	nop
 800e358:	10624dd3 	.word	0x10624dd3

0800e35c <_ZN5BTHID8SDP_taskEv>:

void BTHID::SDP_task() {
 800e35c:	b5b0      	push	{r4, r5, r7, lr}
 800e35e:	b084      	sub	sp, #16
 800e360:	af02      	add	r7, sp, #8
 800e362:	6078      	str	r0, [r7, #4]
        switch(l2cap_sdp_state) {
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	7e9b      	ldrb	r3, [r3, #26]
 800e368:	2b0e      	cmp	r3, #14
 800e36a:	f000 8086 	beq.w	800e47a <_ZN5BTHID8SDP_taskEv+0x11e>
 800e36e:	2b0e      	cmp	r3, #14
 800e370:	f300 80a1 	bgt.w	800e4b6 <_ZN5BTHID8SDP_taskEv+0x15a>
 800e374:	2b0a      	cmp	r3, #10
 800e376:	d002      	beq.n	800e37e <_ZN5BTHID8SDP_taskEv+0x22>
 800e378:	2b0b      	cmp	r3, #11
 800e37a:	d06a      	beq.n	800e452 <_ZN5BTHID8SDP_taskEv+0xf6>
                                hci_handle = -1; // Reset handle
                                Reset();
                        }
                        break;
        }
}
 800e37c:	e09b      	b.n	800e4b6 <_ZN5BTHID8SDP_taskEv+0x15a>
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST)) {
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	691b      	ldr	r3, [r3, #16]
 800e382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e386:	2b00      	cmp	r3, #0
 800e388:	d043      	beq.n	800e412 <_ZN5BTHID8SDP_taskEv+0xb6>
                                l2cap_clear_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST); // Clear flag
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	691b      	ldr	r3, [r3, #16]
 800e38e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	611a      	str	r2, [r3, #16]
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, PENDING);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6898      	ldr	r0, [r3, #8]
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	8999      	ldrh	r1, [r3, #12]
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	7d1a      	ldrb	r2, [r3, #20]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	331b      	adds	r3, #27
 800e3ac:	2501      	movs	r5, #1
 800e3ae:	9501      	str	r5, [sp, #4]
 800e3b0:	9300      	str	r3, [sp, #0]
 800e3b2:	4623      	mov	r3, r4
 800e3b4:	f7fe fc22 	bl	800cbfc <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800e3b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e3bc:	f7f4 fd08 	bl	8002dd0 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, SUCCESSFUL);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6898      	ldr	r0, [r3, #8]
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	8999      	ldrh	r1, [r3, #12]
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	7d1a      	ldrb	r2, [r3, #20]
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	331b      	adds	r3, #27
 800e3d6:	2500      	movs	r5, #0
 800e3d8:	9501      	str	r5, [sp, #4]
 800e3da:	9300      	str	r3, [sp, #0]
 800e3dc:	4623      	mov	r3, r4
 800e3de:	f7fe fc0d 	bl	800cbfc <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	7d1b      	ldrb	r3, [r3, #20]
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	b2da      	uxtb	r2, r3
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800e3ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e3f2:	f7f4 fced 	bl	8002dd0 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6898      	ldr	r0, [r3, #8]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	8999      	ldrh	r1, [r3, #12]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	7d1a      	ldrb	r2, [r3, #20]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	331b      	adds	r3, #27
 800e406:	f7fe fc46 	bl	800cc96 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_sdp_state = L2CAP_SDP_SUCCESS;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	220b      	movs	r2, #11
 800e40e:	769a      	strb	r2, [r3, #26]
                        break;
 800e410:	e04c      	b.n	800e4ac <_ZN5BTHID8SDP_taskEv+0x150>
                        } else if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST)) {
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	691b      	ldr	r3, [r3, #16]
 800e416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d046      	beq.n	800e4ac <_ZN5BTHID8SDP_taskEv+0x150>
                                l2cap_clear_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST); // Clear flag
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	691b      	ldr	r3, [r3, #16]
 800e422:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	611a      	str	r2, [r3, #16]
                                SDPConnected = false;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2200      	movs	r2, #0
 800e42e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                pBtd->l2cap_disconnection_response(hci_handle, identifier, sdp_dcid, sdp_scid);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	6898      	ldr	r0, [r3, #8]
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	8999      	ldrh	r1, [r3, #12]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	7d1a      	ldrb	r2, [r3, #20]
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	331b      	adds	r3, #27
 800e448:	9300      	str	r3, [sp, #0]
 800e44a:	4623      	mov	r3, r4
 800e44c:	f7fe fcfe 	bl	800ce4c <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                        break;
 800e450:	e02c      	b.n	800e4ac <_ZN5BTHID8SDP_taskEv+0x150>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS)) {
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	691b      	ldr	r3, [r3, #16]
 800e456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d028      	beq.n	800e4b0 <_ZN5BTHID8SDP_taskEv+0x154>
                                l2cap_clear_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS); // Clear flag
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	691b      	ldr	r3, [r3, #16]
 800e462:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	611a      	str	r2, [r3, #16]
                                SDPConnected = true;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2201      	movs	r2, #1
 800e46e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                l2cap_sdp_state = L2CAP_SDP_WAIT;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	220a      	movs	r2, #10
 800e476:	769a      	strb	r2, [r3, #26]
                        break;
 800e478:	e01a      	b.n	800e4b0 <_ZN5BTHID8SDP_taskEv+0x154>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_RESPONSE)) {
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	691b      	ldr	r3, [r3, #16]
 800e47e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e482:	2b00      	cmp	r3, #0
 800e484:	d016      	beq.n	800e4b4 <_ZN5BTHID8SDP_taskEv+0x158>
                                pBtd->hci_disconnect(hci_handle);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	689a      	ldr	r2, [r3, #8]
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	899b      	ldrh	r3, [r3, #12]
 800e48e:	4619      	mov	r1, r3
 800e490:	4610      	mov	r0, r2
 800e492:	f7fe fa84 	bl	800c99e <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e49c:	819a      	strh	r2, [r3, #12]
                                Reset();
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	3308      	adds	r3, #8
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	4798      	blx	r3
                        break;
 800e4aa:	e003      	b.n	800e4b4 <_ZN5BTHID8SDP_taskEv+0x158>
                        break;
 800e4ac:	bf00      	nop
 800e4ae:	e002      	b.n	800e4b6 <_ZN5BTHID8SDP_taskEv+0x15a>
                        break;
 800e4b0:	bf00      	nop
 800e4b2:	e000      	b.n	800e4b6 <_ZN5BTHID8SDP_taskEv+0x15a>
                        break;
 800e4b4:	bf00      	nop
}
 800e4b6:	bf00      	nop
 800e4b8:	3708      	adds	r7, #8
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e4c0 <_ZN5BTHID10L2CAP_taskEv>:

void BTHID::L2CAP_task() {
 800e4c0:	b5b0      	push	{r4, r5, r7, lr}
 800e4c2:	b084      	sub	sp, #16
 800e4c4:	af02      	add	r7, sp, #8
 800e4c6:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800e4ce:	3b01      	subs	r3, #1
 800e4d0:	2b08      	cmp	r3, #8
 800e4d2:	f200 812f 	bhi.w	800e734 <_ZN5BTHID10L2CAP_taskEv+0x274>
 800e4d6:	a201      	add	r2, pc, #4	; (adr r2, 800e4dc <_ZN5BTHID10L2CAP_taskEv+0x1c>)
 800e4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4dc:	0800e713 	.word	0x0800e713
 800e4e0:	0800e5ab 	.word	0x0800e5ab
 800e4e4:	0800e5e3 	.word	0x0800e5e3
 800e4e8:	0800e501 	.word	0x0800e501
 800e4ec:	0800e6df 	.word	0x0800e6df
 800e4f0:	0800e51f 	.word	0x0800e51f
 800e4f4:	0800e62d 	.word	0x0800e62d
 800e4f8:	0800e663 	.word	0x0800e663
 800e4fc:	0800e69f 	.word	0x0800e69f
                        /* These states are used if the HID device is the host */
                case L2CAP_CONTROL_SUCCESS:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	691b      	ldr	r3, [r3, #16]
 800e504:	f003 0302 	and.w	r3, r3, #2
 800e508:	2b00      	cmp	r3, #0
 800e50a:	f000 8104 	beq.w	800e716 <_ZN5BTHID10L2CAP_taskEv+0x256>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Control Successfully Configured"), 0x80);
#endif
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f000 f9fd 	bl	800e90e <_ZN5BTHID11setProtocolEv>
                                l2cap_state = L2CAP_INTERRUPT_SETUP;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2206      	movs	r2, #6
 800e518:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800e51c:	e0fb      	b.n	800e716 <_ZN5BTHID10L2CAP_taskEv+0x256>

                case L2CAP_INTERRUPT_SETUP:
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST)) {
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	691b      	ldr	r3, [r3, #16]
 800e522:	f003 0310 	and.w	r3, r3, #16
 800e526:	2b00      	cmp	r3, #0
 800e528:	f000 80f7 	beq.w	800e71a <_ZN5BTHID10L2CAP_taskEv+0x25a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Interrupt Incoming Connection Request"), 0x80);
#endif
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, PENDING);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6898      	ldr	r0, [r3, #8]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	8999      	ldrh	r1, [r3, #12]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	7d1a      	ldrb	r2, [r3, #20]
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	3318      	adds	r3, #24
 800e542:	2501      	movs	r5, #1
 800e544:	9501      	str	r5, [sp, #4]
 800e546:	9300      	str	r3, [sp, #0]
 800e548:	4623      	mov	r3, r4
 800e54a:	f7fe fb57 	bl	800cbfc <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800e54e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e552:	f7f4 fc3d 	bl	8002dd0 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, SUCCESSFUL);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6898      	ldr	r0, [r3, #8]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	8999      	ldrh	r1, [r3, #12]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	7d1a      	ldrb	r2, [r3, #20]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	3318      	adds	r3, #24
 800e56c:	2500      	movs	r5, #0
 800e56e:	9501      	str	r5, [sp, #4]
 800e570:	9300      	str	r3, [sp, #0]
 800e572:	4623      	mov	r3, r4
 800e574:	f7fe fb42 	bl	800cbfc <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	7d1b      	ldrb	r3, [r3, #20]
 800e57c:	3301      	adds	r3, #1
 800e57e:	b2da      	uxtb	r2, r3
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800e584:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e588:	f7f4 fc22 	bl	8002dd0 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6898      	ldr	r0, [r3, #8]
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	8999      	ldrh	r1, [r3, #12]
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	7d1a      	ldrb	r2, [r3, #20]
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	3318      	adds	r3, #24
 800e59c:	f7fe fb7b 	bl	800cc96 <_ZN3BTD20l2cap_config_requestEthPh>

                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2208      	movs	r2, #8
 800e5a4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800e5a8:	e0b7      	b.n	800e71a <_ZN5BTHID10L2CAP_taskEv+0x25a>

                        /* These states are used if the Arduino is the host */
                case L2CAP_CONTROL_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONTROL_CONNECTED)) {
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	691b      	ldr	r3, [r3, #16]
 800e5ae:	f003 0304 	and.w	r3, r3, #4
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	f000 80b3 	beq.w	800e71e <_ZN5BTHID10L2CAP_taskEv+0x25e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Config Request"), 0x80);
#endif
                                identifier++;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	7d1b      	ldrb	r3, [r3, #20]
 800e5bc:	3301      	adds	r3, #1
 800e5be:	b2da      	uxtb	r2, r3
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	6898      	ldr	r0, [r3, #8]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	8999      	ldrh	r1, [r3, #12]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	7d1a      	ldrb	r2, [r3, #20]
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	3316      	adds	r3, #22
 800e5d4:	f7fe fb5f 	bl	800cc96 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_CONFIG_REQUEST;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2203      	movs	r2, #3
 800e5dc:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800e5e0:	e09d      	b.n	800e71e <_ZN5BTHID10L2CAP_taskEv+0x25e>

                case L2CAP_CONTROL_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	691b      	ldr	r3, [r3, #16]
 800e5e6:	f003 0302 	and.w	r3, r3, #2
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	f000 8099 	beq.w	800e722 <_ZN5BTHID10L2CAP_taskEv+0x262>
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f000 f98c 	bl	800e90e <_ZN5BTHID11setProtocolEv>
                                delay(1); // Short delay between commands - just to be sure
 800e5f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e5fa:	f7f4 fbe9 	bl	8002dd0 <HAL_Delay>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Connection Request"), 0x80);
#endif
                                identifier++;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	7d1b      	ldrb	r3, [r3, #20]
 800e602:	3301      	adds	r3, #1
 800e604:	b2da      	uxtb	r2, r3
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, interrupt_dcid, HID_INTR_PSM);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6898      	ldr	r0, [r3, #8]
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	8999      	ldrh	r1, [r3, #12]
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	7d1a      	ldrb	r2, [r3, #20]
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	336d      	adds	r3, #109	; 0x6d
 800e61a:	2413      	movs	r4, #19
 800e61c:	9400      	str	r4, [sp, #0]
 800e61e:	f7fe faaf 	bl	800cb80 <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_INTERRUPT_CONNECT_REQUEST;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2207      	movs	r2, #7
 800e626:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800e62a:	e07a      	b.n	800e722 <_ZN5BTHID10L2CAP_taskEv+0x262>

                case L2CAP_INTERRUPT_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_INTERRUPT_CONNECTED)) {
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	691b      	ldr	r3, [r3, #16]
 800e630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e634:	2b00      	cmp	r3, #0
 800e636:	d076      	beq.n	800e726 <_ZN5BTHID10L2CAP_taskEv+0x266>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Config Request"), 0x80);
#endif
                                identifier++;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	7d1b      	ldrb	r3, [r3, #20]
 800e63c:	3301      	adds	r3, #1
 800e63e:	b2da      	uxtb	r2, r3
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6898      	ldr	r0, [r3, #8]
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	8999      	ldrh	r1, [r3, #12]
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	7d1a      	ldrb	r2, [r3, #20]
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	3318      	adds	r3, #24
 800e654:	f7fe fb1f 	bl	800cc96 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2208      	movs	r2, #8
 800e65c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800e660:	e061      	b.n	800e726 <_ZN5BTHID10L2CAP_taskEv+0x266>

                case L2CAP_INTERRUPT_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS)) { // Now the HID channels is established
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	691b      	ldr	r3, [r3, #16]
 800e666:	f003 0320 	and.w	r3, r3, #32
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d05d      	beq.n	800e72a <_ZN5BTHID10L2CAP_taskEv+0x26a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Channels Established"), 0x80);
#endif
                                pBtd->connectToHIDDevice = false;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	689b      	ldr	r3, [r3, #8]
 800e672:	2200      	movs	r2, #0
 800e674:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                pBtd->pairWithHIDDevice = false;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	689b      	ldr	r3, [r3, #8]
 800e67c:	2200      	movs	r2, #0
 800e67e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                connected = true;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2201      	movs	r2, #1
 800e686:	755a      	strb	r2, [r3, #21]
                                onInit();
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	3310      	adds	r3, #16
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	6878      	ldr	r0, [r7, #4]
 800e692:	4798      	blx	r3
                                l2cap_state = L2CAP_DONE;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2201      	movs	r2, #1
 800e698:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800e69c:	e045      	b.n	800e72a <_ZN5BTHID10L2CAP_taskEv+0x26a>

                case L2CAP_DONE:
                        break;

                case L2CAP_INTERRUPT_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE)) {
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	691b      	ldr	r3, [r3, #16]
 800e6a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d041      	beq.n	800e72e <_ZN5BTHID10L2CAP_taskEv+0x26e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Interrupt Channel"), 0x80);
#endif
                                identifier++;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	7d1b      	ldrb	r3, [r3, #20]
 800e6ae:	3301      	adds	r3, #1
 800e6b0:	b2da      	uxtb	r2, r3
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_disconnection_request(hci_handle, identifier, control_scid, control_dcid);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6898      	ldr	r0, [r3, #8]
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	8999      	ldrh	r1, [r3, #12]
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	7d1a      	ldrb	r2, [r3, #20]
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f103 0416 	add.w	r4, r3, #22
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	336b      	adds	r3, #107	; 0x6b
 800e6cc:	9300      	str	r3, [sp, #0]
 800e6ce:	4623      	mov	r3, r4
 800e6d0:	f7fe fb7f 	bl	800cdd2 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
                                l2cap_state = L2CAP_CONTROL_DISCONNECT;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2205      	movs	r2, #5
 800e6d8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800e6dc:	e027      	b.n	800e72e <_ZN5BTHID10L2CAP_taskEv+0x26e>

                case L2CAP_CONTROL_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE)) {
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	691b      	ldr	r3, [r3, #16]
 800e6e2:	f003 0308 	and.w	r3, r3, #8
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d023      	beq.n	800e732 <_ZN5BTHID10L2CAP_taskEv+0x272>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Control Channel"), 0x80);
#endif
                                pBtd->hci_disconnect(hci_handle);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	689a      	ldr	r2, [r3, #8]
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	899b      	ldrh	r3, [r3, #12]
 800e6f2:	4619      	mov	r1, r3
 800e6f4:	4610      	mov	r0, r2
 800e6f6:	f7fe f952 	bl	800c99e <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e700:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2200      	movs	r2, #0
 800e706:	611a      	str	r2, [r3, #16]
                                l2cap_state = L2CAP_WAIT;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2200      	movs	r2, #0
 800e70c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800e710:	e00f      	b.n	800e732 <_ZN5BTHID10L2CAP_taskEv+0x272>
                        break;
 800e712:	bf00      	nop
 800e714:	e00e      	b.n	800e734 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800e716:	bf00      	nop
 800e718:	e00c      	b.n	800e734 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800e71a:	bf00      	nop
 800e71c:	e00a      	b.n	800e734 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800e71e:	bf00      	nop
 800e720:	e008      	b.n	800e734 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800e722:	bf00      	nop
 800e724:	e006      	b.n	800e734 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800e726:	bf00      	nop
 800e728:	e004      	b.n	800e734 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800e72a:	bf00      	nop
 800e72c:	e002      	b.n	800e734 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800e72e:	bf00      	nop
 800e730:	e000      	b.n	800e734 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800e732:	bf00      	nop
        }
}
 800e734:	bf00      	nop
 800e736:	3708      	adds	r7, #8
 800e738:	46bd      	mov	sp, r7
 800e73a:	bdb0      	pop	{r4, r5, r7, pc}

0800e73c <_ZN5BTHID3RunEv>:

void BTHID::Run() {
 800e73c:	b5b0      	push	{r4, r5, r7, lr}
 800e73e:	b084      	sub	sp, #16
 800e740:	af02      	add	r7, sp, #8
 800e742:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	f040 8086 	bne.w	800e85c <_ZN5BTHID3RunEv+0x120>
                case L2CAP_WAIT:
                        if(pBtd->connectToHIDDevice && !pBtd->l2capConnectionClaimed && !connected && !activeConnection) {
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	689b      	ldr	r3, [r3, #8]
 800e754:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d03a      	beq.n	800e7d2 <_ZN5BTHID3RunEv+0x96>
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	689b      	ldr	r3, [r3, #8]
 800e760:	7a5b      	ldrb	r3, [r3, #9]
 800e762:	f083 0301 	eor.w	r3, r3, #1
 800e766:	b2db      	uxtb	r3, r3
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d032      	beq.n	800e7d2 <_ZN5BTHID3RunEv+0x96>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	7d5b      	ldrb	r3, [r3, #21]
 800e770:	f083 0301 	eor.w	r3, r3, #1
 800e774:	b2db      	uxtb	r3, r3
 800e776:	2b00      	cmp	r3, #0
 800e778:	d02b      	beq.n	800e7d2 <_ZN5BTHID3RunEv+0x96>
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800e780:	f083 0301 	eor.w	r3, r3, #1
 800e784:	b2db      	uxtb	r3, r3
 800e786:	2b00      	cmp	r3, #0
 800e788:	d023      	beq.n	800e7d2 <_ZN5BTHID3RunEv+0x96>
                                pBtd->l2capConnectionClaimed = true;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	689b      	ldr	r3, [r3, #8]
 800e78e:	2201      	movs	r2, #1
 800e790:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2201      	movs	r2, #1
 800e796:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Connection Request"), 0x80);
#endif
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	689b      	ldr	r3, [r3, #8]
 800e79e:	8b5a      	ldrh	r2, [r3, #26]
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	611a      	str	r2, [r3, #16]
                                identifier = 0;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, control_dcid, HID_CTRL_PSM);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	6898      	ldr	r0, [r3, #8]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	8999      	ldrh	r1, [r3, #12]
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	7d1a      	ldrb	r2, [r3, #20]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	336b      	adds	r3, #107	; 0x6b
 800e7c0:	2411      	movs	r4, #17
 800e7c2:	9400      	str	r4, [sp, #0]
 800e7c4:	f7fe f9dc 	bl	800cb80 <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_CONTROL_CONNECT_REQUEST;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2202      	movs	r2, #2
 800e7cc:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                                identifier++;
                                delay(1);
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
                        }
                        break;
 800e7d0:	e043      	b.n	800e85a <_ZN5BTHID3RunEv+0x11e>
                        } else if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST)) {
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	691b      	ldr	r3, [r3, #16]
 800e7d6:	f003 0301 	and.w	r3, r3, #1
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d03d      	beq.n	800e85a <_ZN5BTHID3RunEv+0x11e>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, PENDING);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6898      	ldr	r0, [r3, #8]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	8999      	ldrh	r1, [r3, #12]
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	7d1a      	ldrb	r2, [r3, #20]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	3316      	adds	r3, #22
 800e7f4:	2501      	movs	r5, #1
 800e7f6:	9501      	str	r5, [sp, #4]
 800e7f8:	9300      	str	r3, [sp, #0]
 800e7fa:	4623      	mov	r3, r4
 800e7fc:	f7fe f9fe 	bl	800cbfc <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800e800:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e804:	f7f4 fae4 	bl	8002dd0 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, SUCCESSFUL);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	6898      	ldr	r0, [r3, #8]
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	8999      	ldrh	r1, [r3, #12]
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	7d1a      	ldrb	r2, [r3, #20]
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	3316      	adds	r3, #22
 800e81e:	2500      	movs	r5, #0
 800e820:	9501      	str	r5, [sp, #4]
 800e822:	9300      	str	r3, [sp, #0]
 800e824:	4623      	mov	r3, r4
 800e826:	f7fe f9e9 	bl	800cbfc <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	7d1b      	ldrb	r3, [r3, #20]
 800e82e:	3301      	adds	r3, #1
 800e830:	b2da      	uxtb	r2, r3
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800e836:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e83a:	f7f4 fac9 	bl	8002dd0 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6898      	ldr	r0, [r3, #8]
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	8999      	ldrh	r1, [r3, #12]
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	7d1a      	ldrb	r2, [r3, #20]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	3316      	adds	r3, #22
 800e84e:	f7fe fa22 	bl	800cc96 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2204      	movs	r2, #4
 800e856:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        break;
 800e85a:	bf00      	nop
        }
}
 800e85c:	bf00      	nop
 800e85e:	3708      	adds	r7, #8
 800e860:	46bd      	mov	sp, r7
 800e862:	bdb0      	pop	{r4, r5, r7, pc}

0800e864 <_ZN5BTHID11SDP_CommandEPhh>:

void BTHID::SDP_Command(uint8_t* data, uint8_t nbytes) { // See page 223 in the Bluetooth specs
 800e864:	b590      	push	{r4, r7, lr}
 800e866:	b087      	sub	sp, #28
 800e868:	af02      	add	r7, sp, #8
 800e86a:	60f8      	str	r0, [r7, #12]
 800e86c:	60b9      	str	r1, [r7, #8]
 800e86e:	4613      	mov	r3, r2
 800e870:	71fb      	strb	r3, [r7, #7]
        pBtd->L2CAP_Command(hci_handle, data, nbytes, sdp_scid[0], sdp_scid[1]);
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	6898      	ldr	r0, [r3, #8]
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	8999      	ldrh	r1, [r3, #12]
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	7edb      	ldrb	r3, [r3, #27]
 800e87e:	68fa      	ldr	r2, [r7, #12]
 800e880:	7f12      	ldrb	r2, [r2, #28]
 800e882:	79fc      	ldrb	r4, [r7, #7]
 800e884:	9201      	str	r2, [sp, #4]
 800e886:	9300      	str	r3, [sp, #0]
 800e888:	4623      	mov	r3, r4
 800e88a:	68ba      	ldr	r2, [r7, #8]
 800e88c:	f7fe f8e6 	bl	800ca5c <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e890:	bf00      	nop
 800e892:	3714      	adds	r7, #20
 800e894:	46bd      	mov	sp, r7
 800e896:	bd90      	pop	{r4, r7, pc}

0800e898 <_ZN5BTHID19serviceNotSupportedEhh>:

void BTHID::serviceNotSupported(uint8_t transactionIDHigh, uint8_t transactionIDLow) { // See page 235 in the Bluetooth specs
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	460b      	mov	r3, r1
 800e8a2:	70fb      	strb	r3, [r7, #3]
 800e8a4:	4613      	mov	r3, r2
 800e8a6:	70bb      	strb	r3, [r7, #2]
        l2capoutbuf[0] = SDP_SERVICE_SEARCH_ATTRIBUTE_RESPONSE;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2207      	movs	r2, #7
 800e8ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        l2capoutbuf[1] = transactionIDHigh;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	78fa      	ldrb	r2, [r7, #3]
 800e8b4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        l2capoutbuf[2] = transactionIDLow;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	78ba      	ldrb	r2, [r7, #2]
 800e8bc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2205      	movs	r2, #5
 800e8cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        l2capoutbuf[5] = 0x00; // MSB AttributeListsByteCount
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        l2capoutbuf[6] = 0x02; // LSB AttributeListsByteCount = 2
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2202      	movs	r2, #2
 800e8dc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

        /* Attribute ID/Value Sequence: */
        l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2235      	movs	r2, #53	; 0x35
 800e8e4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        l2capoutbuf[8] = 0x00; // Length = 0
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        l2capoutbuf[9] = 0x00; // No continuation state
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        SDP_Command(l2capoutbuf, 10);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	3328      	adds	r3, #40	; 0x28
 800e8fc:	220a      	movs	r2, #10
 800e8fe:	4619      	mov	r1, r3
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	f7ff ffaf 	bl	800e864 <_ZN5BTHID11SDP_CommandEPhh>
}
 800e906:	bf00      	nop
 800e908:	3708      	adds	r7, #8
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}

0800e90e <_ZN5BTHID11setProtocolEv>:

/************************************************************/
/*                    HID Commands                          */

/************************************************************/
void BTHID::setProtocol() {
 800e90e:	b590      	push	{r4, r7, lr}
 800e910:	b087      	sub	sp, #28
 800e912:	af02      	add	r7, sp, #8
 800e914:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nSet protocol mode: "), 0x80);
        D_PrintHex<uint8_t > (protocolMode, 0x80);
#endif
        if (protocolMode != USB_HID_BOOT_PROTOCOL && protocolMode != HID_RPT_PROTOCOL) {
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d008      	beq.n	800e932 <_ZN5BTHID11setProtocolEv+0x24>
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800e926:	2b01      	cmp	r3, #1
 800e928:	d003      	beq.n	800e932 <_ZN5BTHID11setProtocolEv+0x24>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nNot a valid protocol mode. Using Boot protocol instead."), 0x80);
#endif
                protocolMode = USB_HID_BOOT_PROTOCOL; // Use Boot Protocol by default
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2200      	movs	r2, #0
 800e92e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        }
        uint8_t command = 0x70 | protocolMode; // Set Protocol, see Bluetooth HID specs page 33
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800e938:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800e93c:	b2db      	uxtb	r3, r3
 800e93e:	73fb      	strb	r3, [r7, #15]
        pBtd->L2CAP_Command(hci_handle, &command, 1, control_scid[0], control_scid[1]);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	6898      	ldr	r0, [r3, #8]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	8999      	ldrh	r1, [r3, #12]
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	7d9b      	ldrb	r3, [r3, #22]
 800e94c:	687a      	ldr	r2, [r7, #4]
 800e94e:	7dd2      	ldrb	r2, [r2, #23]
 800e950:	f107 040f 	add.w	r4, r7, #15
 800e954:	9201      	str	r2, [sp, #4]
 800e956:	9300      	str	r3, [sp, #0]
 800e958:	2301      	movs	r3, #1
 800e95a:	4622      	mov	r2, r4
 800e95c:	f7fe f87e 	bl	800ca5c <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e960:	bf00      	nop
 800e962:	3714      	adds	r7, #20
 800e964:	46bd      	mov	sp, r7
 800e966:	bd90      	pop	{r4, r7, pc}

0800e968 <_ZN9PS4Parser9checkDpadE10ButtonEnum>:
};

// To enable serial debugging see "settings.h"
//#define PRINTREPORT // Uncomment to print the report send by the PS4 Controller

bool PS4Parser::checkDpad(ButtonEnum b) {
 800e968:	b480      	push	{r7}
 800e96a:	b083      	sub	sp, #12
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
 800e970:	460b      	mov	r3, r1
 800e972:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 800e974:	78fb      	ldrb	r3, [r7, #3]
 800e976:	2b03      	cmp	r3, #3
 800e978:	d86e      	bhi.n	800ea58 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf0>
 800e97a:	a201      	add	r2, pc, #4	; (adr r2, 800e980 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x18>)
 800e97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e980:	0800e991 	.word	0x0800e991
 800e984:	0800e9c3 	.word	0x0800e9c3
 800e988:	0800e9f5 	.word	0x0800e9f5
 800e98c:	0800ea27 	.word	0x0800ea27
                case UP:
                        return ps4Data.btn.dpad == DPAD_LEFT_UP || ps4Data.btn.dpad == DPAD_UP || ps4Data.btn.dpad == DPAD_UP_RIGHT;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	7a1b      	ldrb	r3, [r3, #8]
 800e994:	f003 030f 	and.w	r3, r3, #15
 800e998:	b2db      	uxtb	r3, r3
 800e99a:	2b07      	cmp	r3, #7
 800e99c:	d00d      	beq.n	800e9ba <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	7a1b      	ldrb	r3, [r3, #8]
 800e9a2:	f003 030f 	and.w	r3, r3, #15
 800e9a6:	b2db      	uxtb	r3, r3
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d006      	beq.n	800e9ba <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	7a1b      	ldrb	r3, [r3, #8]
 800e9b0:	f003 030f 	and.w	r3, r3, #15
 800e9b4:	b2db      	uxtb	r3, r3
 800e9b6:	2b01      	cmp	r3, #1
 800e9b8:	d101      	bne.n	800e9be <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x56>
 800e9ba:	2301      	movs	r3, #1
 800e9bc:	e04d      	b.n	800ea5a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800e9be:	2300      	movs	r3, #0
 800e9c0:	e04b      	b.n	800ea5a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return ps4Data.btn.dpad == DPAD_UP_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT_DOWN;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	7a1b      	ldrb	r3, [r3, #8]
 800e9c6:	f003 030f 	and.w	r3, r3, #15
 800e9ca:	b2db      	uxtb	r3, r3
 800e9cc:	2b01      	cmp	r3, #1
 800e9ce:	d00d      	beq.n	800e9ec <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	7a1b      	ldrb	r3, [r3, #8]
 800e9d4:	f003 030f 	and.w	r3, r3, #15
 800e9d8:	b2db      	uxtb	r3, r3
 800e9da:	2b02      	cmp	r3, #2
 800e9dc:	d006      	beq.n	800e9ec <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	7a1b      	ldrb	r3, [r3, #8]
 800e9e2:	f003 030f 	and.w	r3, r3, #15
 800e9e6:	b2db      	uxtb	r3, r3
 800e9e8:	2b03      	cmp	r3, #3
 800e9ea:	d101      	bne.n	800e9f0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x88>
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	e034      	b.n	800ea5a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	e032      	b.n	800ea5a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return ps4Data.btn.dpad == DPAD_RIGHT_DOWN || ps4Data.btn.dpad == DPAD_DOWN || ps4Data.btn.dpad == DPAD_DOWN_LEFT;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	7a1b      	ldrb	r3, [r3, #8]
 800e9f8:	f003 030f 	and.w	r3, r3, #15
 800e9fc:	b2db      	uxtb	r3, r3
 800e9fe:	2b03      	cmp	r3, #3
 800ea00:	d00d      	beq.n	800ea1e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	7a1b      	ldrb	r3, [r3, #8]
 800ea06:	f003 030f 	and.w	r3, r3, #15
 800ea0a:	b2db      	uxtb	r3, r3
 800ea0c:	2b04      	cmp	r3, #4
 800ea0e:	d006      	beq.n	800ea1e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	7a1b      	ldrb	r3, [r3, #8]
 800ea14:	f003 030f 	and.w	r3, r3, #15
 800ea18:	b2db      	uxtb	r3, r3
 800ea1a:	2b05      	cmp	r3, #5
 800ea1c:	d101      	bne.n	800ea22 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xba>
 800ea1e:	2301      	movs	r3, #1
 800ea20:	e01b      	b.n	800ea5a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800ea22:	2300      	movs	r3, #0
 800ea24:	e019      	b.n	800ea5a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return ps4Data.btn.dpad == DPAD_DOWN_LEFT || ps4Data.btn.dpad == DPAD_LEFT || ps4Data.btn.dpad == DPAD_LEFT_UP;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	7a1b      	ldrb	r3, [r3, #8]
 800ea2a:	f003 030f 	and.w	r3, r3, #15
 800ea2e:	b2db      	uxtb	r3, r3
 800ea30:	2b05      	cmp	r3, #5
 800ea32:	d00d      	beq.n	800ea50 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	7a1b      	ldrb	r3, [r3, #8]
 800ea38:	f003 030f 	and.w	r3, r3, #15
 800ea3c:	b2db      	uxtb	r3, r3
 800ea3e:	2b06      	cmp	r3, #6
 800ea40:	d006      	beq.n	800ea50 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	7a1b      	ldrb	r3, [r3, #8]
 800ea46:	f003 030f 	and.w	r3, r3, #15
 800ea4a:	b2db      	uxtb	r3, r3
 800ea4c:	2b07      	cmp	r3, #7
 800ea4e:	d101      	bne.n	800ea54 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xec>
 800ea50:	2301      	movs	r3, #1
 800ea52:	e002      	b.n	800ea5a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800ea54:	2300      	movs	r3, #0
 800ea56:	e000      	b.n	800ea5a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 800ea58:	2300      	movs	r3, #0
        }
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	370c      	adds	r7, #12
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea64:	4770      	bx	lr
 800ea66:	bf00      	nop

0800ea68 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>:
                return checkDpad(b);
        else
                return ps4Data.btn.val & (1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]));
}

bool PS4Parser::getButtonClick(ButtonEnum b) {
 800ea68:	b480      	push	{r7}
 800ea6a:	b085      	sub	sp, #20
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
 800ea70:	460b      	mov	r3, r1
 800ea72:	70fb      	strb	r3, [r7, #3]
        uint32_t mask = 1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]);
 800ea74:	78fb      	ldrb	r3, [r7, #3]
 800ea76:	4a1b      	ldr	r2, [pc, #108]	; (800eae4 <_ZN9PS4Parser14getButtonClickE10ButtonEnum+0x7c>)
 800ea78:	4413      	add	r3, r2
 800ea7a:	781b      	ldrb	r3, [r3, #0]
 800ea7c:	461a      	mov	r2, r3
 800ea7e:	2301      	movs	r3, #1
 800ea80:	4093      	lsls	r3, r2
 800ea82:	60fb      	str	r3, [r7, #12]
        bool click = buttonClickState.val & mask;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800ea8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ea8e:	021b      	lsls	r3, r3, #8
 800ea90:	4313      	orrs	r3, r2
 800ea92:	461a      	mov	r2, r3
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	4013      	ands	r3, r2
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	bf14      	ite	ne
 800ea9c:	2301      	movne	r3, #1
 800ea9e:	2300      	moveq	r3, #0
 800eaa0:	72fb      	strb	r3, [r7, #11]
        buttonClickState.val &= ~mask; // Clear "click" event
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800eaa8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800eaac:	021b      	lsls	r3, r3, #8
 800eaae:	4313      	orrs	r3, r2
 800eab0:	461a      	mov	r2, r3
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	43db      	mvns	r3, r3
 800eab6:	4013      	ands	r3, r2
 800eab8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	b2d1      	uxtb	r1, r2
 800eac0:	2000      	movs	r0, #0
 800eac2:	4301      	orrs	r1, r0
 800eac4:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 800eac8:	0a12      	lsrs	r2, r2, #8
 800eaca:	b292      	uxth	r2, r2
 800eacc:	2100      	movs	r1, #0
 800eace:	430a      	orrs	r2, r1
 800ead0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        return click;
 800ead4:	7afb      	ldrb	r3, [r7, #11]
}
 800ead6:	4618      	mov	r0, r3
 800ead8:	3714      	adds	r7, #20
 800eada:	46bd      	mov	sp, r7
 800eadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae0:	4770      	bx	lr
 800eae2:	bf00      	nop
 800eae4:	08011030 	.word	0x08011030

0800eae8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>:

uint8_t PS4Parser::getAnalogButton(ButtonEnum b) {
 800eae8:	b480      	push	{r7}
 800eaea:	b083      	sub	sp, #12
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
 800eaf0:	460b      	mov	r3, r1
 800eaf2:	70fb      	strb	r3, [r7, #3]
        if (b == L2) // These are the only analog buttons on the controller
 800eaf4:	78fb      	ldrb	r3, [r7, #3]
 800eaf6:	2b08      	cmp	r3, #8
 800eaf8:	d102      	bne.n	800eb00 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x18>
                return ps4Data.trigger[0];
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	7adb      	ldrb	r3, [r3, #11]
 800eafe:	e006      	b.n	800eb0e <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        else if (b == R2)
 800eb00:	78fb      	ldrb	r3, [r7, #3]
 800eb02:	2b09      	cmp	r3, #9
 800eb04:	d102      	bne.n	800eb0c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x24>
                return ps4Data.trigger[1];
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	7b1b      	ldrb	r3, [r3, #12]
 800eb0a:	e000      	b.n	800eb0e <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        return 0;
 800eb0c:	2300      	movs	r3, #0
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	370c      	adds	r7, #12
 800eb12:	46bd      	mov	sp, r7
 800eb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb18:	4770      	bx	lr

0800eb1a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>:

uint8_t PS4Parser::getAnalogHat(AnalogHatEnum a) {
 800eb1a:	b480      	push	{r7}
 800eb1c:	b083      	sub	sp, #12
 800eb1e:	af00      	add	r7, sp, #0
 800eb20:	6078      	str	r0, [r7, #4]
 800eb22:	460b      	mov	r3, r1
 800eb24:	70fb      	strb	r3, [r7, #3]
        return ps4Data.hatValue[(uint8_t)a];
 800eb26:	78fb      	ldrb	r3, [r7, #3]
 800eb28:	687a      	ldr	r2, [r7, #4]
 800eb2a:	4413      	add	r3, r2
 800eb2c:	791b      	ldrb	r3, [r3, #4]
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	370c      	adds	r7, #12
 800eb32:	46bd      	mov	sp, r7
 800eb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb38:	4770      	bx	lr

0800eb3a <_ZN9PS4Parser5ParseEhPh>:

void PS4Parser::Parse(uint8_t len, uint8_t *buf) {
 800eb3a:	b580      	push	{r7, lr}
 800eb3c:	b086      	sub	sp, #24
 800eb3e:	af00      	add	r7, sp, #0
 800eb40:	60f8      	str	r0, [r7, #12]
 800eb42:	460b      	mov	r3, r1
 800eb44:	607a      	str	r2, [r7, #4]
 800eb46:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 800eb48:	7afb      	ldrb	r3, [r7, #11]
 800eb4a:	2b01      	cmp	r3, #1
 800eb4c:	f240 80a6 	bls.w	800ec9c <_ZN9PS4Parser5ParseEhPh+0x162>
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	f000 80a2 	beq.w	800ec9c <_ZN9PS4Parser5ParseEhPh+0x162>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	781b      	ldrb	r3, [r3, #0]
 800eb5c:	2b01      	cmp	r3, #1
 800eb5e:	d10e      	bne.n	800eb7e <_ZN9PS4Parser5ParseEhPh+0x44>
                        memcpy(&ps4Data, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(ps4Data)));
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	1d18      	adds	r0, r3, #4
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	1c59      	adds	r1, r3, #1
 800eb68:	7afb      	ldrb	r3, [r7, #11]
 800eb6a:	3b01      	subs	r3, #1
 800eb6c:	b2db      	uxtb	r3, r3
 800eb6e:	2b3c      	cmp	r3, #60	; 0x3c
 800eb70:	bf28      	it	cs
 800eb72:	233c      	movcs	r3, #60	; 0x3c
 800eb74:	b2db      	uxtb	r3, r3
 800eb76:	461a      	mov	r2, r3
 800eb78:	f002 f80c 	bl	8010b94 <memcpy>
 800eb7c:	e016      	b.n	800ebac <_ZN9PS4Parser5ParseEhPh+0x72>
                else if (buf[0] == 0x11) { // This report is send via Bluetooth, it has an offset of 2 compared to the USB data
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	2b11      	cmp	r3, #17
 800eb84:	f040 8098 	bne.w	800ecb8 <_ZN9PS4Parser5ParseEhPh+0x17e>
                        if (len < 4) {
 800eb88:	7afb      	ldrb	r3, [r7, #11]
 800eb8a:	2b03      	cmp	r3, #3
 800eb8c:	f240 8096 	bls.w	800ecbc <_ZN9PS4Parser5ParseEhPh+0x182>
                                Notify(PSTR("\r\nReport is too short: "), 0x80);
                                D_PrintHex<uint8_t > (len, 0x80);
#endif
                                return;
                        }
                        memcpy(&ps4Data, buf + 3, min((uint8_t)(len - 3), MFK_CASTUINT8T sizeof(ps4Data)));
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	1d18      	adds	r0, r3, #4
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	1cd9      	adds	r1, r3, #3
 800eb98:	7afb      	ldrb	r3, [r7, #11]
 800eb9a:	3b03      	subs	r3, #3
 800eb9c:	b2db      	uxtb	r3, r3
 800eb9e:	2b3c      	cmp	r3, #60	; 0x3c
 800eba0:	bf28      	it	cs
 800eba2:	233c      	movcs	r3, #60	; 0x3c
 800eba4:	b2db      	uxtb	r3, r3
 800eba6:	461a      	mov	r2, r3
 800eba8:	f001 fff4 	bl	8010b94 <memcpy>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
#endif
                        return;
                }

                if (ps4Data.btn.val != oldButtonState.val) { // Check if anything has changed
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	689b      	ldr	r3, [r3, #8]
 800ebb0:	f3c3 0217 	ubfx	r2, r3, #0, #24
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebb8:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d06d      	beq.n	800ec9c <_ZN9PS4Parser5ParseEhPh+0x162>
                        buttonClickState.val = ps4Data.btn.val & ~oldButtonState.val; // Update click state variable
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	689b      	ldr	r3, [r3, #8]
 800ebc4:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800ebc8:	461a      	mov	r2, r3
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebce:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800ebd2:	43db      	mvns	r3, r3
 800ebd4:	4013      	ands	r3, r2
 800ebd6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	b2d1      	uxtb	r1, r2
 800ebde:	2000      	movs	r0, #0
 800ebe0:	4301      	orrs	r1, r0
 800ebe2:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 800ebe6:	0a12      	lsrs	r2, r2, #8
 800ebe8:	b292      	uxth	r2, r2
 800ebea:	2100      	movs	r1, #0
 800ebec:	430a      	orrs	r2, r1
 800ebee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                        oldButtonState.val = ps4Data.btn.val;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	689b      	ldr	r3, [r3, #8]
 800ebf6:	f3c3 0117 	ubfx	r1, r3, #0, #24
 800ebfa:	68fa      	ldr	r2, [r7, #12]
 800ebfc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800ebfe:	f361 0317 	bfi	r3, r1, #0, #24
 800ec02:	6413      	str	r3, [r2, #64]	; 0x40

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 800ec04:	2300      	movs	r3, #0
 800ec06:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 800ec08:	2100      	movs	r1, #0
 800ec0a:	68f8      	ldr	r0, [r7, #12]
 800ec0c:	f7ff feac 	bl	800e968 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800ec10:	4603      	mov	r3, r0
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d003      	beq.n	800ec1e <_ZN9PS4Parser5ParseEhPh+0xe4>
                                newDpad |= 1 << UP;
 800ec16:	7dfb      	ldrb	r3, [r7, #23]
 800ec18:	f043 0301 	orr.w	r3, r3, #1
 800ec1c:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 800ec1e:	2101      	movs	r1, #1
 800ec20:	68f8      	ldr	r0, [r7, #12]
 800ec22:	f7ff fea1 	bl	800e968 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800ec26:	4603      	mov	r3, r0
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d003      	beq.n	800ec34 <_ZN9PS4Parser5ParseEhPh+0xfa>
                                newDpad |= 1 << RIGHT;
 800ec2c:	7dfb      	ldrb	r3, [r7, #23]
 800ec2e:	f043 0302 	orr.w	r3, r3, #2
 800ec32:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 800ec34:	2102      	movs	r1, #2
 800ec36:	68f8      	ldr	r0, [r7, #12]
 800ec38:	f7ff fe96 	bl	800e968 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d003      	beq.n	800ec4a <_ZN9PS4Parser5ParseEhPh+0x110>
                                newDpad |= 1 << DOWN;
 800ec42:	7dfb      	ldrb	r3, [r7, #23]
 800ec44:	f043 0304 	orr.w	r3, r3, #4
 800ec48:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 800ec4a:	2103      	movs	r1, #3
 800ec4c:	68f8      	ldr	r0, [r7, #12]
 800ec4e:	f7ff fe8b 	bl	800e968 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800ec52:	4603      	mov	r3, r0
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d003      	beq.n	800ec60 <_ZN9PS4Parser5ParseEhPh+0x126>
                                newDpad |= 1 << LEFT;
 800ec58:	7dfb      	ldrb	r3, [r7, #23]
 800ec5a:	f043 0308 	orr.w	r3, r3, #8
 800ec5e:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ec66:	7dfa      	ldrb	r2, [r7, #23]
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	d017      	beq.n	800ec9c <_ZN9PS4Parser5ParseEhPh+0x162>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ec72:	b25b      	sxtb	r3, r3
 800ec74:	43db      	mvns	r3, r3
 800ec76:	b25a      	sxtb	r2, r3
 800ec78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ec7c:	4013      	ands	r3, r2
 800ec7e:	b25b      	sxtb	r3, r3
 800ec80:	f003 030f 	and.w	r3, r3, #15
 800ec84:	b2d9      	uxtb	r1, r3
 800ec86:	68fa      	ldr	r2, [r7, #12]
 800ec88:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 800ec8c:	f361 0303 	bfi	r3, r1, #0, #4
 800ec90:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
                                oldDpad = newDpad;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	7dfa      	ldrb	r2, [r7, #23]
 800ec98:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                        }
                }
        }

        if (ps4Output.reportChanged)
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d00b      	beq.n	800ecbe <_ZN9PS4Parser5ParseEhPh+0x184>
                sendOutputReport(&ps4Output); // Send output report
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	68fa      	ldr	r2, [r7, #12]
 800ecae:	3246      	adds	r2, #70	; 0x46
 800ecb0:	4611      	mov	r1, r2
 800ecb2:	68f8      	ldr	r0, [r7, #12]
 800ecb4:	4798      	blx	r3
 800ecb6:	e002      	b.n	800ecbe <_ZN9PS4Parser5ParseEhPh+0x184>
                        return;
 800ecb8:	bf00      	nop
 800ecba:	e000      	b.n	800ecbe <_ZN9PS4Parser5ParseEhPh+0x184>
                                return;
 800ecbc:	bf00      	nop
}
 800ecbe:	3718      	adds	r7, #24
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}

0800ecc4 <_ZN9PS4Parser5ResetEv>:

void PS4Parser::Reset() {
 800ecc4:	b480      	push	{r7}
 800ecc6:	b085      	sub	sp, #20
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 800eccc:	2300      	movs	r3, #0
 800ecce:	73fb      	strb	r3, [r7, #15]
 800ecd0:	7bfb      	ldrb	r3, [r7, #15]
 800ecd2:	2b03      	cmp	r3, #3
 800ecd4:	d808      	bhi.n	800ece8 <_ZN9PS4Parser5ResetEv+0x24>
                ps4Data.hatValue[i] = 127; // Center value
 800ecd6:	7bfb      	ldrb	r3, [r7, #15]
 800ecd8:	687a      	ldr	r2, [r7, #4]
 800ecda:	4413      	add	r3, r2
 800ecdc:	227f      	movs	r2, #127	; 0x7f
 800ecde:	711a      	strb	r2, [r3, #4]
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 800ece0:	7bfb      	ldrb	r3, [r7, #15]
 800ece2:	3301      	adds	r3, #1
 800ece4:	73fb      	strb	r3, [r7, #15]
 800ece6:	e7f3      	b.n	800ecd0 <_ZN9PS4Parser5ResetEv+0xc>
        ps4Data.btn.val = 0;
 800ece8:	687a      	ldr	r2, [r7, #4]
 800ecea:	6893      	ldr	r3, [r2, #8]
 800ecec:	f36f 0317 	bfc	r3, #0, #24
 800ecf0:	6093      	str	r3, [r2, #8]
        oldButtonState.val = 0;
 800ecf2:	687a      	ldr	r2, [r7, #4]
 800ecf4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800ecf6:	f36f 0317 	bfc	r3, #0, #24
 800ecfa:	6413      	str	r3, [r2, #64]	; 0x40
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	73fb      	strb	r3, [r7, #15]
 800ed00:	7bfb      	ldrb	r3, [r7, #15]
 800ed02:	2b01      	cmp	r3, #1
 800ed04:	d808      	bhi.n	800ed18 <_ZN9PS4Parser5ResetEv+0x54>
                ps4Data.trigger[i] = 0;
 800ed06:	7bfb      	ldrb	r3, [r7, #15]
 800ed08:	687a      	ldr	r2, [r7, #4]
 800ed0a:	4413      	add	r3, r2
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	72da      	strb	r2, [r3, #11]
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 800ed10:	7bfb      	ldrb	r3, [r7, #15]
 800ed12:	3301      	adds	r3, #1
 800ed14:	73fb      	strb	r3, [r7, #15]
 800ed16:	e7f3      	b.n	800ed00 <_ZN9PS4Parser5ResetEv+0x3c>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 800ed18:	2300      	movs	r3, #0
 800ed1a:	73fb      	strb	r3, [r7, #15]
 800ed1c:	7bfb      	ldrb	r3, [r7, #15]
 800ed1e:	2b02      	cmp	r3, #2
 800ed20:	d81b      	bhi.n	800ed5a <_ZN9PS4Parser5ResetEv+0x96>
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 800ed22:	2300      	movs	r3, #0
 800ed24:	73bb      	strb	r3, [r7, #14]
 800ed26:	7bbb      	ldrb	r3, [r7, #14]
 800ed28:	2b01      	cmp	r3, #1
 800ed2a:	d812      	bhi.n	800ed52 <_ZN9PS4Parser5ResetEv+0x8e>
                        ps4Data.xy[i].finger[j].touching = 1; // The bit is cleared if the finger is touching the touchpad
 800ed2c:	7bfa      	ldrb	r2, [r7, #15]
 800ed2e:	7bbb      	ldrb	r3, [r7, #14]
 800ed30:	6879      	ldr	r1, [r7, #4]
 800ed32:	0098      	lsls	r0, r3, #2
 800ed34:	4613      	mov	r3, r2
 800ed36:	00db      	lsls	r3, r3, #3
 800ed38:	4413      	add	r3, r2
 800ed3a:	4403      	add	r3, r0
 800ed3c:	440b      	add	r3, r1
 800ed3e:	f103 0220 	add.w	r2, r3, #32
 800ed42:	7993      	ldrb	r3, [r2, #6]
 800ed44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed48:	7193      	strb	r3, [r2, #6]
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 800ed4a:	7bbb      	ldrb	r3, [r7, #14]
 800ed4c:	3301      	adds	r3, #1
 800ed4e:	73bb      	strb	r3, [r7, #14]
 800ed50:	e7e9      	b.n	800ed26 <_ZN9PS4Parser5ResetEv+0x62>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 800ed52:	7bfb      	ldrb	r3, [r7, #15]
 800ed54:	3301      	adds	r3, #1
 800ed56:	73fb      	strb	r3, [r7, #15]
 800ed58:	e7e0      	b.n	800ed1c <_ZN9PS4Parser5ResetEv+0x58>
        }

        ps4Data.btn.dpad = DPAD_OFF;
 800ed5a:	687a      	ldr	r2, [r7, #4]
 800ed5c:	7a13      	ldrb	r3, [r2, #8]
 800ed5e:	2108      	movs	r1, #8
 800ed60:	f361 0303 	bfi	r3, r1, #0, #4
 800ed64:	7213      	strb	r3, [r2, #8]
        oldButtonState.dpad = DPAD_OFF;
 800ed66:	687a      	ldr	r2, [r7, #4]
 800ed68:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800ed6c:	2108      	movs	r1, #8
 800ed6e:	f361 0303 	bfi	r3, r1, #0, #4
 800ed72:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
        buttonClickState.dpad = 0;
 800ed76:	687a      	ldr	r2, [r7, #4]
 800ed78:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 800ed7c:	f36f 0303 	bfc	r3, #0, #4
 800ed80:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
        oldDpad = 0;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2200      	movs	r2, #0
 800ed88:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

        ps4Output.bigRumble = ps4Output.smallRumble = 0;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2200      	movs	r2, #0
 800ed90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        ps4Output.r = ps4Output.g = ps4Output.b = 0;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2200      	movs	r2, #0
 800eda4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        ps4Output.flashOn = ps4Output.flashOff = 0;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2200      	movs	r2, #0
 800edc4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        ps4Output.reportChanged = false;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2200      	movs	r2, #0
 800edd8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
};
 800eddc:	bf00      	nop
 800edde:	3714      	adds	r7, #20
 800ede0:	46bd      	mov	sp, r7
 800ede2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede6:	4770      	bx	lr

0800ede8 <_ZN2P95IsSetEv>:
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 800ede8:	b580      	push	{r7, lr}
 800edea:	af00      	add	r7, sp, #0
 800edec:	2180      	movs	r1, #128	; 0x80
 800edee:	4803      	ldr	r0, [pc, #12]	; (800edfc <_ZN2P95IsSetEv+0x14>)
 800edf0:	f7f4 fd46 	bl	8003880 <HAL_GPIO_ReadPin>
 800edf4:	4603      	mov	r3, r0
 800edf6:	4618      	mov	r0, r3
 800edf8:	bd80      	pop	{r7, pc}
 800edfa:	bf00      	nop
 800edfc:	40020800 	.word	0x40020800

0800ee00 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b082      	sub	sp, #8
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f001 f9f3 	bl	80101f4 <_ZN8MAX3421eI3P102P9EC1Ev>
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	4618      	mov	r0, r3
 800ee12:	f001 fa0b 	bl	801022c <_ZN15AddressPoolImplILh16EEC1Ev>
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2200      	movs	r2, #0
 800ee1a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 800ee1e:	4b05      	ldr	r3, [pc, #20]	; (800ee34 <_ZN3USBC1Ev+0x34>)
 800ee20:	2211      	movs	r2, #17
 800ee22:	701a      	strb	r2, [r3, #0]
        init();
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f000 f807 	bl	800ee38 <_ZN3USB4initEv>
}
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	3708      	adds	r7, #8
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}
 800ee34:	20000665 	.word	0x20000665

0800ee38 <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 800ee38:	b480      	push	{r7}
 800ee3a:	b083      	sub	sp, #12
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
        //devConfigIndex = 0;
        bmHubPre = 0;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2200      	movs	r2, #0
 800ee44:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 800ee48:	bf00      	nop
 800ee4a:	370c      	adds	r7, #12
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee52:	4770      	bx	lr

0800ee54 <_ZN3USB14getEpInfoEntryEhh>:

void USB::setUsbTaskState(uint8_t state) {
        usb_task_state = state;
}

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b086      	sub	sp, #24
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
 800ee5c:	460b      	mov	r3, r1
 800ee5e:	70fb      	strb	r3, [r7, #3]
 800ee60:	4613      	mov	r3, r2
 800ee62:	70bb      	strb	r3, [r7, #2]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	78fa      	ldrb	r2, [r7, #3]
 800ee68:	4611      	mov	r1, r2
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f001 fa18 	bl	80102a0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800ee70:	60f8      	str	r0, [r7, #12]

        if(!p || !p->epinfo)
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d003      	beq.n	800ee80 <_ZN3USB14getEpInfoEntryEhh+0x2c>
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d101      	bne.n	800ee84 <_ZN3USB14getEpInfoEntryEhh+0x30>
                return NULL;
 800ee80:	2300      	movs	r3, #0
 800ee82:	e018      	b.n	800eeb6 <_ZN3USB14getEpInfoEntryEhh+0x62>

        EpInfo *pep = p->epinfo;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	617b      	str	r3, [r7, #20]

        for(uint8_t i = 0; i < p->epcount; i++) {
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	74fb      	strb	r3, [r7, #19]
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	795b      	ldrb	r3, [r3, #5]
 800ee92:	7cfa      	ldrb	r2, [r7, #19]
 800ee94:	429a      	cmp	r2, r3
 800ee96:	d20d      	bcs.n	800eeb4 <_ZN3USB14getEpInfoEntryEhh+0x60>
                if((pep)->epAddr == ep)
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	78ba      	ldrb	r2, [r7, #2]
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	d101      	bne.n	800eea6 <_ZN3USB14getEpInfoEntryEhh+0x52>
                        return pep;
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	e007      	b.n	800eeb6 <_ZN3USB14getEpInfoEntryEhh+0x62>

                pep++;
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	3303      	adds	r3, #3
 800eeaa:	617b      	str	r3, [r7, #20]
        for(uint8_t i = 0; i < p->epcount; i++) {
 800eeac:	7cfb      	ldrb	r3, [r7, #19]
 800eeae:	3301      	adds	r3, #1
 800eeb0:	74fb      	strb	r3, [r7, #19]
 800eeb2:	e7ec      	b.n	800ee8e <_ZN3USB14getEpInfoEntryEhh+0x3a>
        }
        return NULL;
 800eeb4:	2300      	movs	r3, #0
}
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	3718      	adds	r7, #24
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd80      	pop	{r7, pc}

0800eebe <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 800eebe:	b580      	push	{r7, lr}
 800eec0:	b086      	sub	sp, #24
 800eec2:	af00      	add	r7, sp, #0
 800eec4:	60f8      	str	r0, [r7, #12]
 800eec6:	607b      	str	r3, [r7, #4]
 800eec8:	460b      	mov	r3, r1
 800eeca:	72fb      	strb	r3, [r7, #11]
 800eecc:	4613      	mov	r3, r2
 800eece:	72bb      	strb	r3, [r7, #10]
        if(!eprecord_ptr)
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d101      	bne.n	800eeda <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x1c>
                return USB_ERROR_INVALID_ARGUMENT;
 800eed6:	23d8      	movs	r3, #216	; 0xd8
 800eed8:	e015      	b.n	800ef06 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	7afa      	ldrb	r2, [r7, #11]
 800eede:	4611      	mov	r1, r2
 800eee0:	4618      	mov	r0, r3
 800eee2:	f001 f9dd 	bl	80102a0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800eee6:	6178      	str	r0, [r7, #20]

        if(!p)
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d101      	bne.n	800eef2 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x34>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800eeee:	23d6      	movs	r3, #214	; 0xd6
 800eef0:	e009      	b.n	800ef06 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        p->address.devAddress = addr;
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	7afa      	ldrb	r2, [r7, #11]
 800eef6:	711a      	strb	r2, [r3, #4]
        p->epinfo = eprecord_ptr;
 800eef8:	697b      	ldr	r3, [r7, #20]
 800eefa:	687a      	ldr	r2, [r7, #4]
 800eefc:	601a      	str	r2, [r3, #0]
        p->epcount = epcount;
 800eefe:	697b      	ldr	r3, [r7, #20]
 800ef00:	7aba      	ldrb	r2, [r7, #10]
 800ef02:	715a      	strb	r2, [r3, #5]

        return 0;
 800ef04:	2300      	movs	r3, #0
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3718      	adds	r7, #24
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}

0800ef0e <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 800ef0e:	b580      	push	{r7, lr}
 800ef10:	b086      	sub	sp, #24
 800ef12:	af00      	add	r7, sp, #0
 800ef14:	60f8      	str	r0, [r7, #12]
 800ef16:	607b      	str	r3, [r7, #4]
 800ef18:	460b      	mov	r3, r1
 800ef1a:	72fb      	strb	r3, [r7, #11]
 800ef1c:	4613      	mov	r3, r2
 800ef1e:	72bb      	strb	r3, [r7, #10]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	7afa      	ldrb	r2, [r7, #11]
 800ef24:	4611      	mov	r1, r2
 800ef26:	4618      	mov	r0, r3
 800ef28:	f001 f9ba 	bl	80102a0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800ef2c:	6178      	str	r0, [r7, #20]

        if(!p)
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d101      	bne.n	800ef38 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x2a>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800ef34:	23d6      	movs	r3, #214	; 0xd6
 800ef36:	e04e      	b.n	800efd6 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        if(!p->epinfo)
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d101      	bne.n	800ef44 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x36>
                return USB_ERROR_EPINFO_IS_NULL;
 800ef40:	23d7      	movs	r3, #215	; 0xd7
 800ef42:	e048      	b.n	800efd6 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *ppep = getEpInfoEntry(addr, ep);
 800ef44:	7aba      	ldrb	r2, [r7, #10]
 800ef46:	7afb      	ldrb	r3, [r7, #11]
 800ef48:	4619      	mov	r1, r3
 800ef4a:	68f8      	ldr	r0, [r7, #12]
 800ef4c:	f7ff ff82 	bl	800ee54 <_ZN3USB14getEpInfoEntryEhh>
 800ef50:	4602      	mov	r2, r0
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	601a      	str	r2, [r3, #0]

        if(!*ppep)
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d101      	bne.n	800ef62 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x54>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 800ef5e:	23db      	movs	r3, #219	; 0xdb
 800ef60:	e039      	b.n	800efd6 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	789b      	ldrb	r3, [r3, #2]
 800ef68:	f3c3 0385 	ubfx	r3, r3, #2, #6
 800ef6c:	b2db      	uxtb	r3, r3
 800ef6e:	2b0f      	cmp	r3, #15
 800ef70:	bf28      	it	cs
 800ef72:	230f      	movcs	r3, #15
 800ef74:	b2db      	uxtb	r3, r3
 800ef76:	461a      	mov	r2, r3
 800ef78:	2301      	movs	r3, #1
 800ef7a:	4093      	lsls	r3, r2
 800ef7c:	b29a      	uxth	r2, r3
 800ef7e:	6a3b      	ldr	r3, [r7, #32]
 800ef80:	801a      	strh	r2, [r3, #0]
        (*nak_limit)--;
 800ef82:	6a3b      	ldr	r3, [r7, #32]
 800ef84:	881b      	ldrh	r3, [r3, #0]
 800ef86:	3b01      	subs	r3, #1
 800ef88:	b29a      	uxth	r2, r3
 800ef8a:	6a3b      	ldr	r3, [r7, #32]
 800ef8c:	801a      	strh	r2, [r3, #0]
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 800ef8e:	7afb      	ldrb	r3, [r7, #11]
 800ef90:	461a      	mov	r2, r3
 800ef92:	21e0      	movs	r1, #224	; 0xe0
 800ef94:	68f8      	ldr	r0, [r7, #12]
 800ef96:	f7f3 fbfd 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        uint8_t mode = regRd(rMODE);
 800ef9a:	21d8      	movs	r1, #216	; 0xd8
 800ef9c:	68f8      	ldr	r0, [r7, #12]
 800ef9e:	f7f3 fc4b 	bl	8002838 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800efa2:	4603      	mov	r3, r0
 800efa4:	74fb      	strb	r3, [r7, #19]
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	799b      	ldrb	r3, [r3, #6]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d009      	beq.n	800efc2 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xb4>
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 800efb4:	7cfb      	ldrb	r3, [r7, #19]
 800efb6:	4313      	orrs	r3, r2
 800efb8:	b2db      	uxtb	r3, r3
 800efba:	f043 0302 	orr.w	r3, r3, #2
 800efbe:	b2db      	uxtb	r3, r3
 800efc0:	e003      	b.n	800efca <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xbc>
 800efc2:	7cfb      	ldrb	r3, [r7, #19]
 800efc4:	f023 0306 	bic.w	r3, r3, #6
 800efc8:	b2db      	uxtb	r3, r3
 800efca:	461a      	mov	r2, r3
 800efcc:	21d8      	movs	r1, #216	; 0xd8
 800efce:	68f8      	ldr	r0, [r7, #12]
 800efd0:	f7f3 fbe0 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return 0;
 800efd4:	2300      	movs	r3, #0
}
 800efd6:	4618      	mov	r0, r3
 800efd8:	3718      	adds	r7, #24
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}

0800efde <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 800efde:	b590      	push	{r4, r7, lr}
 800efe0:	b08b      	sub	sp, #44	; 0x2c
 800efe2:	af02      	add	r7, sp, #8
 800efe4:	6078      	str	r0, [r7, #4]
 800efe6:	4608      	mov	r0, r1
 800efe8:	4611      	mov	r1, r2
 800efea:	461a      	mov	r2, r3
 800efec:	4603      	mov	r3, r0
 800efee:	70fb      	strb	r3, [r7, #3]
 800eff0:	460b      	mov	r3, r1
 800eff2:	70bb      	strb	r3, [r7, #2]
 800eff4:	4613      	mov	r3, r2
 800eff6:	707b      	strb	r3, [r7, #1]
        bool direction = false; //request direction, IN or OUT
 800eff8:	2300      	movs	r3, #0
 800effa:	76fb      	strb	r3, [r7, #27]
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 800effc:	2300      	movs	r3, #0
 800effe:	60fb      	str	r3, [r7, #12]
        uint16_t nak_limit = 0;
 800f000:	2300      	movs	r3, #0
 800f002:	817b      	strh	r3, [r7, #10]

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800f004:	f107 000c 	add.w	r0, r7, #12
 800f008:	78ba      	ldrb	r2, [r7, #2]
 800f00a:	78f9      	ldrb	r1, [r7, #3]
 800f00c:	f107 030a 	add.w	r3, r7, #10
 800f010:	9300      	str	r3, [sp, #0]
 800f012:	4603      	mov	r3, r0
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f7ff ff7a 	bl	800ef0e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 800f01a:	4603      	mov	r3, r0
 800f01c:	77fb      	strb	r3, [r7, #31]

        if(rcode)
 800f01e:	7ffb      	ldrb	r3, [r7, #31]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d001      	beq.n	800f028 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x4a>
                return rcode;
 800f024:	7ffb      	ldrb	r3, [r7, #31]
 800f026:	e0ae      	b.n	800f186 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        direction = ((bmReqType & 0x80) > 0);
 800f028:	787b      	ldrb	r3, [r7, #1]
 800f02a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f02e:	2b00      	cmp	r3, #0
 800f030:	bfcc      	ite	gt
 800f032:	2301      	movgt	r3, #1
 800f034:	2300      	movle	r3, #0
 800f036:	76fb      	strb	r3, [r7, #27]

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 800f038:	787b      	ldrb	r3, [r7, #1]
 800f03a:	743b      	strb	r3, [r7, #16]
        setup_pkt.bRequest = bRequest;
 800f03c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800f040:	747b      	strb	r3, [r7, #17]
        setup_pkt.wVal_u.wValueLo = wValLo;
 800f042:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800f046:	74bb      	strb	r3, [r7, #18]
        setup_pkt.wVal_u.wValueHi = wValHi;
 800f048:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800f04c:	74fb      	strb	r3, [r7, #19]
        setup_pkt.wIndex = wInd;
 800f04e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f050:	82bb      	strh	r3, [r7, #20]
        setup_pkt.wLength = total;
 800f052:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f056:	82fb      	strh	r3, [r7, #22]

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 800f058:	f107 0310 	add.w	r3, r7, #16
 800f05c:	2208      	movs	r2, #8
 800f05e:	2120      	movs	r1, #32
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f001 f943 	bl	80102ec <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 800f066:	897b      	ldrh	r3, [r7, #10]
 800f068:	78ba      	ldrb	r2, [r7, #2]
 800f06a:	2110      	movs	r1, #16
 800f06c:	6878      	ldr	r0, [r7, #4]
 800f06e:	f000 fb01 	bl	800f674 <_ZN3USB11dispatchPktEhht>
 800f072:	4603      	mov	r3, r0
 800f074:	77fb      	strb	r3, [r7, #31]

        if(rcode) //return HRSLT if not zero
 800f076:	7ffb      	ldrb	r3, [r7, #31]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d001      	beq.n	800f080 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa2>
                return ( rcode);
 800f07c:	7ffb      	ldrb	r3, [r7, #31]
 800f07e:	e082      	b.n	800f186 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        if(dataptr != NULL) //data stage, if present
 800f080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f082:	2b00      	cmp	r3, #0
 800f084:	d072      	beq.n	800f16c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
        {
                if(direction) //IN transfer
 800f086:	7efb      	ldrb	r3, [r7, #27]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d057      	beq.n	800f13c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x15e>
                {
                        uint16_t left = total;
 800f08c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f090:	83bb      	strh	r3, [r7, #28]

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 800f092:	68fa      	ldr	r2, [r7, #12]
 800f094:	7893      	ldrb	r3, [r2, #2]
 800f096:	f043 0302 	orr.w	r3, r3, #2
 800f09a:	7093      	strb	r3, [r2, #2]

                        while(left) {
 800f09c:	8bbb      	ldrh	r3, [r7, #28]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d05f      	beq.n	800f162 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 800f0a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f0a6:	813b      	strh	r3, [r7, #8]
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 800f0a8:	68f9      	ldr	r1, [r7, #12]
 800f0aa:	897a      	ldrh	r2, [r7, #10]
 800f0ac:	f107 0008 	add.w	r0, r7, #8
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	9301      	str	r3, [sp, #4]
 800f0b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0b6:	9300      	str	r3, [sp, #0]
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f000 f8a6 	bl	800f20c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	77fb      	strb	r3, [r7, #31]
                                if(rcode == hrTOGERR) {
 800f0c4:	7ffb      	ldrb	r3, [r7, #31]
 800f0c6:	2b06      	cmp	r3, #6
 800f0c8:	d114      	bne.n	800f0f4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x116>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 800f0ca:	21f8      	movs	r1, #248	; 0xf8
 800f0cc:	6878      	ldr	r0, [r7, #4]
 800f0ce:	f7f3 fbb3 	bl	8002838 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	f003 0320 	and.w	r3, r3, #32
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	bf0c      	ite	eq
 800f0dc:	2301      	moveq	r3, #1
 800f0de:	2300      	movne	r3, #0
 800f0e0:	b2db      	uxtb	r3, r3
 800f0e2:	68fa      	ldr	r2, [r7, #12]
 800f0e4:	f003 0301 	and.w	r3, r3, #1
 800f0e8:	b2d9      	uxtb	r1, r3
 800f0ea:	7893      	ldrb	r3, [r2, #2]
 800f0ec:	f361 0341 	bfi	r3, r1, #1, #1
 800f0f0:	7093      	strb	r3, [r2, #2]
 800f0f2:	e7d3      	b.n	800f09c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        continue;
                                }

                                if(rcode)
 800f0f4:	7ffb      	ldrb	r3, [r7, #31]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d001      	beq.n	800f0fe <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x120>
                                        return rcode;
 800f0fa:	7ffb      	ldrb	r3, [r7, #31]
 800f0fc:	e043      	b.n	800f186 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 800f0fe:	7ffb      	ldrb	r3, [r7, #31]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d111      	bne.n	800f128 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
 800f104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f106:	2b00      	cmp	r3, #0
 800f108:	d00e      	beq.n	800f128 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 800f10a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	681c      	ldr	r4, [r3, #0]
 800f110:	8939      	ldrh	r1, [r7, #8]
 800f112:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f116:	8bbb      	ldrh	r3, [r7, #28]
 800f118:	1ad3      	subs	r3, r2, r3
 800f11a:	b29b      	uxth	r3, r3
 800f11c:	833b      	strh	r3, [r7, #24]
 800f11e:	f107 0318 	add.w	r3, r7, #24
 800f122:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f124:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f126:	47a0      	blx	r4

                                left -= read;
 800f128:	893b      	ldrh	r3, [r7, #8]
 800f12a:	8bba      	ldrh	r2, [r7, #28]
 800f12c:	1ad3      	subs	r3, r2, r3
 800f12e:	83bb      	strh	r3, [r7, #28]

                                if(read < nbytes)
 800f130:	893b      	ldrh	r3, [r7, #8]
 800f132:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f136:	429a      	cmp	r2, r3
 800f138:	d812      	bhi.n	800f160 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x182>
                        while(left) {
 800f13a:	e7af      	b.n	800f09c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 800f13c:	68fa      	ldr	r2, [r7, #12]
 800f13e:	7893      	ldrb	r3, [r2, #2]
 800f140:	f043 0301 	orr.w	r3, r3, #1
 800f144:	7093      	strb	r3, [r2, #2]
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 800f146:	68f9      	ldr	r1, [r7, #12]
 800f148:	897a      	ldrh	r2, [r7, #10]
 800f14a:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 800f14e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f150:	9300      	str	r3, [sp, #0]
 800f152:	4603      	mov	r3, r0
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f000 f957 	bl	800f408 <_ZN3USB11OutTransferEP6EpInfottPh>
 800f15a:	4603      	mov	r3, r0
 800f15c:	77fb      	strb	r3, [r7, #31]
 800f15e:	e000      	b.n	800f162 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                        break;
 800f160:	bf00      	nop
                }
                if(rcode) //return error
 800f162:	7ffb      	ldrb	r3, [r7, #31]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d001      	beq.n	800f16c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
                        return ( rcode);
 800f168:	7ffb      	ldrb	r3, [r7, #31]
 800f16a:	e00c      	b.n	800f186 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 800f16c:	7efb      	ldrb	r3, [r7, #27]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d001      	beq.n	800f176 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x198>
 800f172:	21a0      	movs	r1, #160	; 0xa0
 800f174:	e000      	b.n	800f178 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x19a>
 800f176:	2180      	movs	r1, #128	; 0x80
 800f178:	897b      	ldrh	r3, [r7, #10]
 800f17a:	78ba      	ldrb	r2, [r7, #2]
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f000 fa79 	bl	800f674 <_ZN3USB11dispatchPktEhht>
 800f182:	4603      	mov	r3, r0
 800f184:	bf00      	nop
}
 800f186:	4618      	mov	r0, r3
 800f188:	3724      	adds	r7, #36	; 0x24
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd90      	pop	{r4, r7, pc}

0800f18e <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 800f18e:	b580      	push	{r7, lr}
 800f190:	b08a      	sub	sp, #40	; 0x28
 800f192:	af02      	add	r7, sp, #8
 800f194:	60f8      	str	r0, [r7, #12]
 800f196:	607b      	str	r3, [r7, #4]
 800f198:	460b      	mov	r3, r1
 800f19a:	72fb      	strb	r3, [r7, #11]
 800f19c:	4613      	mov	r3, r2
 800f19e:	72bb      	strb	r3, [r7, #10]
        EpInfo *pep = NULL;
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	61bb      	str	r3, [r7, #24]
        uint16_t nak_limit = 0;
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	82fb      	strh	r3, [r7, #22]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800f1a8:	f107 0018 	add.w	r0, r7, #24
 800f1ac:	7aba      	ldrb	r2, [r7, #10]
 800f1ae:	7af9      	ldrb	r1, [r7, #11]
 800f1b0:	f107 0316 	add.w	r3, r7, #22
 800f1b4:	9300      	str	r3, [sp, #0]
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	68f8      	ldr	r0, [r7, #12]
 800f1ba:	f7ff fea8 	bl	800ef0e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	77fb      	strb	r3, [r7, #31]

        if(rcode) {
 800f1c2:	7ffb      	ldrb	r3, [r7, #31]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d010      	beq.n	800f1ea <_ZN3USB10inTransferEhhPtPhh+0x5c>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 800f1c8:	7ffb      	ldrb	r3, [r7, #31]
 800f1ca:	2181      	movs	r1, #129	; 0x81
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f001 f8bb 	bl	8010348 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 800f1d2:	7afb      	ldrb	r3, [r7, #11]
 800f1d4:	2181      	movs	r1, #129	; 0x81
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f001 f8b6 	bl	8010348 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 800f1dc:	7abb      	ldrb	r3, [r7, #10]
 800f1de:	2181      	movs	r1, #129	; 0x81
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f001 f8b1 	bl	8010348 <_Z10D_PrintHexIhEvT_i>
                return rcode;
 800f1e6:	7ffb      	ldrb	r3, [r7, #31]
 800f1e8:	e00c      	b.n	800f204 <_ZN3USB10inTransferEhhPtPhh+0x76>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 800f1ea:	69b9      	ldr	r1, [r7, #24]
 800f1ec:	8afa      	ldrh	r2, [r7, #22]
 800f1ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f1f2:	9301      	str	r3, [sp, #4]
 800f1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f6:	9300      	str	r3, [sp, #0]
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	68f8      	ldr	r0, [r7, #12]
 800f1fc:	f000 f806 	bl	800f20c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 800f200:	4603      	mov	r3, r0
 800f202:	bf00      	nop
}
 800f204:	4618      	mov	r0, r3
 800f206:	3720      	adds	r7, #32
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}

0800f20c <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b086      	sub	sp, #24
 800f210:	af00      	add	r7, sp, #0
 800f212:	60f8      	str	r0, [r7, #12]
 800f214:	60b9      	str	r1, [r7, #8]
 800f216:	603b      	str	r3, [r7, #0]
 800f218:	4613      	mov	r3, r2
 800f21a:	80fb      	strh	r3, [r7, #6]
        uint8_t rcode = 0;
 800f21c:	2300      	movs	r3, #0
 800f21e:	75fb      	strb	r3, [r7, #23]
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	881b      	ldrh	r3, [r3, #0]
 800f224:	827b      	strh	r3, [r7, #18]
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	785b      	ldrb	r3, [r3, #1]
 800f22a:	747b      	strb	r3, [r7, #17]

        *nbytesptr = 0;
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	2200      	movs	r2, #0
 800f230:	801a      	strh	r2, [r3, #0]
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	789b      	ldrb	r3, [r3, #2]
 800f236:	f003 0302 	and.w	r3, r3, #2
 800f23a:	b2db      	uxtb	r3, r3
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d001      	beq.n	800f244 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x38>
 800f240:	2320      	movs	r3, #32
 800f242:	e000      	b.n	800f246 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x3a>
 800f244:	2310      	movs	r3, #16
 800f246:	461a      	mov	r2, r3
 800f248:	21e8      	movs	r1, #232	; 0xe8
 800f24a:	68f8      	ldr	r0, [r7, #12]
 800f24c:	f7f3 faa2 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	781a      	ldrb	r2, [r3, #0]
 800f254:	88fb      	ldrh	r3, [r7, #6]
 800f256:	2100      	movs	r1, #0
 800f258:	68f8      	ldr	r0, [r7, #12]
 800f25a:	f000 fa0b 	bl	800f674 <_ZN3USB11dispatchPktEhht>
 800f25e:	4603      	mov	r3, r0
 800f260:	75fb      	strb	r3, [r7, #23]
                if(rcode == hrTOGERR) {
 800f262:	7dfb      	ldrb	r3, [r7, #23]
 800f264:	2b06      	cmp	r3, #6
 800f266:	d123      	bne.n	800f2b0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xa4>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 800f268:	21f8      	movs	r1, #248	; 0xf8
 800f26a:	68f8      	ldr	r0, [r7, #12]
 800f26c:	f7f3 fae4 	bl	8002838 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f270:	4603      	mov	r3, r0
 800f272:	f003 0310 	and.w	r3, r3, #16
 800f276:	2b00      	cmp	r3, #0
 800f278:	bf0c      	ite	eq
 800f27a:	2301      	moveq	r3, #1
 800f27c:	2300      	movne	r3, #0
 800f27e:	b2db      	uxtb	r3, r3
 800f280:	f003 0301 	and.w	r3, r3, #1
 800f284:	b2d9      	uxtb	r1, r3
 800f286:	68ba      	ldr	r2, [r7, #8]
 800f288:	7893      	ldrb	r3, [r2, #2]
 800f28a:	f361 0341 	bfi	r3, r1, #1, #1
 800f28e:	7093      	strb	r3, [r2, #2]
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	789b      	ldrb	r3, [r3, #2]
 800f294:	f003 0302 	and.w	r3, r3, #2
 800f298:	b2db      	uxtb	r3, r3
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d001      	beq.n	800f2a2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x96>
 800f29e:	2320      	movs	r3, #32
 800f2a0:	e000      	b.n	800f2a4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x98>
 800f2a2:	2310      	movs	r3, #16
 800f2a4:	461a      	mov	r2, r3
 800f2a6:	21e8      	movs	r1, #232	; 0xe8
 800f2a8:	68f8      	ldr	r0, [r7, #12]
 800f2aa:	f7f3 fa73 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        continue;
 800f2ae:	e072      	b.n	800f396 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18a>
                }
                if(rcode) {
 800f2b0:	7dfb      	ldrb	r3, [r7, #23]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d170      	bne.n	800f398 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18c>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 800f2b6:	21c8      	movs	r1, #200	; 0xc8
 800f2b8:	68f8      	ldr	r0, [r7, #12]
 800f2ba:	f7f3 fabd 	bl	8002838 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	f003 0304 	and.w	r3, r3, #4
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	bf0c      	ite	eq
 800f2c8:	2301      	moveq	r3, #1
 800f2ca:	2300      	movne	r3, #0
 800f2cc:	b2db      	uxtb	r3, r3
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d002      	beq.n	800f2d8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xcc>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 800f2d2:	23f0      	movs	r3, #240	; 0xf0
 800f2d4:	75fb      	strb	r3, [r7, #23]
                        break;
 800f2d6:	e060      	b.n	800f39a <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18e>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 800f2d8:	2130      	movs	r1, #48	; 0x30
 800f2da:	68f8      	ldr	r0, [r7, #12]
 800f2dc:	f7f3 faac 	bl	8002838 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	75bb      	strb	r3, [r7, #22]
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 800f2e4:	7dba      	ldrb	r2, [r7, #22]
 800f2e6:	8a7b      	ldrh	r3, [r7, #18]
 800f2e8:	429a      	cmp	r2, r3
 800f2ea:	dd01      	ble.n	800f2f0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xe4>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 800f2ec:	8a7b      	ldrh	r3, [r7, #18]
 800f2ee:	75bb      	strb	r3, [r7, #22]
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2f6:	b29b      	uxth	r3, r3
 800f2f8:	8a7a      	ldrh	r2, [r7, #18]
 800f2fa:	1ad3      	subs	r3, r2, r3
 800f2fc:	b29b      	uxth	r3, r3
 800f2fe:	82bb      	strh	r3, [r7, #20]

                if(mem_left < 0)
 800f300:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f304:	2b00      	cmp	r3, #0
 800f306:	da01      	bge.n	800f30c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x100>
                        mem_left = 0;
 800f308:	2300      	movs	r3, #0
 800f30a:	82bb      	strh	r3, [r7, #20]

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 800f30c:	7dba      	ldrb	r2, [r7, #22]
 800f30e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f312:	4293      	cmp	r3, r2
 800f314:	bfa8      	it	ge
 800f316:	4613      	movge	r3, r2
 800f318:	b2da      	uxtb	r2, r3
 800f31a:	6a3b      	ldr	r3, [r7, #32]
 800f31c:	2108      	movs	r1, #8
 800f31e:	68f8      	ldr	r0, [r7, #12]
 800f320:	f001 f81e 	bl	8010360 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>
 800f324:	6238      	str	r0, [r7, #32]

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 800f326:	2204      	movs	r2, #4
 800f328:	21c8      	movs	r1, #200	; 0xc8
 800f32a:	68f8      	ldr	r0, [r7, #12]
 800f32c:	f7f3 fa32 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	881a      	ldrh	r2, [r3, #0]
 800f334:	7dbb      	ldrb	r3, [r7, #22]
 800f336:	b29b      	uxth	r3, r3
 800f338:	4413      	add	r3, r2
 800f33a:	b29a      	uxth	r2, r3
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	801a      	strh	r2, [r3, #0]

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 800f340:	7dba      	ldrb	r2, [r7, #22]
 800f342:	7c7b      	ldrb	r3, [r7, #17]
 800f344:	429a      	cmp	r2, r3
 800f346:	d304      	bcc.n	800f352 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x146>
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	881b      	ldrh	r3, [r3, #0]
 800f34c:	8a7a      	ldrh	r2, [r7, #18]
 800f34e:	429a      	cmp	r2, r3
 800f350:	d813      	bhi.n	800f37a <_ZN3USB10InTransferEP6EpInfotPtPhh+0x16e>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 800f352:	21f8      	movs	r1, #248	; 0xf8
 800f354:	68f8      	ldr	r0, [r7, #12]
 800f356:	f7f3 fa6f 	bl	8002838 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f35a:	4603      	mov	r3, r0
 800f35c:	f003 0310 	and.w	r3, r3, #16
 800f360:	2b00      	cmp	r3, #0
 800f362:	d001      	beq.n	800f368 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15c>
 800f364:	2101      	movs	r1, #1
 800f366:	e000      	b.n	800f36a <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15e>
 800f368:	2100      	movs	r1, #0
 800f36a:	68ba      	ldr	r2, [r7, #8]
 800f36c:	7893      	ldrb	r3, [r2, #2]
 800f36e:	f361 0341 	bfi	r3, r1, #1, #1
 800f372:	7093      	strb	r3, [r2, #2]
                        //printf("\r\n");
                        rcode = 0;
 800f374:	2300      	movs	r3, #0
 800f376:	75fb      	strb	r3, [r7, #23]
                        break;
 800f378:	e00f      	b.n	800f39a <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18e>
                } else if(bInterval > 0)
 800f37a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f37e:	2b00      	cmp	r3, #0
 800f380:	f43f af66 	beq.w	800f250 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        delay(bInterval); // Delay according to polling interval
 800f384:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f388:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f38c:	fb02 f303 	mul.w	r3, r2, r3
 800f390:	4618      	mov	r0, r3
 800f392:	f7f3 fd1d 	bl	8002dd0 <HAL_Delay>
        } //while( 1 )
 800f396:	e75b      	b.n	800f250 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        break; //should be 0, indicating ACK. Else return error code.
 800f398:	bf00      	nop
        return ( rcode);
 800f39a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	3718      	adds	r7, #24
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}

0800f3a4 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b088      	sub	sp, #32
 800f3a8:	af02      	add	r7, sp, #8
 800f3aa:	6078      	str	r0, [r7, #4]
 800f3ac:	4608      	mov	r0, r1
 800f3ae:	4611      	mov	r1, r2
 800f3b0:	461a      	mov	r2, r3
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	70fb      	strb	r3, [r7, #3]
 800f3b6:	460b      	mov	r3, r1
 800f3b8:	70bb      	strb	r3, [r7, #2]
 800f3ba:	4613      	mov	r3, r2
 800f3bc:	803b      	strh	r3, [r7, #0]
        EpInfo *pep = NULL;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	613b      	str	r3, [r7, #16]
        uint16_t nak_limit = 0;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	81fb      	strh	r3, [r7, #14]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800f3c6:	f107 0010 	add.w	r0, r7, #16
 800f3ca:	78ba      	ldrb	r2, [r7, #2]
 800f3cc:	78f9      	ldrb	r1, [r7, #3]
 800f3ce:	f107 030e 	add.w	r3, r7, #14
 800f3d2:	9300      	str	r3, [sp, #0]
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f7ff fd99 	bl	800ef0e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	75fb      	strb	r3, [r7, #23]

        if(rcode)
 800f3e0:	7dfb      	ldrb	r3, [r7, #23]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d001      	beq.n	800f3ea <_ZN3USB11outTransferEhhtPh+0x46>
                return rcode;
 800f3e6:	7dfb      	ldrb	r3, [r7, #23]
 800f3e8:	e00a      	b.n	800f400 <_ZN3USB11outTransferEhhtPh+0x5c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 800f3ea:	6939      	ldr	r1, [r7, #16]
 800f3ec:	89fa      	ldrh	r2, [r7, #14]
 800f3ee:	8838      	ldrh	r0, [r7, #0]
 800f3f0:	6a3b      	ldr	r3, [r7, #32]
 800f3f2:	9300      	str	r3, [sp, #0]
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	6878      	ldr	r0, [r7, #4]
 800f3f8:	f000 f806 	bl	800f408 <_ZN3USB11OutTransferEP6EpInfottPh>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	bf00      	nop
}
 800f400:	4618      	mov	r0, r3
 800f402:	3718      	adds	r7, #24
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}

0800f408 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 800f408:	b580      	push	{r7, lr}
 800f40a:	b08a      	sub	sp, #40	; 0x28
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	60f8      	str	r0, [r7, #12]
 800f410:	60b9      	str	r1, [r7, #8]
 800f412:	4611      	mov	r1, r2
 800f414:	461a      	mov	r2, r3
 800f416:	460b      	mov	r3, r1
 800f418:	80fb      	strh	r3, [r7, #6]
 800f41a:	4613      	mov	r3, r2
 800f41c:	80bb      	strh	r3, [r7, #4]
        uint8_t rcode = hrSUCCESS, retry_count;
 800f41e:	2300      	movs	r3, #0
 800f420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uint8_t *data_p = data; //local copy of the data pointer
 800f424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f426:	623b      	str	r3, [r7, #32]
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 800f428:	88bb      	ldrh	r3, [r7, #4]
 800f42a:	83bb      	strh	r3, [r7, #28]

        uint8_t maxpktsize = pep->maxPktSize;
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	785b      	ldrb	r3, [r3, #1]
 800f430:	76fb      	strb	r3, [r7, #27]

        if(maxpktsize < 1 || maxpktsize > 64)
 800f432:	7efb      	ldrb	r3, [r7, #27]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d002      	beq.n	800f43e <_ZN3USB11OutTransferEP6EpInfottPh+0x36>
 800f438:	7efb      	ldrb	r3, [r7, #27]
 800f43a:	2b40      	cmp	r3, #64	; 0x40
 800f43c:	d901      	bls.n	800f442 <_ZN3USB11OutTransferEP6EpInfottPh+0x3a>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 800f43e:	23da      	movs	r3, #218	; 0xda
 800f440:	e111      	b.n	800f666 <_ZN3USB11OutTransferEP6EpInfottPh+0x25e>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 800f442:	f7f3 fcb9 	bl	8002db8 <HAL_GetTick>
 800f446:	4603      	mov	r3, r0
 800f448:	4a89      	ldr	r2, [pc, #548]	; (800f670 <_ZN3USB11OutTransferEP6EpInfottPh+0x268>)
 800f44a:	fba2 2303 	umull	r2, r3, r2, r3
 800f44e:	099b      	lsrs	r3, r3, #6
 800f450:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800f454:	3308      	adds	r3, #8
 800f456:	617b      	str	r3, [r7, #20]

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	789b      	ldrb	r3, [r3, #2]
 800f45c:	f003 0301 	and.w	r3, r3, #1
 800f460:	b2db      	uxtb	r3, r3
 800f462:	2b00      	cmp	r3, #0
 800f464:	d001      	beq.n	800f46a <_ZN3USB11OutTransferEP6EpInfottPh+0x62>
 800f466:	2380      	movs	r3, #128	; 0x80
 800f468:	e000      	b.n	800f46c <_ZN3USB11OutTransferEP6EpInfottPh+0x64>
 800f46a:	2340      	movs	r3, #64	; 0x40
 800f46c:	461a      	mov	r2, r3
 800f46e:	21e8      	movs	r1, #232	; 0xe8
 800f470:	68f8      	ldr	r0, [r7, #12]
 800f472:	f7f3 f98f 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        while(bytes_left) {
 800f476:	8bbb      	ldrh	r3, [r7, #28]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	f000 80de 	beq.w	800f63a <_ZN3USB11OutTransferEP6EpInfottPh+0x232>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 800f47e:	2300      	movs	r3, #0
 800f480:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                nak_count = 0;
 800f484:	2300      	movs	r3, #0
 800f486:	83fb      	strh	r3, [r7, #30]
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 800f488:	7efb      	ldrb	r3, [r7, #27]
 800f48a:	b29b      	uxth	r3, r3
 800f48c:	8bba      	ldrh	r2, [r7, #28]
 800f48e:	4293      	cmp	r3, r2
 800f490:	bf28      	it	cs
 800f492:	4613      	movcs	r3, r2
 800f494:	827b      	strh	r3, [r7, #18]
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 800f496:	8a7b      	ldrh	r3, [r7, #18]
 800f498:	b2da      	uxtb	r2, r3
 800f49a:	6a3b      	ldr	r3, [r7, #32]
 800f49c:	2110      	movs	r1, #16
 800f49e:	68f8      	ldr	r0, [r7, #12]
 800f4a0:	f000 ff24 	bl	80102ec <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 800f4a4:	8a7b      	ldrh	r3, [r7, #18]
 800f4a6:	b2db      	uxtb	r3, r3
 800f4a8:	461a      	mov	r2, r3
 800f4aa:	2138      	movs	r1, #56	; 0x38
 800f4ac:	68f8      	ldr	r0, [r7, #12]
 800f4ae:	f7f3 f971 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	781b      	ldrb	r3, [r3, #0]
 800f4b6:	f043 0320 	orr.w	r3, r3, #32
 800f4ba:	b2db      	uxtb	r3, r3
 800f4bc:	461a      	mov	r2, r3
 800f4be:	21f0      	movs	r1, #240	; 0xf0
 800f4c0:	68f8      	ldr	r0, [r7, #12]
 800f4c2:	f7f3 f967 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 800f4c6:	21c8      	movs	r1, #200	; 0xc8
 800f4c8:	68f8      	ldr	r0, [r7, #12]
 800f4ca:	f7f3 f9b5 	bl	8002838 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	b25b      	sxtb	r3, r3
 800f4d2:	43db      	mvns	r3, r3
 800f4d4:	b2db      	uxtb	r3, r3
 800f4d6:	09db      	lsrs	r3, r3, #7
 800f4d8:	b2db      	uxtb	r3, r3
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d000      	beq.n	800f4e0 <_ZN3USB11OutTransferEP6EpInfottPh+0xd8>
 800f4de:	e7f2      	b.n	800f4c6 <_ZN3USB11OutTransferEP6EpInfottPh+0xbe>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 800f4e0:	2280      	movs	r2, #128	; 0x80
 800f4e2:	21c8      	movs	r1, #200	; 0xc8
 800f4e4:	68f8      	ldr	r0, [r7, #12]
 800f4e6:	f7f3 f955 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 800f4ea:	21f8      	movs	r1, #248	; 0xf8
 800f4ec:	68f8      	ldr	r0, [r7, #12]
 800f4ee:	f7f3 f9a3 	bl	8002838 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	f003 030f 	and.w	r3, r3, #15
 800f4f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 800f4fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f500:	2b00      	cmp	r3, #0
 800f502:	d00c      	beq.n	800f51e <_ZN3USB11OutTransferEP6EpInfottPh+0x116>
 800f504:	f7f3 fc58 	bl	8002db8 <HAL_GetTick>
 800f508:	4603      	mov	r3, r0
 800f50a:	4a59      	ldr	r2, [pc, #356]	; (800f670 <_ZN3USB11OutTransferEP6EpInfottPh+0x268>)
 800f50c:	fba2 2303 	umull	r2, r3, r2, r3
 800f510:	099a      	lsrs	r2, r3, #6
 800f512:	697b      	ldr	r3, [r7, #20]
 800f514:	1ad3      	subs	r3, r2, r3
 800f516:	2b00      	cmp	r3, #0
 800f518:	da01      	bge.n	800f51e <_ZN3USB11OutTransferEP6EpInfottPh+0x116>
 800f51a:	2301      	movs	r3, #1
 800f51c:	e000      	b.n	800f520 <_ZN3USB11OutTransferEP6EpInfottPh+0x118>
 800f51e:	2300      	movs	r3, #0
 800f520:	2b00      	cmp	r3, #0
 800f522:	f000 8081 	beq.w	800f628 <_ZN3USB11OutTransferEP6EpInfottPh+0x220>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 800f526:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f52a:	2b0e      	cmp	r3, #14
 800f52c:	d012      	beq.n	800f554 <_ZN3USB11OutTransferEP6EpInfottPh+0x14c>
 800f52e:	2b0e      	cmp	r3, #14
 800f530:	f300 8085 	bgt.w	800f63e <_ZN3USB11OutTransferEP6EpInfottPh+0x236>
 800f534:	2b04      	cmp	r3, #4
 800f536:	d002      	beq.n	800f53e <_ZN3USB11OutTransferEP6EpInfottPh+0x136>
 800f538:	2b06      	cmp	r3, #6
 800f53a:	d015      	beq.n	800f568 <_ZN3USB11OutTransferEP6EpInfottPh+0x160>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 800f53c:	e07f      	b.n	800f63e <_ZN3USB11OutTransferEP6EpInfottPh+0x236>
                                        nak_count++;
 800f53e:	8bfb      	ldrh	r3, [r7, #30]
 800f540:	3301      	adds	r3, #1
 800f542:	83fb      	strh	r3, [r7, #30]
                                        if(nak_limit && (nak_count == nak_limit))
 800f544:	88fb      	ldrh	r3, [r7, #6]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d032      	beq.n	800f5b0 <_ZN3USB11OutTransferEP6EpInfottPh+0x1a8>
 800f54a:	8bfa      	ldrh	r2, [r7, #30]
 800f54c:	88fb      	ldrh	r3, [r7, #6]
 800f54e:	429a      	cmp	r2, r3
 800f550:	d12e      	bne.n	800f5b0 <_ZN3USB11OutTransferEP6EpInfottPh+0x1a8>
                                                goto breakout;
 800f552:	e075      	b.n	800f640 <_ZN3USB11OutTransferEP6EpInfottPh+0x238>
                                        retry_count++;
 800f554:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f558:	3301      	adds	r3, #1
 800f55a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        if(retry_count == USB_RETRY_LIMIT)
 800f55e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f562:	2b03      	cmp	r3, #3
 800f564:	d126      	bne.n	800f5b4 <_ZN3USB11OutTransferEP6EpInfottPh+0x1ac>
                                                goto breakout;
 800f566:	e06b      	b.n	800f640 <_ZN3USB11OutTransferEP6EpInfottPh+0x238>
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 800f568:	21f8      	movs	r1, #248	; 0xf8
 800f56a:	68f8      	ldr	r0, [r7, #12]
 800f56c:	f7f3 f964 	bl	8002838 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f570:	4603      	mov	r3, r0
 800f572:	f003 0320 	and.w	r3, r3, #32
 800f576:	2b00      	cmp	r3, #0
 800f578:	bf0c      	ite	eq
 800f57a:	2301      	moveq	r3, #1
 800f57c:	2300      	movne	r3, #0
 800f57e:	b2db      	uxtb	r3, r3
 800f580:	f003 0301 	and.w	r3, r3, #1
 800f584:	b2d9      	uxtb	r1, r3
 800f586:	68ba      	ldr	r2, [r7, #8]
 800f588:	7893      	ldrb	r3, [r2, #2]
 800f58a:	f361 0300 	bfi	r3, r1, #0, #1
 800f58e:	7093      	strb	r3, [r2, #2]
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	789b      	ldrb	r3, [r3, #2]
 800f594:	f003 0301 	and.w	r3, r3, #1
 800f598:	b2db      	uxtb	r3, r3
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d001      	beq.n	800f5a2 <_ZN3USB11OutTransferEP6EpInfottPh+0x19a>
 800f59e:	2380      	movs	r3, #128	; 0x80
 800f5a0:	e000      	b.n	800f5a4 <_ZN3USB11OutTransferEP6EpInfottPh+0x19c>
 800f5a2:	2340      	movs	r3, #64	; 0x40
 800f5a4:	461a      	mov	r2, r3
 800f5a6:	21e8      	movs	r1, #232	; 0xe8
 800f5a8:	68f8      	ldr	r0, [r7, #12]
 800f5aa:	f7f3 f8f3 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                        break;
 800f5ae:	e002      	b.n	800f5b6 <_ZN3USB11OutTransferEP6EpInfottPh+0x1ae>
                                        break;
 800f5b0:	bf00      	nop
 800f5b2:	e000      	b.n	800f5b6 <_ZN3USB11OutTransferEP6EpInfottPh+0x1ae>
                                        break;
 800f5b4:	bf00      	nop
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	2138      	movs	r1, #56	; 0x38
 800f5ba:	68f8      	ldr	r0, [r7, #12]
 800f5bc:	f7f3 f8ea 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 800f5c0:	6a3b      	ldr	r3, [r7, #32]
 800f5c2:	781b      	ldrb	r3, [r3, #0]
 800f5c4:	461a      	mov	r2, r3
 800f5c6:	2110      	movs	r1, #16
 800f5c8:	68f8      	ldr	r0, [r7, #12]
 800f5ca:	f7f3 f8e3 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 800f5ce:	8a7b      	ldrh	r3, [r7, #18]
 800f5d0:	b2db      	uxtb	r3, r3
 800f5d2:	461a      	mov	r2, r3
 800f5d4:	2138      	movs	r1, #56	; 0x38
 800f5d6:	68f8      	ldr	r0, [r7, #12]
 800f5d8:	f7f3 f8dc 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	781b      	ldrb	r3, [r3, #0]
 800f5e0:	f043 0320 	orr.w	r3, r3, #32
 800f5e4:	b2db      	uxtb	r3, r3
 800f5e6:	461a      	mov	r2, r3
 800f5e8:	21f0      	movs	r1, #240	; 0xf0
 800f5ea:	68f8      	ldr	r0, [r7, #12]
 800f5ec:	f7f3 f8d2 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 800f5f0:	21c8      	movs	r1, #200	; 0xc8
 800f5f2:	68f8      	ldr	r0, [r7, #12]
 800f5f4:	f7f3 f920 	bl	8002838 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	b25b      	sxtb	r3, r3
 800f5fc:	43db      	mvns	r3, r3
 800f5fe:	b2db      	uxtb	r3, r3
 800f600:	09db      	lsrs	r3, r3, #7
 800f602:	b2db      	uxtb	r3, r3
 800f604:	2b00      	cmp	r3, #0
 800f606:	d000      	beq.n	800f60a <_ZN3USB11OutTransferEP6EpInfottPh+0x202>
 800f608:	e7f2      	b.n	800f5f0 <_ZN3USB11OutTransferEP6EpInfottPh+0x1e8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 800f60a:	2280      	movs	r2, #128	; 0x80
 800f60c:	21c8      	movs	r1, #200	; 0xc8
 800f60e:	68f8      	ldr	r0, [r7, #12]
 800f610:	f7f3 f8c0 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 800f614:	21f8      	movs	r1, #248	; 0xf8
 800f616:	68f8      	ldr	r0, [r7, #12]
 800f618:	f7f3 f90e 	bl	8002838 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f61c:	4603      	mov	r3, r0
 800f61e:	f003 030f 	and.w	r3, r3, #15
 800f622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 800f626:	e769      	b.n	800f4fc <_ZN3USB11OutTransferEP6EpInfottPh+0xf4>
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 800f628:	8bba      	ldrh	r2, [r7, #28]
 800f62a:	8a7b      	ldrh	r3, [r7, #18]
 800f62c:	1ad3      	subs	r3, r2, r3
 800f62e:	83bb      	strh	r3, [r7, #28]
                data_p += bytes_tosend;
 800f630:	8a7b      	ldrh	r3, [r7, #18]
 800f632:	6a3a      	ldr	r2, [r7, #32]
 800f634:	4413      	add	r3, r2
 800f636:	623b      	str	r3, [r7, #32]
        while(bytes_left) {
 800f638:	e71d      	b.n	800f476 <_ZN3USB11OutTransferEP6EpInfottPh+0x6e>
        }//while( bytes_left...
breakout:
 800f63a:	bf00      	nop
 800f63c:	e000      	b.n	800f640 <_ZN3USB11OutTransferEP6EpInfottPh+0x238>
                                        goto breakout;
 800f63e:	bf00      	nop

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 800f640:	21f8      	movs	r1, #248	; 0xf8
 800f642:	68f8      	ldr	r0, [r7, #12]
 800f644:	f7f3 f8f8 	bl	8002838 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f648:	4603      	mov	r3, r0
 800f64a:	f003 0320 	and.w	r3, r3, #32
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d001      	beq.n	800f656 <_ZN3USB11OutTransferEP6EpInfottPh+0x24e>
 800f652:	2101      	movs	r1, #1
 800f654:	e000      	b.n	800f658 <_ZN3USB11OutTransferEP6EpInfottPh+0x250>
 800f656:	2100      	movs	r1, #0
 800f658:	68ba      	ldr	r2, [r7, #8]
 800f65a:	7893      	ldrb	r3, [r2, #2]
 800f65c:	f361 0300 	bfi	r3, r1, #0, #1
 800f660:	7093      	strb	r3, [r2, #2]
        return ( rcode); //should be 0 in all cases
 800f662:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800f666:	4618      	mov	r0, r3
 800f668:	3728      	adds	r7, #40	; 0x28
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}
 800f66e:	bf00      	nop
 800f670:	10624dd3 	.word	0x10624dd3

0800f674 <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 800f674:	b580      	push	{r7, lr}
 800f676:	b086      	sub	sp, #24
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
 800f67c:	4608      	mov	r0, r1
 800f67e:	4611      	mov	r1, r2
 800f680:	461a      	mov	r2, r3
 800f682:	4603      	mov	r3, r0
 800f684:	70fb      	strb	r3, [r7, #3]
 800f686:	460b      	mov	r3, r1
 800f688:	70bb      	strb	r3, [r7, #2]
 800f68a:	4613      	mov	r3, r2
 800f68c:	803b      	strh	r3, [r7, #0]
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 800f68e:	f7f3 fb93 	bl	8002db8 <HAL_GetTick>
 800f692:	4603      	mov	r3, r0
 800f694:	4a38      	ldr	r2, [pc, #224]	; (800f778 <_ZN3USB11dispatchPktEhht+0x104>)
 800f696:	fba2 2303 	umull	r2, r3, r2, r3
 800f69a:	099b      	lsrs	r3, r3, #6
 800f69c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800f6a0:	3308      	adds	r3, #8
 800f6a2:	613b      	str	r3, [r7, #16]
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	75fb      	strb	r3, [r7, #23]
        uint8_t retry_count = 0;
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	75bb      	strb	r3, [r7, #22]
        uint16_t nak_count = 0;
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	82bb      	strh	r3, [r7, #20]

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 800f6b0:	f7f3 fb82 	bl	8002db8 <HAL_GetTick>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	4a30      	ldr	r2, [pc, #192]	; (800f778 <_ZN3USB11dispatchPktEhht+0x104>)
 800f6b8:	fba2 2303 	umull	r2, r3, r2, r3
 800f6bc:	099a      	lsrs	r2, r3, #6
 800f6be:	693b      	ldr	r3, [r7, #16]
 800f6c0:	1ad3      	subs	r3, r2, r3
 800f6c2:	0fdb      	lsrs	r3, r3, #31
 800f6c4:	b2db      	uxtb	r3, r3
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d050      	beq.n	800f76c <_ZN3USB11dispatchPktEhht+0xf8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 800f6ca:	78fa      	ldrb	r2, [r7, #3]
 800f6cc:	78bb      	ldrb	r3, [r7, #2]
 800f6ce:	4313      	orrs	r3, r2
 800f6d0:	b2db      	uxtb	r3, r3
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	21f0      	movs	r1, #240	; 0xf0
 800f6d6:	6878      	ldr	r0, [r7, #4]
 800f6d8:	f7f3 f85c 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 800f6dc:	23ff      	movs	r3, #255	; 0xff
 800f6de:	75fb      	strb	r3, [r7, #23]

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 800f6e0:	f7f3 fb6a 	bl	8002db8 <HAL_GetTick>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	4a24      	ldr	r2, [pc, #144]	; (800f778 <_ZN3USB11dispatchPktEhht+0x104>)
 800f6e8:	fba2 2303 	umull	r2, r3, r2, r3
 800f6ec:	099a      	lsrs	r2, r3, #6
 800f6ee:	693b      	ldr	r3, [r7, #16]
 800f6f0:	1ad3      	subs	r3, r2, r3
 800f6f2:	0fdb      	lsrs	r3, r3, #31
 800f6f4:	b2db      	uxtb	r3, r3
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d010      	beq.n	800f71c <_ZN3USB11dispatchPktEhht+0xa8>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 800f6fa:	21c8      	movs	r1, #200	; 0xc8
 800f6fc:	6878      	ldr	r0, [r7, #4]
 800f6fe:	f7f3 f89b 	bl	8002838 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f702:	4603      	mov	r3, r0
 800f704:	73fb      	strb	r3, [r7, #15]

                        if(tmpdata & bmHXFRDNIRQ) {
 800f706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	dae8      	bge.n	800f6e0 <_ZN3USB11dispatchPktEhht+0x6c>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 800f70e:	2280      	movs	r2, #128	; 0x80
 800f710:	21c8      	movs	r1, #200	; 0xc8
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f7f3 f83e 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                rcode = 0x00;
 800f718:	2300      	movs	r3, #0
 800f71a:	75fb      	strb	r3, [r7, #23]
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 800f71c:	21f8      	movs	r1, #248	; 0xf8
 800f71e:	6878      	ldr	r0, [r7, #4]
 800f720:	f7f3 f88a 	bl	8002838 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f724:	4603      	mov	r3, r0
 800f726:	f003 030f 	and.w	r3, r3, #15
 800f72a:	75fb      	strb	r3, [r7, #23]

                switch(rcode) {
 800f72c:	7dfb      	ldrb	r3, [r7, #23]
 800f72e:	2b04      	cmp	r3, #4
 800f730:	d002      	beq.n	800f738 <_ZN3USB11dispatchPktEhht+0xc4>
 800f732:	2b0e      	cmp	r3, #14
 800f734:	d00c      	beq.n	800f750 <_ZN3USB11dispatchPktEhht+0xdc>
 800f736:	e013      	b.n	800f760 <_ZN3USB11dispatchPktEhht+0xec>
                        case hrNAK:
                                nak_count++;
 800f738:	8abb      	ldrh	r3, [r7, #20]
 800f73a:	3301      	adds	r3, #1
 800f73c:	82bb      	strh	r3, [r7, #20]
                                if(nak_limit && (nak_count == nak_limit))
 800f73e:	883b      	ldrh	r3, [r7, #0]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d00f      	beq.n	800f764 <_ZN3USB11dispatchPktEhht+0xf0>
 800f744:	8aba      	ldrh	r2, [r7, #20]
 800f746:	883b      	ldrh	r3, [r7, #0]
 800f748:	429a      	cmp	r2, r3
 800f74a:	d10b      	bne.n	800f764 <_ZN3USB11dispatchPktEhht+0xf0>
                                        return (rcode);
 800f74c:	7dfb      	ldrb	r3, [r7, #23]
 800f74e:	e00e      	b.n	800f76e <_ZN3USB11dispatchPktEhht+0xfa>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 800f750:	7dbb      	ldrb	r3, [r7, #22]
 800f752:	3301      	adds	r3, #1
 800f754:	75bb      	strb	r3, [r7, #22]
                                if(retry_count == USB_RETRY_LIMIT)
 800f756:	7dbb      	ldrb	r3, [r7, #22]
 800f758:	2b03      	cmp	r3, #3
 800f75a:	d105      	bne.n	800f768 <_ZN3USB11dispatchPktEhht+0xf4>
                                        return (rcode);
 800f75c:	7dfb      	ldrb	r3, [r7, #23]
 800f75e:	e006      	b.n	800f76e <_ZN3USB11dispatchPktEhht+0xfa>
                                break;
                        default:
                                return (rcode);
 800f760:	7dfb      	ldrb	r3, [r7, #23]
 800f762:	e004      	b.n	800f76e <_ZN3USB11dispatchPktEhht+0xfa>
                                break;
 800f764:	bf00      	nop
 800f766:	e7a3      	b.n	800f6b0 <_ZN3USB11dispatchPktEhht+0x3c>
                                break;
 800f768:	bf00      	nop
        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 800f76a:	e7a1      	b.n	800f6b0 <_ZN3USB11dispatchPktEhht+0x3c>
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 800f76c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f76e:	4618      	mov	r0, r3
 800f770:	3718      	adds	r7, #24
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}
 800f776:	bf00      	nop
 800f778:	10624dd3 	.word	0x10624dd3

0800f77c <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b084      	sub	sp, #16
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 800f784:	2300      	movs	r3, #0
 800f786:	73fb      	strb	r3, [r7, #15]

        MAX3421E::Task();
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f000 fe17 	bl	80103bc <_ZN8MAX3421eI3P102P9E4TaskEv>

        tmpdata = getVbusState();
 800f78e:	6878      	ldr	r0, [r7, #4]
 800f790:	f000 fe2c 	bl	80103ec <_ZN8MAX3421eI3P102P9E12getVbusStateEv>
 800f794:	4603      	mov	r3, r0
 800f796:	733b      	strb	r3, [r7, #12]

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 800f798:	7b3b      	ldrb	r3, [r7, #12]
 800f79a:	2b03      	cmp	r3, #3
 800f79c:	d832      	bhi.n	800f804 <_ZN3USB4TaskEv+0x88>
 800f79e:	a201      	add	r2, pc, #4	; (adr r2, 800f7a4 <_ZN3USB4TaskEv+0x28>)
 800f7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7a4:	0800f7c1 	.word	0x0800f7c1
 800f7a8:	0800f7b5 	.word	0x0800f7b5
 800f7ac:	0800f7dd 	.word	0x0800f7dd
 800f7b0:	0800f7d9 	.word	0x0800f7d9
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 800f7b4:	4bc7      	ldr	r3, [pc, #796]	; (800fad4 <_ZN3USB4TaskEv+0x358>)
 800f7b6:	2213      	movs	r2, #19
 800f7b8:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	73fb      	strb	r3, [r7, #15]
                        break;
 800f7be:	e021      	b.n	800f804 <_ZN3USB4TaskEv+0x88>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 800f7c0:	4bc4      	ldr	r3, [pc, #784]	; (800fad4 <_ZN3USB4TaskEv+0x358>)
 800f7c2:	781b      	ldrb	r3, [r3, #0]
 800f7c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f7c8:	2b10      	cmp	r3, #16
 800f7ca:	d002      	beq.n	800f7d2 <_ZN3USB4TaskEv+0x56>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 800f7cc:	4bc1      	ldr	r3, [pc, #772]	; (800fad4 <_ZN3USB4TaskEv+0x358>)
 800f7ce:	2211      	movs	r2, #17
 800f7d0:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	73fb      	strb	r3, [r7, #15]
                        break;
 800f7d6:	e015      	b.n	800f804 <_ZN3USB4TaskEv+0x88>
                case LSHOST:

                        lowspeed = true;
 800f7d8:	2301      	movs	r3, #1
 800f7da:	73fb      	strb	r3, [r7, #15]
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 800f7dc:	4bbd      	ldr	r3, [pc, #756]	; (800fad4 <_ZN3USB4TaskEv+0x358>)
 800f7de:	781b      	ldrb	r3, [r3, #0]
 800f7e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f7e4:	2b10      	cmp	r3, #16
 800f7e6:	d10c      	bne.n	800f802 <_ZN3USB4TaskEv+0x86>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 800f7e8:	f7f3 fae6 	bl	8002db8 <HAL_GetTick>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	4aba      	ldr	r2, [pc, #744]	; (800fad8 <_ZN3USB4TaskEv+0x35c>)
 800f7f0:	fba2 2303 	umull	r2, r3, r2, r3
 800f7f4:	099b      	lsrs	r3, r3, #6
 800f7f6:	33c8      	adds	r3, #200	; 0xc8
 800f7f8:	4ab8      	ldr	r2, [pc, #736]	; (800fadc <_ZN3USB4TaskEv+0x360>)
 800f7fa:	6013      	str	r3, [r2, #0]
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 800f7fc:	4bb5      	ldr	r3, [pc, #724]	; (800fad4 <_ZN3USB4TaskEv+0x358>)
 800f7fe:	2220      	movs	r2, #32
 800f800:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 800f802:	bf00      	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800f804:	2300      	movs	r3, #0
 800f806:	73bb      	strb	r3, [r7, #14]
 800f808:	7bbb      	ldrb	r3, [r7, #14]
 800f80a:	2b0f      	cmp	r3, #15
 800f80c:	d81b      	bhi.n	800f846 <_ZN3USB4TaskEv+0xca>
                if(devConfig[i])
 800f80e:	7bba      	ldrb	r2, [r7, #14]
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	321e      	adds	r2, #30
 800f814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d010      	beq.n	800f83e <_ZN3USB4TaskEv+0xc2>
                        rcode = devConfig[i]->Poll();
 800f81c:	7bba      	ldrb	r2, [r7, #14]
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	321e      	adds	r2, #30
 800f822:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f826:	7bba      	ldrb	r2, [r7, #14]
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	321e      	adds	r2, #30
 800f82c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	330c      	adds	r3, #12
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	4608      	mov	r0, r1
 800f838:	4798      	blx	r3
 800f83a:	4603      	mov	r3, r0
 800f83c:	72fb      	strb	r3, [r7, #11]
        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800f83e:	7bbb      	ldrb	r3, [r7, #14]
 800f840:	3301      	adds	r3, #1
 800f842:	73bb      	strb	r3, [r7, #14]
 800f844:	e7e0      	b.n	800f808 <_ZN3USB4TaskEv+0x8c>

        switch(usb_task_state) {
 800f846:	4ba3      	ldr	r3, [pc, #652]	; (800fad4 <_ZN3USB4TaskEv+0x358>)
 800f848:	781b      	ldrb	r3, [r3, #0]
 800f84a:	2ba0      	cmp	r3, #160	; 0xa0
 800f84c:	f000 812f 	beq.w	800faae <_ZN3USB4TaskEv+0x332>
 800f850:	2ba0      	cmp	r3, #160	; 0xa0
 800f852:	f300 813b 	bgt.w	800facc <_ZN3USB4TaskEv+0x350>
 800f856:	2b90      	cmp	r3, #144	; 0x90
 800f858:	f000 812b 	beq.w	800fab2 <_ZN3USB4TaskEv+0x336>
 800f85c:	2b90      	cmp	r3, #144	; 0x90
 800f85e:	f300 8135 	bgt.w	800facc <_ZN3USB4TaskEv+0x350>
 800f862:	2b80      	cmp	r3, #128	; 0x80
 800f864:	f000 810a 	beq.w	800fa7c <_ZN3USB4TaskEv+0x300>
 800f868:	2b80      	cmp	r3, #128	; 0x80
 800f86a:	f300 812f 	bgt.w	800facc <_ZN3USB4TaskEv+0x350>
 800f86e:	2b51      	cmp	r3, #81	; 0x51
 800f870:	f000 80f2 	beq.w	800fa58 <_ZN3USB4TaskEv+0x2dc>
 800f874:	2b51      	cmp	r3, #81	; 0x51
 800f876:	f300 8129 	bgt.w	800facc <_ZN3USB4TaskEv+0x350>
 800f87a:	2b40      	cmp	r3, #64	; 0x40
 800f87c:	dc6a      	bgt.n	800f954 <_ZN3USB4TaskEv+0x1d8>
 800f87e:	2b11      	cmp	r3, #17
 800f880:	f2c0 8124 	blt.w	800facc <_ZN3USB4TaskEv+0x350>
 800f884:	3b11      	subs	r3, #17
 800f886:	2b2f      	cmp	r3, #47	; 0x2f
 800f888:	f200 8120 	bhi.w	800facc <_ZN3USB4TaskEv+0x350>
 800f88c:	a201      	add	r2, pc, #4	; (adr r2, 800f894 <_ZN3USB4TaskEv+0x118>)
 800f88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f892:	bf00      	nop
 800f894:	0800f95b 	.word	0x0800f95b
 800f898:	0800fab7 	.word	0x0800fab7
 800f89c:	0800fab7 	.word	0x0800fab7
 800f8a0:	0800facd 	.word	0x0800facd
 800f8a4:	0800facd 	.word	0x0800facd
 800f8a8:	0800facd 	.word	0x0800facd
 800f8ac:	0800facd 	.word	0x0800facd
 800f8b0:	0800facd 	.word	0x0800facd
 800f8b4:	0800facd 	.word	0x0800facd
 800f8b8:	0800facd 	.word	0x0800facd
 800f8bc:	0800facd 	.word	0x0800facd
 800f8c0:	0800facd 	.word	0x0800facd
 800f8c4:	0800facd 	.word	0x0800facd
 800f8c8:	0800facd 	.word	0x0800facd
 800f8cc:	0800facd 	.word	0x0800facd
 800f8d0:	0800f9ab 	.word	0x0800f9ab
 800f8d4:	0800facd 	.word	0x0800facd
 800f8d8:	0800facd 	.word	0x0800facd
 800f8dc:	0800facd 	.word	0x0800facd
 800f8e0:	0800facd 	.word	0x0800facd
 800f8e4:	0800facd 	.word	0x0800facd
 800f8e8:	0800facd 	.word	0x0800facd
 800f8ec:	0800facd 	.word	0x0800facd
 800f8f0:	0800facd 	.word	0x0800facd
 800f8f4:	0800facd 	.word	0x0800facd
 800f8f8:	0800facd 	.word	0x0800facd
 800f8fc:	0800facd 	.word	0x0800facd
 800f900:	0800facd 	.word	0x0800facd
 800f904:	0800facd 	.word	0x0800facd
 800f908:	0800facd 	.word	0x0800facd
 800f90c:	0800facd 	.word	0x0800facd
 800f910:	0800f9cf 	.word	0x0800f9cf
 800f914:	0800facd 	.word	0x0800facd
 800f918:	0800facd 	.word	0x0800facd
 800f91c:	0800facd 	.word	0x0800facd
 800f920:	0800facd 	.word	0x0800facd
 800f924:	0800facd 	.word	0x0800facd
 800f928:	0800facd 	.word	0x0800facd
 800f92c:	0800facd 	.word	0x0800facd
 800f930:	0800facd 	.word	0x0800facd
 800f934:	0800facd 	.word	0x0800facd
 800f938:	0800facd 	.word	0x0800facd
 800f93c:	0800facd 	.word	0x0800facd
 800f940:	0800facd 	.word	0x0800facd
 800f944:	0800facd 	.word	0x0800facd
 800f948:	0800facd 	.word	0x0800facd
 800f94c:	0800facd 	.word	0x0800facd
 800f950:	0800f9e1 	.word	0x0800f9e1
 800f954:	2b50      	cmp	r3, #80	; 0x50
 800f956:	d063      	beq.n	800fa20 <_ZN3USB4TaskEv+0x2a4>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 800f958:	e0b8      	b.n	800facc <_ZN3USB4TaskEv+0x350>
                        init();
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	f7ff fa6c 	bl	800ee38 <_ZN3USB4initEv>
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800f960:	2300      	movs	r3, #0
 800f962:	737b      	strb	r3, [r7, #13]
 800f964:	7b7b      	ldrb	r3, [r7, #13]
 800f966:	2b0f      	cmp	r3, #15
 800f968:	d81b      	bhi.n	800f9a2 <_ZN3USB4TaskEv+0x226>
                                if(devConfig[i])
 800f96a:	7b7a      	ldrb	r2, [r7, #13]
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	321e      	adds	r2, #30
 800f970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d010      	beq.n	800f99a <_ZN3USB4TaskEv+0x21e>
                                        rcode = devConfig[i]->Release();
 800f978:	7b7a      	ldrb	r2, [r7, #13]
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	321e      	adds	r2, #30
 800f97e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f982:	7b7a      	ldrb	r2, [r7, #13]
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	321e      	adds	r2, #30
 800f988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	3308      	adds	r3, #8
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	4608      	mov	r0, r1
 800f994:	4798      	blx	r3
 800f996:	4603      	mov	r3, r0
 800f998:	72fb      	strb	r3, [r7, #11]
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800f99a:	7b7b      	ldrb	r3, [r7, #13]
 800f99c:	3301      	adds	r3, #1
 800f99e:	737b      	strb	r3, [r7, #13]
 800f9a0:	e7e0      	b.n	800f964 <_ZN3USB4TaskEv+0x1e8>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 800f9a2:	4b4c      	ldr	r3, [pc, #304]	; (800fad4 <_ZN3USB4TaskEv+0x358>)
 800f9a4:	2212      	movs	r2, #18
 800f9a6:	701a      	strb	r2, [r3, #0]
                        break;
 800f9a8:	e090      	b.n	800facc <_ZN3USB4TaskEv+0x350>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 800f9aa:	f7f3 fa05 	bl	8002db8 <HAL_GetTick>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	4a49      	ldr	r2, [pc, #292]	; (800fad8 <_ZN3USB4TaskEv+0x35c>)
 800f9b2:	fba2 2303 	umull	r2, r3, r2, r3
 800f9b6:	099a      	lsrs	r2, r3, #6
 800f9b8:	4b48      	ldr	r3, [pc, #288]	; (800fadc <_ZN3USB4TaskEv+0x360>)
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	1ad3      	subs	r3, r2, r3
 800f9be:	43db      	mvns	r3, r3
 800f9c0:	0fdb      	lsrs	r3, r3, #31
 800f9c2:	b2db      	uxtb	r3, r3
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d078      	beq.n	800faba <_ZN3USB4TaskEv+0x33e>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 800f9c8:	4b42      	ldr	r3, [pc, #264]	; (800fad4 <_ZN3USB4TaskEv+0x358>)
 800f9ca:	2230      	movs	r2, #48	; 0x30
 800f9cc:	701a      	strb	r2, [r3, #0]
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800f9ce:	2201      	movs	r2, #1
 800f9d0:	21e8      	movs	r1, #232	; 0xe8
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f7f2 fede 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 800f9d8:	4b3e      	ldr	r3, [pc, #248]	; (800fad4 <_ZN3USB4TaskEv+0x358>)
 800f9da:	2240      	movs	r2, #64	; 0x40
 800f9dc:	701a      	strb	r2, [r3, #0]
                        break;
 800f9de:	e075      	b.n	800facc <_ZN3USB4TaskEv+0x350>
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 800f9e0:	21e8      	movs	r1, #232	; 0xe8
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f7f2 ff28 	bl	8002838 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	f003 0301 	and.w	r3, r3, #1
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	bf0c      	ite	eq
 800f9f2:	2301      	moveq	r3, #1
 800f9f4:	2300      	movne	r3, #0
 800f9f6:	b2db      	uxtb	r3, r3
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d060      	beq.n	800fabe <_ZN3USB4TaskEv+0x342>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 800f9fc:	21d8      	movs	r1, #216	; 0xd8
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f7f2 ff1a 	bl	8002838 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800fa04:	4603      	mov	r3, r0
 800fa06:	f043 0308 	orr.w	r3, r3, #8
 800fa0a:	733b      	strb	r3, [r7, #12]
                                regWr(rMODE, tmpdata);
 800fa0c:	7b3b      	ldrb	r3, [r7, #12]
 800fa0e:	461a      	mov	r2, r3
 800fa10:	21d8      	movs	r1, #216	; 0xd8
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f7f2 febe 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 800fa18:	4b2e      	ldr	r3, [pc, #184]	; (800fad4 <_ZN3USB4TaskEv+0x358>)
 800fa1a:	2250      	movs	r2, #80	; 0x50
 800fa1c:	701a      	strb	r2, [r3, #0]
                        break;
 800fa1e:	e04e      	b.n	800fabe <_ZN3USB4TaskEv+0x342>
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 800fa20:	21c8      	movs	r1, #200	; 0xc8
 800fa22:	6878      	ldr	r0, [r7, #4]
 800fa24:	f7f2 ff08 	bl	8002838 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	bf14      	ite	ne
 800fa32:	2301      	movne	r3, #1
 800fa34:	2300      	moveq	r3, #0
 800fa36:	b2db      	uxtb	r3, r3
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d042      	beq.n	800fac2 <_ZN3USB4TaskEv+0x346>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 800fa3c:	4b25      	ldr	r3, [pc, #148]	; (800fad4 <_ZN3USB4TaskEv+0x358>)
 800fa3e:	2251      	movs	r2, #81	; 0x51
 800fa40:	701a      	strb	r2, [r3, #0]
                                delay = (uint32_t)millis() + 20;
 800fa42:	f7f3 f9b9 	bl	8002db8 <HAL_GetTick>
 800fa46:	4603      	mov	r3, r0
 800fa48:	4a23      	ldr	r2, [pc, #140]	; (800fad8 <_ZN3USB4TaskEv+0x35c>)
 800fa4a:	fba2 2303 	umull	r2, r3, r2, r3
 800fa4e:	099b      	lsrs	r3, r3, #6
 800fa50:	3314      	adds	r3, #20
 800fa52:	4a22      	ldr	r2, [pc, #136]	; (800fadc <_ZN3USB4TaskEv+0x360>)
 800fa54:	6013      	str	r3, [r2, #0]
                        break;
 800fa56:	e034      	b.n	800fac2 <_ZN3USB4TaskEv+0x346>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 800fa58:	f7f3 f9ae 	bl	8002db8 <HAL_GetTick>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	4a1e      	ldr	r2, [pc, #120]	; (800fad8 <_ZN3USB4TaskEv+0x35c>)
 800fa60:	fba2 2303 	umull	r2, r3, r2, r3
 800fa64:	099a      	lsrs	r2, r3, #6
 800fa66:	4b1d      	ldr	r3, [pc, #116]	; (800fadc <_ZN3USB4TaskEv+0x360>)
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	1ad3      	subs	r3, r2, r3
 800fa6c:	43db      	mvns	r3, r3
 800fa6e:	0fdb      	lsrs	r3, r3, #31
 800fa70:	b2db      	uxtb	r3, r3
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d027      	beq.n	800fac6 <_ZN3USB4TaskEv+0x34a>
 800fa76:	4b17      	ldr	r3, [pc, #92]	; (800fad4 <_ZN3USB4TaskEv+0x358>)
 800fa78:	2280      	movs	r2, #128	; 0x80
 800fa7a:	701a      	strb	r2, [r3, #0]
                        rcode = Configuring(0, 0, lowspeed);
 800fa7c:	7bfb      	ldrb	r3, [r7, #15]
 800fa7e:	2200      	movs	r2, #0
 800fa80:	2100      	movs	r1, #0
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f000 f928 	bl	800fcd8 <_ZN3USB11ConfiguringEhhb>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	72fb      	strb	r3, [r7, #11]
                        if(rcode) {
 800fa8c:	7afb      	ldrb	r3, [r7, #11]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d009      	beq.n	800faa6 <_ZN3USB4TaskEv+0x32a>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 800fa92:	7afb      	ldrb	r3, [r7, #11]
 800fa94:	2bd2      	cmp	r3, #210	; 0xd2
 800fa96:	d018      	beq.n	800faca <_ZN3USB4TaskEv+0x34e>
                                        usb_error = rcode;
 800fa98:	4a11      	ldr	r2, [pc, #68]	; (800fae0 <_ZN3USB4TaskEv+0x364>)
 800fa9a:	7afb      	ldrb	r3, [r7, #11]
 800fa9c:	7013      	strb	r3, [r2, #0]
                                        usb_task_state = USB_STATE_ERROR;
 800fa9e:	4b0d      	ldr	r3, [pc, #52]	; (800fad4 <_ZN3USB4TaskEv+0x358>)
 800faa0:	22a0      	movs	r2, #160	; 0xa0
 800faa2:	701a      	strb	r2, [r3, #0]
                        break;
 800faa4:	e011      	b.n	800faca <_ZN3USB4TaskEv+0x34e>
                                usb_task_state = USB_STATE_RUNNING;
 800faa6:	4b0b      	ldr	r3, [pc, #44]	; (800fad4 <_ZN3USB4TaskEv+0x358>)
 800faa8:	2290      	movs	r2, #144	; 0x90
 800faaa:	701a      	strb	r2, [r3, #0]
                        break;
 800faac:	e00d      	b.n	800faca <_ZN3USB4TaskEv+0x34e>
                        break;
 800faae:	bf00      	nop
 800fab0:	e00c      	b.n	800facc <_ZN3USB4TaskEv+0x350>
                        break;
 800fab2:	bf00      	nop
 800fab4:	e00a      	b.n	800facc <_ZN3USB4TaskEv+0x350>
                        break;
 800fab6:	bf00      	nop
 800fab8:	e008      	b.n	800facc <_ZN3USB4TaskEv+0x350>
                        else break; // don't fall through
 800faba:	bf00      	nop
 800fabc:	e006      	b.n	800facc <_ZN3USB4TaskEv+0x350>
                        break;
 800fabe:	bf00      	nop
 800fac0:	e004      	b.n	800facc <_ZN3USB4TaskEv+0x350>
                        break;
 800fac2:	bf00      	nop
 800fac4:	e002      	b.n	800facc <_ZN3USB4TaskEv+0x350>
                        else break; // don't fall through
 800fac6:	bf00      	nop
 800fac8:	e000      	b.n	800facc <_ZN3USB4TaskEv+0x350>
                        break;
 800faca:	bf00      	nop
}
 800facc:	bf00      	nop
 800face:	3710      	adds	r7, #16
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bd80      	pop	{r7, pc}
 800fad4:	20000665 	.word	0x20000665
 800fad8:	10624dd3 	.word	0x10624dd3
 800fadc:	20000668 	.word	0x20000668
 800fae0:	20000664 	.word	0x20000664

0800fae4 <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b086      	sub	sp, #24
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
 800faec:	4608      	mov	r0, r1
 800faee:	4611      	mov	r1, r2
 800faf0:	461a      	mov	r2, r3
 800faf2:	4603      	mov	r3, r0
 800faf4:	70fb      	strb	r3, [r7, #3]
 800faf6:	460b      	mov	r3, r1
 800faf8:	70bb      	strb	r3, [r7, #2]
 800fafa:	4613      	mov	r3, r2
 800fafc:	707b      	strb	r3, [r7, #1]
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 800fafe:	2300      	movs	r3, #0
 800fb00:	617b      	str	r3, [r7, #20]
 800fb02:	2300      	movs	r3, #0
 800fb04:	613b      	str	r3, [r7, #16]

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	2100      	movs	r1, #0
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f000 fbc8 	bl	80102a0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800fb10:	6178      	str	r0, [r7, #20]

        if(!p0)
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d101      	bne.n	800fb1c <_ZN3USB17DefaultAddressingEhhb+0x38>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800fb18:	23d6      	movs	r3, #214	; 0xd6
 800fb1a:	e03a      	b.n	800fb92 <_ZN3USB17DefaultAddressingEhhb+0xae>

        if(!p0->epinfo)
 800fb1c:	697b      	ldr	r3, [r7, #20]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d101      	bne.n	800fb28 <_ZN3USB17DefaultAddressingEhhb+0x44>
                return USB_ERROR_EPINFO_IS_NULL;
 800fb24:	23d7      	movs	r3, #215	; 0xd7
 800fb26:	e034      	b.n	800fb92 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p0->lowspeed = (lowspeed) ? true : false;
 800fb28:	697b      	ldr	r3, [r7, #20]
 800fb2a:	787a      	ldrb	r2, [r7, #1]
 800fb2c:	719a      	strb	r2, [r3, #6]

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	78bb      	ldrb	r3, [r7, #2]
 800fb32:	78f9      	ldrb	r1, [r7, #3]
 800fb34:	2200      	movs	r2, #0
 800fb36:	f000 fc67 	bl	8010408 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	73fb      	strb	r3, [r7, #15]

        if(!bAddress)
 800fb3e:	7bfb      	ldrb	r3, [r7, #15]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d101      	bne.n	800fb48 <_ZN3USB17DefaultAddressingEhhb+0x64>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800fb44:	23d4      	movs	r3, #212	; 0xd4
 800fb46:	e024      	b.n	800fb92 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p = addrPool.GetUsbDevicePtr(bAddress);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	7bfa      	ldrb	r2, [r7, #15]
 800fb4c:	4611      	mov	r1, r2
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f000 fba6 	bl	80102a0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800fb54:	6138      	str	r0, [r7, #16]

        if(!p)
 800fb56:	693b      	ldr	r3, [r7, #16]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d101      	bne.n	800fb60 <_ZN3USB17DefaultAddressingEhhb+0x7c>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800fb5c:	23d6      	movs	r3, #214	; 0xd6
 800fb5e:	e018      	b.n	800fb92 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p->lowspeed = lowspeed;
 800fb60:	693b      	ldr	r3, [r7, #16]
 800fb62:	787a      	ldrb	r2, [r7, #1]
 800fb64:	719a      	strb	r2, [r3, #6]

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 800fb66:	7bfb      	ldrb	r3, [r7, #15]
 800fb68:	2200      	movs	r2, #0
 800fb6a:	2100      	movs	r1, #0
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f000 fae9 	bl	8010144 <_ZN3USB7setAddrEhhh>
 800fb72:	4603      	mov	r3, r0
 800fb74:	73bb      	strb	r3, [r7, #14]

        if(rcode) {
 800fb76:	7bbb      	ldrb	r3, [r7, #14]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d009      	beq.n	800fb90 <_ZN3USB17DefaultAddressingEhhb+0xac>
                addrPool.FreeAddress(bAddress);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	7bfa      	ldrb	r2, [r7, #15]
 800fb80:	4611      	mov	r1, r2
 800fb82:	4618      	mov	r0, r3
 800fb84:	f000 fcd8 	bl	8010538 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 800fb88:	2300      	movs	r3, #0
 800fb8a:	73fb      	strb	r3, [r7, #15]
                return rcode;
 800fb8c:	7bbb      	ldrb	r3, [r7, #14]
 800fb8e:	e000      	b.n	800fb92 <_ZN3USB17DefaultAddressingEhhb+0xae>
        }
        return 0;
 800fb90:	2300      	movs	r3, #0
};
 800fb92:	4618      	mov	r0, r3
 800fb94:	3718      	adds	r7, #24
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}
	...

0800fb9c <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 800fb9c:	b590      	push	{r4, r7, lr}
 800fb9e:	b085      	sub	sp, #20
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
 800fba4:	4608      	mov	r0, r1
 800fba6:	4611      	mov	r1, r2
 800fba8:	461a      	mov	r2, r3
 800fbaa:	4603      	mov	r3, r0
 800fbac:	70fb      	strb	r3, [r7, #3]
 800fbae:	460b      	mov	r3, r1
 800fbb0:	70bb      	strb	r3, [r7, #2]
 800fbb2:	4613      	mov	r3, r2
 800fbb4:	707b      	strb	r3, [r7, #1]
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	73fb      	strb	r3, [r7, #15]

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 800fbba:	78fa      	ldrb	r2, [r7, #3]
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	321e      	adds	r2, #30
 800fbc0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fbc4:	78fa      	ldrb	r2, [r7, #3]
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	321e      	adds	r2, #30
 800fbca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	3304      	adds	r3, #4
 800fbd2:	681c      	ldr	r4, [r3, #0]
 800fbd4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fbd8:	787a      	ldrb	r2, [r7, #1]
 800fbda:	78b9      	ldrb	r1, [r7, #2]
 800fbdc:	47a0      	blx	r4
 800fbde:	4603      	mov	r3, r0
 800fbe0:	73bb      	strb	r3, [r7, #14]
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 800fbe2:	7bbb      	ldrb	r3, [r7, #14]
 800fbe4:	2be0      	cmp	r3, #224	; 0xe0
 800fbe6:	d11c      	bne.n	800fc22 <_ZN3USB13AttemptConfigEhhhb+0x86>
                if(parent == 0) {
 800fbe8:	78bb      	ldrb	r3, [r7, #2]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d108      	bne.n	800fc00 <_ZN3USB13AttemptConfigEhhhb+0x64>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800fbee:	2201      	movs	r2, #1
 800fbf0:	21e8      	movs	r1, #232	; 0xe8
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f7f2 fdce 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 800fbf8:	4835      	ldr	r0, [pc, #212]	; (800fcd0 <_ZN3USB13AttemptConfigEhhhb+0x134>)
 800fbfa:	f7f3 f8e9 	bl	8002dd0 <HAL_Delay>
 800fbfe:	e022      	b.n	800fc46 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 800fc00:	78ba      	ldrb	r2, [r7, #2]
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	321e      	adds	r2, #30
 800fc06:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fc0a:	78ba      	ldrb	r2, [r7, #2]
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	321e      	adds	r2, #30
 800fc10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	3314      	adds	r3, #20
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	787a      	ldrb	r2, [r7, #1]
 800fc1c:	4611      	mov	r1, r2
 800fc1e:	4798      	blx	r3
 800fc20:	e011      	b.n	800fc46 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 800fc22:	7bbb      	ldrb	r3, [r7, #14]
 800fc24:	2b0d      	cmp	r3, #13
 800fc26:	d109      	bne.n	800fc3c <_ZN3USB13AttemptConfigEhhhb+0xa0>
 800fc28:	7bfb      	ldrb	r3, [r7, #15]
 800fc2a:	2b02      	cmp	r3, #2
 800fc2c:	d806      	bhi.n	800fc3c <_ZN3USB13AttemptConfigEhhhb+0xa0>
                delay(100);
 800fc2e:	4829      	ldr	r0, [pc, #164]	; (800fcd4 <_ZN3USB13AttemptConfigEhhhb+0x138>)
 800fc30:	f7f3 f8ce 	bl	8002dd0 <HAL_Delay>
                retries++;
 800fc34:	7bfb      	ldrb	r3, [r7, #15]
 800fc36:	3301      	adds	r3, #1
 800fc38:	73fb      	strb	r3, [r7, #15]
                goto again;
 800fc3a:	e7be      	b.n	800fbba <_ZN3USB13AttemptConfigEhhhb+0x1e>
        } else if(rcode)
 800fc3c:	7bbb      	ldrb	r3, [r7, #14]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d001      	beq.n	800fc46 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                return rcode;
 800fc42:	7bbb      	ldrb	r3, [r7, #14]
 800fc44:	e03f      	b.n	800fcc6 <_ZN3USB13AttemptConfigEhhhb+0x12a>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 800fc46:	78fa      	ldrb	r2, [r7, #3]
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	321e      	adds	r2, #30
 800fc4c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fc50:	78fa      	ldrb	r2, [r7, #3]
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	321e      	adds	r2, #30
 800fc56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	681c      	ldr	r4, [r3, #0]
 800fc5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fc62:	787a      	ldrb	r2, [r7, #1]
 800fc64:	78b9      	ldrb	r1, [r7, #2]
 800fc66:	47a0      	blx	r4
 800fc68:	4603      	mov	r3, r0
 800fc6a:	73bb      	strb	r3, [r7, #14]
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 800fc6c:	7bbb      	ldrb	r3, [r7, #14]
 800fc6e:	2b0d      	cmp	r3, #13
 800fc70:	d109      	bne.n	800fc86 <_ZN3USB13AttemptConfigEhhhb+0xea>
 800fc72:	7bfb      	ldrb	r3, [r7, #15]
 800fc74:	2b02      	cmp	r3, #2
 800fc76:	d806      	bhi.n	800fc86 <_ZN3USB13AttemptConfigEhhhb+0xea>
                delay(100);
 800fc78:	4816      	ldr	r0, [pc, #88]	; (800fcd4 <_ZN3USB13AttemptConfigEhhhb+0x138>)
 800fc7a:	f7f3 f8a9 	bl	8002dd0 <HAL_Delay>
                retries++;
 800fc7e:	7bfb      	ldrb	r3, [r7, #15]
 800fc80:	3301      	adds	r3, #1
 800fc82:	73fb      	strb	r3, [r7, #15]
                goto again;
 800fc84:	e799      	b.n	800fbba <_ZN3USB13AttemptConfigEhhhb+0x1e>
        }
        if(rcode) {
 800fc86:	7bbb      	ldrb	r3, [r7, #14]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d01b      	beq.n	800fcc4 <_ZN3USB13AttemptConfigEhhhb+0x128>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 800fc8c:	78bb      	ldrb	r3, [r7, #2]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d108      	bne.n	800fca4 <_ZN3USB13AttemptConfigEhhhb+0x108>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800fc92:	2201      	movs	r2, #1
 800fc94:	21e8      	movs	r1, #232	; 0xe8
 800fc96:	6878      	ldr	r0, [r7, #4]
 800fc98:	f7f2 fd7c 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 800fc9c:	480c      	ldr	r0, [pc, #48]	; (800fcd0 <_ZN3USB13AttemptConfigEhhhb+0x134>)
 800fc9e:	f7f3 f897 	bl	8002dd0 <HAL_Delay>
 800fca2:	e00f      	b.n	800fcc4 <_ZN3USB13AttemptConfigEhhhb+0x128>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 800fca4:	78ba      	ldrb	r2, [r7, #2]
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	321e      	adds	r2, #30
 800fcaa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fcae:	78ba      	ldrb	r2, [r7, #2]
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	321e      	adds	r2, #30
 800fcb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	3314      	adds	r3, #20
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	787a      	ldrb	r2, [r7, #1]
 800fcc0:	4611      	mov	r1, r2
 800fcc2:	4798      	blx	r3
                }
        }
        return rcode;
 800fcc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	3714      	adds	r7, #20
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd90      	pop	{r4, r7, pc}
 800fcce:	bf00      	nop
 800fcd0:	00018e70 	.word	0x00018e70
 800fcd4:	000186a0 	.word	0x000186a0

0800fcd8 <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b090      	sub	sp, #64	; 0x40
 800fcdc:	af02      	add	r7, sp, #8
 800fcde:	6078      	str	r0, [r7, #4]
 800fce0:	4608      	mov	r0, r1
 800fce2:	4611      	mov	r1, r2
 800fce4:	461a      	mov	r2, r3
 800fce6:	4603      	mov	r3, r0
 800fce8:	70fb      	strb	r3, [r7, #3]
 800fcea:	460b      	mov	r3, r1
 800fcec:	70bb      	strb	r3, [r7, #2]
 800fcee:	4613      	mov	r3, r2
 800fcf0:	707b      	strb	r3, [r7, #1]
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 800fcf8:	f107 030c 	add.w	r3, r7, #12
 800fcfc:	633b      	str	r3, [r7, #48]	; 0x30
        UsbDevice *p = NULL;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	62fb      	str	r3, [r7, #44]	; 0x2c
        EpInfo *oldep_ptr = NULL;
 800fd02:	2300      	movs	r3, #0
 800fd04:	62bb      	str	r3, [r7, #40]	; 0x28
        EpInfo epInfo;

        epInfo.epAddr = 0;
 800fd06:	2300      	movs	r3, #0
 800fd08:	723b      	strb	r3, [r7, #8]
        epInfo.maxPktSize = 8;
 800fd0a:	2308      	movs	r3, #8
 800fd0c:	727b      	strb	r3, [r7, #9]
        epInfo.bmSndToggle = 0;
 800fd0e:	7abb      	ldrb	r3, [r7, #10]
 800fd10:	f36f 0300 	bfc	r3, #0, #1
 800fd14:	72bb      	strb	r3, [r7, #10]
        epInfo.bmRcvToggle = 0;
 800fd16:	7abb      	ldrb	r3, [r7, #10]
 800fd18:	f36f 0341 	bfc	r3, #1, #1
 800fd1c:	72bb      	strb	r3, [r7, #10]
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 800fd1e:	7abb      	ldrb	r3, [r7, #10]
 800fd20:	220f      	movs	r2, #15
 800fd22:	f362 0387 	bfi	r3, r2, #2, #6
 800fd26:	72bb      	strb	r3, [r7, #10]

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	f7fa fce3 	bl	800a6f4 <_ZN3USB14GetAddressPoolEv>
 800fd2e:	6278      	str	r0, [r7, #36]	; 0x24
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 800fd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	2100      	movs	r1, #0
 800fd38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd3a:	4798      	blx	r3
 800fd3c:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(!p) {
 800fd3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d101      	bne.n	800fd48 <_ZN3USB11ConfiguringEhhb+0x70>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800fd44:	23d6      	movs	r3, #214	; 0xd6
 800fd46:	e15c      	b.n	8010002 <_ZN3USB11ConfiguringEhhb+0x32a>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 800fd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	62bb      	str	r3, [r7, #40]	; 0x28

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 800fd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd50:	f107 0208 	add.w	r2, r7, #8
 800fd54:	601a      	str	r2, [r3, #0]

        p->lowspeed = lowspeed;
 800fd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd58:	787a      	ldrb	r2, [r7, #1]
 800fd5a:	719a      	strb	r2, [r3, #6]
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 800fd5c:	f107 030c 	add.w	r3, r7, #12
 800fd60:	9300      	str	r3, [sp, #0]
 800fd62:	2312      	movs	r3, #18
 800fd64:	2200      	movs	r2, #0
 800fd66:	2100      	movs	r1, #0
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f000 f94e 	bl	801000a <_ZN3USB11getDevDescrEhhtPh>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 800fd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd78:	601a      	str	r2, [r3, #0]

        if(rcode) {
 800fd7a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d002      	beq.n	800fd88 <_ZN3USB11ConfiguringEhhb+0xb0>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 800fd82:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fd86:	e13c      	b.n	8010002 <_ZN3USB11ConfiguringEhhb+0x32a>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 800fd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd8a:	7a1a      	ldrb	r2, [r3, #8]
 800fd8c:	7a5b      	ldrb	r3, [r3, #9]
 800fd8e:	021b      	lsls	r3, r3, #8
 800fd90:	4313      	orrs	r3, r2
 800fd92:	847b      	strh	r3, [r7, #34]	; 0x22
        uint16_t pid = udd->idProduct;
 800fd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd96:	7a9a      	ldrb	r2, [r3, #10]
 800fd98:	7adb      	ldrb	r3, [r3, #11]
 800fd9a:	021b      	lsls	r3, r3, #8
 800fd9c:	4313      	orrs	r3, r2
 800fd9e:	843b      	strh	r3, [r7, #32]
        uint8_t klass = udd->bDeviceClass;
 800fda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda2:	791b      	ldrb	r3, [r3, #4]
 800fda4:	77fb      	strb	r3, [r7, #31]
        uint8_t subklass = udd->bDeviceSubClass;
 800fda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda8:	795b      	ldrb	r3, [r3, #5]
 800fdaa:	77bb      	strb	r3, [r7, #30]
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800fdac:	2300      	movs	r3, #0
 800fdae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fdb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fdb6:	2b0f      	cmp	r3, #15
 800fdb8:	f200 8081 	bhi.w	800febe <_ZN3USB11ConfiguringEhhb+0x1e6>
                if(!devConfig[devConfigIndex]) continue; // no driver
 800fdbc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	321e      	adds	r2, #30
 800fdc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d06e      	beq.n	800feaa <_ZN3USB11ConfiguringEhhb+0x1d2>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800fdcc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	321e      	adds	r2, #30
 800fdd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fdd8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	321e      	adds	r2, #30
 800fde0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	3310      	adds	r3, #16
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	4608      	mov	r0, r1
 800fdec:	4798      	blx	r3
 800fdee:	4603      	mov	r3, r0
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	bf14      	ite	ne
 800fdf4:	2301      	movne	r3, #1
 800fdf6:	2300      	moveq	r3, #0
 800fdf8:	b2db      	uxtb	r3, r3
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d157      	bne.n	800feae <_ZN3USB11ConfiguringEhhb+0x1d6>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 800fdfe:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	321e      	adds	r2, #30
 800fe06:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fe0a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	321e      	adds	r2, #30
 800fe12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	3320      	adds	r3, #32
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	7fba      	ldrb	r2, [r7, #30]
 800fe1e:	4611      	mov	r1, r2
 800fe20:	4798      	blx	r3
 800fe22:	4603      	mov	r3, r0
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d02b      	beq.n	800fe80 <_ZN3USB11ConfiguringEhhb+0x1a8>
 800fe28:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	321e      	adds	r2, #30
 800fe30:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fe34:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	321e      	adds	r2, #30
 800fe3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	3318      	adds	r3, #24
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	8c3a      	ldrh	r2, [r7, #32]
 800fe48:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800fe4a:	4798      	blx	r3
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d114      	bne.n	800fe7c <_ZN3USB11ConfiguringEhhb+0x1a4>
 800fe52:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	321e      	adds	r2, #30
 800fe5a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fe5e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	321e      	adds	r2, #30
 800fe66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	331c      	adds	r3, #28
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	7ffa      	ldrb	r2, [r7, #31]
 800fe72:	4611      	mov	r1, r2
 800fe74:	4798      	blx	r3
 800fe76:	4603      	mov	r3, r0
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d001      	beq.n	800fe80 <_ZN3USB11ConfiguringEhhb+0x1a8>
 800fe7c:	2301      	movs	r3, #1
 800fe7e:	e000      	b.n	800fe82 <_ZN3USB11ConfiguringEhhb+0x1aa>
 800fe80:	2300      	movs	r3, #0
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d014      	beq.n	800feb0 <_ZN3USB11ConfiguringEhhb+0x1d8>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 800fe86:	78b8      	ldrb	r0, [r7, #2]
 800fe88:	78fa      	ldrb	r2, [r7, #3]
 800fe8a:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800fe8e:	787b      	ldrb	r3, [r7, #1]
 800fe90:	9300      	str	r3, [sp, #0]
 800fe92:	4603      	mov	r3, r0
 800fe94:	6878      	ldr	r0, [r7, #4]
 800fe96:	f7ff fe81 	bl	800fb9c <_ZN3USB13AttemptConfigEhhhb>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 800fea0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fea4:	2bd1      	cmp	r3, #209	; 0xd1
 800fea6:	d109      	bne.n	800febc <_ZN3USB11ConfiguringEhhb+0x1e4>
 800fea8:	e002      	b.n	800feb0 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(!devConfig[devConfigIndex]) continue; // no driver
 800feaa:	bf00      	nop
 800feac:	e000      	b.n	800feb0 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800feae:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800feb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800feb4:	3301      	adds	r3, #1
 800feb6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800feba:	e77a      	b.n	800fdb2 <_ZN3USB11ConfiguringEhhb+0xda>
                                break;
 800febc:	bf00      	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 800febe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fec2:	2b0f      	cmp	r3, #15
 800fec4:	d802      	bhi.n	800fecc <_ZN3USB11ConfiguringEhhb+0x1f4>
                return rcode;
 800fec6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800feca:	e09a      	b.n	8010002 <_ZN3USB11ConfiguringEhhb+0x32a>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800fecc:	2300      	movs	r3, #0
 800fece:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fed2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fed6:	2b0f      	cmp	r3, #15
 800fed8:	f200 8088 	bhi.w	800ffec <_ZN3USB11ConfiguringEhhb+0x314>
                if(!devConfig[devConfigIndex]) continue;
 800fedc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	321e      	adds	r2, #30
 800fee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d074      	beq.n	800ffd6 <_ZN3USB11ConfiguringEhhb+0x2fe>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800feec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	321e      	adds	r2, #30
 800fef4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fef8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	321e      	adds	r2, #30
 800ff00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	3310      	adds	r3, #16
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	4608      	mov	r0, r1
 800ff0c:	4798      	blx	r3
 800ff0e:	4603      	mov	r3, r0
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	bf14      	ite	ne
 800ff14:	2301      	movne	r3, #1
 800ff16:	2300      	moveq	r3, #0
 800ff18:	b2db      	uxtb	r3, r3
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d15d      	bne.n	800ffda <_ZN3USB11ConfiguringEhhb+0x302>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 800ff1e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	321e      	adds	r2, #30
 800ff26:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ff2a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	321e      	adds	r2, #30
 800ff32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	3320      	adds	r3, #32
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	7fba      	ldrb	r2, [r7, #30]
 800ff3e:	4611      	mov	r1, r2
 800ff40:	4798      	blx	r3
 800ff42:	4603      	mov	r3, r0
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d02b      	beq.n	800ffa0 <_ZN3USB11ConfiguringEhhb+0x2c8>
 800ff48:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	321e      	adds	r2, #30
 800ff50:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ff54:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	321e      	adds	r2, #30
 800ff5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	3318      	adds	r3, #24
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	8c3a      	ldrh	r2, [r7, #32]
 800ff68:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800ff6a:	4798      	blx	r3
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d114      	bne.n	800ff9c <_ZN3USB11ConfiguringEhhb+0x2c4>
 800ff72:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	321e      	adds	r2, #30
 800ff7a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ff7e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	321e      	adds	r2, #30
 800ff86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	331c      	adds	r3, #28
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	7ffa      	ldrb	r2, [r7, #31]
 800ff92:	4611      	mov	r1, r2
 800ff94:	4798      	blx	r3
 800ff96:	4603      	mov	r3, r0
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d001      	beq.n	800ffa0 <_ZN3USB11ConfiguringEhhb+0x2c8>
 800ff9c:	2301      	movs	r3, #1
 800ff9e:	e000      	b.n	800ffa2 <_ZN3USB11ConfiguringEhhb+0x2ca>
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d11b      	bne.n	800ffde <_ZN3USB11ConfiguringEhhb+0x306>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 800ffa6:	78b8      	ldrb	r0, [r7, #2]
 800ffa8:	78fa      	ldrb	r2, [r7, #3]
 800ffaa:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800ffae:	787b      	ldrb	r3, [r7, #1]
 800ffb0:	9300      	str	r3, [sp, #0]
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	6878      	ldr	r0, [r7, #4]
 800ffb6:	f7ff fdf1 	bl	800fb9c <_ZN3USB13AttemptConfigEhhhb>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 800ffc0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ffc4:	2bd1      	cmp	r3, #209	; 0xd1
 800ffc6:	d00b      	beq.n	800ffe0 <_ZN3USB11ConfiguringEhhb+0x308>
 800ffc8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ffcc:	2bd9      	cmp	r3, #217	; 0xd9
 800ffce:	d007      	beq.n	800ffe0 <_ZN3USB11ConfiguringEhhb+0x308>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 800ffd0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ffd4:	e015      	b.n	8010002 <_ZN3USB11ConfiguringEhhb+0x32a>
                if(!devConfig[devConfigIndex]) continue;
 800ffd6:	bf00      	nop
 800ffd8:	e002      	b.n	800ffe0 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800ffda:	bf00      	nop
 800ffdc:	e000      	b.n	800ffe0 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 800ffde:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800ffe0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ffe4:	3301      	adds	r3, #1
 800ffe6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ffea:	e772      	b.n	800fed2 <_ZN3USB11ConfiguringEhhb+0x1fa>
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 800ffec:	787b      	ldrb	r3, [r7, #1]
 800ffee:	78ba      	ldrb	r2, [r7, #2]
 800fff0:	78f9      	ldrb	r1, [r7, #3]
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	f7ff fd76 	bl	800fae4 <_ZN3USB17DefaultAddressingEhhb>
 800fff8:	4603      	mov	r3, r0
 800fffa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        return rcode;
 800fffe:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 8010002:	4618      	mov	r0, r3
 8010004:	3738      	adds	r7, #56	; 0x38
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}

0801000a <_ZN3USB11getDevDescrEhhtPh>:
}

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 801000a:	b580      	push	{r7, lr}
 801000c:	b08a      	sub	sp, #40	; 0x28
 801000e:	af08      	add	r7, sp, #32
 8010010:	6078      	str	r0, [r7, #4]
 8010012:	4608      	mov	r0, r1
 8010014:	4611      	mov	r1, r2
 8010016:	461a      	mov	r2, r3
 8010018:	4603      	mov	r3, r0
 801001a:	70fb      	strb	r3, [r7, #3]
 801001c:	460b      	mov	r3, r1
 801001e:	70bb      	strb	r3, [r7, #2]
 8010020:	4613      	mov	r3, r2
 8010022:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 8010024:	78ba      	ldrb	r2, [r7, #2]
 8010026:	78f9      	ldrb	r1, [r7, #3]
 8010028:	2300      	movs	r3, #0
 801002a:	9307      	str	r3, [sp, #28]
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	9306      	str	r3, [sp, #24]
 8010030:	883b      	ldrh	r3, [r7, #0]
 8010032:	9305      	str	r3, [sp, #20]
 8010034:	883b      	ldrh	r3, [r7, #0]
 8010036:	9304      	str	r3, [sp, #16]
 8010038:	2300      	movs	r3, #0
 801003a:	9303      	str	r3, [sp, #12]
 801003c:	2301      	movs	r3, #1
 801003e:	9302      	str	r3, [sp, #8]
 8010040:	2300      	movs	r3, #0
 8010042:	9301      	str	r3, [sp, #4]
 8010044:	2306      	movs	r3, #6
 8010046:	9300      	str	r3, [sp, #0]
 8010048:	2380      	movs	r3, #128	; 0x80
 801004a:	6878      	ldr	r0, [r7, #4]
 801004c:	f7fe ffc7 	bl	800efde <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8010050:	4603      	mov	r3, r0
}
 8010052:	4618      	mov	r0, r3
 8010054:	3708      	adds	r7, #8
 8010056:	46bd      	mov	sp, r7
 8010058:	bd80      	pop	{r7, pc}

0801005a <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 801005a:	b580      	push	{r7, lr}
 801005c:	b08a      	sub	sp, #40	; 0x28
 801005e:	af08      	add	r7, sp, #32
 8010060:	6078      	str	r0, [r7, #4]
 8010062:	4608      	mov	r0, r1
 8010064:	4611      	mov	r1, r2
 8010066:	461a      	mov	r2, r3
 8010068:	4603      	mov	r3, r0
 801006a:	70fb      	strb	r3, [r7, #3]
 801006c:	460b      	mov	r3, r1
 801006e:	70bb      	strb	r3, [r7, #2]
 8010070:	4613      	mov	r3, r2
 8010072:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 8010074:	78ba      	ldrb	r2, [r7, #2]
 8010076:	78f9      	ldrb	r1, [r7, #3]
 8010078:	2300      	movs	r3, #0
 801007a:	9307      	str	r3, [sp, #28]
 801007c:	697b      	ldr	r3, [r7, #20]
 801007e:	9306      	str	r3, [sp, #24]
 8010080:	883b      	ldrh	r3, [r7, #0]
 8010082:	9305      	str	r3, [sp, #20]
 8010084:	883b      	ldrh	r3, [r7, #0]
 8010086:	9304      	str	r3, [sp, #16]
 8010088:	2300      	movs	r3, #0
 801008a:	9303      	str	r3, [sp, #12]
 801008c:	2302      	movs	r3, #2
 801008e:	9302      	str	r3, [sp, #8]
 8010090:	7c3b      	ldrb	r3, [r7, #16]
 8010092:	9301      	str	r3, [sp, #4]
 8010094:	2306      	movs	r3, #6
 8010096:	9300      	str	r3, [sp, #0]
 8010098:	2380      	movs	r3, #128	; 0x80
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f7fe ff9f 	bl	800efde <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 80100a0:	4603      	mov	r3, r0
}
 80100a2:	4618      	mov	r0, r3
 80100a4:	3708      	adds	r7, #8
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}

080100aa <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 80100aa:	b580      	push	{r7, lr}
 80100ac:	b09e      	sub	sp, #120	; 0x78
 80100ae:	af08      	add	r7, sp, #32
 80100b0:	6078      	str	r0, [r7, #4]
 80100b2:	4608      	mov	r0, r1
 80100b4:	4611      	mov	r1, r2
 80100b6:	461a      	mov	r2, r3
 80100b8:	4603      	mov	r3, r0
 80100ba:	70fb      	strb	r3, [r7, #3]
 80100bc:	460b      	mov	r3, r1
 80100be:	70bb      	strb	r3, [r7, #2]
 80100c0:	4613      	mov	r3, r2
 80100c2:	707b      	strb	r3, [r7, #1]
        const uint8_t bufSize = 64;
 80100c4:	2340      	movs	r3, #64	; 0x40
 80100c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 80100ca:	f107 030c 	add.w	r3, r7, #12
 80100ce:	653b      	str	r3, [r7, #80]	; 0x50

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 80100d0:	78ba      	ldrb	r2, [r7, #2]
 80100d2:	78f9      	ldrb	r1, [r7, #3]
 80100d4:	f107 030c 	add.w	r3, r7, #12
 80100d8:	9301      	str	r3, [sp, #4]
 80100da:	787b      	ldrb	r3, [r7, #1]
 80100dc:	9300      	str	r3, [sp, #0]
 80100de:	2309      	movs	r3, #9
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f7ff ffba 	bl	801005a <_ZN3USB12getConfDescrEhhthPh>
 80100e6:	4603      	mov	r3, r0
 80100e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if(ret)
 80100ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d002      	beq.n	80100fa <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x50>
                return ret;
 80100f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80100f8:	e020      	b.n	801013c <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x92>

        uint16_t total = ucd->wTotalLength;
 80100fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100fc:	789a      	ldrb	r2, [r3, #2]
 80100fe:	78db      	ldrb	r3, [r3, #3]
 8010100:	021b      	lsls	r3, r3, #8
 8010102:	4313      	orrs	r3, r2
 8010104:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 8010108:	78ba      	ldrb	r2, [r7, #2]
 801010a:	78f9      	ldrb	r1, [r7, #3]
 801010c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801010e:	9307      	str	r3, [sp, #28]
 8010110:	f107 030c 	add.w	r3, r7, #12
 8010114:	9306      	str	r3, [sp, #24]
 8010116:	2340      	movs	r3, #64	; 0x40
 8010118:	9305      	str	r3, [sp, #20]
 801011a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 801011e:	9304      	str	r3, [sp, #16]
 8010120:	2300      	movs	r3, #0
 8010122:	9303      	str	r3, [sp, #12]
 8010124:	2302      	movs	r3, #2
 8010126:	9302      	str	r3, [sp, #8]
 8010128:	787b      	ldrb	r3, [r7, #1]
 801012a:	9301      	str	r3, [sp, #4]
 801012c:	2306      	movs	r3, #6
 801012e:	9300      	str	r3, [sp, #0]
 8010130:	2380      	movs	r3, #128	; 0x80
 8010132:	6878      	ldr	r0, [r7, #4]
 8010134:	f7fe ff53 	bl	800efde <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8010138:	4603      	mov	r3, r0
 801013a:	bf00      	nop
}
 801013c:	4618      	mov	r0, r3
 801013e:	3758      	adds	r7, #88	; 0x58
 8010140:	46bd      	mov	sp, r7
 8010142:	bd80      	pop	{r7, pc}

08010144 <_ZN3USB7setAddrEhhh>:
uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
}
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 8010144:	b580      	push	{r7, lr}
 8010146:	b08c      	sub	sp, #48	; 0x30
 8010148:	af08      	add	r7, sp, #32
 801014a:	6078      	str	r0, [r7, #4]
 801014c:	4608      	mov	r0, r1
 801014e:	4611      	mov	r1, r2
 8010150:	461a      	mov	r2, r3
 8010152:	4603      	mov	r3, r0
 8010154:	70fb      	strb	r3, [r7, #3]
 8010156:	460b      	mov	r3, r1
 8010158:	70bb      	strb	r3, [r7, #2]
 801015a:	4613      	mov	r3, r2
 801015c:	707b      	strb	r3, [r7, #1]
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 801015e:	78ba      	ldrb	r2, [r7, #2]
 8010160:	78f9      	ldrb	r1, [r7, #3]
 8010162:	2300      	movs	r3, #0
 8010164:	9307      	str	r3, [sp, #28]
 8010166:	2300      	movs	r3, #0
 8010168:	9306      	str	r3, [sp, #24]
 801016a:	2300      	movs	r3, #0
 801016c:	9305      	str	r3, [sp, #20]
 801016e:	2300      	movs	r3, #0
 8010170:	9304      	str	r3, [sp, #16]
 8010172:	2300      	movs	r3, #0
 8010174:	9303      	str	r3, [sp, #12]
 8010176:	2300      	movs	r3, #0
 8010178:	9302      	str	r3, [sp, #8]
 801017a:	787b      	ldrb	r3, [r7, #1]
 801017c:	9301      	str	r3, [sp, #4]
 801017e:	2305      	movs	r3, #5
 8010180:	9300      	str	r3, [sp, #0]
 8010182:	2300      	movs	r3, #0
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f7fe ff2a 	bl	800efde <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 801018a:	4603      	mov	r3, r0
 801018c:	73fb      	strb	r3, [r7, #15]
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 801018e:	4804      	ldr	r0, [pc, #16]	; (80101a0 <_ZN3USB7setAddrEhhh+0x5c>)
 8010190:	f7f2 fe1e 	bl	8002dd0 <HAL_Delay>
        return rcode;
 8010194:	7bfb      	ldrb	r3, [r7, #15]
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 8010196:	4618      	mov	r0, r3
 8010198:	3710      	adds	r7, #16
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}
 801019e:	bf00      	nop
 80101a0:	000493e0 	.word	0x000493e0

080101a4 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b08a      	sub	sp, #40	; 0x28
 80101a8:	af08      	add	r7, sp, #32
 80101aa:	6078      	str	r0, [r7, #4]
 80101ac:	4608      	mov	r0, r1
 80101ae:	4611      	mov	r1, r2
 80101b0:	461a      	mov	r2, r3
 80101b2:	4603      	mov	r3, r0
 80101b4:	70fb      	strb	r3, [r7, #3]
 80101b6:	460b      	mov	r3, r1
 80101b8:	70bb      	strb	r3, [r7, #2]
 80101ba:	4613      	mov	r3, r2
 80101bc:	707b      	strb	r3, [r7, #1]
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 80101be:	78ba      	ldrb	r2, [r7, #2]
 80101c0:	78f9      	ldrb	r1, [r7, #3]
 80101c2:	2300      	movs	r3, #0
 80101c4:	9307      	str	r3, [sp, #28]
 80101c6:	2300      	movs	r3, #0
 80101c8:	9306      	str	r3, [sp, #24]
 80101ca:	2300      	movs	r3, #0
 80101cc:	9305      	str	r3, [sp, #20]
 80101ce:	2300      	movs	r3, #0
 80101d0:	9304      	str	r3, [sp, #16]
 80101d2:	2300      	movs	r3, #0
 80101d4:	9303      	str	r3, [sp, #12]
 80101d6:	2300      	movs	r3, #0
 80101d8:	9302      	str	r3, [sp, #8]
 80101da:	787b      	ldrb	r3, [r7, #1]
 80101dc:	9301      	str	r3, [sp, #4]
 80101de:	2309      	movs	r3, #9
 80101e0:	9300      	str	r3, [sp, #0]
 80101e2:	2300      	movs	r3, #0
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	f7fe fefa 	bl	800efde <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 80101ea:	4603      	mov	r3, r0
}
 80101ec:	4618      	mov	r0, r3
 80101ee:	3708      	adds	r7, #8
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd80      	pop	{r7, pc}

080101f4 <_ZN8MAX3421eI3P102P9EC1Ev>:
MAX3421e< SPI_SS, INTR >::MAX3421e() {
 80101f4:	b480      	push	{r7}
 80101f6:	b083      	sub	sp, #12
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
};
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	4618      	mov	r0, r3
 8010200:	370c      	adds	r7, #12
 8010202:	46bd      	mov	sp, r7
 8010204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010208:	4770      	bx	lr
	...

0801020c <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 801020c:	b480      	push	{r7}
 801020e:	b083      	sub	sp, #12
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
 8010214:	4a04      	ldr	r2, [pc, #16]	; (8010228 <_ZN11AddressPoolC1Ev+0x1c>)
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	601a      	str	r2, [r3, #0]
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	4618      	mov	r0, r3
 801021e:	370c      	adds	r7, #12
 8010220:	46bd      	mov	sp, r7
 8010222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010226:	4770      	bx	lr
 8010228:	08011060 	.word	0x08011060

0801022c <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 801022c:	b580      	push	{r7, lr}
 801022e:	b082      	sub	sp, #8
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	4618      	mov	r0, r3
 8010238:	f7ff ffe8 	bl	801020c <_ZN11AddressPoolC1Ev>
 801023c:	4a17      	ldr	r2, [pc, #92]	; (801029c <_ZN15AddressPoolImplILh16EEC1Ev+0x70>)
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	601a      	str	r2, [r3, #0]
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	2200      	movs	r2, #0
 8010246:	71da      	strb	r2, [r3, #7]
                // Zero address is reserved
                InitEntry(0);
 8010248:	2100      	movs	r1, #0
 801024a:	6878      	ldr	r0, [r7, #4]
 801024c:	f000 f990 	bl	8010570 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2200      	movs	r2, #0
 8010254:	731a      	strb	r2, [r3, #12]
                thePool[0].epinfo = &dev0ep;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	1d1a      	adds	r2, r3, #4
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	609a      	str	r2, [r3, #8]
                dev0ep.epAddr = 0;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	2200      	movs	r2, #0
 8010262:	711a      	strb	r2, [r3, #4]
                dev0ep.maxPktSize = 8;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2208      	movs	r2, #8
 8010268:	715a      	strb	r2, [r3, #5]
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 801026a:	687a      	ldr	r2, [r7, #4]
 801026c:	7993      	ldrb	r3, [r2, #6]
 801026e:	f36f 0300 	bfc	r3, #0, #1
 8010272:	7193      	strb	r3, [r2, #6]
                dev0ep.bmRcvToggle = 0;
 8010274:	687a      	ldr	r2, [r7, #4]
 8010276:	7993      	ldrb	r3, [r2, #6]
 8010278:	f36f 0341 	bfc	r3, #1, #1
 801027c:	7193      	strb	r3, [r2, #6]
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 801027e:	687a      	ldr	r2, [r7, #4]
 8010280:	7993      	ldrb	r3, [r2, #6]
 8010282:	210f      	movs	r1, #15
 8010284:	f361 0387 	bfi	r3, r1, #2, #6
 8010288:	7193      	strb	r3, [r2, #6]

                InitAllAddresses();
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f000 f9a1 	bl	80105d2 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	4618      	mov	r0, r3
 8010294:	3708      	adds	r7, #8
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}
 801029a:	bf00      	nop
 801029c:	0801104c 	.word	0x0801104c

080102a0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b084      	sub	sp, #16
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
 80102a8:	460b      	mov	r3, r1
 80102aa:	70fb      	strb	r3, [r7, #3]
                if(!addr)
 80102ac:	78fb      	ldrb	r3, [r7, #3]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d102      	bne.n	80102b8 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x18>
                        return thePool;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	3308      	adds	r3, #8
 80102b6:	e014      	b.n	80102e2 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x42>

                uint8_t index = FindAddressIndex(addr);
 80102b8:	78fb      	ldrb	r3, [r7, #3]
 80102ba:	4619      	mov	r1, r3
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f000 f9a1 	bl	8010604 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 80102c2:	4603      	mov	r3, r0
 80102c4:	73fb      	strb	r3, [r7, #15]

                return (!index) ? NULL : thePool + index;
 80102c6:	7bfb      	ldrb	r3, [r7, #15]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d008      	beq.n	80102de <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x3e>
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	f103 0108 	add.w	r1, r3, #8
 80102d2:	7bfa      	ldrb	r2, [r7, #15]
 80102d4:	4613      	mov	r3, r2
 80102d6:	00db      	lsls	r3, r3, #3
 80102d8:	1a9b      	subs	r3, r3, r2
 80102da:	440b      	add	r3, r1
 80102dc:	e000      	b.n	80102e0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x40>
 80102de:	2300      	movs	r3, #0
 80102e0:	bf00      	nop
        };
 80102e2:	4618      	mov	r0, r3
 80102e4:	3710      	adds	r7, #16
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd80      	pop	{r7, pc}
	...

080102ec <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b086      	sub	sp, #24
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	60f8      	str	r0, [r7, #12]
 80102f4:	607b      	str	r3, [r7, #4]
 80102f6:	460b      	mov	r3, r1
 80102f8:	72fb      	strb	r3, [r7, #11]
 80102fa:	4613      	mov	r3, r2
 80102fc:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 80102fe:	f7f1 f957 	bl	80015b0 <_ZN3P105ClearEv>
        uint8_t data = reg | 0x02;
 8010302:	7afb      	ldrb	r3, [r7, #11]
 8010304:	f043 0302 	orr.w	r3, r3, #2
 8010308:	b2db      	uxtb	r3, r3
 801030a:	75fb      	strb	r3, [r7, #23]
        HAL_SPI_Transmit(&SPI_Handle, &data, 1, HAL_MAX_DELAY);
 801030c:	f107 0117 	add.w	r1, r7, #23
 8010310:	f04f 33ff 	mov.w	r3, #4294967295
 8010314:	2201      	movs	r2, #1
 8010316:	480b      	ldr	r0, [pc, #44]	; (8010344 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 8010318:	f7f5 fdb7 	bl	8005e8a <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 801031c:	7abb      	ldrb	r3, [r7, #10]
 801031e:	b29a      	uxth	r2, r3
 8010320:	f04f 33ff 	mov.w	r3, #4294967295
 8010324:	6879      	ldr	r1, [r7, #4]
 8010326:	4807      	ldr	r0, [pc, #28]	; (8010344 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 8010328:	f7f5 fdaf 	bl	8005e8a <HAL_SPI_Transmit>
        data_p += nbytes;
 801032c:	7abb      	ldrb	r3, [r7, #10]
 801032e:	687a      	ldr	r2, [r7, #4]
 8010330:	4413      	add	r3, r2
 8010332:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 8010334:	f7f1 f930 	bl	8001598 <_ZN3P103SetEv>
        return ( data_p);
 8010338:	687b      	ldr	r3, [r7, #4]
}
 801033a:	4618      	mov	r0, r3
 801033c:	3718      	adds	r7, #24
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}
 8010342:	bf00      	nop
 8010344:	200002fc 	.word	0x200002fc

08010348 <_Z10D_PrintHexIhEvT_i>:
                mask >>= 4;
        }
        prn->print((T)val, HEX);
}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 8010348:	b480      	push	{r7}
 801034a:	b083      	sub	sp, #12
 801034c:	af00      	add	r7, sp, #0
 801034e:	4603      	mov	r3, r0
 8010350:	6039      	str	r1, [r7, #0]
 8010352:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 8010354:	bf00      	nop
 8010356:	370c      	adds	r7, #12
 8010358:	46bd      	mov	sp, r7
 801035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035e:	4770      	bx	lr

08010360 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 8010360:	b580      	push	{r7, lr}
 8010362:	b084      	sub	sp, #16
 8010364:	af00      	add	r7, sp, #0
 8010366:	60f8      	str	r0, [r7, #12]
 8010368:	607b      	str	r3, [r7, #4]
 801036a:	460b      	mov	r3, r1
 801036c:	72fb      	strb	r3, [r7, #11]
 801036e:	4613      	mov	r3, r2
 8010370:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 8010372:	f7f1 f91d 	bl	80015b0 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8010376:	f107 010b 	add.w	r1, r7, #11
 801037a:	f04f 33ff 	mov.w	r3, #4294967295
 801037e:	2201      	movs	r2, #1
 8010380:	480d      	ldr	r0, [pc, #52]	; (80103b8 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 8010382:	f7f5 fd82 	bl	8005e8a <HAL_SPI_Transmit>
        memset(data_p, 0, nbytes); // Make sure we send out empty bytes
 8010386:	7abb      	ldrb	r3, [r7, #10]
 8010388:	461a      	mov	r2, r3
 801038a:	2100      	movs	r1, #0
 801038c:	6878      	ldr	r0, [r7, #4]
 801038e:	f000 fc0f 	bl	8010bb0 <memset>
        HAL_SPI_Receive(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 8010392:	7abb      	ldrb	r3, [r7, #10]
 8010394:	b29a      	uxth	r2, r3
 8010396:	f04f 33ff 	mov.w	r3, #4294967295
 801039a:	6879      	ldr	r1, [r7, #4]
 801039c:	4806      	ldr	r0, [pc, #24]	; (80103b8 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 801039e:	f7f5 feb0 	bl	8006102 <HAL_SPI_Receive>
        data_p += nbytes;
 80103a2:	7abb      	ldrb	r3, [r7, #10]
 80103a4:	687a      	ldr	r2, [r7, #4]
 80103a6:	4413      	add	r3, r2
 80103a8:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 80103aa:	f7f1 f8f5 	bl	8001598 <_ZN3P103SetEv>
        return ( data_p);
 80103ae:	687b      	ldr	r3, [r7, #4]
}
 80103b0:	4618      	mov	r0, r3
 80103b2:	3710      	adds	r7, #16
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}
 80103b8:	200002fc 	.word	0x200002fc

080103bc <_ZN8MAX3421eI3P102P9E4TaskEv>:

/* MAX3421 state change task and interrupt handler */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::Task(void) {
 80103bc:	b580      	push	{r7, lr}
 80103be:	b084      	sub	sp, #16
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
        uint8_t rcode = 0;
 80103c4:	2300      	movs	r3, #0
 80103c6:	73fb      	strb	r3, [r7, #15]
        uint8_t pinvalue;
        //USB_HOST_SERIAL.print("Vbus state: ");
        //USB_HOST_SERIAL.println( vbusState, HEX );
        pinvalue = INTR::IsSet(); //Read();
 80103c8:	f7fe fd0e 	bl	800ede8 <_ZN2P95IsSetEv>
 80103cc:	4603      	mov	r3, r0
 80103ce:	73bb      	strb	r3, [r7, #14]
        //pinvalue = digitalRead( MAX_INT );
        if(pinvalue == 0) {
 80103d0:	7bbb      	ldrb	r3, [r7, #14]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d104      	bne.n	80103e0 <_ZN8MAX3421eI3P102P9E4TaskEv+0x24>
                rcode = IntHandler();
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	f000 f937 	bl	801064a <_ZN8MAX3421eI3P102P9E10IntHandlerEv>
 80103dc:	4603      	mov	r3, r0
 80103de:	73fb      	strb	r3, [r7, #15]
        //    pinvalue = digitalRead( MAX_GPX );
        //    if( pinvalue == LOW ) {
        //        GpxHandler();
        //    }
        //    usbSM();                                //USB state machine
        return ( rcode);
 80103e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80103e2:	4618      	mov	r0, r3
 80103e4:	3710      	adds	r7, #16
 80103e6:	46bd      	mov	sp, r7
 80103e8:	bd80      	pop	{r7, pc}
	...

080103ec <_ZN8MAX3421eI3P102P9E12getVbusStateEv>:
        uint8_t getVbusState(void) {
 80103ec:	b480      	push	{r7}
 80103ee:	b083      	sub	sp, #12
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
                return vbusState;
 80103f4:	4b03      	ldr	r3, [pc, #12]	; (8010404 <_ZN8MAX3421eI3P102P9E12getVbusStateEv+0x18>)
 80103f6:	781b      	ldrb	r3, [r3, #0]
        };
 80103f8:	4618      	mov	r0, r3
 80103fa:	370c      	adds	r7, #12
 80103fc:	46bd      	mov	sp, r7
 80103fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010402:	4770      	bx	lr
 8010404:	2000064d 	.word	0x2000064d

08010408 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 8010408:	b580      	push	{r7, lr}
 801040a:	b084      	sub	sp, #16
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
 8010410:	4608      	mov	r0, r1
 8010412:	4611      	mov	r1, r2
 8010414:	461a      	mov	r2, r3
 8010416:	4603      	mov	r3, r0
 8010418:	70fb      	strb	r3, [r7, #3]
 801041a:	460b      	mov	r3, r1
 801041c:	70bb      	strb	r3, [r7, #2]
 801041e:	4613      	mov	r3, r2
 8010420:	707b      	strb	r3, [r7, #1]
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 8010422:	78fb      	ldrb	r3, [r7, #3]
 8010424:	733b      	strb	r3, [r7, #12]
                if(_parent.bmReserved || port > 7)
 8010426:	7b3b      	ldrb	r3, [r7, #12]
 8010428:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801042c:	b2db      	uxtb	r3, r3
 801042e:	2b00      	cmp	r3, #0
 8010430:	d102      	bne.n	8010438 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x30>
 8010432:	787b      	ldrb	r3, [r7, #1]
 8010434:	2b07      	cmp	r3, #7
 8010436:	d901      	bls.n	801043c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x34>
                        //if(parent > 127 || port > 7)
                        return 0;
 8010438:	2300      	movs	r3, #0
 801043a:	e079      	b.n	8010530 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(is_hub && hubCounter == 7)
 801043c:	78bb      	ldrb	r3, [r7, #2]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d005      	beq.n	801044e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	79db      	ldrb	r3, [r3, #7]
 8010446:	2b07      	cmp	r3, #7
 8010448:	d101      	bne.n	801044e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
                        return 0;
 801044a:	2300      	movs	r3, #0
 801044c:	e070      	b.n	8010530 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 801044e:	2100      	movs	r1, #0
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f000 f8d7 	bl	8010604 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8010456:	4603      	mov	r3, r0
 8010458:	73fb      	strb	r3, [r7, #15]

                if(!index) // if empty entry is not found
 801045a:	7bfb      	ldrb	r3, [r7, #15]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d101      	bne.n	8010464 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x5c>
                        return 0;
 8010460:	2300      	movs	r3, #0
 8010462:	e065      	b.n	8010530 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(_parent.devAddress == 0) {
 8010464:	7b3b      	ldrb	r3, [r7, #12]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d124      	bne.n	80104b4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
                        if(is_hub) {
 801046a:	78bb      	ldrb	r3, [r7, #2]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d00f      	beq.n	8010490 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x88>
                                thePool[index].address.devAddress = 0x41;
 8010470:	7bfa      	ldrb	r2, [r7, #15]
 8010472:	6879      	ldr	r1, [r7, #4]
 8010474:	4613      	mov	r3, r2
 8010476:	00db      	lsls	r3, r3, #3
 8010478:	1a9b      	subs	r3, r3, r2
 801047a:	440b      	add	r3, r1
 801047c:	330c      	adds	r3, #12
 801047e:	2241      	movs	r2, #65	; 0x41
 8010480:	701a      	strb	r2, [r3, #0]
                                hubCounter++;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	79db      	ldrb	r3, [r3, #7]
 8010486:	3301      	adds	r3, #1
 8010488:	b2da      	uxtb	r2, r3
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	71da      	strb	r2, [r3, #7]
 801048e:	e008      	b.n	80104a2 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                        } else
                                thePool[index].address.devAddress = 1;
 8010490:	7bfa      	ldrb	r2, [r7, #15]
 8010492:	6879      	ldr	r1, [r7, #4]
 8010494:	4613      	mov	r3, r2
 8010496:	00db      	lsls	r3, r3, #3
 8010498:	1a9b      	subs	r3, r3, r2
 801049a:	440b      	add	r3, r1
 801049c:	330c      	adds	r3, #12
 801049e:	2201      	movs	r2, #1
 80104a0:	701a      	strb	r2, [r3, #0]

                        return thePool[index].address.devAddress;
 80104a2:	7bfa      	ldrb	r2, [r7, #15]
 80104a4:	6879      	ldr	r1, [r7, #4]
 80104a6:	4613      	mov	r3, r2
 80104a8:	00db      	lsls	r3, r3, #3
 80104aa:	1a9b      	subs	r3, r3, r2
 80104ac:	440b      	add	r3, r1
 80104ae:	330c      	adds	r3, #12
 80104b0:	781b      	ldrb	r3, [r3, #0]
 80104b2:	e03d      	b.n	8010530 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 80104b4:	2300      	movs	r3, #0
 80104b6:	723b      	strb	r3, [r7, #8]
                addr.bmParent = _parent.bmAddress;
 80104b8:	7b3b      	ldrb	r3, [r7, #12]
 80104ba:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80104be:	b2da      	uxtb	r2, r3
 80104c0:	7a3b      	ldrb	r3, [r7, #8]
 80104c2:	f362 03c5 	bfi	r3, r2, #3, #3
 80104c6:	723b      	strb	r3, [r7, #8]
                if(is_hub) {
 80104c8:	78bb      	ldrb	r3, [r7, #2]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d013      	beq.n	80104f6 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xee>
                        addr.bmHub = 1;
 80104ce:	7a3b      	ldrb	r3, [r7, #8]
 80104d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104d4:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = ++hubCounter;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	79db      	ldrb	r3, [r3, #7]
 80104da:	3301      	adds	r3, #1
 80104dc:	b2da      	uxtb	r2, r3
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	71da      	strb	r2, [r3, #7]
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	79db      	ldrb	r3, [r3, #7]
 80104e6:	f003 0307 	and.w	r3, r3, #7
 80104ea:	b2da      	uxtb	r2, r3
 80104ec:	7a3b      	ldrb	r3, [r7, #8]
 80104ee:	f362 0302 	bfi	r3, r2, #0, #3
 80104f2:	723b      	strb	r3, [r7, #8]
 80104f4:	e00b      	b.n	801050e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x106>
                } else {
                        addr.bmHub = 0;
 80104f6:	7a3b      	ldrb	r3, [r7, #8]
 80104f8:	f36f 1386 	bfc	r3, #6, #1
 80104fc:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = port;
 80104fe:	787b      	ldrb	r3, [r7, #1]
 8010500:	f003 0307 	and.w	r3, r3, #7
 8010504:	b2da      	uxtb	r2, r3
 8010506:	7a3b      	ldrb	r3, [r7, #8]
 8010508:	f362 0302 	bfi	r3, r2, #0, #3
 801050c:	723b      	strb	r3, [r7, #8]
                }
                thePool[index].address = addr;
 801050e:	7bfa      	ldrb	r2, [r7, #15]
 8010510:	6879      	ldr	r1, [r7, #4]
 8010512:	4613      	mov	r3, r2
 8010514:	00db      	lsls	r3, r3, #3
 8010516:	1a9b      	subs	r3, r3, r2
 8010518:	440b      	add	r3, r1
 801051a:	330c      	adds	r3, #12
 801051c:	7a3a      	ldrb	r2, [r7, #8]
 801051e:	701a      	strb	r2, [r3, #0]
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 8010520:	7bfa      	ldrb	r2, [r7, #15]
 8010522:	6879      	ldr	r1, [r7, #4]
 8010524:	4613      	mov	r3, r2
 8010526:	00db      	lsls	r3, r3, #3
 8010528:	1a9b      	subs	r3, r3, r2
 801052a:	440b      	add	r3, r1
 801052c:	330c      	adds	r3, #12
 801052e:	781b      	ldrb	r3, [r3, #0]
        };
 8010530:	4618      	mov	r0, r3
 8010532:	3710      	adds	r7, #16
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}

08010538 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 8010538:	b580      	push	{r7, lr}
 801053a:	b084      	sub	sp, #16
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
 8010540:	460b      	mov	r3, r1
 8010542:	70fb      	strb	r3, [r7, #3]
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 8010544:	78fb      	ldrb	r3, [r7, #3]
 8010546:	2b41      	cmp	r3, #65	; 0x41
 8010548:	d103      	bne.n	8010552 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x1a>
                        InitAllAddresses();
 801054a:	6878      	ldr	r0, [r7, #4]
 801054c:	f000 f841 	bl	80105d2 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 8010550:	e00b      	b.n	801056a <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x32>
                }
                uint8_t index = FindAddressIndex(addr);
 8010552:	78fb      	ldrb	r3, [r7, #3]
 8010554:	4619      	mov	r1, r3
 8010556:	6878      	ldr	r0, [r7, #4]
 8010558:	f000 f854 	bl	8010604 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 801055c:	4603      	mov	r3, r0
 801055e:	73fb      	strb	r3, [r7, #15]
                FreeAddressByIndex(index);
 8010560:	7bfb      	ldrb	r3, [r7, #15]
 8010562:	4619      	mov	r1, r3
 8010564:	6878      	ldr	r0, [r7, #4]
 8010566:	f000 f893 	bl	8010690 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 801056a:	3710      	adds	r7, #16
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}

08010570 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:
        void InitEntry(uint8_t index) {
 8010570:	b480      	push	{r7}
 8010572:	b083      	sub	sp, #12
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
 8010578:	460b      	mov	r3, r1
 801057a:	70fb      	strb	r3, [r7, #3]
                thePool[index].address.devAddress = 0;
 801057c:	78fa      	ldrb	r2, [r7, #3]
 801057e:	6879      	ldr	r1, [r7, #4]
 8010580:	4613      	mov	r3, r2
 8010582:	00db      	lsls	r3, r3, #3
 8010584:	1a9b      	subs	r3, r3, r2
 8010586:	440b      	add	r3, r1
 8010588:	330c      	adds	r3, #12
 801058a:	2200      	movs	r2, #0
 801058c:	701a      	strb	r2, [r3, #0]
                thePool[index].epcount = 1;
 801058e:	78fa      	ldrb	r2, [r7, #3]
 8010590:	6879      	ldr	r1, [r7, #4]
 8010592:	4613      	mov	r3, r2
 8010594:	00db      	lsls	r3, r3, #3
 8010596:	1a9b      	subs	r3, r3, r2
 8010598:	440b      	add	r3, r1
 801059a:	330d      	adds	r3, #13
 801059c:	2201      	movs	r2, #1
 801059e:	701a      	strb	r2, [r3, #0]
                thePool[index].lowspeed = 0;
 80105a0:	78fa      	ldrb	r2, [r7, #3]
 80105a2:	6879      	ldr	r1, [r7, #4]
 80105a4:	4613      	mov	r3, r2
 80105a6:	00db      	lsls	r3, r3, #3
 80105a8:	1a9b      	subs	r3, r3, r2
 80105aa:	440b      	add	r3, r1
 80105ac:	330e      	adds	r3, #14
 80105ae:	2200      	movs	r2, #0
 80105b0:	701a      	strb	r2, [r3, #0]
                thePool[index].epinfo = &dev0ep;
 80105b2:	78fa      	ldrb	r2, [r7, #3]
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	1d19      	adds	r1, r3, #4
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	4613      	mov	r3, r2
 80105bc:	00db      	lsls	r3, r3, #3
 80105be:	1a9b      	subs	r3, r3, r2
 80105c0:	4403      	add	r3, r0
 80105c2:	3308      	adds	r3, #8
 80105c4:	6019      	str	r1, [r3, #0]
        };
 80105c6:	bf00      	nop
 80105c8:	370c      	adds	r7, #12
 80105ca:	46bd      	mov	sp, r7
 80105cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d0:	4770      	bx	lr

080105d2 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
        void InitAllAddresses() {
 80105d2:	b580      	push	{r7, lr}
 80105d4:	b084      	sub	sp, #16
 80105d6:	af00      	add	r7, sp, #0
 80105d8:	6078      	str	r0, [r7, #4]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 80105da:	2301      	movs	r3, #1
 80105dc:	73fb      	strb	r3, [r7, #15]
 80105de:	7bfb      	ldrb	r3, [r7, #15]
 80105e0:	2b0f      	cmp	r3, #15
 80105e2:	d808      	bhi.n	80105f6 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x24>
                        InitEntry(i);
 80105e4:	7bfb      	ldrb	r3, [r7, #15]
 80105e6:	4619      	mov	r1, r3
 80105e8:	6878      	ldr	r0, [r7, #4]
 80105ea:	f7ff ffc1 	bl	8010570 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 80105ee:	7bfb      	ldrb	r3, [r7, #15]
 80105f0:	3301      	adds	r3, #1
 80105f2:	73fb      	strb	r3, [r7, #15]
 80105f4:	e7f3      	b.n	80105de <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0xc>
                hubCounter = 0;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	2200      	movs	r2, #0
 80105fa:	71da      	strb	r2, [r3, #7]
        };
 80105fc:	bf00      	nop
 80105fe:	3710      	adds	r7, #16
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}

08010604 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
        uint8_t FindAddressIndex(uint8_t address = 0) {
 8010604:	b480      	push	{r7}
 8010606:	b085      	sub	sp, #20
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
 801060c:	460b      	mov	r3, r1
 801060e:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 8010610:	2301      	movs	r3, #1
 8010612:	73fb      	strb	r3, [r7, #15]
 8010614:	7bfb      	ldrb	r3, [r7, #15]
 8010616:	2b0f      	cmp	r3, #15
 8010618:	d810      	bhi.n	801063c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x38>
                        if(thePool[i].address.devAddress == address)
 801061a:	7bfa      	ldrb	r2, [r7, #15]
 801061c:	6879      	ldr	r1, [r7, #4]
 801061e:	4613      	mov	r3, r2
 8010620:	00db      	lsls	r3, r3, #3
 8010622:	1a9b      	subs	r3, r3, r2
 8010624:	440b      	add	r3, r1
 8010626:	330c      	adds	r3, #12
 8010628:	781b      	ldrb	r3, [r3, #0]
 801062a:	78fa      	ldrb	r2, [r7, #3]
 801062c:	429a      	cmp	r2, r3
 801062e:	d101      	bne.n	8010634 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x30>
                                return i;
 8010630:	7bfb      	ldrb	r3, [r7, #15]
 8010632:	e004      	b.n	801063e <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x3a>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 8010634:	7bfb      	ldrb	r3, [r7, #15]
 8010636:	3301      	adds	r3, #1
 8010638:	73fb      	strb	r3, [r7, #15]
 801063a:	e7eb      	b.n	8010614 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x10>
                return 0;
 801063c:	2300      	movs	r3, #0
        };
 801063e:	4618      	mov	r0, r3
 8010640:	3714      	adds	r7, #20
 8010642:	46bd      	mov	sp, r7
 8010644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010648:	4770      	bx	lr

0801064a <_ZN8MAX3421eI3P102P9E10IntHandlerEv>:

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
 801064a:	b580      	push	{r7, lr}
 801064c:	b084      	sub	sp, #16
 801064e:	af00      	add	r7, sp, #0
 8010650:	6078      	str	r0, [r7, #4]
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
 8010652:	2300      	movs	r3, #0
 8010654:	73fb      	strb	r3, [r7, #15]
        HIRQ = regRd(rHIRQ); //determine interrupt source
 8010656:	21c8      	movs	r1, #200	; 0xc8
 8010658:	6878      	ldr	r0, [r7, #4]
 801065a:	f7f2 f8ed 	bl	8002838 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801065e:	4603      	mov	r3, r0
 8010660:	73bb      	strb	r3, [r7, #14]
        //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
        //    HIRQ_sendback |= bmFRAMEIRQ;
        //}//end FRAMEIRQ handling
        if(HIRQ & bmCONDETIRQ) {
 8010662:	7bbb      	ldrb	r3, [r7, #14]
 8010664:	f003 0320 	and.w	r3, r3, #32
 8010668:	2b00      	cmp	r3, #0
 801066a:	d006      	beq.n	801067a <_ZN8MAX3421eI3P102P9E10IntHandlerEv+0x30>
                busprobe();
 801066c:	6878      	ldr	r0, [r7, #4]
 801066e:	f7f2 f905 	bl	800287c <_ZN8MAX3421eI3P102P9E8busprobeEv>
                HIRQ_sendback |= bmCONDETIRQ;
 8010672:	7bfb      	ldrb	r3, [r7, #15]
 8010674:	f043 0320 	orr.w	r3, r3, #32
 8010678:	73fb      	strb	r3, [r7, #15]
        }
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        regWr(rHIRQ, HIRQ_sendback);
 801067a:	7bfb      	ldrb	r3, [r7, #15]
 801067c:	461a      	mov	r2, r3
 801067e:	21c8      	movs	r1, #200	; 0xc8
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f7f2 f887 	bl	8002794 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        return ( HIRQ_sendback);
 8010686:	7bfb      	ldrb	r3, [r7, #15]
}
 8010688:	4618      	mov	r0, r3
 801068a:	3710      	adds	r7, #16
 801068c:	46bd      	mov	sp, r7
 801068e:	bd80      	pop	{r7, pc}

08010690 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
        void FreeAddressByIndex(uint8_t index) {
 8010690:	b580      	push	{r7, lr}
 8010692:	b084      	sub	sp, #16
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
 8010698:	460b      	mov	r3, r1
 801069a:	70fb      	strb	r3, [r7, #3]
                if(index == 0)
 801069c:	78fb      	ldrb	r3, [r7, #3]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d03a      	beq.n	8010718 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x88>
                UsbDeviceAddress uda = thePool[index].address;
 80106a2:	78fa      	ldrb	r2, [r7, #3]
 80106a4:	6879      	ldr	r1, [r7, #4]
 80106a6:	4613      	mov	r3, r2
 80106a8:	00db      	lsls	r3, r3, #3
 80106aa:	1a9b      	subs	r3, r3, r2
 80106ac:	440b      	add	r3, r1
 80106ae:	330c      	adds	r3, #12
 80106b0:	781b      	ldrb	r3, [r3, #0]
 80106b2:	733b      	strb	r3, [r7, #12]
                if(uda.bmHub == 1) {
 80106b4:	7b3b      	ldrb	r3, [r7, #12]
 80106b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106ba:	b2db      	uxtb	r3, r3
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d025      	beq.n	801070c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 80106c0:	2301      	movs	r3, #1
 80106c2:	73fb      	strb	r3, [r7, #15]
 80106c4:	7bfb      	ldrb	r3, [r7, #15]
 80106c6:	461a      	mov	r2, r3
 80106c8:	7b39      	ldrb	r1, [r7, #12]
 80106ca:	6878      	ldr	r0, [r7, #4]
 80106cc:	f000 f828 	bl	8010720 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 80106d0:	4603      	mov	r3, r0
 80106d2:	73fb      	strb	r3, [r7, #15]
 80106d4:	7bfb      	ldrb	r3, [r7, #15]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	bf14      	ite	ne
 80106da:	2301      	movne	r3, #1
 80106dc:	2300      	moveq	r3, #0
 80106de:	b2db      	uxtb	r3, r3
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d005      	beq.n	80106f0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x60>
                                FreeAddressByIndex(i);
 80106e4:	7bfb      	ldrb	r3, [r7, #15]
 80106e6:	4619      	mov	r1, r3
 80106e8:	6878      	ldr	r0, [r7, #4]
 80106ea:	f7ff ffd1 	bl	8010690 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 80106ee:	e7e9      	b.n	80106c4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x34>
                        if(hubCounter == uda.bmAddress)
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	79db      	ldrb	r3, [r3, #7]
 80106f4:	7b3a      	ldrb	r2, [r7, #12]
 80106f6:	f3c2 0202 	ubfx	r2, r2, #0, #3
 80106fa:	b2d2      	uxtb	r2, r2
 80106fc:	4293      	cmp	r3, r2
 80106fe:	d105      	bne.n	801070c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                                hubCounter--;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	79db      	ldrb	r3, [r3, #7]
 8010704:	3b01      	subs	r3, #1
 8010706:	b2da      	uxtb	r2, r3
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	71da      	strb	r2, [r3, #7]
                InitEntry(index);
 801070c:	78fb      	ldrb	r3, [r7, #3]
 801070e:	4619      	mov	r1, r3
 8010710:	6878      	ldr	r0, [r7, #4]
 8010712:	f7ff ff2d 	bl	8010570 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 8010716:	e000      	b.n	801071a <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x8a>
                        return;
 8010718:	bf00      	nop
        }
 801071a:	3710      	adds	r7, #16
 801071c:	46bd      	mov	sp, r7
 801071e:	bd80      	pop	{r7, pc}

08010720 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 8010720:	b480      	push	{r7}
 8010722:	b085      	sub	sp, #20
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
 8010728:	7039      	strb	r1, [r7, #0]
 801072a:	4613      	mov	r3, r2
 801072c:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 801072e:	78fb      	ldrb	r3, [r7, #3]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d004      	beq.n	801073e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 8010734:	78fb      	ldrb	r3, [r7, #3]
 8010736:	2b0f      	cmp	r3, #15
 8010738:	d801      	bhi.n	801073e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 801073a:	78fb      	ldrb	r3, [r7, #3]
 801073c:	e000      	b.n	8010740 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x20>
 801073e:	2301      	movs	r3, #1
 8010740:	73fb      	strb	r3, [r7, #15]
 8010742:	7bfb      	ldrb	r3, [r7, #15]
 8010744:	2b0f      	cmp	r3, #15
 8010746:	d816      	bhi.n	8010776 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x56>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 8010748:	7bfa      	ldrb	r2, [r7, #15]
 801074a:	6879      	ldr	r1, [r7, #4]
 801074c:	4613      	mov	r3, r2
 801074e:	00db      	lsls	r3, r3, #3
 8010750:	1a9b      	subs	r3, r3, r2
 8010752:	440b      	add	r3, r1
 8010754:	3308      	adds	r3, #8
 8010756:	791b      	ldrb	r3, [r3, #4]
 8010758:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 801075c:	b2da      	uxtb	r2, r3
 801075e:	783b      	ldrb	r3, [r7, #0]
 8010760:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8010764:	b2db      	uxtb	r3, r3
 8010766:	429a      	cmp	r2, r3
 8010768:	d101      	bne.n	801076e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x4e>
                                return i;
 801076a:	7bfb      	ldrb	r3, [r7, #15]
 801076c:	e004      	b.n	8010778 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x58>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 801076e:	7bfb      	ldrb	r3, [r7, #15]
 8010770:	3301      	adds	r3, #1
 8010772:	73fb      	strb	r3, [r7, #15]
 8010774:	e7e5      	b.n	8010742 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x22>
                return 0;
 8010776:	2300      	movs	r3, #0
        };
 8010778:	4618      	mov	r0, r3
 801077a:	3714      	adds	r7, #20
 801077c:	46bd      	mov	sp, r7
 801077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010782:	4770      	bx	lr

08010784 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 8010784:	b480      	push	{r7}
 8010786:	b085      	sub	sp, #20
 8010788:	af00      	add	r7, sp, #0
 801078a:	60f8      	str	r0, [r7, #12]
 801078c:	60b9      	str	r1, [r7, #8]
 801078e:	607a      	str	r2, [r7, #4]
        if(!pBuf) {
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d101      	bne.n	801079c <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
 8010798:	2300      	movs	r3, #0
 801079a:	e031      	b.n	8010800 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	791b      	ldrb	r3, [r3, #4]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d022      	beq.n	80107ea <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	881b      	ldrh	r3, [r3, #0]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d01e      	beq.n	80107ea <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
                pBuf[valueSize - countDown] = (**pp);
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	681a      	ldr	r2, [r3, #0]
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	68f9      	ldr	r1, [r7, #12]
 80107b6:	7949      	ldrb	r1, [r1, #5]
 80107b8:	4608      	mov	r0, r1
 80107ba:	68f9      	ldr	r1, [r7, #12]
 80107bc:	7909      	ldrb	r1, [r1, #4]
 80107be:	1a41      	subs	r1, r0, r1
 80107c0:	440b      	add	r3, r1
 80107c2:	7812      	ldrb	r2, [r2, #0]
 80107c4:	701a      	strb	r2, [r3, #0]
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	791b      	ldrb	r3, [r3, #4]
 80107ca:	3b01      	subs	r3, #1
 80107cc:	b2da      	uxtb	r2, r3
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	711a      	strb	r2, [r3, #4]
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	881b      	ldrh	r3, [r3, #0]
 80107d6:	3b01      	subs	r3, #1
 80107d8:	b29a      	uxth	r2, r3
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	801a      	strh	r2, [r3, #0]
 80107de:	68bb      	ldr	r3, [r7, #8]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	1c5a      	adds	r2, r3, #1
 80107e4:	68bb      	ldr	r3, [r7, #8]
 80107e6:	601a      	str	r2, [r3, #0]
 80107e8:	e7d8      	b.n	801079c <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>

        if(countDown)
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	791b      	ldrb	r3, [r3, #4]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d001      	beq.n	80107f6 <_ZN20MultiByteValueParser5ParseEPPhPt+0x72>
                return false;
 80107f2:	2300      	movs	r3, #0
 80107f4:	e004      	b.n	8010800 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>

        countDown = valueSize;
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	795a      	ldrb	r2, [r3, #5]
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	711a      	strb	r2, [r3, #4]
        return true;
 80107fe:	2301      	movs	r3, #1
}
 8010800:	4618      	mov	r0, r3
 8010802:	3714      	adds	r7, #20
 8010804:	46bd      	mov	sp, r7
 8010806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080a:	4770      	bx	lr

0801080c <__cxa_pure_virtual>:
 801080c:	b508      	push	{r3, lr}
 801080e:	f000 f80d 	bl	801082c <_ZSt9terminatev>

08010812 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8010812:	b508      	push	{r3, lr}
 8010814:	4780      	blx	r0
 8010816:	f000 f98c 	bl	8010b32 <abort>
	...

0801081c <_ZSt13get_terminatev>:
 801081c:	4b02      	ldr	r3, [pc, #8]	; (8010828 <_ZSt13get_terminatev+0xc>)
 801081e:	6818      	ldr	r0, [r3, #0]
 8010820:	f3bf 8f5b 	dmb	ish
 8010824:	4770      	bx	lr
 8010826:	bf00      	nop
 8010828:	2000016c 	.word	0x2000016c

0801082c <_ZSt9terminatev>:
 801082c:	b508      	push	{r3, lr}
 801082e:	f7ff fff5 	bl	801081c <_ZSt13get_terminatev>
 8010832:	f7ff ffee 	bl	8010812 <_ZN10__cxxabiv111__terminateEPFvvE>

08010836 <atan2f>:
 8010836:	f000 b801 	b.w	801083c <__ieee754_atan2f>
	...

0801083c <__ieee754_atan2f>:
 801083c:	ee10 2a90 	vmov	r2, s1
 8010840:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8010844:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010848:	b510      	push	{r4, lr}
 801084a:	eef0 7a40 	vmov.f32	s15, s0
 801084e:	dc06      	bgt.n	801085e <__ieee754_atan2f+0x22>
 8010850:	ee10 0a10 	vmov	r0, s0
 8010854:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8010858:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801085c:	dd04      	ble.n	8010868 <__ieee754_atan2f+0x2c>
 801085e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8010862:	eeb0 0a67 	vmov.f32	s0, s15
 8010866:	bd10      	pop	{r4, pc}
 8010868:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801086c:	d103      	bne.n	8010876 <__ieee754_atan2f+0x3a>
 801086e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010872:	f000 b883 	b.w	801097c <atanf>
 8010876:	1794      	asrs	r4, r2, #30
 8010878:	f004 0402 	and.w	r4, r4, #2
 801087c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8010880:	b943      	cbnz	r3, 8010894 <__ieee754_atan2f+0x58>
 8010882:	2c02      	cmp	r4, #2
 8010884:	d05e      	beq.n	8010944 <__ieee754_atan2f+0x108>
 8010886:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8010958 <__ieee754_atan2f+0x11c>
 801088a:	2c03      	cmp	r4, #3
 801088c:	bf08      	it	eq
 801088e:	eef0 7a47 	vmoveq.f32	s15, s14
 8010892:	e7e6      	b.n	8010862 <__ieee754_atan2f+0x26>
 8010894:	b941      	cbnz	r1, 80108a8 <__ieee754_atan2f+0x6c>
 8010896:	eddf 7a31 	vldr	s15, [pc, #196]	; 801095c <__ieee754_atan2f+0x120>
 801089a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8010960 <__ieee754_atan2f+0x124>
 801089e:	2800      	cmp	r0, #0
 80108a0:	bfb8      	it	lt
 80108a2:	eef0 7a40 	vmovlt.f32	s15, s0
 80108a6:	e7dc      	b.n	8010862 <__ieee754_atan2f+0x26>
 80108a8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80108ac:	d110      	bne.n	80108d0 <__ieee754_atan2f+0x94>
 80108ae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80108b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80108b6:	d107      	bne.n	80108c8 <__ieee754_atan2f+0x8c>
 80108b8:	2c02      	cmp	r4, #2
 80108ba:	d846      	bhi.n	801094a <__ieee754_atan2f+0x10e>
 80108bc:	4b29      	ldr	r3, [pc, #164]	; (8010964 <__ieee754_atan2f+0x128>)
 80108be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80108c2:	edd4 7a00 	vldr	s15, [r4]
 80108c6:	e7cc      	b.n	8010862 <__ieee754_atan2f+0x26>
 80108c8:	2c02      	cmp	r4, #2
 80108ca:	d841      	bhi.n	8010950 <__ieee754_atan2f+0x114>
 80108cc:	4b26      	ldr	r3, [pc, #152]	; (8010968 <__ieee754_atan2f+0x12c>)
 80108ce:	e7f6      	b.n	80108be <__ieee754_atan2f+0x82>
 80108d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80108d4:	d0df      	beq.n	8010896 <__ieee754_atan2f+0x5a>
 80108d6:	1a5b      	subs	r3, r3, r1
 80108d8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80108dc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80108e0:	da1a      	bge.n	8010918 <__ieee754_atan2f+0xdc>
 80108e2:	2a00      	cmp	r2, #0
 80108e4:	da01      	bge.n	80108ea <__ieee754_atan2f+0xae>
 80108e6:	313c      	adds	r1, #60	; 0x3c
 80108e8:	db19      	blt.n	801091e <__ieee754_atan2f+0xe2>
 80108ea:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80108ee:	f000 f919 	bl	8010b24 <fabsf>
 80108f2:	f000 f843 	bl	801097c <atanf>
 80108f6:	eef0 7a40 	vmov.f32	s15, s0
 80108fa:	2c01      	cmp	r4, #1
 80108fc:	d012      	beq.n	8010924 <__ieee754_atan2f+0xe8>
 80108fe:	2c02      	cmp	r4, #2
 8010900:	d017      	beq.n	8010932 <__ieee754_atan2f+0xf6>
 8010902:	2c00      	cmp	r4, #0
 8010904:	d0ad      	beq.n	8010862 <__ieee754_atan2f+0x26>
 8010906:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801096c <__ieee754_atan2f+0x130>
 801090a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801090e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8010970 <__ieee754_atan2f+0x134>
 8010912:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010916:	e7a4      	b.n	8010862 <__ieee754_atan2f+0x26>
 8010918:	eddf 7a10 	vldr	s15, [pc, #64]	; 801095c <__ieee754_atan2f+0x120>
 801091c:	e7ed      	b.n	80108fa <__ieee754_atan2f+0xbe>
 801091e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8010974 <__ieee754_atan2f+0x138>
 8010922:	e7ea      	b.n	80108fa <__ieee754_atan2f+0xbe>
 8010924:	ee17 3a90 	vmov	r3, s15
 8010928:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801092c:	ee07 3a90 	vmov	s15, r3
 8010930:	e797      	b.n	8010862 <__ieee754_atan2f+0x26>
 8010932:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801096c <__ieee754_atan2f+0x130>
 8010936:	ee77 7a80 	vadd.f32	s15, s15, s0
 801093a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8010970 <__ieee754_atan2f+0x134>
 801093e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010942:	e78e      	b.n	8010862 <__ieee754_atan2f+0x26>
 8010944:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8010970 <__ieee754_atan2f+0x134>
 8010948:	e78b      	b.n	8010862 <__ieee754_atan2f+0x26>
 801094a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8010978 <__ieee754_atan2f+0x13c>
 801094e:	e788      	b.n	8010862 <__ieee754_atan2f+0x26>
 8010950:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010974 <__ieee754_atan2f+0x138>
 8010954:	e785      	b.n	8010862 <__ieee754_atan2f+0x26>
 8010956:	bf00      	nop
 8010958:	c0490fdb 	.word	0xc0490fdb
 801095c:	3fc90fdb 	.word	0x3fc90fdb
 8010960:	bfc90fdb 	.word	0xbfc90fdb
 8010964:	0801106c 	.word	0x0801106c
 8010968:	08011078 	.word	0x08011078
 801096c:	33bbbd2e 	.word	0x33bbbd2e
 8010970:	40490fdb 	.word	0x40490fdb
 8010974:	00000000 	.word	0x00000000
 8010978:	3f490fdb 	.word	0x3f490fdb

0801097c <atanf>:
 801097c:	b538      	push	{r3, r4, r5, lr}
 801097e:	ee10 5a10 	vmov	r5, s0
 8010982:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8010986:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801098a:	eef0 7a40 	vmov.f32	s15, s0
 801098e:	db10      	blt.n	80109b2 <atanf+0x36>
 8010990:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8010994:	dd04      	ble.n	80109a0 <atanf+0x24>
 8010996:	ee70 7a00 	vadd.f32	s15, s0, s0
 801099a:	eeb0 0a67 	vmov.f32	s0, s15
 801099e:	bd38      	pop	{r3, r4, r5, pc}
 80109a0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8010ad8 <atanf+0x15c>
 80109a4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8010adc <atanf+0x160>
 80109a8:	2d00      	cmp	r5, #0
 80109aa:	bfd8      	it	le
 80109ac:	eef0 7a40 	vmovle.f32	s15, s0
 80109b0:	e7f3      	b.n	801099a <atanf+0x1e>
 80109b2:	4b4b      	ldr	r3, [pc, #300]	; (8010ae0 <atanf+0x164>)
 80109b4:	429c      	cmp	r4, r3
 80109b6:	dc10      	bgt.n	80109da <atanf+0x5e>
 80109b8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80109bc:	da0a      	bge.n	80109d4 <atanf+0x58>
 80109be:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8010ae4 <atanf+0x168>
 80109c2:	ee30 7a07 	vadd.f32	s14, s0, s14
 80109c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80109ca:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80109ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109d2:	dce2      	bgt.n	801099a <atanf+0x1e>
 80109d4:	f04f 33ff 	mov.w	r3, #4294967295
 80109d8:	e013      	b.n	8010a02 <atanf+0x86>
 80109da:	f000 f8a3 	bl	8010b24 <fabsf>
 80109de:	4b42      	ldr	r3, [pc, #264]	; (8010ae8 <atanf+0x16c>)
 80109e0:	429c      	cmp	r4, r3
 80109e2:	dc4f      	bgt.n	8010a84 <atanf+0x108>
 80109e4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80109e8:	429c      	cmp	r4, r3
 80109ea:	dc41      	bgt.n	8010a70 <atanf+0xf4>
 80109ec:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80109f0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80109f4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80109f8:	2300      	movs	r3, #0
 80109fa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80109fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010a02:	1c5a      	adds	r2, r3, #1
 8010a04:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8010a08:	eddf 5a38 	vldr	s11, [pc, #224]	; 8010aec <atanf+0x170>
 8010a0c:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8010af0 <atanf+0x174>
 8010a10:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8010af4 <atanf+0x178>
 8010a14:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8010af8 <atanf+0x17c>
 8010a18:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8010a1c:	eea7 6a25 	vfma.f32	s12, s14, s11
 8010a20:	eddf 5a36 	vldr	s11, [pc, #216]	; 8010afc <atanf+0x180>
 8010a24:	eee6 5a07 	vfma.f32	s11, s12, s14
 8010a28:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8010b00 <atanf+0x184>
 8010a2c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8010a30:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010b04 <atanf+0x188>
 8010a34:	eee6 5a07 	vfma.f32	s11, s12, s14
 8010a38:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8010b08 <atanf+0x18c>
 8010a3c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8010a40:	eddf 5a32 	vldr	s11, [pc, #200]	; 8010b0c <atanf+0x190>
 8010a44:	eee7 5a05 	vfma.f32	s11, s14, s10
 8010a48:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8010b10 <atanf+0x194>
 8010a4c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8010a50:	eddf 5a30 	vldr	s11, [pc, #192]	; 8010b14 <atanf+0x198>
 8010a54:	eee5 5a07 	vfma.f32	s11, s10, s14
 8010a58:	eea5 0a87 	vfma.f32	s0, s11, s14
 8010a5c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8010a60:	eea6 0a26 	vfma.f32	s0, s12, s13
 8010a64:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010a68:	d121      	bne.n	8010aae <atanf+0x132>
 8010a6a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010a6e:	e794      	b.n	801099a <atanf+0x1e>
 8010a70:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010a74:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010a78:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010a82:	e7be      	b.n	8010a02 <atanf+0x86>
 8010a84:	4b24      	ldr	r3, [pc, #144]	; (8010b18 <atanf+0x19c>)
 8010a86:	429c      	cmp	r4, r3
 8010a88:	dc0b      	bgt.n	8010aa2 <atanf+0x126>
 8010a8a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8010a8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010a92:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010a96:	2302      	movs	r3, #2
 8010a98:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010a9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010aa0:	e7af      	b.n	8010a02 <atanf+0x86>
 8010aa2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010aa6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010aaa:	2303      	movs	r3, #3
 8010aac:	e7a9      	b.n	8010a02 <atanf+0x86>
 8010aae:	4a1b      	ldr	r2, [pc, #108]	; (8010b1c <atanf+0x1a0>)
 8010ab0:	491b      	ldr	r1, [pc, #108]	; (8010b20 <atanf+0x1a4>)
 8010ab2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010ab6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010aba:	ed93 7a00 	vldr	s14, [r3]
 8010abe:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010ac2:	2d00      	cmp	r5, #0
 8010ac4:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010ac8:	ed92 0a00 	vldr	s0, [r2]
 8010acc:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010ad0:	bfb8      	it	lt
 8010ad2:	eef1 7a67 	vneglt.f32	s15, s15
 8010ad6:	e760      	b.n	801099a <atanf+0x1e>
 8010ad8:	3fc90fdb 	.word	0x3fc90fdb
 8010adc:	bfc90fdb 	.word	0xbfc90fdb
 8010ae0:	3edfffff 	.word	0x3edfffff
 8010ae4:	7149f2ca 	.word	0x7149f2ca
 8010ae8:	3f97ffff 	.word	0x3f97ffff
 8010aec:	3c8569d7 	.word	0x3c8569d7
 8010af0:	3d4bda59 	.word	0x3d4bda59
 8010af4:	bd15a221 	.word	0xbd15a221
 8010af8:	be4ccccd 	.word	0xbe4ccccd
 8010afc:	3d886b35 	.word	0x3d886b35
 8010b00:	3dba2e6e 	.word	0x3dba2e6e
 8010b04:	3e124925 	.word	0x3e124925
 8010b08:	3eaaaaab 	.word	0x3eaaaaab
 8010b0c:	bd6ef16b 	.word	0xbd6ef16b
 8010b10:	bd9d8795 	.word	0xbd9d8795
 8010b14:	bde38e38 	.word	0xbde38e38
 8010b18:	401bffff 	.word	0x401bffff
 8010b1c:	08011084 	.word	0x08011084
 8010b20:	08011094 	.word	0x08011094

08010b24 <fabsf>:
 8010b24:	ee10 3a10 	vmov	r3, s0
 8010b28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010b2c:	ee00 3a10 	vmov	s0, r3
 8010b30:	4770      	bx	lr

08010b32 <abort>:
 8010b32:	b508      	push	{r3, lr}
 8010b34:	2006      	movs	r0, #6
 8010b36:	f000 f86b 	bl	8010c10 <raise>
 8010b3a:	2001      	movs	r0, #1
 8010b3c:	f7f2 f88c 	bl	8002c58 <_exit>

08010b40 <__errno>:
 8010b40:	4b01      	ldr	r3, [pc, #4]	; (8010b48 <__errno+0x8>)
 8010b42:	6818      	ldr	r0, [r3, #0]
 8010b44:	4770      	bx	lr
 8010b46:	bf00      	nop
 8010b48:	20000170 	.word	0x20000170

08010b4c <__libc_init_array>:
 8010b4c:	b570      	push	{r4, r5, r6, lr}
 8010b4e:	4d0d      	ldr	r5, [pc, #52]	; (8010b84 <__libc_init_array+0x38>)
 8010b50:	4c0d      	ldr	r4, [pc, #52]	; (8010b88 <__libc_init_array+0x3c>)
 8010b52:	1b64      	subs	r4, r4, r5
 8010b54:	10a4      	asrs	r4, r4, #2
 8010b56:	2600      	movs	r6, #0
 8010b58:	42a6      	cmp	r6, r4
 8010b5a:	d109      	bne.n	8010b70 <__libc_init_array+0x24>
 8010b5c:	4d0b      	ldr	r5, [pc, #44]	; (8010b8c <__libc_init_array+0x40>)
 8010b5e:	4c0c      	ldr	r4, [pc, #48]	; (8010b90 <__libc_init_array+0x44>)
 8010b60:	f000 f884 	bl	8010c6c <_init>
 8010b64:	1b64      	subs	r4, r4, r5
 8010b66:	10a4      	asrs	r4, r4, #2
 8010b68:	2600      	movs	r6, #0
 8010b6a:	42a6      	cmp	r6, r4
 8010b6c:	d105      	bne.n	8010b7a <__libc_init_array+0x2e>
 8010b6e:	bd70      	pop	{r4, r5, r6, pc}
 8010b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b74:	4798      	blx	r3
 8010b76:	3601      	adds	r6, #1
 8010b78:	e7ee      	b.n	8010b58 <__libc_init_array+0xc>
 8010b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b7e:	4798      	blx	r3
 8010b80:	3601      	adds	r6, #1
 8010b82:	e7f2      	b.n	8010b6a <__libc_init_array+0x1e>
 8010b84:	0801110c 	.word	0x0801110c
 8010b88:	0801110c 	.word	0x0801110c
 8010b8c:	0801110c 	.word	0x0801110c
 8010b90:	08011114 	.word	0x08011114

08010b94 <memcpy>:
 8010b94:	440a      	add	r2, r1
 8010b96:	4291      	cmp	r1, r2
 8010b98:	f100 33ff 	add.w	r3, r0, #4294967295
 8010b9c:	d100      	bne.n	8010ba0 <memcpy+0xc>
 8010b9e:	4770      	bx	lr
 8010ba0:	b510      	push	{r4, lr}
 8010ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010ba6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010baa:	4291      	cmp	r1, r2
 8010bac:	d1f9      	bne.n	8010ba2 <memcpy+0xe>
 8010bae:	bd10      	pop	{r4, pc}

08010bb0 <memset>:
 8010bb0:	4402      	add	r2, r0
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	4293      	cmp	r3, r2
 8010bb6:	d100      	bne.n	8010bba <memset+0xa>
 8010bb8:	4770      	bx	lr
 8010bba:	f803 1b01 	strb.w	r1, [r3], #1
 8010bbe:	e7f9      	b.n	8010bb4 <memset+0x4>

08010bc0 <_raise_r>:
 8010bc0:	291f      	cmp	r1, #31
 8010bc2:	b538      	push	{r3, r4, r5, lr}
 8010bc4:	4604      	mov	r4, r0
 8010bc6:	460d      	mov	r5, r1
 8010bc8:	d904      	bls.n	8010bd4 <_raise_r+0x14>
 8010bca:	2316      	movs	r3, #22
 8010bcc:	6003      	str	r3, [r0, #0]
 8010bce:	f04f 30ff 	mov.w	r0, #4294967295
 8010bd2:	bd38      	pop	{r3, r4, r5, pc}
 8010bd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010bd6:	b112      	cbz	r2, 8010bde <_raise_r+0x1e>
 8010bd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010bdc:	b94b      	cbnz	r3, 8010bf2 <_raise_r+0x32>
 8010bde:	4620      	mov	r0, r4
 8010be0:	f000 f830 	bl	8010c44 <_getpid_r>
 8010be4:	462a      	mov	r2, r5
 8010be6:	4601      	mov	r1, r0
 8010be8:	4620      	mov	r0, r4
 8010bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010bee:	f000 b817 	b.w	8010c20 <_kill_r>
 8010bf2:	2b01      	cmp	r3, #1
 8010bf4:	d00a      	beq.n	8010c0c <_raise_r+0x4c>
 8010bf6:	1c59      	adds	r1, r3, #1
 8010bf8:	d103      	bne.n	8010c02 <_raise_r+0x42>
 8010bfa:	2316      	movs	r3, #22
 8010bfc:	6003      	str	r3, [r0, #0]
 8010bfe:	2001      	movs	r0, #1
 8010c00:	e7e7      	b.n	8010bd2 <_raise_r+0x12>
 8010c02:	2400      	movs	r4, #0
 8010c04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010c08:	4628      	mov	r0, r5
 8010c0a:	4798      	blx	r3
 8010c0c:	2000      	movs	r0, #0
 8010c0e:	e7e0      	b.n	8010bd2 <_raise_r+0x12>

08010c10 <raise>:
 8010c10:	4b02      	ldr	r3, [pc, #8]	; (8010c1c <raise+0xc>)
 8010c12:	4601      	mov	r1, r0
 8010c14:	6818      	ldr	r0, [r3, #0]
 8010c16:	f7ff bfd3 	b.w	8010bc0 <_raise_r>
 8010c1a:	bf00      	nop
 8010c1c:	20000170 	.word	0x20000170

08010c20 <_kill_r>:
 8010c20:	b538      	push	{r3, r4, r5, lr}
 8010c22:	4d07      	ldr	r5, [pc, #28]	; (8010c40 <_kill_r+0x20>)
 8010c24:	2300      	movs	r3, #0
 8010c26:	4604      	mov	r4, r0
 8010c28:	4608      	mov	r0, r1
 8010c2a:	4611      	mov	r1, r2
 8010c2c:	602b      	str	r3, [r5, #0]
 8010c2e:	f7f2 f803 	bl	8002c38 <_kill>
 8010c32:	1c43      	adds	r3, r0, #1
 8010c34:	d102      	bne.n	8010c3c <_kill_r+0x1c>
 8010c36:	682b      	ldr	r3, [r5, #0]
 8010c38:	b103      	cbz	r3, 8010c3c <_kill_r+0x1c>
 8010c3a:	6023      	str	r3, [r4, #0]
 8010c3c:	bd38      	pop	{r3, r4, r5, pc}
 8010c3e:	bf00      	nop
 8010c40:	20000f48 	.word	0x20000f48

08010c44 <_getpid_r>:
 8010c44:	f7f1 bff0 	b.w	8002c28 <_getpid>

08010c48 <strncmp>:
 8010c48:	b510      	push	{r4, lr}
 8010c4a:	b16a      	cbz	r2, 8010c68 <strncmp+0x20>
 8010c4c:	3901      	subs	r1, #1
 8010c4e:	1884      	adds	r4, r0, r2
 8010c50:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010c54:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010c58:	4293      	cmp	r3, r2
 8010c5a:	d103      	bne.n	8010c64 <strncmp+0x1c>
 8010c5c:	42a0      	cmp	r0, r4
 8010c5e:	d001      	beq.n	8010c64 <strncmp+0x1c>
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d1f5      	bne.n	8010c50 <strncmp+0x8>
 8010c64:	1a98      	subs	r0, r3, r2
 8010c66:	bd10      	pop	{r4, pc}
 8010c68:	4610      	mov	r0, r2
 8010c6a:	e7fc      	b.n	8010c66 <strncmp+0x1e>

08010c6c <_init>:
 8010c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c6e:	bf00      	nop
 8010c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c72:	bc08      	pop	{r3}
 8010c74:	469e      	mov	lr, r3
 8010c76:	4770      	bx	lr

08010c78 <_fini>:
 8010c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c7a:	bf00      	nop
 8010c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c7e:	bc08      	pop	{r3}
 8010c80:	469e      	mov	lr, r3
 8010c82:	4770      	bx	lr
