
xbox_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012408  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  080125d8  080125d8  000225d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012a1c  08012a1c  000301a4  2**0
                  CONTENTS
  4 .ARM          00000008  08012a1c  08012a1c  00022a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012a24  08012a24  000301a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012a24  08012a24  00022a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012a2c  08012a2c  00022a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  08012a30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000057b0  200001a4  08012bd4  000301a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005954  08012bd4  00035954  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005d43f  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000086ae  00000000  00000000  0008d613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002518  00000000  00000000  00095cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002348  00000000  00000000  000981e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c2e4  00000000  00000000  0009a528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c1b0  00000000  00000000  000c680c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f577f  00000000  00000000  000f29bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e813b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1b0  00000000  00000000  001e8190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001a4 	.word	0x200001a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080125c0 	.word	0x080125c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001a8 	.word	0x200001a8
 800020c:	080125c0 	.word	0x080125c0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d101      	bne.n	800052c <_ZN5Print5writeEPKc+0x14>
 8000528:	2300      	movs	r3, #0
 800052a:	e00d      	b.n	8000548 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	3304      	adds	r3, #4
 8000532:	681c      	ldr	r4, [r3, #0]
 8000534:	6838      	ldr	r0, [r7, #0]
 8000536:	f7ff fe6b 	bl	8000210 <strlen>
 800053a:	4603      	mov	r3, r0
 800053c:	461a      	mov	r2, r3
 800053e:	6839      	ldr	r1, [r7, #0]
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	47a0      	blx	r4
 8000544:	4603      	mov	r3, r0
 8000546:	bf00      	nop
    }
 8000548:	4618      	mov	r0, r3
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bd90      	pop	{r4, r7, pc}

08000550 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	1e5a      	subs	r2, r3, #1
 8000564:	607a      	str	r2, [r7, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	bf14      	ite	ne
 800056a:	2301      	movne	r3, #1
 800056c:	2300      	moveq	r3, #0
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00e      	beq.n	8000592 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	1c59      	adds	r1, r3, #1
 800057e:	60b9      	str	r1, [r7, #8]
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	4619      	mov	r1, r3
 8000584:	68f8      	ldr	r0, [r7, #12]
 8000586:	4790      	blx	r2
 8000588:	4602      	mov	r2, r0
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	4413      	add	r3, r2
 800058e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000590:	e7e6      	b.n	8000560 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8000592:	697b      	ldr	r3, [r7, #20]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3718      	adds	r7, #24
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 80005a6:	6839      	ldr	r1, [r7, #0]
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f000 f805 	bl	80005b8 <_ZN5Print5printEPKc>
 80005ae:	4603      	mov	r3, r0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
  return write(str);
 80005c2:	6839      	ldr	r1, [r7, #0]
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff ffa7 	bl	8000518 <_ZN5Print5writeEPKc>
 80005ca:	4603      	mov	r3, r0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	70fb      	strb	r3, [r7, #3]
  return write(c);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	78fa      	ldrb	r2, [r7, #3]
 80005e8:	4611      	mov	r1, r2
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	4798      	blx	r3
 80005ee:	4603      	mov	r3, r0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	68b9      	ldr	r1, [r7, #8]
 8000608:	68f8      	ldr	r0, [r7, #12]
 800060a:	f000 f805 	bl	8000618 <_ZN5Print5printEli>
 800060e:	4603      	mov	r3, r0
}
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d109      	bne.n	800063e <_ZN5Print5printEli+0x26>
    return write(n);
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	b2d2      	uxtb	r2, r2
 8000634:	4611      	mov	r1, r2
 8000636:	68f8      	ldr	r0, [r7, #12]
 8000638:	4798      	blx	r3
 800063a:	4603      	mov	r3, r0
 800063c:	e029      	b.n	8000692 <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b0a      	cmp	r3, #10
 8000642:	d11d      	bne.n	8000680 <_ZN5Print5printEli+0x68>
    if (n < 0) {
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	2b00      	cmp	r3, #0
 8000648:	da12      	bge.n	8000670 <_ZN5Print5printEli+0x58>
      int t = print('-');
 800064a:	212d      	movs	r1, #45	; 0x2d
 800064c:	68f8      	ldr	r0, [r7, #12]
 800064e:	f7ff ffc1 	bl	80005d4 <_ZN5Print5printEc>
 8000652:	4603      	mov	r3, r0
 8000654:	617b      	str	r3, [r7, #20]
      n = -n;
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	425b      	negs	r3, r3
 800065a:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	220a      	movs	r2, #10
 8000660:	4619      	mov	r1, r3
 8000662:	68f8      	ldr	r0, [r7, #12]
 8000664:	f000 f819 	bl	800069a <_ZN5Print11printNumberEmh>
 8000668:	4602      	mov	r2, r0
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	4413      	add	r3, r2
 800066e:	e010      	b.n	8000692 <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	220a      	movs	r2, #10
 8000674:	4619      	mov	r1, r3
 8000676:	68f8      	ldr	r0, [r7, #12]
 8000678:	f000 f80f 	bl	800069a <_ZN5Print11printNumberEmh>
 800067c:	4603      	mov	r3, r0
 800067e:	e008      	b.n	8000692 <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	4619      	mov	r1, r3
 8000688:	68f8      	ldr	r0, [r7, #12]
 800068a:	f000 f806 	bl	800069a <_ZN5Print11printNumberEmh>
 800068e:	4603      	mov	r3, r0
 8000690:	bf00      	nop
  }
}
 8000692:	4618      	mov	r0, r3
 8000694:	3718      	adds	r7, #24
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 800069a:	b580      	push	{r7, lr}
 800069c:	b090      	sub	sp, #64	; 0x40
 800069e:	af00      	add	r7, sp, #0
 80006a0:	60f8      	str	r0, [r7, #12]
 80006a2:	60b9      	str	r1, [r7, #8]
 80006a4:	4613      	mov	r3, r2
 80006a6:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	3320      	adds	r3, #32
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 80006b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d801      	bhi.n	80006c0 <_ZN5Print11printNumberEmh+0x26>
 80006bc:	230a      	movs	r3, #10
 80006be:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006cc:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 80006ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	79f9      	ldrb	r1, [r7, #7]
 80006d8:	fb11 f303 	smulbb	r3, r1, r3
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80006e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d804      	bhi.n	80006f6 <_ZN5Print11printNumberEmh+0x5c>
 80006ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006f0:	3330      	adds	r3, #48	; 0x30
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	e003      	b.n	80006fe <_ZN5Print11printNumberEmh+0x64>
 80006f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006fa:	3337      	adds	r3, #55	; 0x37
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000700:	3a01      	subs	r2, #1
 8000702:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000704:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000706:	7013      	strb	r3, [r2, #0]
  } while(n);
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d000      	beq.n	8000710 <_ZN5Print11printNumberEmh+0x76>
  do {
 800070e:	e7d7      	b.n	80006c0 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 8000710:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000712:	68f8      	ldr	r0, [r7, #12]
 8000714:	f7ff ff00 	bl	8000518 <_ZN5Print5writeEPKc>
 8000718:	4603      	mov	r3, r0
}
 800071a:	4618      	mov	r0, r3
 800071c:	3740      	adds	r7, #64	; 0x40
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <_ZN11SerialClass5writeEh>:
#include "SerialClass.h"

size_t SerialClass::write(uint8_t data) {
 8000722:	b580      	push	{r7, lr}
 8000724:	b082      	sub	sp, #8
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	460b      	mov	r3, r1
 800072c:	70fb      	strb	r3, [r7, #3]
	return write(&data, 1);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	3304      	adds	r3, #4
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	1cf9      	adds	r1, r7, #3
 8000738:	2201      	movs	r2, #1
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	4798      	blx	r3
 800073e:	4603      	mov	r3, r0
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <_ZN11SerialClass5writeEPKhj>:

size_t SerialClass::write(const uint8_t *buffer, size_t size) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
	uint8_t *pBuffer = (uint8_t*)buffer;
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(pUART_Handle, pBuffer, size, HAL_MAX_DELAY);
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	6918      	ldr	r0, [r3, #16]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	b29a      	uxth	r2, r3
 8000760:	f04f 33ff 	mov.w	r3, #4294967295
 8000764:	6979      	ldr	r1, [r7, #20]
 8000766:	f005 f95c 	bl	8005a22 <HAL_UART_Transmit>
	return size;
 800076a:	687b      	ldr	r3, [r7, #4]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3718      	adds	r7, #24
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <_ZN11SerialClass4readEv>:

int SerialClass::read() {
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	uint8_t data;
	HAL_UART_Receive(pUART_Handle, &data, 1, HAL_MAX_DELAY);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6918      	ldr	r0, [r3, #16]
 8000780:	f107 010f 	add.w	r1, r7, #15
 8000784:	f04f 33ff 	mov.w	r3, #4294967295
 8000788:	2201      	movs	r2, #1
 800078a:	f005 f9dc 	bl	8005b46 <HAL_UART_Receive>
	return data;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <_ZN11SerialClass9availableEv>:

int SerialClass::available() {
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	return -1;
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <_ZN11SerialClass4peekEv>:

int SerialClass::peek() {
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	return -1;
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007bc:	4618      	mov	r0, r3
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <_ZN11SerialClass5flushEv>:

void SerialClass::flush() {
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	4a06      	ldr	r2, [pc, #24]	; (8000800 <_ZN5PrintC1Ev+0x24>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2200      	movs	r2, #0
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4618      	mov	r0, r3
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	080127ac 	.word	0x080127ac

08000804 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ffe4 	bl	80007dc <_ZN5PrintC1Ev>
 8000814:	4a05      	ldr	r2, [pc, #20]	; (800082c <_ZN6StreamC1Ev+0x28>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4618      	mov	r0, r3
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	0801286c 	.word	0x0801286c

08000830 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>:
#include "Stream.h"
#include "stm32f4xx_hal.h"

class SerialClass : public Stream {
public:
	SerialClass(UART_HandleTypeDef *UART_Handle) : pUART_Handle(UART_Handle) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ffe1 	bl	8000804 <_ZN6StreamC1Ev>
 8000842:	4a05      	ldr	r2, [pc, #20]	; (8000858 <_ZN11SerialClassC1EP20__UART_HandleTypeDef+0x28>)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	683a      	ldr	r2, [r7, #0]
 800084c:	611a      	str	r2, [r3, #16]
	};
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	080127bc 	.word	0x080127bc

0800085c <_ZN2P910SetDirReadEv>:
MAKE_PIN(P4, GPIOB, GPIO_PIN_5); // D4
MAKE_PIN(P5, GPIOB, GPIO_PIN_4); // D5
MAKE_PIN(P6, GPIOB, GPIO_PIN_10); // D6
MAKE_PIN(P7, GPIOA, GPIO_PIN_8); // D7
MAKE_PIN(P8, GPIOA, GPIO_PIN_9); // D8
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <_ZN2P910SetDirReadEv+0x24>)
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <_ZN2P910SetDirReadEv+0x24>)
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <_ZN2P910SetDirReadEv+0x24>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	4903      	ldr	r1, [pc, #12]	; (8000880 <_ZN2P910SetDirReadEv+0x24>)
 8000874:	4803      	ldr	r0, [pc, #12]	; (8000884 <_ZN2P910SetDirReadEv+0x28>)
 8000876:	f001 fbf9 	bl	800206c <HAL_GPIO_Init>
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200001c0 	.word	0x200001c0
 8000884:	40020800 	.word	0x40020800

08000888 <_ZN3P103SetEv>:
MAKE_PIN(P10, GPIOB, GPIO_PIN_6); // D10
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
 800088c:	2201      	movs	r2, #1
 800088e:	2140      	movs	r1, #64	; 0x40
 8000890:	4802      	ldr	r0, [pc, #8]	; (800089c <_ZN3P103SetEv+0x14>)
 8000892:	f001 fd97 	bl	80023c4 <HAL_GPIO_WritePin>
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40020400 	.word	0x40020400

080008a0 <_ZN3P105ClearEv>:
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	2200      	movs	r2, #0
 80008a6:	2140      	movs	r1, #64	; 0x40
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <_ZN3P105ClearEv+0x14>)
 80008aa:	f001 fd8b 	bl	80023c4 <HAL_GPIO_WritePin>
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40020400 	.word	0x40020400

080008b8 <_ZN3P1011SetDirWriteEv>:
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008be:	2240      	movs	r2, #64	; 0x40
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008d0:	2203      	movs	r2, #3
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	4902      	ldr	r1, [pc, #8]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008d6:	4803      	ldr	r0, [pc, #12]	; (80008e4 <_ZN3P1011SetDirWriteEv+0x2c>)
 80008d8:	f001 fbc8 	bl	800206c <HAL_GPIO_Init>
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	200001d4 	.word	0x200001d4
 80008e4:	40020400 	.word	0x40020400

080008e8 <_ZN3BTD11pairWithHIDEv>:
        bool motionPlusInside;
        /** True if it's a Wii U Pro Controller. */
        bool wiiUProController;

        /** Call this function to pair with a HID device */
        void pairWithHID() {
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
                waitingForConnection = false;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2200      	movs	r2, #0
 80008f4:	721a      	strb	r2, [r3, #8]
                pairWithHIDDevice = true;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2201      	movs	r2, #1
 80008fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                hci_state = HCI_CHECK_DEVICE_SERVICE;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2206      	movs	r2, #6
 8000902:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        };
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <_ZN5BTHID4pairEv>:

        /** True if a device is connected */
        bool connected;

        /** Call this to start the pairing sequence with a device */
        void pair(void) {
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
                if(pBtd)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d004      	beq.n	800092c <_ZN5BTHID4pairEv+0x1a>
                        pBtd->pairWithHID();
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff ffde 	bl	80008e8 <_ZN3BTD11pairWithHIDEv>
        };
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <_ZN5BTHID6onInitEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        void onInit() {
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
                if(pFuncOnInit)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d002      	beq.n	800094a <_ZN5BTHID6onInitEv+0x16>
                        pFuncOnInit(); // Call the user function
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	4798      	blx	r3
                OnInitBTHID();
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	331c      	adds	r3, #28
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	4798      	blx	r3
        };
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <_ZN5BTHID21ParseBTHIDControlDataEhPh>:
        };
        /**
         * Same as ParseBTHIDData for reports that are sent through the
         * interrupt pipe (in response to a GET_REPORT).
         */
        virtual void ParseBTHIDControlData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 800095e:	b480      	push	{r7}
 8000960:	b085      	sub	sp, #20
 8000962:	af00      	add	r7, sp, #0
 8000964:	60f8      	str	r0, [r7, #12]
 8000966:	460b      	mov	r3, r1
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	72fb      	strb	r3, [r7, #11]
                return;
 800096c:	bf00      	nop
        }
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <_ZN9PS4ParserC1Ev>:

/** This class parses all the data sent by the PS4 controller */
class PS4Parser {
public:
        /** Constructor for the PS4Parser class. */
        PS4Parser() {
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	4a05      	ldr	r2, [pc, #20]	; (8000998 <_ZN9PS4ParserC1Ev+0x20>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	601a      	str	r2, [r3, #0]
                Reset();
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f00f fffc 	bl	8010984 <_ZN9PS4Parser5ResetEv>
        };
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	08012860 	.word	0x08012860

0800099c <_ZN9PS4Parser6setLedEhhh>:

        /**
         * Use this to set the color using RGB values.
         * @param r,g,b RGB value.
         */
        void setLed(uint8_t r, uint8_t g, uint8_t b) {
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	4608      	mov	r0, r1
 80009a6:	4611      	mov	r1, r2
 80009a8:	461a      	mov	r2, r3
 80009aa:	4603      	mov	r3, r0
 80009ac:	70fb      	strb	r3, [r7, #3]
 80009ae:	460b      	mov	r3, r1
 80009b0:	70bb      	strb	r3, [r7, #2]
 80009b2:	4613      	mov	r3, r2
 80009b4:	707b      	strb	r3, [r7, #1]
                ps4Output.r = r;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	78fa      	ldrb	r2, [r7, #3]
 80009ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                ps4Output.g = g;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	78ba      	ldrb	r2, [r7, #2]
 80009c2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                ps4Output.b = b;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	787a      	ldrb	r2, [r7, #1]
 80009ca:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                ps4Output.reportChanged = true;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2201      	movs	r2, #1
 80009d2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <_ZN9PS4Parser6setLedE10ColorsEnum>:

        /**
         * Use this to set the color using the predefined colors in ::ColorsEnum.
         * @param color The desired color.
         */
        void setLed(ColorsEnum color) {
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	6039      	str	r1, [r7, #0]
                setLed((uint8_t)(color >> 16), (uint8_t)(color >> 8), (uint8_t)(color));
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	141b      	asrs	r3, r3, #16
 80009f0:	b2d9      	uxtb	r1, r3
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	121b      	asrs	r3, r3, #8
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ffcd 	bl	800099c <_ZN9PS4Parser6setLedEhhh>
        };
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <_ZN5PS4BTC1EP3BTDbPKc>:
         * Constructor for the PS4BT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         * @param  pin   Write the pin to BTD#btdPin. If argument is omitted, then "0000" will be used.
         */
        PS4BT(BTD *p, bool pair = false, const char *pin = "0000") :
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair, pin) {
 8000a1c:	68f8      	ldr	r0, [r7, #12]
 8000a1e:	79fa      	ldrb	r2, [r7, #7]
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	68b9      	ldr	r1, [r7, #8]
 8000a24:	f00e fdc8 	bl	800f5b8 <_ZN5BTHIDC1EP3BTDbPKc>
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	3378      	adds	r3, #120	; 0x78
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ffa3 	bl	8000978 <_ZN9PS4ParserC1Ev>
 8000a32:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <_ZN5PS4BTC1EP3BTDbPKc+0x48>)
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <_ZN5PS4BTC1EP3BTDbPKc+0x4c>)
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	679a      	str	r2, [r3, #120]	; 0x78
                PS4Parser::Reset();
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	3378      	adds	r3, #120	; 0x78
 8000a42:	4618      	mov	r0, r3
 8000a44:	f00f ff9e 	bl	8010984 <_ZN9PS4Parser5ResetEv>
        };
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	08012824 	.word	0x08012824
 8000a58:	08012854 	.word	0x08012854

08000a5c <_ZN5PS4BT9connectedEv>:

        /**
         * Used to check if a PS4 controller is connected.
         * @return Returns true if it is connected.
         */
        bool connected() {
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
                return BTHID::connected;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	7d5b      	ldrb	r3, [r3, #21]
        };
 8000a68:	4618      	mov	r0, r3
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <_ZN5PS4BT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	607a      	str	r2, [r7, #4]
 8000a80:	72fb      	strb	r3, [r7, #11]
                PS4Parser::Parse(len, buf);
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	3378      	adds	r3, #120	; 0x78
 8000a86:	7af9      	ldrb	r1, [r7, #11]
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f00f feb5 	bl	80107fa <_ZN9PS4Parser5ParseEhPh>
        };
 8000a90:	bf00      	nop
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <_ZN5PS4BT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3378      	adds	r3, #120	; 0x78
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f00f ff6d 	bl	8010984 <_ZN9PS4Parser5ResetEv>
                enable_sixaxis(); // Make the controller send out the entire output report
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f000 f855 	bl	8000b5a <_ZN5PS4BT14enable_sixaxisEv>
                if (!pFuncOnInit)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d105      	bne.n	8000ac4 <_ZN5PS4BT11OnInitBTHIDEv+0x2c>
                        setLed(Blue); // Only call this is a user function has not been set
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3378      	adds	r3, #120	; 0x78
 8000abc:	21ff      	movs	r1, #255	; 0xff
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ff8f 	bl	80009e2 <_ZN9PS4Parser6setLedE10ColorsEnum>
        };
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <_ZN5PS4BT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3378      	adds	r3, #120	; 0x78
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f00f ff53 	bl	8010984 <_ZN9PS4Parser5ResetEv>
        };
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <_ZN5PS4BT16sendOutputReportEP9PS4Output>:
        /**@}*/

        /** @name PS4Parser implementation */
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b096      	sub	sp, #88	; 0x58
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
                uint8_t buf[79];
                memset(buf, 0, sizeof(buf));
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	224f      	movs	r2, #79	; 0x4f
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f011 fd03 	bl	8012504 <memset>

                buf[0] = 0x52; // HID BT Set_report (0x50) | Report Type (Output 0x02)
 8000afe:	2352      	movs	r3, #82	; 0x52
 8000b00:	723b      	strb	r3, [r7, #8]
                buf[1] = 0x11; // Report ID
 8000b02:	2311      	movs	r3, #17
 8000b04:	727b      	strb	r3, [r7, #9]
                buf[2] = 0x80;
 8000b06:	2380      	movs	r3, #128	; 0x80
 8000b08:	72bb      	strb	r3, [r7, #10]
                buf[4]= 0xFF;
 8000b0a:	23ff      	movs	r3, #255	; 0xff
 8000b0c:	733b      	strb	r3, [r7, #12]

                buf[7] = output->smallRumble; // Small Rumble
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	785b      	ldrb	r3, [r3, #1]
 8000b12:	73fb      	strb	r3, [r7, #15]
                buf[8] = output->bigRumble; // Big rumble
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	743b      	strb	r3, [r7, #16]

                buf[9] = output->r; // Red
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	789b      	ldrb	r3, [r3, #2]
 8000b1e:	747b      	strb	r3, [r7, #17]
                buf[10] = output->g; // Green
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	78db      	ldrb	r3, [r3, #3]
 8000b24:	74bb      	strb	r3, [r7, #18]
                buf[11] = output->b; // Blue
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	791b      	ldrb	r3, [r3, #4]
 8000b2a:	74fb      	strb	r3, [r7, #19]

                buf[12] = output->flashOn; // Time to flash bright (255 = 2.5 seconds)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	795b      	ldrb	r3, [r3, #5]
 8000b30:	753b      	strb	r3, [r7, #20]
                buf[13] = output->flashOff; // Time to flash dark (255 = 2.5 seconds)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	799b      	ldrb	r3, [r3, #6]
 8000b36:	757b      	strb	r3, [r7, #21]

                output->reportChanged = false;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	71da      	strb	r2, [r3, #7]

                // The PS4 console actually set the four last bytes to a CRC32 checksum, but it seems like it is actually not needed

                HID_Command(buf, sizeof(buf));
 8000b3e:	f107 0308 	add.w	r3, r7, #8
 8000b42:	224f      	movs	r2, #79	; 0x4f
 8000b44:	4619      	mov	r1, r3
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f000 f81a 	bl	8000b80 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000b4c:	bf00      	nop
 8000b4e:	3758      	adds	r7, #88	; 0x58
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <_ZThn120_N5PS4BT16sendOutputReportEP9PS4Output>:
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000b54:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 8000b58:	e7c5      	b.n	8000ae6 <_ZN5PS4BT16sendOutputReportEP9PS4Output>

08000b5a <_ZN5PS4BT14enable_sixaxisEv>:
        /**@}*/

private:
        void enable_sixaxis() { // Command used to make the PS4 controller send out the entire output report
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b084      	sub	sp, #16
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
                uint8_t buf[2];
                buf[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
 8000b62:	2343      	movs	r3, #67	; 0x43
 8000b64:	733b      	strb	r3, [r7, #12]
                buf[1] = 0x02; // Report ID
 8000b66:	2302      	movs	r3, #2
 8000b68:	737b      	strb	r3, [r7, #13]

                HID_Command(buf, 2);
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	2202      	movs	r2, #2
 8000b70:	4619      	mov	r1, r3
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f000 f804 	bl	8000b80 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <_ZN5PS4BT11HID_CommandEPhh>:

        void HID_Command(uint8_t *data, uint8_t nbytes) {
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b087      	sub	sp, #28
 8000b84:	af02      	add	r7, sp, #8
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	71fb      	strb	r3, [r7, #7]
                pBtd->L2CAP_Command(hci_handle, data, nbytes, control_scid[0], control_scid[1]);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	6898      	ldr	r0, [r3, #8]
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	8999      	ldrh	r1, [r3, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	7d9b      	ldrb	r3, [r3, #22]
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	7dd2      	ldrb	r2, [r2, #23]
 8000b9e:	79fc      	ldrb	r4, [r7, #7]
 8000ba0:	9201      	str	r2, [sp, #4]
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	4623      	mov	r3, r4
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	f00d fda2 	bl	800e6f0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
        };
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd90      	pop	{r4, r7, pc}

08000bb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb8:	f001 f910 	bl	8001ddc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bbc:	f000 f8ac 	bl	8000d18 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc0:	f000 f9d6 	bl	8000f70 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000bc4:	f000 f9a6 	bl	8000f14 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8000bc8:	f000 f968 	bl	8000e9c <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8000bcc:	f00a fede 	bl	800b98c <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 8000bd0:	f000 f93a 	bl	8000e48 <_ZL13MX_TIM14_Initv>
  //MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
  SPI_Handle = hspi1;
 8000bd4:	4a39      	ldr	r2, [pc, #228]	; (8000cbc <main+0x108>)
 8000bd6:	4b3a      	ldr	r3, [pc, #232]	; (8000cc0 <main+0x10c>)
 8000bd8:	4610      	mov	r0, r2
 8000bda:	4619      	mov	r1, r3
 8000bdc:	2358      	movs	r3, #88	; 0x58
 8000bde:	461a      	mov	r2, r3
 8000be0:	f011 fc82 	bl	80124e8 <memcpy>
  UART_Handle = huart2;
 8000be4:	4a37      	ldr	r2, [pc, #220]	; (8000cc4 <main+0x110>)
 8000be6:	4b38      	ldr	r3, [pc, #224]	; (8000cc8 <main+0x114>)
 8000be8:	4610      	mov	r0, r2
 8000bea:	4619      	mov	r1, r3
 8000bec:	2344      	movs	r3, #68	; 0x44
 8000bee:	461a      	mov	r2, r3
 8000bf0:	f011 fc7a 	bl	80124e8 <memcpy>



  HAL_TIM_Base_Start_IT(&htim14);
 8000bf4:	4835      	ldr	r0, [pc, #212]	; (8000ccc <main+0x118>)
 8000bf6:	f004 fc73 	bl	80054e0 <HAL_TIM_Base_Start_IT>
//  uint8_t L2_val;
//  uint8_t R2_val;
  Serial.print(F("\r\nCPU Frequency is: "));
 8000bfa:	4935      	ldr	r1, [pc, #212]	; (8000cd0 <main+0x11c>)
 8000bfc:	4835      	ldr	r0, [pc, #212]	; (8000cd4 <main+0x120>)
 8000bfe:	f7ff fccd 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
  cpu_freq = HAL_RCC_GetHCLKFreq()/1000000;
 8000c02:	f002 fe95 	bl	8003930 <HAL_RCC_GetHCLKFreq>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4a33      	ldr	r2, [pc, #204]	; (8000cd8 <main+0x124>)
 8000c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0e:	0c9b      	lsrs	r3, r3, #18
 8000c10:	4a32      	ldr	r2, [pc, #200]	; (8000cdc <main+0x128>)
 8000c12:	6013      	str	r3, [r2, #0]
  Serial.print((int)cpu_freq);
 8000c14:	4b31      	ldr	r3, [pc, #196]	; (8000cdc <main+0x128>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	220a      	movs	r2, #10
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	482d      	ldr	r0, [pc, #180]	; (8000cd4 <main+0x120>)
 8000c1e:	f7ff fceb 	bl	80005f8 <_ZN5Print5printEii>
  Serial.print("MHz");
 8000c22:	492f      	ldr	r1, [pc, #188]	; (8000ce0 <main+0x12c>)
 8000c24:	482b      	ldr	r0, [pc, #172]	; (8000cd4 <main+0x120>)
 8000c26:	f7ff fcc7 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print("\r\nStart");
 8000c2a:	492e      	ldr	r1, [pc, #184]	; (8000ce4 <main+0x130>)
 8000c2c:	4829      	ldr	r0, [pc, #164]	; (8000cd4 <main+0x120>)
 8000c2e:	f7ff fcc3 	bl	80005b8 <_ZN5Print5printEPKc>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14);
 8000c32:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <main+0x118>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <main+0x134>)
 8000c3c:	801a      	strh	r2, [r3, #0]
  HAL_Delay(500); //500ms
 8000c3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c42:	f001 f90d 	bl	8001e60 <HAL_Delay>
  timer_val2 = __HAL_TIM_GET_COUNTER(&htim14) - timer_val;
 8000c46:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <main+0x118>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	4b26      	ldr	r3, [pc, #152]	; (8000ce8 <main+0x134>)
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	4b25      	ldr	r3, [pc, #148]	; (8000cec <main+0x138>)
 8000c58:	801a      	strh	r2, [r3, #0]
  Serial.print("\r\nTime Elapsed is: ");
 8000c5a:	4925      	ldr	r1, [pc, #148]	; (8000cf0 <main+0x13c>)
 8000c5c:	481d      	ldr	r0, [pc, #116]	; (8000cd4 <main+0x120>)
 8000c5e:	f7ff fcab 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print((int)timer_val2/10);
 8000c62:	4b22      	ldr	r3, [pc, #136]	; (8000cec <main+0x138>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	4a23      	ldr	r2, [pc, #140]	; (8000cf4 <main+0x140>)
 8000c68:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6c:	08db      	lsrs	r3, r3, #3
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	220a      	movs	r2, #10
 8000c72:	4619      	mov	r1, r3
 8000c74:	4817      	ldr	r0, [pc, #92]	; (8000cd4 <main+0x120>)
 8000c76:	f7ff fcbf 	bl	80005f8 <_ZN5Print5printEii>
  Serial.print(" ms");
 8000c7a:	491f      	ldr	r1, [pc, #124]	; (8000cf8 <main+0x144>)
 8000c7c:	4815      	ldr	r0, [pc, #84]	; (8000cd4 <main+0x120>)
 8000c7e:	f7ff fc9b 	bl	80005b8 <_ZN5Print5printEPKc>
//  hal_gettick = HAL_GetTick();
//  hal_gettick/1000;

  Serial.print((int)hal_gettick);
 8000c82:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <main+0x148>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	220a      	movs	r2, #10
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4812      	ldr	r0, [pc, #72]	; (8000cd4 <main+0x120>)
 8000c8c:	f7ff fcb4 	bl	80005f8 <_ZN5Print5printEii>



  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 8000c90:	f008 f92c 	bl	8008eec <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of getBT */
  getBTHandle = osThreadNew(StartGetBT, NULL, &getBT_attributes);
 8000c94:	4a1a      	ldr	r2, [pc, #104]	; (8000d00 <main+0x14c>)
 8000c96:	2100      	movs	r1, #0
 8000c98:	481a      	ldr	r0, [pc, #104]	; (8000d04 <main+0x150>)
 8000c9a:	f008 f971 	bl	8008f80 <osThreadNew>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4a19      	ldr	r2, [pc, #100]	; (8000d08 <main+0x154>)
 8000ca2:	6013      	str	r3, [r2, #0]

  /* creation of sendUSB */
  sendUSBHandle = osThreadNew(StartSendUSB, NULL, &sendUSB_attributes);
 8000ca4:	4a19      	ldr	r2, [pc, #100]	; (8000d0c <main+0x158>)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4819      	ldr	r0, [pc, #100]	; (8000d10 <main+0x15c>)
 8000caa:	f008 f969 	bl	8008f80 <osThreadNew>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4a18      	ldr	r2, [pc, #96]	; (8000d14 <main+0x160>)
 8000cb2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000cb4:	f008 f93e 	bl	8008f34 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <main+0x104>
 8000cba:	bf00      	nop
 8000cbc:	200002d4 	.word	0x200002d4
 8000cc0:	200001e8 	.word	0x200001e8
 8000cc4:	2000032c 	.word	0x2000032c
 8000cc8:	20000240 	.word	0x20000240
 8000ccc:	20000284 	.word	0x20000284
 8000cd0:	080125e8 	.word	0x080125e8
 8000cd4:	20000370 	.word	0x20000370
 8000cd8:	431bde83 	.word	0x431bde83
 8000cdc:	20000630 	.word	0x20000630
 8000ce0:	08012600 	.word	0x08012600
 8000ce4:	08012604 	.word	0x08012604
 8000ce8:	20000634 	.word	0x20000634
 8000cec:	20000636 	.word	0x20000636
 8000cf0:	0801260c 	.word	0x0801260c
 8000cf4:	cccccccd 	.word	0xcccccccd
 8000cf8:	08012620 	.word	0x08012620
 8000cfc:	20000638 	.word	0x20000638
 8000d00:	080127d4 	.word	0x080127d4
 8000d04:	08001025 	.word	0x08001025
 8000d08:	200002cc 	.word	0x200002cc
 8000d0c:	080127f8 	.word	0x080127f8
 8000d10:	080016ed 	.word	0x080016ed
 8000d14:	200002d0 	.word	0x200002d0

08000d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b0ac      	sub	sp, #176	; 0xb0
 8000d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d22:	2234      	movs	r2, #52	; 0x34
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f011 fbec 	bl	8012504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d2c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	225c      	movs	r2, #92	; 0x5c
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f011 fbdd 	bl	8012504 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	4b3c      	ldr	r3, [pc, #240]	; (8000e40 <SystemClock_Config+0x128>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a3b      	ldr	r2, [pc, #236]	; (8000e40 <SystemClock_Config+0x128>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b39      	ldr	r3, [pc, #228]	; (8000e40 <SystemClock_Config+0x128>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	4b36      	ldr	r3, [pc, #216]	; (8000e44 <SystemClock_Config+0x12c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a35      	ldr	r2, [pc, #212]	; (8000e44 <SystemClock_Config+0x12c>)
 8000d70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	4b33      	ldr	r3, [pc, #204]	; (8000e44 <SystemClock_Config+0x12c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d82:	2301      	movs	r3, #1
 8000d84:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000da2:	23a8      	movs	r3, #168	; 0xa8
 8000da4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000da8:	2302      	movs	r3, #2
 8000daa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dae:	2307      	movs	r3, #7
 8000db0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000db4:	2302      	movs	r3, #2
 8000db6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f003 faf8 	bl	80043b4 <HAL_RCC_OscConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	bf14      	ite	ne
 8000dca:	2301      	movne	r3, #1
 8000dcc:	2300      	moveq	r3, #0
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000dd4:	f000 fcb0 	bl	8001738 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd8:	230f      	movs	r3, #15
 8000dda:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000de4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000de8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dee:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000df0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000df4:	2105      	movs	r1, #5
 8000df6:	4618      	mov	r0, r3
 8000df8:	f002 fcb4 	bl	8003764 <HAL_RCC_ClockConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	bf14      	ite	ne
 8000e02:	2301      	movne	r3, #1
 8000e04:	2300      	moveq	r3, #0
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000e0c:	f000 fc94 	bl	8001738 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e14:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000e16:	2300      	movs	r3, #0
 8000e18:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f002 fdec 	bl	80039fc <HAL_RCCEx_PeriphCLKConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	bf14      	ite	ne
 8000e2a:	2301      	movne	r3, #1
 8000e2c:	2300      	moveq	r3, #0
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000e34:	f000 fc80 	bl	8001738 <Error_Handler>
  }
}
 8000e38:	bf00      	nop
 8000e3a:	37b0      	adds	r7, #176	; 0xb0
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40007000 	.word	0x40007000

08000e48 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <_ZL13MX_TIM14_Initv+0x4c>)
 8000e4e:	4a12      	ldr	r2, [pc, #72]	; (8000e98 <_ZL13MX_TIM14_Initv+0x50>)
 8000e50:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (168/2)*100 -1;
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <_ZL13MX_TIM14_Initv+0x4c>)
 8000e54:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000e58:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <_ZL13MX_TIM14_Initv+0x4c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <_ZL13MX_TIM14_Initv+0x4c>)
 8000e62:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e66:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <_ZL13MX_TIM14_Initv+0x4c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <_ZL13MX_TIM14_Initv+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000e74:	4807      	ldr	r0, [pc, #28]	; (8000e94 <_ZL13MX_TIM14_Initv+0x4c>)
 8000e76:	f004 fae3 	bl	8005440 <HAL_TIM_Base_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	bf14      	ite	ne
 8000e80:	2301      	movne	r3, #1
 8000e82:	2300      	moveq	r3, #0
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <_ZL13MX_TIM14_Initv+0x46>
  {
    Error_Handler();
 8000e8a:	f000 fc55 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000284 	.word	0x20000284
 8000e98:	40002000 	.word	0x40002000

08000e9c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ea0:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000ea2:	4a1b      	ldr	r2, [pc, #108]	; (8000f10 <_ZL12MX_SPI1_Initv+0x74>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ea6:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000ea8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000eac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eb4:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ecc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000ed0:	2218      	movs	r2, #24
 8000ed2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000ee8:	220a      	movs	r2, #10
 8000eea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eec:	4807      	ldr	r0, [pc, #28]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000eee:	f003 fcff 	bl	80048f0 <HAL_SPI_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	bf14      	ite	ne
 8000ef8:	2301      	movne	r3, #1
 8000efa:	2300      	moveq	r3, #0
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8000f02:	f000 fc19 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200001e8 	.word	0x200001e8
 8000f10:	40013000 	.word	0x40013000

08000f14 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f1a:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <_ZL19MX_USART2_UART_Initv+0x58>)
 8000f1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f1e:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f4a:	4807      	ldr	r0, [pc, #28]	; (8000f68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f4c:	f004 fd1c 	bl	8005988 <HAL_UART_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	bf14      	ite	ne
 8000f56:	2301      	movne	r3, #1
 8000f58:	2300      	moveq	r3, #0
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000f60:	f000 fbea 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000240 	.word	0x20000240
 8000f6c:	40004400 	.word	0x40004400

08000f70 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	4b23      	ldr	r3, [pc, #140]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a22      	ldr	r2, [pc, #136]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a1b      	ldr	r2, [pc, #108]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b19      	ldr	r3, [pc, #100]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a14      	ldr	r2, [pc, #80]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ff6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <_ZL12MX_GPIO_Initv+0xac>)
 8000ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <_ZL12MX_GPIO_Initv+0xb0>)
 800100c:	f001 f82e 	bl	800206c <HAL_GPIO_Init>

}
 8001010:	bf00      	nop
 8001012:	3728      	adds	r7, #40	; 0x28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40023800 	.word	0x40023800
 800101c:	10210000 	.word	0x10210000
 8001020:	40020800 	.word	0x40020800

08001024 <_Z10StartGetBTPv>:
//	}
//}

/* USER CODE END 4 */
void StartGetBT(void *argument)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */

  /* USER CODE BEGIN 5 */
  if (Usb.Init() == -1) {
 800102c:	488b      	ldr	r0, [pc, #556]	; (800125c <_Z10StartGetBTPv+0x238>)
 800102e:	f000 fb91 	bl	8001754 <_ZN8MAX3421eI3P102P9E4InitEv>
 8001032:	4603      	mov	r3, r0
 8001034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001038:	bf0c      	ite	eq
 800103a:	2301      	moveq	r3, #1
 800103c:	2300      	movne	r3, #0
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d004      	beq.n	800104e <_Z10StartGetBTPv+0x2a>
  		Serial.print(F("\r\nOSC did not start"));
 8001044:	4986      	ldr	r1, [pc, #536]	; (8001260 <_Z10StartGetBTPv+0x23c>)
 8001046:	4887      	ldr	r0, [pc, #540]	; (8001264 <_Z10StartGetBTPv+0x240>)
 8001048:	f7ff faa8 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
  		while (1); // Halt
 800104c:	e7fe      	b.n	800104c <_Z10StartGetBTPv+0x28>
  }
  Serial.print(F("\r\nPS4 Bluetooth Library Started"));
 800104e:	4986      	ldr	r1, [pc, #536]	; (8001268 <_Z10StartGetBTPv+0x244>)
 8001050:	4884      	ldr	r0, [pc, #528]	; (8001264 <_Z10StartGetBTPv+0x240>)
 8001052:	f7ff faa3 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>

  gameHID.JoyX = 0;
 8001056:	4b85      	ldr	r3, [pc, #532]	; (800126c <_Z10StartGetBTPv+0x248>)
 8001058:	2200      	movs	r2, #0
 800105a:	709a      	strb	r2, [r3, #2]
  gameHID.JoyY = 0;
 800105c:	4b83      	ldr	r3, [pc, #524]	; (800126c <_Z10StartGetBTPv+0x248>)
 800105e:	2200      	movs	r2, #0
 8001060:	70da      	strb	r2, [r3, #3]
  gameHID.Joy2X = 0;
 8001062:	4b82      	ldr	r3, [pc, #520]	; (800126c <_Z10StartGetBTPv+0x248>)
 8001064:	2200      	movs	r2, #0
 8001066:	711a      	strb	r2, [r3, #4]
  gameHID.Joy2Y = 0;
 8001068:	4b80      	ldr	r3, [pc, #512]	; (800126c <_Z10StartGetBTPv+0x248>)
 800106a:	2200      	movs	r2, #0
 800106c:	715a      	strb	r2, [r3, #5]
  gameHID.Joy_LT = 0;
 800106e:	4b7f      	ldr	r3, [pc, #508]	; (800126c <_Z10StartGetBTPv+0x248>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
  gameHID.Joy_RT = 0;
 8001074:	4b7d      	ldr	r3, [pc, #500]	; (800126c <_Z10StartGetBTPv+0x248>)
 8001076:	2200      	movs	r2, #0
 8001078:	705a      	strb	r2, [r3, #1]
  gameHID.ps4ButtonsTag.dummy = 0;
 800107a:	4a7c      	ldr	r2, [pc, #496]	; (800126c <_Z10StartGetBTPv+0x248>)
 800107c:	7993      	ldrb	r3, [r2, #6]
 800107e:	f36f 0300 	bfc	r3, #0, #1
 8001082:	7193      	strb	r3, [r2, #6]

  xboxHID.startByte = 0;
 8001084:	4b7a      	ldr	r3, [pc, #488]	; (8001270 <_Z10StartGetBTPv+0x24c>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
  xboxHID.bLength = 20;
 800108a:	4b79      	ldr	r3, [pc, #484]	; (8001270 <_Z10StartGetBTPv+0x24c>)
 800108c:	2214      	movs	r2, #20
 800108e:	705a      	strb	r2, [r3, #1]
  xboxHID.dButtons = 0;
 8001090:	4b77      	ldr	r3, [pc, #476]	; (8001270 <_Z10StartGetBTPv+0x24c>)
 8001092:	2200      	movs	r2, #0
 8001094:	709a      	strb	r2, [r3, #2]
  xboxHID.A = 0;
 8001096:	4b76      	ldr	r3, [pc, #472]	; (8001270 <_Z10StartGetBTPv+0x24c>)
 8001098:	2200      	movs	r2, #0
 800109a:	711a      	strb	r2, [r3, #4]
  xboxHID.B = 0;
 800109c:	4b74      	ldr	r3, [pc, #464]	; (8001270 <_Z10StartGetBTPv+0x24c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	715a      	strb	r2, [r3, #5]
  xboxHID.Y = 0;
 80010a2:	4b73      	ldr	r3, [pc, #460]	; (8001270 <_Z10StartGetBTPv+0x24c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	71da      	strb	r2, [r3, #7]
  xboxHID.X = 0;
 80010a8:	4b71      	ldr	r3, [pc, #452]	; (8001270 <_Z10StartGetBTPv+0x24c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	719a      	strb	r2, [r3, #6]
  xboxHID.BLACK = 0;
 80010ae:	4b70      	ldr	r3, [pc, #448]	; (8001270 <_Z10StartGetBTPv+0x24c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	721a      	strb	r2, [r3, #8]
  xboxHID.WHITE = 0;
 80010b4:	4b6e      	ldr	r3, [pc, #440]	; (8001270 <_Z10StartGetBTPv+0x24c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	725a      	strb	r2, [r3, #9]
  xboxHID.L = 0;
 80010ba:	4b6d      	ldr	r3, [pc, #436]	; (8001270 <_Z10StartGetBTPv+0x24c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	729a      	strb	r2, [r3, #10]
  xboxHID.R = 0;
 80010c0:	4b6b      	ldr	r3, [pc, #428]	; (8001270 <_Z10StartGetBTPv+0x24c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	72da      	strb	r2, [r3, #11]
  xboxHID.leftStickX = 0;
 80010c6:	4b6a      	ldr	r3, [pc, #424]	; (8001270 <_Z10StartGetBTPv+0x24c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	819a      	strh	r2, [r3, #12]
  xboxHID.leftStickY = 0;
 80010cc:	4b68      	ldr	r3, [pc, #416]	; (8001270 <_Z10StartGetBTPv+0x24c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	81da      	strh	r2, [r3, #14]
  xboxHID.rightStickX = 0;
 80010d2:	4b67      	ldr	r3, [pc, #412]	; (8001270 <_Z10StartGetBTPv+0x24c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	821a      	strh	r2, [r3, #16]
  xboxHID.rightStickY = 0;
 80010d8:	4b65      	ldr	r3, [pc, #404]	; (8001270 <_Z10StartGetBTPv+0x24c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	825a      	strh	r2, [r3, #18]
  {

	    /* USER CODE END WHILE */

	    /* USER CODE BEGIN 3 */
		  if(entered_xid_req) {
 80010de:	4b65      	ldr	r3, [pc, #404]	; (8001274 <_Z10StartGetBTPv+0x250>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <_Z10StartGetBTPv+0xca>
			  Serial.print("\r\nEntered xid req");
 80010e6:	4964      	ldr	r1, [pc, #400]	; (8001278 <_Z10StartGetBTPv+0x254>)
 80010e8:	485e      	ldr	r0, [pc, #376]	; (8001264 <_Z10StartGetBTPv+0x240>)
 80010ea:	f7ff fa65 	bl	80005b8 <_ZN5Print5printEPKc>
		  }
	  	  	if(unknown_bmrequest) {
 80010ee:	4b63      	ldr	r3, [pc, #396]	; (800127c <_Z10StartGetBTPv+0x258>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <_Z10StartGetBTPv+0xda>
	  	  		Serial.print("\r\nUnknown bmrequest");
 80010f6:	4962      	ldr	r1, [pc, #392]	; (8001280 <_Z10StartGetBTPv+0x25c>)
 80010f8:	485a      	ldr	r0, [pc, #360]	; (8001264 <_Z10StartGetBTPv+0x240>)
 80010fa:	f7ff fa5d 	bl	80005b8 <_ZN5Print5printEPKc>
	  	  	}
			if(hid_setup_ran > 0) {
 80010fe:	4b61      	ldr	r3, [pc, #388]	; (8001284 <_Z10StartGetBTPv+0x260>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d00b      	beq.n	800111e <_Z10StartGetBTPv+0xfa>
				Serial.print("\r\nHey the xid code ran ");
 8001106:	4960      	ldr	r1, [pc, #384]	; (8001288 <_Z10StartGetBTPv+0x264>)
 8001108:	4856      	ldr	r0, [pc, #344]	; (8001264 <_Z10StartGetBTPv+0x240>)
 800110a:	f7ff fa55 	bl	80005b8 <_ZN5Print5printEPKc>
				Serial.print("\r\n");
 800110e:	495f      	ldr	r1, [pc, #380]	; (800128c <_Z10StartGetBTPv+0x268>)
 8001110:	4854      	ldr	r0, [pc, #336]	; (8001264 <_Z10StartGetBTPv+0x240>)
 8001112:	f7ff fa51 	bl	80005b8 <_ZN5Print5printEPKc>
				Serial.print(caller_str);
 8001116:	495e      	ldr	r1, [pc, #376]	; (8001290 <_Z10StartGetBTPv+0x26c>)
 8001118:	4852      	ldr	r0, [pc, #328]	; (8001264 <_Z10StartGetBTPv+0x240>)
 800111a:	f7ff fa4d 	bl	80005b8 <_ZN5Print5printEPKc>
			}
			if(usb_failed || usb_failed2) {
 800111e:	4b5d      	ldr	r3, [pc, #372]	; (8001294 <_Z10StartGetBTPv+0x270>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d103      	bne.n	800112e <_Z10StartGetBTPv+0x10a>
 8001126:	4b5c      	ldr	r3, [pc, #368]	; (8001298 <_Z10StartGetBTPv+0x274>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <_Z10StartGetBTPv+0x112>
				Serial.print("\r\nUSBd failed");
 800112e:	495b      	ldr	r1, [pc, #364]	; (800129c <_Z10StartGetBTPv+0x278>)
 8001130:	484c      	ldr	r0, [pc, #304]	; (8001264 <_Z10StartGetBTPv+0x240>)
 8001132:	f7ff fa41 	bl	80005b8 <_ZN5Print5printEPKc>
			}
			Usb.Task();
 8001136:	4849      	ldr	r0, [pc, #292]	; (800125c <_Z10StartGetBTPv+0x238>)
 8001138:	f010 f962 	bl	8011400 <_ZN3USB4TaskEv>
			if (PS4.connected()) {
 800113c:	4858      	ldr	r0, [pc, #352]	; (80012a0 <_Z10StartGetBTPv+0x27c>)
 800113e:	f7ff fc8d 	bl	8000a5c <_ZN5PS4BT9connectedEv>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 829b 	beq.w	8001680 <_Z10StartGetBTPv+0x65c>
				ps4_connected = 1;
 800114a:	4b56      	ldr	r3, [pc, #344]	; (80012a4 <_Z10StartGetBTPv+0x280>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
				LeftHatX_val = PS4.getAnalogHat(LeftHatX);
 8001150:	2100      	movs	r1, #0
 8001152:	4855      	ldr	r0, [pc, #340]	; (80012a8 <_Z10StartGetBTPv+0x284>)
 8001154:	f00f fb41 	bl	80107da <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	4b53      	ldr	r3, [pc, #332]	; (80012ac <_Z10StartGetBTPv+0x288>)
 800115e:	701a      	strb	r2, [r3, #0]
				LeftHatY_val = PS4.getAnalogHat(LeftHatY);
 8001160:	2101      	movs	r1, #1
 8001162:	4851      	ldr	r0, [pc, #324]	; (80012a8 <_Z10StartGetBTPv+0x284>)
 8001164:	f00f fb39 	bl	80107da <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	4b50      	ldr	r3, [pc, #320]	; (80012b0 <_Z10StartGetBTPv+0x28c>)
 800116e:	701a      	strb	r2, [r3, #0]
				RightHatX_val = PS4.getAnalogHat(RightHatX);
 8001170:	2102      	movs	r1, #2
 8001172:	484d      	ldr	r0, [pc, #308]	; (80012a8 <_Z10StartGetBTPv+0x284>)
 8001174:	f00f fb31 	bl	80107da <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	4b4d      	ldr	r3, [pc, #308]	; (80012b4 <_Z10StartGetBTPv+0x290>)
 800117e:	701a      	strb	r2, [r3, #0]
				RightHatY_val = PS4.getAnalogHat(RightHatY);
 8001180:	2103      	movs	r1, #3
 8001182:	4849      	ldr	r0, [pc, #292]	; (80012a8 <_Z10StartGetBTPv+0x284>)
 8001184:	f00f fb29 	bl	80107da <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	4b4a      	ldr	r3, [pc, #296]	; (80012b8 <_Z10StartGetBTPv+0x294>)
 800118e:	701a      	strb	r2, [r3, #0]

				if (LeftHatX_val > 137 || LeftHatX_val < 117 || LeftHatY_val > 137 || LeftHatY_val < 117 || RightHatX_val > 137 || RightHatX_val < 117 || RightHatY_val > 137 || RightHatY_val < 117) {
 8001190:	4b46      	ldr	r3, [pc, #280]	; (80012ac <_Z10StartGetBTPv+0x288>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b89      	cmp	r3, #137	; 0x89
 8001196:	d81b      	bhi.n	80011d0 <_Z10StartGetBTPv+0x1ac>
 8001198:	4b44      	ldr	r3, [pc, #272]	; (80012ac <_Z10StartGetBTPv+0x288>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b74      	cmp	r3, #116	; 0x74
 800119e:	d917      	bls.n	80011d0 <_Z10StartGetBTPv+0x1ac>
 80011a0:	4b43      	ldr	r3, [pc, #268]	; (80012b0 <_Z10StartGetBTPv+0x28c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b89      	cmp	r3, #137	; 0x89
 80011a6:	d813      	bhi.n	80011d0 <_Z10StartGetBTPv+0x1ac>
 80011a8:	4b41      	ldr	r3, [pc, #260]	; (80012b0 <_Z10StartGetBTPv+0x28c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b74      	cmp	r3, #116	; 0x74
 80011ae:	d90f      	bls.n	80011d0 <_Z10StartGetBTPv+0x1ac>
 80011b0:	4b40      	ldr	r3, [pc, #256]	; (80012b4 <_Z10StartGetBTPv+0x290>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b89      	cmp	r3, #137	; 0x89
 80011b6:	d80b      	bhi.n	80011d0 <_Z10StartGetBTPv+0x1ac>
 80011b8:	4b3e      	ldr	r3, [pc, #248]	; (80012b4 <_Z10StartGetBTPv+0x290>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b74      	cmp	r3, #116	; 0x74
 80011be:	d907      	bls.n	80011d0 <_Z10StartGetBTPv+0x1ac>
 80011c0:	4b3d      	ldr	r3, [pc, #244]	; (80012b8 <_Z10StartGetBTPv+0x294>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b89      	cmp	r3, #137	; 0x89
 80011c6:	d803      	bhi.n	80011d0 <_Z10StartGetBTPv+0x1ac>
 80011c8:	4b3b      	ldr	r3, [pc, #236]	; (80012b8 <_Z10StartGetBTPv+0x294>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b74      	cmp	r3, #116	; 0x74
 80011ce:	d875      	bhi.n	80012bc <_Z10StartGetBTPv+0x298>
					gameHID.JoyX = PS4.getAnalogHat(LeftHatX) - 128;
 80011d0:	2100      	movs	r1, #0
 80011d2:	4835      	ldr	r0, [pc, #212]	; (80012a8 <_Z10StartGetBTPv+0x284>)
 80011d4:	f00f fb01 	bl	80107da <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80011d8:	4603      	mov	r3, r0
 80011da:	3b80      	subs	r3, #128	; 0x80
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	b25a      	sxtb	r2, r3
 80011e0:	4b22      	ldr	r3, [pc, #136]	; (800126c <_Z10StartGetBTPv+0x248>)
 80011e2:	709a      	strb	r2, [r3, #2]
					gameHID.JoyY = PS4.getAnalogHat(LeftHatY) - 128;
 80011e4:	2101      	movs	r1, #1
 80011e6:	4830      	ldr	r0, [pc, #192]	; (80012a8 <_Z10StartGetBTPv+0x284>)
 80011e8:	f00f faf7 	bl	80107da <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80011ec:	4603      	mov	r3, r0
 80011ee:	3b80      	subs	r3, #128	; 0x80
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	b25a      	sxtb	r2, r3
 80011f4:	4b1d      	ldr	r3, [pc, #116]	; (800126c <_Z10StartGetBTPv+0x248>)
 80011f6:	70da      	strb	r2, [r3, #3]
					gameHID.Joy2X = PS4.getAnalogHat(RightHatX) - 128;
 80011f8:	2102      	movs	r1, #2
 80011fa:	482b      	ldr	r0, [pc, #172]	; (80012a8 <_Z10StartGetBTPv+0x284>)
 80011fc:	f00f faed 	bl	80107da <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001200:	4603      	mov	r3, r0
 8001202:	3b80      	subs	r3, #128	; 0x80
 8001204:	b2db      	uxtb	r3, r3
 8001206:	b25a      	sxtb	r2, r3
 8001208:	4b18      	ldr	r3, [pc, #96]	; (800126c <_Z10StartGetBTPv+0x248>)
 800120a:	711a      	strb	r2, [r3, #4]
					gameHID.Joy2Y = PS4.getAnalogHat(RightHatY) - 128;
 800120c:	2103      	movs	r1, #3
 800120e:	4826      	ldr	r0, [pc, #152]	; (80012a8 <_Z10StartGetBTPv+0x284>)
 8001210:	f00f fae3 	bl	80107da <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001214:	4603      	mov	r3, r0
 8001216:	3b80      	subs	r3, #128	; 0x80
 8001218:	b2db      	uxtb	r3, r3
 800121a:	b25a      	sxtb	r2, r3
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <_Z10StartGetBTPv+0x248>)
 800121e:	715a      	strb	r2, [r3, #5]

					xboxHID.leftStickX = gameHID.JoyX << 8;	//only getting 8 bit value from bt
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <_Z10StartGetBTPv+0x248>)
 8001222:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	b21a      	sxth	r2, r3
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <_Z10StartGetBTPv+0x24c>)
 800122c:	819a      	strh	r2, [r3, #12]
					xboxHID.leftStickY = gameHID.JoyY << 8;	//xbox uses 16 bit signed
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <_Z10StartGetBTPv+0x248>)
 8001230:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	b21a      	sxth	r2, r3
 8001238:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <_Z10StartGetBTPv+0x24c>)
 800123a:	81da      	strh	r2, [r3, #14]
					xboxHID.rightStickX = gameHID.Joy2X << 8;
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <_Z10StartGetBTPv+0x248>)
 800123e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001242:	021b      	lsls	r3, r3, #8
 8001244:	b21a      	sxth	r2, r3
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <_Z10StartGetBTPv+0x24c>)
 8001248:	821a      	strh	r2, [r3, #16]
					xboxHID.rightStickY = gameHID.Joy2Y << 8;
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <_Z10StartGetBTPv+0x248>)
 800124c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	b21a      	sxth	r2, r3
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <_Z10StartGetBTPv+0x24c>)
 8001256:	825a      	strh	r2, [r3, #18]
 8001258:	e048      	b.n	80012ec <_Z10StartGetBTPv+0x2c8>
 800125a:	bf00      	nop
 800125c:	20000384 	.word	0x20000384
 8001260:	08012624 	.word	0x08012624
 8001264:	20000370 	.word	0x20000370
 8001268:	08012638 	.word	0x08012638
 800126c:	20000624 	.word	0x20000624
 8001270:	2000063c 	.word	0x2000063c
 8001274:	20000654 	.word	0x20000654
 8001278:	08012658 	.word	0x08012658
 800127c:	20000653 	.word	0x20000653
 8001280:	0801266c 	.word	0x0801266c
 8001284:	20000651 	.word	0x20000651
 8001288:	08012680 	.word	0x08012680
 800128c:	08012698 	.word	0x08012698
 8001290:	20004fd4 	.word	0x20004fd4
 8001294:	20000652 	.word	0x20000652
 8001298:	20004f68 	.word	0x20004f68
 800129c:	0801269c 	.word	0x0801269c
 80012a0:	20000558 	.word	0x20000558
 80012a4:	20000621 	.word	0x20000621
 80012a8:	200005d0 	.word	0x200005d0
 80012ac:	2000062c 	.word	0x2000062c
 80012b0:	2000062d 	.word	0x2000062d
 80012b4:	2000062e 	.word	0x2000062e
 80012b8:	2000062f 	.word	0x2000062f

				} else {
					gameHID.JoyX = 0;
 80012bc:	4bb8      	ldr	r3, [pc, #736]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	709a      	strb	r2, [r3, #2]
					gameHID.JoyY = 0;
 80012c2:	4bb7      	ldr	r3, [pc, #732]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	70da      	strb	r2, [r3, #3]
					gameHID.Joy2X = 0;
 80012c8:	4bb5      	ldr	r3, [pc, #724]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	711a      	strb	r2, [r3, #4]
					gameHID.Joy2Y = 0;
 80012ce:	4bb4      	ldr	r3, [pc, #720]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	715a      	strb	r2, [r3, #5]

					xboxHID.leftStickX = 0;
 80012d4:	4bb3      	ldr	r3, [pc, #716]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	819a      	strh	r2, [r3, #12]
					xboxHID.leftStickY = 0;
 80012da:	4bb2      	ldr	r3, [pc, #712]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 80012dc:	2200      	movs	r2, #0
 80012de:	81da      	strh	r2, [r3, #14]
					xboxHID.rightStickX = 0;
 80012e0:	4bb0      	ldr	r3, [pc, #704]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	821a      	strh	r2, [r3, #16]
					xboxHID.rightStickY = 0;
 80012e6:	4baf      	ldr	r3, [pc, #700]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	825a      	strh	r2, [r3, #18]
				}

				gameHID.Joy_LT = PS4.getAnalogButton(L2) - 128;
 80012ec:	2108      	movs	r1, #8
 80012ee:	48ae      	ldr	r0, [pc, #696]	; (80015a8 <_Z10StartGetBTPv+0x584>)
 80012f0:	f00f fa5a 	bl	80107a8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 80012f4:	4603      	mov	r3, r0
 80012f6:	3b80      	subs	r3, #128	; 0x80
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	b25a      	sxtb	r2, r3
 80012fc:	4ba8      	ldr	r3, [pc, #672]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 80012fe:	701a      	strb	r2, [r3, #0]
				gameHID.Joy_RT = PS4.getAnalogButton(R2) - 128;
 8001300:	2109      	movs	r1, #9
 8001302:	48a9      	ldr	r0, [pc, #676]	; (80015a8 <_Z10StartGetBTPv+0x584>)
 8001304:	f00f fa50 	bl	80107a8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001308:	4603      	mov	r3, r0
 800130a:	3b80      	subs	r3, #128	; 0x80
 800130c:	b2db      	uxtb	r3, r3
 800130e:	b25a      	sxtb	r2, r3
 8001310:	4ba3      	ldr	r3, [pc, #652]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 8001312:	705a      	strb	r2, [r3, #1]

				xboxHID.L = gameHID.Joy_LT;
 8001314:	4ba2      	ldr	r3, [pc, #648]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 8001316:	f993 3000 	ldrsb.w	r3, [r3]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	4ba1      	ldr	r3, [pc, #644]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 800131e:	729a      	strb	r2, [r3, #10]
				xboxHID.R = gameHID.Joy_RT;
 8001320:	4b9f      	ldr	r3, [pc, #636]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 8001322:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	4b9e      	ldr	r3, [pc, #632]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 800132a:	72da      	strb	r2, [r3, #11]


				if (PS4.getButtonClick(PS)) {
 800132c:	2110      	movs	r1, #16
 800132e:	489e      	ldr	r0, [pc, #632]	; (80015a8 <_Z10StartGetBTPv+0x584>)
 8001330:	f00f f9fa 	bl	8010728 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d005      	beq.n	8001346 <_Z10StartGetBTPv+0x322>
					gameHID.ps4ButtonsTag.button_ps = 1;
 800133a:	4a99      	ldr	r2, [pc, #612]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 800133c:	7993      	ldrb	r3, [r2, #6]
 800133e:	f043 0302 	orr.w	r3, r3, #2
 8001342:	7193      	strb	r3, [r2, #6]
 8001344:	e004      	b.n	8001350 <_Z10StartGetBTPv+0x32c>
				} else {
					gameHID.ps4ButtonsTag.button_ps = 0;
 8001346:	4a96      	ldr	r2, [pc, #600]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 8001348:	7993      	ldrb	r3, [r2, #6]
 800134a:	f36f 0341 	bfc	r3, #1, #1
 800134e:	7193      	strb	r3, [r2, #6]
				}

				if (PS4.getButtonPress(TRIANGLE)) {
 8001350:	210c      	movs	r1, #12
 8001352:	4895      	ldr	r0, [pc, #596]	; (80015a8 <_Z10StartGetBTPv+0x584>)
 8001354:	f00f f9c0 	bl	80106d8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d008      	beq.n	8001370 <_Z10StartGetBTPv+0x34c>
					gameHID.ps4ButtonsTag.button_triangle = 1;
 800135e:	4a90      	ldr	r2, [pc, #576]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 8001360:	79d3      	ldrb	r3, [r2, #7]
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	71d3      	strb	r3, [r2, #7]
					xboxHID.Y = 0xFF;
 8001368:	4b8e      	ldr	r3, [pc, #568]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 800136a:	22ff      	movs	r2, #255	; 0xff
 800136c:	71da      	strb	r2, [r3, #7]
 800136e:	e007      	b.n	8001380 <_Z10StartGetBTPv+0x35c>
				} else {
					gameHID.ps4ButtonsTag.button_triangle = 0;
 8001370:	4a8b      	ldr	r2, [pc, #556]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 8001372:	79d3      	ldrb	r3, [r2, #7]
 8001374:	f36f 0300 	bfc	r3, #0, #1
 8001378:	71d3      	strb	r3, [r2, #7]
					xboxHID.Y = 0;
 800137a:	4b8a      	ldr	r3, [pc, #552]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 800137c:	2200      	movs	r2, #0
 800137e:	71da      	strb	r2, [r3, #7]
				}

				if (PS4.getButtonPress(CIRCLE)) {
 8001380:	210d      	movs	r1, #13
 8001382:	4889      	ldr	r0, [pc, #548]	; (80015a8 <_Z10StartGetBTPv+0x584>)
 8001384:	f00f f9a8 	bl	80106d8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d008      	beq.n	80013a0 <_Z10StartGetBTPv+0x37c>
					gameHID.ps4ButtonsTag.button_circle = 1;
 800138e:	4a84      	ldr	r2, [pc, #528]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 8001390:	7993      	ldrb	r3, [r2, #6]
 8001392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001396:	7193      	strb	r3, [r2, #6]
					xboxHID.B = 0xFF;
 8001398:	4b82      	ldr	r3, [pc, #520]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 800139a:	22ff      	movs	r2, #255	; 0xff
 800139c:	715a      	strb	r2, [r3, #5]
 800139e:	e007      	b.n	80013b0 <_Z10StartGetBTPv+0x38c>
				} else {
					gameHID.ps4ButtonsTag.button_circle = 0;
 80013a0:	4a7f      	ldr	r2, [pc, #508]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 80013a2:	7993      	ldrb	r3, [r2, #6]
 80013a4:	f36f 13c7 	bfc	r3, #7, #1
 80013a8:	7193      	strb	r3, [r2, #6]
					xboxHID.B = 0;
 80013aa:	4b7e      	ldr	r3, [pc, #504]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	715a      	strb	r2, [r3, #5]
				}

				if (PS4.getButtonPress(CROSS)) {
 80013b0:	210e      	movs	r1, #14
 80013b2:	487d      	ldr	r0, [pc, #500]	; (80015a8 <_Z10StartGetBTPv+0x584>)
 80013b4:	f00f f990 	bl	80106d8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d008      	beq.n	80013d0 <_Z10StartGetBTPv+0x3ac>
					gameHID.ps4ButtonsTag.button_cross = 1;
 80013be:	4a78      	ldr	r2, [pc, #480]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 80013c0:	7993      	ldrb	r3, [r2, #6]
 80013c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013c6:	7193      	strb	r3, [r2, #6]
					xboxHID.A = 0xFF;
 80013c8:	4b76      	ldr	r3, [pc, #472]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 80013ca:	22ff      	movs	r2, #255	; 0xff
 80013cc:	711a      	strb	r2, [r3, #4]
 80013ce:	e007      	b.n	80013e0 <_Z10StartGetBTPv+0x3bc>
				} else {
					gameHID.ps4ButtonsTag.button_cross = 0;
 80013d0:	4a73      	ldr	r2, [pc, #460]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 80013d2:	7993      	ldrb	r3, [r2, #6]
 80013d4:	f36f 1386 	bfc	r3, #6, #1
 80013d8:	7193      	strb	r3, [r2, #6]
					xboxHID.A = 0xFF;	//always press A for testing
 80013da:	4b72      	ldr	r3, [pc, #456]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 80013dc:	22ff      	movs	r2, #255	; 0xff
 80013de:	711a      	strb	r2, [r3, #4]
				}

				if (PS4.getButtonPress(SQUARE)) {
 80013e0:	210f      	movs	r1, #15
 80013e2:	4871      	ldr	r0, [pc, #452]	; (80015a8 <_Z10StartGetBTPv+0x584>)
 80013e4:	f00f f978 	bl	80106d8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d008      	beq.n	8001400 <_Z10StartGetBTPv+0x3dc>
					gameHID.ps4ButtonsTag.button_square = 1;
 80013ee:	4a6c      	ldr	r2, [pc, #432]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 80013f0:	79d3      	ldrb	r3, [r2, #7]
 80013f2:	f043 0302 	orr.w	r3, r3, #2
 80013f6:	71d3      	strb	r3, [r2, #7]
					xboxHID.X = 0xFF;
 80013f8:	4b6a      	ldr	r3, [pc, #424]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 80013fa:	22ff      	movs	r2, #255	; 0xff
 80013fc:	719a      	strb	r2, [r3, #6]
 80013fe:	e007      	b.n	8001410 <_Z10StartGetBTPv+0x3ec>
				} else {
					gameHID.ps4ButtonsTag.button_square = 0;
 8001400:	4a67      	ldr	r2, [pc, #412]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 8001402:	79d3      	ldrb	r3, [r2, #7]
 8001404:	f36f 0341 	bfc	r3, #1, #1
 8001408:	71d3      	strb	r3, [r2, #7]
					xboxHID.X = 0;
 800140a:	4b66      	ldr	r3, [pc, #408]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 800140c:	2200      	movs	r2, #0
 800140e:	719a      	strb	r2, [r3, #6]
				}

				if (PS4.getButtonPress(UP)) {
 8001410:	2100      	movs	r1, #0
 8001412:	4865      	ldr	r0, [pc, #404]	; (80015a8 <_Z10StartGetBTPv+0x584>)
 8001414:	f00f f960 	bl	80106d8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00c      	beq.n	8001438 <_Z10StartGetBTPv+0x414>
					gameHID.ps4ButtonsTag.button_dpad_up = 1;
 800141e:	4a60      	ldr	r2, [pc, #384]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 8001420:	79d3      	ldrb	r3, [r2, #7]
 8001422:	f043 0304 	orr.w	r3, r3, #4
 8001426:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons |= XBOX_DUP;
 8001428:	4b5e      	ldr	r3, [pc, #376]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 800142a:	789b      	ldrb	r3, [r3, #2]
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	b2da      	uxtb	r2, r3
 8001432:	4b5c      	ldr	r3, [pc, #368]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 8001434:	709a      	strb	r2, [r3, #2]
 8001436:	e00b      	b.n	8001450 <_Z10StartGetBTPv+0x42c>
				} else {
					gameHID.ps4ButtonsTag.button_dpad_up = 0;
 8001438:	4a59      	ldr	r2, [pc, #356]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 800143a:	79d3      	ldrb	r3, [r2, #7]
 800143c:	f36f 0382 	bfc	r3, #2, #1
 8001440:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons ^= XBOX_DUP;
 8001442:	4b58      	ldr	r3, [pc, #352]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 8001444:	789b      	ldrb	r3, [r3, #2]
 8001446:	f083 0301 	eor.w	r3, r3, #1
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b55      	ldr	r3, [pc, #340]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 800144e:	709a      	strb	r2, [r3, #2]
				}

				if (PS4.getButtonPress(RIGHT)) {
 8001450:	2101      	movs	r1, #1
 8001452:	4855      	ldr	r0, [pc, #340]	; (80015a8 <_Z10StartGetBTPv+0x584>)
 8001454:	f00f f940 	bl	80106d8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00c      	beq.n	8001478 <_Z10StartGetBTPv+0x454>
					gameHID.ps4ButtonsTag.button_dpad_right = 1;
 800145e:	4a50      	ldr	r2, [pc, #320]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 8001460:	79d3      	ldrb	r3, [r2, #7]
 8001462:	f043 0308 	orr.w	r3, r3, #8
 8001466:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons |= XBOX_DRIGHT;
 8001468:	4b4e      	ldr	r3, [pc, #312]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 800146a:	789b      	ldrb	r3, [r3, #2]
 800146c:	f043 0308 	orr.w	r3, r3, #8
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4b4c      	ldr	r3, [pc, #304]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 8001474:	709a      	strb	r2, [r3, #2]
 8001476:	e00b      	b.n	8001490 <_Z10StartGetBTPv+0x46c>
				} else {
					gameHID.ps4ButtonsTag.button_dpad_right = 0;
 8001478:	4a49      	ldr	r2, [pc, #292]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 800147a:	79d3      	ldrb	r3, [r2, #7]
 800147c:	f36f 03c3 	bfc	r3, #3, #1
 8001480:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons ^= XBOX_DRIGHT;
 8001482:	4b48      	ldr	r3, [pc, #288]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 8001484:	789b      	ldrb	r3, [r3, #2]
 8001486:	f083 0308 	eor.w	r3, r3, #8
 800148a:	b2da      	uxtb	r2, r3
 800148c:	4b45      	ldr	r3, [pc, #276]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 800148e:	709a      	strb	r2, [r3, #2]
				}

				if (PS4.getButtonPress(DOWN)) {
 8001490:	2102      	movs	r1, #2
 8001492:	4845      	ldr	r0, [pc, #276]	; (80015a8 <_Z10StartGetBTPv+0x584>)
 8001494:	f00f f920 	bl	80106d8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00c      	beq.n	80014b8 <_Z10StartGetBTPv+0x494>
					gameHID.ps4ButtonsTag.button_dpad_down = 1;
 800149e:	4a40      	ldr	r2, [pc, #256]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 80014a0:	79d3      	ldrb	r3, [r2, #7]
 80014a2:	f043 0320 	orr.w	r3, r3, #32
 80014a6:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons |= XBOX_DDOWN;
 80014a8:	4b3e      	ldr	r3, [pc, #248]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 80014aa:	789b      	ldrb	r3, [r3, #2]
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4b3c      	ldr	r3, [pc, #240]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 80014b4:	709a      	strb	r2, [r3, #2]
 80014b6:	e00b      	b.n	80014d0 <_Z10StartGetBTPv+0x4ac>
				} else {
					gameHID.ps4ButtonsTag.button_dpad_down = 0;
 80014b8:	4a39      	ldr	r2, [pc, #228]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 80014ba:	79d3      	ldrb	r3, [r2, #7]
 80014bc:	f36f 1345 	bfc	r3, #5, #1
 80014c0:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons ^= XBOX_DDOWN;
 80014c2:	4b38      	ldr	r3, [pc, #224]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 80014c4:	789b      	ldrb	r3, [r3, #2]
 80014c6:	f083 0302 	eor.w	r3, r3, #2
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	4b35      	ldr	r3, [pc, #212]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 80014ce:	709a      	strb	r2, [r3, #2]
				}

				if (PS4.getButtonPress(LEFT)) {
 80014d0:	2103      	movs	r1, #3
 80014d2:	4835      	ldr	r0, [pc, #212]	; (80015a8 <_Z10StartGetBTPv+0x584>)
 80014d4:	f00f f900 	bl	80106d8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00c      	beq.n	80014f8 <_Z10StartGetBTPv+0x4d4>
					gameHID.ps4ButtonsTag.button_dpad_left = 1;
 80014de:	4a30      	ldr	r2, [pc, #192]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 80014e0:	79d3      	ldrb	r3, [r2, #7]
 80014e2:	f043 0310 	orr.w	r3, r3, #16
 80014e6:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons |= XBOX_DLEFT;
 80014e8:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 80014ea:	789b      	ldrb	r3, [r3, #2]
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 80014f4:	709a      	strb	r2, [r3, #2]
 80014f6:	e00b      	b.n	8001510 <_Z10StartGetBTPv+0x4ec>

				} else {
					gameHID.ps4ButtonsTag.button_dpad_left = 0;
 80014f8:	4a29      	ldr	r2, [pc, #164]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 80014fa:	79d3      	ldrb	r3, [r2, #7]
 80014fc:	f36f 1304 	bfc	r3, #4, #1
 8001500:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons ^= XBOX_DLEFT;
 8001502:	4b28      	ldr	r3, [pc, #160]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 8001504:	789b      	ldrb	r3, [r3, #2]
 8001506:	f083 0304 	eor.w	r3, r3, #4
 800150a:	b2da      	uxtb	r2, r3
 800150c:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 800150e:	709a      	strb	r2, [r3, #2]
				}

				if (PS4.getButtonPress(L1)) {
 8001510:	210a      	movs	r1, #10
 8001512:	4825      	ldr	r0, [pc, #148]	; (80015a8 <_Z10StartGetBTPv+0x584>)
 8001514:	f00f f8e0 	bl	80106d8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d008      	beq.n	8001530 <_Z10StartGetBTPv+0x50c>
					gameHID.ps4ButtonsTag.button_left_trigger = 1;
 800151e:	4a20      	ldr	r2, [pc, #128]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 8001520:	7993      	ldrb	r3, [r2, #6]
 8001522:	f043 0320 	orr.w	r3, r3, #32
 8001526:	7193      	strb	r3, [r2, #6]
					xboxHID.BLACK = 0xFF;
 8001528:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 800152a:	22ff      	movs	r2, #255	; 0xff
 800152c:	721a      	strb	r2, [r3, #8]
 800152e:	e007      	b.n	8001540 <_Z10StartGetBTPv+0x51c>

				} else {
					gameHID.ps4ButtonsTag.button_left_trigger = 0;
 8001530:	4a1b      	ldr	r2, [pc, #108]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 8001532:	7993      	ldrb	r3, [r2, #6]
 8001534:	f36f 1345 	bfc	r3, #5, #1
 8001538:	7193      	strb	r3, [r2, #6]
					xboxHID.BLACK = 0;
 800153a:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 800153c:	2200      	movs	r2, #0
 800153e:	721a      	strb	r2, [r3, #8]
				}

				if (PS4.getButtonPress(L3)) {
 8001540:	2106      	movs	r1, #6
 8001542:	4819      	ldr	r0, [pc, #100]	; (80015a8 <_Z10StartGetBTPv+0x584>)
 8001544:	f00f f8c8 	bl	80106d8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00c      	beq.n	8001568 <_Z10StartGetBTPv+0x544>
					gameHID.ps4ButtonsTag.button_left_thumb = 1;
 800154e:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 8001550:	79d3      	ldrb	r3, [r2, #7]
 8001552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001556:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons |= XBOX_LS_BTN;
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 800155a:	789b      	ldrb	r3, [r3, #2]
 800155c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 8001564:	709a      	strb	r2, [r3, #2]
 8001566:	e00b      	b.n	8001580 <_Z10StartGetBTPv+0x55c>
				} else {
					gameHID.ps4ButtonsTag.button_left_thumb = 0;
 8001568:	4a0d      	ldr	r2, [pc, #52]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 800156a:	79d3      	ldrb	r3, [r2, #7]
 800156c:	f36f 1386 	bfc	r3, #6, #1
 8001570:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons ^= XBOX_LS_BTN;
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 8001574:	789b      	ldrb	r3, [r3, #2]
 8001576:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 800157a:	b2da      	uxtb	r2, r3
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 800157e:	709a      	strb	r2, [r3, #2]
				}

				if (PS4.getButtonPress(R1)) {
 8001580:	210b      	movs	r1, #11
 8001582:	4809      	ldr	r0, [pc, #36]	; (80015a8 <_Z10StartGetBTPv+0x584>)
 8001584:	f00f f8a8 	bl	80106d8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00e      	beq.n	80015ac <_Z10StartGetBTPv+0x588>
					gameHID.ps4ButtonsTag.button_right_trigger = 1;
 800158e:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <_Z10StartGetBTPv+0x57c>)
 8001590:	7993      	ldrb	r3, [r2, #6]
 8001592:	f043 0310 	orr.w	r3, r3, #16
 8001596:	7193      	strb	r3, [r2, #6]
					xboxHID.WHITE = 0xFF;
 8001598:	4b02      	ldr	r3, [pc, #8]	; (80015a4 <_Z10StartGetBTPv+0x580>)
 800159a:	22ff      	movs	r2, #255	; 0xff
 800159c:	725a      	strb	r2, [r3, #9]
 800159e:	e00d      	b.n	80015bc <_Z10StartGetBTPv+0x598>
 80015a0:	20000624 	.word	0x20000624
 80015a4:	2000063c 	.word	0x2000063c
 80015a8:	200005d0 	.word	0x200005d0
				} else {
					gameHID.ps4ButtonsTag.button_right_trigger = 0;
 80015ac:	4a47      	ldr	r2, [pc, #284]	; (80016cc <_Z10StartGetBTPv+0x6a8>)
 80015ae:	7993      	ldrb	r3, [r2, #6]
 80015b0:	f36f 1304 	bfc	r3, #4, #1
 80015b4:	7193      	strb	r3, [r2, #6]
					xboxHID.WHITE = 0;
 80015b6:	4b46      	ldr	r3, [pc, #280]	; (80016d0 <_Z10StartGetBTPv+0x6ac>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	725a      	strb	r2, [r3, #9]
				}

				if (PS4.getButtonPress(R3)) {
 80015bc:	2107      	movs	r1, #7
 80015be:	4845      	ldr	r0, [pc, #276]	; (80016d4 <_Z10StartGetBTPv+0x6b0>)
 80015c0:	f00f f88a 	bl	80106d8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00c      	beq.n	80015e4 <_Z10StartGetBTPv+0x5c0>
					gameHID.ps4ButtonsTag.button_right_thumb = 1;
 80015ca:	4a40      	ldr	r2, [pc, #256]	; (80016cc <_Z10StartGetBTPv+0x6a8>)
 80015cc:	79d3      	ldrb	r3, [r2, #7]
 80015ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d2:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons |= XBOX_RS_BTN;
 80015d4:	4b3e      	ldr	r3, [pc, #248]	; (80016d0 <_Z10StartGetBTPv+0x6ac>)
 80015d6:	789b      	ldrb	r3, [r3, #2]
 80015d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4b3c      	ldr	r3, [pc, #240]	; (80016d0 <_Z10StartGetBTPv+0x6ac>)
 80015e0:	709a      	strb	r2, [r3, #2]
 80015e2:	e00c      	b.n	80015fe <_Z10StartGetBTPv+0x5da>
				} else {
					gameHID.ps4ButtonsTag.button_right_thumb = 0;
 80015e4:	4a39      	ldr	r2, [pc, #228]	; (80016cc <_Z10StartGetBTPv+0x6a8>)
 80015e6:	79d3      	ldrb	r3, [r2, #7]
 80015e8:	f36f 13c7 	bfc	r3, #7, #1
 80015ec:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons ^= XBOX_RS_BTN;
 80015ee:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <_Z10StartGetBTPv+0x6ac>)
 80015f0:	789b      	ldrb	r3, [r3, #2]
 80015f2:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 80015f6:	43db      	mvns	r3, r3
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4b35      	ldr	r3, [pc, #212]	; (80016d0 <_Z10StartGetBTPv+0x6ac>)
 80015fc:	709a      	strb	r2, [r3, #2]
				}

				if (PS4.getButtonPress(SHARE)) {
 80015fe:	2104      	movs	r1, #4
 8001600:	4834      	ldr	r0, [pc, #208]	; (80016d4 <_Z10StartGetBTPv+0x6b0>)
 8001602:	f00f f869 	bl	80106d8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d00c      	beq.n	8001626 <_Z10StartGetBTPv+0x602>
					gameHID.ps4ButtonsTag.button_share = 1;
 800160c:	4a2f      	ldr	r2, [pc, #188]	; (80016cc <_Z10StartGetBTPv+0x6a8>)
 800160e:	7993      	ldrb	r3, [r2, #6]
 8001610:	f043 0308 	orr.w	r3, r3, #8
 8001614:	7193      	strb	r3, [r2, #6]
					xboxHID.dButtons |= XBOX_BACK_BTN;
 8001616:	4b2e      	ldr	r3, [pc, #184]	; (80016d0 <_Z10StartGetBTPv+0x6ac>)
 8001618:	789b      	ldrb	r3, [r3, #2]
 800161a:	f043 0320 	orr.w	r3, r3, #32
 800161e:	b2da      	uxtb	r2, r3
 8001620:	4b2b      	ldr	r3, [pc, #172]	; (80016d0 <_Z10StartGetBTPv+0x6ac>)
 8001622:	709a      	strb	r2, [r3, #2]
 8001624:	e00b      	b.n	800163e <_Z10StartGetBTPv+0x61a>
				} else {
					gameHID.ps4ButtonsTag.button_share = 0;
 8001626:	4a29      	ldr	r2, [pc, #164]	; (80016cc <_Z10StartGetBTPv+0x6a8>)
 8001628:	7993      	ldrb	r3, [r2, #6]
 800162a:	f36f 03c3 	bfc	r3, #3, #1
 800162e:	7193      	strb	r3, [r2, #6]
					xboxHID.dButtons ^= XBOX_BACK_BTN;
 8001630:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <_Z10StartGetBTPv+0x6ac>)
 8001632:	789b      	ldrb	r3, [r3, #2]
 8001634:	f083 0320 	eor.w	r3, r3, #32
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <_Z10StartGetBTPv+0x6ac>)
 800163c:	709a      	strb	r2, [r3, #2]
				}

				if (PS4.getButtonPress(OPTIONS)) {
 800163e:	2105      	movs	r1, #5
 8001640:	4824      	ldr	r0, [pc, #144]	; (80016d4 <_Z10StartGetBTPv+0x6b0>)
 8001642:	f00f f849 	bl	80106d8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00c      	beq.n	8001666 <_Z10StartGetBTPv+0x642>
					gameHID.ps4ButtonsTag.button_start = 1;
 800164c:	4a1f      	ldr	r2, [pc, #124]	; (80016cc <_Z10StartGetBTPv+0x6a8>)
 800164e:	7993      	ldrb	r3, [r2, #6]
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	7193      	strb	r3, [r2, #6]
					xboxHID.dButtons |= XBOX_START_BTN;
 8001656:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <_Z10StartGetBTPv+0x6ac>)
 8001658:	789b      	ldrb	r3, [r3, #2]
 800165a:	f043 0310 	orr.w	r3, r3, #16
 800165e:	b2da      	uxtb	r2, r3
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <_Z10StartGetBTPv+0x6ac>)
 8001662:	709a      	strb	r2, [r3, #2]
 8001664:	e02e      	b.n	80016c4 <_Z10StartGetBTPv+0x6a0>
				} else {
					gameHID.ps4ButtonsTag.button_start = 0;
 8001666:	4a19      	ldr	r2, [pc, #100]	; (80016cc <_Z10StartGetBTPv+0x6a8>)
 8001668:	7993      	ldrb	r3, [r2, #6]
 800166a:	f36f 0382 	bfc	r3, #2, #1
 800166e:	7193      	strb	r3, [r2, #6]
					xboxHID.dButtons ^= XBOX_START_BTN;
 8001670:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <_Z10StartGetBTPv+0x6ac>)
 8001672:	789b      	ldrb	r3, [r3, #2]
 8001674:	f083 0310 	eor.w	r3, r3, #16
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <_Z10StartGetBTPv+0x6ac>)
 800167c:	709a      	strb	r2, [r3, #2]
 800167e:	e021      	b.n	80016c4 <_Z10StartGetBTPv+0x6a0>
				}

		} else if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8001680:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001684:	4814      	ldr	r0, [pc, #80]	; (80016d8 <_Z10StartGetBTPv+0x6b4>)
 8001686:	f000 fe85 	bl	8002394 <HAL_GPIO_ReadPin>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	bf0c      	ite	eq
 8001690:	2301      	moveq	r3, #1
 8001692:	2300      	movne	r3, #0
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d011      	beq.n	80016be <_Z10StartGetBTPv+0x69a>
			if (!buttonPressed) {
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <_Z10StartGetBTPv+0x6b8>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	f083 0301 	eor.w	r3, r3, #1
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d006      	beq.n	80016b6 <_Z10StartGetBTPv+0x692>
				Serial.print(F("\r\nButton Pressed"));
 80016a8:	490d      	ldr	r1, [pc, #52]	; (80016e0 <_Z10StartGetBTPv+0x6bc>)
 80016aa:	480e      	ldr	r0, [pc, #56]	; (80016e4 <_Z10StartGetBTPv+0x6c0>)
 80016ac:	f7fe ff76 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
				PS4.pair(); // Start paring routine if user button was just pressed
 80016b0:	480d      	ldr	r0, [pc, #52]	; (80016e8 <_Z10StartGetBTPv+0x6c4>)
 80016b2:	f7ff f92e 	bl	8000912 <_ZN5BTHID4pairEv>
			}
			buttonPressed = true;
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <_Z10StartGetBTPv+0x6b8>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	701a      	strb	r2, [r3, #0]
 80016bc:	e002      	b.n	80016c4 <_Z10StartGetBTPv+0x6a0>
		} else
			buttonPressed = false;
 80016be:	4b07      	ldr	r3, [pc, #28]	; (80016dc <_Z10StartGetBTPv+0x6b8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]


    osDelay(1);
 80016c4:	2001      	movs	r0, #1
 80016c6:	f007 fced 	bl	80090a4 <osDelay>
		  if(entered_xid_req) {
 80016ca:	e508      	b.n	80010de <_Z10StartGetBTPv+0xba>
 80016cc:	20000624 	.word	0x20000624
 80016d0:	2000063c 	.word	0x2000063c
 80016d4:	200005d0 	.word	0x200005d0
 80016d8:	40020800 	.word	0x40020800
 80016dc:	20000620 	.word	0x20000620
 80016e0:	080126ac 	.word	0x080126ac
 80016e4:	20000370 	.word	0x20000370
 80016e8:	20000558 	.word	0x20000558

080016ec <_Z12StartSendUSBPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendUSB */
void StartSendUSB(void *argument)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendUSB */
	MX_USB_DEVICE_Init();
 80016f4:	f00a f94a 	bl	800b98c <MX_USB_DEVICE_Init>
#endif

#if OG_XBOX_SETUP
	//Serial.print(xboxHID.leftStickX);

	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &xboxHID, sizeof(struct xboxHID_t));
 80016f8:	2214      	movs	r2, #20
 80016fa:	4904      	ldr	r1, [pc, #16]	; (800170c <_Z12StartSendUSBPv+0x20>)
 80016fc:	4804      	ldr	r0, [pc, #16]	; (8001710 <_Z12StartSendUSBPv+0x24>)
 80016fe:	f006 f997 	bl	8007a30 <USBD_HID_SendReport>
#endif
    osDelay(1);
 8001702:	2001      	movs	r0, #1
 8001704:	f007 fcce 	bl	80090a4 <osDelay>
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &xboxHID, sizeof(struct xboxHID_t));
 8001708:	e7f6      	b.n	80016f8 <_Z12StartSendUSBPv+0xc>
 800170a:	bf00      	nop
 800170c:	2000063c 	.word	0x2000063c
 8001710:	20005078 	.word	0x20005078

08001714 <HAL_TIM_PeriodElapsedCallback>:
  }
  /* USER CODE END StartSendUSB */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a04      	ldr	r2, [pc, #16]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d101      	bne.n	800172a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001726:	f000 fb7b 	bl	8001e20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40001c00 	.word	0x40001c00

08001738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	Serial.print("\r\nSomething went wrong!");
 800173c:	4903      	ldr	r1, [pc, #12]	; (800174c <Error_Handler+0x14>)
 800173e:	4804      	ldr	r0, [pc, #16]	; (8001750 <Error_Handler+0x18>)
 8001740:	f7fe ff3a 	bl	80005b8 <_ZN5Print5printEPKc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001744:	b672      	cpsid	i
}
 8001746:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001748:	e7fe      	b.n	8001748 <Error_Handler+0x10>
 800174a:	bf00      	nop
 800174c:	080126c0 	.word	0x080126c0
 8001750:	20000370 	.word	0x20000370

08001754 <_ZN8MAX3421eI3P102P9E4InitEv>:
        return ( i);
}

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
template< typename SPI_SS, typename INTR >
int8_t MAX3421e< SPI_SS, INTR >::Init() {
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
        XMEM_ACQUIRE_SPI();
        // Moved here.
        // you really should not init hardware in the constructor when it involves locks.
        // Also avoids the vbus flicker issue confusing some devices.
        /* pin and peripheral setup */
        SPI_SS::SetDirWrite();
 800175c:	f7ff f8ac 	bl	80008b8 <_ZN3P1011SetDirWriteEv>
        SPI_SS::Set();
 8001760:	f7ff f892 	bl	8000888 <_ZN3P103SetEv>
        spi::init();
 8001764:	f000 f845 	bl	80017f2 <_ZN3SPiI3P133P113P123P10E4initEv>
        INTR::SetDirRead();
 8001768:	f7ff f878 	bl	800085c <_ZN2P910SetDirReadEv>
        XMEM_RELEASE_SPI();
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 800176c:	2218      	movs	r2, #24
 800176e:	2188      	movs	r1, #136	; 0x88
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 f845 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f864 	bl	8001844 <_ZN8MAX3421eI3P102P9E5resetEv>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	bf0c      	ite	eq
 8001782:	2301      	moveq	r3, #1
 8001784:	2300      	movne	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <_ZN8MAX3421eI3P102P9E4InitEv+0x3e>
                return ( -1);
 800178c:	f04f 33ff 	mov.w	r3, #4294967295
 8001790:	e02b      	b.n	80017ea <_ZN8MAX3421eI3P102P9E4InitEv+0x96>
        }

        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 8001792:	22c1      	movs	r2, #193	; 0xc1
 8001794:	21d8      	movs	r1, #216	; 0xd8
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f832 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 800179c:	2260      	movs	r2, #96	; 0x60
 800179e:	21d0      	movs	r1, #208	; 0xd0
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 f82d 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        /* check if device is connected */
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 80017a6:	2204      	movs	r2, #4
 80017a8:	21e8      	movs	r1, #232	; 0xe8
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f828 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 80017b0:	21e8      	movs	r1, #232	; 0xe8
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f876 	bl	80018a4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80017b8:	4603      	mov	r3, r0
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	2b00      	cmp	r3, #0
 80017c0:	bf0c      	ite	eq
 80017c2:	2301      	moveq	r3, #1
 80017c4:	2300      	movne	r3, #0
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d000      	beq.n	80017ce <_ZN8MAX3421eI3P102P9E4InitEv+0x7a>
 80017cc:	e7f0      	b.n	80017b0 <_ZN8MAX3421eI3P102P9E4InitEv+0x5c>

        busprobe(); //check if anything is connected
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f88a 	bl	80018e8 <_ZN8MAX3421eI3P102P9E8busprobeEv>

        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 80017d4:	2220      	movs	r2, #32
 80017d6:	21c8      	movs	r1, #200	; 0xc8
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f811 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
 80017de:	2201      	movs	r2, #1
 80017e0:	2180      	movs	r1, #128	; 0x80
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f80c 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return ( 0);
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_ZN3SPiI3P133P113P123P10E4initEv>:
        static void init() {
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
        }
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>:
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	70fb      	strb	r3, [r7, #3]
 800180c:	4613      	mov	r3, r2
 800180e:	70bb      	strb	r3, [r7, #2]
        SPI_SS::Clear();
 8001810:	f7ff f846 	bl	80008a0 <_ZN3P105ClearEv>
        c[0] = reg | 0x02;
 8001814:	78fb      	ldrb	r3, [r7, #3]
 8001816:	f043 0302 	orr.w	r3, r3, #2
 800181a:	b2db      	uxtb	r3, r3
 800181c:	733b      	strb	r3, [r7, #12]
        c[1] = data;
 800181e:	78bb      	ldrb	r3, [r7, #2]
 8001820:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(&SPI_Handle, c, 2, HAL_MAX_DELAY);
 8001822:	f107 010c 	add.w	r1, r7, #12
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
 800182a:	2202      	movs	r2, #2
 800182c:	4804      	ldr	r0, [pc, #16]	; (8001840 <_ZN8MAX3421eI3P102P9E5regWrEhh+0x40>)
 800182e:	f003 f8e8 	bl	8004a02 <HAL_SPI_Transmit>
        SPI_SS::Set();
 8001832:	f7ff f829 	bl	8000888 <_ZN3P103SetEv>
        return;
 8001836:	bf00      	nop
};
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200002d4 	.word	0x200002d4

08001844 <_ZN8MAX3421eI3P102P9E5resetEv>:
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
        uint16_t i = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	81fb      	strh	r3, [r7, #14]
        regWr(rUSBCTL, bmCHIPRES);
 8001850:	2220      	movs	r2, #32
 8001852:	2178      	movs	r1, #120	; 0x78
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ffd3 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rUSBCTL, 0x00);
 800185a:	2200      	movs	r2, #0
 800185c:	2178      	movs	r1, #120	; 0x78
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff ffce 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(++i) {
 8001864:	89fb      	ldrh	r3, [r7, #14]
 8001866:	3301      	adds	r3, #1
 8001868:	81fb      	strh	r3, [r7, #14]
 800186a:	89fb      	ldrh	r3, [r7, #14]
 800186c:	2b00      	cmp	r3, #0
 800186e:	bf14      	ite	ne
 8001870:	2301      	movne	r3, #1
 8001872:	2300      	moveq	r3, #0
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00f      	beq.n	800189a <_ZN8MAX3421eI3P102P9E5resetEv+0x56>
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 800187a:	2168      	movs	r1, #104	; 0x68
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f811 	bl	80018a4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001882:	4603      	mov	r3, r0
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	bf14      	ite	ne
 800188c:	2301      	movne	r3, #1
 800188e:	2300      	moveq	r3, #0
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d100      	bne.n	8001898 <_ZN8MAX3421eI3P102P9E5resetEv+0x54>
        while(++i) {
 8001896:	e7e5      	b.n	8001864 <_ZN8MAX3421eI3P102P9E5resetEv+0x20>
                        break;
 8001898:	bf00      	nop
        return ( i);
 800189a:	89fb      	ldrh	r3, [r7, #14]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <_ZN8MAX3421eI3P102P9E5regRdEh>:
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	70fb      	strb	r3, [r7, #3]
        SPI_SS::Clear();
 80018b0:	f7fe fff6 	bl	80008a0 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 80018b4:	1cf9      	adds	r1, r7, #3
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ba:	2201      	movs	r2, #1
 80018bc:	4809      	ldr	r0, [pc, #36]	; (80018e4 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 80018be:	f003 f8a0 	bl	8004a02 <HAL_SPI_Transmit>
        uint8_t rv = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	73fb      	strb	r3, [r7, #15]
        HAL_SPI_Receive(&SPI_Handle, &rv, 1, HAL_MAX_DELAY);
 80018c6:	f107 010f 	add.w	r1, r7, #15
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295
 80018ce:	2201      	movs	r2, #1
 80018d0:	4804      	ldr	r0, [pc, #16]	; (80018e4 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 80018d2:	f003 f9d2 	bl	8004c7a <HAL_SPI_Receive>
        SPI_SS::Set();
 80018d6:	f7fe ffd7 	bl	8000888 <_ZN3P103SetEv>
        return (rv);
 80018da:	7bfb      	ldrb	r3, [r7, #15]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	200002d4 	.word	0x200002d4

080018e8 <_ZN8MAX3421eI3P102P9E8busprobeEv>:
        return ( 0);
}

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
 80018f0:	21f8      	movs	r1, #248	; 0xf8
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ffd6 	bl	80018a4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80018f8:	4603      	mov	r3, r0
 80018fa:	73fb      	strb	r3, [r7, #15]
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001902:	73fb      	strb	r3, [r7, #15]
        switch(bus_sample) { //start full-speed or low-speed host
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	2bc0      	cmp	r3, #192	; 0xc0
 8001908:	d04a      	beq.n	80019a0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xb8>
 800190a:	2bc0      	cmp	r3, #192	; 0xc0
 800190c:	dc55      	bgt.n	80019ba <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 800190e:	2b80      	cmp	r3, #128	; 0x80
 8001910:	d006      	beq.n	8001920 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x38>
 8001912:	2b80      	cmp	r3, #128	; 0x80
 8001914:	dc51      	bgt.n	80019ba <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 8001916:	2b00      	cmp	r3, #0
 8001918:	d046      	beq.n	80019a8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xc0>
 800191a:	2b40      	cmp	r3, #64	; 0x40
 800191c:	d020      	beq.n	8001960 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x78>
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
                        vbusState = SE0;
                        break;
        }//end switch( bus_sample )
}
 800191e:	e04c      	b.n	80019ba <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8001920:	21d8      	movs	r1, #216	; 0xd8
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ffbe 	bl	80018a4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001928:	4603      	mov	r3, r0
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	bf0c      	ite	eq
 8001932:	2301      	moveq	r3, #1
 8001934:	2300      	movne	r3, #0
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	d008      	beq.n	800194e <_ZN8MAX3421eI3P102P9E8busprobeEv+0x66>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 800193c:	22c9      	movs	r2, #201	; 0xc9
 800193e:	21d8      	movs	r1, #216	; 0xd8
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ff5d 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 8001946:	4b1f      	ldr	r3, [pc, #124]	; (80019c4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001948:	2202      	movs	r2, #2
 800194a:	701a      	strb	r2, [r3, #0]
                        break;
 800194c:	e035      	b.n	80019ba <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 800194e:	22cb      	movs	r2, #203	; 0xcb
 8001950:	21d8      	movs	r1, #216	; 0xd8
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ff54 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8001958:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800195a:	2203      	movs	r2, #3
 800195c:	701a      	strb	r2, [r3, #0]
                        break;
 800195e:	e02c      	b.n	80019ba <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8001960:	21d8      	movs	r1, #216	; 0xd8
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ff9e 	bl	80018a4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001968:	4603      	mov	r3, r0
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	bf0c      	ite	eq
 8001972:	2301      	moveq	r3, #1
 8001974:	2300      	movne	r3, #0
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	d008      	beq.n	800198e <_ZN8MAX3421eI3P102P9E8busprobeEv+0xa6>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 800197c:	22cb      	movs	r2, #203	; 0xcb
 800197e:	21d8      	movs	r1, #216	; 0xd8
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff ff3d 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8001986:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001988:	2203      	movs	r2, #3
 800198a:	701a      	strb	r2, [r3, #0]
                        break;
 800198c:	e015      	b.n	80019ba <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 800198e:	22c9      	movs	r2, #201	; 0xc9
 8001990:	21d8      	movs	r1, #216	; 0xd8
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff ff34 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 8001998:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800199a:	2202      	movs	r2, #2
 800199c:	701a      	strb	r2, [r3, #0]
                        break;
 800199e:	e00c      	b.n	80019ba <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        vbusState = SE1;
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]
                        break;
 80019a6:	e008      	b.n	80019ba <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 80019a8:	22d1      	movs	r2, #209	; 0xd1
 80019aa:	21d8      	movs	r1, #216	; 0xd8
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff ff27 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        vbusState = SE0;
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
                        break;
 80019b8:	bf00      	nop
}
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000650 	.word	0x20000650

080019c8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d115      	bne.n	8001a04 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019de:	4293      	cmp	r3, r2
 80019e0:	d110      	bne.n	8001a04 <_Z41__static_initialization_and_destruction_0ii+0x3c>
SerialClass Serial(&huart2);
 80019e2:	490a      	ldr	r1, [pc, #40]	; (8001a0c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80019e4:	480a      	ldr	r0, [pc, #40]	; (8001a10 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80019e6:	f7fe ff23 	bl	8000830 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>
USB Usb;
 80019ea:	480a      	ldr	r0, [pc, #40]	; (8001a14 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80019ec:	f00f f868 	bl	8010ac0 <_ZN3USBC1Ev>
BTD Btd(&Usb);
 80019f0:	4908      	ldr	r1, [pc, #32]	; (8001a14 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80019f2:	4809      	ldr	r0, [pc, #36]	; (8001a18 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80019f4:	f00a fe68 	bl	800c6c8 <_ZN3BTDC1EP3USB>
PS4BT PS4(&Btd);
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	4906      	ldr	r1, [pc, #24]	; (8001a18 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80019fe:	4808      	ldr	r0, [pc, #32]	; (8001a20 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001a00:	f7ff f804 	bl	8000a0c <_ZN5PS4BTC1EP3BTDbPKc>
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000240 	.word	0x20000240
 8001a10:	20000370 	.word	0x20000370
 8001a14:	20000384 	.word	0x20000384
 8001a18:	20000440 	.word	0x20000440
 8001a1c:	080126d8 	.word	0x080126d8
 8001a20:	20000558 	.word	0x20000558

08001a24 <_GLOBAL__sub_I_hspi1>:
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	f7ff ffcb 	bl	80019c8 <_Z41__static_initialization_and_destruction_0ii>
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_MspInit+0x54>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	4a11      	ldr	r2, [pc, #68]	; (8001a88 <HAL_MspInit+0x54>)
 8001a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a48:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <HAL_MspInit+0x54>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	603b      	str	r3, [r7, #0]
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_MspInit+0x54>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <HAL_MspInit+0x54>)
 8001a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a64:	6413      	str	r3, [r2, #64]	; 0x40
 8001a66:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <HAL_MspInit+0x54>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	210f      	movs	r1, #15
 8001a76:	f06f 0001 	mvn.w	r0, #1
 8001a7a:	f000 facd 	bl	8002018 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800

08001a8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	; 0x28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a19      	ldr	r2, [pc, #100]	; (8001b10 <HAL_SPI_MspInit+0x84>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d12b      	bne.n	8001b06 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <HAL_SPI_MspInit+0x88>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	4a17      	ldr	r2, [pc, #92]	; (8001b14 <HAL_SPI_MspInit+0x88>)
 8001ab8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001abc:	6453      	str	r3, [r2, #68]	; 0x44
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <HAL_SPI_MspInit+0x88>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <HAL_SPI_MspInit+0x88>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a10      	ldr	r2, [pc, #64]	; (8001b14 <HAL_SPI_MspInit+0x88>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <HAL_SPI_MspInit+0x88>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ae6:	23e0      	movs	r3, #224	; 0xe0
 8001ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af2:	2303      	movs	r3, #3
 8001af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001af6:	2305      	movs	r3, #5
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4619      	mov	r1, r3
 8001b00:	4805      	ldr	r0, [pc, #20]	; (8001b18 <HAL_SPI_MspInit+0x8c>)
 8001b02:	f000 fab3 	bl	800206c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b06:	bf00      	nop
 8001b08:	3728      	adds	r7, #40	; 0x28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40013000 	.word	0x40013000
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40020000 	.word	0x40020000

08001b1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0e      	ldr	r2, [pc, #56]	; (8001b64 <HAL_TIM_Base_MspInit+0x48>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d115      	bne.n	8001b5a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <HAL_TIM_Base_MspInit+0x4c>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	4a0c      	ldr	r2, [pc, #48]	; (8001b68 <HAL_TIM_Base_MspInit+0x4c>)
 8001b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_TIM_Base_MspInit+0x4c>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2105      	movs	r1, #5
 8001b4e:	202d      	movs	r0, #45	; 0x2d
 8001b50:	f000 fa62 	bl	8002018 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001b54:	202d      	movs	r0, #45	; 0x2d
 8001b56:	f000 fa7b 	bl	8002050 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40002000 	.word	0x40002000
 8001b68:	40023800 	.word	0x40023800

08001b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	; 0x28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a19      	ldr	r2, [pc, #100]	; (8001bf0 <HAL_UART_MspInit+0x84>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d12b      	bne.n	8001be6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <HAL_UART_MspInit+0x88>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	4a17      	ldr	r2, [pc, #92]	; (8001bf4 <HAL_UART_MspInit+0x88>)
 8001b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_UART_MspInit+0x88>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <HAL_UART_MspInit+0x88>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a10      	ldr	r2, [pc, #64]	; (8001bf4 <HAL_UART_MspInit+0x88>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <HAL_UART_MspInit+0x88>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bc6:	230c      	movs	r3, #12
 8001bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bd6:	2307      	movs	r3, #7
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <HAL_UART_MspInit+0x8c>)
 8001be2:	f000 fa43 	bl	800206c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001be6:	bf00      	nop
 8001be8:	3728      	adds	r7, #40	; 0x28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40004400 	.word	0x40004400
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020000 	.word	0x40020000

08001bfc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08c      	sub	sp, #48	; 0x30
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	202c      	movs	r0, #44	; 0x2c
 8001c12:	f000 fa01 	bl	8002018 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001c16:	202c      	movs	r0, #44	; 0x2c
 8001c18:	f000 fa1a 	bl	8002050 <HAL_NVIC_EnableIRQ>
  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <HAL_InitTick+0xa4>)
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	4a1e      	ldr	r2, [pc, #120]	; (8001ca0 <HAL_InitTick+0xa4>)
 8001c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ca0 <HAL_InitTick+0xa4>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c38:	f107 0210 	add.w	r2, r7, #16
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	4611      	mov	r1, r2
 8001c42:	4618      	mov	r0, r3
 8001c44:	f001 fea8 	bl	8003998 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001c48:	f001 fe7e 	bl	8003948 <HAL_RCC_GetPCLK1Freq>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c54:	4a13      	ldr	r2, [pc, #76]	; (8001ca4 <HAL_InitTick+0xa8>)
 8001c56:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5a:	0c9b      	lsrs	r3, r3, #18
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <HAL_InitTick+0xac>)
 8001c62:	4a12      	ldr	r2, [pc, #72]	; (8001cac <HAL_InitTick+0xb0>)
 8001c64:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <HAL_InitTick+0xac>)
 8001c68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c6c:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8001c6e:	4a0e      	ldr	r2, [pc, #56]	; (8001ca8 <HAL_InitTick+0xac>)
 8001c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c72:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <HAL_InitTick+0xac>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <HAL_InitTick+0xac>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8001c80:	4809      	ldr	r0, [pc, #36]	; (8001ca8 <HAL_InitTick+0xac>)
 8001c82:	f003 fbdd 	bl	8005440 <HAL_TIM_Base_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d104      	bne.n	8001c96 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8001c8c:	4806      	ldr	r0, [pc, #24]	; (8001ca8 <HAL_InitTick+0xac>)
 8001c8e:	f003 fc27 	bl	80054e0 <HAL_TIM_Base_Start_IT>
 8001c92:	4603      	mov	r3, r0
 8001c94:	e000      	b.n	8001c98 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3730      	adds	r7, #48	; 0x30
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	431bde83 	.word	0x431bde83
 8001ca8:	20004f88 	.word	0x20004f88
 8001cac:	40001c00 	.word	0x40001c00

08001cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <NMI_Handler+0x4>

08001cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cba:	e7fe      	b.n	8001cba <HardFault_Handler+0x4>

08001cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <MemManage_Handler+0x4>

08001cc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc6:	e7fe      	b.n	8001cc6 <BusFault_Handler+0x4>

08001cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <UsageFault_Handler+0x4>

08001cce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001ce0:	4802      	ldr	r0, [pc, #8]	; (8001cec <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001ce2:	f003 fc6d 	bl	80055c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20004f88 	.word	0x20004f88

08001cf0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001cf4:	4802      	ldr	r0, [pc, #8]	; (8001d00 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001cf6:	f003 fc63 	bl	80055c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000284 	.word	0x20000284

08001d04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d08:	4802      	ldr	r0, [pc, #8]	; (8001d14 <OTG_FS_IRQHandler+0x10>)
 8001d0a:	f000 fccb 	bl	80026a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20005548 	.word	0x20005548

08001d18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
	return 1;
 8001d1c:	2301      	movs	r3, #1
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <_kill>:

int _kill(int pid, int sig)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d32:	f010 fbaf 	bl	8012494 <__errno>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2216      	movs	r2, #22
 8001d3a:	601a      	str	r2, [r3, #0]
	return -1;
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <_exit>:

void _exit (int status)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ffe7 	bl	8001d28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d5a:	e7fe      	b.n	8001d5a <_exit+0x12>

08001d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d60:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <SystemInit+0x28>)
 8001d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d66:	4a07      	ldr	r2, [pc, #28]	; (8001d84 <SystemInit+0x28>)
 8001d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <SystemInit+0x28>)
 8001d72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d76:	609a      	str	r2, [r3, #8]
#endif
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dc0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d8e:	e003      	b.n	8001d98 <LoopCopyDataInit>

08001d90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d90:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d96:	3104      	adds	r1, #4

08001d98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d98:	480b      	ldr	r0, [pc, #44]	; (8001dc8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d9a:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001da0:	d3f6      	bcc.n	8001d90 <CopyDataInit>
  ldr  r2, =_sbss
 8001da2:	4a0b      	ldr	r2, [pc, #44]	; (8001dd0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001da4:	e002      	b.n	8001dac <LoopFillZerobss>

08001da6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001da6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001da8:	f842 3b04 	str.w	r3, [r2], #4

08001dac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001dae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001db0:	d3f9      	bcc.n	8001da6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001db2:	f7ff ffd3 	bl	8001d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001db6:	f010 fb73 	bl	80124a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dba:	f7fe fefb 	bl	8000bb4 <main>
  bx  lr    
 8001dbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dc0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001dc4:	08012a30 	.word	0x08012a30
  ldr  r0, =_sdata
 8001dc8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001dcc:	200001a4 	.word	0x200001a4
  ldr  r2, =_sbss
 8001dd0:	200001a4 	.word	0x200001a4
  ldr  r3, = _ebss
 8001dd4:	20005954 	.word	0x20005954

08001dd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dd8:	e7fe      	b.n	8001dd8 <ADC_IRQHandler>
	...

08001ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001de0:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <HAL_Init+0x40>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0d      	ldr	r2, [pc, #52]	; (8001e1c <HAL_Init+0x40>)
 8001de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_Init+0x40>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <HAL_Init+0x40>)
 8001df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df8:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <HAL_Init+0x40>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a07      	ldr	r2, [pc, #28]	; (8001e1c <HAL_Init+0x40>)
 8001dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e04:	2003      	movs	r0, #3
 8001e06:	f000 f8fc 	bl	8002002 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f7ff fef6 	bl	8001bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e10:	f7ff fe10 	bl	8001a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023c00 	.word	0x40023c00

08001e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_IncTick+0x20>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_IncTick+0x24>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4413      	add	r3, r2
 8001e30:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <HAL_IncTick+0x24>)
 8001e32:	6013      	str	r3, [r2, #0]
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000008 	.word	0x20000008
 8001e44:	20004fd0 	.word	0x20004fd0

08001e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <HAL_GetTick+0x14>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	20004fd0 	.word	0x20004fd0

08001e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e68:	f7ff ffee 	bl	8001e48 <HAL_GetTick>
 8001e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e78:	d005      	beq.n	8001e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <HAL_Delay+0x44>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4413      	add	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e86:	bf00      	nop
 8001e88:	f7ff ffde 	bl	8001e48 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d8f7      	bhi.n	8001e88 <HAL_Delay+0x28>
  {
  }
}
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000008 	.word	0x20000008

08001ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eda:	4a04      	ldr	r2, [pc, #16]	; (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	60d3      	str	r3, [r2, #12]
}
 8001ee0:	bf00      	nop
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	0a1b      	lsrs	r3, r3, #8
 8001efa:	f003 0307 	and.w	r3, r3, #7
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	db0b      	blt.n	8001f36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	f003 021f 	and.w	r2, r3, #31
 8001f24:	4907      	ldr	r1, [pc, #28]	; (8001f44 <__NVIC_EnableIRQ+0x38>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000e100 	.word	0xe000e100

08001f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	6039      	str	r1, [r7, #0]
 8001f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	db0a      	blt.n	8001f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	490c      	ldr	r1, [pc, #48]	; (8001f94 <__NVIC_SetPriority+0x4c>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	0112      	lsls	r2, r2, #4
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f70:	e00a      	b.n	8001f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4908      	ldr	r1, [pc, #32]	; (8001f98 <__NVIC_SetPriority+0x50>)
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	3b04      	subs	r3, #4
 8001f80:	0112      	lsls	r2, r2, #4
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	440b      	add	r3, r1
 8001f86:	761a      	strb	r2, [r3, #24]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000e100 	.word	0xe000e100
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	; 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f1c3 0307 	rsb	r3, r3, #7
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	bf28      	it	cs
 8001fba:	2304      	movcs	r3, #4
 8001fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	2b06      	cmp	r3, #6
 8001fc4:	d902      	bls.n	8001fcc <NVIC_EncodePriority+0x30>
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3b03      	subs	r3, #3
 8001fca:	e000      	b.n	8001fce <NVIC_EncodePriority+0x32>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	401a      	ands	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa01 f303 	lsl.w	r3, r1, r3
 8001fee:	43d9      	mvns	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	4313      	orrs	r3, r2
         );
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3724      	adds	r7, #36	; 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ff4c 	bl	8001ea8 <__NVIC_SetPriorityGrouping>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
 8002024:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800202a:	f7ff ff61 	bl	8001ef0 <__NVIC_GetPriorityGrouping>
 800202e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	68b9      	ldr	r1, [r7, #8]
 8002034:	6978      	ldr	r0, [r7, #20]
 8002036:	f7ff ffb1 	bl	8001f9c <NVIC_EncodePriority>
 800203a:	4602      	mov	r2, r0
 800203c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002040:	4611      	mov	r1, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff ff80 	bl	8001f48 <__NVIC_SetPriority>
}
 8002048:	bf00      	nop
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ff54 	bl	8001f0c <__NVIC_EnableIRQ>
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	; 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800207e:	2300      	movs	r3, #0
 8002080:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	e165      	b.n	8002354 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002088:	2201      	movs	r2, #1
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	f040 8154 	bne.w	800234e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d005      	beq.n	80020be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d130      	bne.n	8002120 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	2203      	movs	r2, #3
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020f4:	2201      	movs	r2, #1
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	f003 0201 	and.w	r2, r3, #1
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	2b03      	cmp	r3, #3
 800212a:	d017      	beq.n	800215c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	2203      	movs	r2, #3
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d123      	bne.n	80021b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	08da      	lsrs	r2, r3, #3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3208      	adds	r2, #8
 8002170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002174:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	220f      	movs	r2, #15
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	08da      	lsrs	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3208      	adds	r2, #8
 80021aa:	69b9      	ldr	r1, [r7, #24]
 80021ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	2203      	movs	r2, #3
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0203 	and.w	r2, r3, #3
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 80ae 	beq.w	800234e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	4b5d      	ldr	r3, [pc, #372]	; (800236c <HAL_GPIO_Init+0x300>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	4a5c      	ldr	r2, [pc, #368]	; (800236c <HAL_GPIO_Init+0x300>)
 80021fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002200:	6453      	str	r3, [r2, #68]	; 0x44
 8002202:	4b5a      	ldr	r3, [pc, #360]	; (800236c <HAL_GPIO_Init+0x300>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800220e:	4a58      	ldr	r2, [pc, #352]	; (8002370 <HAL_GPIO_Init+0x304>)
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	089b      	lsrs	r3, r3, #2
 8002214:	3302      	adds	r3, #2
 8002216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	220f      	movs	r2, #15
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a4f      	ldr	r2, [pc, #316]	; (8002374 <HAL_GPIO_Init+0x308>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d025      	beq.n	8002286 <HAL_GPIO_Init+0x21a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a4e      	ldr	r2, [pc, #312]	; (8002378 <HAL_GPIO_Init+0x30c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d01f      	beq.n	8002282 <HAL_GPIO_Init+0x216>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4d      	ldr	r2, [pc, #308]	; (800237c <HAL_GPIO_Init+0x310>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d019      	beq.n	800227e <HAL_GPIO_Init+0x212>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a4c      	ldr	r2, [pc, #304]	; (8002380 <HAL_GPIO_Init+0x314>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d013      	beq.n	800227a <HAL_GPIO_Init+0x20e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4b      	ldr	r2, [pc, #300]	; (8002384 <HAL_GPIO_Init+0x318>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d00d      	beq.n	8002276 <HAL_GPIO_Init+0x20a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a4a      	ldr	r2, [pc, #296]	; (8002388 <HAL_GPIO_Init+0x31c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d007      	beq.n	8002272 <HAL_GPIO_Init+0x206>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a49      	ldr	r2, [pc, #292]	; (800238c <HAL_GPIO_Init+0x320>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d101      	bne.n	800226e <HAL_GPIO_Init+0x202>
 800226a:	2306      	movs	r3, #6
 800226c:	e00c      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 800226e:	2307      	movs	r3, #7
 8002270:	e00a      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 8002272:	2305      	movs	r3, #5
 8002274:	e008      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 8002276:	2304      	movs	r3, #4
 8002278:	e006      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 800227a:	2303      	movs	r3, #3
 800227c:	e004      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 800227e:	2302      	movs	r3, #2
 8002280:	e002      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 8002286:	2300      	movs	r3, #0
 8002288:	69fa      	ldr	r2, [r7, #28]
 800228a:	f002 0203 	and.w	r2, r2, #3
 800228e:	0092      	lsls	r2, r2, #2
 8002290:	4093      	lsls	r3, r2
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002298:	4935      	ldr	r1, [pc, #212]	; (8002370 <HAL_GPIO_Init+0x304>)
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	089b      	lsrs	r3, r3, #2
 800229e:	3302      	adds	r3, #2
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022a6:	4b3a      	ldr	r3, [pc, #232]	; (8002390 <HAL_GPIO_Init+0x324>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022ca:	4a31      	ldr	r2, [pc, #196]	; (8002390 <HAL_GPIO_Init+0x324>)
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022d0:	4b2f      	ldr	r3, [pc, #188]	; (8002390 <HAL_GPIO_Init+0x324>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022f4:	4a26      	ldr	r2, [pc, #152]	; (8002390 <HAL_GPIO_Init+0x324>)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022fa:	4b25      	ldr	r3, [pc, #148]	; (8002390 <HAL_GPIO_Init+0x324>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800231e:	4a1c      	ldr	r2, [pc, #112]	; (8002390 <HAL_GPIO_Init+0x324>)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002324:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <HAL_GPIO_Init+0x324>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002348:	4a11      	ldr	r2, [pc, #68]	; (8002390 <HAL_GPIO_Init+0x324>)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3301      	adds	r3, #1
 8002352:	61fb      	str	r3, [r7, #28]
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	2b0f      	cmp	r3, #15
 8002358:	f67f ae96 	bls.w	8002088 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	3724      	adds	r7, #36	; 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800
 8002370:	40013800 	.word	0x40013800
 8002374:	40020000 	.word	0x40020000
 8002378:	40020400 	.word	0x40020400
 800237c:	40020800 	.word	0x40020800
 8002380:	40020c00 	.word	0x40020c00
 8002384:	40021000 	.word	0x40021000
 8002388:	40021400 	.word	0x40021400
 800238c:	40021800 	.word	0x40021800
 8002390:	40013c00 	.word	0x40013c00

08002394 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	887b      	ldrh	r3, [r7, #2]
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
 80023b0:	e001      	b.n	80023b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023b2:	2300      	movs	r3, #0
 80023b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	807b      	strh	r3, [r7, #2]
 80023d0:	4613      	mov	r3, r2
 80023d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023d4:	787b      	ldrb	r3, [r7, #1]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023da:	887a      	ldrh	r2, [r7, #2]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023e0:	e003      	b.n	80023ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023e2:	887b      	ldrh	r3, [r7, #2]
 80023e4:	041a      	lsls	r2, r3, #16
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	619a      	str	r2, [r3, #24]
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023f8:	b08f      	sub	sp, #60	; 0x3c
 80023fa:	af0a      	add	r7, sp, #40	; 0x28
 80023fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e116      	b.n	8002636 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d106      	bne.n	8002428 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f009 fbf2 	bl	800bc0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2203      	movs	r2, #3
 800242c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002438:	2b00      	cmp	r3, #0
 800243a:	d102      	bne.n	8002442 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f003 ff47 	bl	80062da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	687e      	ldr	r6, [r7, #4]
 8002454:	466d      	mov	r5, sp
 8002456:	f106 0410 	add.w	r4, r6, #16
 800245a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800245c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800245e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002460:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002462:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002466:	e885 0003 	stmia.w	r5, {r0, r1}
 800246a:	1d33      	adds	r3, r6, #4
 800246c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800246e:	6838      	ldr	r0, [r7, #0]
 8002470:	f003 fe1e 	bl	80060b0 <USB_CoreInit>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d005      	beq.n	8002486 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2202      	movs	r2, #2
 800247e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e0d7      	b.n	8002636 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2100      	movs	r1, #0
 800248c:	4618      	mov	r0, r3
 800248e:	f003 ff35 	bl	80062fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002492:	2300      	movs	r3, #0
 8002494:	73fb      	strb	r3, [r7, #15]
 8002496:	e04a      	b.n	800252e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002498:	7bfa      	ldrb	r2, [r7, #15]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	333d      	adds	r3, #61	; 0x3d
 80024a8:	2201      	movs	r2, #1
 80024aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024ac:	7bfa      	ldrb	r2, [r7, #15]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	333c      	adds	r3, #60	; 0x3c
 80024bc:	7bfa      	ldrb	r2, [r7, #15]
 80024be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024c0:	7bfa      	ldrb	r2, [r7, #15]
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	b298      	uxth	r0, r3
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	1a9b      	subs	r3, r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	3342      	adds	r3, #66	; 0x42
 80024d4:	4602      	mov	r2, r0
 80024d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024d8:	7bfa      	ldrb	r2, [r7, #15]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	333f      	adds	r3, #63	; 0x3f
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024ec:	7bfa      	ldrb	r2, [r7, #15]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	3344      	adds	r3, #68	; 0x44
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002500:	7bfa      	ldrb	r2, [r7, #15]
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	1a9b      	subs	r3, r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	3348      	adds	r3, #72	; 0x48
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002514:	7bfa      	ldrb	r2, [r7, #15]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	1a9b      	subs	r3, r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	3350      	adds	r3, #80	; 0x50
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	3301      	adds	r3, #1
 800252c:	73fb      	strb	r3, [r7, #15]
 800252e:	7bfa      	ldrb	r2, [r7, #15]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	429a      	cmp	r2, r3
 8002536:	d3af      	bcc.n	8002498 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002538:	2300      	movs	r3, #0
 800253a:	73fb      	strb	r3, [r7, #15]
 800253c:	e044      	b.n	80025c8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	1a9b      	subs	r3, r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002554:	7bfa      	ldrb	r2, [r7, #15]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002566:	7bfa      	ldrb	r2, [r7, #15]
 8002568:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800256a:	7bfa      	ldrb	r2, [r7, #15]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	1a9b      	subs	r3, r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002580:	7bfa      	ldrb	r2, [r7, #15]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002596:	7bfa      	ldrb	r2, [r7, #15]
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	440b      	add	r3, r1
 80025a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025ac:	7bfa      	ldrb	r2, [r7, #15]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	1a9b      	subs	r3, r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	3301      	adds	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
 80025c8:	7bfa      	ldrb	r2, [r7, #15]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d3b5      	bcc.n	800253e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	603b      	str	r3, [r7, #0]
 80025d8:	687e      	ldr	r6, [r7, #4]
 80025da:	466d      	mov	r5, sp
 80025dc:	f106 0410 	add.w	r4, r6, #16
 80025e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80025f0:	1d33      	adds	r3, r6, #4
 80025f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025f4:	6838      	ldr	r0, [r7, #0]
 80025f6:	f003 feab 	bl	8006350 <USB_DevInit>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d005      	beq.n	800260c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e014      	b.n	8002636 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	2b01      	cmp	r3, #1
 8002622:	d102      	bne.n	800262a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f001 f879 	bl	800371c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f004 fee6 	bl	8007400 <USB_DevDisconnect>

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800263e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b084      	sub	sp, #16
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002652:	2b01      	cmp	r3, #1
 8002654:	d101      	bne.n	800265a <HAL_PCD_Start+0x1c>
 8002656:	2302      	movs	r3, #2
 8002658:	e020      	b.n	800269c <HAL_PCD_Start+0x5e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002666:	2b01      	cmp	r3, #1
 8002668:	d109      	bne.n	800267e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800266e:	2b01      	cmp	r3, #1
 8002670:	d005      	beq.n	800267e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002676:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f003 fe18 	bl	80062b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f004 fe96 	bl	80073be <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026a4:	b590      	push	{r4, r7, lr}
 80026a6:	b08d      	sub	sp, #52	; 0x34
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f004 ff54 	bl	8007568 <USB_GetMode>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f040 83ca 	bne.w	8002e5c <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f004 feb8 	bl	8007442 <USB_ReadInterrupts>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 83c0 	beq.w	8002e5a <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f004 feaf 	bl	8007442 <USB_ReadInterrupts>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d107      	bne.n	80026fe <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	695a      	ldr	r2, [r3, #20]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f002 0202 	and.w	r2, r2, #2
 80026fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f004 fe9d 	bl	8007442 <USB_ReadInterrupts>
 8002708:	4603      	mov	r3, r0
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	2b10      	cmp	r3, #16
 8002710:	d161      	bne.n	80027d6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699a      	ldr	r2, [r3, #24]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0210 	bic.w	r2, r2, #16
 8002720:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	f003 020f 	and.w	r2, r3, #15
 800272e:	4613      	mov	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	4413      	add	r3, r2
 800273e:	3304      	adds	r3, #4
 8002740:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	0c5b      	lsrs	r3, r3, #17
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	2b02      	cmp	r3, #2
 800274c:	d124      	bne.n	8002798 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002754:	4013      	ands	r3, r2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d035      	beq.n	80027c6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	091b      	lsrs	r3, r3, #4
 8002762:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002764:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002768:	b29b      	uxth	r3, r3
 800276a:	461a      	mov	r2, r3
 800276c:	6a38      	ldr	r0, [r7, #32]
 800276e:	f004 fd03 	bl	8007178 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800277e:	441a      	add	r2, r3
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	699a      	ldr	r2, [r3, #24]
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	091b      	lsrs	r3, r3, #4
 800278c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002790:	441a      	add	r2, r3
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	619a      	str	r2, [r3, #24]
 8002796:	e016      	b.n	80027c6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	0c5b      	lsrs	r3, r3, #17
 800279c:	f003 030f 	and.w	r3, r3, #15
 80027a0:	2b06      	cmp	r3, #6
 80027a2:	d110      	bne.n	80027c6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80027aa:	2208      	movs	r2, #8
 80027ac:	4619      	mov	r1, r3
 80027ae:	6a38      	ldr	r0, [r7, #32]
 80027b0:	f004 fce2 	bl	8007178 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	699a      	ldr	r2, [r3, #24]
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	091b      	lsrs	r3, r3, #4
 80027bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027c0:	441a      	add	r2, r3
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699a      	ldr	r2, [r3, #24]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f042 0210 	orr.w	r2, r2, #16
 80027d4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f004 fe31 	bl	8007442 <USB_ReadInterrupts>
 80027e0:	4603      	mov	r3, r0
 80027e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80027ea:	d16e      	bne.n	80028ca <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f004 fe37 	bl	8007468 <USB_ReadDevAllOutEpInterrupt>
 80027fa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80027fc:	e062      	b.n	80028c4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80027fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d057      	beq.n	80028b8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f004 fe5c 	bl	80074d0 <USB_ReadDevOutEPInterrupt>
 8002818:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00c      	beq.n	800283e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	4413      	add	r3, r2
 800282c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002830:	461a      	mov	r2, r3
 8002832:	2301      	movs	r3, #1
 8002834:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002836:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 fdc5 	bl	80033c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00c      	beq.n	8002862 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	4413      	add	r3, r2
 8002850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002854:	461a      	mov	r2, r3
 8002856:	2308      	movs	r3, #8
 8002858:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800285a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 febf 	bl	80035e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	2b00      	cmp	r3, #0
 800286a:	d008      	beq.n	800287e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	4413      	add	r3, r2
 8002874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002878:	461a      	mov	r2, r3
 800287a:	2310      	movs	r3, #16
 800287c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f003 0320 	and.w	r3, r3, #32
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	4413      	add	r3, r2
 8002890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002894:	461a      	mov	r2, r3
 8002896:	2320      	movs	r3, #32
 8002898:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d009      	beq.n	80028b8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028b0:	461a      	mov	r2, r3
 80028b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028b6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	3301      	adds	r3, #1
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c0:	085b      	lsrs	r3, r3, #1
 80028c2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d199      	bne.n	80027fe <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f004 fdb7 	bl	8007442 <USB_ReadInterrupts>
 80028d4:	4603      	mov	r3, r0
 80028d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028de:	f040 80c0 	bne.w	8002a62 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f004 fdd8 	bl	800749c <USB_ReadDevAllInEpInterrupt>
 80028ec:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80028f2:	e0b2      	b.n	8002a5a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80028f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 80a7 	beq.w	8002a4e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	4611      	mov	r1, r2
 800290a:	4618      	mov	r0, r3
 800290c:	f004 fdfe 	bl	800750c <USB_ReadDevInEPInterrupt>
 8002910:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d057      	beq.n	80029cc <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	2201      	movs	r2, #1
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	43db      	mvns	r3, r3
 8002936:	69f9      	ldr	r1, [r7, #28]
 8002938:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800293c:	4013      	ands	r3, r2
 800293e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	015a      	lsls	r2, r3, #5
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	4413      	add	r3, r2
 8002948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800294c:	461a      	mov	r2, r3
 800294e:	2301      	movs	r3, #1
 8002950:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d132      	bne.n	80029c0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	1a9b      	subs	r3, r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	3348      	adds	r3, #72	; 0x48
 800296a:	6819      	ldr	r1, [r3, #0]
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002970:	4613      	mov	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4403      	add	r3, r0
 800297a:	3344      	adds	r3, #68	; 0x44
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4419      	add	r1, r3
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002984:	4613      	mov	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4403      	add	r3, r0
 800298e:	3348      	adds	r3, #72	; 0x48
 8002990:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	2b00      	cmp	r3, #0
 8002996:	d113      	bne.n	80029c0 <HAL_PCD_IRQHandler+0x31c>
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800299c:	4613      	mov	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	3350      	adds	r3, #80	; 0x50
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d108      	bne.n	80029c0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6818      	ldr	r0, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029b8:	461a      	mov	r2, r3
 80029ba:	2101      	movs	r1, #1
 80029bc:	f004 fe06 	bl	80075cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	4619      	mov	r1, r3
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f009 f9a1 	bl	800bd0e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d008      	beq.n	80029e8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	015a      	lsls	r2, r3, #5
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	4413      	add	r3, r2
 80029de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029e2:	461a      	mov	r2, r3
 80029e4:	2308      	movs	r3, #8
 80029e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f003 0310 	and.w	r3, r3, #16
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d008      	beq.n	8002a04 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029fe:	461a      	mov	r2, r3
 8002a00:	2310      	movs	r3, #16
 8002a02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d008      	beq.n	8002a20 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	2340      	movs	r3, #64	; 0x40
 8002a1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d008      	beq.n	8002a3c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	015a      	lsls	r2, r3, #5
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a36:	461a      	mov	r2, r3
 8002a38:	2302      	movs	r3, #2
 8002a3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 fc30 	bl	80032ae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	3301      	adds	r3, #1
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a56:	085b      	lsrs	r3, r3, #1
 8002a58:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f47f af49 	bne.w	80028f4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f004 fceb 	bl	8007442 <USB_ReadInterrupts>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a76:	d122      	bne.n	8002abe <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	69fa      	ldr	r2, [r7, #28]
 8002a82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a86:	f023 0301 	bic.w	r3, r3, #1
 8002a8a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d108      	bne.n	8002aa8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f009 fb71 	bl	800c188 <HAL_PCDEx_LPM_Callback>
 8002aa6:	e002      	b.n	8002aae <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f009 f9a7 	bl	800bdfc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695a      	ldr	r2, [r3, #20]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002abc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f004 fcbd 	bl	8007442 <USB_ReadInterrupts>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ad2:	d112      	bne.n	8002afa <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d102      	bne.n	8002aea <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f009 f963 	bl	800bdb0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695a      	ldr	r2, [r3, #20]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002af8:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f004 fc9f 	bl	8007442 <USB_ReadInterrupts>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b0e:	d121      	bne.n	8002b54 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695a      	ldr	r2, [r3, #20]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002b1e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d111      	bne.n	8002b4e <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b38:	089b      	lsrs	r3, r3, #2
 8002b3a:	f003 020f 	and.w	r2, r3, #15
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002b44:	2101      	movs	r1, #1
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f009 fb1e 	bl	800c188 <HAL_PCDEx_LPM_Callback>
 8002b4c:	e002      	b.n	8002b54 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f009 f92e 	bl	800bdb0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f004 fc72 	bl	8007442 <USB_ReadInterrupts>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b68:	f040 80c7 	bne.w	8002cfa <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	69fa      	ldr	r2, [r7, #28]
 8002b76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b7a:	f023 0301 	bic.w	r3, r3, #1
 8002b7e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2110      	movs	r1, #16
 8002b86:	4618      	mov	r0, r3
 8002b88:	f003 fd40 	bl	800660c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b90:	e056      	b.n	8002c40 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ba4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba8:	015a      	lsls	r2, r3, #5
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bb6:	0151      	lsls	r1, r2, #5
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	440a      	add	r2, r1
 8002bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002bc0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002bc4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd6:	0151      	lsls	r1, r2, #5
 8002bd8:	69fa      	ldr	r2, [r7, #28]
 8002bda:	440a      	add	r2, r1
 8002bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002be0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002be4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002bf8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfc:	015a      	lsls	r2, r3, #5
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c0a:	0151      	lsls	r1, r2, #5
 8002c0c:	69fa      	ldr	r2, [r7, #28]
 8002c0e:	440a      	add	r2, r1
 8002c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c18:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c2a:	0151      	lsls	r1, r2, #5
 8002c2c:	69fa      	ldr	r2, [r7, #28]
 8002c2e:	440a      	add	r2, r1
 8002c30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c38:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d3a3      	bcc.n	8002b92 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c58:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002c5c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d016      	beq.n	8002c94 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c70:	69fa      	ldr	r2, [r7, #28]
 8002c72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c76:	f043 030b 	orr.w	r3, r3, #11
 8002c7a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	69fa      	ldr	r2, [r7, #28]
 8002c88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c8c:	f043 030b 	orr.w	r3, r3, #11
 8002c90:	6453      	str	r3, [r2, #68]	; 0x44
 8002c92:	e015      	b.n	8002cc0 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	69fa      	ldr	r2, [r7, #28]
 8002c9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ca2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ca6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002caa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	69fa      	ldr	r2, [r7, #28]
 8002cb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cba:	f043 030b 	orr.w	r3, r3, #11
 8002cbe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	69fa      	ldr	r2, [r7, #28]
 8002cca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002cd2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6818      	ldr	r0, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	f004 fc71 	bl	80075cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695a      	ldr	r2, [r3, #20]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002cf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f004 fb9f 	bl	8007442 <USB_ReadInterrupts>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d0e:	d124      	bne.n	8002d5a <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f004 fc35 	bl	8007584 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f003 fcd5 	bl	80066ce <USB_GetDevSpeed>
 8002d24:	4603      	mov	r3, r0
 8002d26:	461a      	mov	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681c      	ldr	r4, [r3, #0]
 8002d30:	f000 fdfe 	bl	8003930 <HAL_RCC_GetHCLKFreq>
 8002d34:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4620      	mov	r0, r4
 8002d40:	f003 fa18 	bl	8006174 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f009 f80a 	bl	800bd5e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695a      	ldr	r2, [r3, #20]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002d58:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f004 fb6f 	bl	8007442 <USB_ReadInterrupts>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d10a      	bne.n	8002d84 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f008 ffe7 	bl	800bd42 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f002 0208 	and.w	r2, r2, #8
 8002d82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f004 fb5a 	bl	8007442 <USB_ReadInterrupts>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d98:	d10f      	bne.n	8002dba <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	4619      	mov	r1, r3
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f009 f849 	bl	800be3c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	695a      	ldr	r2, [r3, #20]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002db8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f004 fb3f 	bl	8007442 <USB_ReadInterrupts>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dce:	d10f      	bne.n	8002df0 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	4619      	mov	r1, r3
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f009 f81c 	bl	800be18 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002dee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f004 fb24 	bl	8007442 <USB_ReadInterrupts>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e04:	d10a      	bne.n	8002e1c <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f009 f82a 	bl	800be60 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695a      	ldr	r2, [r3, #20]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002e1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f004 fb0e 	bl	8007442 <USB_ReadInterrupts>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d115      	bne.n	8002e5c <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f009 f81a 	bl	800be7c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6859      	ldr	r1, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	605a      	str	r2, [r3, #4]
 8002e58:	e000      	b.n	8002e5c <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002e5a:	bf00      	nop
    }
  }
}
 8002e5c:	3734      	adds	r7, #52	; 0x34
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd90      	pop	{r4, r7, pc}

08002e62 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <HAL_PCD_SetAddress+0x1a>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e013      	b.n	8002ea4 <HAL_PCD_SetAddress+0x42>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	78fa      	ldrb	r2, [r7, #3]
 8002e88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	78fa      	ldrb	r2, [r7, #3]
 8002e92:	4611      	mov	r1, r2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f004 fa6c 	bl	8007372 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	4608      	mov	r0, r1
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4603      	mov	r3, r0
 8002ebc:	70fb      	strb	r3, [r7, #3]
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	803b      	strh	r3, [r7, #0]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002eca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	da0f      	bge.n	8002ef2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ed2:	78fb      	ldrb	r3, [r7, #3]
 8002ed4:	f003 020f 	and.w	r2, r3, #15
 8002ed8:	4613      	mov	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	1a9b      	subs	r3, r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	3338      	adds	r3, #56	; 0x38
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	705a      	strb	r2, [r3, #1]
 8002ef0:	e00f      	b.n	8002f12 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ef2:	78fb      	ldrb	r3, [r7, #3]
 8002ef4:	f003 020f 	and.w	r2, r3, #15
 8002ef8:	4613      	mov	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	4413      	add	r3, r2
 8002f08:	3304      	adds	r3, #4
 8002f0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	f003 030f 	and.w	r3, r3, #15
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f1e:	883a      	ldrh	r2, [r7, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	78ba      	ldrb	r2, [r7, #2]
 8002f28:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	785b      	ldrb	r3, [r3, #1]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d004      	beq.n	8002f3c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f3c:	78bb      	ldrb	r3, [r7, #2]
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d102      	bne.n	8002f48 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <HAL_PCD_EP_Open+0xaa>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e00e      	b.n	8002f74 <HAL_PCD_EP_Open+0xc8>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68f9      	ldr	r1, [r7, #12]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f003 fbd7 	bl	8006718 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002f72:	7afb      	ldrb	r3, [r7, #11]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	da0f      	bge.n	8002fb0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	f003 020f 	and.w	r2, r3, #15
 8002f96:	4613      	mov	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	1a9b      	subs	r3, r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	3338      	adds	r3, #56	; 0x38
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2201      	movs	r2, #1
 8002fac:	705a      	strb	r2, [r3, #1]
 8002fae:	e00f      	b.n	8002fd0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	f003 020f 	and.w	r2, r3, #15
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d101      	bne.n	8002fea <HAL_PCD_EP_Close+0x6e>
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	e00e      	b.n	8003008 <HAL_PCD_EP_Close+0x8c>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68f9      	ldr	r1, [r7, #12]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f003 fc15 	bl	8006828 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	607a      	str	r2, [r7, #4]
 800301a:	603b      	str	r3, [r7, #0]
 800301c:	460b      	mov	r3, r1
 800301e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003020:	7afb      	ldrb	r3, [r7, #11]
 8003022:	f003 020f 	and.w	r2, r3, #15
 8003026:	4613      	mov	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	1a9b      	subs	r3, r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4413      	add	r3, r2
 8003036:	3304      	adds	r3, #4
 8003038:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2200      	movs	r2, #0
 800304a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	2200      	movs	r2, #0
 8003050:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003052:	7afb      	ldrb	r3, [r7, #11]
 8003054:	f003 030f 	and.w	r3, r3, #15
 8003058:	b2da      	uxtb	r2, r3
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d102      	bne.n	800306c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800306c:	7afb      	ldrb	r3, [r7, #11]
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	2b00      	cmp	r3, #0
 8003074:	d109      	bne.n	800308a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	b2db      	uxtb	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	6979      	ldr	r1, [r7, #20]
 8003084:	f003 fef0 	bl	8006e68 <USB_EP0StartXfer>
 8003088:	e008      	b.n	800309c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	b2db      	uxtb	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	6979      	ldr	r1, [r7, #20]
 8003098:	f003 fca2 	bl	80069e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b086      	sub	sp, #24
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	460b      	mov	r3, r1
 80030b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030b6:	7afb      	ldrb	r3, [r7, #11]
 80030b8:	f003 020f 	and.w	r2, r3, #15
 80030bc:	4613      	mov	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	1a9b      	subs	r3, r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	3338      	adds	r3, #56	; 0x38
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4413      	add	r3, r2
 80030ca:	3304      	adds	r3, #4
 80030cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2200      	movs	r2, #0
 80030de:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2201      	movs	r2, #1
 80030e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030e6:	7afb      	ldrb	r3, [r7, #11]
 80030e8:	f003 030f 	and.w	r3, r3, #15
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d102      	bne.n	8003100 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003100:	7afb      	ldrb	r3, [r7, #11]
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	2b00      	cmp	r3, #0
 8003108:	d109      	bne.n	800311e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	461a      	mov	r2, r3
 8003116:	6979      	ldr	r1, [r7, #20]
 8003118:	f003 fea6 	bl	8006e68 <USB_EP0StartXfer>
 800311c:	e008      	b.n	8003130 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	b2db      	uxtb	r3, r3
 8003128:	461a      	mov	r2, r3
 800312a:	6979      	ldr	r1, [r7, #20]
 800312c:	f003 fc58 	bl	80069e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b084      	sub	sp, #16
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
 8003142:	460b      	mov	r3, r1
 8003144:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003146:	78fb      	ldrb	r3, [r7, #3]
 8003148:	f003 020f 	and.w	r2, r3, #15
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	429a      	cmp	r2, r3
 8003152:	d901      	bls.n	8003158 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e050      	b.n	80031fa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800315c:	2b00      	cmp	r3, #0
 800315e:	da0f      	bge.n	8003180 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	f003 020f 	and.w	r2, r3, #15
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	3338      	adds	r3, #56	; 0x38
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	4413      	add	r3, r2
 8003174:	3304      	adds	r3, #4
 8003176:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	705a      	strb	r2, [r3, #1]
 800317e:	e00d      	b.n	800319c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	4613      	mov	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	4413      	add	r3, r2
 8003192:	3304      	adds	r3, #4
 8003194:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2201      	movs	r2, #1
 80031a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031a2:	78fb      	ldrb	r3, [r7, #3]
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_PCD_EP_SetStall+0x82>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e01e      	b.n	80031fa <HAL_PCD_EP_SetStall+0xc0>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68f9      	ldr	r1, [r7, #12]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f003 fffd 	bl	80071ca <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10a      	bne.n	80031f0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	b2d9      	uxtb	r1, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031ea:	461a      	mov	r2, r3
 80031ec:	f004 f9ee 	bl	80075cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b084      	sub	sp, #16
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	460b      	mov	r3, r1
 800320c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800320e:	78fb      	ldrb	r3, [r7, #3]
 8003210:	f003 020f 	and.w	r2, r3, #15
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	429a      	cmp	r2, r3
 800321a:	d901      	bls.n	8003220 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e042      	b.n	80032a6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003220:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003224:	2b00      	cmp	r3, #0
 8003226:	da0f      	bge.n	8003248 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	f003 020f 	and.w	r2, r3, #15
 800322e:	4613      	mov	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	1a9b      	subs	r3, r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	3338      	adds	r3, #56	; 0x38
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	4413      	add	r3, r2
 800323c:	3304      	adds	r3, #4
 800323e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2201      	movs	r2, #1
 8003244:	705a      	strb	r2, [r3, #1]
 8003246:	e00f      	b.n	8003268 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	f003 020f 	and.w	r2, r3, #15
 800324e:	4613      	mov	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	4413      	add	r3, r2
 800325e:	3304      	adds	r3, #4
 8003260:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800326e:	78fb      	ldrb	r3, [r7, #3]
 8003270:	f003 030f 	and.w	r3, r3, #15
 8003274:	b2da      	uxtb	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_PCD_EP_ClrStall+0x86>
 8003284:	2302      	movs	r3, #2
 8003286:	e00e      	b.n	80032a6 <HAL_PCD_EP_ClrStall+0xa4>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68f9      	ldr	r1, [r7, #12]
 8003296:	4618      	mov	r0, r3
 8003298:	f004 f805 	bl	80072a6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b08a      	sub	sp, #40	; 0x28
 80032b2:	af02      	add	r7, sp, #8
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	4613      	mov	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	3338      	adds	r3, #56	; 0x38
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	4413      	add	r3, r2
 80032d2:	3304      	adds	r3, #4
 80032d4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	699a      	ldr	r2, [r3, #24]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d901      	bls.n	80032e6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e06c      	b.n	80033c0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	695a      	ldr	r2, [r3, #20]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d902      	bls.n	8003302 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	3303      	adds	r3, #3
 8003306:	089b      	lsrs	r3, r3, #2
 8003308:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800330a:	e02b      	b.n	8003364 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	695a      	ldr	r2, [r3, #20]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	429a      	cmp	r2, r3
 8003320:	d902      	bls.n	8003328 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	3303      	adds	r3, #3
 800332c:	089b      	lsrs	r3, r3, #2
 800332e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	68d9      	ldr	r1, [r3, #12]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	b2da      	uxtb	r2, r3
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003340:	b2db      	uxtb	r3, r3
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	4603      	mov	r3, r0
 8003346:	6978      	ldr	r0, [r7, #20]
 8003348:	f003 fee1 	bl	800710e <USB_WritePacket>

    ep->xfer_buff  += len;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	441a      	add	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	699a      	ldr	r2, [r3, #24]
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	441a      	add	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4413      	add	r3, r2
 800336c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	b29b      	uxth	r3, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	429a      	cmp	r2, r3
 8003378:	d809      	bhi.n	800338e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	699a      	ldr	r2, [r3, #24]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003382:	429a      	cmp	r2, r3
 8003384:	d203      	bcs.n	800338e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1be      	bne.n	800330c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	429a      	cmp	r2, r3
 8003398:	d811      	bhi.n	80033be <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	2201      	movs	r2, #1
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	43db      	mvns	r3, r3
 80033b4:	6939      	ldr	r1, [r7, #16]
 80033b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033ba:	4013      	ands	r3, r2
 80033bc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3720      	adds	r7, #32
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	333c      	adds	r3, #60	; 0x3c
 80033e0:	3304      	adds	r3, #4
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	015a      	lsls	r2, r3, #5
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	f040 80a0 	bne.w	8003540 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d015      	beq.n	8003436 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4a72      	ldr	r2, [pc, #456]	; (80035d8 <PCD_EP_OutXfrComplete_int+0x210>)
 800340e:	4293      	cmp	r3, r2
 8003410:	f240 80dd 	bls.w	80035ce <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 80d7 	beq.w	80035ce <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4413      	add	r3, r2
 8003428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800342c:	461a      	mov	r2, r3
 800342e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003432:	6093      	str	r3, [r2, #8]
 8003434:	e0cb      	b.n	80035ce <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b00      	cmp	r3, #0
 800343e:	d009      	beq.n	8003454 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4413      	add	r3, r2
 8003448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344c:	461a      	mov	r2, r3
 800344e:	2320      	movs	r3, #32
 8003450:	6093      	str	r3, [r2, #8]
 8003452:	e0bc      	b.n	80035ce <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800345a:	2b00      	cmp	r3, #0
 800345c:	f040 80b7 	bne.w	80035ce <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4a5d      	ldr	r2, [pc, #372]	; (80035d8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d90f      	bls.n	8003488 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4413      	add	r3, r2
 800347a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800347e:	461a      	mov	r2, r3
 8003480:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003484:	6093      	str	r3, [r2, #8]
 8003486:	e0a2      	b.n	80035ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	4613      	mov	r3, r2
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	1a9b      	subs	r3, r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800349a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	0159      	lsls	r1, r3, #5
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	440b      	add	r3, r1
 80034a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80034ae:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	4613      	mov	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4403      	add	r3, r0
 80034be:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80034c2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	4613      	mov	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034d6:	6819      	ldr	r1, [r3, #0]
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	4613      	mov	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4403      	add	r3, r0
 80034e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4419      	add	r1, r3
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	4613      	mov	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4403      	add	r3, r0
 80034fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003500:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d114      	bne.n	8003532 <PCD_EP_OutXfrComplete_int+0x16a>
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d108      	bne.n	8003532 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6818      	ldr	r0, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800352a:	461a      	mov	r2, r3
 800352c:	2101      	movs	r1, #1
 800352e:	f004 f84d 	bl	80075cc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	4619      	mov	r1, r3
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f008 fbcd 	bl	800bcd8 <HAL_PCD_DataOutStageCallback>
 800353e:	e046      	b.n	80035ce <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4a26      	ldr	r2, [pc, #152]	; (80035dc <PCD_EP_OutXfrComplete_int+0x214>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d124      	bne.n	8003592 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	4413      	add	r3, r2
 800355a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800355e:	461a      	mov	r2, r3
 8003560:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003564:	6093      	str	r3, [r2, #8]
 8003566:	e032      	b.n	80035ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f003 0320 	and.w	r3, r3, #32
 800356e:	2b00      	cmp	r3, #0
 8003570:	d008      	beq.n	8003584 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	015a      	lsls	r2, r3, #5
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4413      	add	r3, r2
 800357a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800357e:	461a      	mov	r2, r3
 8003580:	2320      	movs	r3, #32
 8003582:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	b2db      	uxtb	r3, r3
 8003588:	4619      	mov	r1, r3
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f008 fba4 	bl	800bcd8 <HAL_PCD_DataOutStageCallback>
 8003590:	e01d      	b.n	80035ce <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d114      	bne.n	80035c2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	4613      	mov	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d108      	bne.n	80035c2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6818      	ldr	r0, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035ba:	461a      	mov	r2, r3
 80035bc:	2100      	movs	r1, #0
 80035be:	f004 f805 	bl	80075cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	4619      	mov	r1, r3
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f008 fb85 	bl	800bcd8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	4f54300a 	.word	0x4f54300a
 80035dc:	4f54310a 	.word	0x4f54310a

080035e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	333c      	adds	r3, #60	; 0x3c
 80035f8:	3304      	adds	r3, #4
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4413      	add	r3, r2
 8003606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4a15      	ldr	r2, [pc, #84]	; (8003668 <PCD_EP_OutSetupPacket_int+0x88>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d90e      	bls.n	8003634 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800361c:	2b00      	cmp	r3, #0
 800361e:	d009      	beq.n	8003634 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4413      	add	r3, r2
 8003628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800362c:	461a      	mov	r2, r3
 800362e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003632:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f008 fb3d 	bl	800bcb4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4a0a      	ldr	r2, [pc, #40]	; (8003668 <PCD_EP_OutSetupPacket_int+0x88>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d90c      	bls.n	800365c <PCD_EP_OutSetupPacket_int+0x7c>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d108      	bne.n	800365c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003654:	461a      	mov	r2, r3
 8003656:	2101      	movs	r1, #1
 8003658:	f003 ffb8 	bl	80075cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	4f54300a 	.word	0x4f54300a

0800366c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	70fb      	strb	r3, [r7, #3]
 8003678:	4613      	mov	r3, r2
 800367a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003684:	78fb      	ldrb	r3, [r7, #3]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d107      	bne.n	800369a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800368a:	883b      	ldrh	r3, [r7, #0]
 800368c:	0419      	lsls	r1, r3, #16
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	430a      	orrs	r2, r1
 8003696:	629a      	str	r2, [r3, #40]	; 0x28
 8003698:	e028      	b.n	80036ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	0c1b      	lsrs	r3, r3, #16
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	4413      	add	r3, r2
 80036a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036a8:	2300      	movs	r3, #0
 80036aa:	73fb      	strb	r3, [r7, #15]
 80036ac:	e00d      	b.n	80036ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
 80036b4:	3340      	adds	r3, #64	; 0x40
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	0c1b      	lsrs	r3, r3, #16
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	4413      	add	r3, r2
 80036c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	3301      	adds	r3, #1
 80036c8:	73fb      	strb	r3, [r7, #15]
 80036ca:	7bfa      	ldrb	r2, [r7, #15]
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d3ec      	bcc.n	80036ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036d4:	883b      	ldrh	r3, [r7, #0]
 80036d6:	0418      	lsls	r0, r3, #16
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6819      	ldr	r1, [r3, #0]
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	3b01      	subs	r3, #1
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	4302      	orrs	r2, r0
 80036e4:	3340      	adds	r3, #64	; 0x40
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	460b      	mov	r3, r1
 8003704:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	887a      	ldrh	r2, [r7, #2]
 800370c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800374e:	f043 0303 	orr.w	r3, r3, #3
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0cc      	b.n	8003912 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003778:	4b68      	ldr	r3, [pc, #416]	; (800391c <HAL_RCC_ClockConfig+0x1b8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 030f 	and.w	r3, r3, #15
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d90c      	bls.n	80037a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003786:	4b65      	ldr	r3, [pc, #404]	; (800391c <HAL_RCC_ClockConfig+0x1b8>)
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800378e:	4b63      	ldr	r3, [pc, #396]	; (800391c <HAL_RCC_ClockConfig+0x1b8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	429a      	cmp	r2, r3
 800379a:	d001      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0b8      	b.n	8003912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d020      	beq.n	80037ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d005      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037b8:	4b59      	ldr	r3, [pc, #356]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	4a58      	ldr	r2, [pc, #352]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 80037be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0308 	and.w	r3, r3, #8
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037d0:	4b53      	ldr	r3, [pc, #332]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	4a52      	ldr	r2, [pc, #328]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037dc:	4b50      	ldr	r3, [pc, #320]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	494d      	ldr	r1, [pc, #308]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d044      	beq.n	8003884 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d107      	bne.n	8003812 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003802:	4b47      	ldr	r3, [pc, #284]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d119      	bne.n	8003842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e07f      	b.n	8003912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d003      	beq.n	8003822 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800381e:	2b03      	cmp	r3, #3
 8003820:	d107      	bne.n	8003832 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003822:	4b3f      	ldr	r3, [pc, #252]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e06f      	b.n	8003912 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003832:	4b3b      	ldr	r3, [pc, #236]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e067      	b.n	8003912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003842:	4b37      	ldr	r3, [pc, #220]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f023 0203 	bic.w	r2, r3, #3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	4934      	ldr	r1, [pc, #208]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 8003850:	4313      	orrs	r3, r2
 8003852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003854:	f7fe faf8 	bl	8001e48 <HAL_GetTick>
 8003858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385a:	e00a      	b.n	8003872 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800385c:	f7fe faf4 	bl	8001e48 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	f241 3288 	movw	r2, #5000	; 0x1388
 800386a:	4293      	cmp	r3, r2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e04f      	b.n	8003912 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003872:	4b2b      	ldr	r3, [pc, #172]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 020c 	and.w	r2, r3, #12
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	429a      	cmp	r2, r3
 8003882:	d1eb      	bne.n	800385c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003884:	4b25      	ldr	r3, [pc, #148]	; (800391c <HAL_RCC_ClockConfig+0x1b8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d20c      	bcs.n	80038ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003892:	4b22      	ldr	r3, [pc, #136]	; (800391c <HAL_RCC_ClockConfig+0x1b8>)
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800389a:	4b20      	ldr	r3, [pc, #128]	; (800391c <HAL_RCC_ClockConfig+0x1b8>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d001      	beq.n	80038ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e032      	b.n	8003912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d008      	beq.n	80038ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038b8:	4b19      	ldr	r3, [pc, #100]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	4916      	ldr	r1, [pc, #88]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d009      	beq.n	80038ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038d6:	4b12      	ldr	r3, [pc, #72]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	490e      	ldr	r1, [pc, #56]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038ea:	f000 fbb1 	bl	8004050 <HAL_RCC_GetSysClockFreq>
 80038ee:	4602      	mov	r2, r0
 80038f0:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	091b      	lsrs	r3, r3, #4
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	490a      	ldr	r1, [pc, #40]	; (8003924 <HAL_RCC_ClockConfig+0x1c0>)
 80038fc:	5ccb      	ldrb	r3, [r1, r3]
 80038fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003902:	4a09      	ldr	r2, [pc, #36]	; (8003928 <HAL_RCC_ClockConfig+0x1c4>)
 8003904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003906:	4b09      	ldr	r3, [pc, #36]	; (800392c <HAL_RCC_ClockConfig+0x1c8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f7fe f976 	bl	8001bfc <HAL_InitTick>

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40023c00 	.word	0x40023c00
 8003920:	40023800 	.word	0x40023800
 8003924:	08012884 	.word	0x08012884
 8003928:	20000000 	.word	0x20000000
 800392c:	20000004 	.word	0x20000004

08003930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003934:	4b03      	ldr	r3, [pc, #12]	; (8003944 <HAL_RCC_GetHCLKFreq+0x14>)
 8003936:	681b      	ldr	r3, [r3, #0]
}
 8003938:	4618      	mov	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	20000000 	.word	0x20000000

08003948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800394c:	f7ff fff0 	bl	8003930 <HAL_RCC_GetHCLKFreq>
 8003950:	4602      	mov	r2, r0
 8003952:	4b05      	ldr	r3, [pc, #20]	; (8003968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	0a9b      	lsrs	r3, r3, #10
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	4903      	ldr	r1, [pc, #12]	; (800396c <HAL_RCC_GetPCLK1Freq+0x24>)
 800395e:	5ccb      	ldrb	r3, [r1, r3]
 8003960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003964:	4618      	mov	r0, r3
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40023800 	.word	0x40023800
 800396c:	08012894 	.word	0x08012894

08003970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003974:	f7ff ffdc 	bl	8003930 <HAL_RCC_GetHCLKFreq>
 8003978:	4602      	mov	r2, r0
 800397a:	4b05      	ldr	r3, [pc, #20]	; (8003990 <HAL_RCC_GetPCLK2Freq+0x20>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	0b5b      	lsrs	r3, r3, #13
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	4903      	ldr	r1, [pc, #12]	; (8003994 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003986:	5ccb      	ldrb	r3, [r1, r3]
 8003988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800398c:	4618      	mov	r0, r3
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40023800 	.word	0x40023800
 8003994:	08012894 	.word	0x08012894

08003998 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	220f      	movs	r2, #15
 80039a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039a8:	4b12      	ldr	r3, [pc, #72]	; (80039f4 <HAL_RCC_GetClockConfig+0x5c>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 0203 	and.w	r2, r3, #3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039b4:	4b0f      	ldr	r3, [pc, #60]	; (80039f4 <HAL_RCC_GetClockConfig+0x5c>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039c0:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <HAL_RCC_GetClockConfig+0x5c>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80039cc:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <HAL_RCC_GetClockConfig+0x5c>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	08db      	lsrs	r3, r3, #3
 80039d2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039da:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <HAL_RCC_GetClockConfig+0x60>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 020f 	and.w	r2, r3, #15
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	601a      	str	r2, [r3, #0]
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40023800 	.word	0x40023800
 80039f8:	40023c00 	.word	0x40023c00

080039fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08c      	sub	sp, #48	; 0x30
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d010      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003a34:	4b6f      	ldr	r3, [pc, #444]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a3a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	496c      	ldr	r1, [pc, #432]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003a52:	2301      	movs	r3, #1
 8003a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d010      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003a62:	4b64      	ldr	r3, [pc, #400]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a68:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a70:	4960      	ldr	r1, [pc, #384]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003a80:	2301      	movs	r3, #1
 8003a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d017      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a90:	4b58      	ldr	r3, [pc, #352]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	4955      	ldr	r1, [pc, #340]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aae:	d101      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003abc:	2301      	movs	r3, #1
 8003abe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d017      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003acc:	4b49      	ldr	r3, [pc, #292]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ace:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ad2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ada:	4946      	ldr	r1, [pc, #280]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aea:	d101      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003aec:	2301      	movs	r3, #1
 8003aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003af8:	2301      	movs	r3, #1
 8003afa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 808a 	beq.w	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	4b39      	ldr	r3, [pc, #228]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	4a38      	ldr	r2, [pc, #224]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b18:	6413      	str	r3, [r2, #64]	; 0x40
 8003b1a:	4b36      	ldr	r3, [pc, #216]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b22:	60bb      	str	r3, [r7, #8]
 8003b24:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003b26:	4b34      	ldr	r3, [pc, #208]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a33      	ldr	r2, [pc, #204]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b30:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b32:	f7fe f989 	bl	8001e48 <HAL_GetTick>
 8003b36:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b38:	e008      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b3a:	f7fe f985 	bl	8001e48 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e278      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b4c:	4b2a      	ldr	r3, [pc, #168]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0f0      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b58:	4b26      	ldr	r3, [pc, #152]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b60:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d02f      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b70:	6a3a      	ldr	r2, [r7, #32]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d028      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b76:	4b1f      	ldr	r3, [pc, #124]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b7e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b80:	4b1e      	ldr	r3, [pc, #120]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b86:	4b1d      	ldr	r3, [pc, #116]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003b8c:	4a19      	ldr	r2, [pc, #100]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b92:	4b18      	ldr	r3, [pc, #96]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d114      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003b9e:	f7fe f953 	bl	8001e48 <HAL_GetTick>
 8003ba2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba4:	e00a      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ba6:	f7fe f94f 	bl	8001e48 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e240      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bbc:	4b0d      	ldr	r3, [pc, #52]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0ee      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bd4:	d114      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003bd6:	4b07      	ldr	r3, [pc, #28]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bea:	4902      	ldr	r1, [pc, #8]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	608b      	str	r3, [r1, #8]
 8003bf0:	e00c      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003bf2:	bf00      	nop
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	40007000 	.word	0x40007000
 8003bfc:	42470e40 	.word	0x42470e40
 8003c00:	4b4a      	ldr	r3, [pc, #296]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	4a49      	ldr	r2, [pc, #292]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c06:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c0a:	6093      	str	r3, [r2, #8]
 8003c0c:	4b47      	ldr	r3, [pc, #284]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c18:	4944      	ldr	r1, [pc, #272]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0310 	and.w	r3, r3, #16
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d004      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003c30:	4b3f      	ldr	r3, [pc, #252]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003c32:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00a      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003c40:	4b3a      	ldr	r3, [pc, #232]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4e:	4937      	ldr	r1, [pc, #220]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c62:	4b32      	ldr	r3, [pc, #200]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c68:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c70:	492e      	ldr	r1, [pc, #184]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d011      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c84:	4b29      	ldr	r3, [pc, #164]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c8a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c92:	4926      	ldr	r1, [pc, #152]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ca2:	d101      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003cb4:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc2:	491a      	ldr	r1, [pc, #104]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d011      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003cd6:	4b15      	ldr	r3, [pc, #84]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cdc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce4:	4911      	ldr	r1, [pc, #68]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d005      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d08:	f040 80ff 	bne.w	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d0c:	4b09      	ldr	r3, [pc, #36]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d12:	f7fe f899 	bl	8001e48 <HAL_GetTick>
 8003d16:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d18:	e00e      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d1a:	f7fe f895 	bl	8001e48 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d907      	bls.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e188      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	424711e0 	.word	0x424711e0
 8003d34:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d38:	4b7e      	ldr	r3, [pc, #504]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1ea      	bne.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d009      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d028      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d124      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003d6c:	4b71      	ldr	r3, [pc, #452]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d72:	0c1b      	lsrs	r3, r3, #16
 8003d74:	f003 0303 	and.w	r3, r3, #3
 8003d78:	3301      	adds	r3, #1
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d7e:	4b6d      	ldr	r3, [pc, #436]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d84:	0e1b      	lsrs	r3, r3, #24
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	019b      	lsls	r3, r3, #6
 8003d96:	431a      	orrs	r2, r3
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	085b      	lsrs	r3, r3, #1
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	041b      	lsls	r3, r3, #16
 8003da0:	431a      	orrs	r2, r3
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	061b      	lsls	r3, r3, #24
 8003da6:	431a      	orrs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	071b      	lsls	r3, r3, #28
 8003dae:	4961      	ldr	r1, [pc, #388]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d004      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dca:	d00a      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d035      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ddc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003de0:	d130      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003de2:	4b54      	ldr	r3, [pc, #336]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003de8:	0c1b      	lsrs	r3, r3, #16
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	3301      	adds	r3, #1
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003df4:	4b4f      	ldr	r3, [pc, #316]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dfa:	0f1b      	lsrs	r3, r3, #28
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	019b      	lsls	r3, r3, #6
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	085b      	lsrs	r3, r3, #1
 8003e12:	3b01      	subs	r3, #1
 8003e14:	041b      	lsls	r3, r3, #16
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	061b      	lsls	r3, r3, #24
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	071b      	lsls	r3, r3, #28
 8003e24:	4943      	ldr	r1, [pc, #268]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e2c:	4b41      	ldr	r3, [pc, #260]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e32:	f023 021f 	bic.w	r2, r3, #31
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	493d      	ldr	r1, [pc, #244]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d029      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e58:	d124      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003e5a:	4b36      	ldr	r3, [pc, #216]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e60:	0c1b      	lsrs	r3, r3, #16
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	3301      	adds	r3, #1
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e6c:	4b31      	ldr	r3, [pc, #196]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e72:	0f1b      	lsrs	r3, r3, #28
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	019b      	lsls	r3, r3, #6
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	085b      	lsrs	r3, r3, #1
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	041b      	lsls	r3, r3, #16
 8003e90:	431a      	orrs	r2, r3
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	061b      	lsls	r3, r3, #24
 8003e96:	431a      	orrs	r2, r3
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	071b      	lsls	r3, r3, #28
 8003e9c:	4925      	ldr	r1, [pc, #148]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d016      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	019b      	lsls	r3, r3, #6
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	085b      	lsrs	r3, r3, #1
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	041b      	lsls	r3, r3, #16
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	061b      	lsls	r3, r3, #24
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	071b      	lsls	r3, r3, #28
 8003ed6:	4917      	ldr	r1, [pc, #92]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ede:	4b16      	ldr	r3, [pc, #88]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ee4:	f7fd ffb0 	bl	8001e48 <HAL_GetTick>
 8003ee8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003eec:	f7fd ffac 	bl	8001e48 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e09f      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003efe:	4b0d      	ldr	r3, [pc, #52]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0f0      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	f040 8095 	bne.w	800403c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f12:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f18:	f7fd ff96 	bl	8001e48 <HAL_GetTick>
 8003f1c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f1e:	e00f      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003f20:	f7fd ff92 	bl	8001e48 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d908      	bls.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e085      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003f32:	bf00      	nop
 8003f34:	40023800 	.word	0x40023800
 8003f38:	42470068 	.word	0x42470068
 8003f3c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f40:	4b41      	ldr	r3, [pc, #260]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f4c:	d0e8      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0304 	and.w	r3, r3, #4
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d009      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d02b      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d127      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003f76:	4b34      	ldr	r3, [pc, #208]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7c:	0c1b      	lsrs	r3, r3, #16
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	3301      	adds	r3, #1
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699a      	ldr	r2, [r3, #24]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	019b      	lsls	r3, r3, #6
 8003f92:	431a      	orrs	r2, r3
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	085b      	lsrs	r3, r3, #1
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	041b      	lsls	r3, r3, #16
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	061b      	lsls	r3, r3, #24
 8003fa4:	4928      	ldr	r1, [pc, #160]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fac:	4b26      	ldr	r3, [pc, #152]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fb2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	4922      	ldr	r1, [pc, #136]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d01d      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fda:	d118      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fdc:	4b1a      	ldr	r3, [pc, #104]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe2:	0e1b      	lsrs	r3, r3, #24
 8003fe4:	f003 030f 	and.w	r3, r3, #15
 8003fe8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	699a      	ldr	r2, [r3, #24]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	019b      	lsls	r3, r3, #6
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	085b      	lsrs	r3, r3, #1
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	041b      	lsls	r3, r3, #16
 8004000:	431a      	orrs	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	061b      	lsls	r3, r3, #24
 8004006:	4910      	ldr	r1, [pc, #64]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800400e:	4b0f      	ldr	r3, [pc, #60]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004010:	2201      	movs	r2, #1
 8004012:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004014:	f7fd ff18 	bl	8001e48 <HAL_GetTick>
 8004018:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800401a:	e008      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800401c:	f7fd ff14 	bl	8001e48 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e007      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800402e:	4b06      	ldr	r3, [pc, #24]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800403a:	d1ef      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3730      	adds	r7, #48	; 0x30
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40023800 	.word	0x40023800
 800404c:	42470070 	.word	0x42470070

08004050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004054:	b088      	sub	sp, #32
 8004056:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800406c:	4bce      	ldr	r3, [pc, #824]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x358>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 030c 	and.w	r3, r3, #12
 8004074:	2b0c      	cmp	r3, #12
 8004076:	f200 818d 	bhi.w	8004394 <HAL_RCC_GetSysClockFreq+0x344>
 800407a:	a201      	add	r2, pc, #4	; (adr r2, 8004080 <HAL_RCC_GetSysClockFreq+0x30>)
 800407c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004080:	080040b5 	.word	0x080040b5
 8004084:	08004395 	.word	0x08004395
 8004088:	08004395 	.word	0x08004395
 800408c:	08004395 	.word	0x08004395
 8004090:	080040bb 	.word	0x080040bb
 8004094:	08004395 	.word	0x08004395
 8004098:	08004395 	.word	0x08004395
 800409c:	08004395 	.word	0x08004395
 80040a0:	080040c1 	.word	0x080040c1
 80040a4:	08004395 	.word	0x08004395
 80040a8:	08004395 	.word	0x08004395
 80040ac:	08004395 	.word	0x08004395
 80040b0:	08004235 	.word	0x08004235
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040b4:	4bbd      	ldr	r3, [pc, #756]	; (80043ac <HAL_RCC_GetSysClockFreq+0x35c>)
 80040b6:	61bb      	str	r3, [r7, #24]
       break;
 80040b8:	e16f      	b.n	800439a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040ba:	4bbd      	ldr	r3, [pc, #756]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x360>)
 80040bc:	61bb      	str	r3, [r7, #24]
      break;
 80040be:	e16c      	b.n	800439a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040c0:	4bb9      	ldr	r3, [pc, #740]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x358>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040c8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040ca:	4bb7      	ldr	r3, [pc, #732]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x358>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d053      	beq.n	800417e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040d6:	4bb4      	ldr	r3, [pc, #720]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x358>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	099b      	lsrs	r3, r3, #6
 80040dc:	461a      	mov	r2, r3
 80040de:	f04f 0300 	mov.w	r3, #0
 80040e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040e6:	f04f 0100 	mov.w	r1, #0
 80040ea:	ea02 0400 	and.w	r4, r2, r0
 80040ee:	603c      	str	r4, [r7, #0]
 80040f0:	400b      	ands	r3, r1
 80040f2:	607b      	str	r3, [r7, #4]
 80040f4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040f8:	4620      	mov	r0, r4
 80040fa:	4629      	mov	r1, r5
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	014b      	lsls	r3, r1, #5
 8004106:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800410a:	0142      	lsls	r2, r0, #5
 800410c:	4610      	mov	r0, r2
 800410e:	4619      	mov	r1, r3
 8004110:	4623      	mov	r3, r4
 8004112:	1ac0      	subs	r0, r0, r3
 8004114:	462b      	mov	r3, r5
 8004116:	eb61 0103 	sbc.w	r1, r1, r3
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	018b      	lsls	r3, r1, #6
 8004124:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004128:	0182      	lsls	r2, r0, #6
 800412a:	1a12      	subs	r2, r2, r0
 800412c:	eb63 0301 	sbc.w	r3, r3, r1
 8004130:	f04f 0000 	mov.w	r0, #0
 8004134:	f04f 0100 	mov.w	r1, #0
 8004138:	00d9      	lsls	r1, r3, #3
 800413a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800413e:	00d0      	lsls	r0, r2, #3
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	4621      	mov	r1, r4
 8004146:	1852      	adds	r2, r2, r1
 8004148:	4629      	mov	r1, r5
 800414a:	eb43 0101 	adc.w	r1, r3, r1
 800414e:	460b      	mov	r3, r1
 8004150:	f04f 0000 	mov.w	r0, #0
 8004154:	f04f 0100 	mov.w	r1, #0
 8004158:	0259      	lsls	r1, r3, #9
 800415a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800415e:	0250      	lsls	r0, r2, #9
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	4610      	mov	r0, r2
 8004166:	4619      	mov	r1, r3
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	461a      	mov	r2, r3
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	f7fc f856 	bl	8000220 <__aeabi_uldivmod>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	4613      	mov	r3, r2
 800417a:	61fb      	str	r3, [r7, #28]
 800417c:	e04c      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800417e:	4b8a      	ldr	r3, [pc, #552]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	099b      	lsrs	r3, r3, #6
 8004184:	461a      	mov	r2, r3
 8004186:	f04f 0300 	mov.w	r3, #0
 800418a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800418e:	f04f 0100 	mov.w	r1, #0
 8004192:	ea02 0a00 	and.w	sl, r2, r0
 8004196:	ea03 0b01 	and.w	fp, r3, r1
 800419a:	4650      	mov	r0, sl
 800419c:	4659      	mov	r1, fp
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	f04f 0300 	mov.w	r3, #0
 80041a6:	014b      	lsls	r3, r1, #5
 80041a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041ac:	0142      	lsls	r2, r0, #5
 80041ae:	4610      	mov	r0, r2
 80041b0:	4619      	mov	r1, r3
 80041b2:	ebb0 000a 	subs.w	r0, r0, sl
 80041b6:	eb61 010b 	sbc.w	r1, r1, fp
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	f04f 0300 	mov.w	r3, #0
 80041c2:	018b      	lsls	r3, r1, #6
 80041c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041c8:	0182      	lsls	r2, r0, #6
 80041ca:	1a12      	subs	r2, r2, r0
 80041cc:	eb63 0301 	sbc.w	r3, r3, r1
 80041d0:	f04f 0000 	mov.w	r0, #0
 80041d4:	f04f 0100 	mov.w	r1, #0
 80041d8:	00d9      	lsls	r1, r3, #3
 80041da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041de:	00d0      	lsls	r0, r2, #3
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	eb12 020a 	adds.w	r2, r2, sl
 80041e8:	eb43 030b 	adc.w	r3, r3, fp
 80041ec:	f04f 0000 	mov.w	r0, #0
 80041f0:	f04f 0100 	mov.w	r1, #0
 80041f4:	0299      	lsls	r1, r3, #10
 80041f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80041fa:	0290      	lsls	r0, r2, #10
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4610      	mov	r0, r2
 8004202:	4619      	mov	r1, r3
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	461a      	mov	r2, r3
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	f7fc f808 	bl	8000220 <__aeabi_uldivmod>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	4613      	mov	r3, r2
 8004216:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004218:	4b63      	ldr	r3, [pc, #396]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x358>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	0c1b      	lsrs	r3, r3, #16
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	3301      	adds	r3, #1
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004228:	69fa      	ldr	r2, [r7, #28]
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004230:	61bb      	str	r3, [r7, #24]
      break;
 8004232:	e0b2      	b.n	800439a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004234:	4b5c      	ldr	r3, [pc, #368]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800423c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800423e:	4b5a      	ldr	r3, [pc, #360]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d04d      	beq.n	80042e6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800424a:	4b57      	ldr	r3, [pc, #348]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x358>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	099b      	lsrs	r3, r3, #6
 8004250:	461a      	mov	r2, r3
 8004252:	f04f 0300 	mov.w	r3, #0
 8004256:	f240 10ff 	movw	r0, #511	; 0x1ff
 800425a:	f04f 0100 	mov.w	r1, #0
 800425e:	ea02 0800 	and.w	r8, r2, r0
 8004262:	ea03 0901 	and.w	r9, r3, r1
 8004266:	4640      	mov	r0, r8
 8004268:	4649      	mov	r1, r9
 800426a:	f04f 0200 	mov.w	r2, #0
 800426e:	f04f 0300 	mov.w	r3, #0
 8004272:	014b      	lsls	r3, r1, #5
 8004274:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004278:	0142      	lsls	r2, r0, #5
 800427a:	4610      	mov	r0, r2
 800427c:	4619      	mov	r1, r3
 800427e:	ebb0 0008 	subs.w	r0, r0, r8
 8004282:	eb61 0109 	sbc.w	r1, r1, r9
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	f04f 0300 	mov.w	r3, #0
 800428e:	018b      	lsls	r3, r1, #6
 8004290:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004294:	0182      	lsls	r2, r0, #6
 8004296:	1a12      	subs	r2, r2, r0
 8004298:	eb63 0301 	sbc.w	r3, r3, r1
 800429c:	f04f 0000 	mov.w	r0, #0
 80042a0:	f04f 0100 	mov.w	r1, #0
 80042a4:	00d9      	lsls	r1, r3, #3
 80042a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042aa:	00d0      	lsls	r0, r2, #3
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	eb12 0208 	adds.w	r2, r2, r8
 80042b4:	eb43 0309 	adc.w	r3, r3, r9
 80042b8:	f04f 0000 	mov.w	r0, #0
 80042bc:	f04f 0100 	mov.w	r1, #0
 80042c0:	0259      	lsls	r1, r3, #9
 80042c2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80042c6:	0250      	lsls	r0, r2, #9
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4610      	mov	r0, r2
 80042ce:	4619      	mov	r1, r3
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	461a      	mov	r2, r3
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	f7fb ffa2 	bl	8000220 <__aeabi_uldivmod>
 80042dc:	4602      	mov	r2, r0
 80042de:	460b      	mov	r3, r1
 80042e0:	4613      	mov	r3, r2
 80042e2:	61fb      	str	r3, [r7, #28]
 80042e4:	e04a      	b.n	800437c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042e6:	4b30      	ldr	r3, [pc, #192]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x358>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	099b      	lsrs	r3, r3, #6
 80042ec:	461a      	mov	r2, r3
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042f6:	f04f 0100 	mov.w	r1, #0
 80042fa:	ea02 0400 	and.w	r4, r2, r0
 80042fe:	ea03 0501 	and.w	r5, r3, r1
 8004302:	4620      	mov	r0, r4
 8004304:	4629      	mov	r1, r5
 8004306:	f04f 0200 	mov.w	r2, #0
 800430a:	f04f 0300 	mov.w	r3, #0
 800430e:	014b      	lsls	r3, r1, #5
 8004310:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004314:	0142      	lsls	r2, r0, #5
 8004316:	4610      	mov	r0, r2
 8004318:	4619      	mov	r1, r3
 800431a:	1b00      	subs	r0, r0, r4
 800431c:	eb61 0105 	sbc.w	r1, r1, r5
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	018b      	lsls	r3, r1, #6
 800432a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800432e:	0182      	lsls	r2, r0, #6
 8004330:	1a12      	subs	r2, r2, r0
 8004332:	eb63 0301 	sbc.w	r3, r3, r1
 8004336:	f04f 0000 	mov.w	r0, #0
 800433a:	f04f 0100 	mov.w	r1, #0
 800433e:	00d9      	lsls	r1, r3, #3
 8004340:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004344:	00d0      	lsls	r0, r2, #3
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	1912      	adds	r2, r2, r4
 800434c:	eb45 0303 	adc.w	r3, r5, r3
 8004350:	f04f 0000 	mov.w	r0, #0
 8004354:	f04f 0100 	mov.w	r1, #0
 8004358:	0299      	lsls	r1, r3, #10
 800435a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800435e:	0290      	lsls	r0, r2, #10
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	4610      	mov	r0, r2
 8004366:	4619      	mov	r1, r3
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	461a      	mov	r2, r3
 800436c:	f04f 0300 	mov.w	r3, #0
 8004370:	f7fb ff56 	bl	8000220 <__aeabi_uldivmod>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	4613      	mov	r3, r2
 800437a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800437c:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x358>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	0f1b      	lsrs	r3, r3, #28
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004388:	69fa      	ldr	r2, [r7, #28]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004390:	61bb      	str	r3, [r7, #24]
      break;
 8004392:	e002      	b.n	800439a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004394:	4b05      	ldr	r3, [pc, #20]	; (80043ac <HAL_RCC_GetSysClockFreq+0x35c>)
 8004396:	61bb      	str	r3, [r7, #24]
      break;
 8004398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800439a:	69bb      	ldr	r3, [r7, #24]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3720      	adds	r7, #32
 80043a0:	46bd      	mov	sp, r7
 80043a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043a6:	bf00      	nop
 80043a8:	40023800 	.word	0x40023800
 80043ac:	00f42400 	.word	0x00f42400
 80043b0:	007a1200 	.word	0x007a1200

080043b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e28d      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 8083 	beq.w	80044da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043d4:	4b94      	ldr	r3, [pc, #592]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 030c 	and.w	r3, r3, #12
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d019      	beq.n	8004414 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043e0:	4b91      	ldr	r3, [pc, #580]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d106      	bne.n	80043fa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043ec:	4b8e      	ldr	r3, [pc, #568]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043f8:	d00c      	beq.n	8004414 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043fa:	4b8b      	ldr	r3, [pc, #556]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004402:	2b0c      	cmp	r3, #12
 8004404:	d112      	bne.n	800442c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004406:	4b88      	ldr	r3, [pc, #544]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800440e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004412:	d10b      	bne.n	800442c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004414:	4b84      	ldr	r3, [pc, #528]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d05b      	beq.n	80044d8 <HAL_RCC_OscConfig+0x124>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d157      	bne.n	80044d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e25a      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004434:	d106      	bne.n	8004444 <HAL_RCC_OscConfig+0x90>
 8004436:	4b7c      	ldr	r3, [pc, #496]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a7b      	ldr	r2, [pc, #492]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 800443c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004440:	6013      	str	r3, [r2, #0]
 8004442:	e01d      	b.n	8004480 <HAL_RCC_OscConfig+0xcc>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800444c:	d10c      	bne.n	8004468 <HAL_RCC_OscConfig+0xb4>
 800444e:	4b76      	ldr	r3, [pc, #472]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a75      	ldr	r2, [pc, #468]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 8004454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	4b73      	ldr	r3, [pc, #460]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a72      	ldr	r2, [pc, #456]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 8004460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	e00b      	b.n	8004480 <HAL_RCC_OscConfig+0xcc>
 8004468:	4b6f      	ldr	r3, [pc, #444]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a6e      	ldr	r2, [pc, #440]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 800446e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004472:	6013      	str	r3, [r2, #0]
 8004474:	4b6c      	ldr	r3, [pc, #432]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a6b      	ldr	r2, [pc, #428]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 800447a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800447e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d013      	beq.n	80044b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004488:	f7fd fcde 	bl	8001e48 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004490:	f7fd fcda 	bl	8001e48 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b64      	cmp	r3, #100	; 0x64
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e21f      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a2:	4b61      	ldr	r3, [pc, #388]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0f0      	beq.n	8004490 <HAL_RCC_OscConfig+0xdc>
 80044ae:	e014      	b.n	80044da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b0:	f7fd fcca 	bl	8001e48 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044b8:	f7fd fcc6 	bl	8001e48 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b64      	cmp	r3, #100	; 0x64
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e20b      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ca:	4b57      	ldr	r3, [pc, #348]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1f0      	bne.n	80044b8 <HAL_RCC_OscConfig+0x104>
 80044d6:	e000      	b.n	80044da <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d06f      	beq.n	80045c6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80044e6:	4b50      	ldr	r3, [pc, #320]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 030c 	and.w	r3, r3, #12
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d017      	beq.n	8004522 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044f2:	4b4d      	ldr	r3, [pc, #308]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d105      	bne.n	800450a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044fe:	4b4a      	ldr	r3, [pc, #296]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00b      	beq.n	8004522 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800450a:	4b47      	ldr	r3, [pc, #284]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004512:	2b0c      	cmp	r3, #12
 8004514:	d11c      	bne.n	8004550 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004516:	4b44      	ldr	r3, [pc, #272]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d116      	bne.n	8004550 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004522:	4b41      	ldr	r3, [pc, #260]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d005      	beq.n	800453a <HAL_RCC_OscConfig+0x186>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d001      	beq.n	800453a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e1d3      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800453a:	4b3b      	ldr	r3, [pc, #236]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	4937      	ldr	r1, [pc, #220]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 800454a:	4313      	orrs	r3, r2
 800454c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800454e:	e03a      	b.n	80045c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d020      	beq.n	800459a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004558:	4b34      	ldr	r3, [pc, #208]	; (800462c <HAL_RCC_OscConfig+0x278>)
 800455a:	2201      	movs	r2, #1
 800455c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455e:	f7fd fc73 	bl	8001e48 <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004566:	f7fd fc6f 	bl	8001e48 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e1b4      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004578:	4b2b      	ldr	r3, [pc, #172]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0f0      	beq.n	8004566 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004584:	4b28      	ldr	r3, [pc, #160]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	4925      	ldr	r1, [pc, #148]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 8004594:	4313      	orrs	r3, r2
 8004596:	600b      	str	r3, [r1, #0]
 8004598:	e015      	b.n	80045c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800459a:	4b24      	ldr	r3, [pc, #144]	; (800462c <HAL_RCC_OscConfig+0x278>)
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a0:	f7fd fc52 	bl	8001e48 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045a8:	f7fd fc4e 	bl	8001e48 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e193      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ba:	4b1b      	ldr	r3, [pc, #108]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f0      	bne.n	80045a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0308 	and.w	r3, r3, #8
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d036      	beq.n	8004640 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d016      	beq.n	8004608 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045da:	4b15      	ldr	r3, [pc, #84]	; (8004630 <HAL_RCC_OscConfig+0x27c>)
 80045dc:	2201      	movs	r2, #1
 80045de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e0:	f7fd fc32 	bl	8001e48 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045e8:	f7fd fc2e 	bl	8001e48 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e173      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045fa:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <HAL_RCC_OscConfig+0x274>)
 80045fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f0      	beq.n	80045e8 <HAL_RCC_OscConfig+0x234>
 8004606:	e01b      	b.n	8004640 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004608:	4b09      	ldr	r3, [pc, #36]	; (8004630 <HAL_RCC_OscConfig+0x27c>)
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460e:	f7fd fc1b 	bl	8001e48 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004614:	e00e      	b.n	8004634 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004616:	f7fd fc17 	bl	8001e48 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d907      	bls.n	8004634 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e15c      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
 8004628:	40023800 	.word	0x40023800
 800462c:	42470000 	.word	0x42470000
 8004630:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004634:	4b8a      	ldr	r3, [pc, #552]	; (8004860 <HAL_RCC_OscConfig+0x4ac>)
 8004636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1ea      	bne.n	8004616 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 8097 	beq.w	800477c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800464e:	2300      	movs	r3, #0
 8004650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004652:	4b83      	ldr	r3, [pc, #524]	; (8004860 <HAL_RCC_OscConfig+0x4ac>)
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10f      	bne.n	800467e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800465e:	2300      	movs	r3, #0
 8004660:	60bb      	str	r3, [r7, #8]
 8004662:	4b7f      	ldr	r3, [pc, #508]	; (8004860 <HAL_RCC_OscConfig+0x4ac>)
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	4a7e      	ldr	r2, [pc, #504]	; (8004860 <HAL_RCC_OscConfig+0x4ac>)
 8004668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800466c:	6413      	str	r3, [r2, #64]	; 0x40
 800466e:	4b7c      	ldr	r3, [pc, #496]	; (8004860 <HAL_RCC_OscConfig+0x4ac>)
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004676:	60bb      	str	r3, [r7, #8]
 8004678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800467a:	2301      	movs	r3, #1
 800467c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800467e:	4b79      	ldr	r3, [pc, #484]	; (8004864 <HAL_RCC_OscConfig+0x4b0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004686:	2b00      	cmp	r3, #0
 8004688:	d118      	bne.n	80046bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800468a:	4b76      	ldr	r3, [pc, #472]	; (8004864 <HAL_RCC_OscConfig+0x4b0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a75      	ldr	r2, [pc, #468]	; (8004864 <HAL_RCC_OscConfig+0x4b0>)
 8004690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004696:	f7fd fbd7 	bl	8001e48 <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800469e:	f7fd fbd3 	bl	8001e48 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e118      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b0:	4b6c      	ldr	r3, [pc, #432]	; (8004864 <HAL_RCC_OscConfig+0x4b0>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0f0      	beq.n	800469e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d106      	bne.n	80046d2 <HAL_RCC_OscConfig+0x31e>
 80046c4:	4b66      	ldr	r3, [pc, #408]	; (8004860 <HAL_RCC_OscConfig+0x4ac>)
 80046c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c8:	4a65      	ldr	r2, [pc, #404]	; (8004860 <HAL_RCC_OscConfig+0x4ac>)
 80046ca:	f043 0301 	orr.w	r3, r3, #1
 80046ce:	6713      	str	r3, [r2, #112]	; 0x70
 80046d0:	e01c      	b.n	800470c <HAL_RCC_OscConfig+0x358>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	2b05      	cmp	r3, #5
 80046d8:	d10c      	bne.n	80046f4 <HAL_RCC_OscConfig+0x340>
 80046da:	4b61      	ldr	r3, [pc, #388]	; (8004860 <HAL_RCC_OscConfig+0x4ac>)
 80046dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046de:	4a60      	ldr	r2, [pc, #384]	; (8004860 <HAL_RCC_OscConfig+0x4ac>)
 80046e0:	f043 0304 	orr.w	r3, r3, #4
 80046e4:	6713      	str	r3, [r2, #112]	; 0x70
 80046e6:	4b5e      	ldr	r3, [pc, #376]	; (8004860 <HAL_RCC_OscConfig+0x4ac>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	4a5d      	ldr	r2, [pc, #372]	; (8004860 <HAL_RCC_OscConfig+0x4ac>)
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	6713      	str	r3, [r2, #112]	; 0x70
 80046f2:	e00b      	b.n	800470c <HAL_RCC_OscConfig+0x358>
 80046f4:	4b5a      	ldr	r3, [pc, #360]	; (8004860 <HAL_RCC_OscConfig+0x4ac>)
 80046f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f8:	4a59      	ldr	r2, [pc, #356]	; (8004860 <HAL_RCC_OscConfig+0x4ac>)
 80046fa:	f023 0301 	bic.w	r3, r3, #1
 80046fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004700:	4b57      	ldr	r3, [pc, #348]	; (8004860 <HAL_RCC_OscConfig+0x4ac>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004704:	4a56      	ldr	r2, [pc, #344]	; (8004860 <HAL_RCC_OscConfig+0x4ac>)
 8004706:	f023 0304 	bic.w	r3, r3, #4
 800470a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d015      	beq.n	8004740 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004714:	f7fd fb98 	bl	8001e48 <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800471a:	e00a      	b.n	8004732 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800471c:	f7fd fb94 	bl	8001e48 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	f241 3288 	movw	r2, #5000	; 0x1388
 800472a:	4293      	cmp	r3, r2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e0d7      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004732:	4b4b      	ldr	r3, [pc, #300]	; (8004860 <HAL_RCC_OscConfig+0x4ac>)
 8004734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0ee      	beq.n	800471c <HAL_RCC_OscConfig+0x368>
 800473e:	e014      	b.n	800476a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004740:	f7fd fb82 	bl	8001e48 <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004746:	e00a      	b.n	800475e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004748:	f7fd fb7e 	bl	8001e48 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	f241 3288 	movw	r2, #5000	; 0x1388
 8004756:	4293      	cmp	r3, r2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e0c1      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800475e:	4b40      	ldr	r3, [pc, #256]	; (8004860 <HAL_RCC_OscConfig+0x4ac>)
 8004760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1ee      	bne.n	8004748 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800476a:	7dfb      	ldrb	r3, [r7, #23]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d105      	bne.n	800477c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004770:	4b3b      	ldr	r3, [pc, #236]	; (8004860 <HAL_RCC_OscConfig+0x4ac>)
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	4a3a      	ldr	r2, [pc, #232]	; (8004860 <HAL_RCC_OscConfig+0x4ac>)
 8004776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800477a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 80ad 	beq.w	80048e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004786:	4b36      	ldr	r3, [pc, #216]	; (8004860 <HAL_RCC_OscConfig+0x4ac>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 030c 	and.w	r3, r3, #12
 800478e:	2b08      	cmp	r3, #8
 8004790:	d060      	beq.n	8004854 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	2b02      	cmp	r3, #2
 8004798:	d145      	bne.n	8004826 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800479a:	4b33      	ldr	r3, [pc, #204]	; (8004868 <HAL_RCC_OscConfig+0x4b4>)
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a0:	f7fd fb52 	bl	8001e48 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a8:	f7fd fb4e 	bl	8001e48 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e093      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ba:	4b29      	ldr	r3, [pc, #164]	; (8004860 <HAL_RCC_OscConfig+0x4ac>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f0      	bne.n	80047a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69da      	ldr	r2, [r3, #28]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	019b      	lsls	r3, r3, #6
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047dc:	085b      	lsrs	r3, r3, #1
 80047de:	3b01      	subs	r3, #1
 80047e0:	041b      	lsls	r3, r3, #16
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e8:	061b      	lsls	r3, r3, #24
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f0:	071b      	lsls	r3, r3, #28
 80047f2:	491b      	ldr	r1, [pc, #108]	; (8004860 <HAL_RCC_OscConfig+0x4ac>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047f8:	4b1b      	ldr	r3, [pc, #108]	; (8004868 <HAL_RCC_OscConfig+0x4b4>)
 80047fa:	2201      	movs	r2, #1
 80047fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fe:	f7fd fb23 	bl	8001e48 <HAL_GetTick>
 8004802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004804:	e008      	b.n	8004818 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004806:	f7fd fb1f 	bl	8001e48 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d901      	bls.n	8004818 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e064      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004818:	4b11      	ldr	r3, [pc, #68]	; (8004860 <HAL_RCC_OscConfig+0x4ac>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0f0      	beq.n	8004806 <HAL_RCC_OscConfig+0x452>
 8004824:	e05c      	b.n	80048e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004826:	4b10      	ldr	r3, [pc, #64]	; (8004868 <HAL_RCC_OscConfig+0x4b4>)
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482c:	f7fd fb0c 	bl	8001e48 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004834:	f7fd fb08 	bl	8001e48 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e04d      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004846:	4b06      	ldr	r3, [pc, #24]	; (8004860 <HAL_RCC_OscConfig+0x4ac>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1f0      	bne.n	8004834 <HAL_RCC_OscConfig+0x480>
 8004852:	e045      	b.n	80048e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d107      	bne.n	800486c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e040      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
 8004860:	40023800 	.word	0x40023800
 8004864:	40007000 	.word	0x40007000
 8004868:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800486c:	4b1f      	ldr	r3, [pc, #124]	; (80048ec <HAL_RCC_OscConfig+0x538>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d030      	beq.n	80048dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004884:	429a      	cmp	r2, r3
 8004886:	d129      	bne.n	80048dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004892:	429a      	cmp	r2, r3
 8004894:	d122      	bne.n	80048dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800489c:	4013      	ands	r3, r2
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d119      	bne.n	80048dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b2:	085b      	lsrs	r3, r3, #1
 80048b4:	3b01      	subs	r3, #1
 80048b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d10f      	bne.n	80048dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d107      	bne.n	80048dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048d8:	429a      	cmp	r2, r3
 80048da:	d001      	beq.n	80048e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e000      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	40023800 	.word	0x40023800

080048f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e07b      	b.n	80049fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	2b00      	cmp	r3, #0
 8004908:	d108      	bne.n	800491c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004912:	d009      	beq.n	8004928 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	61da      	str	r2, [r3, #28]
 800491a:	e005      	b.n	8004928 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d106      	bne.n	8004948 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fd f8a2 	bl	8001a8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800495e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004970:	431a      	orrs	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	431a      	orrs	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004998:	431a      	orrs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049a2:	431a      	orrs	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ac:	ea42 0103 	orr.w	r1, r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	0c1b      	lsrs	r3, r3, #16
 80049c6:	f003 0104 	and.w	r1, r3, #4
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	f003 0210 	and.w	r2, r3, #16
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69da      	ldr	r2, [r3, #28]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b088      	sub	sp, #32
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	60f8      	str	r0, [r7, #12]
 8004a0a:	60b9      	str	r1, [r7, #8]
 8004a0c:	603b      	str	r3, [r7, #0]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <HAL_SPI_Transmit+0x22>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e126      	b.n	8004c72 <HAL_SPI_Transmit+0x270>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a2c:	f7fd fa0c 	bl	8001e48 <HAL_GetTick>
 8004a30:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a32:	88fb      	ldrh	r3, [r7, #6]
 8004a34:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d002      	beq.n	8004a48 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a42:	2302      	movs	r3, #2
 8004a44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a46:	e10b      	b.n	8004c60 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <HAL_SPI_Transmit+0x52>
 8004a4e:	88fb      	ldrh	r3, [r7, #6]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d102      	bne.n	8004a5a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a58:	e102      	b.n	8004c60 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2203      	movs	r2, #3
 8004a5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	88fa      	ldrh	r2, [r7, #6]
 8004a72:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	88fa      	ldrh	r2, [r7, #6]
 8004a78:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aa0:	d10f      	bne.n	8004ac2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ab0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ac0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004acc:	2b40      	cmp	r3, #64	; 0x40
 8004ace:	d007      	beq.n	8004ae0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ade:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ae8:	d14b      	bne.n	8004b82 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <HAL_SPI_Transmit+0xf6>
 8004af2:	8afb      	ldrh	r3, [r7, #22]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d13e      	bne.n	8004b76 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afc:	881a      	ldrh	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b08:	1c9a      	adds	r2, r3, #2
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	3b01      	subs	r3, #1
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b1c:	e02b      	b.n	8004b76 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d112      	bne.n	8004b52 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b30:	881a      	ldrh	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3c:	1c9a      	adds	r2, r3, #2
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b50:	e011      	b.n	8004b76 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b52:	f7fd f979 	bl	8001e48 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d803      	bhi.n	8004b6a <HAL_SPI_Transmit+0x168>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b68:	d102      	bne.n	8004b70 <HAL_SPI_Transmit+0x16e>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d102      	bne.n	8004b76 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b74:	e074      	b.n	8004c60 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1ce      	bne.n	8004b1e <HAL_SPI_Transmit+0x11c>
 8004b80:	e04c      	b.n	8004c1c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <HAL_SPI_Transmit+0x18e>
 8004b8a:	8afb      	ldrh	r3, [r7, #22]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d140      	bne.n	8004c12 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	330c      	adds	r3, #12
 8004b9a:	7812      	ldrb	r2, [r2, #0]
 8004b9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004bb6:	e02c      	b.n	8004c12 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d113      	bne.n	8004bee <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	330c      	adds	r3, #12
 8004bd0:	7812      	ldrb	r2, [r2, #0]
 8004bd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd8:	1c5a      	adds	r2, r3, #1
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	3b01      	subs	r3, #1
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bec:	e011      	b.n	8004c12 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bee:	f7fd f92b 	bl	8001e48 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d803      	bhi.n	8004c06 <HAL_SPI_Transmit+0x204>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c04:	d102      	bne.n	8004c0c <HAL_SPI_Transmit+0x20a>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d102      	bne.n	8004c12 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c10:	e026      	b.n	8004c60 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1cd      	bne.n	8004bb8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	6839      	ldr	r1, [r7, #0]
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 fbcb 	bl	80053bc <SPI_EndRxTxTransaction>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10a      	bne.n	8004c50 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	613b      	str	r3, [r7, #16]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	613b      	str	r3, [r7, #16]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	613b      	str	r3, [r7, #16]
 8004c4e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	77fb      	strb	r3, [r7, #31]
 8004c5c:	e000      	b.n	8004c60 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004c5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c70:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3720      	adds	r7, #32
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b088      	sub	sp, #32
 8004c7e:	af02      	add	r7, sp, #8
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	603b      	str	r3, [r7, #0]
 8004c86:	4613      	mov	r3, r2
 8004c88:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c96:	d112      	bne.n	8004cbe <HAL_SPI_Receive+0x44>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10e      	bne.n	8004cbe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2204      	movs	r2, #4
 8004ca4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ca8:	88fa      	ldrh	r2, [r7, #6]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	68b9      	ldr	r1, [r7, #8]
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 f8f1 	bl	8004e9c <HAL_SPI_TransmitReceive>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	e0ea      	b.n	8004e94 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d101      	bne.n	8004ccc <HAL_SPI_Receive+0x52>
 8004cc8:	2302      	movs	r3, #2
 8004cca:	e0e3      	b.n	8004e94 <HAL_SPI_Receive+0x21a>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cd4:	f7fd f8b8 	bl	8001e48 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d002      	beq.n	8004cec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cea:	e0ca      	b.n	8004e82 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d002      	beq.n	8004cf8 <HAL_SPI_Receive+0x7e>
 8004cf2:	88fb      	ldrh	r3, [r7, #6]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d102      	bne.n	8004cfe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cfc:	e0c1      	b.n	8004e82 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2204      	movs	r2, #4
 8004d02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	88fa      	ldrh	r2, [r7, #6]
 8004d16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	88fa      	ldrh	r2, [r7, #6]
 8004d1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d44:	d10f      	bne.n	8004d66 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d64:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d70:	2b40      	cmp	r3, #64	; 0x40
 8004d72:	d007      	beq.n	8004d84 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d82:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d162      	bne.n	8004e52 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d8c:	e02e      	b.n	8004dec <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d115      	bne.n	8004dc8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f103 020c 	add.w	r2, r3, #12
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da8:	7812      	ldrb	r2, [r2, #0]
 8004daa:	b2d2      	uxtb	r2, r2
 8004dac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dc6:	e011      	b.n	8004dec <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dc8:	f7fd f83e 	bl	8001e48 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d803      	bhi.n	8004de0 <HAL_SPI_Receive+0x166>
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dde:	d102      	bne.n	8004de6 <HAL_SPI_Receive+0x16c>
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d102      	bne.n	8004dec <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004dea:	e04a      	b.n	8004e82 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1cb      	bne.n	8004d8e <HAL_SPI_Receive+0x114>
 8004df6:	e031      	b.n	8004e5c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d113      	bne.n	8004e2e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e10:	b292      	uxth	r2, r2
 8004e12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e18:	1c9a      	adds	r2, r3, #2
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e2c:	e011      	b.n	8004e52 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e2e:	f7fd f80b 	bl	8001e48 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d803      	bhi.n	8004e46 <HAL_SPI_Receive+0x1cc>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e44:	d102      	bne.n	8004e4c <HAL_SPI_Receive+0x1d2>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d102      	bne.n	8004e52 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e50:	e017      	b.n	8004e82 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1cd      	bne.n	8004df8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	6839      	ldr	r1, [r7, #0]
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 fa45 	bl	80052f0 <SPI_EndRxTransaction>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d002      	beq.n	8004e72 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	75fb      	strb	r3, [r7, #23]
 8004e7e:	e000      	b.n	8004e82 <HAL_SPI_Receive+0x208>
  }

error :
 8004e80:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b08c      	sub	sp, #48	; 0x30
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
 8004ea8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d101      	bne.n	8004ec2 <HAL_SPI_TransmitReceive+0x26>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e18a      	b.n	80051d8 <HAL_SPI_TransmitReceive+0x33c>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004eca:	f7fc ffbd 	bl	8001e48 <HAL_GetTick>
 8004ece:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004ee0:	887b      	ldrh	r3, [r7, #2]
 8004ee2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ee4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d00f      	beq.n	8004f0c <HAL_SPI_TransmitReceive+0x70>
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ef2:	d107      	bne.n	8004f04 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d103      	bne.n	8004f04 <HAL_SPI_TransmitReceive+0x68>
 8004efc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d003      	beq.n	8004f0c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004f04:	2302      	movs	r3, #2
 8004f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f0a:	e15b      	b.n	80051c4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d005      	beq.n	8004f1e <HAL_SPI_TransmitReceive+0x82>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d002      	beq.n	8004f1e <HAL_SPI_TransmitReceive+0x82>
 8004f18:	887b      	ldrh	r3, [r7, #2]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d103      	bne.n	8004f26 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f24:	e14e      	b.n	80051c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d003      	beq.n	8004f3a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2205      	movs	r2, #5
 8004f36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	887a      	ldrh	r2, [r7, #2]
 8004f4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	887a      	ldrh	r2, [r7, #2]
 8004f50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	887a      	ldrh	r2, [r7, #2]
 8004f5c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	887a      	ldrh	r2, [r7, #2]
 8004f62:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7a:	2b40      	cmp	r3, #64	; 0x40
 8004f7c:	d007      	beq.n	8004f8e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f96:	d178      	bne.n	800508a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <HAL_SPI_TransmitReceive+0x10a>
 8004fa0:	8b7b      	ldrh	r3, [r7, #26]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d166      	bne.n	8005074 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004faa:	881a      	ldrh	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb6:	1c9a      	adds	r2, r3, #2
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fca:	e053      	b.n	8005074 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d11b      	bne.n	8005012 <HAL_SPI_TransmitReceive+0x176>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d016      	beq.n	8005012 <HAL_SPI_TransmitReceive+0x176>
 8004fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d113      	bne.n	8005012 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	881a      	ldrh	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffa:	1c9a      	adds	r2, r3, #2
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005004:	b29b      	uxth	r3, r3
 8005006:	3b01      	subs	r3, #1
 8005008:	b29a      	uxth	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	2b01      	cmp	r3, #1
 800501e:	d119      	bne.n	8005054 <HAL_SPI_TransmitReceive+0x1b8>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005024:	b29b      	uxth	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d014      	beq.n	8005054 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005034:	b292      	uxth	r2, r2
 8005036:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503c:	1c9a      	adds	r2, r3, #2
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005046:	b29b      	uxth	r3, r3
 8005048:	3b01      	subs	r3, #1
 800504a:	b29a      	uxth	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005050:	2301      	movs	r3, #1
 8005052:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005054:	f7fc fef8 	bl	8001e48 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005060:	429a      	cmp	r2, r3
 8005062:	d807      	bhi.n	8005074 <HAL_SPI_TransmitReceive+0x1d8>
 8005064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506a:	d003      	beq.n	8005074 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005072:	e0a7      	b.n	80051c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005078:	b29b      	uxth	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1a6      	bne.n	8004fcc <HAL_SPI_TransmitReceive+0x130>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005082:	b29b      	uxth	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1a1      	bne.n	8004fcc <HAL_SPI_TransmitReceive+0x130>
 8005088:	e07c      	b.n	8005184 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <HAL_SPI_TransmitReceive+0x1fc>
 8005092:	8b7b      	ldrh	r3, [r7, #26]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d16b      	bne.n	8005170 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	330c      	adds	r3, #12
 80050a2:	7812      	ldrb	r2, [r2, #0]
 80050a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050be:	e057      	b.n	8005170 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d11c      	bne.n	8005108 <HAL_SPI_TransmitReceive+0x26c>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d017      	beq.n	8005108 <HAL_SPI_TransmitReceive+0x26c>
 80050d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d114      	bne.n	8005108 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	330c      	adds	r3, #12
 80050e8:	7812      	ldrb	r2, [r2, #0]
 80050ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	3b01      	subs	r3, #1
 80050fe:	b29a      	uxth	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b01      	cmp	r3, #1
 8005114:	d119      	bne.n	800514a <HAL_SPI_TransmitReceive+0x2ae>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800511a:	b29b      	uxth	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d014      	beq.n	800514a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68da      	ldr	r2, [r3, #12]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005132:	1c5a      	adds	r2, r3, #1
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800513c:	b29b      	uxth	r3, r3
 800513e:	3b01      	subs	r3, #1
 8005140:	b29a      	uxth	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005146:	2301      	movs	r3, #1
 8005148:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800514a:	f7fc fe7d 	bl	8001e48 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005156:	429a      	cmp	r2, r3
 8005158:	d803      	bhi.n	8005162 <HAL_SPI_TransmitReceive+0x2c6>
 800515a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005160:	d102      	bne.n	8005168 <HAL_SPI_TransmitReceive+0x2cc>
 8005162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005164:	2b00      	cmp	r3, #0
 8005166:	d103      	bne.n	8005170 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800516e:	e029      	b.n	80051c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005174:	b29b      	uxth	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1a2      	bne.n	80050c0 <HAL_SPI_TransmitReceive+0x224>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800517e:	b29b      	uxth	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d19d      	bne.n	80050c0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005186:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 f917 	bl	80053bc <SPI_EndRxTxTransaction>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d006      	beq.n	80051a2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2220      	movs	r2, #32
 800519e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80051a0:	e010      	b.n	80051c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10b      	bne.n	80051c2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051aa:	2300      	movs	r3, #0
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	617b      	str	r3, [r7, #20]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	e000      	b.n	80051c4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80051c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3730      	adds	r7, #48	; 0x30
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b088      	sub	sp, #32
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	603b      	str	r3, [r7, #0]
 80051ec:	4613      	mov	r3, r2
 80051ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051f0:	f7fc fe2a 	bl	8001e48 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f8:	1a9b      	subs	r3, r3, r2
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	4413      	add	r3, r2
 80051fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005200:	f7fc fe22 	bl	8001e48 <HAL_GetTick>
 8005204:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005206:	4b39      	ldr	r3, [pc, #228]	; (80052ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	015b      	lsls	r3, r3, #5
 800520c:	0d1b      	lsrs	r3, r3, #20
 800520e:	69fa      	ldr	r2, [r7, #28]
 8005210:	fb02 f303 	mul.w	r3, r2, r3
 8005214:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005216:	e054      	b.n	80052c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521e:	d050      	beq.n	80052c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005220:	f7fc fe12 	bl	8001e48 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	69fa      	ldr	r2, [r7, #28]
 800522c:	429a      	cmp	r2, r3
 800522e:	d902      	bls.n	8005236 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d13d      	bne.n	80052b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005244:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800524e:	d111      	bne.n	8005274 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005258:	d004      	beq.n	8005264 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005262:	d107      	bne.n	8005274 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005272:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005278:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800527c:	d10f      	bne.n	800529e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800529c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e017      	b.n	80052e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	3b01      	subs	r3, #1
 80052c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	4013      	ands	r3, r2
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	bf0c      	ite	eq
 80052d2:	2301      	moveq	r3, #1
 80052d4:	2300      	movne	r3, #0
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	461a      	mov	r2, r3
 80052da:	79fb      	ldrb	r3, [r7, #7]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d19b      	bne.n	8005218 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3720      	adds	r7, #32
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	20000000 	.word	0x20000000

080052f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af02      	add	r7, sp, #8
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005304:	d111      	bne.n	800532a <SPI_EndRxTransaction+0x3a>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800530e:	d004      	beq.n	800531a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005318:	d107      	bne.n	800532a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005328:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005332:	d12a      	bne.n	800538a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800533c:	d012      	beq.n	8005364 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2200      	movs	r2, #0
 8005346:	2180      	movs	r1, #128	; 0x80
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f7ff ff49 	bl	80051e0 <SPI_WaitFlagStateUntilTimeout>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d02d      	beq.n	80053b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005358:	f043 0220 	orr.w	r2, r3, #32
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e026      	b.n	80053b2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2200      	movs	r2, #0
 800536c:	2101      	movs	r1, #1
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f7ff ff36 	bl	80051e0 <SPI_WaitFlagStateUntilTimeout>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d01a      	beq.n	80053b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537e:	f043 0220 	orr.w	r2, r3, #32
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e013      	b.n	80053b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2200      	movs	r2, #0
 8005392:	2101      	movs	r1, #1
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f7ff ff23 	bl	80051e0 <SPI_WaitFlagStateUntilTimeout>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d007      	beq.n	80053b0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a4:	f043 0220 	orr.w	r2, r3, #32
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e000      	b.n	80053b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
	...

080053bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b088      	sub	sp, #32
 80053c0:	af02      	add	r7, sp, #8
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053c8:	4b1b      	ldr	r3, [pc, #108]	; (8005438 <SPI_EndRxTxTransaction+0x7c>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a1b      	ldr	r2, [pc, #108]	; (800543c <SPI_EndRxTxTransaction+0x80>)
 80053ce:	fba2 2303 	umull	r2, r3, r2, r3
 80053d2:	0d5b      	lsrs	r3, r3, #21
 80053d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053d8:	fb02 f303 	mul.w	r3, r2, r3
 80053dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053e6:	d112      	bne.n	800540e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2200      	movs	r2, #0
 80053f0:	2180      	movs	r1, #128	; 0x80
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f7ff fef4 	bl	80051e0 <SPI_WaitFlagStateUntilTimeout>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d016      	beq.n	800542c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005402:	f043 0220 	orr.w	r2, r3, #32
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e00f      	b.n	800542e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00a      	beq.n	800542a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	3b01      	subs	r3, #1
 8005418:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005424:	2b80      	cmp	r3, #128	; 0x80
 8005426:	d0f2      	beq.n	800540e <SPI_EndRxTxTransaction+0x52>
 8005428:	e000      	b.n	800542c <SPI_EndRxTxTransaction+0x70>
        break;
 800542a:	bf00      	nop
  }

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3718      	adds	r7, #24
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	20000000 	.word	0x20000000
 800543c:	165e9f81 	.word	0x165e9f81

08005440 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e041      	b.n	80054d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d106      	bne.n	800546c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fc fb58 	bl	8001b1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3304      	adds	r3, #4
 800547c:	4619      	mov	r1, r3
 800547e:	4610      	mov	r0, r2
 8005480:	f000 f9ce 	bl	8005820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
	...

080054e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d001      	beq.n	80054f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e04e      	b.n	8005596 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68da      	ldr	r2, [r3, #12]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0201 	orr.w	r2, r2, #1
 800550e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a23      	ldr	r2, [pc, #140]	; (80055a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d022      	beq.n	8005560 <HAL_TIM_Base_Start_IT+0x80>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005522:	d01d      	beq.n	8005560 <HAL_TIM_Base_Start_IT+0x80>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a1f      	ldr	r2, [pc, #124]	; (80055a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d018      	beq.n	8005560 <HAL_TIM_Base_Start_IT+0x80>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a1e      	ldr	r2, [pc, #120]	; (80055ac <HAL_TIM_Base_Start_IT+0xcc>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d013      	beq.n	8005560 <HAL_TIM_Base_Start_IT+0x80>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a1c      	ldr	r2, [pc, #112]	; (80055b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00e      	beq.n	8005560 <HAL_TIM_Base_Start_IT+0x80>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a1b      	ldr	r2, [pc, #108]	; (80055b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d009      	beq.n	8005560 <HAL_TIM_Base_Start_IT+0x80>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a19      	ldr	r2, [pc, #100]	; (80055b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d004      	beq.n	8005560 <HAL_TIM_Base_Start_IT+0x80>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a18      	ldr	r2, [pc, #96]	; (80055bc <HAL_TIM_Base_Start_IT+0xdc>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d111      	bne.n	8005584 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f003 0307 	and.w	r3, r3, #7
 800556a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2b06      	cmp	r3, #6
 8005570:	d010      	beq.n	8005594 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f042 0201 	orr.w	r2, r2, #1
 8005580:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005582:	e007      	b.n	8005594 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0201 	orr.w	r2, r2, #1
 8005592:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	40010000 	.word	0x40010000
 80055a8:	40000400 	.word	0x40000400
 80055ac:	40000800 	.word	0x40000800
 80055b0:	40000c00 	.word	0x40000c00
 80055b4:	40010400 	.word	0x40010400
 80055b8:	40014000 	.word	0x40014000
 80055bc:	40001800 	.word	0x40001800

080055c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d122      	bne.n	800561c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d11b      	bne.n	800561c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f06f 0202 	mvn.w	r2, #2
 80055ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f8ee 	bl	80057e4 <HAL_TIM_IC_CaptureCallback>
 8005608:	e005      	b.n	8005616 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f8e0 	bl	80057d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f8f1 	bl	80057f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f003 0304 	and.w	r3, r3, #4
 8005626:	2b04      	cmp	r3, #4
 8005628:	d122      	bne.n	8005670 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b04      	cmp	r3, #4
 8005636:	d11b      	bne.n	8005670 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f06f 0204 	mvn.w	r2, #4
 8005640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2202      	movs	r2, #2
 8005646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f8c4 	bl	80057e4 <HAL_TIM_IC_CaptureCallback>
 800565c:	e005      	b.n	800566a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f8b6 	bl	80057d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f8c7 	bl	80057f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0308 	and.w	r3, r3, #8
 800567a:	2b08      	cmp	r3, #8
 800567c:	d122      	bne.n	80056c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f003 0308 	and.w	r3, r3, #8
 8005688:	2b08      	cmp	r3, #8
 800568a:	d11b      	bne.n	80056c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f06f 0208 	mvn.w	r2, #8
 8005694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2204      	movs	r2, #4
 800569a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	f003 0303 	and.w	r3, r3, #3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f89a 	bl	80057e4 <HAL_TIM_IC_CaptureCallback>
 80056b0:	e005      	b.n	80056be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f88c 	bl	80057d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f89d 	bl	80057f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	f003 0310 	and.w	r3, r3, #16
 80056ce:	2b10      	cmp	r3, #16
 80056d0:	d122      	bne.n	8005718 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f003 0310 	and.w	r3, r3, #16
 80056dc:	2b10      	cmp	r3, #16
 80056de:	d11b      	bne.n	8005718 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f06f 0210 	mvn.w	r2, #16
 80056e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2208      	movs	r2, #8
 80056ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f870 	bl	80057e4 <HAL_TIM_IC_CaptureCallback>
 8005704:	e005      	b.n	8005712 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f862 	bl	80057d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f873 	bl	80057f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b01      	cmp	r3, #1
 8005724:	d10e      	bne.n	8005744 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b01      	cmp	r3, #1
 8005732:	d107      	bne.n	8005744 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f06f 0201 	mvn.w	r2, #1
 800573c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7fb ffe8 	bl	8001714 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800574e:	2b80      	cmp	r3, #128	; 0x80
 8005750:	d10e      	bne.n	8005770 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575c:	2b80      	cmp	r3, #128	; 0x80
 800575e:	d107      	bne.n	8005770 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f902 	bl	8005974 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577a:	2b40      	cmp	r3, #64	; 0x40
 800577c:	d10e      	bne.n	800579c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005788:	2b40      	cmp	r3, #64	; 0x40
 800578a:	d107      	bne.n	800579c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f838 	bl	800580c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f003 0320 	and.w	r3, r3, #32
 80057a6:	2b20      	cmp	r3, #32
 80057a8:	d10e      	bne.n	80057c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f003 0320 	and.w	r3, r3, #32
 80057b4:	2b20      	cmp	r3, #32
 80057b6:	d107      	bne.n	80057c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0220 	mvn.w	r2, #32
 80057c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f8cc 	bl	8005960 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057c8:	bf00      	nop
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a40      	ldr	r2, [pc, #256]	; (8005934 <TIM_Base_SetConfig+0x114>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d013      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800583e:	d00f      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a3d      	ldr	r2, [pc, #244]	; (8005938 <TIM_Base_SetConfig+0x118>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d00b      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a3c      	ldr	r2, [pc, #240]	; (800593c <TIM_Base_SetConfig+0x11c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d007      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a3b      	ldr	r2, [pc, #236]	; (8005940 <TIM_Base_SetConfig+0x120>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d003      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a3a      	ldr	r2, [pc, #232]	; (8005944 <TIM_Base_SetConfig+0x124>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d108      	bne.n	8005872 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a2f      	ldr	r2, [pc, #188]	; (8005934 <TIM_Base_SetConfig+0x114>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d02b      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005880:	d027      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a2c      	ldr	r2, [pc, #176]	; (8005938 <TIM_Base_SetConfig+0x118>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d023      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a2b      	ldr	r2, [pc, #172]	; (800593c <TIM_Base_SetConfig+0x11c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d01f      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a2a      	ldr	r2, [pc, #168]	; (8005940 <TIM_Base_SetConfig+0x120>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d01b      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a29      	ldr	r2, [pc, #164]	; (8005944 <TIM_Base_SetConfig+0x124>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d017      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a28      	ldr	r2, [pc, #160]	; (8005948 <TIM_Base_SetConfig+0x128>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d013      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a27      	ldr	r2, [pc, #156]	; (800594c <TIM_Base_SetConfig+0x12c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00f      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a26      	ldr	r2, [pc, #152]	; (8005950 <TIM_Base_SetConfig+0x130>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00b      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a25      	ldr	r2, [pc, #148]	; (8005954 <TIM_Base_SetConfig+0x134>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d007      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a24      	ldr	r2, [pc, #144]	; (8005958 <TIM_Base_SetConfig+0x138>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d003      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a23      	ldr	r2, [pc, #140]	; (800595c <TIM_Base_SetConfig+0x13c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d108      	bne.n	80058e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a0a      	ldr	r2, [pc, #40]	; (8005934 <TIM_Base_SetConfig+0x114>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d003      	beq.n	8005918 <TIM_Base_SetConfig+0xf8>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a0c      	ldr	r2, [pc, #48]	; (8005944 <TIM_Base_SetConfig+0x124>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d103      	bne.n	8005920 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	691a      	ldr	r2, [r3, #16]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	615a      	str	r2, [r3, #20]
}
 8005926:	bf00      	nop
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40010000 	.word	0x40010000
 8005938:	40000400 	.word	0x40000400
 800593c:	40000800 	.word	0x40000800
 8005940:	40000c00 	.word	0x40000c00
 8005944:	40010400 	.word	0x40010400
 8005948:	40014000 	.word	0x40014000
 800594c:	40014400 	.word	0x40014400
 8005950:	40014800 	.word	0x40014800
 8005954:	40001800 	.word	0x40001800
 8005958:	40001c00 	.word	0x40001c00
 800595c:	40002000 	.word	0x40002000

08005960 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e03f      	b.n	8005a1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d106      	bne.n	80059b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7fc f8dc 	bl	8001b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2224      	movs	r2, #36	; 0x24
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68da      	ldr	r2, [r3, #12]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f9a7 	bl	8005d20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	695a      	ldr	r2, [r3, #20]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2220      	movs	r2, #32
 8005a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b08a      	sub	sp, #40	; 0x28
 8005a26:	af02      	add	r7, sp, #8
 8005a28:	60f8      	str	r0, [r7, #12]
 8005a2a:	60b9      	str	r1, [r7, #8]
 8005a2c:	603b      	str	r3, [r7, #0]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b20      	cmp	r3, #32
 8005a40:	d17c      	bne.n	8005b3c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <HAL_UART_Transmit+0x2c>
 8005a48:	88fb      	ldrh	r3, [r7, #6]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e075      	b.n	8005b3e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d101      	bne.n	8005a60 <HAL_UART_Transmit+0x3e>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	e06e      	b.n	8005b3e <HAL_UART_Transmit+0x11c>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2221      	movs	r2, #33	; 0x21
 8005a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a76:	f7fc f9e7 	bl	8001e48 <HAL_GetTick>
 8005a7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	88fa      	ldrh	r2, [r7, #6]
 8005a80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	88fa      	ldrh	r2, [r7, #6]
 8005a86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a90:	d108      	bne.n	8005aa4 <HAL_UART_Transmit+0x82>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d104      	bne.n	8005aa4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	61bb      	str	r3, [r7, #24]
 8005aa2:	e003      	b.n	8005aac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ab4:	e02a      	b.n	8005b0c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2200      	movs	r2, #0
 8005abe:	2180      	movs	r1, #128	; 0x80
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 f8e2 	bl	8005c8a <UART_WaitOnFlagUntilTimeout>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e036      	b.n	8005b3e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10b      	bne.n	8005aee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	461a      	mov	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ae4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	3302      	adds	r3, #2
 8005aea:	61bb      	str	r3, [r7, #24]
 8005aec:	e007      	b.n	8005afe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	781a      	ldrb	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	3301      	adds	r3, #1
 8005afc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	3b01      	subs	r3, #1
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1cf      	bne.n	8005ab6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	2140      	movs	r1, #64	; 0x40
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 f8b2 	bl	8005c8a <UART_WaitOnFlagUntilTimeout>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d001      	beq.n	8005b30 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e006      	b.n	8005b3e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2220      	movs	r2, #32
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	e000      	b.n	8005b3e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b3c:	2302      	movs	r3, #2
  }
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3720      	adds	r7, #32
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b08a      	sub	sp, #40	; 0x28
 8005b4a:	af02      	add	r7, sp, #8
 8005b4c:	60f8      	str	r0, [r7, #12]
 8005b4e:	60b9      	str	r1, [r7, #8]
 8005b50:	603b      	str	r3, [r7, #0]
 8005b52:	4613      	mov	r3, r2
 8005b54:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b20      	cmp	r3, #32
 8005b64:	f040 808c 	bne.w	8005c80 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <HAL_UART_Receive+0x2e>
 8005b6e:	88fb      	ldrh	r3, [r7, #6]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e084      	b.n	8005c82 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d101      	bne.n	8005b86 <HAL_UART_Receive+0x40>
 8005b82:	2302      	movs	r3, #2
 8005b84:	e07d      	b.n	8005c82 <HAL_UART_Receive+0x13c>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2222      	movs	r2, #34	; 0x22
 8005b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ba2:	f7fc f951 	bl	8001e48 <HAL_GetTick>
 8005ba6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	88fa      	ldrh	r2, [r7, #6]
 8005bac:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	88fa      	ldrh	r2, [r7, #6]
 8005bb2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bbc:	d108      	bne.n	8005bd0 <HAL_UART_Receive+0x8a>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d104      	bne.n	8005bd0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	61bb      	str	r3, [r7, #24]
 8005bce:	e003      	b.n	8005bd8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005be0:	e043      	b.n	8005c6a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2200      	movs	r2, #0
 8005bea:	2120      	movs	r1, #32
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 f84c 	bl	8005c8a <UART_WaitOnFlagUntilTimeout>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e042      	b.n	8005c82 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10c      	bne.n	8005c1c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	3302      	adds	r3, #2
 8005c18:	61bb      	str	r3, [r7, #24]
 8005c1a:	e01f      	b.n	8005c5c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c24:	d007      	beq.n	8005c36 <HAL_UART_Receive+0xf0>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10a      	bne.n	8005c44 <HAL_UART_Receive+0xfe>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	701a      	strb	r2, [r3, #0]
 8005c42:	e008      	b.n	8005c56 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1b6      	bne.n	8005be2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	e000      	b.n	8005c82 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005c80:	2302      	movs	r3, #2
  }
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3720      	adds	r7, #32
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b084      	sub	sp, #16
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	60f8      	str	r0, [r7, #12]
 8005c92:	60b9      	str	r1, [r7, #8]
 8005c94:	603b      	str	r3, [r7, #0]
 8005c96:	4613      	mov	r3, r2
 8005c98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c9a:	e02c      	b.n	8005cf6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca2:	d028      	beq.n	8005cf6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d007      	beq.n	8005cba <UART_WaitOnFlagUntilTimeout+0x30>
 8005caa:	f7fc f8cd 	bl	8001e48 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d21d      	bcs.n	8005cf6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005cc8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	695a      	ldr	r2, [r3, #20]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f022 0201 	bic.w	r2, r2, #1
 8005cd8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e00f      	b.n	8005d16 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	bf0c      	ite	eq
 8005d06:	2301      	moveq	r3, #1
 8005d08:	2300      	movne	r3, #0
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	79fb      	ldrb	r3, [r7, #7]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d0c3      	beq.n	8005c9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
	...

08005d20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d24:	b09f      	sub	sp, #124	; 0x7c
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d36:	68d9      	ldr	r1, [r3, #12]
 8005d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	ea40 0301 	orr.w	r3, r0, r1
 8005d40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d44:	689a      	ldr	r2, [r3, #8]
 8005d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	431a      	orrs	r2, r3
 8005d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d64:	f021 010c 	bic.w	r1, r1, #12
 8005d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d6e:	430b      	orrs	r3, r1
 8005d70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7e:	6999      	ldr	r1, [r3, #24]
 8005d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	ea40 0301 	orr.w	r3, r0, r1
 8005d88:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	4bc5      	ldr	r3, [pc, #788]	; (80060a4 <UART_SetConfig+0x384>)
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d004      	beq.n	8005d9e <UART_SetConfig+0x7e>
 8005d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	4bc3      	ldr	r3, [pc, #780]	; (80060a8 <UART_SetConfig+0x388>)
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d103      	bne.n	8005da6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d9e:	f7fd fde7 	bl	8003970 <HAL_RCC_GetPCLK2Freq>
 8005da2:	6778      	str	r0, [r7, #116]	; 0x74
 8005da4:	e002      	b.n	8005dac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005da6:	f7fd fdcf 	bl	8003948 <HAL_RCC_GetPCLK1Freq>
 8005daa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005db4:	f040 80b6 	bne.w	8005f24 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005db8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dba:	461c      	mov	r4, r3
 8005dbc:	f04f 0500 	mov.w	r5, #0
 8005dc0:	4622      	mov	r2, r4
 8005dc2:	462b      	mov	r3, r5
 8005dc4:	1891      	adds	r1, r2, r2
 8005dc6:	6439      	str	r1, [r7, #64]	; 0x40
 8005dc8:	415b      	adcs	r3, r3
 8005dca:	647b      	str	r3, [r7, #68]	; 0x44
 8005dcc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005dd0:	1912      	adds	r2, r2, r4
 8005dd2:	eb45 0303 	adc.w	r3, r5, r3
 8005dd6:	f04f 0000 	mov.w	r0, #0
 8005dda:	f04f 0100 	mov.w	r1, #0
 8005dde:	00d9      	lsls	r1, r3, #3
 8005de0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005de4:	00d0      	lsls	r0, r2, #3
 8005de6:	4602      	mov	r2, r0
 8005de8:	460b      	mov	r3, r1
 8005dea:	1911      	adds	r1, r2, r4
 8005dec:	6639      	str	r1, [r7, #96]	; 0x60
 8005dee:	416b      	adcs	r3, r5
 8005df0:	667b      	str	r3, [r7, #100]	; 0x64
 8005df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	461a      	mov	r2, r3
 8005df8:	f04f 0300 	mov.w	r3, #0
 8005dfc:	1891      	adds	r1, r2, r2
 8005dfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e00:	415b      	adcs	r3, r3
 8005e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e08:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005e0c:	f7fa fa08 	bl	8000220 <__aeabi_uldivmod>
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	4ba5      	ldr	r3, [pc, #660]	; (80060ac <UART_SetConfig+0x38c>)
 8005e16:	fba3 2302 	umull	r2, r3, r3, r2
 8005e1a:	095b      	lsrs	r3, r3, #5
 8005e1c:	011e      	lsls	r6, r3, #4
 8005e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e20:	461c      	mov	r4, r3
 8005e22:	f04f 0500 	mov.w	r5, #0
 8005e26:	4622      	mov	r2, r4
 8005e28:	462b      	mov	r3, r5
 8005e2a:	1891      	adds	r1, r2, r2
 8005e2c:	6339      	str	r1, [r7, #48]	; 0x30
 8005e2e:	415b      	adcs	r3, r3
 8005e30:	637b      	str	r3, [r7, #52]	; 0x34
 8005e32:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005e36:	1912      	adds	r2, r2, r4
 8005e38:	eb45 0303 	adc.w	r3, r5, r3
 8005e3c:	f04f 0000 	mov.w	r0, #0
 8005e40:	f04f 0100 	mov.w	r1, #0
 8005e44:	00d9      	lsls	r1, r3, #3
 8005e46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e4a:	00d0      	lsls	r0, r2, #3
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	1911      	adds	r1, r2, r4
 8005e52:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e54:	416b      	adcs	r3, r5
 8005e56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	f04f 0300 	mov.w	r3, #0
 8005e62:	1891      	adds	r1, r2, r2
 8005e64:	62b9      	str	r1, [r7, #40]	; 0x28
 8005e66:	415b      	adcs	r3, r3
 8005e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e6e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005e72:	f7fa f9d5 	bl	8000220 <__aeabi_uldivmod>
 8005e76:	4602      	mov	r2, r0
 8005e78:	460b      	mov	r3, r1
 8005e7a:	4b8c      	ldr	r3, [pc, #560]	; (80060ac <UART_SetConfig+0x38c>)
 8005e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e80:	095b      	lsrs	r3, r3, #5
 8005e82:	2164      	movs	r1, #100	; 0x64
 8005e84:	fb01 f303 	mul.w	r3, r1, r3
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	00db      	lsls	r3, r3, #3
 8005e8c:	3332      	adds	r3, #50	; 0x32
 8005e8e:	4a87      	ldr	r2, [pc, #540]	; (80060ac <UART_SetConfig+0x38c>)
 8005e90:	fba2 2303 	umull	r2, r3, r2, r3
 8005e94:	095b      	lsrs	r3, r3, #5
 8005e96:	005b      	lsls	r3, r3, #1
 8005e98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e9c:	441e      	add	r6, r3
 8005e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f04f 0100 	mov.w	r1, #0
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	1894      	adds	r4, r2, r2
 8005eac:	623c      	str	r4, [r7, #32]
 8005eae:	415b      	adcs	r3, r3
 8005eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8005eb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005eb6:	1812      	adds	r2, r2, r0
 8005eb8:	eb41 0303 	adc.w	r3, r1, r3
 8005ebc:	f04f 0400 	mov.w	r4, #0
 8005ec0:	f04f 0500 	mov.w	r5, #0
 8005ec4:	00dd      	lsls	r5, r3, #3
 8005ec6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005eca:	00d4      	lsls	r4, r2, #3
 8005ecc:	4622      	mov	r2, r4
 8005ece:	462b      	mov	r3, r5
 8005ed0:	1814      	adds	r4, r2, r0
 8005ed2:	653c      	str	r4, [r7, #80]	; 0x50
 8005ed4:	414b      	adcs	r3, r1
 8005ed6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	461a      	mov	r2, r3
 8005ede:	f04f 0300 	mov.w	r3, #0
 8005ee2:	1891      	adds	r1, r2, r2
 8005ee4:	61b9      	str	r1, [r7, #24]
 8005ee6:	415b      	adcs	r3, r3
 8005ee8:	61fb      	str	r3, [r7, #28]
 8005eea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005eee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005ef2:	f7fa f995 	bl	8000220 <__aeabi_uldivmod>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4b6c      	ldr	r3, [pc, #432]	; (80060ac <UART_SetConfig+0x38c>)
 8005efc:	fba3 1302 	umull	r1, r3, r3, r2
 8005f00:	095b      	lsrs	r3, r3, #5
 8005f02:	2164      	movs	r1, #100	; 0x64
 8005f04:	fb01 f303 	mul.w	r3, r1, r3
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	3332      	adds	r3, #50	; 0x32
 8005f0e:	4a67      	ldr	r2, [pc, #412]	; (80060ac <UART_SetConfig+0x38c>)
 8005f10:	fba2 2303 	umull	r2, r3, r2, r3
 8005f14:	095b      	lsrs	r3, r3, #5
 8005f16:	f003 0207 	and.w	r2, r3, #7
 8005f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4432      	add	r2, r6
 8005f20:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f22:	e0b9      	b.n	8006098 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f26:	461c      	mov	r4, r3
 8005f28:	f04f 0500 	mov.w	r5, #0
 8005f2c:	4622      	mov	r2, r4
 8005f2e:	462b      	mov	r3, r5
 8005f30:	1891      	adds	r1, r2, r2
 8005f32:	6139      	str	r1, [r7, #16]
 8005f34:	415b      	adcs	r3, r3
 8005f36:	617b      	str	r3, [r7, #20]
 8005f38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f3c:	1912      	adds	r2, r2, r4
 8005f3e:	eb45 0303 	adc.w	r3, r5, r3
 8005f42:	f04f 0000 	mov.w	r0, #0
 8005f46:	f04f 0100 	mov.w	r1, #0
 8005f4a:	00d9      	lsls	r1, r3, #3
 8005f4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f50:	00d0      	lsls	r0, r2, #3
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	eb12 0804 	adds.w	r8, r2, r4
 8005f5a:	eb43 0905 	adc.w	r9, r3, r5
 8005f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f04f 0100 	mov.w	r1, #0
 8005f68:	f04f 0200 	mov.w	r2, #0
 8005f6c:	f04f 0300 	mov.w	r3, #0
 8005f70:	008b      	lsls	r3, r1, #2
 8005f72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f76:	0082      	lsls	r2, r0, #2
 8005f78:	4640      	mov	r0, r8
 8005f7a:	4649      	mov	r1, r9
 8005f7c:	f7fa f950 	bl	8000220 <__aeabi_uldivmod>
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	4b49      	ldr	r3, [pc, #292]	; (80060ac <UART_SetConfig+0x38c>)
 8005f86:	fba3 2302 	umull	r2, r3, r3, r2
 8005f8a:	095b      	lsrs	r3, r3, #5
 8005f8c:	011e      	lsls	r6, r3, #4
 8005f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f90:	4618      	mov	r0, r3
 8005f92:	f04f 0100 	mov.w	r1, #0
 8005f96:	4602      	mov	r2, r0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	1894      	adds	r4, r2, r2
 8005f9c:	60bc      	str	r4, [r7, #8]
 8005f9e:	415b      	adcs	r3, r3
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fa6:	1812      	adds	r2, r2, r0
 8005fa8:	eb41 0303 	adc.w	r3, r1, r3
 8005fac:	f04f 0400 	mov.w	r4, #0
 8005fb0:	f04f 0500 	mov.w	r5, #0
 8005fb4:	00dd      	lsls	r5, r3, #3
 8005fb6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005fba:	00d4      	lsls	r4, r2, #3
 8005fbc:	4622      	mov	r2, r4
 8005fbe:	462b      	mov	r3, r5
 8005fc0:	1814      	adds	r4, r2, r0
 8005fc2:	64bc      	str	r4, [r7, #72]	; 0x48
 8005fc4:	414b      	adcs	r3, r1
 8005fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f04f 0100 	mov.w	r1, #0
 8005fd2:	f04f 0200 	mov.w	r2, #0
 8005fd6:	f04f 0300 	mov.w	r3, #0
 8005fda:	008b      	lsls	r3, r1, #2
 8005fdc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005fe0:	0082      	lsls	r2, r0, #2
 8005fe2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005fe6:	f7fa f91b 	bl	8000220 <__aeabi_uldivmod>
 8005fea:	4602      	mov	r2, r0
 8005fec:	460b      	mov	r3, r1
 8005fee:	4b2f      	ldr	r3, [pc, #188]	; (80060ac <UART_SetConfig+0x38c>)
 8005ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ff4:	095b      	lsrs	r3, r3, #5
 8005ff6:	2164      	movs	r1, #100	; 0x64
 8005ff8:	fb01 f303 	mul.w	r3, r1, r3
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	3332      	adds	r3, #50	; 0x32
 8006002:	4a2a      	ldr	r2, [pc, #168]	; (80060ac <UART_SetConfig+0x38c>)
 8006004:	fba2 2303 	umull	r2, r3, r2, r3
 8006008:	095b      	lsrs	r3, r3, #5
 800600a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800600e:	441e      	add	r6, r3
 8006010:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006012:	4618      	mov	r0, r3
 8006014:	f04f 0100 	mov.w	r1, #0
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	1894      	adds	r4, r2, r2
 800601e:	603c      	str	r4, [r7, #0]
 8006020:	415b      	adcs	r3, r3
 8006022:	607b      	str	r3, [r7, #4]
 8006024:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006028:	1812      	adds	r2, r2, r0
 800602a:	eb41 0303 	adc.w	r3, r1, r3
 800602e:	f04f 0400 	mov.w	r4, #0
 8006032:	f04f 0500 	mov.w	r5, #0
 8006036:	00dd      	lsls	r5, r3, #3
 8006038:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800603c:	00d4      	lsls	r4, r2, #3
 800603e:	4622      	mov	r2, r4
 8006040:	462b      	mov	r3, r5
 8006042:	eb12 0a00 	adds.w	sl, r2, r0
 8006046:	eb43 0b01 	adc.w	fp, r3, r1
 800604a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	4618      	mov	r0, r3
 8006050:	f04f 0100 	mov.w	r1, #0
 8006054:	f04f 0200 	mov.w	r2, #0
 8006058:	f04f 0300 	mov.w	r3, #0
 800605c:	008b      	lsls	r3, r1, #2
 800605e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006062:	0082      	lsls	r2, r0, #2
 8006064:	4650      	mov	r0, sl
 8006066:	4659      	mov	r1, fp
 8006068:	f7fa f8da 	bl	8000220 <__aeabi_uldivmod>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	4b0e      	ldr	r3, [pc, #56]	; (80060ac <UART_SetConfig+0x38c>)
 8006072:	fba3 1302 	umull	r1, r3, r3, r2
 8006076:	095b      	lsrs	r3, r3, #5
 8006078:	2164      	movs	r1, #100	; 0x64
 800607a:	fb01 f303 	mul.w	r3, r1, r3
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	011b      	lsls	r3, r3, #4
 8006082:	3332      	adds	r3, #50	; 0x32
 8006084:	4a09      	ldr	r2, [pc, #36]	; (80060ac <UART_SetConfig+0x38c>)
 8006086:	fba2 2303 	umull	r2, r3, r2, r3
 800608a:	095b      	lsrs	r3, r3, #5
 800608c:	f003 020f 	and.w	r2, r3, #15
 8006090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4432      	add	r2, r6
 8006096:	609a      	str	r2, [r3, #8]
}
 8006098:	bf00      	nop
 800609a:	377c      	adds	r7, #124	; 0x7c
 800609c:	46bd      	mov	sp, r7
 800609e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a2:	bf00      	nop
 80060a4:	40011000 	.word	0x40011000
 80060a8:	40011400 	.word	0x40011400
 80060ac:	51eb851f 	.word	0x51eb851f

080060b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060b0:	b084      	sub	sp, #16
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b084      	sub	sp, #16
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	f107 001c 	add.w	r0, r7, #28
 80060be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d122      	bne.n	800610e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80060dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d105      	bne.n	8006102 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f001 fac0 	bl	8007688 <USB_CoreReset>
 8006108:	4603      	mov	r3, r0
 800610a:	73fb      	strb	r3, [r7, #15]
 800610c:	e01a      	b.n	8006144 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f001 fab4 	bl	8007688 <USB_CoreReset>
 8006120:	4603      	mov	r3, r0
 8006122:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006126:	2b00      	cmp	r3, #0
 8006128:	d106      	bne.n	8006138 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	639a      	str	r2, [r3, #56]	; 0x38
 8006136:	e005      	b.n	8006144 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006146:	2b01      	cmp	r3, #1
 8006148:	d10b      	bne.n	8006162 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f043 0206 	orr.w	r2, r3, #6
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f043 0220 	orr.w	r2, r3, #32
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006162:	7bfb      	ldrb	r3, [r7, #15]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800616e:	b004      	add	sp, #16
 8006170:	4770      	bx	lr
	...

08006174 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	4613      	mov	r3, r2
 8006180:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006182:	79fb      	ldrb	r3, [r7, #7]
 8006184:	2b02      	cmp	r3, #2
 8006186:	d165      	bne.n	8006254 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	4a41      	ldr	r2, [pc, #260]	; (8006290 <USB_SetTurnaroundTime+0x11c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d906      	bls.n	800619e <USB_SetTurnaroundTime+0x2a>
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	4a40      	ldr	r2, [pc, #256]	; (8006294 <USB_SetTurnaroundTime+0x120>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d202      	bcs.n	800619e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006198:	230f      	movs	r3, #15
 800619a:	617b      	str	r3, [r7, #20]
 800619c:	e062      	b.n	8006264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	4a3c      	ldr	r2, [pc, #240]	; (8006294 <USB_SetTurnaroundTime+0x120>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d306      	bcc.n	80061b4 <USB_SetTurnaroundTime+0x40>
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	4a3b      	ldr	r2, [pc, #236]	; (8006298 <USB_SetTurnaroundTime+0x124>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d202      	bcs.n	80061b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80061ae:	230e      	movs	r3, #14
 80061b0:	617b      	str	r3, [r7, #20]
 80061b2:	e057      	b.n	8006264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	4a38      	ldr	r2, [pc, #224]	; (8006298 <USB_SetTurnaroundTime+0x124>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d306      	bcc.n	80061ca <USB_SetTurnaroundTime+0x56>
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	4a37      	ldr	r2, [pc, #220]	; (800629c <USB_SetTurnaroundTime+0x128>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d202      	bcs.n	80061ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80061c4:	230d      	movs	r3, #13
 80061c6:	617b      	str	r3, [r7, #20]
 80061c8:	e04c      	b.n	8006264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	4a33      	ldr	r2, [pc, #204]	; (800629c <USB_SetTurnaroundTime+0x128>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d306      	bcc.n	80061e0 <USB_SetTurnaroundTime+0x6c>
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	4a32      	ldr	r2, [pc, #200]	; (80062a0 <USB_SetTurnaroundTime+0x12c>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d802      	bhi.n	80061e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80061da:	230c      	movs	r3, #12
 80061dc:	617b      	str	r3, [r7, #20]
 80061de:	e041      	b.n	8006264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	4a2f      	ldr	r2, [pc, #188]	; (80062a0 <USB_SetTurnaroundTime+0x12c>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d906      	bls.n	80061f6 <USB_SetTurnaroundTime+0x82>
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	4a2e      	ldr	r2, [pc, #184]	; (80062a4 <USB_SetTurnaroundTime+0x130>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d802      	bhi.n	80061f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80061f0:	230b      	movs	r3, #11
 80061f2:	617b      	str	r3, [r7, #20]
 80061f4:	e036      	b.n	8006264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	4a2a      	ldr	r2, [pc, #168]	; (80062a4 <USB_SetTurnaroundTime+0x130>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d906      	bls.n	800620c <USB_SetTurnaroundTime+0x98>
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	4a29      	ldr	r2, [pc, #164]	; (80062a8 <USB_SetTurnaroundTime+0x134>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d802      	bhi.n	800620c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006206:	230a      	movs	r3, #10
 8006208:	617b      	str	r3, [r7, #20]
 800620a:	e02b      	b.n	8006264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	4a26      	ldr	r2, [pc, #152]	; (80062a8 <USB_SetTurnaroundTime+0x134>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d906      	bls.n	8006222 <USB_SetTurnaroundTime+0xae>
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	4a25      	ldr	r2, [pc, #148]	; (80062ac <USB_SetTurnaroundTime+0x138>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d202      	bcs.n	8006222 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800621c:	2309      	movs	r3, #9
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	e020      	b.n	8006264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	4a21      	ldr	r2, [pc, #132]	; (80062ac <USB_SetTurnaroundTime+0x138>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d306      	bcc.n	8006238 <USB_SetTurnaroundTime+0xc4>
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	4a20      	ldr	r2, [pc, #128]	; (80062b0 <USB_SetTurnaroundTime+0x13c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d802      	bhi.n	8006238 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006232:	2308      	movs	r3, #8
 8006234:	617b      	str	r3, [r7, #20]
 8006236:	e015      	b.n	8006264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	4a1d      	ldr	r2, [pc, #116]	; (80062b0 <USB_SetTurnaroundTime+0x13c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d906      	bls.n	800624e <USB_SetTurnaroundTime+0xda>
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	4a1c      	ldr	r2, [pc, #112]	; (80062b4 <USB_SetTurnaroundTime+0x140>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d202      	bcs.n	800624e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006248:	2307      	movs	r3, #7
 800624a:	617b      	str	r3, [r7, #20]
 800624c:	e00a      	b.n	8006264 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800624e:	2306      	movs	r3, #6
 8006250:	617b      	str	r3, [r7, #20]
 8006252:	e007      	b.n	8006264 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006254:	79fb      	ldrb	r3, [r7, #7]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d102      	bne.n	8006260 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800625a:	2309      	movs	r3, #9
 800625c:	617b      	str	r3, [r7, #20]
 800625e:	e001      	b.n	8006264 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006260:	2309      	movs	r3, #9
 8006262:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	68da      	ldr	r2, [r3, #12]
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	029b      	lsls	r3, r3, #10
 8006278:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800627c:	431a      	orrs	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	371c      	adds	r7, #28
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	00d8acbf 	.word	0x00d8acbf
 8006294:	00e4e1c0 	.word	0x00e4e1c0
 8006298:	00f42400 	.word	0x00f42400
 800629c:	01067380 	.word	0x01067380
 80062a0:	011a499f 	.word	0x011a499f
 80062a4:	01312cff 	.word	0x01312cff
 80062a8:	014ca43f 	.word	0x014ca43f
 80062ac:	016e3600 	.word	0x016e3600
 80062b0:	01a6ab1f 	.word	0x01a6ab1f
 80062b4:	01e84800 	.word	0x01e84800

080062b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f043 0201 	orr.w	r2, r3, #1
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062da:	b480      	push	{r7}
 80062dc:	b083      	sub	sp, #12
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f023 0201 	bic.w	r2, r3, #1
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	460b      	mov	r3, r1
 8006306:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006314:	78fb      	ldrb	r3, [r7, #3]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d106      	bne.n	8006328 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	60da      	str	r2, [r3, #12]
 8006326:	e00b      	b.n	8006340 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006328:	78fb      	ldrb	r3, [r7, #3]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d106      	bne.n	800633c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	60da      	str	r2, [r3, #12]
 800633a:	e001      	b.n	8006340 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e003      	b.n	8006348 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006340:	2032      	movs	r0, #50	; 0x32
 8006342:	f7fb fd8d 	bl	8001e60 <HAL_Delay>

  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006350:	b084      	sub	sp, #16
 8006352:	b580      	push	{r7, lr}
 8006354:	b086      	sub	sp, #24
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800635e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800636a:	2300      	movs	r3, #0
 800636c:	613b      	str	r3, [r7, #16]
 800636e:	e009      	b.n	8006384 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	3340      	adds	r3, #64	; 0x40
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	2200      	movs	r2, #0
 800637c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	3301      	adds	r3, #1
 8006382:	613b      	str	r3, [r7, #16]
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	2b0e      	cmp	r3, #14
 8006388:	d9f2      	bls.n	8006370 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800638a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800638c:	2b00      	cmp	r3, #0
 800638e:	d11c      	bne.n	80063ca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800639e:	f043 0302 	orr.w	r3, r3, #2
 80063a2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	e005      	b.n	80063d6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063dc:	461a      	mov	r2, r3
 80063de:	2300      	movs	r3, #0
 80063e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e8:	4619      	mov	r1, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f0:	461a      	mov	r2, r3
 80063f2:	680b      	ldr	r3, [r1, #0]
 80063f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d10c      	bne.n	8006416 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80063fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d104      	bne.n	800640c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006402:	2100      	movs	r1, #0
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f949 	bl	800669c <USB_SetDevSpeed>
 800640a:	e008      	b.n	800641e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800640c:	2101      	movs	r1, #1
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f944 	bl	800669c <USB_SetDevSpeed>
 8006414:	e003      	b.n	800641e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006416:	2103      	movs	r1, #3
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 f93f 	bl	800669c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800641e:	2110      	movs	r1, #16
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 f8f3 	bl	800660c <USB_FlushTxFifo>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f911 	bl	8006658 <USB_FlushRxFifo>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006446:	461a      	mov	r2, r3
 8006448:	2300      	movs	r3, #0
 800644a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006452:	461a      	mov	r2, r3
 8006454:	2300      	movs	r3, #0
 8006456:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800645e:	461a      	mov	r2, r3
 8006460:	2300      	movs	r3, #0
 8006462:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006464:	2300      	movs	r3, #0
 8006466:	613b      	str	r3, [r7, #16]
 8006468:	e043      	b.n	80064f2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	4413      	add	r3, r2
 8006472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800647c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006480:	d118      	bne.n	80064b4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10a      	bne.n	800649e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	015a      	lsls	r2, r3, #5
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4413      	add	r3, r2
 8006490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006494:	461a      	mov	r2, r3
 8006496:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800649a:	6013      	str	r3, [r2, #0]
 800649c:	e013      	b.n	80064c6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064aa:	461a      	mov	r2, r3
 80064ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80064b0:	6013      	str	r3, [r2, #0]
 80064b2:	e008      	b.n	80064c6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c0:	461a      	mov	r2, r3
 80064c2:	2300      	movs	r3, #0
 80064c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d2:	461a      	mov	r2, r3
 80064d4:	2300      	movs	r3, #0
 80064d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e4:	461a      	mov	r2, r3
 80064e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	3301      	adds	r3, #1
 80064f0:	613b      	str	r3, [r7, #16]
 80064f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d3b7      	bcc.n	800646a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064fa:	2300      	movs	r3, #0
 80064fc:	613b      	str	r3, [r7, #16]
 80064fe:	e043      	b.n	8006588 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	4413      	add	r3, r2
 8006508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006512:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006516:	d118      	bne.n	800654a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10a      	bne.n	8006534 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	4413      	add	r3, r2
 8006526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800652a:	461a      	mov	r2, r3
 800652c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	e013      	b.n	800655c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4413      	add	r3, r2
 800653c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006540:	461a      	mov	r2, r3
 8006542:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	e008      	b.n	800655c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4413      	add	r3, r2
 8006552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006556:	461a      	mov	r2, r3
 8006558:	2300      	movs	r3, #0
 800655a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006568:	461a      	mov	r2, r3
 800656a:	2300      	movs	r3, #0
 800656c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4413      	add	r3, r2
 8006576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657a:	461a      	mov	r2, r3
 800657c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006580:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	3301      	adds	r3, #1
 8006586:	613b      	str	r3, [r7, #16]
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	429a      	cmp	r2, r3
 800658e:	d3b7      	bcc.n	8006500 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800659e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80065b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80065b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d105      	bne.n	80065c4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	f043 0210 	orr.w	r2, r3, #16
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	699a      	ldr	r2, [r3, #24]
 80065c8:	4b0f      	ldr	r3, [pc, #60]	; (8006608 <USB_DevInit+0x2b8>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80065d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d005      	beq.n	80065e2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	f043 0208 	orr.w	r2, r3, #8
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80065e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d107      	bne.n	80065f8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065f0:	f043 0304 	orr.w	r3, r3, #4
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80065f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3718      	adds	r7, #24
 80065fe:	46bd      	mov	sp, r7
 8006600:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006604:	b004      	add	sp, #16
 8006606:	4770      	bx	lr
 8006608:	803c3800 	.word	0x803c3800

0800660c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006616:	2300      	movs	r3, #0
 8006618:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	019b      	lsls	r3, r3, #6
 800661e:	f043 0220 	orr.w	r2, r3, #32
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3301      	adds	r3, #1
 800662a:	60fb      	str	r3, [r7, #12]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4a09      	ldr	r2, [pc, #36]	; (8006654 <USB_FlushTxFifo+0x48>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d901      	bls.n	8006638 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e006      	b.n	8006646 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	f003 0320 	and.w	r3, r3, #32
 8006640:	2b20      	cmp	r3, #32
 8006642:	d0f0      	beq.n	8006626 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	00030d40 	.word	0x00030d40

08006658 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006660:	2300      	movs	r3, #0
 8006662:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2210      	movs	r2, #16
 8006668:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	3301      	adds	r3, #1
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4a09      	ldr	r2, [pc, #36]	; (8006698 <USB_FlushRxFifo+0x40>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d901      	bls.n	800667c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e006      	b.n	800668a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	f003 0310 	and.w	r3, r3, #16
 8006684:	2b10      	cmp	r3, #16
 8006686:	d0f0      	beq.n	800666a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	00030d40 	.word	0x00030d40

0800669c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	78fb      	ldrb	r3, [r7, #3]
 80066b6:	68f9      	ldr	r1, [r7, #12]
 80066b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066bc:	4313      	orrs	r3, r2
 80066be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b087      	sub	sp, #28
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f003 0306 	and.w	r3, r3, #6
 80066e6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d102      	bne.n	80066f4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80066ee:	2300      	movs	r3, #0
 80066f0:	75fb      	strb	r3, [r7, #23]
 80066f2:	e00a      	b.n	800670a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d002      	beq.n	8006700 <USB_GetDevSpeed+0x32>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2b06      	cmp	r3, #6
 80066fe:	d102      	bne.n	8006706 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006700:	2302      	movs	r3, #2
 8006702:	75fb      	strb	r3, [r7, #23]
 8006704:	e001      	b.n	800670a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006706:	230f      	movs	r3, #15
 8006708:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800670a:	7dfb      	ldrb	r3, [r7, #23]
}
 800670c:	4618      	mov	r0, r3
 800670e:	371c      	adds	r7, #28
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	785b      	ldrb	r3, [r3, #1]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d13a      	bne.n	80067aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800673a:	69da      	ldr	r2, [r3, #28]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	f003 030f 	and.w	r3, r3, #15
 8006744:	2101      	movs	r1, #1
 8006746:	fa01 f303 	lsl.w	r3, r1, r3
 800674a:	b29b      	uxth	r3, r3
 800674c:	68f9      	ldr	r1, [r7, #12]
 800674e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006752:	4313      	orrs	r3, r2
 8006754:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	015a      	lsls	r2, r3, #5
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	4413      	add	r3, r2
 800675e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d155      	bne.n	8006818 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	78db      	ldrb	r3, [r3, #3]
 8006786:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006788:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	059b      	lsls	r3, r3, #22
 800678e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006790:	4313      	orrs	r3, r2
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	0151      	lsls	r1, r2, #5
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	440a      	add	r2, r1
 800679a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800679e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067a6:	6013      	str	r3, [r2, #0]
 80067a8:	e036      	b.n	8006818 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b0:	69da      	ldr	r2, [r3, #28]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	f003 030f 	and.w	r3, r3, #15
 80067ba:	2101      	movs	r1, #1
 80067bc:	fa01 f303 	lsl.w	r3, r1, r3
 80067c0:	041b      	lsls	r3, r3, #16
 80067c2:	68f9      	ldr	r1, [r7, #12]
 80067c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067c8:	4313      	orrs	r3, r2
 80067ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	015a      	lsls	r2, r3, #5
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	4413      	add	r3, r2
 80067d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d11a      	bne.n	8006818 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	78db      	ldrb	r3, [r3, #3]
 80067fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80067fe:	430b      	orrs	r3, r1
 8006800:	4313      	orrs	r3, r2
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	0151      	lsls	r1, r2, #5
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	440a      	add	r2, r1
 800680a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800680e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006816:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
	...

08006828 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	785b      	ldrb	r3, [r3, #1]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d161      	bne.n	8006908 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006856:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800685a:	d11f      	bne.n	800689c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	015a      	lsls	r2, r3, #5
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4413      	add	r3, r2
 8006864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	0151      	lsls	r1, r2, #5
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	440a      	add	r2, r1
 8006872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006876:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800687a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4413      	add	r3, r2
 8006884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	0151      	lsls	r1, r2, #5
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	440a      	add	r2, r1
 8006892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006896:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800689a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	f003 030f 	and.w	r3, r3, #15
 80068ac:	2101      	movs	r1, #1
 80068ae:	fa01 f303 	lsl.w	r3, r1, r3
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	43db      	mvns	r3, r3
 80068b6:	68f9      	ldr	r1, [r7, #12]
 80068b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068bc:	4013      	ands	r3, r2
 80068be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c6:	69da      	ldr	r2, [r3, #28]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	f003 030f 	and.w	r3, r3, #15
 80068d0:	2101      	movs	r1, #1
 80068d2:	fa01 f303 	lsl.w	r3, r1, r3
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	43db      	mvns	r3, r3
 80068da:	68f9      	ldr	r1, [r7, #12]
 80068dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068e0:	4013      	ands	r3, r2
 80068e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	0159      	lsls	r1, r3, #5
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	440b      	add	r3, r1
 80068fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068fe:	4619      	mov	r1, r3
 8006900:	4b35      	ldr	r3, [pc, #212]	; (80069d8 <USB_DeactivateEndpoint+0x1b0>)
 8006902:	4013      	ands	r3, r2
 8006904:	600b      	str	r3, [r1, #0]
 8006906:	e060      	b.n	80069ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4413      	add	r3, r2
 8006910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800691a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800691e:	d11f      	bne.n	8006960 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	0151      	lsls	r1, r2, #5
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	440a      	add	r2, r1
 8006936:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800693a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800693e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	4413      	add	r3, r2
 8006948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	0151      	lsls	r1, r2, #5
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	440a      	add	r2, r1
 8006956:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800695a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800695e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006966:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	f003 030f 	and.w	r3, r3, #15
 8006970:	2101      	movs	r1, #1
 8006972:	fa01 f303 	lsl.w	r3, r1, r3
 8006976:	041b      	lsls	r3, r3, #16
 8006978:	43db      	mvns	r3, r3
 800697a:	68f9      	ldr	r1, [r7, #12]
 800697c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006980:	4013      	ands	r3, r2
 8006982:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800698a:	69da      	ldr	r2, [r3, #28]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	f003 030f 	and.w	r3, r3, #15
 8006994:	2101      	movs	r1, #1
 8006996:	fa01 f303 	lsl.w	r3, r1, r3
 800699a:	041b      	lsls	r3, r3, #16
 800699c:	43db      	mvns	r3, r3
 800699e:	68f9      	ldr	r1, [r7, #12]
 80069a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069a4:	4013      	ands	r3, r2
 80069a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	0159      	lsls	r1, r3, #5
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	440b      	add	r3, r1
 80069be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c2:	4619      	mov	r1, r3
 80069c4:	4b05      	ldr	r3, [pc, #20]	; (80069dc <USB_DeactivateEndpoint+0x1b4>)
 80069c6:	4013      	ands	r3, r2
 80069c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3714      	adds	r7, #20
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr
 80069d8:	ec337800 	.word	0xec337800
 80069dc:	eff37800 	.word	0xeff37800

080069e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b08a      	sub	sp, #40	; 0x28
 80069e4:	af02      	add	r7, sp, #8
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	4613      	mov	r3, r2
 80069ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	785b      	ldrb	r3, [r3, #1]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	f040 815c 	bne.w	8006cba <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d132      	bne.n	8006a70 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	015a      	lsls	r2, r3, #5
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	4413      	add	r3, r2
 8006a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	0151      	lsls	r1, r2, #5
 8006a1c:	69fa      	ldr	r2, [r7, #28]
 8006a1e:	440a      	add	r2, r1
 8006a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	015a      	lsls	r2, r3, #5
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	69ba      	ldr	r2, [r7, #24]
 8006a3e:	0151      	lsls	r1, r2, #5
 8006a40:	69fa      	ldr	r2, [r7, #28]
 8006a42:	440a      	add	r2, r1
 8006a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	0151      	lsls	r1, r2, #5
 8006a60:	69fa      	ldr	r2, [r7, #28]
 8006a62:	440a      	add	r2, r1
 8006a64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a68:	0cdb      	lsrs	r3, r3, #19
 8006a6a:	04db      	lsls	r3, r3, #19
 8006a6c:	6113      	str	r3, [r2, #16]
 8006a6e:	e074      	b.n	8006b5a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	015a      	lsls	r2, r3, #5
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	4413      	add	r3, r2
 8006a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	69ba      	ldr	r2, [r7, #24]
 8006a80:	0151      	lsls	r1, r2, #5
 8006a82:	69fa      	ldr	r2, [r7, #28]
 8006a84:	440a      	add	r2, r1
 8006a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a8a:	0cdb      	lsrs	r3, r3, #19
 8006a8c:	04db      	lsls	r3, r3, #19
 8006a8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	0151      	lsls	r1, r2, #5
 8006aa2:	69fa      	ldr	r2, [r7, #28]
 8006aa4:	440a      	add	r2, r1
 8006aa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aaa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006aae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ab2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac0:	691a      	ldr	r2, [r3, #16]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	6959      	ldr	r1, [r3, #20]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	440b      	add	r3, r1
 8006acc:	1e59      	subs	r1, r3, #1
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ad6:	04d9      	lsls	r1, r3, #19
 8006ad8:	4b9d      	ldr	r3, [pc, #628]	; (8006d50 <USB_EPStartXfer+0x370>)
 8006ada:	400b      	ands	r3, r1
 8006adc:	69b9      	ldr	r1, [r7, #24]
 8006ade:	0148      	lsls	r0, r1, #5
 8006ae0:	69f9      	ldr	r1, [r7, #28]
 8006ae2:	4401      	add	r1, r0
 8006ae4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af8:	691a      	ldr	r2, [r3, #16]
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b02:	69b9      	ldr	r1, [r7, #24]
 8006b04:	0148      	lsls	r0, r1, #5
 8006b06:	69f9      	ldr	r1, [r7, #28]
 8006b08:	4401      	add	r1, r0
 8006b0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	78db      	ldrb	r3, [r3, #3]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d11f      	bne.n	8006b5a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	015a      	lsls	r2, r3, #5
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	69ba      	ldr	r2, [r7, #24]
 8006b2a:	0151      	lsls	r1, r2, #5
 8006b2c:	69fa      	ldr	r2, [r7, #28]
 8006b2e:	440a      	add	r2, r1
 8006b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b34:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006b38:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	0151      	lsls	r1, r2, #5
 8006b4c:	69fa      	ldr	r2, [r7, #28]
 8006b4e:	440a      	add	r2, r1
 8006b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b58:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006b5a:	79fb      	ldrb	r3, [r7, #7]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d14b      	bne.n	8006bf8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d009      	beq.n	8006b7c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b74:	461a      	mov	r2, r3
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	78db      	ldrb	r3, [r3, #3]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d128      	bne.n	8006bd6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d110      	bne.n	8006bb6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	015a      	lsls	r2, r3, #5
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	69ba      	ldr	r2, [r7, #24]
 8006ba4:	0151      	lsls	r1, r2, #5
 8006ba6:	69fa      	ldr	r2, [r7, #28]
 8006ba8:	440a      	add	r2, r1
 8006baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bb2:	6013      	str	r3, [r2, #0]
 8006bb4:	e00f      	b.n	8006bd6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	015a      	lsls	r2, r3, #5
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	69ba      	ldr	r2, [r7, #24]
 8006bc6:	0151      	lsls	r1, r2, #5
 8006bc8:	69fa      	ldr	r2, [r7, #28]
 8006bca:	440a      	add	r2, r1
 8006bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bd4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	69ba      	ldr	r2, [r7, #24]
 8006be6:	0151      	lsls	r1, r2, #5
 8006be8:	69fa      	ldr	r2, [r7, #28]
 8006bea:	440a      	add	r2, r1
 8006bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bf0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006bf4:	6013      	str	r3, [r2, #0]
 8006bf6:	e12f      	b.n	8006e58 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	0151      	lsls	r1, r2, #5
 8006c0a:	69fa      	ldr	r2, [r7, #28]
 8006c0c:	440a      	add	r2, r1
 8006c0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c16:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	78db      	ldrb	r3, [r3, #3]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d015      	beq.n	8006c4c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 8117 	beq.w	8006e58 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	f003 030f 	and.w	r3, r3, #15
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c40:	69f9      	ldr	r1, [r7, #28]
 8006c42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c46:	4313      	orrs	r3, r2
 8006c48:	634b      	str	r3, [r1, #52]	; 0x34
 8006c4a:	e105      	b.n	8006e58 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d110      	bne.n	8006c7e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	015a      	lsls	r2, r3, #5
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	4413      	add	r3, r2
 8006c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	69ba      	ldr	r2, [r7, #24]
 8006c6c:	0151      	lsls	r1, r2, #5
 8006c6e:	69fa      	ldr	r2, [r7, #28]
 8006c70:	440a      	add	r2, r1
 8006c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c7a:	6013      	str	r3, [r2, #0]
 8006c7c:	e00f      	b.n	8006c9e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	0151      	lsls	r1, r2, #5
 8006c90:	69fa      	ldr	r2, [r7, #28]
 8006c92:	440a      	add	r2, r1
 8006c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c9c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	68d9      	ldr	r1, [r3, #12]
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	781a      	ldrb	r2, [r3, #0]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	b298      	uxth	r0, r3
 8006cac:	79fb      	ldrb	r3, [r7, #7]
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f000 fa2b 	bl	800710e <USB_WritePacket>
 8006cb8:	e0ce      	b.n	8006e58 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	69ba      	ldr	r2, [r7, #24]
 8006cca:	0151      	lsls	r1, r2, #5
 8006ccc:	69fa      	ldr	r2, [r7, #28]
 8006cce:	440a      	add	r2, r1
 8006cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cd4:	0cdb      	lsrs	r3, r3, #19
 8006cd6:	04db      	lsls	r3, r3, #19
 8006cd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	0151      	lsls	r1, r2, #5
 8006cec:	69fa      	ldr	r2, [r7, #28]
 8006cee:	440a      	add	r2, r1
 8006cf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cf4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006cf8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006cfc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d126      	bne.n	8006d54 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d12:	691a      	ldr	r2, [r3, #16]
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d1c:	69b9      	ldr	r1, [r7, #24]
 8006d1e:	0148      	lsls	r0, r1, #5
 8006d20:	69f9      	ldr	r1, [r7, #28]
 8006d22:	4401      	add	r1, r0
 8006d24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	69ba      	ldr	r2, [r7, #24]
 8006d3c:	0151      	lsls	r1, r2, #5
 8006d3e:	69fa      	ldr	r2, [r7, #28]
 8006d40:	440a      	add	r2, r1
 8006d42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d4a:	6113      	str	r3, [r2, #16]
 8006d4c:	e036      	b.n	8006dbc <USB_EPStartXfer+0x3dc>
 8006d4e:	bf00      	nop
 8006d50:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	695a      	ldr	r2, [r3, #20]
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	1e5a      	subs	r2, r3, #1
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d68:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	015a      	lsls	r2, r3, #5
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	4413      	add	r3, r2
 8006d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d76:	691a      	ldr	r2, [r3, #16]
 8006d78:	8afb      	ldrh	r3, [r7, #22]
 8006d7a:	04d9      	lsls	r1, r3, #19
 8006d7c:	4b39      	ldr	r3, [pc, #228]	; (8006e64 <USB_EPStartXfer+0x484>)
 8006d7e:	400b      	ands	r3, r1
 8006d80:	69b9      	ldr	r1, [r7, #24]
 8006d82:	0148      	lsls	r0, r1, #5
 8006d84:	69f9      	ldr	r1, [r7, #28]
 8006d86:	4401      	add	r1, r0
 8006d88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	015a      	lsls	r2, r3, #5
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d9c:	691a      	ldr	r2, [r3, #16]
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	8af9      	ldrh	r1, [r7, #22]
 8006da4:	fb01 f303 	mul.w	r3, r1, r3
 8006da8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dac:	69b9      	ldr	r1, [r7, #24]
 8006dae:	0148      	lsls	r0, r1, #5
 8006db0:	69f9      	ldr	r1, [r7, #28]
 8006db2:	4401      	add	r1, r0
 8006db4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006db8:	4313      	orrs	r3, r2
 8006dba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006dbc:	79fb      	ldrb	r3, [r7, #7]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d10d      	bne.n	8006dde <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d009      	beq.n	8006dde <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	68d9      	ldr	r1, [r3, #12]
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dda:	460a      	mov	r2, r1
 8006ddc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	78db      	ldrb	r3, [r3, #3]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d128      	bne.n	8006e38 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d110      	bne.n	8006e18 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	015a      	lsls	r2, r3, #5
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	69ba      	ldr	r2, [r7, #24]
 8006e06:	0151      	lsls	r1, r2, #5
 8006e08:	69fa      	ldr	r2, [r7, #28]
 8006e0a:	440a      	add	r2, r1
 8006e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e14:	6013      	str	r3, [r2, #0]
 8006e16:	e00f      	b.n	8006e38 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	69ba      	ldr	r2, [r7, #24]
 8006e28:	0151      	lsls	r1, r2, #5
 8006e2a:	69fa      	ldr	r2, [r7, #28]
 8006e2c:	440a      	add	r2, r1
 8006e2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e36:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	015a      	lsls	r2, r3, #5
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	69ba      	ldr	r2, [r7, #24]
 8006e48:	0151      	lsls	r1, r2, #5
 8006e4a:	69fa      	ldr	r2, [r7, #28]
 8006e4c:	440a      	add	r2, r1
 8006e4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3720      	adds	r7, #32
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	1ff80000 	.word	0x1ff80000

08006e68 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b087      	sub	sp, #28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	4613      	mov	r3, r2
 8006e74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	785b      	ldrb	r3, [r3, #1]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	f040 80cd 	bne.w	8007024 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d132      	bne.n	8006ef8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	015a      	lsls	r2, r3, #5
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	0151      	lsls	r1, r2, #5
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	440a      	add	r2, r1
 8006ea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006eb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006eb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	0151      	lsls	r1, r2, #5
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	440a      	add	r2, r1
 8006ecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ed0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ed4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	015a      	lsls	r2, r3, #5
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	4413      	add	r3, r2
 8006ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	0151      	lsls	r1, r2, #5
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	440a      	add	r2, r1
 8006eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ef0:	0cdb      	lsrs	r3, r3, #19
 8006ef2:	04db      	lsls	r3, r3, #19
 8006ef4:	6113      	str	r3, [r2, #16]
 8006ef6:	e04e      	b.n	8006f96 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	0151      	lsls	r1, r2, #5
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	440a      	add	r2, r1
 8006f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f12:	0cdb      	lsrs	r3, r3, #19
 8006f14:	04db      	lsls	r3, r3, #19
 8006f16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	0151      	lsls	r1, r2, #5
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	440a      	add	r2, r1
 8006f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f3a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	695a      	ldr	r2, [r3, #20]
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d903      	bls.n	8006f50 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	689a      	ldr	r2, [r3, #8]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	015a      	lsls	r2, r3, #5
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	4413      	add	r3, r2
 8006f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	0151      	lsls	r1, r2, #5
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	440a      	add	r2, r1
 8006f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f7c:	691a      	ldr	r2, [r3, #16]
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f86:	6939      	ldr	r1, [r7, #16]
 8006f88:	0148      	lsls	r0, r1, #5
 8006f8a:	6979      	ldr	r1, [r7, #20]
 8006f8c:	4401      	add	r1, r0
 8006f8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006f92:	4313      	orrs	r3, r2
 8006f94:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006f96:	79fb      	ldrb	r3, [r7, #7]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d11e      	bne.n	8006fda <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d009      	beq.n	8006fb8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	015a      	lsls	r2, r3, #5
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	015a      	lsls	r2, r3, #5
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	0151      	lsls	r1, r2, #5
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	440a      	add	r2, r1
 8006fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006fd6:	6013      	str	r3, [r2, #0]
 8006fd8:	e092      	b.n	8007100 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	015a      	lsls	r2, r3, #5
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	0151      	lsls	r1, r2, #5
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	440a      	add	r2, r1
 8006ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ff4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ff8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d07e      	beq.n	8007100 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	f003 030f 	and.w	r3, r3, #15
 8007012:	2101      	movs	r1, #1
 8007014:	fa01 f303 	lsl.w	r3, r1, r3
 8007018:	6979      	ldr	r1, [r7, #20]
 800701a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800701e:	4313      	orrs	r3, r2
 8007020:	634b      	str	r3, [r1, #52]	; 0x34
 8007022:	e06d      	b.n	8007100 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	4413      	add	r3, r2
 800702c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	0151      	lsls	r1, r2, #5
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	440a      	add	r2, r1
 800703a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800703e:	0cdb      	lsrs	r3, r3, #19
 8007040:	04db      	lsls	r3, r3, #19
 8007042:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	0151      	lsls	r1, r2, #5
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	440a      	add	r2, r1
 800705a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800705e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007062:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007066:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	695b      	ldr	r3, [r3, #20]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d003      	beq.n	8007078 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	689a      	ldr	r2, [r3, #8]
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	0151      	lsls	r1, r2, #5
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	440a      	add	r2, r1
 800708e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007092:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007096:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a4:	691a      	ldr	r2, [r3, #16]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070ae:	6939      	ldr	r1, [r7, #16]
 80070b0:	0148      	lsls	r0, r1, #5
 80070b2:	6979      	ldr	r1, [r7, #20]
 80070b4:	4401      	add	r1, r0
 80070b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070ba:	4313      	orrs	r3, r2
 80070bc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80070be:	79fb      	ldrb	r3, [r7, #7]
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d10d      	bne.n	80070e0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d009      	beq.n	80070e0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	68d9      	ldr	r1, [r3, #12]
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070dc:	460a      	mov	r2, r1
 80070de:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	0151      	lsls	r1, r2, #5
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	440a      	add	r2, r1
 80070f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	371c      	adds	r7, #28
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800710e:	b480      	push	{r7}
 8007110:	b089      	sub	sp, #36	; 0x24
 8007112:	af00      	add	r7, sp, #0
 8007114:	60f8      	str	r0, [r7, #12]
 8007116:	60b9      	str	r1, [r7, #8]
 8007118:	4611      	mov	r1, r2
 800711a:	461a      	mov	r2, r3
 800711c:	460b      	mov	r3, r1
 800711e:	71fb      	strb	r3, [r7, #7]
 8007120:	4613      	mov	r3, r2
 8007122:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800712c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007130:	2b00      	cmp	r3, #0
 8007132:	d11a      	bne.n	800716a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007134:	88bb      	ldrh	r3, [r7, #4]
 8007136:	3303      	adds	r3, #3
 8007138:	089b      	lsrs	r3, r3, #2
 800713a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800713c:	2300      	movs	r3, #0
 800713e:	61bb      	str	r3, [r7, #24]
 8007140:	e00f      	b.n	8007162 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007142:	79fb      	ldrb	r3, [r7, #7]
 8007144:	031a      	lsls	r2, r3, #12
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	4413      	add	r3, r2
 800714a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800714e:	461a      	mov	r2, r3
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	3304      	adds	r3, #4
 800715a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	3301      	adds	r3, #1
 8007160:	61bb      	str	r3, [r7, #24]
 8007162:	69ba      	ldr	r2, [r7, #24]
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	429a      	cmp	r2, r3
 8007168:	d3eb      	bcc.n	8007142 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3724      	adds	r7, #36	; 0x24
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007178:	b480      	push	{r7}
 800717a:	b089      	sub	sp, #36	; 0x24
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	4613      	mov	r3, r2
 8007184:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800718e:	88fb      	ldrh	r3, [r7, #6]
 8007190:	3303      	adds	r3, #3
 8007192:	089b      	lsrs	r3, r3, #2
 8007194:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007196:	2300      	movs	r3, #0
 8007198:	61bb      	str	r3, [r7, #24]
 800719a:	e00b      	b.n	80071b4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	3304      	adds	r3, #4
 80071ac:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	3301      	adds	r3, #1
 80071b2:	61bb      	str	r3, [r7, #24]
 80071b4:	69ba      	ldr	r2, [r7, #24]
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d3ef      	bcc.n	800719c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80071bc:	69fb      	ldr	r3, [r7, #28]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3724      	adds	r7, #36	; 0x24
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b085      	sub	sp, #20
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	785b      	ldrb	r3, [r3, #1]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d12c      	bne.n	8007240 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	015a      	lsls	r2, r3, #5
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	4413      	add	r3, r2
 80071ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	db12      	blt.n	800721e <USB_EPSetStall+0x54>
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00f      	beq.n	800721e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	015a      	lsls	r2, r3, #5
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	4413      	add	r3, r2
 8007206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	0151      	lsls	r1, r2, #5
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	440a      	add	r2, r1
 8007214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007218:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800721c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	4413      	add	r3, r2
 8007226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	0151      	lsls	r1, r2, #5
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	440a      	add	r2, r1
 8007234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007238:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800723c:	6013      	str	r3, [r2, #0]
 800723e:	e02b      	b.n	8007298 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	015a      	lsls	r2, r3, #5
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4413      	add	r3, r2
 8007248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	db12      	blt.n	8007278 <USB_EPSetStall+0xae>
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00f      	beq.n	8007278 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	015a      	lsls	r2, r3, #5
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	4413      	add	r3, r2
 8007260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	0151      	lsls	r1, r2, #5
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	440a      	add	r2, r1
 800726e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007272:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007276:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	015a      	lsls	r2, r3, #5
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4413      	add	r3, r2
 8007280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	0151      	lsls	r1, r2, #5
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	440a      	add	r2, r1
 800728e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007292:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007296:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b085      	sub	sp, #20
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	785b      	ldrb	r3, [r3, #1]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d128      	bne.n	8007314 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	0151      	lsls	r1, r2, #5
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	440a      	add	r2, r1
 80072d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	78db      	ldrb	r3, [r3, #3]
 80072e6:	2b03      	cmp	r3, #3
 80072e8:	d003      	beq.n	80072f2 <USB_EPClearStall+0x4c>
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	78db      	ldrb	r3, [r3, #3]
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d138      	bne.n	8007364 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	015a      	lsls	r2, r3, #5
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	4413      	add	r3, r2
 80072fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	0151      	lsls	r1, r2, #5
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	440a      	add	r2, r1
 8007308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800730c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007310:	6013      	str	r3, [r2, #0]
 8007312:	e027      	b.n	8007364 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68ba      	ldr	r2, [r7, #8]
 8007324:	0151      	lsls	r1, r2, #5
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	440a      	add	r2, r1
 800732a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800732e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007332:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	78db      	ldrb	r3, [r3, #3]
 8007338:	2b03      	cmp	r3, #3
 800733a:	d003      	beq.n	8007344 <USB_EPClearStall+0x9e>
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	78db      	ldrb	r3, [r3, #3]
 8007340:	2b02      	cmp	r3, #2
 8007342:	d10f      	bne.n	8007364 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	0151      	lsls	r1, r2, #5
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	440a      	add	r2, r1
 800735a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800735e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007362:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3714      	adds	r7, #20
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007372:	b480      	push	{r7}
 8007374:	b085      	sub	sp, #20
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
 800737a:	460b      	mov	r3, r1
 800737c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007390:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007394:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	78fb      	ldrb	r3, [r7, #3]
 80073a0:	011b      	lsls	r3, r3, #4
 80073a2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80073a6:	68f9      	ldr	r1, [r7, #12]
 80073a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073ac:	4313      	orrs	r3, r2
 80073ae:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80073be:	b480      	push	{r7}
 80073c0:	b085      	sub	sp, #20
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073d8:	f023 0303 	bic.w	r3, r3, #3
 80073dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073ec:	f023 0302 	bic.w	r3, r3, #2
 80073f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800741a:	f023 0303 	bic.w	r3, r3, #3
 800741e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800742e:	f043 0302 	orr.w	r3, r3, #2
 8007432:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3714      	adds	r7, #20
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007442:	b480      	push	{r7}
 8007444:	b085      	sub	sp, #20
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	699b      	ldr	r3, [r3, #24]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	4013      	ands	r3, r2
 8007458:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800745a:	68fb      	ldr	r3, [r7, #12]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3714      	adds	r7, #20
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	4013      	ands	r3, r2
 800748a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	0c1b      	lsrs	r3, r3, #16
}
 8007490:	4618      	mov	r0, r3
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b8:	69db      	ldr	r3, [r3, #28]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	4013      	ands	r3, r2
 80074be:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	b29b      	uxth	r3, r3
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	460b      	mov	r3, r1
 80074da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80074e0:	78fb      	ldrb	r3, [r7, #3]
 80074e2:	015a      	lsls	r2, r3, #5
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	4413      	add	r3, r2
 80074e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f6:	695b      	ldr	r3, [r3, #20]
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	4013      	ands	r3, r2
 80074fc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80074fe:	68bb      	ldr	r3, [r7, #8]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800750c:	b480      	push	{r7}
 800750e:	b087      	sub	sp, #28
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	460b      	mov	r3, r1
 8007516:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800752c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007530:	78fb      	ldrb	r3, [r7, #3]
 8007532:	f003 030f 	and.w	r3, r3, #15
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	fa22 f303 	lsr.w	r3, r2, r3
 800753c:	01db      	lsls	r3, r3, #7
 800753e:	b2db      	uxtb	r3, r3
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	4313      	orrs	r3, r2
 8007544:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007546:	78fb      	ldrb	r3, [r7, #3]
 8007548:	015a      	lsls	r2, r3, #5
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	4413      	add	r3, r2
 800754e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	693a      	ldr	r2, [r7, #16]
 8007556:	4013      	ands	r3, r2
 8007558:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800755a:	68bb      	ldr	r3, [r7, #8]
}
 800755c:	4618      	mov	r0, r3
 800755e:	371c      	adds	r7, #28
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	695b      	ldr	r3, [r3, #20]
 8007574:	f003 0301 	and.w	r3, r3, #1
}
 8007578:	4618      	mov	r0, r3
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800759e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80075a2:	f023 0307 	bic.w	r3, r3, #7
 80075a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3714      	adds	r7, #20
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
	...

080075cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b087      	sub	sp, #28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	460b      	mov	r3, r1
 80075d6:	607a      	str	r2, [r7, #4]
 80075d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	333c      	adds	r3, #60	; 0x3c
 80075e2:	3304      	adds	r3, #4
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	4a26      	ldr	r2, [pc, #152]	; (8007684 <USB_EP0_OutStart+0xb8>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d90a      	bls.n	8007606 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007600:	d101      	bne.n	8007606 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007602:	2300      	movs	r3, #0
 8007604:	e037      	b.n	8007676 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800760c:	461a      	mov	r2, r3
 800760e:	2300      	movs	r3, #0
 8007610:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007620:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007624:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	697a      	ldr	r2, [r7, #20]
 8007630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007634:	f043 0318 	orr.w	r3, r3, #24
 8007638:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007648:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800764c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800764e:	7afb      	ldrb	r3, [r7, #11]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d10f      	bne.n	8007674 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800765a:	461a      	mov	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800766e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007672:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	371c      	adds	r7, #28
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	4f54300a 	.word	0x4f54300a

08007688 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007690:	2300      	movs	r3, #0
 8007692:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	3301      	adds	r3, #1
 8007698:	60fb      	str	r3, [r7, #12]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	4a13      	ldr	r2, [pc, #76]	; (80076ec <USB_CoreReset+0x64>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d901      	bls.n	80076a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e01b      	b.n	80076de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	daf2      	bge.n	8007694 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80076ae:	2300      	movs	r3, #0
 80076b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	f043 0201 	orr.w	r2, r3, #1
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	3301      	adds	r3, #1
 80076c2:	60fb      	str	r3, [r7, #12]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	4a09      	ldr	r2, [pc, #36]	; (80076ec <USB_CoreReset+0x64>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d901      	bls.n	80076d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e006      	b.n	80076de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	f003 0301 	and.w	r3, r3, #1
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d0f0      	beq.n	80076be <USB_CoreReset+0x36>

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	00030d40 	.word	0x00030d40

080076f0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	460b      	mov	r3, r1
 80076fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80076fc:	2010      	movs	r0, #16
 80076fe:	f004 fd91 	bl	800c224 <USBD_static_malloc>
 8007702:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d108      	bne.n	800771c <USBD_HID_Init+0x2c>
  {
	  usb_failed = 1;
 800770a:	4b14      	ldr	r3, [pc, #80]	; (800775c <USBD_HID_Init+0x6c>)
 800770c:	2201      	movs	r2, #1
 800770e:	701a      	strb	r2, [r3, #0]
    pdev->pClassData = NULL;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007718:	2302      	movs	r3, #2
 800771a:	e01b      	b.n	8007754 <USBD_HID_Init+0x64>
  }

  pdev->pClassData = (void *)hhid;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	7c1b      	ldrb	r3, [r3, #16]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d103      	bne.n	8007734 <USBD_HID_Init+0x44>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2207      	movs	r2, #7
 8007730:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007732:	e002      	b.n	800773a <USBD_HID_Init+0x4a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2208      	movs	r2, #8
 8007738:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800773a:	2320      	movs	r3, #32
 800773c:	2203      	movs	r2, #3
 800773e:	2181      	movs	r1, #129	; 0x81
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f004 fc10 	bl	800bf66 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	20000652 	.word	0x20000652

08007760 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800776c:	2181      	movs	r1, #129	; 0x81
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f004 fc1f 	bl	800bfb2 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007786:	2b00      	cmp	r3, #0
 8007788:	d009      	beq.n	800779e <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007790:	4618      	mov	r0, r3
 8007792:	f004 fd55 	bl	800c240 <USBD_static_free>
    pdev->pClassData = NULL;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b088      	sub	sp, #32
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]


  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077b8:	61bb      	str	r3, [r7, #24]
  USBD_StatusTypeDef ret = USBD_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	77fb      	strb	r3, [r7, #31]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80077be:	2300      	movs	r3, #0
 80077c0:	81fb      	strh	r3, [r7, #14]

  if (hhid == NULL)
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d104      	bne.n	80077d2 <USBD_HID_Setup+0x2a>
  {
	  usb_failed = 1;
 80077c8:	4b94      	ldr	r3, [pc, #592]	; (8007a1c <USBD_HID_Setup+0x274>)
 80077ca:	2201      	movs	r2, #1
 80077cc:	701a      	strb	r2, [r3, #0]
    return (uint8_t)USBD_FAIL;
 80077ce:	2303      	movs	r3, #3
 80077d0:	e11f      	b.n	8007a12 <USBD_HID_Setup+0x26a>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077da:	2b40      	cmp	r3, #64	; 0x40
 80077dc:	f000 80cd 	beq.w	800797a <USBD_HID_Setup+0x1d2>
 80077e0:	2b40      	cmp	r3, #64	; 0x40
 80077e2:	f200 810d 	bhi.w	8007a00 <USBD_HID_Setup+0x258>
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d045      	beq.n	8007876 <USBD_HID_Setup+0xce>
 80077ea:	2b20      	cmp	r3, #32
 80077ec:	f040 8108 	bne.w	8007a00 <USBD_HID_Setup+0x258>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	785b      	ldrb	r3, [r3, #1]
 80077f4:	3b02      	subs	r3, #2
 80077f6:	2b09      	cmp	r3, #9
 80077f8:	d835      	bhi.n	8007866 <USBD_HID_Setup+0xbe>
 80077fa:	a201      	add	r2, pc, #4	; (adr r2, 8007800 <USBD_HID_Setup+0x58>)
 80077fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007800:	08007857 	.word	0x08007857
 8007804:	08007837 	.word	0x08007837
 8007808:	08007867 	.word	0x08007867
 800780c:	08007867 	.word	0x08007867
 8007810:	08007867 	.word	0x08007867
 8007814:	08007867 	.word	0x08007867
 8007818:	08007867 	.word	0x08007867
 800781c:	08007867 	.word	0x08007867
 8007820:	08007845 	.word	0x08007845
 8007824:	08007829 	.word	0x08007829
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	885b      	ldrh	r3, [r3, #2]
 800782c:	b2db      	uxtb	r3, r3
 800782e:	461a      	mov	r2, r3
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	601a      	str	r2, [r3, #0]
          break;
 8007834:	e01e      	b.n	8007874 <USBD_HID_Setup+0xcc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	2201      	movs	r2, #1
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f001 faae 	bl	8008d9e <USBD_CtlSendData>
          break;
 8007842:	e017      	b.n	8007874 <USBD_HID_Setup+0xcc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	885b      	ldrh	r3, [r3, #2]
 8007848:	0a1b      	lsrs	r3, r3, #8
 800784a:	b29b      	uxth	r3, r3
 800784c:	b2db      	uxtb	r3, r3
 800784e:	461a      	mov	r2, r3
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	605a      	str	r2, [r3, #4]
          break;
 8007854:	e00e      	b.n	8007874 <USBD_HID_Setup+0xcc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	3304      	adds	r3, #4
 800785a:	2201      	movs	r2, #1
 800785c:	4619      	mov	r1, r3
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f001 fa9d 	bl	8008d9e <USBD_CtlSendData>
          break;
 8007864:	e006      	b.n	8007874 <USBD_HID_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f001 fa27 	bl	8008cbc <USBD_CtlError>
          ret = USBD_FAIL;
 800786e:	2303      	movs	r3, #3
 8007870:	77fb      	strb	r3, [r7, #31]
          break;
 8007872:	bf00      	nop
      }
      break;
 8007874:	e0cc      	b.n	8007a10 <USBD_HID_Setup+0x268>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	785b      	ldrb	r3, [r3, #1]
 800787a:	2b0b      	cmp	r3, #11
 800787c:	d874      	bhi.n	8007968 <USBD_HID_Setup+0x1c0>
 800787e:	a201      	add	r2, pc, #4	; (adr r2, 8007884 <USBD_HID_Setup+0xdc>)
 8007880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007884:	080078b5 	.word	0x080078b5
 8007888:	08007977 	.word	0x08007977
 800788c:	08007969 	.word	0x08007969
 8007890:	08007969 	.word	0x08007969
 8007894:	08007969 	.word	0x08007969
 8007898:	08007969 	.word	0x08007969
 800789c:	080078df 	.word	0x080078df
 80078a0:	08007969 	.word	0x08007969
 80078a4:	08007969 	.word	0x08007969
 80078a8:	08007969 	.word	0x08007969
 80078ac:	08007917 	.word	0x08007917
 80078b0:	08007941 	.word	0x08007941
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b03      	cmp	r3, #3
 80078be:	d107      	bne.n	80078d0 <USBD_HID_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80078c0:	f107 030e 	add.w	r3, r7, #14
 80078c4:	2202      	movs	r2, #2
 80078c6:	4619      	mov	r1, r3
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f001 fa68 	bl	8008d9e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078ce:	e053      	b.n	8007978 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f001 f9f2 	bl	8008cbc <USBD_CtlError>
            ret = USBD_FAIL;
 80078d8:	2303      	movs	r3, #3
 80078da:	77fb      	strb	r3, [r7, #31]
          break;
 80078dc:	e04c      	b.n	8007978 <USBD_HID_Setup+0x1d0>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
            pbuf = HID_MOUSE_ReportDesc;
          }
#endif
           if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	885b      	ldrh	r3, [r3, #2]
 80078e2:	0a1b      	lsrs	r3, r3, #8
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	2b21      	cmp	r3, #33	; 0x21
 80078e8:	d10e      	bne.n	8007908 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 80078ea:	4b4d      	ldr	r3, [pc, #308]	; (8007a20 <USBD_HID_Setup+0x278>)
 80078ec:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	88db      	ldrh	r3, [r3, #6]
 80078f2:	2b12      	cmp	r3, #18
 80078f4:	bf28      	it	cs
 80078f6:	2312      	movcs	r3, #18
 80078f8:	82fb      	strh	r3, [r7, #22]
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
            break;
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80078fa:	8afb      	ldrh	r3, [r7, #22]
 80078fc:	461a      	mov	r2, r3
 80078fe:	6939      	ldr	r1, [r7, #16]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f001 fa4c 	bl	8008d9e <USBD_CtlSendData>
          break;
 8007906:	e037      	b.n	8007978 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f001 f9d6 	bl	8008cbc <USBD_CtlError>
            ret = USBD_FAIL;
 8007910:	2303      	movs	r3, #3
 8007912:	77fb      	strb	r3, [r7, #31]
            break;
 8007914:	e030      	b.n	8007978 <USBD_HID_Setup+0x1d0>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b03      	cmp	r3, #3
 8007920:	d107      	bne.n	8007932 <USBD_HID_Setup+0x18a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	3308      	adds	r3, #8
 8007926:	2201      	movs	r2, #1
 8007928:	4619      	mov	r1, r3
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f001 fa37 	bl	8008d9e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007930:	e022      	b.n	8007978 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 8007932:	6839      	ldr	r1, [r7, #0]
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f001 f9c1 	bl	8008cbc <USBD_CtlError>
            ret = USBD_FAIL;
 800793a:	2303      	movs	r3, #3
 800793c:	77fb      	strb	r3, [r7, #31]
          break;
 800793e:	e01b      	b.n	8007978 <USBD_HID_Setup+0x1d0>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b03      	cmp	r3, #3
 800794a:	d106      	bne.n	800795a <USBD_HID_Setup+0x1b2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	885b      	ldrh	r3, [r3, #2]
 8007950:	b2db      	uxtb	r3, r3
 8007952:	461a      	mov	r2, r3
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007958:	e00e      	b.n	8007978 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f001 f9ad 	bl	8008cbc <USBD_CtlError>
            ret = USBD_FAIL;
 8007962:	2303      	movs	r3, #3
 8007964:	77fb      	strb	r3, [r7, #31]
          break;
 8007966:	e007      	b.n	8007978 <USBD_HID_Setup+0x1d0>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f001 f9a6 	bl	8008cbc <USBD_CtlError>
          ret = USBD_FAIL;
 8007970:	2303      	movs	r3, #3
 8007972:	77fb      	strb	r3, [r7, #31]
          break;
 8007974:	e000      	b.n	8007978 <USBD_HID_Setup+0x1d0>
          break;
 8007976:	bf00      	nop
      }
      break;
 8007978:	e04a      	b.n	8007a10 <USBD_HID_Setup+0x268>

    case (0xC1 & USB_REQ_TYPE_MASK):			//this is for the og xbox, this is the custom vendor request
    	 hid_setup_ran++;
 800797a:	4b2a      	ldr	r3, [pc, #168]	; (8007a24 <USBD_HID_Setup+0x27c>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	3301      	adds	r3, #1
 8007980:	b2da      	uxtb	r2, r3
 8007982:	4b28      	ldr	r3, [pc, #160]	; (8007a24 <USBD_HID_Setup+0x27c>)
 8007984:	701a      	strb	r2, [r3, #0]
    	if(req->bRequest == 0x06 && req->wValue == 0x4200) {
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	785b      	ldrb	r3, [r3, #1]
 800798a:	2b06      	cmp	r3, #6
 800798c:	d10f      	bne.n	80079ae <USBD_HID_Setup+0x206>
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	885b      	ldrh	r3, [r3, #2]
 8007992:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 8007996:	d10a      	bne.n	80079ae <USBD_HID_Setup+0x206>
    		len = 16;
 8007998:	2310      	movs	r3, #16
 800799a:	82fb      	strh	r3, [r7, #22]
    		pbuf = USBD_HID_Desc;
 800799c:	4b20      	ldr	r3, [pc, #128]	; (8007a20 <USBD_HID_Setup+0x278>)
 800799e:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 80079a0:	8afb      	ldrh	r3, [r7, #22]
 80079a2:	461a      	mov	r2, r3
 80079a4:	6939      	ldr	r1, [r7, #16]
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f001 f9f9 	bl	8008d9e <USBD_CtlSendData>
 80079ac:	e027      	b.n	80079fe <USBD_HID_Setup+0x256>
    	}
    	else if(req->bRequest == 0x01 && req->wValue == 0x0100) {
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	785b      	ldrb	r3, [r3, #1]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d10f      	bne.n	80079d6 <USBD_HID_Setup+0x22e>
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	885b      	ldrh	r3, [r3, #2]
 80079ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079be:	d10a      	bne.n	80079d6 <USBD_HID_Setup+0x22e>
    		len = 20;
 80079c0:	2314      	movs	r3, #20
 80079c2:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_IN;
 80079c4:	4b18      	ldr	r3, [pc, #96]	; (8007a28 <USBD_HID_Setup+0x280>)
 80079c6:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 80079c8:	8afb      	ldrh	r3, [r7, #22]
 80079ca:	461a      	mov	r2, r3
 80079cc:	6939      	ldr	r1, [r7, #16]
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f001 f9e5 	bl	8008d9e <USBD_CtlSendData>
 80079d4:	e013      	b.n	80079fe <USBD_HID_Setup+0x256>
    	}
    	else if (req->bRequest == 0x01 && req->wValue == 0x0200) {
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	785b      	ldrb	r3, [r3, #1]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d117      	bne.n	8007a0e <USBD_HID_Setup+0x266>
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	885b      	ldrh	r3, [r3, #2]
 80079e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079e6:	d112      	bne.n	8007a0e <USBD_HID_Setup+0x266>
    		len = 6;
 80079e8:	2306      	movs	r3, #6
 80079ea:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_OUT;
 80079ec:	4b0f      	ldr	r3, [pc, #60]	; (8007a2c <USBD_HID_Setup+0x284>)
 80079ee:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 80079f0:	8afb      	ldrh	r3, [r7, #22]
 80079f2:	461a      	mov	r2, r3
 80079f4:	6939      	ldr	r1, [r7, #16]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f001 f9d1 	bl	8008d9e <USBD_CtlSendData>
    	}
    break;
 80079fc:	e007      	b.n	8007a0e <USBD_HID_Setup+0x266>
 80079fe:	e006      	b.n	8007a0e <USBD_HID_Setup+0x266>


    default:
      USBD_CtlError(pdev, req);
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f001 f95a 	bl	8008cbc <USBD_CtlError>
      ret = USBD_FAIL;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	77fb      	strb	r3, [r7, #31]
      break;
 8007a0c:	e000      	b.n	8007a10 <USBD_HID_Setup+0x268>
    break;
 8007a0e:	bf00      	nop
  }

  return (uint8_t)ret;
 8007a10:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3720      	adds	r7, #32
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20000652 	.word	0x20000652
 8007a20:	20000084 	.word	0x20000084
 8007a24:	20000651 	.word	0x20000651
 8007a28:	200000a0 	.word	0x200000a0
 8007a2c:	200000b4 	.word	0x200000b4

08007a30 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a44:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d101      	bne.n	8007a50 <USBD_HID_SendReport+0x20>
  {
	  //usb_failed = 1;
    return (uint8_t)USBD_FAIL;
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	e013      	b.n	8007a78 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b03      	cmp	r3, #3
 8007a5a:	d10c      	bne.n	8007a76 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	7b1b      	ldrb	r3, [r3, #12]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d108      	bne.n	8007a76 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	2201      	movs	r2, #1
 8007a68:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8007a6a:	88fb      	ldrh	r3, [r7, #6]
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	2181      	movs	r1, #129	; 0x81
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f004 fb46 	bl	800c102 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3718      	adds	r7, #24
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2220      	movs	r2, #32
 8007a8c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8007a8e:	4b03      	ldr	r3, [pc, #12]	; (8007a9c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr
 8007a9c:	20000044 	.word	0x20000044

08007aa0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
#if PC_SETUP
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);

  return USBD_HID_CfgHSDesc;
#endif
}
 8007aa8:	bf00      	nop
 8007aaa:	4618      	mov	r0, r3
 8007aac:	370c      	adds	r7, #12
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
	...

08007ab8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */

static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8007ac6:	4b03      	ldr	r3, [pc, #12]	; (8007ad4 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	20000064 	.word	0x20000064

08007ad8 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aea:	2200      	movs	r2, #0
 8007aec:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]

  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	220a      	movs	r2, #10
 8007b08:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8007b0a:	4b03      	ldr	r3, [pc, #12]	; (8007b18 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	20000094 	.word	0x20000094

08007b1c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	4613      	mov	r3, r2
 8007b28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d101      	bne.n	8007b34 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007b30:	2303      	movs	r3, #3
 8007b32:	e01f      	b.n	8007b74 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d003      	beq.n	8007b5a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	79fa      	ldrb	r2, [r7, #7]
 8007b66:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f004 f995 	bl	800be98 <USBD_LL_Init>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3718      	adds	r7, #24
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b86:	2300      	movs	r3, #0
 8007b88:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d101      	bne.n	8007b94 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007b90:	2303      	movs	r3, #3
 8007b92:	e016      	b.n	8007bc2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	683a      	ldr	r2, [r7, #0]
 8007b98:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00b      	beq.n	8007bc0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb0:	f107 020e 	add.w	r2, r7, #14
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	4798      	blx	r3
 8007bb8:	4602      	mov	r2, r0
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b082      	sub	sp, #8
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f004 f9ac 	bl	800bf30 <USBD_LL_Start>
 8007bd8:	4603      	mov	r3, r0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b083      	sub	sp, #12
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	460b      	mov	r3, r1
 8007c02:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007c04:	2303      	movs	r3, #3
 8007c06:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d009      	beq.n	8007c26 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	78fa      	ldrb	r2, [r7, #3]
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	4798      	blx	r3
 8007c22:	4603      	mov	r3, r0
 8007c24:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d007      	beq.n	8007c56 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	78fa      	ldrb	r2, [r7, #3]
 8007c50:	4611      	mov	r1, r2
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	4798      	blx	r3
  }

  return USBD_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 ffe8 	bl	8008c48 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007c86:	461a      	mov	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c94:	f003 031f 	and.w	r3, r3, #31
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d01a      	beq.n	8007cd2 <USBD_LL_SetupStage+0x72>
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d822      	bhi.n	8007ce6 <USBD_LL_SetupStage+0x86>
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <USBD_LL_SetupStage+0x4a>
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d00a      	beq.n	8007cbe <USBD_LL_SetupStage+0x5e>
 8007ca8:	e01d      	b.n	8007ce6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fa62 	bl	800817c <USBD_StdDevReq>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	73fb      	strb	r3, [r7, #15]
      break;
 8007cbc:	e020      	b.n	8007d00 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 fb1e 	bl	8008308 <USBD_StdItfReq>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	73fb      	strb	r3, [r7, #15]
      break;
 8007cd0:	e016      	b.n	8007d00 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cd8:	4619      	mov	r1, r3
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fb5d 	bl	800839a <USBD_StdEPReq>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ce4:	e00c      	b.n	8007d00 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007cec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f004 f97b 	bl	800bff0 <USBD_LL_StallEP>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	73fb      	strb	r3, [r7, #15]
      break;
 8007cfe:	bf00      	nop
  }

  return ret;
 8007d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3710      	adds	r7, #16
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b086      	sub	sp, #24
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	60f8      	str	r0, [r7, #12]
 8007d12:	460b      	mov	r3, r1
 8007d14:	607a      	str	r2, [r7, #4]
 8007d16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007d18:	7afb      	ldrb	r3, [r7, #11]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d138      	bne.n	8007d90 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d24:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d2c:	2b03      	cmp	r3, #3
 8007d2e:	d14a      	bne.n	8007dc6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	689a      	ldr	r2, [r3, #8]
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d913      	bls.n	8007d64 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	689a      	ldr	r2, [r3, #8]
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	1ad2      	subs	r2, r2, r3
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	68da      	ldr	r2, [r3, #12]
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	4293      	cmp	r3, r2
 8007d54:	bf28      	it	cs
 8007d56:	4613      	movcs	r3, r2
 8007d58:	461a      	mov	r2, r3
 8007d5a:	6879      	ldr	r1, [r7, #4]
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f001 f84a 	bl	8008df6 <USBD_CtlContinueRx>
 8007d62:	e030      	b.n	8007dc6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b03      	cmp	r3, #3
 8007d6e:	d10b      	bne.n	8007d88 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f001 f845 	bl	8008e18 <USBD_CtlSendStatus>
 8007d8e:	e01a      	b.n	8007dc6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	2b03      	cmp	r3, #3
 8007d9a:	d114      	bne.n	8007dc6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00e      	beq.n	8007dc6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	7afa      	ldrb	r2, [r7, #11]
 8007db2:	4611      	mov	r1, r2
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	4798      	blx	r3
 8007db8:	4603      	mov	r3, r0
 8007dba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007dbc:	7dfb      	ldrb	r3, [r7, #23]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d001      	beq.n	8007dc6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007dc2:	7dfb      	ldrb	r3, [r7, #23]
 8007dc4:	e000      	b.n	8007dc8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3718      	adds	r7, #24
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	607a      	str	r2, [r7, #4]
 8007ddc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007dde:	7afb      	ldrb	r3, [r7, #11]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d16b      	bne.n	8007ebc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	3314      	adds	r3, #20
 8007de8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d156      	bne.n	8007ea2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	689a      	ldr	r2, [r3, #8]
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d914      	bls.n	8007e2a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	689a      	ldr	r2, [r3, #8]
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	1ad2      	subs	r2, r2, r3
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	461a      	mov	r2, r3
 8007e14:	6879      	ldr	r1, [r7, #4]
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f000 ffdc 	bl	8008dd4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	2200      	movs	r2, #0
 8007e20:	2100      	movs	r1, #0
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f004 f98e 	bl	800c144 <USBD_LL_PrepareReceive>
 8007e28:	e03b      	b.n	8007ea2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	68da      	ldr	r2, [r3, #12]
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d11c      	bne.n	8007e70 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	685a      	ldr	r2, [r3, #4]
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d316      	bcc.n	8007e70 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	685a      	ldr	r2, [r3, #4]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d20f      	bcs.n	8007e70 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e50:	2200      	movs	r2, #0
 8007e52:	2100      	movs	r1, #0
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f000 ffbd 	bl	8008dd4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e62:	2300      	movs	r3, #0
 8007e64:	2200      	movs	r2, #0
 8007e66:	2100      	movs	r1, #0
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f004 f96b 	bl	800c144 <USBD_LL_PrepareReceive>
 8007e6e:	e018      	b.n	8007ea2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	2b03      	cmp	r3, #3
 8007e7a:	d10b      	bne.n	8007e94 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d005      	beq.n	8007e94 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e94:	2180      	movs	r1, #128	; 0x80
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f004 f8aa 	bl	800bff0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f000 ffce 	bl	8008e3e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d122      	bne.n	8007ef2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f7ff fe98 	bl	8007be2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007eba:	e01a      	b.n	8007ef2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	2b03      	cmp	r3, #3
 8007ec6:	d114      	bne.n	8007ef2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ece:	695b      	ldr	r3, [r3, #20]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00e      	beq.n	8007ef2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eda:	695b      	ldr	r3, [r3, #20]
 8007edc:	7afa      	ldrb	r2, [r7, #11]
 8007ede:	4611      	mov	r1, r2
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	4798      	blx	r3
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007ee8:	7dfb      	ldrb	r3, [r7, #23]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d001      	beq.n	8007ef2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007eee:	7dfb      	ldrb	r3, [r7, #23]
 8007ef0:	e000      	b.n	8007ef4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3718      	adds	r7, #24
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d101      	bne.n	8007f30 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e02f      	b.n	8007f90 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00f      	beq.n	8007f5a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d009      	beq.n	8007f5a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	6852      	ldr	r2, [r2, #4]
 8007f52:	b2d2      	uxtb	r2, r2
 8007f54:	4611      	mov	r1, r2
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f5a:	2340      	movs	r3, #64	; 0x40
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	2100      	movs	r1, #0
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f004 f800 	bl	800bf66 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2240      	movs	r2, #64	; 0x40
 8007f72:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f76:	2340      	movs	r3, #64	; 0x40
 8007f78:	2200      	movs	r2, #0
 8007f7a:	2180      	movs	r1, #128	; 0x80
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f003 fff2 	bl	800bf66 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2201      	movs	r2, #1
 8007f86:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2240      	movs	r2, #64	; 0x40
 8007f8c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	78fa      	ldrb	r2, [r7, #3]
 8007fa8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fc6:	b2da      	uxtb	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2204      	movs	r2, #4
 8007fd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b04      	cmp	r3, #4
 8007ff6:	d106      	bne.n	8008006 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008022:	2b00      	cmp	r3, #0
 8008024:	d101      	bne.n	800802a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008026:	2303      	movs	r3, #3
 8008028:	e012      	b.n	8008050 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008030:	b2db      	uxtb	r3, r3
 8008032:	2b03      	cmp	r3, #3
 8008034:	d10b      	bne.n	800804e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800803c:	69db      	ldr	r3, [r3, #28]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d005      	beq.n	800804e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	460b      	mov	r3, r1
 8008062:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800806e:	2303      	movs	r3, #3
 8008070:	e014      	b.n	800809c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008078:	b2db      	uxtb	r3, r3
 800807a:	2b03      	cmp	r3, #3
 800807c:	d10d      	bne.n	800809a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d007      	beq.n	800809a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	78fa      	ldrb	r2, [r7, #3]
 8008094:	4611      	mov	r1, r2
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	460b      	mov	r3, r1
 80080ae:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d101      	bne.n	80080be <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e014      	b.n	80080e8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	d10d      	bne.n	80080e6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d007      	beq.n	80080e6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080de:	78fa      	ldrb	r2, [r7, #3]
 80080e0:	4611      	mov	r1, r2
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	370c      	adds	r7, #12
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr

08008106 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b082      	sub	sp, #8
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800811c:	2b00      	cmp	r3, #0
 800811e:	d009      	beq.n	8008134 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	6852      	ldr	r2, [r2, #4]
 800812c:	b2d2      	uxtb	r2, r2
 800812e:	4611      	mov	r1, r2
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	4798      	blx	r3
  }

  return USBD_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3708      	adds	r7, #8
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800813e:	b480      	push	{r7}
 8008140:	b087      	sub	sp, #28
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	3301      	adds	r3, #1
 8008154:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800815c:	8a3b      	ldrh	r3, [r7, #16]
 800815e:	021b      	lsls	r3, r3, #8
 8008160:	b21a      	sxth	r2, r3
 8008162:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008166:	4313      	orrs	r3, r2
 8008168:	b21b      	sxth	r3, r3
 800816a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800816c:	89fb      	ldrh	r3, [r7, #14]
}
 800816e:	4618      	mov	r0, r3
 8008170:	371c      	adds	r7, #28
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
	...

0800817c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008186:	2300      	movs	r3, #0
 8008188:	73fb      	strb	r3, [r7, #15]


  if(req->bmRequest == 0xC1) {
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	2bc1      	cmp	r3, #193	; 0xc1
 8008190:	d148      	bne.n	8008224 <USBD_StdDevReq+0xa8>
	  uint16_t len = 0;
 8008192:	2300      	movs	r3, #0
 8008194:	81bb      	strh	r3, [r7, #12]
	  uint8_t *pbuf = NULL;
 8008196:	2300      	movs	r3, #0
 8008198:	60bb      	str	r3, [r7, #8]
  	if(req->bRequest == 0x06 && req->wValue == 0x4200) {
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	785b      	ldrb	r3, [r3, #1]
 800819e:	2b06      	cmp	r3, #6
 80081a0:	d10f      	bne.n	80081c2 <USBD_StdDevReq+0x46>
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	885b      	ldrh	r3, [r3, #2]
 80081a6:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 80081aa:	d10a      	bne.n	80081c2 <USBD_StdDevReq+0x46>
  		len = 16;
 80081ac:	2310      	movs	r3, #16
 80081ae:	81bb      	strh	r3, [r7, #12]
  		pbuf = USBD_HID_Desc;
 80081b0:	4b51      	ldr	r3, [pc, #324]	; (80082f8 <USBD_StdDevReq+0x17c>)
 80081b2:	60bb      	str	r3, [r7, #8]
  		(void)USBD_CtlSendData(pdev, pbuf, len);
 80081b4:	89bb      	ldrh	r3, [r7, #12]
 80081b6:	461a      	mov	r2, r3
 80081b8:	68b9      	ldr	r1, [r7, #8]
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 fdef 	bl	8008d9e <USBD_CtlSendData>
 80081c0:	e026      	b.n	8008210 <USBD_StdDevReq+0x94>
  	}
  	else if(req->bRequest == 0x01 && req->wValue == 0x0100) {
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	785b      	ldrb	r3, [r3, #1]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d10f      	bne.n	80081ea <USBD_StdDevReq+0x6e>
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	885b      	ldrh	r3, [r3, #2]
 80081ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081d2:	d10a      	bne.n	80081ea <USBD_StdDevReq+0x6e>
  		len = 20;
 80081d4:	2314      	movs	r3, #20
 80081d6:	81bb      	strh	r3, [r7, #12]
  		pbuf = DUKE_HID_CAPABILITIES_IN;
 80081d8:	4b48      	ldr	r3, [pc, #288]	; (80082fc <USBD_StdDevReq+0x180>)
 80081da:	60bb      	str	r3, [r7, #8]
  		(void)USBD_CtlSendData(pdev, pbuf, len);
 80081dc:	89bb      	ldrh	r3, [r7, #12]
 80081de:	461a      	mov	r2, r3
 80081e0:	68b9      	ldr	r1, [r7, #8]
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fddb 	bl	8008d9e <USBD_CtlSendData>
 80081e8:	e012      	b.n	8008210 <USBD_StdDevReq+0x94>
  	}
  	else if (req->bRequest == 0x01 && req->wValue == 0x0200) {
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	785b      	ldrb	r3, [r3, #1]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d10e      	bne.n	8008210 <USBD_StdDevReq+0x94>
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	885b      	ldrh	r3, [r3, #2]
 80081f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081fa:	d109      	bne.n	8008210 <USBD_StdDevReq+0x94>
  		len = 6;
 80081fc:	2306      	movs	r3, #6
 80081fe:	81bb      	strh	r3, [r7, #12]
  		pbuf = DUKE_HID_CAPABILITIES_OUT;
 8008200:	4b3f      	ldr	r3, [pc, #252]	; (8008300 <USBD_StdDevReq+0x184>)
 8008202:	60bb      	str	r3, [r7, #8]
  		(void)USBD_CtlSendData(pdev, pbuf, len);
 8008204:	89bb      	ldrh	r3, [r7, #12]
 8008206:	461a      	mov	r2, r3
 8008208:	68b9      	ldr	r1, [r7, #8]
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fdc7 	bl	8008d9e <USBD_CtlSendData>
  	}
	  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	6839      	ldr	r1, [r7, #0]
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	4798      	blx	r3
 800821e:	4603      	mov	r3, r0
 8008220:	73fb      	strb	r3, [r7, #15]
 8008222:	e064      	b.n	80082ee <USBD_StdDevReq+0x172>


  } else {
	  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800822c:	2b40      	cmp	r3, #64	; 0x40
 800822e:	d005      	beq.n	800823c <USBD_StdDevReq+0xc0>
 8008230:	2b40      	cmp	r3, #64	; 0x40
 8008232:	d854      	bhi.n	80082de <USBD_StdDevReq+0x162>
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00b      	beq.n	8008250 <USBD_StdDevReq+0xd4>
 8008238:	2b20      	cmp	r3, #32
 800823a:	d150      	bne.n	80082de <USBD_StdDevReq+0x162>
	  {
		case USB_REQ_TYPE_CLASS:
		case USB_REQ_TYPE_VENDOR:
		  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	4798      	blx	r3
 800824a:	4603      	mov	r3, r0
 800824c:	73fb      	strb	r3, [r7, #15]
		  break;
 800824e:	e04e      	b.n	80082ee <USBD_StdDevReq+0x172>

		case USB_REQ_TYPE_STANDARD:
		  switch (req->bRequest)
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	785b      	ldrb	r3, [r3, #1]
 8008254:	2b09      	cmp	r3, #9
 8008256:	d83c      	bhi.n	80082d2 <USBD_StdDevReq+0x156>
 8008258:	a201      	add	r2, pc, #4	; (adr r2, 8008260 <USBD_StdDevReq+0xe4>)
 800825a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800825e:	bf00      	nop
 8008260:	080082b5 	.word	0x080082b5
 8008264:	080082c9 	.word	0x080082c9
 8008268:	080082d3 	.word	0x080082d3
 800826c:	080082bf 	.word	0x080082bf
 8008270:	080082d3 	.word	0x080082d3
 8008274:	08008293 	.word	0x08008293
 8008278:	08008289 	.word	0x08008289
 800827c:	080082d3 	.word	0x080082d3
 8008280:	080082ab 	.word	0x080082ab
 8008284:	0800829d 	.word	0x0800829d
		  {
			case USB_REQ_GET_DESCRIPTOR:
			  USBD_GetDescriptor(pdev, req);
 8008288:	6839      	ldr	r1, [r7, #0]
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f9e8 	bl	8008660 <USBD_GetDescriptor>
			  break;
 8008290:	e024      	b.n	80082dc <USBD_StdDevReq+0x160>

			case USB_REQ_SET_ADDRESS:
			  USBD_SetAddress(pdev, req);
 8008292:	6839      	ldr	r1, [r7, #0]
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fb4d 	bl	8008934 <USBD_SetAddress>
			  break;
 800829a:	e01f      	b.n	80082dc <USBD_StdDevReq+0x160>

			case USB_REQ_SET_CONFIGURATION:
			  ret = USBD_SetConfig(pdev, req);
 800829c:	6839      	ldr	r1, [r7, #0]
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 fb8c 	bl	80089bc <USBD_SetConfig>
 80082a4:	4603      	mov	r3, r0
 80082a6:	73fb      	strb	r3, [r7, #15]
			  break;
 80082a8:	e018      	b.n	80082dc <USBD_StdDevReq+0x160>

			case USB_REQ_GET_CONFIGURATION:
			  USBD_GetConfig(pdev, req);
 80082aa:	6839      	ldr	r1, [r7, #0]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fc2b 	bl	8008b08 <USBD_GetConfig>
			  break;
 80082b2:	e013      	b.n	80082dc <USBD_StdDevReq+0x160>

			case USB_REQ_GET_STATUS:
			  USBD_GetStatus(pdev, req);
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fc5c 	bl	8008b74 <USBD_GetStatus>
			  break;
 80082bc:	e00e      	b.n	80082dc <USBD_StdDevReq+0x160>

			case USB_REQ_SET_FEATURE:
			  USBD_SetFeature(pdev, req);
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fc8b 	bl	8008bdc <USBD_SetFeature>
			  break;
 80082c6:	e009      	b.n	80082dc <USBD_StdDevReq+0x160>

			case USB_REQ_CLEAR_FEATURE:
			  USBD_ClrFeature(pdev, req);
 80082c8:	6839      	ldr	r1, [r7, #0]
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fc9a 	bl	8008c04 <USBD_ClrFeature>
			  break;
 80082d0:	e004      	b.n	80082dc <USBD_StdDevReq+0x160>

			default:
			  USBD_CtlError(pdev, req);
 80082d2:	6839      	ldr	r1, [r7, #0]
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 fcf1 	bl	8008cbc <USBD_CtlError>
			  break;
 80082da:	bf00      	nop
		  }
		  break;
 80082dc:	e007      	b.n	80082ee <USBD_StdDevReq+0x172>

		default:
		  unknown_bmrequest = 1;
 80082de:	4b09      	ldr	r3, [pc, #36]	; (8008304 <USBD_StdDevReq+0x188>)
 80082e0:	2201      	movs	r2, #1
 80082e2:	701a      	strb	r2, [r3, #0]
		  USBD_CtlError(pdev, req);
 80082e4:	6839      	ldr	r1, [r7, #0]
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fce8 	bl	8008cbc <USBD_CtlError>
		  break;
 80082ec:	bf00      	nop
	  }
	}
  return ret;
 80082ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	200000bc 	.word	0x200000bc
 80082fc:	200000cc 	.word	0x200000cc
 8008300:	200000e0 	.word	0x200000e0
 8008304:	20000653 	.word	0x20000653

08008308 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008312:	2300      	movs	r3, #0
 8008314:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800831e:	2b40      	cmp	r3, #64	; 0x40
 8008320:	d005      	beq.n	800832e <USBD_StdItfReq+0x26>
 8008322:	2b40      	cmp	r3, #64	; 0x40
 8008324:	d82f      	bhi.n	8008386 <USBD_StdItfReq+0x7e>
 8008326:	2b00      	cmp	r3, #0
 8008328:	d001      	beq.n	800832e <USBD_StdItfReq+0x26>
 800832a:	2b20      	cmp	r3, #32
 800832c:	d12b      	bne.n	8008386 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008334:	b2db      	uxtb	r3, r3
 8008336:	3b01      	subs	r3, #1
 8008338:	2b02      	cmp	r3, #2
 800833a:	d81d      	bhi.n	8008378 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	889b      	ldrh	r3, [r3, #4]
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b01      	cmp	r3, #1
 8008344:	d813      	bhi.n	800836e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	6839      	ldr	r1, [r7, #0]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	4798      	blx	r3
 8008354:	4603      	mov	r3, r0
 8008356:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	88db      	ldrh	r3, [r3, #6]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d110      	bne.n	8008382 <USBD_StdItfReq+0x7a>
 8008360:	7bfb      	ldrb	r3, [r7, #15]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d10d      	bne.n	8008382 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fd56 	bl	8008e18 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800836c:	e009      	b.n	8008382 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800836e:	6839      	ldr	r1, [r7, #0]
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 fca3 	bl	8008cbc <USBD_CtlError>
          break;
 8008376:	e004      	b.n	8008382 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008378:	6839      	ldr	r1, [r7, #0]
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fc9e 	bl	8008cbc <USBD_CtlError>
          break;
 8008380:	e000      	b.n	8008384 <USBD_StdItfReq+0x7c>
          break;
 8008382:	bf00      	nop
      }
      break;
 8008384:	e004      	b.n	8008390 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fc97 	bl	8008cbc <USBD_CtlError>
      break;
 800838e:	bf00      	nop
  }

  return ret;
 8008390:	7bfb      	ldrb	r3, [r7, #15]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b084      	sub	sp, #16
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
 80083a2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80083a4:	2300      	movs	r3, #0
 80083a6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	889b      	ldrh	r3, [r3, #4]
 80083ac:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083b6:	2b40      	cmp	r3, #64	; 0x40
 80083b8:	d007      	beq.n	80083ca <USBD_StdEPReq+0x30>
 80083ba:	2b40      	cmp	r3, #64	; 0x40
 80083bc:	f200 8145 	bhi.w	800864a <USBD_StdEPReq+0x2b0>
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00c      	beq.n	80083de <USBD_StdEPReq+0x44>
 80083c4:	2b20      	cmp	r3, #32
 80083c6:	f040 8140 	bne.w	800864a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	6839      	ldr	r1, [r7, #0]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	4798      	blx	r3
 80083d8:	4603      	mov	r3, r0
 80083da:	73fb      	strb	r3, [r7, #15]
      break;
 80083dc:	e13a      	b.n	8008654 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	785b      	ldrb	r3, [r3, #1]
 80083e2:	2b03      	cmp	r3, #3
 80083e4:	d007      	beq.n	80083f6 <USBD_StdEPReq+0x5c>
 80083e6:	2b03      	cmp	r3, #3
 80083e8:	f300 8129 	bgt.w	800863e <USBD_StdEPReq+0x2a4>
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d07f      	beq.n	80084f0 <USBD_StdEPReq+0x156>
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d03c      	beq.n	800846e <USBD_StdEPReq+0xd4>
 80083f4:	e123      	b.n	800863e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d002      	beq.n	8008408 <USBD_StdEPReq+0x6e>
 8008402:	2b03      	cmp	r3, #3
 8008404:	d016      	beq.n	8008434 <USBD_StdEPReq+0x9a>
 8008406:	e02c      	b.n	8008462 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008408:	7bbb      	ldrb	r3, [r7, #14]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00d      	beq.n	800842a <USBD_StdEPReq+0x90>
 800840e:	7bbb      	ldrb	r3, [r7, #14]
 8008410:	2b80      	cmp	r3, #128	; 0x80
 8008412:	d00a      	beq.n	800842a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008414:	7bbb      	ldrb	r3, [r7, #14]
 8008416:	4619      	mov	r1, r3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f003 fde9 	bl	800bff0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800841e:	2180      	movs	r1, #128	; 0x80
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f003 fde5 	bl	800bff0 <USBD_LL_StallEP>
 8008426:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008428:	e020      	b.n	800846c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800842a:	6839      	ldr	r1, [r7, #0]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fc45 	bl	8008cbc <USBD_CtlError>
              break;
 8008432:	e01b      	b.n	800846c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	885b      	ldrh	r3, [r3, #2]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d10e      	bne.n	800845a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800843c:	7bbb      	ldrb	r3, [r7, #14]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00b      	beq.n	800845a <USBD_StdEPReq+0xc0>
 8008442:	7bbb      	ldrb	r3, [r7, #14]
 8008444:	2b80      	cmp	r3, #128	; 0x80
 8008446:	d008      	beq.n	800845a <USBD_StdEPReq+0xc0>
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	88db      	ldrh	r3, [r3, #6]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d104      	bne.n	800845a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008450:	7bbb      	ldrb	r3, [r7, #14]
 8008452:	4619      	mov	r1, r3
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f003 fdcb 	bl	800bff0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fcdc 	bl	8008e18 <USBD_CtlSendStatus>

              break;
 8008460:	e004      	b.n	800846c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fc29 	bl	8008cbc <USBD_CtlError>
              break;
 800846a:	bf00      	nop
          }
          break;
 800846c:	e0ec      	b.n	8008648 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b02      	cmp	r3, #2
 8008478:	d002      	beq.n	8008480 <USBD_StdEPReq+0xe6>
 800847a:	2b03      	cmp	r3, #3
 800847c:	d016      	beq.n	80084ac <USBD_StdEPReq+0x112>
 800847e:	e030      	b.n	80084e2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008480:	7bbb      	ldrb	r3, [r7, #14]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00d      	beq.n	80084a2 <USBD_StdEPReq+0x108>
 8008486:	7bbb      	ldrb	r3, [r7, #14]
 8008488:	2b80      	cmp	r3, #128	; 0x80
 800848a:	d00a      	beq.n	80084a2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800848c:	7bbb      	ldrb	r3, [r7, #14]
 800848e:	4619      	mov	r1, r3
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f003 fdad 	bl	800bff0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008496:	2180      	movs	r1, #128	; 0x80
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f003 fda9 	bl	800bff0 <USBD_LL_StallEP>
 800849e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084a0:	e025      	b.n	80084ee <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fc09 	bl	8008cbc <USBD_CtlError>
              break;
 80084aa:	e020      	b.n	80084ee <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	885b      	ldrh	r3, [r3, #2]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d11b      	bne.n	80084ec <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80084b4:	7bbb      	ldrb	r3, [r7, #14]
 80084b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d004      	beq.n	80084c8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80084be:	7bbb      	ldrb	r3, [r7, #14]
 80084c0:	4619      	mov	r1, r3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f003 fdb3 	bl	800c02e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 fca5 	bl	8008e18 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	4798      	blx	r3
 80084dc:	4603      	mov	r3, r0
 80084de:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80084e0:	e004      	b.n	80084ec <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80084e2:	6839      	ldr	r1, [r7, #0]
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 fbe9 	bl	8008cbc <USBD_CtlError>
              break;
 80084ea:	e000      	b.n	80084ee <USBD_StdEPReq+0x154>
              break;
 80084ec:	bf00      	nop
          }
          break;
 80084ee:	e0ab      	b.n	8008648 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d002      	beq.n	8008502 <USBD_StdEPReq+0x168>
 80084fc:	2b03      	cmp	r3, #3
 80084fe:	d032      	beq.n	8008566 <USBD_StdEPReq+0x1cc>
 8008500:	e097      	b.n	8008632 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008502:	7bbb      	ldrb	r3, [r7, #14]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d007      	beq.n	8008518 <USBD_StdEPReq+0x17e>
 8008508:	7bbb      	ldrb	r3, [r7, #14]
 800850a:	2b80      	cmp	r3, #128	; 0x80
 800850c:	d004      	beq.n	8008518 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fbd3 	bl	8008cbc <USBD_CtlError>
                break;
 8008516:	e091      	b.n	800863c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008518:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800851c:	2b00      	cmp	r3, #0
 800851e:	da0b      	bge.n	8008538 <USBD_StdEPReq+0x19e>
 8008520:	7bbb      	ldrb	r3, [r7, #14]
 8008522:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008526:	4613      	mov	r3, r2
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4413      	add	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	3310      	adds	r3, #16
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	4413      	add	r3, r2
 8008534:	3304      	adds	r3, #4
 8008536:	e00b      	b.n	8008550 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008538:	7bbb      	ldrb	r3, [r7, #14]
 800853a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800853e:	4613      	mov	r3, r2
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	4413      	add	r3, r2
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	4413      	add	r3, r2
 800854e:	3304      	adds	r3, #4
 8008550:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	2200      	movs	r2, #0
 8008556:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	2202      	movs	r2, #2
 800855c:	4619      	mov	r1, r3
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 fc1d 	bl	8008d9e <USBD_CtlSendData>
              break;
 8008564:	e06a      	b.n	800863c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008566:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800856a:	2b00      	cmp	r3, #0
 800856c:	da11      	bge.n	8008592 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800856e:	7bbb      	ldrb	r3, [r7, #14]
 8008570:	f003 020f 	and.w	r2, r3, #15
 8008574:	6879      	ldr	r1, [r7, #4]
 8008576:	4613      	mov	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	440b      	add	r3, r1
 8008580:	3324      	adds	r3, #36	; 0x24
 8008582:	881b      	ldrh	r3, [r3, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d117      	bne.n	80085b8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fb96 	bl	8008cbc <USBD_CtlError>
                  break;
 8008590:	e054      	b.n	800863c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008592:	7bbb      	ldrb	r3, [r7, #14]
 8008594:	f003 020f 	and.w	r2, r3, #15
 8008598:	6879      	ldr	r1, [r7, #4]
 800859a:	4613      	mov	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4413      	add	r3, r2
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	440b      	add	r3, r1
 80085a4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80085a8:	881b      	ldrh	r3, [r3, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d104      	bne.n	80085b8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80085ae:	6839      	ldr	r1, [r7, #0]
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 fb83 	bl	8008cbc <USBD_CtlError>
                  break;
 80085b6:	e041      	b.n	800863c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	da0b      	bge.n	80085d8 <USBD_StdEPReq+0x23e>
 80085c0:	7bbb      	ldrb	r3, [r7, #14]
 80085c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085c6:	4613      	mov	r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	4413      	add	r3, r2
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	3310      	adds	r3, #16
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	4413      	add	r3, r2
 80085d4:	3304      	adds	r3, #4
 80085d6:	e00b      	b.n	80085f0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085d8:	7bbb      	ldrb	r3, [r7, #14]
 80085da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085de:	4613      	mov	r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	4413      	add	r3, r2
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	4413      	add	r3, r2
 80085ee:	3304      	adds	r3, #4
 80085f0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80085f2:	7bbb      	ldrb	r3, [r7, #14]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d002      	beq.n	80085fe <USBD_StdEPReq+0x264>
 80085f8:	7bbb      	ldrb	r3, [r7, #14]
 80085fa:	2b80      	cmp	r3, #128	; 0x80
 80085fc:	d103      	bne.n	8008606 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	2200      	movs	r2, #0
 8008602:	601a      	str	r2, [r3, #0]
 8008604:	e00e      	b.n	8008624 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008606:	7bbb      	ldrb	r3, [r7, #14]
 8008608:	4619      	mov	r1, r3
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f003 fd2e 	bl	800c06c <USBD_LL_IsStallEP>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d003      	beq.n	800861e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	2201      	movs	r2, #1
 800861a:	601a      	str	r2, [r3, #0]
 800861c:	e002      	b.n	8008624 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	2200      	movs	r2, #0
 8008622:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	2202      	movs	r2, #2
 8008628:	4619      	mov	r1, r3
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fbb7 	bl	8008d9e <USBD_CtlSendData>
              break;
 8008630:	e004      	b.n	800863c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008632:	6839      	ldr	r1, [r7, #0]
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 fb41 	bl	8008cbc <USBD_CtlError>
              break;
 800863a:	bf00      	nop
          }
          break;
 800863c:	e004      	b.n	8008648 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fb3b 	bl	8008cbc <USBD_CtlError>
          break;
 8008646:	bf00      	nop
      }
      break;
 8008648:	e004      	b.n	8008654 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800864a:	6839      	ldr	r1, [r7, #0]
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 fb35 	bl	8008cbc <USBD_CtlError>
      break;
 8008652:	bf00      	nop
  }

  return ret;
 8008654:	7bfb      	ldrb	r3, [r7, #15]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
	...

08008660 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800866a:	2300      	movs	r3, #0
 800866c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800866e:	2300      	movs	r3, #0
 8008670:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008672:	2300      	movs	r3, #0
 8008674:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	885b      	ldrh	r3, [r3, #2]
 800867a:	0a1b      	lsrs	r3, r3, #8
 800867c:	b29b      	uxth	r3, r3
 800867e:	3b01      	subs	r3, #1
 8008680:	2b06      	cmp	r3, #6
 8008682:	f200 8128 	bhi.w	80088d6 <USBD_GetDescriptor+0x276>
 8008686:	a201      	add	r2, pc, #4	; (adr r2, 800868c <USBD_GetDescriptor+0x2c>)
 8008688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868c:	080086a9 	.word	0x080086a9
 8008690:	080086c1 	.word	0x080086c1
 8008694:	08008701 	.word	0x08008701
 8008698:	080088d7 	.word	0x080088d7
 800869c:	080088d7 	.word	0x080088d7
 80086a0:	08008877 	.word	0x08008877
 80086a4:	080088a3 	.word	0x080088a3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	7c12      	ldrb	r2, [r2, #16]
 80086b4:	f107 0108 	add.w	r1, r7, #8
 80086b8:	4610      	mov	r0, r2
 80086ba:	4798      	blx	r3
 80086bc:	60f8      	str	r0, [r7, #12]
      break;
 80086be:	e112      	b.n	80088e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	7c1b      	ldrb	r3, [r3, #16]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10d      	bne.n	80086e4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d0:	f107 0208 	add.w	r2, r7, #8
 80086d4:	4610      	mov	r0, r2
 80086d6:	4798      	blx	r3
 80086d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	3301      	adds	r3, #1
 80086de:	2202      	movs	r2, #2
 80086e0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80086e2:	e100      	b.n	80088e6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ec:	f107 0208 	add.w	r2, r7, #8
 80086f0:	4610      	mov	r0, r2
 80086f2:	4798      	blx	r3
 80086f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	3301      	adds	r3, #1
 80086fa:	2202      	movs	r2, #2
 80086fc:	701a      	strb	r2, [r3, #0]
      break;
 80086fe:	e0f2      	b.n	80088e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	885b      	ldrh	r3, [r3, #2]
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b05      	cmp	r3, #5
 8008708:	f200 80ac 	bhi.w	8008864 <USBD_GetDescriptor+0x204>
 800870c:	a201      	add	r2, pc, #4	; (adr r2, 8008714 <USBD_GetDescriptor+0xb4>)
 800870e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008712:	bf00      	nop
 8008714:	0800872d 	.word	0x0800872d
 8008718:	08008761 	.word	0x08008761
 800871c:	08008795 	.word	0x08008795
 8008720:	080087c9 	.word	0x080087c9
 8008724:	080087fd 	.word	0x080087fd
 8008728:	08008831 	.word	0x08008831
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00b      	beq.n	8008750 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	7c12      	ldrb	r2, [r2, #16]
 8008744:	f107 0108 	add.w	r1, r7, #8
 8008748:	4610      	mov	r0, r2
 800874a:	4798      	blx	r3
 800874c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800874e:	e091      	b.n	8008874 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008750:	6839      	ldr	r1, [r7, #0]
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 fab2 	bl	8008cbc <USBD_CtlError>
            err++;
 8008758:	7afb      	ldrb	r3, [r7, #11]
 800875a:	3301      	adds	r3, #1
 800875c:	72fb      	strb	r3, [r7, #11]
          break;
 800875e:	e089      	b.n	8008874 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00b      	beq.n	8008784 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	7c12      	ldrb	r2, [r2, #16]
 8008778:	f107 0108 	add.w	r1, r7, #8
 800877c:	4610      	mov	r0, r2
 800877e:	4798      	blx	r3
 8008780:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008782:	e077      	b.n	8008874 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008784:	6839      	ldr	r1, [r7, #0]
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 fa98 	bl	8008cbc <USBD_CtlError>
            err++;
 800878c:	7afb      	ldrb	r3, [r7, #11]
 800878e:	3301      	adds	r3, #1
 8008790:	72fb      	strb	r3, [r7, #11]
          break;
 8008792:	e06f      	b.n	8008874 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d00b      	beq.n	80087b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	7c12      	ldrb	r2, [r2, #16]
 80087ac:	f107 0108 	add.w	r1, r7, #8
 80087b0:	4610      	mov	r0, r2
 80087b2:	4798      	blx	r3
 80087b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087b6:	e05d      	b.n	8008874 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087b8:	6839      	ldr	r1, [r7, #0]
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fa7e 	bl	8008cbc <USBD_CtlError>
            err++;
 80087c0:	7afb      	ldrb	r3, [r7, #11]
 80087c2:	3301      	adds	r3, #1
 80087c4:	72fb      	strb	r3, [r7, #11]
          break;
 80087c6:	e055      	b.n	8008874 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00b      	beq.n	80087ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	7c12      	ldrb	r2, [r2, #16]
 80087e0:	f107 0108 	add.w	r1, r7, #8
 80087e4:	4610      	mov	r0, r2
 80087e6:	4798      	blx	r3
 80087e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087ea:	e043      	b.n	8008874 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087ec:	6839      	ldr	r1, [r7, #0]
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fa64 	bl	8008cbc <USBD_CtlError>
            err++;
 80087f4:	7afb      	ldrb	r3, [r7, #11]
 80087f6:	3301      	adds	r3, #1
 80087f8:	72fb      	strb	r3, [r7, #11]
          break;
 80087fa:	e03b      	b.n	8008874 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00b      	beq.n	8008820 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800880e:	695b      	ldr	r3, [r3, #20]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	7c12      	ldrb	r2, [r2, #16]
 8008814:	f107 0108 	add.w	r1, r7, #8
 8008818:	4610      	mov	r0, r2
 800881a:	4798      	blx	r3
 800881c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800881e:	e029      	b.n	8008874 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008820:	6839      	ldr	r1, [r7, #0]
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 fa4a 	bl	8008cbc <USBD_CtlError>
            err++;
 8008828:	7afb      	ldrb	r3, [r7, #11]
 800882a:	3301      	adds	r3, #1
 800882c:	72fb      	strb	r3, [r7, #11]
          break;
 800882e:	e021      	b.n	8008874 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00b      	beq.n	8008854 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008842:	699b      	ldr	r3, [r3, #24]
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	7c12      	ldrb	r2, [r2, #16]
 8008848:	f107 0108 	add.w	r1, r7, #8
 800884c:	4610      	mov	r0, r2
 800884e:	4798      	blx	r3
 8008850:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008852:	e00f      	b.n	8008874 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008854:	6839      	ldr	r1, [r7, #0]
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 fa30 	bl	8008cbc <USBD_CtlError>
            err++;
 800885c:	7afb      	ldrb	r3, [r7, #11]
 800885e:	3301      	adds	r3, #1
 8008860:	72fb      	strb	r3, [r7, #11]
          break;
 8008862:	e007      	b.n	8008874 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008864:	6839      	ldr	r1, [r7, #0]
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 fa28 	bl	8008cbc <USBD_CtlError>
          err++;
 800886c:	7afb      	ldrb	r3, [r7, #11]
 800886e:	3301      	adds	r3, #1
 8008870:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008872:	bf00      	nop
      }
      break;
 8008874:	e037      	b.n	80088e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	7c1b      	ldrb	r3, [r3, #16]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d109      	bne.n	8008892 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008886:	f107 0208 	add.w	r2, r7, #8
 800888a:	4610      	mov	r0, r2
 800888c:	4798      	blx	r3
 800888e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008890:	e029      	b.n	80088e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008892:	6839      	ldr	r1, [r7, #0]
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 fa11 	bl	8008cbc <USBD_CtlError>
        err++;
 800889a:	7afb      	ldrb	r3, [r7, #11]
 800889c:	3301      	adds	r3, #1
 800889e:	72fb      	strb	r3, [r7, #11]
      break;
 80088a0:	e021      	b.n	80088e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	7c1b      	ldrb	r3, [r3, #16]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10d      	bne.n	80088c6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b2:	f107 0208 	add.w	r2, r7, #8
 80088b6:	4610      	mov	r0, r2
 80088b8:	4798      	blx	r3
 80088ba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	3301      	adds	r3, #1
 80088c0:	2207      	movs	r2, #7
 80088c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088c4:	e00f      	b.n	80088e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 f9f7 	bl	8008cbc <USBD_CtlError>
        err++;
 80088ce:	7afb      	ldrb	r3, [r7, #11]
 80088d0:	3301      	adds	r3, #1
 80088d2:	72fb      	strb	r3, [r7, #11]
      break;
 80088d4:	e007      	b.n	80088e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80088d6:	6839      	ldr	r1, [r7, #0]
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 f9ef 	bl	8008cbc <USBD_CtlError>
      err++;
 80088de:	7afb      	ldrb	r3, [r7, #11]
 80088e0:	3301      	adds	r3, #1
 80088e2:	72fb      	strb	r3, [r7, #11]
      break;
 80088e4:	bf00      	nop
  }

  if (err != 0U)
 80088e6:	7afb      	ldrb	r3, [r7, #11]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d11e      	bne.n	800892a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	88db      	ldrh	r3, [r3, #6]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d016      	beq.n	8008922 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80088f4:	893b      	ldrh	r3, [r7, #8]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00e      	beq.n	8008918 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	88da      	ldrh	r2, [r3, #6]
 80088fe:	893b      	ldrh	r3, [r7, #8]
 8008900:	4293      	cmp	r3, r2
 8008902:	bf28      	it	cs
 8008904:	4613      	movcs	r3, r2
 8008906:	b29b      	uxth	r3, r3
 8008908:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800890a:	893b      	ldrh	r3, [r7, #8]
 800890c:	461a      	mov	r2, r3
 800890e:	68f9      	ldr	r1, [r7, #12]
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 fa44 	bl	8008d9e <USBD_CtlSendData>
 8008916:	e009      	b.n	800892c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008918:	6839      	ldr	r1, [r7, #0]
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f9ce 	bl	8008cbc <USBD_CtlError>
 8008920:	e004      	b.n	800892c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 fa78 	bl	8008e18 <USBD_CtlSendStatus>
 8008928:	e000      	b.n	800892c <USBD_GetDescriptor+0x2cc>
    return;
 800892a:	bf00      	nop
  }
}
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop

08008934 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	889b      	ldrh	r3, [r3, #4]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d131      	bne.n	80089aa <USBD_SetAddress+0x76>
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	88db      	ldrh	r3, [r3, #6]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d12d      	bne.n	80089aa <USBD_SetAddress+0x76>
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	885b      	ldrh	r3, [r3, #2]
 8008952:	2b7f      	cmp	r3, #127	; 0x7f
 8008954:	d829      	bhi.n	80089aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	885b      	ldrh	r3, [r3, #2]
 800895a:	b2db      	uxtb	r3, r3
 800895c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008960:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b03      	cmp	r3, #3
 800896c:	d104      	bne.n	8008978 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800896e:	6839      	ldr	r1, [r7, #0]
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f9a3 	bl	8008cbc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008976:	e01d      	b.n	80089b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	7bfa      	ldrb	r2, [r7, #15]
 800897c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008980:	7bfb      	ldrb	r3, [r7, #15]
 8008982:	4619      	mov	r1, r3
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f003 fb9d 	bl	800c0c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fa44 	bl	8008e18 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008990:	7bfb      	ldrb	r3, [r7, #15]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d004      	beq.n	80089a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2202      	movs	r2, #2
 800899a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800899e:	e009      	b.n	80089b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2201      	movs	r2, #1
 80089a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089a8:	e004      	b.n	80089b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80089aa:	6839      	ldr	r1, [r7, #0]
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 f985 	bl	8008cbc <USBD_CtlError>
  }
}
 80089b2:	bf00      	nop
 80089b4:	bf00      	nop
 80089b6:	3710      	adds	r7, #16
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089c6:	2300      	movs	r3, #0
 80089c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	885b      	ldrh	r3, [r3, #2]
 80089ce:	b2da      	uxtb	r2, r3
 80089d0:	4b4c      	ldr	r3, [pc, #304]	; (8008b04 <USBD_SetConfig+0x148>)
 80089d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80089d4:	4b4b      	ldr	r3, [pc, #300]	; (8008b04 <USBD_SetConfig+0x148>)
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d905      	bls.n	80089e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f96c 	bl	8008cbc <USBD_CtlError>
    return USBD_FAIL;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e088      	b.n	8008afa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	d002      	beq.n	80089fa <USBD_SetConfig+0x3e>
 80089f4:	2b03      	cmp	r3, #3
 80089f6:	d025      	beq.n	8008a44 <USBD_SetConfig+0x88>
 80089f8:	e071      	b.n	8008ade <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80089fa:	4b42      	ldr	r3, [pc, #264]	; (8008b04 <USBD_SetConfig+0x148>)
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d01c      	beq.n	8008a3c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008a02:	4b40      	ldr	r3, [pc, #256]	; (8008b04 <USBD_SetConfig+0x148>)
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	461a      	mov	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a0c:	4b3d      	ldr	r3, [pc, #244]	; (8008b04 <USBD_SetConfig+0x148>)
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	4619      	mov	r1, r3
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f7ff f8f0 	bl	8007bf8 <USBD_SetClassConfig>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008a1c:	7bfb      	ldrb	r3, [r7, #15]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d004      	beq.n	8008a2c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008a22:	6839      	ldr	r1, [r7, #0]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 f949 	bl	8008cbc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a2a:	e065      	b.n	8008af8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 f9f3 	bl	8008e18 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2203      	movs	r2, #3
 8008a36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008a3a:	e05d      	b.n	8008af8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 f9eb 	bl	8008e18 <USBD_CtlSendStatus>
      break;
 8008a42:	e059      	b.n	8008af8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008a44:	4b2f      	ldr	r3, [pc, #188]	; (8008b04 <USBD_SetConfig+0x148>)
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d112      	bne.n	8008a72 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2202      	movs	r2, #2
 8008a50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008a54:	4b2b      	ldr	r3, [pc, #172]	; (8008b04 <USBD_SetConfig+0x148>)
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	461a      	mov	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a5e:	4b29      	ldr	r3, [pc, #164]	; (8008b04 <USBD_SetConfig+0x148>)
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	4619      	mov	r1, r3
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f7ff f8e3 	bl	8007c30 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f9d4 	bl	8008e18 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a70:	e042      	b.n	8008af8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008a72:	4b24      	ldr	r3, [pc, #144]	; (8008b04 <USBD_SetConfig+0x148>)
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	461a      	mov	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d02a      	beq.n	8008ad6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	4619      	mov	r1, r3
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f7ff f8d1 	bl	8007c30 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008a8e:	4b1d      	ldr	r3, [pc, #116]	; (8008b04 <USBD_SetConfig+0x148>)
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	461a      	mov	r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a98:	4b1a      	ldr	r3, [pc, #104]	; (8008b04 <USBD_SetConfig+0x148>)
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f7ff f8aa 	bl	8007bf8 <USBD_SetClassConfig>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008aa8:	7bfb      	ldrb	r3, [r7, #15]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00f      	beq.n	8008ace <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008aae:	6839      	ldr	r1, [r7, #0]
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 f903 	bl	8008cbc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	4619      	mov	r1, r3
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7ff f8b6 	bl	8007c30 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2202      	movs	r2, #2
 8008ac8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008acc:	e014      	b.n	8008af8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 f9a2 	bl	8008e18 <USBD_CtlSendStatus>
      break;
 8008ad4:	e010      	b.n	8008af8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f99e 	bl	8008e18 <USBD_CtlSendStatus>
      break;
 8008adc:	e00c      	b.n	8008af8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008ade:	6839      	ldr	r1, [r7, #0]
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f8eb 	bl	8008cbc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ae6:	4b07      	ldr	r3, [pc, #28]	; (8008b04 <USBD_SetConfig+0x148>)
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	4619      	mov	r1, r3
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f7ff f89f 	bl	8007c30 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008af2:	2303      	movs	r3, #3
 8008af4:	73fb      	strb	r3, [r7, #15]
      break;
 8008af6:	bf00      	nop
  }

  return ret;
 8008af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	20000655 	.word	0x20000655

08008b08 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	88db      	ldrh	r3, [r3, #6]
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d004      	beq.n	8008b24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 f8cd 	bl	8008cbc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b22:	e023      	b.n	8008b6c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	dc02      	bgt.n	8008b36 <USBD_GetConfig+0x2e>
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	dc03      	bgt.n	8008b3c <USBD_GetConfig+0x34>
 8008b34:	e015      	b.n	8008b62 <USBD_GetConfig+0x5a>
 8008b36:	2b03      	cmp	r3, #3
 8008b38:	d00b      	beq.n	8008b52 <USBD_GetConfig+0x4a>
 8008b3a:	e012      	b.n	8008b62 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	3308      	adds	r3, #8
 8008b46:	2201      	movs	r2, #1
 8008b48:	4619      	mov	r1, r3
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 f927 	bl	8008d9e <USBD_CtlSendData>
        break;
 8008b50:	e00c      	b.n	8008b6c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	3304      	adds	r3, #4
 8008b56:	2201      	movs	r2, #1
 8008b58:	4619      	mov	r1, r3
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 f91f 	bl	8008d9e <USBD_CtlSendData>
        break;
 8008b60:	e004      	b.n	8008b6c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008b62:	6839      	ldr	r1, [r7, #0]
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 f8a9 	bl	8008cbc <USBD_CtlError>
        break;
 8008b6a:	bf00      	nop
}
 8008b6c:	bf00      	nop
 8008b6e:	3708      	adds	r7, #8
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	3b01      	subs	r3, #1
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d81e      	bhi.n	8008bca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	88db      	ldrh	r3, [r3, #6]
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d004      	beq.n	8008b9e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008b94:	6839      	ldr	r1, [r7, #0]
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f890 	bl	8008cbc <USBD_CtlError>
        break;
 8008b9c:	e01a      	b.n	8008bd4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d005      	beq.n	8008bba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	f043 0202 	orr.w	r2, r3, #2
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	330c      	adds	r3, #12
 8008bbe:	2202      	movs	r2, #2
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f8eb 	bl	8008d9e <USBD_CtlSendData>
      break;
 8008bc8:	e004      	b.n	8008bd4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008bca:	6839      	ldr	r1, [r7, #0]
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f875 	bl	8008cbc <USBD_CtlError>
      break;
 8008bd2:	bf00      	nop
  }
}
 8008bd4:	bf00      	nop
 8008bd6:	3708      	adds	r7, #8
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	885b      	ldrh	r3, [r3, #2]
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d106      	bne.n	8008bfc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f90e 	bl	8008e18 <USBD_CtlSendStatus>
  }
}
 8008bfc:	bf00      	nop
 8008bfe:	3708      	adds	r7, #8
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	3b01      	subs	r3, #1
 8008c18:	2b02      	cmp	r3, #2
 8008c1a:	d80b      	bhi.n	8008c34 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	885b      	ldrh	r3, [r3, #2]
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d10c      	bne.n	8008c3e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 f8f3 	bl	8008e18 <USBD_CtlSendStatus>
      }
      break;
 8008c32:	e004      	b.n	8008c3e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008c34:	6839      	ldr	r1, [r7, #0]
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f840 	bl	8008cbc <USBD_CtlError>
      break;
 8008c3c:	e000      	b.n	8008c40 <USBD_ClrFeature+0x3c>
      break;
 8008c3e:	bf00      	nop
  }
}
 8008c40:	bf00      	nop
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	781a      	ldrb	r2, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	3301      	adds	r3, #1
 8008c62:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	781a      	ldrb	r2, [r3, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f7ff fa63 	bl	800813e <SWAPBYTE>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	3301      	adds	r3, #1
 8008c84:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f7ff fa56 	bl	800813e <SWAPBYTE>
 8008c92:	4603      	mov	r3, r0
 8008c94:	461a      	mov	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f7ff fa49 	bl	800813e <SWAPBYTE>
 8008cac:	4603      	mov	r3, r0
 8008cae:	461a      	mov	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	80da      	strh	r2, [r3, #6]
}
 8008cb4:	bf00      	nop
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cc6:	2180      	movs	r1, #128	; 0x80
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f003 f991 	bl	800bff0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008cce:	2100      	movs	r1, #0
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f003 f98d 	bl	800bff0 <USBD_LL_StallEP>
}
 8008cd6:	bf00      	nop
 8008cd8:	3708      	adds	r7, #8
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b086      	sub	sp, #24
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	60f8      	str	r0, [r7, #12]
 8008ce6:	60b9      	str	r1, [r7, #8]
 8008ce8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008cea:	2300      	movs	r3, #0
 8008cec:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d036      	beq.n	8008d62 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008cf8:	6938      	ldr	r0, [r7, #16]
 8008cfa:	f000 f836 	bl	8008d6a <USBD_GetLen>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	3301      	adds	r3, #1
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	005b      	lsls	r3, r3, #1
 8008d06:	b29a      	uxth	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008d0c:	7dfb      	ldrb	r3, [r7, #23]
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	4413      	add	r3, r2
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	7812      	ldrb	r2, [r2, #0]
 8008d16:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d18:	7dfb      	ldrb	r3, [r7, #23]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008d1e:	7dfb      	ldrb	r3, [r7, #23]
 8008d20:	68ba      	ldr	r2, [r7, #8]
 8008d22:	4413      	add	r3, r2
 8008d24:	2203      	movs	r2, #3
 8008d26:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d28:	7dfb      	ldrb	r3, [r7, #23]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008d2e:	e013      	b.n	8008d58 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008d30:	7dfb      	ldrb	r3, [r7, #23]
 8008d32:	68ba      	ldr	r2, [r7, #8]
 8008d34:	4413      	add	r3, r2
 8008d36:	693a      	ldr	r2, [r7, #16]
 8008d38:	7812      	ldrb	r2, [r2, #0]
 8008d3a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	613b      	str	r3, [r7, #16]
    idx++;
 8008d42:	7dfb      	ldrb	r3, [r7, #23]
 8008d44:	3301      	adds	r3, #1
 8008d46:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008d48:	7dfb      	ldrb	r3, [r7, #23]
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	2200      	movs	r2, #0
 8008d50:	701a      	strb	r2, [r3, #0]
    idx++;
 8008d52:	7dfb      	ldrb	r3, [r7, #23]
 8008d54:	3301      	adds	r3, #1
 8008d56:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1e7      	bne.n	8008d30 <USBD_GetString+0x52>
 8008d60:	e000      	b.n	8008d64 <USBD_GetString+0x86>
    return;
 8008d62:	bf00      	nop
  }
}
 8008d64:	3718      	adds	r7, #24
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008d6a:	b480      	push	{r7}
 8008d6c:	b085      	sub	sp, #20
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d72:	2300      	movs	r3, #0
 8008d74:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008d7a:	e005      	b.n	8008d88 <USBD_GetLen+0x1e>
  {
    len++;
 8008d7c:	7bfb      	ldrb	r3, [r7, #15]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	3301      	adds	r3, #1
 8008d86:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1f5      	bne.n	8008d7c <USBD_GetLen+0x12>
  }

  return len;
 8008d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3714      	adds	r7, #20
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr

08008d9e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b084      	sub	sp, #16
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	60f8      	str	r0, [r7, #12]
 8008da6:	60b9      	str	r1, [r7, #8]
 8008da8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2202      	movs	r2, #2
 8008dae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	f003 f99c 	bl	800c102 <USBD_LL_Transmit>

  return USBD_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	68ba      	ldr	r2, [r7, #8]
 8008de4:	2100      	movs	r1, #0
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f003 f98b 	bl	800c102 <USBD_LL_Transmit>

  return USBD_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b084      	sub	sp, #16
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	60f8      	str	r0, [r7, #12]
 8008dfe:	60b9      	str	r1, [r7, #8]
 8008e00:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	2100      	movs	r1, #0
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f003 f99b 	bl	800c144 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3710      	adds	r7, #16
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2204      	movs	r2, #4
 8008e24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e28:	2300      	movs	r3, #0
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f003 f967 	bl	800c102 <USBD_LL_Transmit>

  return USBD_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b082      	sub	sp, #8
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2205      	movs	r2, #5
 8008e4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e4e:	2300      	movs	r3, #0
 8008e50:	2200      	movs	r2, #0
 8008e52:	2100      	movs	r1, #0
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f003 f975 	bl	800c144 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e5a:	2300      	movs	r3, #0
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3708      	adds	r7, #8
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <__NVIC_SetPriority>:
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	6039      	str	r1, [r7, #0]
 8008e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	db0a      	blt.n	8008e8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	b2da      	uxtb	r2, r3
 8008e7c:	490c      	ldr	r1, [pc, #48]	; (8008eb0 <__NVIC_SetPriority+0x4c>)
 8008e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e82:	0112      	lsls	r2, r2, #4
 8008e84:	b2d2      	uxtb	r2, r2
 8008e86:	440b      	add	r3, r1
 8008e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008e8c:	e00a      	b.n	8008ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	b2da      	uxtb	r2, r3
 8008e92:	4908      	ldr	r1, [pc, #32]	; (8008eb4 <__NVIC_SetPriority+0x50>)
 8008e94:	79fb      	ldrb	r3, [r7, #7]
 8008e96:	f003 030f 	and.w	r3, r3, #15
 8008e9a:	3b04      	subs	r3, #4
 8008e9c:	0112      	lsls	r2, r2, #4
 8008e9e:	b2d2      	uxtb	r2, r2
 8008ea0:	440b      	add	r3, r1
 8008ea2:	761a      	strb	r2, [r3, #24]
}
 8008ea4:	bf00      	nop
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr
 8008eb0:	e000e100 	.word	0xe000e100
 8008eb4:	e000ed00 	.word	0xe000ed00

08008eb8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008ebc:	4b05      	ldr	r3, [pc, #20]	; (8008ed4 <SysTick_Handler+0x1c>)
 8008ebe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008ec0:	f001 fcfe 	bl	800a8c0 <xTaskGetSchedulerState>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d001      	beq.n	8008ece <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008eca:	f002 fae5 	bl	800b498 <xPortSysTickHandler>
  }
}
 8008ece:	bf00      	nop
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	e000e010 	.word	0xe000e010

08008ed8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008edc:	2100      	movs	r1, #0
 8008ede:	f06f 0004 	mvn.w	r0, #4
 8008ee2:	f7ff ffbf 	bl	8008e64 <__NVIC_SetPriority>
#endif
}
 8008ee6:	bf00      	nop
 8008ee8:	bd80      	pop	{r7, pc}
	...

08008eec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ef2:	f3ef 8305 	mrs	r3, IPSR
 8008ef6:	603b      	str	r3, [r7, #0]
  return(result);
 8008ef8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d003      	beq.n	8008f06 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008efe:	f06f 0305 	mvn.w	r3, #5
 8008f02:	607b      	str	r3, [r7, #4]
 8008f04:	e00c      	b.n	8008f20 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008f06:	4b0a      	ldr	r3, [pc, #40]	; (8008f30 <osKernelInitialize+0x44>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d105      	bne.n	8008f1a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008f0e:	4b08      	ldr	r3, [pc, #32]	; (8008f30 <osKernelInitialize+0x44>)
 8008f10:	2201      	movs	r2, #1
 8008f12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	607b      	str	r3, [r7, #4]
 8008f18:	e002      	b.n	8008f20 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f20:	687b      	ldr	r3, [r7, #4]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	370c      	adds	r7, #12
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	20000658 	.word	0x20000658

08008f34 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f3a:	f3ef 8305 	mrs	r3, IPSR
 8008f3e:	603b      	str	r3, [r7, #0]
  return(result);
 8008f40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d003      	beq.n	8008f4e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008f46:	f06f 0305 	mvn.w	r3, #5
 8008f4a:	607b      	str	r3, [r7, #4]
 8008f4c:	e010      	b.n	8008f70 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008f4e:	4b0b      	ldr	r3, [pc, #44]	; (8008f7c <osKernelStart+0x48>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d109      	bne.n	8008f6a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008f56:	f7ff ffbf 	bl	8008ed8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008f5a:	4b08      	ldr	r3, [pc, #32]	; (8008f7c <osKernelStart+0x48>)
 8008f5c:	2202      	movs	r2, #2
 8008f5e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008f60:	f001 f866 	bl	800a030 <vTaskStartScheduler>
      stat = osOK;
 8008f64:	2300      	movs	r3, #0
 8008f66:	607b      	str	r3, [r7, #4]
 8008f68:	e002      	b.n	8008f70 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f70:	687b      	ldr	r3, [r7, #4]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3708      	adds	r7, #8
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20000658 	.word	0x20000658

08008f80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b08e      	sub	sp, #56	; 0x38
 8008f84:	af04      	add	r7, sp, #16
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f90:	f3ef 8305 	mrs	r3, IPSR
 8008f94:	617b      	str	r3, [r7, #20]
  return(result);
 8008f96:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d17e      	bne.n	800909a <osThreadNew+0x11a>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d07b      	beq.n	800909a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008fa2:	2380      	movs	r3, #128	; 0x80
 8008fa4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008fa6:	2318      	movs	r3, #24
 8008fa8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008faa:	2300      	movs	r3, #0
 8008fac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008fae:	f04f 33ff 	mov.w	r3, #4294967295
 8008fb2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d045      	beq.n	8009046 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d002      	beq.n	8008fc8 <osThreadNew+0x48>
        name = attr->name;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d002      	beq.n	8008fd6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	699b      	ldr	r3, [r3, #24]
 8008fd4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d008      	beq.n	8008fee <osThreadNew+0x6e>
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	2b38      	cmp	r3, #56	; 0x38
 8008fe0:	d805      	bhi.n	8008fee <osThreadNew+0x6e>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	f003 0301 	and.w	r3, r3, #1
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d001      	beq.n	8008ff2 <osThreadNew+0x72>
        return (NULL);
 8008fee:	2300      	movs	r3, #0
 8008ff0:	e054      	b.n	800909c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	695b      	ldr	r3, [r3, #20]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d003      	beq.n	8009002 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	695b      	ldr	r3, [r3, #20]
 8008ffe:	089b      	lsrs	r3, r3, #2
 8009000:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00e      	beq.n	8009028 <osThreadNew+0xa8>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	2b5b      	cmp	r3, #91	; 0x5b
 8009010:	d90a      	bls.n	8009028 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009016:	2b00      	cmp	r3, #0
 8009018:	d006      	beq.n	8009028 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	695b      	ldr	r3, [r3, #20]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d002      	beq.n	8009028 <osThreadNew+0xa8>
        mem = 1;
 8009022:	2301      	movs	r3, #1
 8009024:	61bb      	str	r3, [r7, #24]
 8009026:	e010      	b.n	800904a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d10c      	bne.n	800904a <osThreadNew+0xca>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d108      	bne.n	800904a <osThreadNew+0xca>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d104      	bne.n	800904a <osThreadNew+0xca>
          mem = 0;
 8009040:	2300      	movs	r3, #0
 8009042:	61bb      	str	r3, [r7, #24]
 8009044:	e001      	b.n	800904a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009046:	2300      	movs	r3, #0
 8009048:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	2b01      	cmp	r3, #1
 800904e:	d110      	bne.n	8009072 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009058:	9202      	str	r2, [sp, #8]
 800905a:	9301      	str	r3, [sp, #4]
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	9300      	str	r3, [sp, #0]
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	6a3a      	ldr	r2, [r7, #32]
 8009064:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	f000 fe0c 	bl	8009c84 <xTaskCreateStatic>
 800906c:	4603      	mov	r3, r0
 800906e:	613b      	str	r3, [r7, #16]
 8009070:	e013      	b.n	800909a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d110      	bne.n	800909a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009078:	6a3b      	ldr	r3, [r7, #32]
 800907a:	b29a      	uxth	r2, r3
 800907c:	f107 0310 	add.w	r3, r7, #16
 8009080:	9301      	str	r3, [sp, #4]
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f000 fe57 	bl	8009d3e <xTaskCreate>
 8009090:	4603      	mov	r3, r0
 8009092:	2b01      	cmp	r3, #1
 8009094:	d001      	beq.n	800909a <osThreadNew+0x11a>
            hTask = NULL;
 8009096:	2300      	movs	r3, #0
 8009098:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800909a:	693b      	ldr	r3, [r7, #16]
}
 800909c:	4618      	mov	r0, r3
 800909e:	3728      	adds	r7, #40	; 0x28
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090ac:	f3ef 8305 	mrs	r3, IPSR
 80090b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80090b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d003      	beq.n	80090c0 <osDelay+0x1c>
    stat = osErrorISR;
 80090b8:	f06f 0305 	mvn.w	r3, #5
 80090bc:	60fb      	str	r3, [r7, #12]
 80090be:	e007      	b.n	80090d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d002      	beq.n	80090d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 ff7c 	bl	8009fc8 <vTaskDelay>
    }
  }

  return (stat);
 80090d0:	68fb      	ldr	r3, [r7, #12]
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
	...

080090dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	4a07      	ldr	r2, [pc, #28]	; (8009108 <vApplicationGetIdleTaskMemory+0x2c>)
 80090ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	4a06      	ldr	r2, [pc, #24]	; (800910c <vApplicationGetIdleTaskMemory+0x30>)
 80090f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2280      	movs	r2, #128	; 0x80
 80090f8:	601a      	str	r2, [r3, #0]
}
 80090fa:	bf00      	nop
 80090fc:	3714      	adds	r7, #20
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	2000065c 	.word	0x2000065c
 800910c:	200006b8 	.word	0x200006b8

08009110 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009110:	b480      	push	{r7}
 8009112:	b085      	sub	sp, #20
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	4a07      	ldr	r2, [pc, #28]	; (800913c <vApplicationGetTimerTaskMemory+0x2c>)
 8009120:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	4a06      	ldr	r2, [pc, #24]	; (8009140 <vApplicationGetTimerTaskMemory+0x30>)
 8009126:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800912e:	601a      	str	r2, [r3, #0]
}
 8009130:	bf00      	nop
 8009132:	3714      	adds	r7, #20
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	200008b8 	.word	0x200008b8
 8009140:	20000914 	.word	0x20000914

08009144 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f103 0208 	add.w	r2, r3, #8
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f04f 32ff 	mov.w	r2, #4294967295
 800915c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f103 0208 	add.w	r2, r3, #8
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f103 0208 	add.w	r2, r3, #8
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009178:	bf00      	nop
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009192:	bf00      	nop
 8009194:	370c      	adds	r7, #12
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr

0800919e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800919e:	b480      	push	{r7}
 80091a0:	b085      	sub	sp, #20
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	689a      	ldr	r2, [r3, #8]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	683a      	ldr	r2, [r7, #0]
 80091c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	683a      	ldr	r2, [r7, #0]
 80091c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	1c5a      	adds	r2, r3, #1
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	601a      	str	r2, [r3, #0]
}
 80091da:	bf00      	nop
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091e6:	b480      	push	{r7}
 80091e8:	b085      	sub	sp, #20
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091fc:	d103      	bne.n	8009206 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	60fb      	str	r3, [r7, #12]
 8009204:	e00c      	b.n	8009220 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	3308      	adds	r3, #8
 800920a:	60fb      	str	r3, [r7, #12]
 800920c:	e002      	b.n	8009214 <vListInsert+0x2e>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	60fb      	str	r3, [r7, #12]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	429a      	cmp	r2, r3
 800921e:	d2f6      	bcs.n	800920e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	683a      	ldr	r2, [r7, #0]
 800922e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	683a      	ldr	r2, [r7, #0]
 800923a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	1c5a      	adds	r2, r3, #1
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	601a      	str	r2, [r3, #0]
}
 800924c:	bf00      	nop
 800924e:	3714      	adds	r7, #20
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	691b      	ldr	r3, [r3, #16]
 8009264:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	6892      	ldr	r2, [r2, #8]
 800926e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	6852      	ldr	r2, [r2, #4]
 8009278:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	429a      	cmp	r2, r3
 8009282:	d103      	bne.n	800928c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	689a      	ldr	r2, [r3, #8]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	1e5a      	subs	r2, r3, #1
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3714      	adds	r7, #20
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d10a      	bne.n	80092d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80092c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c4:	f383 8811 	msr	BASEPRI, r3
 80092c8:	f3bf 8f6f 	isb	sy
 80092cc:	f3bf 8f4f 	dsb	sy
 80092d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80092d2:	bf00      	nop
 80092d4:	e7fe      	b.n	80092d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80092d6:	f002 f84d 	bl	800b374 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092e2:	68f9      	ldr	r1, [r7, #12]
 80092e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80092e6:	fb01 f303 	mul.w	r3, r1, r3
 80092ea:	441a      	add	r2, r3
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2200      	movs	r2, #0
 80092f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009306:	3b01      	subs	r3, #1
 8009308:	68f9      	ldr	r1, [r7, #12]
 800930a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800930c:	fb01 f303 	mul.w	r3, r1, r3
 8009310:	441a      	add	r2, r3
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	22ff      	movs	r2, #255	; 0xff
 800931a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	22ff      	movs	r2, #255	; 0xff
 8009322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d114      	bne.n	8009356 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d01a      	beq.n	800936a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	3310      	adds	r3, #16
 8009338:	4618      	mov	r0, r3
 800933a:	f001 f903 	bl	800a544 <xTaskRemoveFromEventList>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d012      	beq.n	800936a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009344:	4b0c      	ldr	r3, [pc, #48]	; (8009378 <xQueueGenericReset+0xcc>)
 8009346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800934a:	601a      	str	r2, [r3, #0]
 800934c:	f3bf 8f4f 	dsb	sy
 8009350:	f3bf 8f6f 	isb	sy
 8009354:	e009      	b.n	800936a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	3310      	adds	r3, #16
 800935a:	4618      	mov	r0, r3
 800935c:	f7ff fef2 	bl	8009144 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	3324      	adds	r3, #36	; 0x24
 8009364:	4618      	mov	r0, r3
 8009366:	f7ff feed 	bl	8009144 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800936a:	f002 f833 	bl	800b3d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800936e:	2301      	movs	r3, #1
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	e000ed04 	.word	0xe000ed04

0800937c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800937c:	b580      	push	{r7, lr}
 800937e:	b08e      	sub	sp, #56	; 0x38
 8009380:	af02      	add	r7, sp, #8
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	607a      	str	r2, [r7, #4]
 8009388:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10a      	bne.n	80093a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009394:	f383 8811 	msr	BASEPRI, r3
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80093a2:	bf00      	nop
 80093a4:	e7fe      	b.n	80093a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10a      	bne.n	80093c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80093ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b0:	f383 8811 	msr	BASEPRI, r3
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	f3bf 8f4f 	dsb	sy
 80093bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80093be:	bf00      	nop
 80093c0:	e7fe      	b.n	80093c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d002      	beq.n	80093ce <xQueueGenericCreateStatic+0x52>
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <xQueueGenericCreateStatic+0x56>
 80093ce:	2301      	movs	r3, #1
 80093d0:	e000      	b.n	80093d4 <xQueueGenericCreateStatic+0x58>
 80093d2:	2300      	movs	r3, #0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d10a      	bne.n	80093ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80093d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093dc:	f383 8811 	msr	BASEPRI, r3
 80093e0:	f3bf 8f6f 	isb	sy
 80093e4:	f3bf 8f4f 	dsb	sy
 80093e8:	623b      	str	r3, [r7, #32]
}
 80093ea:	bf00      	nop
 80093ec:	e7fe      	b.n	80093ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d102      	bne.n	80093fa <xQueueGenericCreateStatic+0x7e>
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d101      	bne.n	80093fe <xQueueGenericCreateStatic+0x82>
 80093fa:	2301      	movs	r3, #1
 80093fc:	e000      	b.n	8009400 <xQueueGenericCreateStatic+0x84>
 80093fe:	2300      	movs	r3, #0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d10a      	bne.n	800941a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009408:	f383 8811 	msr	BASEPRI, r3
 800940c:	f3bf 8f6f 	isb	sy
 8009410:	f3bf 8f4f 	dsb	sy
 8009414:	61fb      	str	r3, [r7, #28]
}
 8009416:	bf00      	nop
 8009418:	e7fe      	b.n	8009418 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800941a:	2350      	movs	r3, #80	; 0x50
 800941c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	2b50      	cmp	r3, #80	; 0x50
 8009422:	d00a      	beq.n	800943a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	61bb      	str	r3, [r7, #24]
}
 8009436:	bf00      	nop
 8009438:	e7fe      	b.n	8009438 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800943a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00d      	beq.n	8009462 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009448:	2201      	movs	r2, #1
 800944a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800944e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009454:	9300      	str	r3, [sp, #0]
 8009456:	4613      	mov	r3, r2
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	68b9      	ldr	r1, [r7, #8]
 800945c:	68f8      	ldr	r0, [r7, #12]
 800945e:	f000 f805 	bl	800946c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009464:	4618      	mov	r0, r3
 8009466:	3730      	adds	r7, #48	; 0x30
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	607a      	str	r2, [r7, #4]
 8009478:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d103      	bne.n	8009488 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	69ba      	ldr	r2, [r7, #24]
 8009484:	601a      	str	r2, [r3, #0]
 8009486:	e002      	b.n	800948e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800949a:	2101      	movs	r1, #1
 800949c:	69b8      	ldr	r0, [r7, #24]
 800949e:	f7ff ff05 	bl	80092ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	78fa      	ldrb	r2, [r7, #3]
 80094a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80094aa:	bf00      	nop
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
	...

080094b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b08e      	sub	sp, #56	; 0x38
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	607a      	str	r2, [r7, #4]
 80094c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80094c2:	2300      	movs	r3, #0
 80094c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80094ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d10a      	bne.n	80094e6 <xQueueGenericSend+0x32>
	__asm volatile
 80094d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d4:	f383 8811 	msr	BASEPRI, r3
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	f3bf 8f4f 	dsb	sy
 80094e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80094e2:	bf00      	nop
 80094e4:	e7fe      	b.n	80094e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d103      	bne.n	80094f4 <xQueueGenericSend+0x40>
 80094ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d101      	bne.n	80094f8 <xQueueGenericSend+0x44>
 80094f4:	2301      	movs	r3, #1
 80094f6:	e000      	b.n	80094fa <xQueueGenericSend+0x46>
 80094f8:	2300      	movs	r3, #0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d10a      	bne.n	8009514 <xQueueGenericSend+0x60>
	__asm volatile
 80094fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009502:	f383 8811 	msr	BASEPRI, r3
 8009506:	f3bf 8f6f 	isb	sy
 800950a:	f3bf 8f4f 	dsb	sy
 800950e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009510:	bf00      	nop
 8009512:	e7fe      	b.n	8009512 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	2b02      	cmp	r3, #2
 8009518:	d103      	bne.n	8009522 <xQueueGenericSend+0x6e>
 800951a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800951e:	2b01      	cmp	r3, #1
 8009520:	d101      	bne.n	8009526 <xQueueGenericSend+0x72>
 8009522:	2301      	movs	r3, #1
 8009524:	e000      	b.n	8009528 <xQueueGenericSend+0x74>
 8009526:	2300      	movs	r3, #0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10a      	bne.n	8009542 <xQueueGenericSend+0x8e>
	__asm volatile
 800952c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009530:	f383 8811 	msr	BASEPRI, r3
 8009534:	f3bf 8f6f 	isb	sy
 8009538:	f3bf 8f4f 	dsb	sy
 800953c:	623b      	str	r3, [r7, #32]
}
 800953e:	bf00      	nop
 8009540:	e7fe      	b.n	8009540 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009542:	f001 f9bd 	bl	800a8c0 <xTaskGetSchedulerState>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d102      	bne.n	8009552 <xQueueGenericSend+0x9e>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d101      	bne.n	8009556 <xQueueGenericSend+0xa2>
 8009552:	2301      	movs	r3, #1
 8009554:	e000      	b.n	8009558 <xQueueGenericSend+0xa4>
 8009556:	2300      	movs	r3, #0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d10a      	bne.n	8009572 <xQueueGenericSend+0xbe>
	__asm volatile
 800955c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009560:	f383 8811 	msr	BASEPRI, r3
 8009564:	f3bf 8f6f 	isb	sy
 8009568:	f3bf 8f4f 	dsb	sy
 800956c:	61fb      	str	r3, [r7, #28]
}
 800956e:	bf00      	nop
 8009570:	e7fe      	b.n	8009570 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009572:	f001 feff 	bl	800b374 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800957a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800957e:	429a      	cmp	r2, r3
 8009580:	d302      	bcc.n	8009588 <xQueueGenericSend+0xd4>
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	2b02      	cmp	r3, #2
 8009586:	d129      	bne.n	80095dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	68b9      	ldr	r1, [r7, #8]
 800958c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800958e:	f000 fa0b 	bl	80099a8 <prvCopyDataToQueue>
 8009592:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009598:	2b00      	cmp	r3, #0
 800959a:	d010      	beq.n	80095be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800959c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959e:	3324      	adds	r3, #36	; 0x24
 80095a0:	4618      	mov	r0, r3
 80095a2:	f000 ffcf 	bl	800a544 <xTaskRemoveFromEventList>
 80095a6:	4603      	mov	r3, r0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d013      	beq.n	80095d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80095ac:	4b3f      	ldr	r3, [pc, #252]	; (80096ac <xQueueGenericSend+0x1f8>)
 80095ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095b2:	601a      	str	r2, [r3, #0]
 80095b4:	f3bf 8f4f 	dsb	sy
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	e00a      	b.n	80095d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80095be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d007      	beq.n	80095d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80095c4:	4b39      	ldr	r3, [pc, #228]	; (80096ac <xQueueGenericSend+0x1f8>)
 80095c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ca:	601a      	str	r2, [r3, #0]
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80095d4:	f001 fefe 	bl	800b3d4 <vPortExitCritical>
				return pdPASS;
 80095d8:	2301      	movs	r3, #1
 80095da:	e063      	b.n	80096a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d103      	bne.n	80095ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80095e2:	f001 fef7 	bl	800b3d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80095e6:	2300      	movs	r3, #0
 80095e8:	e05c      	b.n	80096a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d106      	bne.n	80095fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095f0:	f107 0314 	add.w	r3, r7, #20
 80095f4:	4618      	mov	r0, r3
 80095f6:	f001 f809 	bl	800a60c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095fa:	2301      	movs	r3, #1
 80095fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095fe:	f001 fee9 	bl	800b3d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009602:	f000 fd7b 	bl	800a0fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009606:	f001 feb5 	bl	800b374 <vPortEnterCritical>
 800960a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009610:	b25b      	sxtb	r3, r3
 8009612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009616:	d103      	bne.n	8009620 <xQueueGenericSend+0x16c>
 8009618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961a:	2200      	movs	r2, #0
 800961c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009622:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009626:	b25b      	sxtb	r3, r3
 8009628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800962c:	d103      	bne.n	8009636 <xQueueGenericSend+0x182>
 800962e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009630:	2200      	movs	r2, #0
 8009632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009636:	f001 fecd 	bl	800b3d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800963a:	1d3a      	adds	r2, r7, #4
 800963c:	f107 0314 	add.w	r3, r7, #20
 8009640:	4611      	mov	r1, r2
 8009642:	4618      	mov	r0, r3
 8009644:	f000 fff8 	bl	800a638 <xTaskCheckForTimeOut>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d124      	bne.n	8009698 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800964e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009650:	f000 faa2 	bl	8009b98 <prvIsQueueFull>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d018      	beq.n	800968c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800965a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965c:	3310      	adds	r3, #16
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	4611      	mov	r1, r2
 8009662:	4618      	mov	r0, r3
 8009664:	f000 ff1e 	bl	800a4a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800966a:	f000 fa2d 	bl	8009ac8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800966e:	f000 fd53 	bl	800a118 <xTaskResumeAll>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	f47f af7c 	bne.w	8009572 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800967a:	4b0c      	ldr	r3, [pc, #48]	; (80096ac <xQueueGenericSend+0x1f8>)
 800967c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009680:	601a      	str	r2, [r3, #0]
 8009682:	f3bf 8f4f 	dsb	sy
 8009686:	f3bf 8f6f 	isb	sy
 800968a:	e772      	b.n	8009572 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800968c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800968e:	f000 fa1b 	bl	8009ac8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009692:	f000 fd41 	bl	800a118 <xTaskResumeAll>
 8009696:	e76c      	b.n	8009572 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800969a:	f000 fa15 	bl	8009ac8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800969e:	f000 fd3b 	bl	800a118 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80096a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3738      	adds	r7, #56	; 0x38
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	e000ed04 	.word	0xe000ed04

080096b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b090      	sub	sp, #64	; 0x40
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	607a      	str	r2, [r7, #4]
 80096bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80096c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d10a      	bne.n	80096de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80096c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096cc:	f383 8811 	msr	BASEPRI, r3
 80096d0:	f3bf 8f6f 	isb	sy
 80096d4:	f3bf 8f4f 	dsb	sy
 80096d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80096da:	bf00      	nop
 80096dc:	e7fe      	b.n	80096dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d103      	bne.n	80096ec <xQueueGenericSendFromISR+0x3c>
 80096e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d101      	bne.n	80096f0 <xQueueGenericSendFromISR+0x40>
 80096ec:	2301      	movs	r3, #1
 80096ee:	e000      	b.n	80096f2 <xQueueGenericSendFromISR+0x42>
 80096f0:	2300      	movs	r3, #0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d10a      	bne.n	800970c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80096f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fa:	f383 8811 	msr	BASEPRI, r3
 80096fe:	f3bf 8f6f 	isb	sy
 8009702:	f3bf 8f4f 	dsb	sy
 8009706:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009708:	bf00      	nop
 800970a:	e7fe      	b.n	800970a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	2b02      	cmp	r3, #2
 8009710:	d103      	bne.n	800971a <xQueueGenericSendFromISR+0x6a>
 8009712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009716:	2b01      	cmp	r3, #1
 8009718:	d101      	bne.n	800971e <xQueueGenericSendFromISR+0x6e>
 800971a:	2301      	movs	r3, #1
 800971c:	e000      	b.n	8009720 <xQueueGenericSendFromISR+0x70>
 800971e:	2300      	movs	r3, #0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d10a      	bne.n	800973a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009728:	f383 8811 	msr	BASEPRI, r3
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	f3bf 8f4f 	dsb	sy
 8009734:	623b      	str	r3, [r7, #32]
}
 8009736:	bf00      	nop
 8009738:	e7fe      	b.n	8009738 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800973a:	f001 fefd 	bl	800b538 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800973e:	f3ef 8211 	mrs	r2, BASEPRI
 8009742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009746:	f383 8811 	msr	BASEPRI, r3
 800974a:	f3bf 8f6f 	isb	sy
 800974e:	f3bf 8f4f 	dsb	sy
 8009752:	61fa      	str	r2, [r7, #28]
 8009754:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009756:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009758:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800975a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800975e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009762:	429a      	cmp	r2, r3
 8009764:	d302      	bcc.n	800976c <xQueueGenericSendFromISR+0xbc>
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	2b02      	cmp	r3, #2
 800976a:	d12f      	bne.n	80097cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800976c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800977c:	683a      	ldr	r2, [r7, #0]
 800977e:	68b9      	ldr	r1, [r7, #8]
 8009780:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009782:	f000 f911 	bl	80099a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009786:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800978a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800978e:	d112      	bne.n	80097b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009794:	2b00      	cmp	r3, #0
 8009796:	d016      	beq.n	80097c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979a:	3324      	adds	r3, #36	; 0x24
 800979c:	4618      	mov	r0, r3
 800979e:	f000 fed1 	bl	800a544 <xTaskRemoveFromEventList>
 80097a2:	4603      	mov	r3, r0
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00e      	beq.n	80097c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00b      	beq.n	80097c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2201      	movs	r2, #1
 80097b2:	601a      	str	r2, [r3, #0]
 80097b4:	e007      	b.n	80097c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80097b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80097ba:	3301      	adds	r3, #1
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	b25a      	sxtb	r2, r3
 80097c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80097c6:	2301      	movs	r3, #1
 80097c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80097ca:	e001      	b.n	80097d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80097cc:	2300      	movs	r3, #0
 80097ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80097da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3740      	adds	r7, #64	; 0x40
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
	...

080097e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b08c      	sub	sp, #48	; 0x30
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80097f4:	2300      	movs	r3, #0
 80097f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80097fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d10a      	bne.n	8009818 <xQueueReceive+0x30>
	__asm volatile
 8009802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009806:	f383 8811 	msr	BASEPRI, r3
 800980a:	f3bf 8f6f 	isb	sy
 800980e:	f3bf 8f4f 	dsb	sy
 8009812:	623b      	str	r3, [r7, #32]
}
 8009814:	bf00      	nop
 8009816:	e7fe      	b.n	8009816 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d103      	bne.n	8009826 <xQueueReceive+0x3e>
 800981e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009822:	2b00      	cmp	r3, #0
 8009824:	d101      	bne.n	800982a <xQueueReceive+0x42>
 8009826:	2301      	movs	r3, #1
 8009828:	e000      	b.n	800982c <xQueueReceive+0x44>
 800982a:	2300      	movs	r3, #0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d10a      	bne.n	8009846 <xQueueReceive+0x5e>
	__asm volatile
 8009830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009834:	f383 8811 	msr	BASEPRI, r3
 8009838:	f3bf 8f6f 	isb	sy
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	61fb      	str	r3, [r7, #28]
}
 8009842:	bf00      	nop
 8009844:	e7fe      	b.n	8009844 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009846:	f001 f83b 	bl	800a8c0 <xTaskGetSchedulerState>
 800984a:	4603      	mov	r3, r0
 800984c:	2b00      	cmp	r3, #0
 800984e:	d102      	bne.n	8009856 <xQueueReceive+0x6e>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d101      	bne.n	800985a <xQueueReceive+0x72>
 8009856:	2301      	movs	r3, #1
 8009858:	e000      	b.n	800985c <xQueueReceive+0x74>
 800985a:	2300      	movs	r3, #0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d10a      	bne.n	8009876 <xQueueReceive+0x8e>
	__asm volatile
 8009860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009864:	f383 8811 	msr	BASEPRI, r3
 8009868:	f3bf 8f6f 	isb	sy
 800986c:	f3bf 8f4f 	dsb	sy
 8009870:	61bb      	str	r3, [r7, #24]
}
 8009872:	bf00      	nop
 8009874:	e7fe      	b.n	8009874 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009876:	f001 fd7d 	bl	800b374 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800987a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800987e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009882:	2b00      	cmp	r3, #0
 8009884:	d01f      	beq.n	80098c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009886:	68b9      	ldr	r1, [r7, #8]
 8009888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800988a:	f000 f8f7 	bl	8009a7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800988e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009890:	1e5a      	subs	r2, r3, #1
 8009892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009894:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00f      	beq.n	80098be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800989e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a0:	3310      	adds	r3, #16
 80098a2:	4618      	mov	r0, r3
 80098a4:	f000 fe4e 	bl	800a544 <xTaskRemoveFromEventList>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d007      	beq.n	80098be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80098ae:	4b3d      	ldr	r3, [pc, #244]	; (80099a4 <xQueueReceive+0x1bc>)
 80098b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098b4:	601a      	str	r2, [r3, #0]
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80098be:	f001 fd89 	bl	800b3d4 <vPortExitCritical>
				return pdPASS;
 80098c2:	2301      	movs	r3, #1
 80098c4:	e069      	b.n	800999a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d103      	bne.n	80098d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80098cc:	f001 fd82 	bl	800b3d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80098d0:	2300      	movs	r3, #0
 80098d2:	e062      	b.n	800999a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80098d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d106      	bne.n	80098e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80098da:	f107 0310 	add.w	r3, r7, #16
 80098de:	4618      	mov	r0, r3
 80098e0:	f000 fe94 	bl	800a60c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80098e4:	2301      	movs	r3, #1
 80098e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80098e8:	f001 fd74 	bl	800b3d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80098ec:	f000 fc06 	bl	800a0fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80098f0:	f001 fd40 	bl	800b374 <vPortEnterCritical>
 80098f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098fa:	b25b      	sxtb	r3, r3
 80098fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009900:	d103      	bne.n	800990a <xQueueReceive+0x122>
 8009902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009904:	2200      	movs	r2, #0
 8009906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800990a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009910:	b25b      	sxtb	r3, r3
 8009912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009916:	d103      	bne.n	8009920 <xQueueReceive+0x138>
 8009918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991a:	2200      	movs	r2, #0
 800991c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009920:	f001 fd58 	bl	800b3d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009924:	1d3a      	adds	r2, r7, #4
 8009926:	f107 0310 	add.w	r3, r7, #16
 800992a:	4611      	mov	r1, r2
 800992c:	4618      	mov	r0, r3
 800992e:	f000 fe83 	bl	800a638 <xTaskCheckForTimeOut>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d123      	bne.n	8009980 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800993a:	f000 f917 	bl	8009b6c <prvIsQueueEmpty>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d017      	beq.n	8009974 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009946:	3324      	adds	r3, #36	; 0x24
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	4611      	mov	r1, r2
 800994c:	4618      	mov	r0, r3
 800994e:	f000 fda9 	bl	800a4a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009954:	f000 f8b8 	bl	8009ac8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009958:	f000 fbde 	bl	800a118 <xTaskResumeAll>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d189      	bne.n	8009876 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009962:	4b10      	ldr	r3, [pc, #64]	; (80099a4 <xQueueReceive+0x1bc>)
 8009964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009968:	601a      	str	r2, [r3, #0]
 800996a:	f3bf 8f4f 	dsb	sy
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	e780      	b.n	8009876 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009976:	f000 f8a7 	bl	8009ac8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800997a:	f000 fbcd 	bl	800a118 <xTaskResumeAll>
 800997e:	e77a      	b.n	8009876 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009982:	f000 f8a1 	bl	8009ac8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009986:	f000 fbc7 	bl	800a118 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800998a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800998c:	f000 f8ee 	bl	8009b6c <prvIsQueueEmpty>
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	f43f af6f 	beq.w	8009876 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009998:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800999a:	4618      	mov	r0, r3
 800999c:	3730      	adds	r7, #48	; 0x30
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	e000ed04 	.word	0xe000ed04

080099a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b086      	sub	sp, #24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80099b4:	2300      	movs	r3, #0
 80099b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d10d      	bne.n	80099e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d14d      	bne.n	8009a6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	4618      	mov	r0, r3
 80099d4:	f000 ff92 	bl	800a8fc <xTaskPriorityDisinherit>
 80099d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2200      	movs	r2, #0
 80099de:	609a      	str	r2, [r3, #8]
 80099e0:	e043      	b.n	8009a6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d119      	bne.n	8009a1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6858      	ldr	r0, [r3, #4]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f0:	461a      	mov	r2, r3
 80099f2:	68b9      	ldr	r1, [r7, #8]
 80099f4:	f008 fd78 	bl	80124e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	685a      	ldr	r2, [r3, #4]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a00:	441a      	add	r2, r3
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	685a      	ldr	r2, [r3, #4]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d32b      	bcc.n	8009a6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	605a      	str	r2, [r3, #4]
 8009a1a:	e026      	b.n	8009a6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	68d8      	ldr	r0, [r3, #12]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a24:	461a      	mov	r2, r3
 8009a26:	68b9      	ldr	r1, [r7, #8]
 8009a28:	f008 fd5e 	bl	80124e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	68da      	ldr	r2, [r3, #12]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a34:	425b      	negs	r3, r3
 8009a36:	441a      	add	r2, r3
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	68da      	ldr	r2, [r3, #12]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d207      	bcs.n	8009a58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	689a      	ldr	r2, [r3, #8]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a50:	425b      	negs	r3, r3
 8009a52:	441a      	add	r2, r3
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2b02      	cmp	r3, #2
 8009a5c:	d105      	bne.n	8009a6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d002      	beq.n	8009a6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	3b01      	subs	r3, #1
 8009a68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	1c5a      	adds	r2, r3, #1
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009a72:	697b      	ldr	r3, [r7, #20]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3718      	adds	r7, #24
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d018      	beq.n	8009ac0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	68da      	ldr	r2, [r3, #12]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a96:	441a      	add	r2, r3
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	68da      	ldr	r2, [r3, #12]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d303      	bcc.n	8009ab0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	68d9      	ldr	r1, [r3, #12]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab8:	461a      	mov	r2, r3
 8009aba:	6838      	ldr	r0, [r7, #0]
 8009abc:	f008 fd14 	bl	80124e8 <memcpy>
	}
}
 8009ac0:	bf00      	nop
 8009ac2:	3708      	adds	r7, #8
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009ad0:	f001 fc50 	bl	800b374 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ada:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009adc:	e011      	b.n	8009b02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d012      	beq.n	8009b0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	3324      	adds	r3, #36	; 0x24
 8009aea:	4618      	mov	r0, r3
 8009aec:	f000 fd2a 	bl	800a544 <xTaskRemoveFromEventList>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d001      	beq.n	8009afa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009af6:	f000 fe01 	bl	800a6fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009afa:	7bfb      	ldrb	r3, [r7, #15]
 8009afc:	3b01      	subs	r3, #1
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	dce9      	bgt.n	8009ade <prvUnlockQueue+0x16>
 8009b0a:	e000      	b.n	8009b0e <prvUnlockQueue+0x46>
					break;
 8009b0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	22ff      	movs	r2, #255	; 0xff
 8009b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009b16:	f001 fc5d 	bl	800b3d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009b1a:	f001 fc2b 	bl	800b374 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b26:	e011      	b.n	8009b4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	691b      	ldr	r3, [r3, #16]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d012      	beq.n	8009b56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	3310      	adds	r3, #16
 8009b34:	4618      	mov	r0, r3
 8009b36:	f000 fd05 	bl	800a544 <xTaskRemoveFromEventList>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d001      	beq.n	8009b44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b40:	f000 fddc 	bl	800a6fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b44:	7bbb      	ldrb	r3, [r7, #14]
 8009b46:	3b01      	subs	r3, #1
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	dce9      	bgt.n	8009b28 <prvUnlockQueue+0x60>
 8009b54:	e000      	b.n	8009b58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009b56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	22ff      	movs	r2, #255	; 0xff
 8009b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009b60:	f001 fc38 	bl	800b3d4 <vPortExitCritical>
}
 8009b64:	bf00      	nop
 8009b66:	3710      	adds	r7, #16
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b74:	f001 fbfe 	bl	800b374 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d102      	bne.n	8009b86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009b80:	2301      	movs	r3, #1
 8009b82:	60fb      	str	r3, [r7, #12]
 8009b84:	e001      	b.n	8009b8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009b86:	2300      	movs	r3, #0
 8009b88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b8a:	f001 fc23 	bl	800b3d4 <vPortExitCritical>

	return xReturn;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3710      	adds	r7, #16
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ba0:	f001 fbe8 	bl	800b374 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d102      	bne.n	8009bb6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	60fb      	str	r3, [r7, #12]
 8009bb4:	e001      	b.n	8009bba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bba:	f001 fc0b 	bl	800b3d4 <vPortExitCritical>

	return xReturn;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	60fb      	str	r3, [r7, #12]
 8009bd6:	e014      	b.n	8009c02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009bd8:	4a0f      	ldr	r2, [pc, #60]	; (8009c18 <vQueueAddToRegistry+0x50>)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d10b      	bne.n	8009bfc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009be4:	490c      	ldr	r1, [pc, #48]	; (8009c18 <vQueueAddToRegistry+0x50>)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	683a      	ldr	r2, [r7, #0]
 8009bea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009bee:	4a0a      	ldr	r2, [pc, #40]	; (8009c18 <vQueueAddToRegistry+0x50>)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	00db      	lsls	r3, r3, #3
 8009bf4:	4413      	add	r3, r2
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009bfa:	e006      	b.n	8009c0a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	60fb      	str	r3, [r7, #12]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2b07      	cmp	r3, #7
 8009c06:	d9e7      	bls.n	8009bd8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009c08:	bf00      	nop
 8009c0a:	bf00      	nop
 8009c0c:	3714      	adds	r7, #20
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop
 8009c18:	20005038 	.word	0x20005038

08009c1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b086      	sub	sp, #24
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	60f8      	str	r0, [r7, #12]
 8009c24:	60b9      	str	r1, [r7, #8]
 8009c26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009c2c:	f001 fba2 	bl	800b374 <vPortEnterCritical>
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c36:	b25b      	sxtb	r3, r3
 8009c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c3c:	d103      	bne.n	8009c46 <vQueueWaitForMessageRestricted+0x2a>
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	2200      	movs	r2, #0
 8009c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c4c:	b25b      	sxtb	r3, r3
 8009c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c52:	d103      	bne.n	8009c5c <vQueueWaitForMessageRestricted+0x40>
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c5c:	f001 fbba 	bl	800b3d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d106      	bne.n	8009c76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	3324      	adds	r3, #36	; 0x24
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	68b9      	ldr	r1, [r7, #8]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f000 fc3b 	bl	800a4ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009c76:	6978      	ldr	r0, [r7, #20]
 8009c78:	f7ff ff26 	bl	8009ac8 <prvUnlockQueue>
	}
 8009c7c:	bf00      	nop
 8009c7e:	3718      	adds	r7, #24
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b08e      	sub	sp, #56	; 0x38
 8009c88:	af04      	add	r7, sp, #16
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	607a      	str	r2, [r7, #4]
 8009c90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d10a      	bne.n	8009cae <xTaskCreateStatic+0x2a>
	__asm volatile
 8009c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9c:	f383 8811 	msr	BASEPRI, r3
 8009ca0:	f3bf 8f6f 	isb	sy
 8009ca4:	f3bf 8f4f 	dsb	sy
 8009ca8:	623b      	str	r3, [r7, #32]
}
 8009caa:	bf00      	nop
 8009cac:	e7fe      	b.n	8009cac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d10a      	bne.n	8009cca <xTaskCreateStatic+0x46>
	__asm volatile
 8009cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb8:	f383 8811 	msr	BASEPRI, r3
 8009cbc:	f3bf 8f6f 	isb	sy
 8009cc0:	f3bf 8f4f 	dsb	sy
 8009cc4:	61fb      	str	r3, [r7, #28]
}
 8009cc6:	bf00      	nop
 8009cc8:	e7fe      	b.n	8009cc8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009cca:	235c      	movs	r3, #92	; 0x5c
 8009ccc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	2b5c      	cmp	r3, #92	; 0x5c
 8009cd2:	d00a      	beq.n	8009cea <xTaskCreateStatic+0x66>
	__asm volatile
 8009cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd8:	f383 8811 	msr	BASEPRI, r3
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	f3bf 8f4f 	dsb	sy
 8009ce4:	61bb      	str	r3, [r7, #24]
}
 8009ce6:	bf00      	nop
 8009ce8:	e7fe      	b.n	8009ce8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009cea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d01e      	beq.n	8009d30 <xTaskCreateStatic+0xac>
 8009cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d01b      	beq.n	8009d30 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cfa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d00:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d04:	2202      	movs	r2, #2
 8009d06:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	9303      	str	r3, [sp, #12]
 8009d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d10:	9302      	str	r3, [sp, #8]
 8009d12:	f107 0314 	add.w	r3, r7, #20
 8009d16:	9301      	str	r3, [sp, #4]
 8009d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	68b9      	ldr	r1, [r7, #8]
 8009d22:	68f8      	ldr	r0, [r7, #12]
 8009d24:	f000 f850 	bl	8009dc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d2a:	f000 f8dd 	bl	8009ee8 <prvAddNewTaskToReadyList>
 8009d2e:	e001      	b.n	8009d34 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009d30:	2300      	movs	r3, #0
 8009d32:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d34:	697b      	ldr	r3, [r7, #20]
	}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3728      	adds	r7, #40	; 0x28
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b08c      	sub	sp, #48	; 0x30
 8009d42:	af04      	add	r7, sp, #16
 8009d44:	60f8      	str	r0, [r7, #12]
 8009d46:	60b9      	str	r1, [r7, #8]
 8009d48:	603b      	str	r3, [r7, #0]
 8009d4a:	4613      	mov	r3, r2
 8009d4c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d4e:	88fb      	ldrh	r3, [r7, #6]
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	4618      	mov	r0, r3
 8009d54:	f001 fc30 	bl	800b5b8 <pvPortMalloc>
 8009d58:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d00e      	beq.n	8009d7e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d60:	205c      	movs	r0, #92	; 0x5c
 8009d62:	f001 fc29 	bl	800b5b8 <pvPortMalloc>
 8009d66:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d003      	beq.n	8009d76 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	697a      	ldr	r2, [r7, #20]
 8009d72:	631a      	str	r2, [r3, #48]	; 0x30
 8009d74:	e005      	b.n	8009d82 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d76:	6978      	ldr	r0, [r7, #20]
 8009d78:	f001 fcea 	bl	800b750 <vPortFree>
 8009d7c:	e001      	b.n	8009d82 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d017      	beq.n	8009db8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d90:	88fa      	ldrh	r2, [r7, #6]
 8009d92:	2300      	movs	r3, #0
 8009d94:	9303      	str	r3, [sp, #12]
 8009d96:	69fb      	ldr	r3, [r7, #28]
 8009d98:	9302      	str	r3, [sp, #8]
 8009d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9c:	9301      	str	r3, [sp, #4]
 8009d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da0:	9300      	str	r3, [sp, #0]
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	68b9      	ldr	r1, [r7, #8]
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f000 f80e 	bl	8009dc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009dac:	69f8      	ldr	r0, [r7, #28]
 8009dae:	f000 f89b 	bl	8009ee8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009db2:	2301      	movs	r3, #1
 8009db4:	61bb      	str	r3, [r7, #24]
 8009db6:	e002      	b.n	8009dbe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009db8:	f04f 33ff 	mov.w	r3, #4294967295
 8009dbc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009dbe:	69bb      	ldr	r3, [r7, #24]
	}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3720      	adds	r7, #32
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b088      	sub	sp, #32
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
 8009dd4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	461a      	mov	r2, r3
 8009de0:	21a5      	movs	r1, #165	; 0xa5
 8009de2:	f008 fb8f 	bl	8012504 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009df0:	3b01      	subs	r3, #1
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	4413      	add	r3, r2
 8009df6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009df8:	69bb      	ldr	r3, [r7, #24]
 8009dfa:	f023 0307 	bic.w	r3, r3, #7
 8009dfe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	f003 0307 	and.w	r3, r3, #7
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00a      	beq.n	8009e20 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0e:	f383 8811 	msr	BASEPRI, r3
 8009e12:	f3bf 8f6f 	isb	sy
 8009e16:	f3bf 8f4f 	dsb	sy
 8009e1a:	617b      	str	r3, [r7, #20]
}
 8009e1c:	bf00      	nop
 8009e1e:	e7fe      	b.n	8009e1e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d01f      	beq.n	8009e66 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e26:	2300      	movs	r3, #0
 8009e28:	61fb      	str	r3, [r7, #28]
 8009e2a:	e012      	b.n	8009e52 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e2c:	68ba      	ldr	r2, [r7, #8]
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	4413      	add	r3, r2
 8009e32:	7819      	ldrb	r1, [r3, #0]
 8009e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	4413      	add	r3, r2
 8009e3a:	3334      	adds	r3, #52	; 0x34
 8009e3c:	460a      	mov	r2, r1
 8009e3e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e40:	68ba      	ldr	r2, [r7, #8]
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	4413      	add	r3, r2
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d006      	beq.n	8009e5a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	3301      	adds	r3, #1
 8009e50:	61fb      	str	r3, [r7, #28]
 8009e52:	69fb      	ldr	r3, [r7, #28]
 8009e54:	2b0f      	cmp	r3, #15
 8009e56:	d9e9      	bls.n	8009e2c <prvInitialiseNewTask+0x64>
 8009e58:	e000      	b.n	8009e5c <prvInitialiseNewTask+0x94>
			{
				break;
 8009e5a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e64:	e003      	b.n	8009e6e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e70:	2b37      	cmp	r3, #55	; 0x37
 8009e72:	d901      	bls.n	8009e78 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e74:	2337      	movs	r3, #55	; 0x37
 8009e76:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e7c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e82:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e86:	2200      	movs	r2, #0
 8009e88:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7ff f978 	bl	8009184 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e96:	3318      	adds	r3, #24
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7ff f973 	bl	8009184 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ea2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eb2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ec2:	683a      	ldr	r2, [r7, #0]
 8009ec4:	68f9      	ldr	r1, [r7, #12]
 8009ec6:	69b8      	ldr	r0, [r7, #24]
 8009ec8:	f001 f928 	bl	800b11c <pxPortInitialiseStack>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d002      	beq.n	8009ede <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009edc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ede:	bf00      	nop
 8009ee0:	3720      	adds	r7, #32
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
	...

08009ee8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ef0:	f001 fa40 	bl	800b374 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009ef4:	4b2d      	ldr	r3, [pc, #180]	; (8009fac <prvAddNewTaskToReadyList+0xc4>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	3301      	adds	r3, #1
 8009efa:	4a2c      	ldr	r2, [pc, #176]	; (8009fac <prvAddNewTaskToReadyList+0xc4>)
 8009efc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009efe:	4b2c      	ldr	r3, [pc, #176]	; (8009fb0 <prvAddNewTaskToReadyList+0xc8>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d109      	bne.n	8009f1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009f06:	4a2a      	ldr	r2, [pc, #168]	; (8009fb0 <prvAddNewTaskToReadyList+0xc8>)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f0c:	4b27      	ldr	r3, [pc, #156]	; (8009fac <prvAddNewTaskToReadyList+0xc4>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d110      	bne.n	8009f36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f14:	f000 fc16 	bl	800a744 <prvInitialiseTaskLists>
 8009f18:	e00d      	b.n	8009f36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f1a:	4b26      	ldr	r3, [pc, #152]	; (8009fb4 <prvAddNewTaskToReadyList+0xcc>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d109      	bne.n	8009f36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f22:	4b23      	ldr	r3, [pc, #140]	; (8009fb0 <prvAddNewTaskToReadyList+0xc8>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d802      	bhi.n	8009f36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f30:	4a1f      	ldr	r2, [pc, #124]	; (8009fb0 <prvAddNewTaskToReadyList+0xc8>)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f36:	4b20      	ldr	r3, [pc, #128]	; (8009fb8 <prvAddNewTaskToReadyList+0xd0>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	4a1e      	ldr	r2, [pc, #120]	; (8009fb8 <prvAddNewTaskToReadyList+0xd0>)
 8009f3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009f40:	4b1d      	ldr	r3, [pc, #116]	; (8009fb8 <prvAddNewTaskToReadyList+0xd0>)
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f4c:	4b1b      	ldr	r3, [pc, #108]	; (8009fbc <prvAddNewTaskToReadyList+0xd4>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d903      	bls.n	8009f5c <prvAddNewTaskToReadyList+0x74>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f58:	4a18      	ldr	r2, [pc, #96]	; (8009fbc <prvAddNewTaskToReadyList+0xd4>)
 8009f5a:	6013      	str	r3, [r2, #0]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f60:	4613      	mov	r3, r2
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4413      	add	r3, r2
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	4a15      	ldr	r2, [pc, #84]	; (8009fc0 <prvAddNewTaskToReadyList+0xd8>)
 8009f6a:	441a      	add	r2, r3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	3304      	adds	r3, #4
 8009f70:	4619      	mov	r1, r3
 8009f72:	4610      	mov	r0, r2
 8009f74:	f7ff f913 	bl	800919e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009f78:	f001 fa2c 	bl	800b3d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009f7c:	4b0d      	ldr	r3, [pc, #52]	; (8009fb4 <prvAddNewTaskToReadyList+0xcc>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d00e      	beq.n	8009fa2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009f84:	4b0a      	ldr	r3, [pc, #40]	; (8009fb0 <prvAddNewTaskToReadyList+0xc8>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d207      	bcs.n	8009fa2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009f92:	4b0c      	ldr	r3, [pc, #48]	; (8009fc4 <prvAddNewTaskToReadyList+0xdc>)
 8009f94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f98:	601a      	str	r2, [r3, #0]
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fa2:	bf00      	nop
 8009fa4:	3708      	adds	r7, #8
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	200011e8 	.word	0x200011e8
 8009fb0:	20000d14 	.word	0x20000d14
 8009fb4:	200011f4 	.word	0x200011f4
 8009fb8:	20001204 	.word	0x20001204
 8009fbc:	200011f0 	.word	0x200011f0
 8009fc0:	20000d18 	.word	0x20000d18
 8009fc4:	e000ed04 	.word	0xe000ed04

08009fc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d017      	beq.n	800a00a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009fda:	4b13      	ldr	r3, [pc, #76]	; (800a028 <vTaskDelay+0x60>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d00a      	beq.n	8009ff8 <vTaskDelay+0x30>
	__asm volatile
 8009fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe6:	f383 8811 	msr	BASEPRI, r3
 8009fea:	f3bf 8f6f 	isb	sy
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	60bb      	str	r3, [r7, #8]
}
 8009ff4:	bf00      	nop
 8009ff6:	e7fe      	b.n	8009ff6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009ff8:	f000 f880 	bl	800a0fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009ffc:	2100      	movs	r1, #0
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 fcea 	bl	800a9d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a004:	f000 f888 	bl	800a118 <xTaskResumeAll>
 800a008:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d107      	bne.n	800a020 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a010:	4b06      	ldr	r3, [pc, #24]	; (800a02c <vTaskDelay+0x64>)
 800a012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a016:	601a      	str	r2, [r3, #0]
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a020:	bf00      	nop
 800a022:	3710      	adds	r7, #16
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	20001210 	.word	0x20001210
 800a02c:	e000ed04 	.word	0xe000ed04

0800a030 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b08a      	sub	sp, #40	; 0x28
 800a034:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a036:	2300      	movs	r3, #0
 800a038:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a03a:	2300      	movs	r3, #0
 800a03c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a03e:	463a      	mov	r2, r7
 800a040:	1d39      	adds	r1, r7, #4
 800a042:	f107 0308 	add.w	r3, r7, #8
 800a046:	4618      	mov	r0, r3
 800a048:	f7ff f848 	bl	80090dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a04c:	6839      	ldr	r1, [r7, #0]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	9202      	str	r2, [sp, #8]
 800a054:	9301      	str	r3, [sp, #4]
 800a056:	2300      	movs	r3, #0
 800a058:	9300      	str	r3, [sp, #0]
 800a05a:	2300      	movs	r3, #0
 800a05c:	460a      	mov	r2, r1
 800a05e:	4921      	ldr	r1, [pc, #132]	; (800a0e4 <vTaskStartScheduler+0xb4>)
 800a060:	4821      	ldr	r0, [pc, #132]	; (800a0e8 <vTaskStartScheduler+0xb8>)
 800a062:	f7ff fe0f 	bl	8009c84 <xTaskCreateStatic>
 800a066:	4603      	mov	r3, r0
 800a068:	4a20      	ldr	r2, [pc, #128]	; (800a0ec <vTaskStartScheduler+0xbc>)
 800a06a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a06c:	4b1f      	ldr	r3, [pc, #124]	; (800a0ec <vTaskStartScheduler+0xbc>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d002      	beq.n	800a07a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a074:	2301      	movs	r3, #1
 800a076:	617b      	str	r3, [r7, #20]
 800a078:	e001      	b.n	800a07e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a07a:	2300      	movs	r3, #0
 800a07c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	2b01      	cmp	r3, #1
 800a082:	d102      	bne.n	800a08a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a084:	f000 fcfc 	bl	800aa80 <xTimerCreateTimerTask>
 800a088:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d116      	bne.n	800a0be <vTaskStartScheduler+0x8e>
	__asm volatile
 800a090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a094:	f383 8811 	msr	BASEPRI, r3
 800a098:	f3bf 8f6f 	isb	sy
 800a09c:	f3bf 8f4f 	dsb	sy
 800a0a0:	613b      	str	r3, [r7, #16]
}
 800a0a2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a0a4:	4b12      	ldr	r3, [pc, #72]	; (800a0f0 <vTaskStartScheduler+0xc0>)
 800a0a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a0ac:	4b11      	ldr	r3, [pc, #68]	; (800a0f4 <vTaskStartScheduler+0xc4>)
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a0b2:	4b11      	ldr	r3, [pc, #68]	; (800a0f8 <vTaskStartScheduler+0xc8>)
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a0b8:	f001 f8ba 	bl	800b230 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a0bc:	e00e      	b.n	800a0dc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0c4:	d10a      	bne.n	800a0dc <vTaskStartScheduler+0xac>
	__asm volatile
 800a0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ca:	f383 8811 	msr	BASEPRI, r3
 800a0ce:	f3bf 8f6f 	isb	sy
 800a0d2:	f3bf 8f4f 	dsb	sy
 800a0d6:	60fb      	str	r3, [r7, #12]
}
 800a0d8:	bf00      	nop
 800a0da:	e7fe      	b.n	800a0da <vTaskStartScheduler+0xaa>
}
 800a0dc:	bf00      	nop
 800a0de:	3718      	adds	r7, #24
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	080126e0 	.word	0x080126e0
 800a0e8:	0800a715 	.word	0x0800a715
 800a0ec:	2000120c 	.word	0x2000120c
 800a0f0:	20001208 	.word	0x20001208
 800a0f4:	200011f4 	.word	0x200011f4
 800a0f8:	200011ec 	.word	0x200011ec

0800a0fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a100:	4b04      	ldr	r3, [pc, #16]	; (800a114 <vTaskSuspendAll+0x18>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	3301      	adds	r3, #1
 800a106:	4a03      	ldr	r2, [pc, #12]	; (800a114 <vTaskSuspendAll+0x18>)
 800a108:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a10a:	bf00      	nop
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr
 800a114:	20001210 	.word	0x20001210

0800a118 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a11e:	2300      	movs	r3, #0
 800a120:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a122:	2300      	movs	r3, #0
 800a124:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a126:	4b42      	ldr	r3, [pc, #264]	; (800a230 <xTaskResumeAll+0x118>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d10a      	bne.n	800a144 <xTaskResumeAll+0x2c>
	__asm volatile
 800a12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a132:	f383 8811 	msr	BASEPRI, r3
 800a136:	f3bf 8f6f 	isb	sy
 800a13a:	f3bf 8f4f 	dsb	sy
 800a13e:	603b      	str	r3, [r7, #0]
}
 800a140:	bf00      	nop
 800a142:	e7fe      	b.n	800a142 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a144:	f001 f916 	bl	800b374 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a148:	4b39      	ldr	r3, [pc, #228]	; (800a230 <xTaskResumeAll+0x118>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	3b01      	subs	r3, #1
 800a14e:	4a38      	ldr	r2, [pc, #224]	; (800a230 <xTaskResumeAll+0x118>)
 800a150:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a152:	4b37      	ldr	r3, [pc, #220]	; (800a230 <xTaskResumeAll+0x118>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d162      	bne.n	800a220 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a15a:	4b36      	ldr	r3, [pc, #216]	; (800a234 <xTaskResumeAll+0x11c>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d05e      	beq.n	800a220 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a162:	e02f      	b.n	800a1c4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a164:	4b34      	ldr	r3, [pc, #208]	; (800a238 <xTaskResumeAll+0x120>)
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	3318      	adds	r3, #24
 800a170:	4618      	mov	r0, r3
 800a172:	f7ff f871 	bl	8009258 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	3304      	adds	r3, #4
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7ff f86c 	bl	8009258 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a184:	4b2d      	ldr	r3, [pc, #180]	; (800a23c <xTaskResumeAll+0x124>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	429a      	cmp	r2, r3
 800a18a:	d903      	bls.n	800a194 <xTaskResumeAll+0x7c>
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a190:	4a2a      	ldr	r2, [pc, #168]	; (800a23c <xTaskResumeAll+0x124>)
 800a192:	6013      	str	r3, [r2, #0]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a198:	4613      	mov	r3, r2
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	4413      	add	r3, r2
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	4a27      	ldr	r2, [pc, #156]	; (800a240 <xTaskResumeAll+0x128>)
 800a1a2:	441a      	add	r2, r3
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	3304      	adds	r3, #4
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	4610      	mov	r0, r2
 800a1ac:	f7fe fff7 	bl	800919e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1b4:	4b23      	ldr	r3, [pc, #140]	; (800a244 <xTaskResumeAll+0x12c>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d302      	bcc.n	800a1c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a1be:	4b22      	ldr	r3, [pc, #136]	; (800a248 <xTaskResumeAll+0x130>)
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1c4:	4b1c      	ldr	r3, [pc, #112]	; (800a238 <xTaskResumeAll+0x120>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d1cb      	bne.n	800a164 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d001      	beq.n	800a1d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a1d2:	f000 fb55 	bl	800a880 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a1d6:	4b1d      	ldr	r3, [pc, #116]	; (800a24c <xTaskResumeAll+0x134>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d010      	beq.n	800a204 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a1e2:	f000 f847 	bl	800a274 <xTaskIncrementTick>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d002      	beq.n	800a1f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a1ec:	4b16      	ldr	r3, [pc, #88]	; (800a248 <xTaskResumeAll+0x130>)
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	3b01      	subs	r3, #1
 800a1f6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d1f1      	bne.n	800a1e2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a1fe:	4b13      	ldr	r3, [pc, #76]	; (800a24c <xTaskResumeAll+0x134>)
 800a200:	2200      	movs	r2, #0
 800a202:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a204:	4b10      	ldr	r3, [pc, #64]	; (800a248 <xTaskResumeAll+0x130>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d009      	beq.n	800a220 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a20c:	2301      	movs	r3, #1
 800a20e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a210:	4b0f      	ldr	r3, [pc, #60]	; (800a250 <xTaskResumeAll+0x138>)
 800a212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a216:	601a      	str	r2, [r3, #0]
 800a218:	f3bf 8f4f 	dsb	sy
 800a21c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a220:	f001 f8d8 	bl	800b3d4 <vPortExitCritical>

	return xAlreadyYielded;
 800a224:	68bb      	ldr	r3, [r7, #8]
}
 800a226:	4618      	mov	r0, r3
 800a228:	3710      	adds	r7, #16
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	20001210 	.word	0x20001210
 800a234:	200011e8 	.word	0x200011e8
 800a238:	200011a8 	.word	0x200011a8
 800a23c:	200011f0 	.word	0x200011f0
 800a240:	20000d18 	.word	0x20000d18
 800a244:	20000d14 	.word	0x20000d14
 800a248:	200011fc 	.word	0x200011fc
 800a24c:	200011f8 	.word	0x200011f8
 800a250:	e000ed04 	.word	0xe000ed04

0800a254 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a25a:	4b05      	ldr	r3, [pc, #20]	; (800a270 <xTaskGetTickCount+0x1c>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a260:	687b      	ldr	r3, [r7, #4]
}
 800a262:	4618      	mov	r0, r3
 800a264:	370c      	adds	r7, #12
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop
 800a270:	200011ec 	.word	0x200011ec

0800a274 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b086      	sub	sp, #24
 800a278:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a27a:	2300      	movs	r3, #0
 800a27c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a27e:	4b4f      	ldr	r3, [pc, #316]	; (800a3bc <xTaskIncrementTick+0x148>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	2b00      	cmp	r3, #0
 800a284:	f040 808f 	bne.w	800a3a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a288:	4b4d      	ldr	r3, [pc, #308]	; (800a3c0 <xTaskIncrementTick+0x14c>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	3301      	adds	r3, #1
 800a28e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a290:	4a4b      	ldr	r2, [pc, #300]	; (800a3c0 <xTaskIncrementTick+0x14c>)
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d120      	bne.n	800a2de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a29c:	4b49      	ldr	r3, [pc, #292]	; (800a3c4 <xTaskIncrementTick+0x150>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d00a      	beq.n	800a2bc <xTaskIncrementTick+0x48>
	__asm volatile
 800a2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2aa:	f383 8811 	msr	BASEPRI, r3
 800a2ae:	f3bf 8f6f 	isb	sy
 800a2b2:	f3bf 8f4f 	dsb	sy
 800a2b6:	603b      	str	r3, [r7, #0]
}
 800a2b8:	bf00      	nop
 800a2ba:	e7fe      	b.n	800a2ba <xTaskIncrementTick+0x46>
 800a2bc:	4b41      	ldr	r3, [pc, #260]	; (800a3c4 <xTaskIncrementTick+0x150>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	60fb      	str	r3, [r7, #12]
 800a2c2:	4b41      	ldr	r3, [pc, #260]	; (800a3c8 <xTaskIncrementTick+0x154>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a3f      	ldr	r2, [pc, #252]	; (800a3c4 <xTaskIncrementTick+0x150>)
 800a2c8:	6013      	str	r3, [r2, #0]
 800a2ca:	4a3f      	ldr	r2, [pc, #252]	; (800a3c8 <xTaskIncrementTick+0x154>)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6013      	str	r3, [r2, #0]
 800a2d0:	4b3e      	ldr	r3, [pc, #248]	; (800a3cc <xTaskIncrementTick+0x158>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	4a3d      	ldr	r2, [pc, #244]	; (800a3cc <xTaskIncrementTick+0x158>)
 800a2d8:	6013      	str	r3, [r2, #0]
 800a2da:	f000 fad1 	bl	800a880 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a2de:	4b3c      	ldr	r3, [pc, #240]	; (800a3d0 <xTaskIncrementTick+0x15c>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	693a      	ldr	r2, [r7, #16]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d349      	bcc.n	800a37c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2e8:	4b36      	ldr	r3, [pc, #216]	; (800a3c4 <xTaskIncrementTick+0x150>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d104      	bne.n	800a2fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2f2:	4b37      	ldr	r3, [pc, #220]	; (800a3d0 <xTaskIncrementTick+0x15c>)
 800a2f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2f8:	601a      	str	r2, [r3, #0]
					break;
 800a2fa:	e03f      	b.n	800a37c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2fc:	4b31      	ldr	r3, [pc, #196]	; (800a3c4 <xTaskIncrementTick+0x150>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a30c:	693a      	ldr	r2, [r7, #16]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	429a      	cmp	r2, r3
 800a312:	d203      	bcs.n	800a31c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a314:	4a2e      	ldr	r2, [pc, #184]	; (800a3d0 <xTaskIncrementTick+0x15c>)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a31a:	e02f      	b.n	800a37c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	3304      	adds	r3, #4
 800a320:	4618      	mov	r0, r3
 800a322:	f7fe ff99 	bl	8009258 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d004      	beq.n	800a338 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	3318      	adds	r3, #24
 800a332:	4618      	mov	r0, r3
 800a334:	f7fe ff90 	bl	8009258 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a33c:	4b25      	ldr	r3, [pc, #148]	; (800a3d4 <xTaskIncrementTick+0x160>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	429a      	cmp	r2, r3
 800a342:	d903      	bls.n	800a34c <xTaskIncrementTick+0xd8>
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a348:	4a22      	ldr	r2, [pc, #136]	; (800a3d4 <xTaskIncrementTick+0x160>)
 800a34a:	6013      	str	r3, [r2, #0]
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a350:	4613      	mov	r3, r2
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	4413      	add	r3, r2
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	4a1f      	ldr	r2, [pc, #124]	; (800a3d8 <xTaskIncrementTick+0x164>)
 800a35a:	441a      	add	r2, r3
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	3304      	adds	r3, #4
 800a360:	4619      	mov	r1, r3
 800a362:	4610      	mov	r0, r2
 800a364:	f7fe ff1b 	bl	800919e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a36c:	4b1b      	ldr	r3, [pc, #108]	; (800a3dc <xTaskIncrementTick+0x168>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a372:	429a      	cmp	r2, r3
 800a374:	d3b8      	bcc.n	800a2e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a376:	2301      	movs	r3, #1
 800a378:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a37a:	e7b5      	b.n	800a2e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a37c:	4b17      	ldr	r3, [pc, #92]	; (800a3dc <xTaskIncrementTick+0x168>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a382:	4915      	ldr	r1, [pc, #84]	; (800a3d8 <xTaskIncrementTick+0x164>)
 800a384:	4613      	mov	r3, r2
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	4413      	add	r3, r2
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	440b      	add	r3, r1
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2b01      	cmp	r3, #1
 800a392:	d901      	bls.n	800a398 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a394:	2301      	movs	r3, #1
 800a396:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a398:	4b11      	ldr	r3, [pc, #68]	; (800a3e0 <xTaskIncrementTick+0x16c>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d007      	beq.n	800a3b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	617b      	str	r3, [r7, #20]
 800a3a4:	e004      	b.n	800a3b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a3a6:	4b0f      	ldr	r3, [pc, #60]	; (800a3e4 <xTaskIncrementTick+0x170>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	4a0d      	ldr	r2, [pc, #52]	; (800a3e4 <xTaskIncrementTick+0x170>)
 800a3ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a3b0:	697b      	ldr	r3, [r7, #20]
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3718      	adds	r7, #24
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	20001210 	.word	0x20001210
 800a3c0:	200011ec 	.word	0x200011ec
 800a3c4:	200011a0 	.word	0x200011a0
 800a3c8:	200011a4 	.word	0x200011a4
 800a3cc:	20001200 	.word	0x20001200
 800a3d0:	20001208 	.word	0x20001208
 800a3d4:	200011f0 	.word	0x200011f0
 800a3d8:	20000d18 	.word	0x20000d18
 800a3dc:	20000d14 	.word	0x20000d14
 800a3e0:	200011fc 	.word	0x200011fc
 800a3e4:	200011f8 	.word	0x200011f8

0800a3e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a3ee:	4b28      	ldr	r3, [pc, #160]	; (800a490 <vTaskSwitchContext+0xa8>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d003      	beq.n	800a3fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a3f6:	4b27      	ldr	r3, [pc, #156]	; (800a494 <vTaskSwitchContext+0xac>)
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a3fc:	e041      	b.n	800a482 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a3fe:	4b25      	ldr	r3, [pc, #148]	; (800a494 <vTaskSwitchContext+0xac>)
 800a400:	2200      	movs	r2, #0
 800a402:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a404:	4b24      	ldr	r3, [pc, #144]	; (800a498 <vTaskSwitchContext+0xb0>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	60fb      	str	r3, [r7, #12]
 800a40a:	e010      	b.n	800a42e <vTaskSwitchContext+0x46>
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d10a      	bne.n	800a428 <vTaskSwitchContext+0x40>
	__asm volatile
 800a412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a416:	f383 8811 	msr	BASEPRI, r3
 800a41a:	f3bf 8f6f 	isb	sy
 800a41e:	f3bf 8f4f 	dsb	sy
 800a422:	607b      	str	r3, [r7, #4]
}
 800a424:	bf00      	nop
 800a426:	e7fe      	b.n	800a426 <vTaskSwitchContext+0x3e>
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	3b01      	subs	r3, #1
 800a42c:	60fb      	str	r3, [r7, #12]
 800a42e:	491b      	ldr	r1, [pc, #108]	; (800a49c <vTaskSwitchContext+0xb4>)
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	4613      	mov	r3, r2
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	4413      	add	r3, r2
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	440b      	add	r3, r1
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d0e4      	beq.n	800a40c <vTaskSwitchContext+0x24>
 800a442:	68fa      	ldr	r2, [r7, #12]
 800a444:	4613      	mov	r3, r2
 800a446:	009b      	lsls	r3, r3, #2
 800a448:	4413      	add	r3, r2
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	4a13      	ldr	r2, [pc, #76]	; (800a49c <vTaskSwitchContext+0xb4>)
 800a44e:	4413      	add	r3, r2
 800a450:	60bb      	str	r3, [r7, #8]
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	685a      	ldr	r2, [r3, #4]
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	605a      	str	r2, [r3, #4]
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	685a      	ldr	r2, [r3, #4]
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	3308      	adds	r3, #8
 800a464:	429a      	cmp	r2, r3
 800a466:	d104      	bne.n	800a472 <vTaskSwitchContext+0x8a>
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	685a      	ldr	r2, [r3, #4]
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	605a      	str	r2, [r3, #4]
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	4a09      	ldr	r2, [pc, #36]	; (800a4a0 <vTaskSwitchContext+0xb8>)
 800a47a:	6013      	str	r3, [r2, #0]
 800a47c:	4a06      	ldr	r2, [pc, #24]	; (800a498 <vTaskSwitchContext+0xb0>)
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6013      	str	r3, [r2, #0]
}
 800a482:	bf00      	nop
 800a484:	3714      	adds	r7, #20
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	20001210 	.word	0x20001210
 800a494:	200011fc 	.word	0x200011fc
 800a498:	200011f0 	.word	0x200011f0
 800a49c:	20000d18 	.word	0x20000d18
 800a4a0:	20000d14 	.word	0x20000d14

0800a4a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d10a      	bne.n	800a4ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b8:	f383 8811 	msr	BASEPRI, r3
 800a4bc:	f3bf 8f6f 	isb	sy
 800a4c0:	f3bf 8f4f 	dsb	sy
 800a4c4:	60fb      	str	r3, [r7, #12]
}
 800a4c6:	bf00      	nop
 800a4c8:	e7fe      	b.n	800a4c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a4ca:	4b07      	ldr	r3, [pc, #28]	; (800a4e8 <vTaskPlaceOnEventList+0x44>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	3318      	adds	r3, #24
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f7fe fe87 	bl	80091e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a4d8:	2101      	movs	r1, #1
 800a4da:	6838      	ldr	r0, [r7, #0]
 800a4dc:	f000 fa7c 	bl	800a9d8 <prvAddCurrentTaskToDelayedList>
}
 800a4e0:	bf00      	nop
 800a4e2:	3710      	adds	r7, #16
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	20000d14 	.word	0x20000d14

0800a4ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b086      	sub	sp, #24
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d10a      	bne.n	800a514 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a502:	f383 8811 	msr	BASEPRI, r3
 800a506:	f3bf 8f6f 	isb	sy
 800a50a:	f3bf 8f4f 	dsb	sy
 800a50e:	617b      	str	r3, [r7, #20]
}
 800a510:	bf00      	nop
 800a512:	e7fe      	b.n	800a512 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a514:	4b0a      	ldr	r3, [pc, #40]	; (800a540 <vTaskPlaceOnEventListRestricted+0x54>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	3318      	adds	r3, #24
 800a51a:	4619      	mov	r1, r3
 800a51c:	68f8      	ldr	r0, [r7, #12]
 800a51e:	f7fe fe3e 	bl	800919e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d002      	beq.n	800a52e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a528:	f04f 33ff 	mov.w	r3, #4294967295
 800a52c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a52e:	6879      	ldr	r1, [r7, #4]
 800a530:	68b8      	ldr	r0, [r7, #8]
 800a532:	f000 fa51 	bl	800a9d8 <prvAddCurrentTaskToDelayedList>
	}
 800a536:	bf00      	nop
 800a538:	3718      	adds	r7, #24
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	20000d14 	.word	0x20000d14

0800a544 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b086      	sub	sp, #24
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d10a      	bne.n	800a570 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55e:	f383 8811 	msr	BASEPRI, r3
 800a562:	f3bf 8f6f 	isb	sy
 800a566:	f3bf 8f4f 	dsb	sy
 800a56a:	60fb      	str	r3, [r7, #12]
}
 800a56c:	bf00      	nop
 800a56e:	e7fe      	b.n	800a56e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	3318      	adds	r3, #24
 800a574:	4618      	mov	r0, r3
 800a576:	f7fe fe6f 	bl	8009258 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a57a:	4b1e      	ldr	r3, [pc, #120]	; (800a5f4 <xTaskRemoveFromEventList+0xb0>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d11d      	bne.n	800a5be <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	3304      	adds	r3, #4
 800a586:	4618      	mov	r0, r3
 800a588:	f7fe fe66 	bl	8009258 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a590:	4b19      	ldr	r3, [pc, #100]	; (800a5f8 <xTaskRemoveFromEventList+0xb4>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	429a      	cmp	r2, r3
 800a596:	d903      	bls.n	800a5a0 <xTaskRemoveFromEventList+0x5c>
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a59c:	4a16      	ldr	r2, [pc, #88]	; (800a5f8 <xTaskRemoveFromEventList+0xb4>)
 800a59e:	6013      	str	r3, [r2, #0]
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5a4:	4613      	mov	r3, r2
 800a5a6:	009b      	lsls	r3, r3, #2
 800a5a8:	4413      	add	r3, r2
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	4a13      	ldr	r2, [pc, #76]	; (800a5fc <xTaskRemoveFromEventList+0xb8>)
 800a5ae:	441a      	add	r2, r3
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	3304      	adds	r3, #4
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	4610      	mov	r0, r2
 800a5b8:	f7fe fdf1 	bl	800919e <vListInsertEnd>
 800a5bc:	e005      	b.n	800a5ca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	3318      	adds	r3, #24
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	480e      	ldr	r0, [pc, #56]	; (800a600 <xTaskRemoveFromEventList+0xbc>)
 800a5c6:	f7fe fdea 	bl	800919e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ce:	4b0d      	ldr	r3, [pc, #52]	; (800a604 <xTaskRemoveFromEventList+0xc0>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d905      	bls.n	800a5e4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a5dc:	4b0a      	ldr	r3, [pc, #40]	; (800a608 <xTaskRemoveFromEventList+0xc4>)
 800a5de:	2201      	movs	r2, #1
 800a5e0:	601a      	str	r2, [r3, #0]
 800a5e2:	e001      	b.n	800a5e8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a5e8:	697b      	ldr	r3, [r7, #20]
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3718      	adds	r7, #24
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
 800a5f2:	bf00      	nop
 800a5f4:	20001210 	.word	0x20001210
 800a5f8:	200011f0 	.word	0x200011f0
 800a5fc:	20000d18 	.word	0x20000d18
 800a600:	200011a8 	.word	0x200011a8
 800a604:	20000d14 	.word	0x20000d14
 800a608:	200011fc 	.word	0x200011fc

0800a60c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a614:	4b06      	ldr	r3, [pc, #24]	; (800a630 <vTaskInternalSetTimeOutState+0x24>)
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a61c:	4b05      	ldr	r3, [pc, #20]	; (800a634 <vTaskInternalSetTimeOutState+0x28>)
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	605a      	str	r2, [r3, #4]
}
 800a624:	bf00      	nop
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr
 800a630:	20001200 	.word	0x20001200
 800a634:	200011ec 	.word	0x200011ec

0800a638 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b088      	sub	sp, #32
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d10a      	bne.n	800a65e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64c:	f383 8811 	msr	BASEPRI, r3
 800a650:	f3bf 8f6f 	isb	sy
 800a654:	f3bf 8f4f 	dsb	sy
 800a658:	613b      	str	r3, [r7, #16]
}
 800a65a:	bf00      	nop
 800a65c:	e7fe      	b.n	800a65c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d10a      	bne.n	800a67a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a668:	f383 8811 	msr	BASEPRI, r3
 800a66c:	f3bf 8f6f 	isb	sy
 800a670:	f3bf 8f4f 	dsb	sy
 800a674:	60fb      	str	r3, [r7, #12]
}
 800a676:	bf00      	nop
 800a678:	e7fe      	b.n	800a678 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a67a:	f000 fe7b 	bl	800b374 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a67e:	4b1d      	ldr	r3, [pc, #116]	; (800a6f4 <xTaskCheckForTimeOut+0xbc>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	69ba      	ldr	r2, [r7, #24]
 800a68a:	1ad3      	subs	r3, r2, r3
 800a68c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a696:	d102      	bne.n	800a69e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a698:	2300      	movs	r3, #0
 800a69a:	61fb      	str	r3, [r7, #28]
 800a69c:	e023      	b.n	800a6e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	4b15      	ldr	r3, [pc, #84]	; (800a6f8 <xTaskCheckForTimeOut+0xc0>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d007      	beq.n	800a6ba <xTaskCheckForTimeOut+0x82>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	69ba      	ldr	r2, [r7, #24]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d302      	bcc.n	800a6ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	61fb      	str	r3, [r7, #28]
 800a6b8:	e015      	b.n	800a6e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	697a      	ldr	r2, [r7, #20]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d20b      	bcs.n	800a6dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	1ad2      	subs	r2, r2, r3
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f7ff ff9b 	bl	800a60c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	61fb      	str	r3, [r7, #28]
 800a6da:	e004      	b.n	800a6e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a6e6:	f000 fe75 	bl	800b3d4 <vPortExitCritical>

	return xReturn;
 800a6ea:	69fb      	ldr	r3, [r7, #28]
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3720      	adds	r7, #32
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	200011ec 	.word	0x200011ec
 800a6f8:	20001200 	.word	0x20001200

0800a6fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a700:	4b03      	ldr	r3, [pc, #12]	; (800a710 <vTaskMissedYield+0x14>)
 800a702:	2201      	movs	r2, #1
 800a704:	601a      	str	r2, [r3, #0]
}
 800a706:	bf00      	nop
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr
 800a710:	200011fc 	.word	0x200011fc

0800a714 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a71c:	f000 f852 	bl	800a7c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a720:	4b06      	ldr	r3, [pc, #24]	; (800a73c <prvIdleTask+0x28>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	2b01      	cmp	r3, #1
 800a726:	d9f9      	bls.n	800a71c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a728:	4b05      	ldr	r3, [pc, #20]	; (800a740 <prvIdleTask+0x2c>)
 800a72a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a72e:	601a      	str	r2, [r3, #0]
 800a730:	f3bf 8f4f 	dsb	sy
 800a734:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a738:	e7f0      	b.n	800a71c <prvIdleTask+0x8>
 800a73a:	bf00      	nop
 800a73c:	20000d18 	.word	0x20000d18
 800a740:	e000ed04 	.word	0xe000ed04

0800a744 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a74a:	2300      	movs	r3, #0
 800a74c:	607b      	str	r3, [r7, #4]
 800a74e:	e00c      	b.n	800a76a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	4613      	mov	r3, r2
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	4413      	add	r3, r2
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	4a12      	ldr	r2, [pc, #72]	; (800a7a4 <prvInitialiseTaskLists+0x60>)
 800a75c:	4413      	add	r3, r2
 800a75e:	4618      	mov	r0, r3
 800a760:	f7fe fcf0 	bl	8009144 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	3301      	adds	r3, #1
 800a768:	607b      	str	r3, [r7, #4]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2b37      	cmp	r3, #55	; 0x37
 800a76e:	d9ef      	bls.n	800a750 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a770:	480d      	ldr	r0, [pc, #52]	; (800a7a8 <prvInitialiseTaskLists+0x64>)
 800a772:	f7fe fce7 	bl	8009144 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a776:	480d      	ldr	r0, [pc, #52]	; (800a7ac <prvInitialiseTaskLists+0x68>)
 800a778:	f7fe fce4 	bl	8009144 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a77c:	480c      	ldr	r0, [pc, #48]	; (800a7b0 <prvInitialiseTaskLists+0x6c>)
 800a77e:	f7fe fce1 	bl	8009144 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a782:	480c      	ldr	r0, [pc, #48]	; (800a7b4 <prvInitialiseTaskLists+0x70>)
 800a784:	f7fe fcde 	bl	8009144 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a788:	480b      	ldr	r0, [pc, #44]	; (800a7b8 <prvInitialiseTaskLists+0x74>)
 800a78a:	f7fe fcdb 	bl	8009144 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a78e:	4b0b      	ldr	r3, [pc, #44]	; (800a7bc <prvInitialiseTaskLists+0x78>)
 800a790:	4a05      	ldr	r2, [pc, #20]	; (800a7a8 <prvInitialiseTaskLists+0x64>)
 800a792:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a794:	4b0a      	ldr	r3, [pc, #40]	; (800a7c0 <prvInitialiseTaskLists+0x7c>)
 800a796:	4a05      	ldr	r2, [pc, #20]	; (800a7ac <prvInitialiseTaskLists+0x68>)
 800a798:	601a      	str	r2, [r3, #0]
}
 800a79a:	bf00      	nop
 800a79c:	3708      	adds	r7, #8
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	20000d18 	.word	0x20000d18
 800a7a8:	20001178 	.word	0x20001178
 800a7ac:	2000118c 	.word	0x2000118c
 800a7b0:	200011a8 	.word	0x200011a8
 800a7b4:	200011bc 	.word	0x200011bc
 800a7b8:	200011d4 	.word	0x200011d4
 800a7bc:	200011a0 	.word	0x200011a0
 800a7c0:	200011a4 	.word	0x200011a4

0800a7c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7ca:	e019      	b.n	800a800 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a7cc:	f000 fdd2 	bl	800b374 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7d0:	4b10      	ldr	r3, [pc, #64]	; (800a814 <prvCheckTasksWaitingTermination+0x50>)
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	3304      	adds	r3, #4
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7fe fd3b 	bl	8009258 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a7e2:	4b0d      	ldr	r3, [pc, #52]	; (800a818 <prvCheckTasksWaitingTermination+0x54>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	3b01      	subs	r3, #1
 800a7e8:	4a0b      	ldr	r2, [pc, #44]	; (800a818 <prvCheckTasksWaitingTermination+0x54>)
 800a7ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a7ec:	4b0b      	ldr	r3, [pc, #44]	; (800a81c <prvCheckTasksWaitingTermination+0x58>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	3b01      	subs	r3, #1
 800a7f2:	4a0a      	ldr	r2, [pc, #40]	; (800a81c <prvCheckTasksWaitingTermination+0x58>)
 800a7f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a7f6:	f000 fded 	bl	800b3d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 f810 	bl	800a820 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a800:	4b06      	ldr	r3, [pc, #24]	; (800a81c <prvCheckTasksWaitingTermination+0x58>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d1e1      	bne.n	800a7cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a808:	bf00      	nop
 800a80a:	bf00      	nop
 800a80c:	3708      	adds	r7, #8
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	200011bc 	.word	0x200011bc
 800a818:	200011e8 	.word	0x200011e8
 800a81c:	200011d0 	.word	0x200011d0

0800a820 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d108      	bne.n	800a844 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a836:	4618      	mov	r0, r3
 800a838:	f000 ff8a 	bl	800b750 <vPortFree>
				vPortFree( pxTCB );
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 ff87 	bl	800b750 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a842:	e018      	b.n	800a876 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d103      	bne.n	800a856 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 ff7e 	bl	800b750 <vPortFree>
	}
 800a854:	e00f      	b.n	800a876 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a85c:	2b02      	cmp	r3, #2
 800a85e:	d00a      	beq.n	800a876 <prvDeleteTCB+0x56>
	__asm volatile
 800a860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a864:	f383 8811 	msr	BASEPRI, r3
 800a868:	f3bf 8f6f 	isb	sy
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	60fb      	str	r3, [r7, #12]
}
 800a872:	bf00      	nop
 800a874:	e7fe      	b.n	800a874 <prvDeleteTCB+0x54>
	}
 800a876:	bf00      	nop
 800a878:	3710      	adds	r7, #16
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
	...

0800a880 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a880:	b480      	push	{r7}
 800a882:	b083      	sub	sp, #12
 800a884:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a886:	4b0c      	ldr	r3, [pc, #48]	; (800a8b8 <prvResetNextTaskUnblockTime+0x38>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d104      	bne.n	800a89a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a890:	4b0a      	ldr	r3, [pc, #40]	; (800a8bc <prvResetNextTaskUnblockTime+0x3c>)
 800a892:	f04f 32ff 	mov.w	r2, #4294967295
 800a896:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a898:	e008      	b.n	800a8ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a89a:	4b07      	ldr	r3, [pc, #28]	; (800a8b8 <prvResetNextTaskUnblockTime+0x38>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	4a04      	ldr	r2, [pc, #16]	; (800a8bc <prvResetNextTaskUnblockTime+0x3c>)
 800a8aa:	6013      	str	r3, [r2, #0]
}
 800a8ac:	bf00      	nop
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr
 800a8b8:	200011a0 	.word	0x200011a0
 800a8bc:	20001208 	.word	0x20001208

0800a8c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a8c6:	4b0b      	ldr	r3, [pc, #44]	; (800a8f4 <xTaskGetSchedulerState+0x34>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d102      	bne.n	800a8d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	607b      	str	r3, [r7, #4]
 800a8d2:	e008      	b.n	800a8e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8d4:	4b08      	ldr	r3, [pc, #32]	; (800a8f8 <xTaskGetSchedulerState+0x38>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d102      	bne.n	800a8e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a8dc:	2302      	movs	r3, #2
 800a8de:	607b      	str	r3, [r7, #4]
 800a8e0:	e001      	b.n	800a8e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a8e6:	687b      	ldr	r3, [r7, #4]
	}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr
 800a8f4:	200011f4 	.word	0x200011f4
 800a8f8:	20001210 	.word	0x20001210

0800a8fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b086      	sub	sp, #24
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a908:	2300      	movs	r3, #0
 800a90a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d056      	beq.n	800a9c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a912:	4b2e      	ldr	r3, [pc, #184]	; (800a9cc <xTaskPriorityDisinherit+0xd0>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	693a      	ldr	r2, [r7, #16]
 800a918:	429a      	cmp	r2, r3
 800a91a:	d00a      	beq.n	800a932 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a920:	f383 8811 	msr	BASEPRI, r3
 800a924:	f3bf 8f6f 	isb	sy
 800a928:	f3bf 8f4f 	dsb	sy
 800a92c:	60fb      	str	r3, [r7, #12]
}
 800a92e:	bf00      	nop
 800a930:	e7fe      	b.n	800a930 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a936:	2b00      	cmp	r3, #0
 800a938:	d10a      	bne.n	800a950 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93e:	f383 8811 	msr	BASEPRI, r3
 800a942:	f3bf 8f6f 	isb	sy
 800a946:	f3bf 8f4f 	dsb	sy
 800a94a:	60bb      	str	r3, [r7, #8]
}
 800a94c:	bf00      	nop
 800a94e:	e7fe      	b.n	800a94e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a954:	1e5a      	subs	r2, r3, #1
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a962:	429a      	cmp	r2, r3
 800a964:	d02c      	beq.n	800a9c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d128      	bne.n	800a9c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	3304      	adds	r3, #4
 800a972:	4618      	mov	r0, r3
 800a974:	f7fe fc70 	bl	8009258 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a984:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a990:	4b0f      	ldr	r3, [pc, #60]	; (800a9d0 <xTaskPriorityDisinherit+0xd4>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	429a      	cmp	r2, r3
 800a996:	d903      	bls.n	800a9a0 <xTaskPriorityDisinherit+0xa4>
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a99c:	4a0c      	ldr	r2, [pc, #48]	; (800a9d0 <xTaskPriorityDisinherit+0xd4>)
 800a99e:	6013      	str	r3, [r2, #0]
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9a4:	4613      	mov	r3, r2
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	4413      	add	r3, r2
 800a9aa:	009b      	lsls	r3, r3, #2
 800a9ac:	4a09      	ldr	r2, [pc, #36]	; (800a9d4 <xTaskPriorityDisinherit+0xd8>)
 800a9ae:	441a      	add	r2, r3
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	3304      	adds	r3, #4
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	4610      	mov	r0, r2
 800a9b8:	f7fe fbf1 	bl	800919e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a9c0:	697b      	ldr	r3, [r7, #20]
	}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3718      	adds	r7, #24
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	20000d14 	.word	0x20000d14
 800a9d0:	200011f0 	.word	0x200011f0
 800a9d4:	20000d18 	.word	0x20000d18

0800a9d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a9e2:	4b21      	ldr	r3, [pc, #132]	; (800aa68 <prvAddCurrentTaskToDelayedList+0x90>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9e8:	4b20      	ldr	r3, [pc, #128]	; (800aa6c <prvAddCurrentTaskToDelayedList+0x94>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	3304      	adds	r3, #4
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7fe fc32 	bl	8009258 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9fa:	d10a      	bne.n	800aa12 <prvAddCurrentTaskToDelayedList+0x3a>
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d007      	beq.n	800aa12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa02:	4b1a      	ldr	r3, [pc, #104]	; (800aa6c <prvAddCurrentTaskToDelayedList+0x94>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	3304      	adds	r3, #4
 800aa08:	4619      	mov	r1, r3
 800aa0a:	4819      	ldr	r0, [pc, #100]	; (800aa70 <prvAddCurrentTaskToDelayedList+0x98>)
 800aa0c:	f7fe fbc7 	bl	800919e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aa10:	e026      	b.n	800aa60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aa12:	68fa      	ldr	r2, [r7, #12]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	4413      	add	r3, r2
 800aa18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aa1a:	4b14      	ldr	r3, [pc, #80]	; (800aa6c <prvAddCurrentTaskToDelayedList+0x94>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	68ba      	ldr	r2, [r7, #8]
 800aa20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aa22:	68ba      	ldr	r2, [r7, #8]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d209      	bcs.n	800aa3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa2a:	4b12      	ldr	r3, [pc, #72]	; (800aa74 <prvAddCurrentTaskToDelayedList+0x9c>)
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	4b0f      	ldr	r3, [pc, #60]	; (800aa6c <prvAddCurrentTaskToDelayedList+0x94>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	3304      	adds	r3, #4
 800aa34:	4619      	mov	r1, r3
 800aa36:	4610      	mov	r0, r2
 800aa38:	f7fe fbd5 	bl	80091e6 <vListInsert>
}
 800aa3c:	e010      	b.n	800aa60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa3e:	4b0e      	ldr	r3, [pc, #56]	; (800aa78 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	4b0a      	ldr	r3, [pc, #40]	; (800aa6c <prvAddCurrentTaskToDelayedList+0x94>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	3304      	adds	r3, #4
 800aa48:	4619      	mov	r1, r3
 800aa4a:	4610      	mov	r0, r2
 800aa4c:	f7fe fbcb 	bl	80091e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aa50:	4b0a      	ldr	r3, [pc, #40]	; (800aa7c <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	68ba      	ldr	r2, [r7, #8]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d202      	bcs.n	800aa60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aa5a:	4a08      	ldr	r2, [pc, #32]	; (800aa7c <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	6013      	str	r3, [r2, #0]
}
 800aa60:	bf00      	nop
 800aa62:	3710      	adds	r7, #16
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	200011ec 	.word	0x200011ec
 800aa6c:	20000d14 	.word	0x20000d14
 800aa70:	200011d4 	.word	0x200011d4
 800aa74:	200011a4 	.word	0x200011a4
 800aa78:	200011a0 	.word	0x200011a0
 800aa7c:	20001208 	.word	0x20001208

0800aa80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b08a      	sub	sp, #40	; 0x28
 800aa84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aa86:	2300      	movs	r3, #0
 800aa88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aa8a:	f000 fb07 	bl	800b09c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aa8e:	4b1c      	ldr	r3, [pc, #112]	; (800ab00 <xTimerCreateTimerTask+0x80>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d021      	beq.n	800aada <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aa96:	2300      	movs	r3, #0
 800aa98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800aa9e:	1d3a      	adds	r2, r7, #4
 800aaa0:	f107 0108 	add.w	r1, r7, #8
 800aaa4:	f107 030c 	add.w	r3, r7, #12
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7fe fb31 	bl	8009110 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aaae:	6879      	ldr	r1, [r7, #4]
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	9202      	str	r2, [sp, #8]
 800aab6:	9301      	str	r3, [sp, #4]
 800aab8:	2302      	movs	r3, #2
 800aaba:	9300      	str	r3, [sp, #0]
 800aabc:	2300      	movs	r3, #0
 800aabe:	460a      	mov	r2, r1
 800aac0:	4910      	ldr	r1, [pc, #64]	; (800ab04 <xTimerCreateTimerTask+0x84>)
 800aac2:	4811      	ldr	r0, [pc, #68]	; (800ab08 <xTimerCreateTimerTask+0x88>)
 800aac4:	f7ff f8de 	bl	8009c84 <xTaskCreateStatic>
 800aac8:	4603      	mov	r3, r0
 800aaca:	4a10      	ldr	r2, [pc, #64]	; (800ab0c <xTimerCreateTimerTask+0x8c>)
 800aacc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aace:	4b0f      	ldr	r3, [pc, #60]	; (800ab0c <xTimerCreateTimerTask+0x8c>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d001      	beq.n	800aada <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aad6:	2301      	movs	r3, #1
 800aad8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d10a      	bne.n	800aaf6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800aae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae4:	f383 8811 	msr	BASEPRI, r3
 800aae8:	f3bf 8f6f 	isb	sy
 800aaec:	f3bf 8f4f 	dsb	sy
 800aaf0:	613b      	str	r3, [r7, #16]
}
 800aaf2:	bf00      	nop
 800aaf4:	e7fe      	b.n	800aaf4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aaf6:	697b      	ldr	r3, [r7, #20]
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3718      	adds	r7, #24
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}
 800ab00:	20001244 	.word	0x20001244
 800ab04:	080126e8 	.word	0x080126e8
 800ab08:	0800ac45 	.word	0x0800ac45
 800ab0c:	20001248 	.word	0x20001248

0800ab10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b08a      	sub	sp, #40	; 0x28
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	60f8      	str	r0, [r7, #12]
 800ab18:	60b9      	str	r1, [r7, #8]
 800ab1a:	607a      	str	r2, [r7, #4]
 800ab1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d10a      	bne.n	800ab3e <xTimerGenericCommand+0x2e>
	__asm volatile
 800ab28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab2c:	f383 8811 	msr	BASEPRI, r3
 800ab30:	f3bf 8f6f 	isb	sy
 800ab34:	f3bf 8f4f 	dsb	sy
 800ab38:	623b      	str	r3, [r7, #32]
}
 800ab3a:	bf00      	nop
 800ab3c:	e7fe      	b.n	800ab3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ab3e:	4b1a      	ldr	r3, [pc, #104]	; (800aba8 <xTimerGenericCommand+0x98>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d02a      	beq.n	800ab9c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	2b05      	cmp	r3, #5
 800ab56:	dc18      	bgt.n	800ab8a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ab58:	f7ff feb2 	bl	800a8c0 <xTaskGetSchedulerState>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b02      	cmp	r3, #2
 800ab60:	d109      	bne.n	800ab76 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ab62:	4b11      	ldr	r3, [pc, #68]	; (800aba8 <xTimerGenericCommand+0x98>)
 800ab64:	6818      	ldr	r0, [r3, #0]
 800ab66:	f107 0110 	add.w	r1, r7, #16
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab6e:	f7fe fca1 	bl	80094b4 <xQueueGenericSend>
 800ab72:	6278      	str	r0, [r7, #36]	; 0x24
 800ab74:	e012      	b.n	800ab9c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ab76:	4b0c      	ldr	r3, [pc, #48]	; (800aba8 <xTimerGenericCommand+0x98>)
 800ab78:	6818      	ldr	r0, [r3, #0]
 800ab7a:	f107 0110 	add.w	r1, r7, #16
 800ab7e:	2300      	movs	r3, #0
 800ab80:	2200      	movs	r2, #0
 800ab82:	f7fe fc97 	bl	80094b4 <xQueueGenericSend>
 800ab86:	6278      	str	r0, [r7, #36]	; 0x24
 800ab88:	e008      	b.n	800ab9c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ab8a:	4b07      	ldr	r3, [pc, #28]	; (800aba8 <xTimerGenericCommand+0x98>)
 800ab8c:	6818      	ldr	r0, [r3, #0]
 800ab8e:	f107 0110 	add.w	r1, r7, #16
 800ab92:	2300      	movs	r3, #0
 800ab94:	683a      	ldr	r2, [r7, #0]
 800ab96:	f7fe fd8b 	bl	80096b0 <xQueueGenericSendFromISR>
 800ab9a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ab9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3728      	adds	r7, #40	; 0x28
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	20001244 	.word	0x20001244

0800abac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b088      	sub	sp, #32
 800abb0:	af02      	add	r7, sp, #8
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abb6:	4b22      	ldr	r3, [pc, #136]	; (800ac40 <prvProcessExpiredTimer+0x94>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	3304      	adds	r3, #4
 800abc4:	4618      	mov	r0, r3
 800abc6:	f7fe fb47 	bl	8009258 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abd0:	f003 0304 	and.w	r3, r3, #4
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d022      	beq.n	800ac1e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	699a      	ldr	r2, [r3, #24]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	18d1      	adds	r1, r2, r3
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	683a      	ldr	r2, [r7, #0]
 800abe4:	6978      	ldr	r0, [r7, #20]
 800abe6:	f000 f8d1 	bl	800ad8c <prvInsertTimerInActiveList>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d01f      	beq.n	800ac30 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800abf0:	2300      	movs	r3, #0
 800abf2:	9300      	str	r3, [sp, #0]
 800abf4:	2300      	movs	r3, #0
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	2100      	movs	r1, #0
 800abfa:	6978      	ldr	r0, [r7, #20]
 800abfc:	f7ff ff88 	bl	800ab10 <xTimerGenericCommand>
 800ac00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d113      	bne.n	800ac30 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ac08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac0c:	f383 8811 	msr	BASEPRI, r3
 800ac10:	f3bf 8f6f 	isb	sy
 800ac14:	f3bf 8f4f 	dsb	sy
 800ac18:	60fb      	str	r3, [r7, #12]
}
 800ac1a:	bf00      	nop
 800ac1c:	e7fe      	b.n	800ac1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac24:	f023 0301 	bic.w	r3, r3, #1
 800ac28:	b2da      	uxtb	r2, r3
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	6a1b      	ldr	r3, [r3, #32]
 800ac34:	6978      	ldr	r0, [r7, #20]
 800ac36:	4798      	blx	r3
}
 800ac38:	bf00      	nop
 800ac3a:	3718      	adds	r7, #24
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	2000123c 	.word	0x2000123c

0800ac44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac4c:	f107 0308 	add.w	r3, r7, #8
 800ac50:	4618      	mov	r0, r3
 800ac52:	f000 f857 	bl	800ad04 <prvGetNextExpireTime>
 800ac56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	68f8      	ldr	r0, [r7, #12]
 800ac5e:	f000 f803 	bl	800ac68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ac62:	f000 f8d5 	bl	800ae10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac66:	e7f1      	b.n	800ac4c <prvTimerTask+0x8>

0800ac68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ac72:	f7ff fa43 	bl	800a0fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac76:	f107 0308 	add.w	r3, r7, #8
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f000 f866 	bl	800ad4c <prvSampleTimeNow>
 800ac80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d130      	bne.n	800acea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d10a      	bne.n	800aca4 <prvProcessTimerOrBlockTask+0x3c>
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d806      	bhi.n	800aca4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ac96:	f7ff fa3f 	bl	800a118 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ac9a:	68f9      	ldr	r1, [r7, #12]
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f7ff ff85 	bl	800abac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aca2:	e024      	b.n	800acee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d008      	beq.n	800acbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800acaa:	4b13      	ldr	r3, [pc, #76]	; (800acf8 <prvProcessTimerOrBlockTask+0x90>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d101      	bne.n	800acb8 <prvProcessTimerOrBlockTask+0x50>
 800acb4:	2301      	movs	r3, #1
 800acb6:	e000      	b.n	800acba <prvProcessTimerOrBlockTask+0x52>
 800acb8:	2300      	movs	r3, #0
 800acba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800acbc:	4b0f      	ldr	r3, [pc, #60]	; (800acfc <prvProcessTimerOrBlockTask+0x94>)
 800acbe:	6818      	ldr	r0, [r3, #0]
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	683a      	ldr	r2, [r7, #0]
 800acc8:	4619      	mov	r1, r3
 800acca:	f7fe ffa7 	bl	8009c1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800acce:	f7ff fa23 	bl	800a118 <xTaskResumeAll>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d10a      	bne.n	800acee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800acd8:	4b09      	ldr	r3, [pc, #36]	; (800ad00 <prvProcessTimerOrBlockTask+0x98>)
 800acda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acde:	601a      	str	r2, [r3, #0]
 800ace0:	f3bf 8f4f 	dsb	sy
 800ace4:	f3bf 8f6f 	isb	sy
}
 800ace8:	e001      	b.n	800acee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800acea:	f7ff fa15 	bl	800a118 <xTaskResumeAll>
}
 800acee:	bf00      	nop
 800acf0:	3710      	adds	r7, #16
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	20001240 	.word	0x20001240
 800acfc:	20001244 	.word	0x20001244
 800ad00:	e000ed04 	.word	0xe000ed04

0800ad04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ad04:	b480      	push	{r7}
 800ad06:	b085      	sub	sp, #20
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ad0c:	4b0e      	ldr	r3, [pc, #56]	; (800ad48 <prvGetNextExpireTime+0x44>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d101      	bne.n	800ad1a <prvGetNextExpireTime+0x16>
 800ad16:	2201      	movs	r2, #1
 800ad18:	e000      	b.n	800ad1c <prvGetNextExpireTime+0x18>
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d105      	bne.n	800ad34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad28:	4b07      	ldr	r3, [pc, #28]	; (800ad48 <prvGetNextExpireTime+0x44>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	68db      	ldr	r3, [r3, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	60fb      	str	r3, [r7, #12]
 800ad32:	e001      	b.n	800ad38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ad34:	2300      	movs	r3, #0
 800ad36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ad38:	68fb      	ldr	r3, [r7, #12]
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3714      	adds	r7, #20
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	2000123c 	.word	0x2000123c

0800ad4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ad54:	f7ff fa7e 	bl	800a254 <xTaskGetTickCount>
 800ad58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ad5a:	4b0b      	ldr	r3, [pc, #44]	; (800ad88 <prvSampleTimeNow+0x3c>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	68fa      	ldr	r2, [r7, #12]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d205      	bcs.n	800ad70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ad64:	f000 f936 	bl	800afd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	601a      	str	r2, [r3, #0]
 800ad6e:	e002      	b.n	800ad76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ad76:	4a04      	ldr	r2, [pc, #16]	; (800ad88 <prvSampleTimeNow+0x3c>)
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	2000124c 	.word	0x2000124c

0800ad8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b086      	sub	sp, #24
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	60b9      	str	r1, [r7, #8]
 800ad96:	607a      	str	r2, [r7, #4]
 800ad98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	68ba      	ldr	r2, [r7, #8]
 800ada2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800adaa:	68ba      	ldr	r2, [r7, #8]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	429a      	cmp	r2, r3
 800adb0:	d812      	bhi.n	800add8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	1ad2      	subs	r2, r2, r3
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	699b      	ldr	r3, [r3, #24]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d302      	bcc.n	800adc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800adc0:	2301      	movs	r3, #1
 800adc2:	617b      	str	r3, [r7, #20]
 800adc4:	e01b      	b.n	800adfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800adc6:	4b10      	ldr	r3, [pc, #64]	; (800ae08 <prvInsertTimerInActiveList+0x7c>)
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	3304      	adds	r3, #4
 800adce:	4619      	mov	r1, r3
 800add0:	4610      	mov	r0, r2
 800add2:	f7fe fa08 	bl	80091e6 <vListInsert>
 800add6:	e012      	b.n	800adfe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	429a      	cmp	r2, r3
 800adde:	d206      	bcs.n	800adee <prvInsertTimerInActiveList+0x62>
 800ade0:	68ba      	ldr	r2, [r7, #8]
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d302      	bcc.n	800adee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ade8:	2301      	movs	r3, #1
 800adea:	617b      	str	r3, [r7, #20]
 800adec:	e007      	b.n	800adfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800adee:	4b07      	ldr	r3, [pc, #28]	; (800ae0c <prvInsertTimerInActiveList+0x80>)
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	3304      	adds	r3, #4
 800adf6:	4619      	mov	r1, r3
 800adf8:	4610      	mov	r0, r2
 800adfa:	f7fe f9f4 	bl	80091e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800adfe:	697b      	ldr	r3, [r7, #20]
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3718      	adds	r7, #24
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}
 800ae08:	20001240 	.word	0x20001240
 800ae0c:	2000123c 	.word	0x2000123c

0800ae10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b08e      	sub	sp, #56	; 0x38
 800ae14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae16:	e0ca      	b.n	800afae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	da18      	bge.n	800ae50 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ae1e:	1d3b      	adds	r3, r7, #4
 800ae20:	3304      	adds	r3, #4
 800ae22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ae24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d10a      	bne.n	800ae40 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ae2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae2e:	f383 8811 	msr	BASEPRI, r3
 800ae32:	f3bf 8f6f 	isb	sy
 800ae36:	f3bf 8f4f 	dsb	sy
 800ae3a:	61fb      	str	r3, [r7, #28]
}
 800ae3c:	bf00      	nop
 800ae3e:	e7fe      	b.n	800ae3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ae40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae46:	6850      	ldr	r0, [r2, #4]
 800ae48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae4a:	6892      	ldr	r2, [r2, #8]
 800ae4c:	4611      	mov	r1, r2
 800ae4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	f2c0 80aa 	blt.w	800afac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ae5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5e:	695b      	ldr	r3, [r3, #20]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d004      	beq.n	800ae6e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae66:	3304      	adds	r3, #4
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7fe f9f5 	bl	8009258 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae6e:	463b      	mov	r3, r7
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7ff ff6b 	bl	800ad4c <prvSampleTimeNow>
 800ae76:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2b09      	cmp	r3, #9
 800ae7c:	f200 8097 	bhi.w	800afae <prvProcessReceivedCommands+0x19e>
 800ae80:	a201      	add	r2, pc, #4	; (adr r2, 800ae88 <prvProcessReceivedCommands+0x78>)
 800ae82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae86:	bf00      	nop
 800ae88:	0800aeb1 	.word	0x0800aeb1
 800ae8c:	0800aeb1 	.word	0x0800aeb1
 800ae90:	0800aeb1 	.word	0x0800aeb1
 800ae94:	0800af25 	.word	0x0800af25
 800ae98:	0800af39 	.word	0x0800af39
 800ae9c:	0800af83 	.word	0x0800af83
 800aea0:	0800aeb1 	.word	0x0800aeb1
 800aea4:	0800aeb1 	.word	0x0800aeb1
 800aea8:	0800af25 	.word	0x0800af25
 800aeac:	0800af39 	.word	0x0800af39
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aeb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aeb6:	f043 0301 	orr.w	r3, r3, #1
 800aeba:	b2da      	uxtb	r2, r3
 800aebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aebe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aec2:	68ba      	ldr	r2, [r7, #8]
 800aec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec6:	699b      	ldr	r3, [r3, #24]
 800aec8:	18d1      	adds	r1, r2, r3
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aed0:	f7ff ff5c 	bl	800ad8c <prvInsertTimerInActiveList>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d069      	beq.n	800afae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aeda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aedc:	6a1b      	ldr	r3, [r3, #32]
 800aede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aee0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aee8:	f003 0304 	and.w	r3, r3, #4
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d05e      	beq.n	800afae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aef0:	68ba      	ldr	r2, [r7, #8]
 800aef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef4:	699b      	ldr	r3, [r3, #24]
 800aef6:	441a      	add	r2, r3
 800aef8:	2300      	movs	r3, #0
 800aefa:	9300      	str	r3, [sp, #0]
 800aefc:	2300      	movs	r3, #0
 800aefe:	2100      	movs	r1, #0
 800af00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af02:	f7ff fe05 	bl	800ab10 <xTimerGenericCommand>
 800af06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800af08:	6a3b      	ldr	r3, [r7, #32]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d14f      	bne.n	800afae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800af0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	61bb      	str	r3, [r7, #24]
}
 800af20:	bf00      	nop
 800af22:	e7fe      	b.n	800af22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af2a:	f023 0301 	bic.w	r3, r3, #1
 800af2e:	b2da      	uxtb	r2, r3
 800af30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800af36:	e03a      	b.n	800afae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af3e:	f043 0301 	orr.w	r3, r3, #1
 800af42:	b2da      	uxtb	r2, r3
 800af44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800af4a:	68ba      	ldr	r2, [r7, #8]
 800af4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af4e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800af50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af52:	699b      	ldr	r3, [r3, #24]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d10a      	bne.n	800af6e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800af58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af5c:	f383 8811 	msr	BASEPRI, r3
 800af60:	f3bf 8f6f 	isb	sy
 800af64:	f3bf 8f4f 	dsb	sy
 800af68:	617b      	str	r3, [r7, #20]
}
 800af6a:	bf00      	nop
 800af6c:	e7fe      	b.n	800af6c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800af6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af70:	699a      	ldr	r2, [r3, #24]
 800af72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af74:	18d1      	adds	r1, r2, r3
 800af76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af7c:	f7ff ff06 	bl	800ad8c <prvInsertTimerInActiveList>
					break;
 800af80:	e015      	b.n	800afae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800af82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af88:	f003 0302 	and.w	r3, r3, #2
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d103      	bne.n	800af98 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800af90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af92:	f000 fbdd 	bl	800b750 <vPortFree>
 800af96:	e00a      	b.n	800afae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af9e:	f023 0301 	bic.w	r3, r3, #1
 800afa2:	b2da      	uxtb	r2, r3
 800afa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800afaa:	e000      	b.n	800afae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800afac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800afae:	4b08      	ldr	r3, [pc, #32]	; (800afd0 <prvProcessReceivedCommands+0x1c0>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	1d39      	adds	r1, r7, #4
 800afb4:	2200      	movs	r2, #0
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7fe fc16 	bl	80097e8 <xQueueReceive>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	f47f af2a 	bne.w	800ae18 <prvProcessReceivedCommands+0x8>
	}
}
 800afc4:	bf00      	nop
 800afc6:	bf00      	nop
 800afc8:	3730      	adds	r7, #48	; 0x30
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	20001244 	.word	0x20001244

0800afd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b088      	sub	sp, #32
 800afd8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800afda:	e048      	b.n	800b06e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800afdc:	4b2d      	ldr	r3, [pc, #180]	; (800b094 <prvSwitchTimerLists+0xc0>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	68db      	ldr	r3, [r3, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afe6:	4b2b      	ldr	r3, [pc, #172]	; (800b094 <prvSwitchTimerLists+0xc0>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	68db      	ldr	r3, [r3, #12]
 800afee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	3304      	adds	r3, #4
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7fe f92f 	bl	8009258 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	6a1b      	ldr	r3, [r3, #32]
 800affe:	68f8      	ldr	r0, [r7, #12]
 800b000:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b008:	f003 0304 	and.w	r3, r3, #4
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d02e      	beq.n	800b06e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	699b      	ldr	r3, [r3, #24]
 800b014:	693a      	ldr	r2, [r7, #16]
 800b016:	4413      	add	r3, r2
 800b018:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b01a:	68ba      	ldr	r2, [r7, #8]
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d90e      	bls.n	800b040 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	68ba      	ldr	r2, [r7, #8]
 800b026:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	68fa      	ldr	r2, [r7, #12]
 800b02c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b02e:	4b19      	ldr	r3, [pc, #100]	; (800b094 <prvSwitchTimerLists+0xc0>)
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	3304      	adds	r3, #4
 800b036:	4619      	mov	r1, r3
 800b038:	4610      	mov	r0, r2
 800b03a:	f7fe f8d4 	bl	80091e6 <vListInsert>
 800b03e:	e016      	b.n	800b06e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b040:	2300      	movs	r3, #0
 800b042:	9300      	str	r3, [sp, #0]
 800b044:	2300      	movs	r3, #0
 800b046:	693a      	ldr	r2, [r7, #16]
 800b048:	2100      	movs	r1, #0
 800b04a:	68f8      	ldr	r0, [r7, #12]
 800b04c:	f7ff fd60 	bl	800ab10 <xTimerGenericCommand>
 800b050:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d10a      	bne.n	800b06e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05c:	f383 8811 	msr	BASEPRI, r3
 800b060:	f3bf 8f6f 	isb	sy
 800b064:	f3bf 8f4f 	dsb	sy
 800b068:	603b      	str	r3, [r7, #0]
}
 800b06a:	bf00      	nop
 800b06c:	e7fe      	b.n	800b06c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b06e:	4b09      	ldr	r3, [pc, #36]	; (800b094 <prvSwitchTimerLists+0xc0>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d1b1      	bne.n	800afdc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b078:	4b06      	ldr	r3, [pc, #24]	; (800b094 <prvSwitchTimerLists+0xc0>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b07e:	4b06      	ldr	r3, [pc, #24]	; (800b098 <prvSwitchTimerLists+0xc4>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4a04      	ldr	r2, [pc, #16]	; (800b094 <prvSwitchTimerLists+0xc0>)
 800b084:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b086:	4a04      	ldr	r2, [pc, #16]	; (800b098 <prvSwitchTimerLists+0xc4>)
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	6013      	str	r3, [r2, #0]
}
 800b08c:	bf00      	nop
 800b08e:	3718      	adds	r7, #24
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}
 800b094:	2000123c 	.word	0x2000123c
 800b098:	20001240 	.word	0x20001240

0800b09c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b0a2:	f000 f967 	bl	800b374 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b0a6:	4b15      	ldr	r3, [pc, #84]	; (800b0fc <prvCheckForValidListAndQueue+0x60>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d120      	bne.n	800b0f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b0ae:	4814      	ldr	r0, [pc, #80]	; (800b100 <prvCheckForValidListAndQueue+0x64>)
 800b0b0:	f7fe f848 	bl	8009144 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b0b4:	4813      	ldr	r0, [pc, #76]	; (800b104 <prvCheckForValidListAndQueue+0x68>)
 800b0b6:	f7fe f845 	bl	8009144 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b0ba:	4b13      	ldr	r3, [pc, #76]	; (800b108 <prvCheckForValidListAndQueue+0x6c>)
 800b0bc:	4a10      	ldr	r2, [pc, #64]	; (800b100 <prvCheckForValidListAndQueue+0x64>)
 800b0be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b0c0:	4b12      	ldr	r3, [pc, #72]	; (800b10c <prvCheckForValidListAndQueue+0x70>)
 800b0c2:	4a10      	ldr	r2, [pc, #64]	; (800b104 <prvCheckForValidListAndQueue+0x68>)
 800b0c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	9300      	str	r3, [sp, #0]
 800b0ca:	4b11      	ldr	r3, [pc, #68]	; (800b110 <prvCheckForValidListAndQueue+0x74>)
 800b0cc:	4a11      	ldr	r2, [pc, #68]	; (800b114 <prvCheckForValidListAndQueue+0x78>)
 800b0ce:	2110      	movs	r1, #16
 800b0d0:	200a      	movs	r0, #10
 800b0d2:	f7fe f953 	bl	800937c <xQueueGenericCreateStatic>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	4a08      	ldr	r2, [pc, #32]	; (800b0fc <prvCheckForValidListAndQueue+0x60>)
 800b0da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b0dc:	4b07      	ldr	r3, [pc, #28]	; (800b0fc <prvCheckForValidListAndQueue+0x60>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d005      	beq.n	800b0f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b0e4:	4b05      	ldr	r3, [pc, #20]	; (800b0fc <prvCheckForValidListAndQueue+0x60>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	490b      	ldr	r1, [pc, #44]	; (800b118 <prvCheckForValidListAndQueue+0x7c>)
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7fe fd6c 	bl	8009bc8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b0f0:	f000 f970 	bl	800b3d4 <vPortExitCritical>
}
 800b0f4:	bf00      	nop
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	20001244 	.word	0x20001244
 800b100:	20001214 	.word	0x20001214
 800b104:	20001228 	.word	0x20001228
 800b108:	2000123c 	.word	0x2000123c
 800b10c:	20001240 	.word	0x20001240
 800b110:	200012f0 	.word	0x200012f0
 800b114:	20001250 	.word	0x20001250
 800b118:	080126f0 	.word	0x080126f0

0800b11c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b11c:	b480      	push	{r7}
 800b11e:	b085      	sub	sp, #20
 800b120:	af00      	add	r7, sp, #0
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	60b9      	str	r1, [r7, #8]
 800b126:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	3b04      	subs	r3, #4
 800b12c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b134:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	3b04      	subs	r3, #4
 800b13a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	f023 0201 	bic.w	r2, r3, #1
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	3b04      	subs	r3, #4
 800b14a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b14c:	4a0c      	ldr	r2, [pc, #48]	; (800b180 <pxPortInitialiseStack+0x64>)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	3b14      	subs	r3, #20
 800b156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	3b04      	subs	r3, #4
 800b162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f06f 0202 	mvn.w	r2, #2
 800b16a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	3b20      	subs	r3, #32
 800b170:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b172:	68fb      	ldr	r3, [r7, #12]
}
 800b174:	4618      	mov	r0, r3
 800b176:	3714      	adds	r7, #20
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr
 800b180:	0800b185 	.word	0x0800b185

0800b184 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b184:	b480      	push	{r7}
 800b186:	b085      	sub	sp, #20
 800b188:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b18a:	2300      	movs	r3, #0
 800b18c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b18e:	4b12      	ldr	r3, [pc, #72]	; (800b1d8 <prvTaskExitError+0x54>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b196:	d00a      	beq.n	800b1ae <prvTaskExitError+0x2a>
	__asm volatile
 800b198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b19c:	f383 8811 	msr	BASEPRI, r3
 800b1a0:	f3bf 8f6f 	isb	sy
 800b1a4:	f3bf 8f4f 	dsb	sy
 800b1a8:	60fb      	str	r3, [r7, #12]
}
 800b1aa:	bf00      	nop
 800b1ac:	e7fe      	b.n	800b1ac <prvTaskExitError+0x28>
	__asm volatile
 800b1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b2:	f383 8811 	msr	BASEPRI, r3
 800b1b6:	f3bf 8f6f 	isb	sy
 800b1ba:	f3bf 8f4f 	dsb	sy
 800b1be:	60bb      	str	r3, [r7, #8]
}
 800b1c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b1c2:	bf00      	nop
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d0fc      	beq.n	800b1c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b1ca:	bf00      	nop
 800b1cc:	bf00      	nop
 800b1ce:	3714      	adds	r7, #20
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr
 800b1d8:	200000e8 	.word	0x200000e8
 800b1dc:	00000000 	.word	0x00000000

0800b1e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b1e0:	4b07      	ldr	r3, [pc, #28]	; (800b200 <pxCurrentTCBConst2>)
 800b1e2:	6819      	ldr	r1, [r3, #0]
 800b1e4:	6808      	ldr	r0, [r1, #0]
 800b1e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ea:	f380 8809 	msr	PSP, r0
 800b1ee:	f3bf 8f6f 	isb	sy
 800b1f2:	f04f 0000 	mov.w	r0, #0
 800b1f6:	f380 8811 	msr	BASEPRI, r0
 800b1fa:	4770      	bx	lr
 800b1fc:	f3af 8000 	nop.w

0800b200 <pxCurrentTCBConst2>:
 800b200:	20000d14 	.word	0x20000d14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b204:	bf00      	nop
 800b206:	bf00      	nop

0800b208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b208:	4808      	ldr	r0, [pc, #32]	; (800b22c <prvPortStartFirstTask+0x24>)
 800b20a:	6800      	ldr	r0, [r0, #0]
 800b20c:	6800      	ldr	r0, [r0, #0]
 800b20e:	f380 8808 	msr	MSP, r0
 800b212:	f04f 0000 	mov.w	r0, #0
 800b216:	f380 8814 	msr	CONTROL, r0
 800b21a:	b662      	cpsie	i
 800b21c:	b661      	cpsie	f
 800b21e:	f3bf 8f4f 	dsb	sy
 800b222:	f3bf 8f6f 	isb	sy
 800b226:	df00      	svc	0
 800b228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b22a:	bf00      	nop
 800b22c:	e000ed08 	.word	0xe000ed08

0800b230 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b086      	sub	sp, #24
 800b234:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b236:	4b46      	ldr	r3, [pc, #280]	; (800b350 <xPortStartScheduler+0x120>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	4a46      	ldr	r2, [pc, #280]	; (800b354 <xPortStartScheduler+0x124>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d10a      	bne.n	800b256 <xPortStartScheduler+0x26>
	__asm volatile
 800b240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b244:	f383 8811 	msr	BASEPRI, r3
 800b248:	f3bf 8f6f 	isb	sy
 800b24c:	f3bf 8f4f 	dsb	sy
 800b250:	613b      	str	r3, [r7, #16]
}
 800b252:	bf00      	nop
 800b254:	e7fe      	b.n	800b254 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b256:	4b3e      	ldr	r3, [pc, #248]	; (800b350 <xPortStartScheduler+0x120>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a3f      	ldr	r2, [pc, #252]	; (800b358 <xPortStartScheduler+0x128>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d10a      	bne.n	800b276 <xPortStartScheduler+0x46>
	__asm volatile
 800b260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b264:	f383 8811 	msr	BASEPRI, r3
 800b268:	f3bf 8f6f 	isb	sy
 800b26c:	f3bf 8f4f 	dsb	sy
 800b270:	60fb      	str	r3, [r7, #12]
}
 800b272:	bf00      	nop
 800b274:	e7fe      	b.n	800b274 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b276:	4b39      	ldr	r3, [pc, #228]	; (800b35c <xPortStartScheduler+0x12c>)
 800b278:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	22ff      	movs	r2, #255	; 0xff
 800b286:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b290:	78fb      	ldrb	r3, [r7, #3]
 800b292:	b2db      	uxtb	r3, r3
 800b294:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b298:	b2da      	uxtb	r2, r3
 800b29a:	4b31      	ldr	r3, [pc, #196]	; (800b360 <xPortStartScheduler+0x130>)
 800b29c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b29e:	4b31      	ldr	r3, [pc, #196]	; (800b364 <xPortStartScheduler+0x134>)
 800b2a0:	2207      	movs	r2, #7
 800b2a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2a4:	e009      	b.n	800b2ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b2a6:	4b2f      	ldr	r3, [pc, #188]	; (800b364 <xPortStartScheduler+0x134>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	3b01      	subs	r3, #1
 800b2ac:	4a2d      	ldr	r2, [pc, #180]	; (800b364 <xPortStartScheduler+0x134>)
 800b2ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b2b0:	78fb      	ldrb	r3, [r7, #3]
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	005b      	lsls	r3, r3, #1
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2ba:	78fb      	ldrb	r3, [r7, #3]
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2c2:	2b80      	cmp	r3, #128	; 0x80
 800b2c4:	d0ef      	beq.n	800b2a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b2c6:	4b27      	ldr	r3, [pc, #156]	; (800b364 <xPortStartScheduler+0x134>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f1c3 0307 	rsb	r3, r3, #7
 800b2ce:	2b04      	cmp	r3, #4
 800b2d0:	d00a      	beq.n	800b2e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d6:	f383 8811 	msr	BASEPRI, r3
 800b2da:	f3bf 8f6f 	isb	sy
 800b2de:	f3bf 8f4f 	dsb	sy
 800b2e2:	60bb      	str	r3, [r7, #8]
}
 800b2e4:	bf00      	nop
 800b2e6:	e7fe      	b.n	800b2e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b2e8:	4b1e      	ldr	r3, [pc, #120]	; (800b364 <xPortStartScheduler+0x134>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	021b      	lsls	r3, r3, #8
 800b2ee:	4a1d      	ldr	r2, [pc, #116]	; (800b364 <xPortStartScheduler+0x134>)
 800b2f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b2f2:	4b1c      	ldr	r3, [pc, #112]	; (800b364 <xPortStartScheduler+0x134>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b2fa:	4a1a      	ldr	r2, [pc, #104]	; (800b364 <xPortStartScheduler+0x134>)
 800b2fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	b2da      	uxtb	r2, r3
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b306:	4b18      	ldr	r3, [pc, #96]	; (800b368 <xPortStartScheduler+0x138>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4a17      	ldr	r2, [pc, #92]	; (800b368 <xPortStartScheduler+0x138>)
 800b30c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b310:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b312:	4b15      	ldr	r3, [pc, #84]	; (800b368 <xPortStartScheduler+0x138>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4a14      	ldr	r2, [pc, #80]	; (800b368 <xPortStartScheduler+0x138>)
 800b318:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b31c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b31e:	f000 f8dd 	bl	800b4dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b322:	4b12      	ldr	r3, [pc, #72]	; (800b36c <xPortStartScheduler+0x13c>)
 800b324:	2200      	movs	r2, #0
 800b326:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b328:	f000 f8fc 	bl	800b524 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b32c:	4b10      	ldr	r3, [pc, #64]	; (800b370 <xPortStartScheduler+0x140>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4a0f      	ldr	r2, [pc, #60]	; (800b370 <xPortStartScheduler+0x140>)
 800b332:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b336:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b338:	f7ff ff66 	bl	800b208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b33c:	f7ff f854 	bl	800a3e8 <vTaskSwitchContext>
	prvTaskExitError();
 800b340:	f7ff ff20 	bl	800b184 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b344:	2300      	movs	r3, #0
}
 800b346:	4618      	mov	r0, r3
 800b348:	3718      	adds	r7, #24
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	e000ed00 	.word	0xe000ed00
 800b354:	410fc271 	.word	0x410fc271
 800b358:	410fc270 	.word	0x410fc270
 800b35c:	e000e400 	.word	0xe000e400
 800b360:	20001340 	.word	0x20001340
 800b364:	20001344 	.word	0x20001344
 800b368:	e000ed20 	.word	0xe000ed20
 800b36c:	200000e8 	.word	0x200000e8
 800b370:	e000ef34 	.word	0xe000ef34

0800b374 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
	__asm volatile
 800b37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37e:	f383 8811 	msr	BASEPRI, r3
 800b382:	f3bf 8f6f 	isb	sy
 800b386:	f3bf 8f4f 	dsb	sy
 800b38a:	607b      	str	r3, [r7, #4]
}
 800b38c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b38e:	4b0f      	ldr	r3, [pc, #60]	; (800b3cc <vPortEnterCritical+0x58>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	3301      	adds	r3, #1
 800b394:	4a0d      	ldr	r2, [pc, #52]	; (800b3cc <vPortEnterCritical+0x58>)
 800b396:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b398:	4b0c      	ldr	r3, [pc, #48]	; (800b3cc <vPortEnterCritical+0x58>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d10f      	bne.n	800b3c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b3a0:	4b0b      	ldr	r3, [pc, #44]	; (800b3d0 <vPortEnterCritical+0x5c>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d00a      	beq.n	800b3c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ae:	f383 8811 	msr	BASEPRI, r3
 800b3b2:	f3bf 8f6f 	isb	sy
 800b3b6:	f3bf 8f4f 	dsb	sy
 800b3ba:	603b      	str	r3, [r7, #0]
}
 800b3bc:	bf00      	nop
 800b3be:	e7fe      	b.n	800b3be <vPortEnterCritical+0x4a>
	}
}
 800b3c0:	bf00      	nop
 800b3c2:	370c      	adds	r7, #12
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr
 800b3cc:	200000e8 	.word	0x200000e8
 800b3d0:	e000ed04 	.word	0xe000ed04

0800b3d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b3da:	4b12      	ldr	r3, [pc, #72]	; (800b424 <vPortExitCritical+0x50>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d10a      	bne.n	800b3f8 <vPortExitCritical+0x24>
	__asm volatile
 800b3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e6:	f383 8811 	msr	BASEPRI, r3
 800b3ea:	f3bf 8f6f 	isb	sy
 800b3ee:	f3bf 8f4f 	dsb	sy
 800b3f2:	607b      	str	r3, [r7, #4]
}
 800b3f4:	bf00      	nop
 800b3f6:	e7fe      	b.n	800b3f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b3f8:	4b0a      	ldr	r3, [pc, #40]	; (800b424 <vPortExitCritical+0x50>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	3b01      	subs	r3, #1
 800b3fe:	4a09      	ldr	r2, [pc, #36]	; (800b424 <vPortExitCritical+0x50>)
 800b400:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b402:	4b08      	ldr	r3, [pc, #32]	; (800b424 <vPortExitCritical+0x50>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d105      	bne.n	800b416 <vPortExitCritical+0x42>
 800b40a:	2300      	movs	r3, #0
 800b40c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	f383 8811 	msr	BASEPRI, r3
}
 800b414:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b416:	bf00      	nop
 800b418:	370c      	adds	r7, #12
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr
 800b422:	bf00      	nop
 800b424:	200000e8 	.word	0x200000e8
	...

0800b430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b430:	f3ef 8009 	mrs	r0, PSP
 800b434:	f3bf 8f6f 	isb	sy
 800b438:	4b15      	ldr	r3, [pc, #84]	; (800b490 <pxCurrentTCBConst>)
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	f01e 0f10 	tst.w	lr, #16
 800b440:	bf08      	it	eq
 800b442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b44a:	6010      	str	r0, [r2, #0]
 800b44c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b450:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b454:	f380 8811 	msr	BASEPRI, r0
 800b458:	f3bf 8f4f 	dsb	sy
 800b45c:	f3bf 8f6f 	isb	sy
 800b460:	f7fe ffc2 	bl	800a3e8 <vTaskSwitchContext>
 800b464:	f04f 0000 	mov.w	r0, #0
 800b468:	f380 8811 	msr	BASEPRI, r0
 800b46c:	bc09      	pop	{r0, r3}
 800b46e:	6819      	ldr	r1, [r3, #0]
 800b470:	6808      	ldr	r0, [r1, #0]
 800b472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b476:	f01e 0f10 	tst.w	lr, #16
 800b47a:	bf08      	it	eq
 800b47c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b480:	f380 8809 	msr	PSP, r0
 800b484:	f3bf 8f6f 	isb	sy
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop
 800b48c:	f3af 8000 	nop.w

0800b490 <pxCurrentTCBConst>:
 800b490:	20000d14 	.word	0x20000d14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b494:	bf00      	nop
 800b496:	bf00      	nop

0800b498 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
	__asm volatile
 800b49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a2:	f383 8811 	msr	BASEPRI, r3
 800b4a6:	f3bf 8f6f 	isb	sy
 800b4aa:	f3bf 8f4f 	dsb	sy
 800b4ae:	607b      	str	r3, [r7, #4]
}
 800b4b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b4b2:	f7fe fedf 	bl	800a274 <xTaskIncrementTick>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d003      	beq.n	800b4c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b4bc:	4b06      	ldr	r3, [pc, #24]	; (800b4d8 <xPortSysTickHandler+0x40>)
 800b4be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4c2:	601a      	str	r2, [r3, #0]
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	f383 8811 	msr	BASEPRI, r3
}
 800b4ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b4d0:	bf00      	nop
 800b4d2:	3708      	adds	r7, #8
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}
 800b4d8:	e000ed04 	.word	0xe000ed04

0800b4dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b4dc:	b480      	push	{r7}
 800b4de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b4e0:	4b0b      	ldr	r3, [pc, #44]	; (800b510 <vPortSetupTimerInterrupt+0x34>)
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b4e6:	4b0b      	ldr	r3, [pc, #44]	; (800b514 <vPortSetupTimerInterrupt+0x38>)
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b4ec:	4b0a      	ldr	r3, [pc, #40]	; (800b518 <vPortSetupTimerInterrupt+0x3c>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a0a      	ldr	r2, [pc, #40]	; (800b51c <vPortSetupTimerInterrupt+0x40>)
 800b4f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b4f6:	099b      	lsrs	r3, r3, #6
 800b4f8:	4a09      	ldr	r2, [pc, #36]	; (800b520 <vPortSetupTimerInterrupt+0x44>)
 800b4fa:	3b01      	subs	r3, #1
 800b4fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b4fe:	4b04      	ldr	r3, [pc, #16]	; (800b510 <vPortSetupTimerInterrupt+0x34>)
 800b500:	2207      	movs	r2, #7
 800b502:	601a      	str	r2, [r3, #0]
}
 800b504:	bf00      	nop
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr
 800b50e:	bf00      	nop
 800b510:	e000e010 	.word	0xe000e010
 800b514:	e000e018 	.word	0xe000e018
 800b518:	20000000 	.word	0x20000000
 800b51c:	10624dd3 	.word	0x10624dd3
 800b520:	e000e014 	.word	0xe000e014

0800b524 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b524:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b534 <vPortEnableVFP+0x10>
 800b528:	6801      	ldr	r1, [r0, #0]
 800b52a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b52e:	6001      	str	r1, [r0, #0]
 800b530:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b532:	bf00      	nop
 800b534:	e000ed88 	.word	0xe000ed88

0800b538 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b538:	b480      	push	{r7}
 800b53a:	b085      	sub	sp, #20
 800b53c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b53e:	f3ef 8305 	mrs	r3, IPSR
 800b542:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2b0f      	cmp	r3, #15
 800b548:	d914      	bls.n	800b574 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b54a:	4a17      	ldr	r2, [pc, #92]	; (800b5a8 <vPortValidateInterruptPriority+0x70>)
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	4413      	add	r3, r2
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b554:	4b15      	ldr	r3, [pc, #84]	; (800b5ac <vPortValidateInterruptPriority+0x74>)
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	7afa      	ldrb	r2, [r7, #11]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d20a      	bcs.n	800b574 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b562:	f383 8811 	msr	BASEPRI, r3
 800b566:	f3bf 8f6f 	isb	sy
 800b56a:	f3bf 8f4f 	dsb	sy
 800b56e:	607b      	str	r3, [r7, #4]
}
 800b570:	bf00      	nop
 800b572:	e7fe      	b.n	800b572 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b574:	4b0e      	ldr	r3, [pc, #56]	; (800b5b0 <vPortValidateInterruptPriority+0x78>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b57c:	4b0d      	ldr	r3, [pc, #52]	; (800b5b4 <vPortValidateInterruptPriority+0x7c>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	429a      	cmp	r2, r3
 800b582:	d90a      	bls.n	800b59a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b588:	f383 8811 	msr	BASEPRI, r3
 800b58c:	f3bf 8f6f 	isb	sy
 800b590:	f3bf 8f4f 	dsb	sy
 800b594:	603b      	str	r3, [r7, #0]
}
 800b596:	bf00      	nop
 800b598:	e7fe      	b.n	800b598 <vPortValidateInterruptPriority+0x60>
	}
 800b59a:	bf00      	nop
 800b59c:	3714      	adds	r7, #20
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr
 800b5a6:	bf00      	nop
 800b5a8:	e000e3f0 	.word	0xe000e3f0
 800b5ac:	20001340 	.word	0x20001340
 800b5b0:	e000ed0c 	.word	0xe000ed0c
 800b5b4:	20001344 	.word	0x20001344

0800b5b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b08a      	sub	sp, #40	; 0x28
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b5c4:	f7fe fd9a 	bl	800a0fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b5c8:	4b5b      	ldr	r3, [pc, #364]	; (800b738 <pvPortMalloc+0x180>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d101      	bne.n	800b5d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b5d0:	f000 f920 	bl	800b814 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b5d4:	4b59      	ldr	r3, [pc, #356]	; (800b73c <pvPortMalloc+0x184>)
 800b5d6:	681a      	ldr	r2, [r3, #0]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	4013      	ands	r3, r2
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f040 8093 	bne.w	800b708 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d01d      	beq.n	800b624 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b5e8:	2208      	movs	r2, #8
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4413      	add	r3, r2
 800b5ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f003 0307 	and.w	r3, r3, #7
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d014      	beq.n	800b624 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f023 0307 	bic.w	r3, r3, #7
 800b600:	3308      	adds	r3, #8
 800b602:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f003 0307 	and.w	r3, r3, #7
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d00a      	beq.n	800b624 <pvPortMalloc+0x6c>
	__asm volatile
 800b60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b612:	f383 8811 	msr	BASEPRI, r3
 800b616:	f3bf 8f6f 	isb	sy
 800b61a:	f3bf 8f4f 	dsb	sy
 800b61e:	617b      	str	r3, [r7, #20]
}
 800b620:	bf00      	nop
 800b622:	e7fe      	b.n	800b622 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d06e      	beq.n	800b708 <pvPortMalloc+0x150>
 800b62a:	4b45      	ldr	r3, [pc, #276]	; (800b740 <pvPortMalloc+0x188>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	429a      	cmp	r2, r3
 800b632:	d869      	bhi.n	800b708 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b634:	4b43      	ldr	r3, [pc, #268]	; (800b744 <pvPortMalloc+0x18c>)
 800b636:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b638:	4b42      	ldr	r3, [pc, #264]	; (800b744 <pvPortMalloc+0x18c>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b63e:	e004      	b.n	800b64a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b642:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	687a      	ldr	r2, [r7, #4]
 800b650:	429a      	cmp	r2, r3
 800b652:	d903      	bls.n	800b65c <pvPortMalloc+0xa4>
 800b654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d1f1      	bne.n	800b640 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b65c:	4b36      	ldr	r3, [pc, #216]	; (800b738 <pvPortMalloc+0x180>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b662:	429a      	cmp	r2, r3
 800b664:	d050      	beq.n	800b708 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b666:	6a3b      	ldr	r3, [r7, #32]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	2208      	movs	r2, #8
 800b66c:	4413      	add	r3, r2
 800b66e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b672:	681a      	ldr	r2, [r3, #0]
 800b674:	6a3b      	ldr	r3, [r7, #32]
 800b676:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67a:	685a      	ldr	r2, [r3, #4]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	1ad2      	subs	r2, r2, r3
 800b680:	2308      	movs	r3, #8
 800b682:	005b      	lsls	r3, r3, #1
 800b684:	429a      	cmp	r2, r3
 800b686:	d91f      	bls.n	800b6c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	4413      	add	r3, r2
 800b68e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	f003 0307 	and.w	r3, r3, #7
 800b696:	2b00      	cmp	r3, #0
 800b698:	d00a      	beq.n	800b6b0 <pvPortMalloc+0xf8>
	__asm volatile
 800b69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b69e:	f383 8811 	msr	BASEPRI, r3
 800b6a2:	f3bf 8f6f 	isb	sy
 800b6a6:	f3bf 8f4f 	dsb	sy
 800b6aa:	613b      	str	r3, [r7, #16]
}
 800b6ac:	bf00      	nop
 800b6ae:	e7fe      	b.n	800b6ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b2:	685a      	ldr	r2, [r3, #4]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	1ad2      	subs	r2, r2, r3
 800b6b8:	69bb      	ldr	r3, [r7, #24]
 800b6ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b6c2:	69b8      	ldr	r0, [r7, #24]
 800b6c4:	f000 f908 	bl	800b8d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b6c8:	4b1d      	ldr	r3, [pc, #116]	; (800b740 <pvPortMalloc+0x188>)
 800b6ca:	681a      	ldr	r2, [r3, #0]
 800b6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	1ad3      	subs	r3, r2, r3
 800b6d2:	4a1b      	ldr	r2, [pc, #108]	; (800b740 <pvPortMalloc+0x188>)
 800b6d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b6d6:	4b1a      	ldr	r3, [pc, #104]	; (800b740 <pvPortMalloc+0x188>)
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	4b1b      	ldr	r3, [pc, #108]	; (800b748 <pvPortMalloc+0x190>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d203      	bcs.n	800b6ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b6e2:	4b17      	ldr	r3, [pc, #92]	; (800b740 <pvPortMalloc+0x188>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4a18      	ldr	r2, [pc, #96]	; (800b748 <pvPortMalloc+0x190>)
 800b6e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ec:	685a      	ldr	r2, [r3, #4]
 800b6ee:	4b13      	ldr	r3, [pc, #76]	; (800b73c <pvPortMalloc+0x184>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	431a      	orrs	r2, r3
 800b6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b6fe:	4b13      	ldr	r3, [pc, #76]	; (800b74c <pvPortMalloc+0x194>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	3301      	adds	r3, #1
 800b704:	4a11      	ldr	r2, [pc, #68]	; (800b74c <pvPortMalloc+0x194>)
 800b706:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b708:	f7fe fd06 	bl	800a118 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b70c:	69fb      	ldr	r3, [r7, #28]
 800b70e:	f003 0307 	and.w	r3, r3, #7
 800b712:	2b00      	cmp	r3, #0
 800b714:	d00a      	beq.n	800b72c <pvPortMalloc+0x174>
	__asm volatile
 800b716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71a:	f383 8811 	msr	BASEPRI, r3
 800b71e:	f3bf 8f6f 	isb	sy
 800b722:	f3bf 8f4f 	dsb	sy
 800b726:	60fb      	str	r3, [r7, #12]
}
 800b728:	bf00      	nop
 800b72a:	e7fe      	b.n	800b72a <pvPortMalloc+0x172>
	return pvReturn;
 800b72c:	69fb      	ldr	r3, [r7, #28]
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3728      	adds	r7, #40	; 0x28
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	20004f50 	.word	0x20004f50
 800b73c:	20004f64 	.word	0x20004f64
 800b740:	20004f54 	.word	0x20004f54
 800b744:	20004f48 	.word	0x20004f48
 800b748:	20004f58 	.word	0x20004f58
 800b74c:	20004f5c 	.word	0x20004f5c

0800b750 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b086      	sub	sp, #24
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d04d      	beq.n	800b7fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b762:	2308      	movs	r3, #8
 800b764:	425b      	negs	r3, r3
 800b766:	697a      	ldr	r2, [r7, #20]
 800b768:	4413      	add	r3, r2
 800b76a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	685a      	ldr	r2, [r3, #4]
 800b774:	4b24      	ldr	r3, [pc, #144]	; (800b808 <vPortFree+0xb8>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4013      	ands	r3, r2
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d10a      	bne.n	800b794 <vPortFree+0x44>
	__asm volatile
 800b77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b782:	f383 8811 	msr	BASEPRI, r3
 800b786:	f3bf 8f6f 	isb	sy
 800b78a:	f3bf 8f4f 	dsb	sy
 800b78e:	60fb      	str	r3, [r7, #12]
}
 800b790:	bf00      	nop
 800b792:	e7fe      	b.n	800b792 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d00a      	beq.n	800b7b2 <vPortFree+0x62>
	__asm volatile
 800b79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a0:	f383 8811 	msr	BASEPRI, r3
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	f3bf 8f4f 	dsb	sy
 800b7ac:	60bb      	str	r3, [r7, #8]
}
 800b7ae:	bf00      	nop
 800b7b0:	e7fe      	b.n	800b7b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	685a      	ldr	r2, [r3, #4]
 800b7b6:	4b14      	ldr	r3, [pc, #80]	; (800b808 <vPortFree+0xb8>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	4013      	ands	r3, r2
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d01e      	beq.n	800b7fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d11a      	bne.n	800b7fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	685a      	ldr	r2, [r3, #4]
 800b7cc:	4b0e      	ldr	r3, [pc, #56]	; (800b808 <vPortFree+0xb8>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	43db      	mvns	r3, r3
 800b7d2:	401a      	ands	r2, r3
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b7d8:	f7fe fc90 	bl	800a0fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	685a      	ldr	r2, [r3, #4]
 800b7e0:	4b0a      	ldr	r3, [pc, #40]	; (800b80c <vPortFree+0xbc>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4413      	add	r3, r2
 800b7e6:	4a09      	ldr	r2, [pc, #36]	; (800b80c <vPortFree+0xbc>)
 800b7e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b7ea:	6938      	ldr	r0, [r7, #16]
 800b7ec:	f000 f874 	bl	800b8d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b7f0:	4b07      	ldr	r3, [pc, #28]	; (800b810 <vPortFree+0xc0>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	4a06      	ldr	r2, [pc, #24]	; (800b810 <vPortFree+0xc0>)
 800b7f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b7fa:	f7fe fc8d 	bl	800a118 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b7fe:	bf00      	nop
 800b800:	3718      	adds	r7, #24
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
 800b806:	bf00      	nop
 800b808:	20004f64 	.word	0x20004f64
 800b80c:	20004f54 	.word	0x20004f54
 800b810:	20004f60 	.word	0x20004f60

0800b814 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b814:	b480      	push	{r7}
 800b816:	b085      	sub	sp, #20
 800b818:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b81a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b81e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b820:	4b27      	ldr	r3, [pc, #156]	; (800b8c0 <prvHeapInit+0xac>)
 800b822:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f003 0307 	and.w	r3, r3, #7
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d00c      	beq.n	800b848 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	3307      	adds	r3, #7
 800b832:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f023 0307 	bic.w	r3, r3, #7
 800b83a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b83c:	68ba      	ldr	r2, [r7, #8]
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	1ad3      	subs	r3, r2, r3
 800b842:	4a1f      	ldr	r2, [pc, #124]	; (800b8c0 <prvHeapInit+0xac>)
 800b844:	4413      	add	r3, r2
 800b846:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b84c:	4a1d      	ldr	r2, [pc, #116]	; (800b8c4 <prvHeapInit+0xb0>)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b852:	4b1c      	ldr	r3, [pc, #112]	; (800b8c4 <prvHeapInit+0xb0>)
 800b854:	2200      	movs	r2, #0
 800b856:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	68ba      	ldr	r2, [r7, #8]
 800b85c:	4413      	add	r3, r2
 800b85e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b860:	2208      	movs	r2, #8
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	1a9b      	subs	r3, r3, r2
 800b866:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f023 0307 	bic.w	r3, r3, #7
 800b86e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	4a15      	ldr	r2, [pc, #84]	; (800b8c8 <prvHeapInit+0xb4>)
 800b874:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b876:	4b14      	ldr	r3, [pc, #80]	; (800b8c8 <prvHeapInit+0xb4>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2200      	movs	r2, #0
 800b87c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b87e:	4b12      	ldr	r3, [pc, #72]	; (800b8c8 <prvHeapInit+0xb4>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	2200      	movs	r2, #0
 800b884:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	1ad2      	subs	r2, r2, r3
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b894:	4b0c      	ldr	r3, [pc, #48]	; (800b8c8 <prvHeapInit+0xb4>)
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	4a0a      	ldr	r2, [pc, #40]	; (800b8cc <prvHeapInit+0xb8>)
 800b8a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	685b      	ldr	r3, [r3, #4]
 800b8a8:	4a09      	ldr	r2, [pc, #36]	; (800b8d0 <prvHeapInit+0xbc>)
 800b8aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b8ac:	4b09      	ldr	r3, [pc, #36]	; (800b8d4 <prvHeapInit+0xc0>)
 800b8ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b8b2:	601a      	str	r2, [r3, #0]
}
 800b8b4:	bf00      	nop
 800b8b6:	3714      	adds	r7, #20
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr
 800b8c0:	20001348 	.word	0x20001348
 800b8c4:	20004f48 	.word	0x20004f48
 800b8c8:	20004f50 	.word	0x20004f50
 800b8cc:	20004f58 	.word	0x20004f58
 800b8d0:	20004f54 	.word	0x20004f54
 800b8d4:	20004f64 	.word	0x20004f64

0800b8d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b085      	sub	sp, #20
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b8e0:	4b28      	ldr	r3, [pc, #160]	; (800b984 <prvInsertBlockIntoFreeList+0xac>)
 800b8e2:	60fb      	str	r3, [r7, #12]
 800b8e4:	e002      	b.n	800b8ec <prvInsertBlockIntoFreeList+0x14>
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	60fb      	str	r3, [r7, #12]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d8f7      	bhi.n	800b8e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	68ba      	ldr	r2, [r7, #8]
 800b900:	4413      	add	r3, r2
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	429a      	cmp	r2, r3
 800b906:	d108      	bne.n	800b91a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	685a      	ldr	r2, [r3, #4]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	441a      	add	r2, r3
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	68ba      	ldr	r2, [r7, #8]
 800b924:	441a      	add	r2, r3
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d118      	bne.n	800b960 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681a      	ldr	r2, [r3, #0]
 800b932:	4b15      	ldr	r3, [pc, #84]	; (800b988 <prvInsertBlockIntoFreeList+0xb0>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	429a      	cmp	r2, r3
 800b938:	d00d      	beq.n	800b956 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	685a      	ldr	r2, [r3, #4]
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	441a      	add	r2, r3
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	601a      	str	r2, [r3, #0]
 800b954:	e008      	b.n	800b968 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b956:	4b0c      	ldr	r3, [pc, #48]	; (800b988 <prvInsertBlockIntoFreeList+0xb0>)
 800b958:	681a      	ldr	r2, [r3, #0]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	601a      	str	r2, [r3, #0]
 800b95e:	e003      	b.n	800b968 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b968:	68fa      	ldr	r2, [r7, #12]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d002      	beq.n	800b976 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b976:	bf00      	nop
 800b978:	3714      	adds	r7, #20
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr
 800b982:	bf00      	nop
 800b984:	20004f48 	.word	0x20004f48
 800b988:	20004f50 	.word	0x20004f50

0800b98c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b990:	2201      	movs	r2, #1
 800b992:	4912      	ldr	r1, [pc, #72]	; (800b9dc <MX_USB_DEVICE_Init+0x50>)
 800b994:	4812      	ldr	r0, [pc, #72]	; (800b9e0 <MX_USB_DEVICE_Init+0x54>)
 800b996:	f7fc f8c1 	bl	8007b1c <USBD_Init>
 800b99a:	4603      	mov	r3, r0
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d004      	beq.n	800b9aa <MX_USB_DEVICE_Init+0x1e>
  {
	usb_failed2 = 1;
 800b9a0:	4b10      	ldr	r3, [pc, #64]	; (800b9e4 <MX_USB_DEVICE_Init+0x58>)
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800b9a6:	f7f5 fec7 	bl	8001738 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800b9aa:	490f      	ldr	r1, [pc, #60]	; (800b9e8 <MX_USB_DEVICE_Init+0x5c>)
 800b9ac:	480c      	ldr	r0, [pc, #48]	; (800b9e0 <MX_USB_DEVICE_Init+0x54>)
 800b9ae:	f7fc f8e5 	bl	8007b7c <USBD_RegisterClass>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d004      	beq.n	800b9c2 <MX_USB_DEVICE_Init+0x36>
  {
	  usb_failed2 = 1;
 800b9b8:	4b0a      	ldr	r3, [pc, #40]	; (800b9e4 <MX_USB_DEVICE_Init+0x58>)
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800b9be:	f7f5 febb 	bl	8001738 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b9c2:	4807      	ldr	r0, [pc, #28]	; (800b9e0 <MX_USB_DEVICE_Init+0x54>)
 800b9c4:	f7fc f901 	bl	8007bca <USBD_Start>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d004      	beq.n	800b9d8 <MX_USB_DEVICE_Init+0x4c>
  {
	  usb_failed2 = 1;
 800b9ce:	4b05      	ldr	r3, [pc, #20]	; (800b9e4 <MX_USB_DEVICE_Init+0x58>)
 800b9d0:	2201      	movs	r2, #1
 800b9d2:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800b9d4:	f7f5 feb0 	bl	8001738 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b9d8:	bf00      	nop
 800b9da:	bd80      	pop	{r7, pc}
 800b9dc:	200000ec 	.word	0x200000ec
 800b9e0:	20005078 	.word	0x20005078
 800b9e4:	20004f68 	.word	0x20004f68
 800b9e8:	2000000c 	.word	0x2000000c

0800b9ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	6039      	str	r1, [r7, #0]
 800b9f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	2212      	movs	r2, #18
 800b9fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b9fe:	4b03      	ldr	r3, [pc, #12]	; (800ba0c <USBD_FS_DeviceDescriptor+0x20>)
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	370c      	adds	r7, #12
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr
 800ba0c:	20000108 	.word	0x20000108

0800ba10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b083      	sub	sp, #12
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	4603      	mov	r3, r0
 800ba18:	6039      	str	r1, [r7, #0]
 800ba1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	2204      	movs	r2, #4
 800ba20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ba22:	4b03      	ldr	r3, [pc, #12]	; (800ba30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	370c      	adds	r7, #12
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr
 800ba30:	2000011c 	.word	0x2000011c

0800ba34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	6039      	str	r1, [r7, #0]
 800ba3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba40:	79fb      	ldrb	r3, [r7, #7]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d105      	bne.n	800ba52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ba46:	683a      	ldr	r2, [r7, #0]
 800ba48:	4907      	ldr	r1, [pc, #28]	; (800ba68 <USBD_FS_ProductStrDescriptor+0x34>)
 800ba4a:	4808      	ldr	r0, [pc, #32]	; (800ba6c <USBD_FS_ProductStrDescriptor+0x38>)
 800ba4c:	f7fd f947 	bl	8008cde <USBD_GetString>
 800ba50:	e004      	b.n	800ba5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ba52:	683a      	ldr	r2, [r7, #0]
 800ba54:	4904      	ldr	r1, [pc, #16]	; (800ba68 <USBD_FS_ProductStrDescriptor+0x34>)
 800ba56:	4805      	ldr	r0, [pc, #20]	; (800ba6c <USBD_FS_ProductStrDescriptor+0x38>)
 800ba58:	f7fd f941 	bl	8008cde <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba5c:	4b02      	ldr	r3, [pc, #8]	; (800ba68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3708      	adds	r7, #8
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	20005348 	.word	0x20005348
 800ba6c:	080126f8 	.word	0x080126f8

0800ba70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	4603      	mov	r3, r0
 800ba78:	6039      	str	r1, [r7, #0]
 800ba7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ba7c:	683a      	ldr	r2, [r7, #0]
 800ba7e:	4904      	ldr	r1, [pc, #16]	; (800ba90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ba80:	4804      	ldr	r0, [pc, #16]	; (800ba94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ba82:	f7fd f92c 	bl	8008cde <USBD_GetString>
  return USBD_StrDesc;
 800ba86:	4b02      	ldr	r3, [pc, #8]	; (800ba90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3708      	adds	r7, #8
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	20005348 	.word	0x20005348
 800ba94:	08012710 	.word	0x08012710

0800ba98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	4603      	mov	r3, r0
 800baa0:	6039      	str	r1, [r7, #0]
 800baa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	221a      	movs	r2, #26
 800baa8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800baaa:	f000 f843 	bl	800bb34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800baae:	4b02      	ldr	r3, [pc, #8]	; (800bab8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3708      	adds	r7, #8
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	20000120 	.word	0x20000120

0800babc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	4603      	mov	r3, r0
 800bac4:	6039      	str	r1, [r7, #0]
 800bac6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bac8:	79fb      	ldrb	r3, [r7, #7]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d105      	bne.n	800bada <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bace:	683a      	ldr	r2, [r7, #0]
 800bad0:	4907      	ldr	r1, [pc, #28]	; (800baf0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bad2:	4808      	ldr	r0, [pc, #32]	; (800baf4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bad4:	f7fd f903 	bl	8008cde <USBD_GetString>
 800bad8:	e004      	b.n	800bae4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bada:	683a      	ldr	r2, [r7, #0]
 800badc:	4904      	ldr	r1, [pc, #16]	; (800baf0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bade:	4805      	ldr	r0, [pc, #20]	; (800baf4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bae0:	f7fd f8fd 	bl	8008cde <USBD_GetString>
  }
  return USBD_StrDesc;
 800bae4:	4b02      	ldr	r3, [pc, #8]	; (800baf0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3708      	adds	r7, #8
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	20005348 	.word	0x20005348
 800baf4:	08012724 	.word	0x08012724

0800baf8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	4603      	mov	r3, r0
 800bb00:	6039      	str	r1, [r7, #0]
 800bb02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb04:	79fb      	ldrb	r3, [r7, #7]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d105      	bne.n	800bb16 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bb0a:	683a      	ldr	r2, [r7, #0]
 800bb0c:	4907      	ldr	r1, [pc, #28]	; (800bb2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bb0e:	4808      	ldr	r0, [pc, #32]	; (800bb30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bb10:	f7fd f8e5 	bl	8008cde <USBD_GetString>
 800bb14:	e004      	b.n	800bb20 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bb16:	683a      	ldr	r2, [r7, #0]
 800bb18:	4904      	ldr	r1, [pc, #16]	; (800bb2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bb1a:	4805      	ldr	r0, [pc, #20]	; (800bb30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bb1c:	f7fd f8df 	bl	8008cde <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb20:	4b02      	ldr	r3, [pc, #8]	; (800bb2c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3708      	adds	r7, #8
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	20005348 	.word	0x20005348
 800bb30:	08012730 	.word	0x08012730

0800bb34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bb3a:	4b0f      	ldr	r3, [pc, #60]	; (800bb78 <Get_SerialNum+0x44>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bb40:	4b0e      	ldr	r3, [pc, #56]	; (800bb7c <Get_SerialNum+0x48>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bb46:	4b0e      	ldr	r3, [pc, #56]	; (800bb80 <Get_SerialNum+0x4c>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bb4c:	68fa      	ldr	r2, [r7, #12]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	4413      	add	r3, r2
 800bb52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d009      	beq.n	800bb6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bb5a:	2208      	movs	r2, #8
 800bb5c:	4909      	ldr	r1, [pc, #36]	; (800bb84 <Get_SerialNum+0x50>)
 800bb5e:	68f8      	ldr	r0, [r7, #12]
 800bb60:	f000 f814 	bl	800bb8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bb64:	2204      	movs	r2, #4
 800bb66:	4908      	ldr	r1, [pc, #32]	; (800bb88 <Get_SerialNum+0x54>)
 800bb68:	68b8      	ldr	r0, [r7, #8]
 800bb6a:	f000 f80f 	bl	800bb8c <IntToUnicode>
  }
}
 800bb6e:	bf00      	nop
 800bb70:	3710      	adds	r7, #16
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	1fff7a10 	.word	0x1fff7a10
 800bb7c:	1fff7a14 	.word	0x1fff7a14
 800bb80:	1fff7a18 	.word	0x1fff7a18
 800bb84:	20000122 	.word	0x20000122
 800bb88:	20000132 	.word	0x20000132

0800bb8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b087      	sub	sp, #28
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	60b9      	str	r1, [r7, #8]
 800bb96:	4613      	mov	r3, r2
 800bb98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bb9e:	2300      	movs	r3, #0
 800bba0:	75fb      	strb	r3, [r7, #23]
 800bba2:	e027      	b.n	800bbf4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	0f1b      	lsrs	r3, r3, #28
 800bba8:	2b09      	cmp	r3, #9
 800bbaa:	d80b      	bhi.n	800bbc4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	0f1b      	lsrs	r3, r3, #28
 800bbb0:	b2da      	uxtb	r2, r3
 800bbb2:	7dfb      	ldrb	r3, [r7, #23]
 800bbb4:	005b      	lsls	r3, r3, #1
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	440b      	add	r3, r1
 800bbbc:	3230      	adds	r2, #48	; 0x30
 800bbbe:	b2d2      	uxtb	r2, r2
 800bbc0:	701a      	strb	r2, [r3, #0]
 800bbc2:	e00a      	b.n	800bbda <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	0f1b      	lsrs	r3, r3, #28
 800bbc8:	b2da      	uxtb	r2, r3
 800bbca:	7dfb      	ldrb	r3, [r7, #23]
 800bbcc:	005b      	lsls	r3, r3, #1
 800bbce:	4619      	mov	r1, r3
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	440b      	add	r3, r1
 800bbd4:	3237      	adds	r2, #55	; 0x37
 800bbd6:	b2d2      	uxtb	r2, r2
 800bbd8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	011b      	lsls	r3, r3, #4
 800bbde:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bbe0:	7dfb      	ldrb	r3, [r7, #23]
 800bbe2:	005b      	lsls	r3, r3, #1
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	68ba      	ldr	r2, [r7, #8]
 800bbe8:	4413      	add	r3, r2
 800bbea:	2200      	movs	r2, #0
 800bbec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bbee:	7dfb      	ldrb	r3, [r7, #23]
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	75fb      	strb	r3, [r7, #23]
 800bbf4:	7dfa      	ldrb	r2, [r7, #23]
 800bbf6:	79fb      	ldrb	r3, [r7, #7]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d3d3      	bcc.n	800bba4 <IntToUnicode+0x18>
  }
}
 800bbfc:	bf00      	nop
 800bbfe:	bf00      	nop
 800bc00:	371c      	adds	r7, #28
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr
	...

0800bc0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b08a      	sub	sp, #40	; 0x28
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc14:	f107 0314 	add.w	r3, r7, #20
 800bc18:	2200      	movs	r2, #0
 800bc1a:	601a      	str	r2, [r3, #0]
 800bc1c:	605a      	str	r2, [r3, #4]
 800bc1e:	609a      	str	r2, [r3, #8]
 800bc20:	60da      	str	r2, [r3, #12]
 800bc22:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc2c:	d13a      	bne.n	800bca4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc2e:	2300      	movs	r3, #0
 800bc30:	613b      	str	r3, [r7, #16]
 800bc32:	4b1e      	ldr	r3, [pc, #120]	; (800bcac <HAL_PCD_MspInit+0xa0>)
 800bc34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc36:	4a1d      	ldr	r2, [pc, #116]	; (800bcac <HAL_PCD_MspInit+0xa0>)
 800bc38:	f043 0301 	orr.w	r3, r3, #1
 800bc3c:	6313      	str	r3, [r2, #48]	; 0x30
 800bc3e:	4b1b      	ldr	r3, [pc, #108]	; (800bcac <HAL_PCD_MspInit+0xa0>)
 800bc40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc42:	f003 0301 	and.w	r3, r3, #1
 800bc46:	613b      	str	r3, [r7, #16]
 800bc48:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bc4a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bc4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc50:	2302      	movs	r3, #2
 800bc52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc54:	2300      	movs	r3, #0
 800bc56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bc58:	2303      	movs	r3, #3
 800bc5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bc5c:	230a      	movs	r3, #10
 800bc5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc60:	f107 0314 	add.w	r3, r7, #20
 800bc64:	4619      	mov	r1, r3
 800bc66:	4812      	ldr	r0, [pc, #72]	; (800bcb0 <HAL_PCD_MspInit+0xa4>)
 800bc68:	f7f6 fa00 	bl	800206c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bc6c:	4b0f      	ldr	r3, [pc, #60]	; (800bcac <HAL_PCD_MspInit+0xa0>)
 800bc6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc70:	4a0e      	ldr	r2, [pc, #56]	; (800bcac <HAL_PCD_MspInit+0xa0>)
 800bc72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc76:	6353      	str	r3, [r2, #52]	; 0x34
 800bc78:	2300      	movs	r3, #0
 800bc7a:	60fb      	str	r3, [r7, #12]
 800bc7c:	4b0b      	ldr	r3, [pc, #44]	; (800bcac <HAL_PCD_MspInit+0xa0>)
 800bc7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc80:	4a0a      	ldr	r2, [pc, #40]	; (800bcac <HAL_PCD_MspInit+0xa0>)
 800bc82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bc86:	6453      	str	r3, [r2, #68]	; 0x44
 800bc88:	4b08      	ldr	r3, [pc, #32]	; (800bcac <HAL_PCD_MspInit+0xa0>)
 800bc8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc90:	60fb      	str	r3, [r7, #12]
 800bc92:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800bc94:	2200      	movs	r2, #0
 800bc96:	2105      	movs	r1, #5
 800bc98:	2043      	movs	r0, #67	; 0x43
 800bc9a:	f7f6 f9bd 	bl	8002018 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bc9e:	2043      	movs	r0, #67	; 0x43
 800bca0:	f7f6 f9d6 	bl	8002050 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bca4:	bf00      	nop
 800bca6:	3728      	adds	r7, #40	; 0x28
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	40023800 	.word	0x40023800
 800bcb0:	40020000 	.word	0x40020000

0800bcb4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bcc8:	4619      	mov	r1, r3
 800bcca:	4610      	mov	r0, r2
 800bccc:	f7fb ffc8 	bl	8007c60 <USBD_LL_SetupStage>
}
 800bcd0:	bf00      	nop
 800bcd2:	3708      	adds	r7, #8
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	460b      	mov	r3, r1
 800bce2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bcea:	78fa      	ldrb	r2, [r7, #3]
 800bcec:	6879      	ldr	r1, [r7, #4]
 800bcee:	4613      	mov	r3, r2
 800bcf0:	00db      	lsls	r3, r3, #3
 800bcf2:	1a9b      	subs	r3, r3, r2
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	440b      	add	r3, r1
 800bcf8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bcfc:	681a      	ldr	r2, [r3, #0]
 800bcfe:	78fb      	ldrb	r3, [r7, #3]
 800bd00:	4619      	mov	r1, r3
 800bd02:	f7fc f802 	bl	8007d0a <USBD_LL_DataOutStage>
}
 800bd06:	bf00      	nop
 800bd08:	3708      	adds	r7, #8
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}

0800bd0e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd0e:	b580      	push	{r7, lr}
 800bd10:	b082      	sub	sp, #8
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
 800bd16:	460b      	mov	r3, r1
 800bd18:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bd20:	78fa      	ldrb	r2, [r7, #3]
 800bd22:	6879      	ldr	r1, [r7, #4]
 800bd24:	4613      	mov	r3, r2
 800bd26:	00db      	lsls	r3, r3, #3
 800bd28:	1a9b      	subs	r3, r3, r2
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	440b      	add	r3, r1
 800bd2e:	3348      	adds	r3, #72	; 0x48
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	78fb      	ldrb	r3, [r7, #3]
 800bd34:	4619      	mov	r1, r3
 800bd36:	f7fc f84b 	bl	8007dd0 <USBD_LL_DataInStage>
}
 800bd3a:	bf00      	nop
 800bd3c:	3708      	adds	r7, #8
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}

0800bd42 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd42:	b580      	push	{r7, lr}
 800bd44:	b082      	sub	sp, #8
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd50:	4618      	mov	r0, r3
 800bd52:	f7fc f95f 	bl	8008014 <USBD_LL_SOF>
}
 800bd56:	bf00      	nop
 800bd58:	3708      	adds	r7, #8
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}

0800bd5e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd5e:	b580      	push	{r7, lr}
 800bd60:	b084      	sub	sp, #16
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bd66:	2301      	movs	r3, #1
 800bd68:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	68db      	ldr	r3, [r3, #12]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d102      	bne.n	800bd78 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bd72:	2300      	movs	r3, #0
 800bd74:	73fb      	strb	r3, [r7, #15]
 800bd76:	e008      	b.n	800bd8a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	68db      	ldr	r3, [r3, #12]
 800bd7c:	2b02      	cmp	r3, #2
 800bd7e:	d102      	bne.n	800bd86 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bd80:	2301      	movs	r3, #1
 800bd82:	73fb      	strb	r3, [r7, #15]
 800bd84:	e001      	b.n	800bd8a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bd86:	f7f5 fcd7 	bl	8001738 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd90:	7bfa      	ldrb	r2, [r7, #15]
 800bd92:	4611      	mov	r1, r2
 800bd94:	4618      	mov	r0, r3
 800bd96:	f7fc f8ff 	bl	8007f98 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bda0:	4618      	mov	r0, r3
 800bda2:	f7fc f8ab 	bl	8007efc <USBD_LL_Reset>
}
 800bda6:	bf00      	nop
 800bda8:	3710      	adds	r7, #16
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
	...

0800bdb0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7fc f8fa 	bl	8007fb8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	6812      	ldr	r2, [r2, #0]
 800bdd2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bdd6:	f043 0301 	orr.w	r3, r3, #1
 800bdda:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6a1b      	ldr	r3, [r3, #32]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d005      	beq.n	800bdf0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bde4:	4b04      	ldr	r3, [pc, #16]	; (800bdf8 <HAL_PCD_SuspendCallback+0x48>)
 800bde6:	691b      	ldr	r3, [r3, #16]
 800bde8:	4a03      	ldr	r2, [pc, #12]	; (800bdf8 <HAL_PCD_SuspendCallback+0x48>)
 800bdea:	f043 0306 	orr.w	r3, r3, #6
 800bdee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bdf0:	bf00      	nop
 800bdf2:	3708      	adds	r7, #8
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	e000ed00 	.word	0xe000ed00

0800bdfc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b082      	sub	sp, #8
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7fc f8ea 	bl	8007fe4 <USBD_LL_Resume>
}
 800be10:	bf00      	nop
 800be12:	3708      	adds	r7, #8
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	460b      	mov	r3, r1
 800be22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800be2a:	78fa      	ldrb	r2, [r7, #3]
 800be2c:	4611      	mov	r1, r2
 800be2e:	4618      	mov	r0, r3
 800be30:	f7fc f938 	bl	80080a4 <USBD_LL_IsoOUTIncomplete>
}
 800be34:	bf00      	nop
 800be36:	3708      	adds	r7, #8
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	460b      	mov	r3, r1
 800be46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800be4e:	78fa      	ldrb	r2, [r7, #3]
 800be50:	4611      	mov	r1, r2
 800be52:	4618      	mov	r0, r3
 800be54:	f7fc f900 	bl	8008058 <USBD_LL_IsoINIncomplete>
}
 800be58:	bf00      	nop
 800be5a:	3708      	adds	r7, #8
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b082      	sub	sp, #8
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800be6e:	4618      	mov	r0, r3
 800be70:	f7fc f93e 	bl	80080f0 <USBD_LL_DevConnected>
}
 800be74:	bf00      	nop
 800be76:	3708      	adds	r7, #8
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b082      	sub	sp, #8
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7fc f93b 	bl	8008106 <USBD_LL_DevDisconnected>
}
 800be90:	bf00      	nop
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d13c      	bne.n	800bf22 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bea8:	4a20      	ldr	r2, [pc, #128]	; (800bf2c <USBD_LL_Init+0x94>)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	4a1e      	ldr	r2, [pc, #120]	; (800bf2c <USBD_LL_Init+0x94>)
 800beb4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800beb8:	4b1c      	ldr	r3, [pc, #112]	; (800bf2c <USBD_LL_Init+0x94>)
 800beba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bebe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800bec0:	4b1a      	ldr	r3, [pc, #104]	; (800bf2c <USBD_LL_Init+0x94>)
 800bec2:	2206      	movs	r2, #6
 800bec4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bec6:	4b19      	ldr	r3, [pc, #100]	; (800bf2c <USBD_LL_Init+0x94>)
 800bec8:	2202      	movs	r2, #2
 800beca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800becc:	4b17      	ldr	r3, [pc, #92]	; (800bf2c <USBD_LL_Init+0x94>)
 800bece:	2200      	movs	r2, #0
 800bed0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bed2:	4b16      	ldr	r3, [pc, #88]	; (800bf2c <USBD_LL_Init+0x94>)
 800bed4:	2202      	movs	r2, #2
 800bed6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bed8:	4b14      	ldr	r3, [pc, #80]	; (800bf2c <USBD_LL_Init+0x94>)
 800beda:	2200      	movs	r2, #0
 800bedc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bede:	4b13      	ldr	r3, [pc, #76]	; (800bf2c <USBD_LL_Init+0x94>)
 800bee0:	2200      	movs	r2, #0
 800bee2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bee4:	4b11      	ldr	r3, [pc, #68]	; (800bf2c <USBD_LL_Init+0x94>)
 800bee6:	2200      	movs	r2, #0
 800bee8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800beea:	4b10      	ldr	r3, [pc, #64]	; (800bf2c <USBD_LL_Init+0x94>)
 800beec:	2200      	movs	r2, #0
 800beee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bef0:	4b0e      	ldr	r3, [pc, #56]	; (800bf2c <USBD_LL_Init+0x94>)
 800bef2:	2200      	movs	r2, #0
 800bef4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bef6:	480d      	ldr	r0, [pc, #52]	; (800bf2c <USBD_LL_Init+0x94>)
 800bef8:	f7f6 fa7d 	bl	80023f6 <HAL_PCD_Init>
 800befc:	4603      	mov	r3, r0
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d001      	beq.n	800bf06 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bf02:	f7f5 fc19 	bl	8001738 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bf06:	2180      	movs	r1, #128	; 0x80
 800bf08:	4808      	ldr	r0, [pc, #32]	; (800bf2c <USBD_LL_Init+0x94>)
 800bf0a:	f7f7 fbf6 	bl	80036fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bf0e:	2240      	movs	r2, #64	; 0x40
 800bf10:	2100      	movs	r1, #0
 800bf12:	4806      	ldr	r0, [pc, #24]	; (800bf2c <USBD_LL_Init+0x94>)
 800bf14:	f7f7 fbaa 	bl	800366c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bf18:	2280      	movs	r2, #128	; 0x80
 800bf1a:	2101      	movs	r1, #1
 800bf1c:	4803      	ldr	r0, [pc, #12]	; (800bf2c <USBD_LL_Init+0x94>)
 800bf1e:	f7f7 fba5 	bl	800366c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bf22:	2300      	movs	r3, #0
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3708      	adds	r7, #8
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	20005548 	.word	0x20005548

0800bf30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7f6 fb79 	bl	800263e <HAL_PCD_Start>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf50:	7bfb      	ldrb	r3, [r7, #15]
 800bf52:	4618      	mov	r0, r3
 800bf54:	f000 f97e 	bl	800c254 <USBD_Get_USB_Status>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3710      	adds	r7, #16
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}

0800bf66 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bf66:	b580      	push	{r7, lr}
 800bf68:	b084      	sub	sp, #16
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	6078      	str	r0, [r7, #4]
 800bf6e:	4608      	mov	r0, r1
 800bf70:	4611      	mov	r1, r2
 800bf72:	461a      	mov	r2, r3
 800bf74:	4603      	mov	r3, r0
 800bf76:	70fb      	strb	r3, [r7, #3]
 800bf78:	460b      	mov	r3, r1
 800bf7a:	70bb      	strb	r3, [r7, #2]
 800bf7c:	4613      	mov	r3, r2
 800bf7e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf80:	2300      	movs	r3, #0
 800bf82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf84:	2300      	movs	r3, #0
 800bf86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bf8e:	78bb      	ldrb	r3, [r7, #2]
 800bf90:	883a      	ldrh	r2, [r7, #0]
 800bf92:	78f9      	ldrb	r1, [r7, #3]
 800bf94:	f7f6 ff8a 	bl	8002eac <HAL_PCD_EP_Open>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf9c:	7bfb      	ldrb	r3, [r7, #15]
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f000 f958 	bl	800c254 <USBD_Get_USB_Status>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfa8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3710      	adds	r7, #16
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}

0800bfb2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfb2:	b580      	push	{r7, lr}
 800bfb4:	b084      	sub	sp, #16
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	6078      	str	r0, [r7, #4]
 800bfba:	460b      	mov	r3, r1
 800bfbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bfcc:	78fa      	ldrb	r2, [r7, #3]
 800bfce:	4611      	mov	r1, r2
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7f6 ffd3 	bl	8002f7c <HAL_PCD_EP_Close>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfda:	7bfb      	ldrb	r3, [r7, #15]
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f000 f939 	bl	800c254 <USBD_Get_USB_Status>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfe6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3710      	adds	r7, #16
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	460b      	mov	r3, r1
 800bffa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bffc:	2300      	movs	r3, #0
 800bffe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c000:	2300      	movs	r3, #0
 800c002:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c00a:	78fa      	ldrb	r2, [r7, #3]
 800c00c:	4611      	mov	r1, r2
 800c00e:	4618      	mov	r0, r3
 800c010:	f7f7 f893 	bl	800313a <HAL_PCD_EP_SetStall>
 800c014:	4603      	mov	r3, r0
 800c016:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c018:	7bfb      	ldrb	r3, [r7, #15]
 800c01a:	4618      	mov	r0, r3
 800c01c:	f000 f91a 	bl	800c254 <USBD_Get_USB_Status>
 800c020:	4603      	mov	r3, r0
 800c022:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c024:	7bbb      	ldrb	r3, [r7, #14]
}
 800c026:	4618      	mov	r0, r3
 800c028:	3710      	adds	r7, #16
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}

0800c02e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c02e:	b580      	push	{r7, lr}
 800c030:	b084      	sub	sp, #16
 800c032:	af00      	add	r7, sp, #0
 800c034:	6078      	str	r0, [r7, #4]
 800c036:	460b      	mov	r3, r1
 800c038:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c03a:	2300      	movs	r3, #0
 800c03c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c03e:	2300      	movs	r3, #0
 800c040:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c048:	78fa      	ldrb	r2, [r7, #3]
 800c04a:	4611      	mov	r1, r2
 800c04c:	4618      	mov	r0, r3
 800c04e:	f7f7 f8d8 	bl	8003202 <HAL_PCD_EP_ClrStall>
 800c052:	4603      	mov	r3, r0
 800c054:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c056:	7bfb      	ldrb	r3, [r7, #15]
 800c058:	4618      	mov	r0, r3
 800c05a:	f000 f8fb 	bl	800c254 <USBD_Get_USB_Status>
 800c05e:	4603      	mov	r3, r0
 800c060:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c062:	7bbb      	ldrb	r3, [r7, #14]
}
 800c064:	4618      	mov	r0, r3
 800c066:	3710      	adds	r7, #16
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c06c:	b480      	push	{r7}
 800c06e:	b085      	sub	sp, #20
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	460b      	mov	r3, r1
 800c076:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c07e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c080:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c084:	2b00      	cmp	r3, #0
 800c086:	da0b      	bge.n	800c0a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c088:	78fb      	ldrb	r3, [r7, #3]
 800c08a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c08e:	68f9      	ldr	r1, [r7, #12]
 800c090:	4613      	mov	r3, r2
 800c092:	00db      	lsls	r3, r3, #3
 800c094:	1a9b      	subs	r3, r3, r2
 800c096:	009b      	lsls	r3, r3, #2
 800c098:	440b      	add	r3, r1
 800c09a:	333e      	adds	r3, #62	; 0x3e
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	e00b      	b.n	800c0b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c0a0:	78fb      	ldrb	r3, [r7, #3]
 800c0a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c0a6:	68f9      	ldr	r1, [r7, #12]
 800c0a8:	4613      	mov	r3, r2
 800c0aa:	00db      	lsls	r3, r3, #3
 800c0ac:	1a9b      	subs	r3, r3, r2
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	440b      	add	r3, r1
 800c0b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c0b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3714      	adds	r7, #20
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr

0800c0c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c0de:	78fa      	ldrb	r2, [r7, #3]
 800c0e0:	4611      	mov	r1, r2
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7f6 febd 	bl	8002e62 <HAL_PCD_SetAddress>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0ec:	7bfb      	ldrb	r3, [r7, #15]
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f000 f8b0 	bl	800c254 <USBD_Get_USB_Status>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3710      	adds	r7, #16
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}

0800c102 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c102:	b580      	push	{r7, lr}
 800c104:	b086      	sub	sp, #24
 800c106:	af00      	add	r7, sp, #0
 800c108:	60f8      	str	r0, [r7, #12]
 800c10a:	607a      	str	r2, [r7, #4]
 800c10c:	603b      	str	r3, [r7, #0]
 800c10e:	460b      	mov	r3, r1
 800c110:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c112:	2300      	movs	r3, #0
 800c114:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c116:	2300      	movs	r3, #0
 800c118:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c120:	7af9      	ldrb	r1, [r7, #11]
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	f7f6 ffbe 	bl	80030a6 <HAL_PCD_EP_Transmit>
 800c12a:	4603      	mov	r3, r0
 800c12c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c12e:	7dfb      	ldrb	r3, [r7, #23]
 800c130:	4618      	mov	r0, r3
 800c132:	f000 f88f 	bl	800c254 <USBD_Get_USB_Status>
 800c136:	4603      	mov	r3, r0
 800c138:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c13a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3718      	adds	r7, #24
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b086      	sub	sp, #24
 800c148:	af00      	add	r7, sp, #0
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	607a      	str	r2, [r7, #4]
 800c14e:	603b      	str	r3, [r7, #0]
 800c150:	460b      	mov	r3, r1
 800c152:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c154:	2300      	movs	r3, #0
 800c156:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c158:	2300      	movs	r3, #0
 800c15a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c162:	7af9      	ldrb	r1, [r7, #11]
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	687a      	ldr	r2, [r7, #4]
 800c168:	f7f6 ff52 	bl	8003010 <HAL_PCD_EP_Receive>
 800c16c:	4603      	mov	r3, r0
 800c16e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c170:	7dfb      	ldrb	r3, [r7, #23]
 800c172:	4618      	mov	r0, r3
 800c174:	f000 f86e 	bl	800c254 <USBD_Get_USB_Status>
 800c178:	4603      	mov	r3, r0
 800c17a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c17c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3718      	adds	r7, #24
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
	...

0800c188 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	460b      	mov	r3, r1
 800c192:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c194:	78fb      	ldrb	r3, [r7, #3]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d002      	beq.n	800c1a0 <HAL_PCDEx_LPM_Callback+0x18>
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	d01f      	beq.n	800c1de <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c19e:	e03b      	b.n	800c218 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6a1b      	ldr	r3, [r3, #32]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d007      	beq.n	800c1b8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800c1a8:	f7f4 fdb6 	bl	8000d18 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1ac:	4b1c      	ldr	r3, [pc, #112]	; (800c220 <HAL_PCDEx_LPM_Callback+0x98>)
 800c1ae:	691b      	ldr	r3, [r3, #16]
 800c1b0:	4a1b      	ldr	r2, [pc, #108]	; (800c220 <HAL_PCDEx_LPM_Callback+0x98>)
 800c1b2:	f023 0306 	bic.w	r3, r3, #6
 800c1b6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	6812      	ldr	r2, [r2, #0]
 800c1c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c1ca:	f023 0301 	bic.w	r3, r3, #1
 800c1ce:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7fb ff04 	bl	8007fe4 <USBD_LL_Resume>
    break;
 800c1dc:	e01c      	b.n	800c218 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	687a      	ldr	r2, [r7, #4]
 800c1ea:	6812      	ldr	r2, [r2, #0]
 800c1ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c1f0:	f043 0301 	orr.w	r3, r3, #1
 800c1f4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f7fb fedb 	bl	8007fb8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6a1b      	ldr	r3, [r3, #32]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d005      	beq.n	800c216 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c20a:	4b05      	ldr	r3, [pc, #20]	; (800c220 <HAL_PCDEx_LPM_Callback+0x98>)
 800c20c:	691b      	ldr	r3, [r3, #16]
 800c20e:	4a04      	ldr	r2, [pc, #16]	; (800c220 <HAL_PCDEx_LPM_Callback+0x98>)
 800c210:	f043 0306 	orr.w	r3, r3, #6
 800c214:	6113      	str	r3, [r2, #16]
    break;
 800c216:	bf00      	nop
}
 800c218:	bf00      	nop
 800c21a:	3708      	adds	r7, #8
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}
 800c220:	e000ed00 	.word	0xe000ed00

0800c224 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c22c:	4b03      	ldr	r3, [pc, #12]	; (800c23c <USBD_static_malloc+0x18>)
}
 800c22e:	4618      	mov	r0, r3
 800c230:	370c      	adds	r7, #12
 800c232:	46bd      	mov	sp, r7
 800c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop
 800c23c:	20004f6c 	.word	0x20004f6c

0800c240 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c240:	b480      	push	{r7}
 800c242:	b083      	sub	sp, #12
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]

}
 800c248:	bf00      	nop
 800c24a:	370c      	adds	r7, #12
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr

0800c254 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c254:	b480      	push	{r7}
 800c256:	b085      	sub	sp, #20
 800c258:	af00      	add	r7, sp, #0
 800c25a:	4603      	mov	r3, r0
 800c25c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c25e:	2300      	movs	r3, #0
 800c260:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c262:	79fb      	ldrb	r3, [r7, #7]
 800c264:	2b03      	cmp	r3, #3
 800c266:	d817      	bhi.n	800c298 <USBD_Get_USB_Status+0x44>
 800c268:	a201      	add	r2, pc, #4	; (adr r2, 800c270 <USBD_Get_USB_Status+0x1c>)
 800c26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c26e:	bf00      	nop
 800c270:	0800c281 	.word	0x0800c281
 800c274:	0800c287 	.word	0x0800c287
 800c278:	0800c28d 	.word	0x0800c28d
 800c27c:	0800c293 	.word	0x0800c293
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c280:	2300      	movs	r3, #0
 800c282:	73fb      	strb	r3, [r7, #15]
    break;
 800c284:	e00b      	b.n	800c29e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c286:	2303      	movs	r3, #3
 800c288:	73fb      	strb	r3, [r7, #15]
    break;
 800c28a:	e008      	b.n	800c29e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c28c:	2301      	movs	r3, #1
 800c28e:	73fb      	strb	r3, [r7, #15]
    break;
 800c290:	e005      	b.n	800c29e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c292:	2303      	movs	r3, #3
 800c294:	73fb      	strb	r3, [r7, #15]
    break;
 800c296:	e002      	b.n	800c29e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c298:	2303      	movs	r3, #3
 800c29a:	73fb      	strb	r3, [r7, #15]
    break;
 800c29c:	bf00      	nop
  }
  return usb_status;
 800c29e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3714      	adds	r7, #20
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr

0800c2ac <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800c2ac:	b480      	push	{r7}
 800c2ae:	b083      	sub	sp, #12
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	4608      	mov	r0, r1
 800c2b6:	4611      	mov	r1, r2
 800c2b8:	461a      	mov	r2, r3
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	70fb      	strb	r3, [r7, #3]
 800c2be:	460b      	mov	r3, r1
 800c2c0:	70bb      	strb	r3, [r7, #2]
 800c2c2:	4613      	mov	r3, r2
 800c2c4:	707b      	strb	r3, [r7, #1]
                return 0;
 800c2c6:	2300      	movs	r3, #0
        }
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	370c      	adds	r7, #12
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr

0800c2d4 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800c2d4:	b480      	push	{r7}
 800c2d6:	b083      	sub	sp, #12
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	4608      	mov	r0, r1
 800c2de:	4611      	mov	r1, r2
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	70fb      	strb	r3, [r7, #3]
 800c2e6:	460b      	mov	r3, r1
 800c2e8:	70bb      	strb	r3, [r7, #2]
 800c2ea:	4613      	mov	r3, r2
 800c2ec:	707b      	strb	r3, [r7, #1]
                return 0;
 800c2ee:	2300      	movs	r3, #0
        }
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	370c      	adds	r7, #12
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr

0800c2fc <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 800c2fc:	b480      	push	{r7}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
                return 0;
 800c304:	2300      	movs	r3, #0
        }
 800c306:	4618      	mov	r0, r3
 800c308:	370c      	adds	r7, #12
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr

0800c312 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 800c312:	b480      	push	{r7}
 800c314:	b083      	sub	sp, #12
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
                return 0;
 800c31a:	2300      	movs	r3, #0
        }
 800c31c:	4618      	mov	r0, r3
 800c31e:	370c      	adds	r7, #12
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
                return 0;
 800c330:	2300      	movs	r3, #0
        }
 800c332:	4618      	mov	r0, r3
 800c334:	370c      	adds	r7, #12
 800c336:	46bd      	mov	sp, r7
 800c338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33c:	4770      	bx	lr

0800c33e <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 800c33e:	b480      	push	{r7}
 800c340:	b083      	sub	sp, #12
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]
 800c346:	460b      	mov	r3, r1
 800c348:	70fb      	strb	r3, [r7, #3]
                return;
 800c34a:	bf00      	nop
        } // Note used for hubs only!
 800c34c:	370c      	adds	r7, #12
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr

0800c356 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 800c356:	b480      	push	{r7}
 800c358:	b083      	sub	sp, #12
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
 800c35e:	460b      	mov	r3, r1
 800c360:	807b      	strh	r3, [r7, #2]
 800c362:	4613      	mov	r3, r2
 800c364:	803b      	strh	r3, [r7, #0]
                return false;
 800c366:	2300      	movs	r3, #0
        }
 800c368:	4618      	mov	r0, r3
 800c36a:	370c      	adds	r7, #12
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr

0800c374 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 800c374:	b480      	push	{r7}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	460b      	mov	r3, r1
 800c37e:	70fb      	strb	r3, [r7, #3]
                return false;
 800c380:	2300      	movs	r3, #0
        }
 800c382:	4618      	mov	r0, r3
 800c384:	370c      	adds	r7, #12
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr

0800c38e <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 800c38e:	b480      	push	{r7}
 800c390:	b083      	sub	sp, #12
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
 800c396:	460b      	mov	r3, r1
 800c398:	70fb      	strb	r3, [r7, #3]
                return true;
 800c39a:	2301      	movs	r3, #1
        }
 800c39c:	4618      	mov	r0, r3
 800c39e:	370c      	adds	r7, #12
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 800c3a8:	b480      	push	{r7}
 800c3aa:	b083      	sub	sp, #12
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
                return (AddressPool&)addrPool;
 800c3b0:	687b      	ldr	r3, [r7, #4]
        };
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	370c      	adds	r7, #12
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr

0800c3be <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 800c3be:	b480      	push	{r7}
 800c3c0:	b085      	sub	sp, #20
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
 800c3c6:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	73fb      	strb	r3, [r7, #15]
 800c3cc:	7bfb      	ldrb	r3, [r7, #15]
 800c3ce:	2b0f      	cmp	r3, #15
 800c3d0:	d812      	bhi.n	800c3f8 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3a>
                        if(!devConfig[i]) {
 800c3d2:	7bfa      	ldrb	r2, [r7, #15]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	321e      	adds	r2, #30
 800c3d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d107      	bne.n	800c3f0 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x32>
                                devConfig[i] = pdev;
 800c3e0:	7bfa      	ldrb	r2, [r7, #15]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	321e      	adds	r2, #30
 800c3e6:	6839      	ldr	r1, [r7, #0]
 800c3e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                return 0;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	e004      	b.n	800c3fa <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3c>
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800c3f0:	7bfb      	ldrb	r3, [r7, #15]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	73fb      	strb	r3, [r7, #15]
 800c3f6:	e7e9      	b.n	800c3cc <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0xe>
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 800c3f8:	23d3      	movs	r3, #211	; 0xd3
        };
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3714      	adds	r7, #20
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr

0800c406 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 800c406:	b480      	push	{r7}
 800c408:	b083      	sub	sp, #12
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	6078      	str	r0, [r7, #4]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2200      	movs	r2, #0
 800c412:	701a      	strb	r2, [r3, #0]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2200      	movs	r2, #0
 800c418:	705a      	strb	r2, [r3, #1]
 800c41a:	2200      	movs	r2, #0
 800c41c:	709a      	strb	r2, [r3, #2]
 800c41e:	2200      	movs	r2, #0
 800c420:	70da      	strb	r2, [r3, #3]
 800c422:	2200      	movs	r2, #0
 800c424:	711a      	strb	r2, [r3, #4]
        };
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	4618      	mov	r0, r3
 800c42a:	370c      	adds	r7, #12
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr

0800c434 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2200      	movs	r2, #0
 800c440:	601a      	str	r2, [r3, #0]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2200      	movs	r2, #0
 800c446:	711a      	strb	r2, [r3, #4]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2200      	movs	r2, #0
 800c44c:	715a      	strb	r2, [r3, #5]
        };
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	4618      	mov	r0, r3
 800c452:	370c      	adds	r7, #12
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr

0800c45c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 800c45c:	b480      	push	{r7}
 800c45e:	b083      	sub	sp, #12
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	601a      	str	r2, [r3, #0]
                countDown = valueSize = pbuf->valueSize;
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	781a      	ldrb	r2, [r3, #0]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	715a      	strb	r2, [r3, #5]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	795a      	ldrb	r2, [r3, #5]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	711a      	strb	r2, [r3, #4]
        };
 800c480:	bf00      	nop
 800c482:	370c      	adds	r7, #12
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr

0800c48c <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 800c48c:	b480      	push	{r7}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2200      	movs	r2, #0
 800c498:	601a      	str	r2, [r3, #0]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2200      	movs	r2, #0
 800c49e:	711a      	strb	r2, [r3, #4]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	80da      	strh	r2, [r3, #6]
        };
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	370c      	adds	r7, #12
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr

0800c4b4 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	601a      	str	r2, [r3, #0]
                countDown = 0;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	80da      	strh	r2, [r3, #6]
        };
 800c4ce:	bf00      	nop
 800c4d0:	370c      	adds	r7, #12
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d8:	4770      	bx	lr

0800c4da <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 800c4da:	b480      	push	{r7}
 800c4dc:	b085      	sub	sp, #20
 800c4de:	af00      	add	r7, sp, #0
 800c4e0:	60f8      	str	r0, [r7, #12]
 800c4e2:	60b9      	str	r1, [r7, #8]
 800c4e4:	607a      	str	r2, [r7, #4]
 800c4e6:	807b      	strh	r3, [r7, #2]
                switch(nStage) {
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	791b      	ldrb	r3, [r3, #4]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d002      	beq.n	800c4f6 <_ZN11ByteSkipper4SkipEPPhPtt+0x1c>
 800c4f0:	2b01      	cmp	r3, #1
 800c4f2:	d009      	beq.n	800c508 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>
 800c4f4:	e029      	b.n	800c54a <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                        case 0:
                                countDown = bytes_to_skip;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	887a      	ldrh	r2, [r7, #2]
 800c4fa:	80da      	strh	r2, [r3, #6]
                                nStage++;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	791b      	ldrb	r3, [r3, #4]
 800c500:	3301      	adds	r3, #1
 800c502:	b2da      	uxtb	r2, r3
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	711a      	strb	r2, [r3, #4]
                                // fall through
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	88db      	ldrh	r3, [r3, #6]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d015      	beq.n	800c53c <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	881b      	ldrh	r3, [r3, #0]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d011      	beq.n	800c53c <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	88db      	ldrh	r3, [r3, #6]
 800c51c:	3b01      	subs	r3, #1
 800c51e:	b29a      	uxth	r2, r3
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	80da      	strh	r2, [r3, #6]
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	1c5a      	adds	r2, r3, #1
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	601a      	str	r2, [r3, #0]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	881b      	ldrh	r3, [r3, #0]
 800c532:	3b01      	subs	r3, #1
 800c534:	b29a      	uxth	r2, r3
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	801a      	strh	r2, [r3, #0]
 800c53a:	e7e5      	b.n	800c508 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>

                                if(!countDown)
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	88db      	ldrh	r3, [r3, #6]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d102      	bne.n	800c54a <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                                        nStage = 0;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2200      	movs	r2, #0
 800c548:	711a      	strb	r2, [r3, #4]
                };
                return (!countDown);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	88db      	ldrh	r3, [r3, #6]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	bf0c      	ite	eq
 800c552:	2301      	moveq	r3, #1
 800c554:	2300      	movne	r3, #0
 800c556:	b2db      	uxtb	r3, r3
        };
 800c558:	4618      	mov	r0, r3
 800c55a:	3714      	adds	r7, #20
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr

0800c564 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 800c564:	b480      	push	{r7}
 800c566:	b083      	sub	sp, #12
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	4608      	mov	r0, r1
 800c56e:	4611      	mov	r1, r2
 800c570:	461a      	mov	r2, r3
 800c572:	4603      	mov	r3, r0
 800c574:	70fb      	strb	r3, [r7, #3]
 800c576:	460b      	mov	r3, r1
 800c578:	70bb      	strb	r3, [r7, #2]
 800c57a:	4613      	mov	r3, r2
 800c57c:	707b      	strb	r3, [r7, #1]
        };
 800c57e:	bf00      	nop
 800c580:	370c      	adds	r7, #12
 800c582:	46bd      	mov	sp, r7
 800c584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c588:	4770      	bx	lr
	...

0800c58c <_ZN15USBDeviceConfigC1Ev>:
class USBDeviceConfig {
 800c58c:	b480      	push	{r7}
 800c58e:	b083      	sub	sp, #12
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	4a04      	ldr	r2, [pc, #16]	; (800c5a8 <_ZN15USBDeviceConfigC1Ev+0x1c>)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	601a      	str	r2, [r3, #0]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	4618      	mov	r0, r3
 800c59e:	370c      	adds	r7, #12
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr
 800c5a8:	08012914 	.word	0x08012914

0800c5ac <_ZN17UsbConfigXtracterC1Ev>:
class UsbConfigXtracter {
 800c5ac:	b480      	push	{r7}
 800c5ae:	b083      	sub	sp, #12
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	4a04      	ldr	r2, [pc, #16]	; (800c5c8 <_ZN17UsbConfigXtracterC1Ev+0x1c>)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	601a      	str	r2, [r3, #0]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	4618      	mov	r0, r3
 800c5be:	370c      	adds	r7, #12
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr
 800c5c8:	080128fc 	.word	0x080128fc

0800c5cc <_ZN3BTD10GetAddressEv>:
        virtual uint8_t GetAddress() {
 800c5cc:	b480      	push	{r7}
 800c5ce:	b083      	sub	sp, #12
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
                return bAddress;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
        };
 800c5da:	4618      	mov	r0, r3
 800c5dc:	370c      	adds	r7, #12
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e4:	4770      	bx	lr

0800c5e6 <_ZN3BTD7isReadyEv>:
        virtual bool isReady() {
 800c5e6:	b480      	push	{r7}
 800c5e8:	b083      	sub	sp, #12
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
                return bPollEnable;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
        };
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	370c      	adds	r7, #12
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr

0800c600 <_ZN3BTD10DEVCLASSOKEh>:
        virtual bool DEVCLASSOK(uint8_t klass) {
 800c600:	b480      	push	{r7}
 800c602:	b083      	sub	sp, #12
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	460b      	mov	r3, r1
 800c60a:	70fb      	strb	r3, [r7, #3]
                return (klass == USB_CLASS_WIRELESS_CTRL);
 800c60c:	78fb      	ldrb	r3, [r7, #3]
 800c60e:	2be0      	cmp	r3, #224	; 0xe0
 800c610:	bf0c      	ite	eq
 800c612:	2301      	moveq	r3, #1
 800c614:	2300      	movne	r3, #0
 800c616:	b2db      	uxtb	r3, r3
        };
 800c618:	4618      	mov	r0, r3
 800c61a:	370c      	adds	r7, #12
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <_ZN3BTD8VIDPIDOKEtt>:
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	460b      	mov	r3, r1
 800c62e:	807b      	strh	r3, [r7, #2]
 800c630:	4613      	mov	r3, r2
 800c632:	803b      	strh	r3, [r7, #0]
                if((vid == IOGEAR_GBU521_VID && pid == IOGEAR_GBU521_PID) || (vid == BELKIN_F8T065BF_VID && pid == BELKIN_F8T065BF_PID))
 800c634:	887b      	ldrh	r3, [r7, #2]
 800c636:	f640 225c 	movw	r2, #2652	; 0xa5c
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d104      	bne.n	800c648 <_ZN3BTD8VIDPIDOKEtt+0x24>
 800c63e:	883b      	ldrh	r3, [r7, #0]
 800c640:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800c644:	4293      	cmp	r3, r2
 800c646:	d009      	beq.n	800c65c <_ZN3BTD8VIDPIDOKEtt+0x38>
 800c648:	887b      	ldrh	r3, [r7, #2]
 800c64a:	f240 520d 	movw	r2, #1293	; 0x50d
 800c64e:	4293      	cmp	r3, r2
 800c650:	d106      	bne.n	800c660 <_ZN3BTD8VIDPIDOKEtt+0x3c>
 800c652:	883b      	ldrh	r3, [r7, #0]
 800c654:	f240 625a 	movw	r2, #1626	; 0x65a
 800c658:	4293      	cmp	r3, r2
 800c65a:	d101      	bne.n	800c660 <_ZN3BTD8VIDPIDOKEtt+0x3c>
                        return true;
 800c65c:	2301      	movs	r3, #1
 800c65e:	e02d      	b.n	800c6bc <_ZN3BTD8VIDPIDOKEtt+0x98>
                if(my_bdaddr[0] != 0x00 || my_bdaddr[1] != 0x00 || my_bdaddr[2] != 0x00 || my_bdaddr[3] != 0x00 || my_bdaddr[4] != 0x00 || my_bdaddr[5] != 0x00) { // Check if Bluetooth address is set
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	7d1b      	ldrb	r3, [r3, #20]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d113      	bne.n	800c690 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	7d5b      	ldrb	r3, [r3, #21]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d10f      	bne.n	800c690 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	7d9b      	ldrb	r3, [r3, #22]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d10b      	bne.n	800c690 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	7ddb      	ldrb	r3, [r3, #23]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d107      	bne.n	800c690 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	7e1b      	ldrb	r3, [r3, #24]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d103      	bne.n	800c690 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	7e5b      	ldrb	r3, [r3, #25]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d014      	beq.n	800c6ba <_ZN3BTD8VIDPIDOKEtt+0x96>
                        if(vid == PS3_VID && (pid == PS3_PID || pid == PS3NAVIGATION_PID || pid == PS3MOVE_PID))
 800c690:	887b      	ldrh	r3, [r7, #2]
 800c692:	f240 524c 	movw	r2, #1356	; 0x54c
 800c696:	4293      	cmp	r3, r2
 800c698:	d10f      	bne.n	800c6ba <_ZN3BTD8VIDPIDOKEtt+0x96>
 800c69a:	883b      	ldrh	r3, [r7, #0]
 800c69c:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800c6a0:	d009      	beq.n	800c6b6 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800c6a2:	883b      	ldrh	r3, [r7, #0]
 800c6a4:	f240 422f 	movw	r2, #1071	; 0x42f
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d004      	beq.n	800c6b6 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800c6ac:	883b      	ldrh	r3, [r7, #0]
 800c6ae:	f240 32d5 	movw	r2, #981	; 0x3d5
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d101      	bne.n	800c6ba <_ZN3BTD8VIDPIDOKEtt+0x96>
                                return true;
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	e000      	b.n	800c6bc <_ZN3BTD8VIDPIDOKEtt+0x98>
                return false;
 800c6ba:	2300      	movs	r3, #0
        };
 800c6bc:	4618      	mov	r0, r3
 800c6be:	370c      	adds	r7, #12
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr

0800c6c8 <_ZN3BTDC1EP3USB>:
const uint8_t BTD::BTD_CONTROL_PIPE = 0;
const uint8_t BTD::BTD_EVENT_PIPE = 1;
const uint8_t BTD::BTD_DATAIN_PIPE = 2;
const uint8_t BTD::BTD_DATAOUT_PIPE = 3;

BTD::BTD(USB *p) :
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b084      	sub	sp, #16
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]
bAddress(0), // Device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
simple_pairing_supported(false),
bPollEnable(false) // Don't start polling before dongle is connected
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f7ff ff59 	bl	800c58c <_ZN15USBDeviceConfigC1Ev>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	3304      	adds	r3, #4
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7ff ff64 	bl	800c5ac <_ZN17UsbConfigXtracterC1Ev>
 800c6e4:	4a2b      	ldr	r2, [pc, #172]	; (800c794 <_ZN3BTDC1EP3USB+0xcc>)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	601a      	str	r2, [r3, #0]
 800c6ea:	4a2b      	ldr	r2, [pc, #172]	; (800c798 <_ZN3BTDC1EP3USB+0xd0>)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	605a      	str	r2, [r3, #4]
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2200      	movs	r2, #0
 800c704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2200      	movs	r2, #0
 800c70c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2200      	movs	r2, #0
 800c714:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	683a      	ldr	r2, [r7, #0]
 800c71c:	64da      	str	r2, [r3, #76]	; 0x4c
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2200      	movs	r2, #0
 800c722:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2201      	movs	r2, #1
 800c72a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2200      	movs	r2, #0
 800c732:	661a      	str	r2, [r3, #96]	; 0x60
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2200      	movs	r2, #0
 800c738:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2200      	movs	r2, #0
 800c748:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
{
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800c74c:	2300      	movs	r3, #0
 800c74e:	73fb      	strb	r3, [r7, #15]
 800c750:	7bfb      	ldrb	r3, [r7, #15]
 800c752:	2b03      	cmp	r3, #3
 800c754:	d80a      	bhi.n	800c76c <_ZN3BTDC1EP3USB+0xa4>
                btService[i] = NULL;
 800c756:	7bfb      	ldrb	r3, [r7, #15]
 800c758:	687a      	ldr	r2, [r7, #4]
 800c75a:	3318      	adds	r3, #24
 800c75c:	009b      	lsls	r3, r3, #2
 800c75e:	4413      	add	r3, r2
 800c760:	2200      	movs	r2, #0
 800c762:	605a      	str	r2, [r3, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800c764:	7bfb      	ldrb	r3, [r7, #15]
 800c766:	3301      	adds	r3, #1
 800c768:	73fb      	strb	r3, [r7, #15]
 800c76a:	e7f1      	b.n	800c750 <_ZN3BTDC1EP3USB+0x88>

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f000 fa7d 	bl	800cc6c <_ZN3BTD10InitializeEv>

        if(pUsb) // Register in USB subsystem
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c776:	2b00      	cmp	r3, #0
 800c778:	d006      	beq.n	800c788 <_ZN3BTDC1EP3USB+0xc0>
                pUsb->RegisterDeviceClass(this); // Set devConfig[] entry
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c77e:	687a      	ldr	r2, [r7, #4]
 800c780:	4611      	mov	r1, r2
 800c782:	4618      	mov	r0, r3
 800c784:	f7ff fe1b 	bl	800c3be <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	4618      	mov	r0, r3
 800c78c:	3710      	adds	r7, #16
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}
 800c792:	bf00      	nop
 800c794:	080128bc 	.word	0x080128bc
 800c798:	080128f0 	.word	0x080128f0

0800c79c <_ZN3BTD15ConfigureDeviceEhhb>:

uint8_t BTD::ConfigureDevice(uint8_t parent, uint8_t port, bool lowspeed) {
 800c79c:	b590      	push	{r4, r7, lr}
 800c79e:	b08f      	sub	sp, #60	; 0x3c
 800c7a0:	af02      	add	r7, sp, #8
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	4608      	mov	r0, r1
 800c7a6:	4611      	mov	r1, r2
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	70fb      	strb	r3, [r7, #3]
 800c7ae:	460b      	mov	r3, r1
 800c7b0:	70bb      	strb	r3, [r7, #2]
 800c7b2:	4613      	mov	r3, r2
 800c7b4:	707b      	strb	r3, [r7, #1]
        const uint8_t constBufSize = sizeof (USB_DEVICE_DESCRIPTOR);
 800c7b6:	2312      	movs	r3, #18
 800c7b8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        uint8_t buf[constBufSize];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 800c7bc:	f107 0308 	add.w	r3, r7, #8
 800c7c0:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t rcode;
        UsbDevice *p = NULL;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	627b      	str	r3, [r7, #36]	; 0x24
        EpInfo *oldep_ptr = NULL;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	623b      	str	r3, [r7, #32]

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f000 fa4e 	bl	800cc6c <_ZN3BTD10InitializeEv>

        AddressPool &addrPool = pUsb->GetAddressPool(); // Get memory address of USB device address pool
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f7ff fde7 	bl	800c3a8 <_ZN3USB14GetAddressPoolEv>
 800c7da:	61f8      	str	r0, [r7, #28]
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD ConfigureDevice"), 0x80);
#endif

        if(bAddress) { // Check if address has already been assigned to an instance
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d001      	beq.n	800c7ea <_ZN3BTD15ConfigureDeviceEhhb+0x4e>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 800c7e6:	23d9      	movs	r3, #217	; 0xd9
 800c7e8:	e087      	b.n	800c8fa <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        p = addrPool.GetUsbDevicePtr(0); // Get pointer to pseudo device with address 0 assigned
 800c7ea:	69fb      	ldr	r3, [r7, #28]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	69f8      	ldr	r0, [r7, #28]
 800c7f4:	4798      	blx	r3
 800c7f6:	6278      	str	r0, [r7, #36]	; 0x24
        if(!p) {
 800c7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d101      	bne.n	800c802 <_ZN3BTD15ConfigureDeviceEhhb+0x66>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800c7fe:	23d6      	movs	r3, #214	; 0xd6
 800c800:	e07b      	b.n	800c8fa <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if(!p->epinfo) {
 800c802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d101      	bne.n	800c80e <_ZN3BTD15ConfigureDeviceEhhb+0x72>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 800c80a:	23d7      	movs	r3, #215	; 0xd7
 800c80c:	e075      	b.n	800c8fa <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        oldep_ptr = p->epinfo; // Save old pointer to EP_RECORD of address 0
 800c80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	623b      	str	r3, [r7, #32]
        p->epinfo = epInfo; // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f103 0251 	add.w	r2, r3, #81	; 0x51
 800c81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c81c:	601a      	str	r2, [r3, #0]
        p->lowspeed = lowspeed;
 800c81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c820:	787a      	ldrb	r2, [r7, #1]
 800c822:	719a      	strb	r2, [r3, #6]
        rcode = pUsb->getDevDescr(0, 0, constBufSize, (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c828:	f107 0308 	add.w	r3, r7, #8
 800c82c:	9300      	str	r3, [sp, #0]
 800c82e:	2312      	movs	r3, #18
 800c830:	2200      	movs	r2, #0
 800c832:	2100      	movs	r1, #0
 800c834:	f005 fa13 	bl	8011c5e <_ZN3USB11getDevDescrEhhtPh>
 800c838:	4603      	mov	r3, r0
 800c83a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        p->epinfo = oldep_ptr; // Restore p->epinfo
 800c83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c840:	6a3a      	ldr	r2, [r7, #32]
 800c842:	601a      	str	r2, [r3, #0]

        if(rcode)
 800c844:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d146      	bne.n	800c8da <_ZN3BTD15ConfigureDeviceEhhb+0x13e>
                goto FailGetDevDescr;

        bAddress = addrPool.AllocAddress(parent, false, port); // Allocate new address according to device class
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	3304      	adds	r3, #4
 800c852:	681c      	ldr	r4, [r3, #0]
 800c854:	78bb      	ldrb	r3, [r7, #2]
 800c856:	78f9      	ldrb	r1, [r7, #3]
 800c858:	2200      	movs	r2, #0
 800c85a:	69f8      	ldr	r0, [r7, #28]
 800c85c:	47a0      	blx	r4
 800c85e:	4603      	mov	r3, r0
 800c860:	461a      	mov	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(!bAddress) {
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d101      	bne.n	800c876 <_ZN3BTD15ConfigureDeviceEhhb+0xda>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nOut of address space"), 0x80);
#endif
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800c872:	23d4      	movs	r3, #212	; 0xd4
 800c874:	e041      	b.n	800c8fa <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if (udd->bDeviceClass == 0x09) // Some dongles have an USB hub inside
 800c876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c878:	791b      	ldrb	r3, [r3, #4]
 800c87a:	2b09      	cmp	r3, #9
 800c87c:	d017      	beq.n	800c8ae <_ZN3BTD15ConfigureDeviceEhhb+0x112>
                goto FailHub;

        epInfo[0].maxPktSize = udd->bMaxPacketSize0; // Extract Max Packet Size from device descriptor
 800c87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c880:	79da      	ldrb	r2, [r3, #7]
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        epInfo[1].epAddr = udd->bNumConfigurations; // Steal and abuse from epInfo structure to save memory
 800c888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c88a:	7c5a      	ldrb	r2, [r3, #17]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        VID = udd->idVendor;
 800c892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c894:	891b      	ldrh	r3, [r3, #8]
 800c896:	b29a      	uxth	r2, r3
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        PID = udd->idProduct;
 800c89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a0:	895b      	ldrh	r3, [r3, #10]
 800c8a2:	b29a      	uxth	r2, r3
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

        return USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET;
 800c8aa:	23e0      	movs	r3, #224	; 0xe0
 800c8ac:	e025      	b.n	800c8fa <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailHub;
 800c8ae:	bf00      	nop

FailHub:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nPlease create a hub instance in your code: \"USBHub Hub1(&Usb);\""), 0x80);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	2200      	movs	r2, #0
 800c8be:	f005 fa6b 	bl	8011d98 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800c8c2:	23d1      	movs	r3, #209	; 0xd1
 800c8c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	3308      	adds	r3, #8
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	4798      	blx	r3
        return rcode;
 800c8d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8d8:	e00f      	b.n	800c8fa <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailGetDevDescr;
 800c8da:	bf00      	nop

FailGetDevDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetDevDescr(rcode);
#endif
        if(rcode != hrJERR)
 800c8dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8e0:	2b0d      	cmp	r3, #13
 800c8e2:	d002      	beq.n	800c8ea <_ZN3BTD15ConfigureDeviceEhhb+0x14e>
                rcode = USB_ERROR_FailGetDevDescr;
 800c8e4:	23e1      	movs	r3, #225	; 0xe1
 800c8e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	3308      	adds	r3, #8
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	4798      	blx	r3
        return rcode;
 800c8f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
};
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3734      	adds	r7, #52	; 0x34
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd90      	pop	{r4, r7, pc}

0800c902 <_ZN3BTD4InitEhhb>:

uint8_t BTD::Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed) {
 800c902:	b580      	push	{r7, lr}
 800c904:	b096      	sub	sp, #88	; 0x58
 800c906:	af02      	add	r7, sp, #8
 800c908:	6078      	str	r0, [r7, #4]
 800c90a:	4608      	mov	r0, r1
 800c90c:	4611      	mov	r1, r2
 800c90e:	461a      	mov	r2, r3
 800c910:	4603      	mov	r3, r0
 800c912:	70fb      	strb	r3, [r7, #3]
 800c914:	460b      	mov	r3, r1
 800c916:	70bb      	strb	r3, [r7, #2]
 800c918:	4613      	mov	r3, r2
 800c91a:	707b      	strb	r3, [r7, #1]
        uint8_t rcode;
        uint8_t num_of_conf = epInfo[1].epAddr; // Number of configurations
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c922:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        epInfo[1].epAddr = 0;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        AddressPool &addrPool = pUsb->GetAddressPool();
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c932:	4618      	mov	r0, r3
 800c934:	f7ff fd38 	bl	800c3a8 <_ZN3USB14GetAddressPoolEv>
 800c938:	64b8      	str	r0, [r7, #72]	; 0x48
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD Init"), 0x80);
#endif
        UsbDevice *p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800c93a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800c946:	4611      	mov	r1, r2
 800c948:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c94a:	4798      	blx	r3
 800c94c:	6478      	str	r0, [r7, #68]	; 0x44

        if(!p) {
 800c94e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c950:	2b00      	cmp	r3, #0
 800c952:	d101      	bne.n	800c958 <_ZN3BTD4InitEhhb+0x56>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800c954:	23d6      	movs	r3, #214	; 0xd6
 800c956:	e185      	b.n	800cc64 <_ZN3BTD4InitEhhb+0x362>
        }

        delay(300); // Assign new address to the device
 800c958:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800c95c:	f7f5 fa80 	bl	8001e60 <HAL_Delay>

        rcode = pUsb->setAddr(0, 0, bAddress); // Assign new address to the device
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c96a:	2200      	movs	r2, #0
 800c96c:	2100      	movs	r1, #0
 800c96e:	f005 fa13 	bl	8011d98 <_ZN3USB7setAddrEhhh>
 800c972:	4603      	mov	r3, r0
 800c974:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode) {
 800c978:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d003      	beq.n	800c988 <_ZN3BTD4InitEhhb+0x86>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                p->lowspeed = false;
 800c980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c982:	2200      	movs	r2, #0
 800c984:	719a      	strb	r2, [r3, #6]
                goto Fail;
 800c986:	e165      	b.n	800cc54 <_ZN3BTD4InitEhhb+0x352>
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif

        p->lowspeed = false;
 800c988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c98a:	2200      	movs	r2, #0
 800c98c:	719a      	strb	r2, [r3, #6]

        p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800c98e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	687a      	ldr	r2, [r7, #4]
 800c996:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800c99a:	4611      	mov	r1, r2
 800c99c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c99e:	4798      	blx	r3
 800c9a0:	6478      	str	r0, [r7, #68]	; 0x44
        if(!p) {
 800c9a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d101      	bne.n	800c9ac <_ZN3BTD4InitEhhb+0xaa>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800c9a8:	23d6      	movs	r3, #214	; 0xd6
 800c9aa:	e15b      	b.n	800cc64 <_ZN3BTD4InitEhhb+0x362>
        }

        p->lowspeed = lowspeed;
 800c9ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9ae:	787a      	ldrb	r2, [r7, #1]
 800c9b0:	719a      	strb	r2, [r3, #6]

        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo); // Assign epInfo to epinfo pointer - only EP0 is known
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	3351      	adds	r3, #81	; 0x51
 800c9c0:	2201      	movs	r2, #1
 800c9c2:	f004 f8dc 	bl	8010b7e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode)
 800c9cc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	f040 8128 	bne.w	800cc26 <_ZN3BTD4InitEhhb+0x324>
                goto FailSetDevTblEntry;

        if(VID == PS3_VID && (PID == PS3_PID || PID == PS3NAVIGATION_PID || PID == PS3MOVE_PID)) {
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800c9dc:	f240 524c 	movw	r2, #1356	; 0x54c
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d177      	bne.n	800cad4 <_ZN3BTD4InitEhhb+0x1d2>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800c9ea:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800c9ee:	d00d      	beq.n	800ca0c <_ZN3BTD4InitEhhb+0x10a>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800c9f6:	f240 422f 	movw	r2, #1071	; 0x42f
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d006      	beq.n	800ca0c <_ZN3BTD4InitEhhb+0x10a>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ca04:	f240 32d5 	movw	r2, #981	; 0x3d5
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d163      	bne.n	800cad4 <_ZN3BTD4InitEhhb+0x1d2>
                delay(100);
 800ca0c:	2064      	movs	r0, #100	; 0x64
 800ca0e:	f7f5 fa27 	bl	8001e60 <HAL_Delay>
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 1); // We only need the Control endpoint, so we don't have to initialize the other endpoints of device
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ca22:	2301      	movs	r3, #1
 800ca24:	f005 f9e6 	bl	8011df4 <_ZN3USB7setConfEhhh>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800ca2e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	f040 80f9 	bne.w	800cc2a <_ZN3BTD4InitEhhb+0x328>
                                Notify(PSTR("\r\nNavigation Controller Connected"), 0x80);
                } else // It must be a Motion controller
                        Notify(PSTR("\r\nMotion Controller Connected"), 0x80);
#endif

                if(my_bdaddr[0] == 0x00 && my_bdaddr[1] == 0x00 && my_bdaddr[2] == 0x00 && my_bdaddr[3] == 0x00 && my_bdaddr[4] == 0x00 && my_bdaddr[5] == 0x00) {
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	7d1b      	ldrb	r3, [r3, #20]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d113      	bne.n	800ca68 <_ZN3BTD4InitEhhb+0x166>
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	7d5b      	ldrb	r3, [r3, #21]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d10f      	bne.n	800ca68 <_ZN3BTD4InitEhhb+0x166>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	7d9b      	ldrb	r3, [r3, #22]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d10b      	bne.n	800ca68 <_ZN3BTD4InitEhhb+0x166>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	7ddb      	ldrb	r3, [r3, #23]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d107      	bne.n	800ca68 <_ZN3BTD4InitEhhb+0x166>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	7e1b      	ldrb	r3, [r3, #24]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d103      	bne.n	800ca68 <_ZN3BTD4InitEhhb+0x166>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	7e5b      	ldrb	r3, [r3, #25]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d019      	beq.n	800ca9c <_ZN3BTD4InitEhhb+0x19a>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPlease plug in the dongle before trying to pair with the PS3 Controller\r\nor set the Bluetooth address in the constructor of the PS3BT class"), 0x80);
#endif
                } else {
                        if(PID == PS3_PID || PID == PS3NAVIGATION_PID)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ca6e:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800ca72:	d006      	beq.n	800ca82 <_ZN3BTD4InitEhhb+0x180>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ca7a:	f240 422f 	movw	r2, #1071	; 0x42f
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d106      	bne.n	800ca90 <_ZN3BTD4InitEhhb+0x18e>
                                setBdaddr(my_bdaddr); // Set internal Bluetooth address
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	3314      	adds	r3, #20
 800ca86:	4619      	mov	r1, r3
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f002 f8b0 	bl	800ebee <_ZN3BTD9setBdaddrEPh>
 800ca8e:	e005      	b.n	800ca9c <_ZN3BTD4InitEhhb+0x19a>
                        else
                                setMoveBdaddr(my_bdaddr); // Set internal Bluetooth address
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	3314      	adds	r3, #20
 800ca94:	4619      	mov	r1, r3
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f002 f8e9 	bl	800ec6e <_ZN3BTD13setMoveBdaddrEPh>
                        }
                        D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                }

                pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 0); // Reset configuration value
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800caac:	2300      	movs	r3, #0
 800caae:	f005 f9a1 	bl	8011df4 <_ZN3USB7setConfEhhh>
                pUsb->setAddr(bAddress, 0, 0); // Reset address
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cabc:	2300      	movs	r3, #0
 800cabe:	2200      	movs	r2, #0
 800cac0:	f005 f96a 	bl	8011d98 <_ZN3USB7setAddrEhhh>
                Release(); // Release device
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	3308      	adds	r3, #8
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	4798      	blx	r3
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED; // Return
 800cad0:	23d1      	movs	r3, #209	; 0xd1
 800cad2:	e0c7      	b.n	800cc64 <_ZN3BTD4InitEhhb+0x362>
        } else {
                // Check if attached device is a Bluetooth dongle and fill endpoint data structure
                // First interface in the configuration must have Bluetooth assigned Class/Subclass/Protocol
                // And 3 endpoints - interrupt-IN, bulk-IN, bulk-OUT, not necessarily in this order
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800cad4:	2300      	movs	r3, #0
 800cad6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800cada:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800cade:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d25e      	bcs.n	800cba4 <_ZN3BTD4InitEhhb+0x2a2>
                        if((VID == IOGEAR_GBU521_VID && PID == IOGEAR_GBU521_PID) || (VID == BELKIN_F8T065BF_VID && PID == BELKIN_F8T065BF_PID)) {
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800caec:	f640 225c 	movw	r2, #2652	; 0xa5c
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d106      	bne.n	800cb02 <_ZN3BTD4InitEhhb+0x200>
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800cafa:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d00d      	beq.n	800cb1e <_ZN3BTD4InitEhhb+0x21c>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800cb08:	f240 520d 	movw	r2, #1293	; 0x50d
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d120      	bne.n	800cb52 <_ZN3BTD4InitEhhb+0x250>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800cb16:	f240 625a 	movw	r2, #1626	; 0x65a
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d119      	bne.n	800cb52 <_ZN3BTD4InitEhhb+0x250>
                                ConfigDescParser<USB_CLASS_VENDOR_SPECIFIC, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Workaround issue with some dongles
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	1d1a      	adds	r2, r3, #4
 800cb22:	f107 0308 	add.w	r3, r7, #8
 800cb26:	4611      	mov	r1, r2
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f002 f8f3 	bl	800ed14 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cb38:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800cb3c:	f107 0308 	add.w	r3, r7, #8
 800cb40:	9300      	str	r3, [sp, #0]
 800cb42:	4613      	mov	r3, r2
 800cb44:	2200      	movs	r2, #0
 800cb46:	f005 f8da 	bl	8011cfe <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800cb50:	e018      	b.n	800cb84 <_ZN3BTD4InitEhhb+0x282>
                        } else {
                                ConfigDescParser<USB_CLASS_WIRELESS_CTRL, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Set class id according to the specification
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	1d1a      	adds	r2, r3, #4
 800cb56:	f107 0308 	add.w	r3, r7, #8
 800cb5a:	4611      	mov	r1, r2
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f002 f927 	bl	800edb0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cb6c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800cb70:	f107 0308 	add.w	r3, r7, #8
 800cb74:	9300      	str	r3, [sp, #0]
 800cb76:	4613      	mov	r3, r2
 800cb78:	2200      	movs	r2, #0
 800cb7a:	f005 f8c0 	bl	8011cfe <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        }
                        if(rcode) // Check error code
 800cb84:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d150      	bne.n	800cc2e <_ZN3BTD4InitEhhb+0x32c>
                                goto FailGetConfDescr;
                        if(bNumEP >= BTD_MAX_ENDPOINTS) // All endpoints extracted
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800cb92:	2b03      	cmp	r3, #3
 800cb94:	d805      	bhi.n	800cba2 <_ZN3BTD4InitEhhb+0x2a0>
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800cb96:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800cb9a:	3301      	adds	r3, #1
 800cb9c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800cba0:	e79b      	b.n	800cada <_ZN3BTD4InitEhhb+0x1d8>
                                break;
 800cba2:	bf00      	nop
                }

                if(bNumEP < BTD_MAX_ENDPOINTS)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800cbaa:	2b03      	cmp	r3, #3
 800cbac:	d945      	bls.n	800cc3a <_ZN3BTD4InitEhhb+0x338>
                        goto FailUnknownDevice;

                // Assign epInfo to epinfo pointer - this time all 3 endpoins
                rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	3351      	adds	r3, #81	; 0x51
 800cbc2:	f003 ffdc 	bl	8010b7e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800cbcc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d12e      	bne.n	800cc32 <_ZN3BTD4InitEhhb+0x330>
                        goto FailSetDevTblEntry;

                // Set Configuration Value
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bConfNum);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cbea:	f005 f903 	bl	8011df4 <_ZN3USB7setConfEhhh>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800cbf4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d11c      	bne.n	800cc36 <_ZN3BTD4InitEhhb+0x334>
                        goto FailSetConfDescr;

                hci_num_reset_loops = 100; // only loop 100 times before trying to send the hci reset command
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2264      	movs	r2, #100	; 0x64
 800cc00:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                hci_counter = 0;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2200      	movs	r2, #0
 800cc08:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                hci_state = HCI_INIT_STATE;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                waitingForConnection = false;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2200      	movs	r2, #0
 800cc18:	721a      	strb	r2, [r3, #8]
                bPollEnable = true;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2201      	movs	r2, #1
 800cc1e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nBluetooth Dongle Initialized"), 0x80);
#endif
        }
        return 0; // Successful configuration
 800cc22:	2300      	movs	r3, #0
 800cc24:	e01e      	b.n	800cc64 <_ZN3BTD4InitEhhb+0x362>
                goto FailSetDevTblEntry;
 800cc26:	bf00      	nop
 800cc28:	e014      	b.n	800cc54 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 800cc2a:	bf00      	nop
 800cc2c:	e012      	b.n	800cc54 <_ZN3BTD4InitEhhb+0x352>
                                goto FailGetConfDescr;
 800cc2e:	bf00      	nop
 800cc30:	e010      	b.n	800cc54 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetDevTblEntry;
 800cc32:	bf00      	nop
 800cc34:	e00e      	b.n	800cc54 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 800cc36:	bf00      	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 800cc38:	e00c      	b.n	800cc54 <_ZN3BTD4InitEhhb+0x352>
                        goto FailUnknownDevice;
 800cc3a:	bf00      	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cc46:	2300      	movs	r3, #0
 800cc48:	2200      	movs	r2, #0
 800cc4a:	f005 f8a5 	bl	8011d98 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800cc4e:	23d1      	movs	r3, #209	; 0xd1
 800cc50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nBTD Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	3308      	adds	r3, #8
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	4798      	blx	r3
        return rcode;
 800cc60:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3750      	adds	r7, #80	; 0x50
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <_ZN3BTD10InitializeEv>:

void BTD::Initialize() {
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b084      	sub	sp, #16
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800cc74:	2300      	movs	r3, #0
 800cc76:	73fb      	strb	r3, [r7, #15]
 800cc78:	7bfb      	ldrb	r3, [r7, #15]
 800cc7a:	2b03      	cmp	r3, #3
 800cc7c:	d845      	bhi.n	800cd0a <_ZN3BTD10InitializeEv+0x9e>
                epInfo[i].epAddr = 0;
 800cc7e:	7bfa      	ldrb	r2, [r7, #15]
 800cc80:	6879      	ldr	r1, [r7, #4]
 800cc82:	4613      	mov	r3, r2
 800cc84:	005b      	lsls	r3, r3, #1
 800cc86:	4413      	add	r3, r2
 800cc88:	440b      	add	r3, r1
 800cc8a:	3351      	adds	r3, #81	; 0x51
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	701a      	strb	r2, [r3, #0]
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 800cc90:	7bfb      	ldrb	r3, [r7, #15]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d001      	beq.n	800cc9a <_ZN3BTD10InitializeEv+0x2e>
 800cc96:	2000      	movs	r0, #0
 800cc98:	e000      	b.n	800cc9c <_ZN3BTD10InitializeEv+0x30>
 800cc9a:	2008      	movs	r0, #8
 800cc9c:	7bfa      	ldrb	r2, [r7, #15]
 800cc9e:	6879      	ldr	r1, [r7, #4]
 800cca0:	4613      	mov	r3, r2
 800cca2:	005b      	lsls	r3, r3, #1
 800cca4:	4413      	add	r3, r2
 800cca6:	440b      	add	r3, r1
 800cca8:	3352      	adds	r3, #82	; 0x52
 800ccaa:	4602      	mov	r2, r0
 800ccac:	701a      	strb	r2, [r3, #0]
                epInfo[i].bmSndToggle = 0;
 800ccae:	7bfa      	ldrb	r2, [r7, #15]
 800ccb0:	6879      	ldr	r1, [r7, #4]
 800ccb2:	4613      	mov	r3, r2
 800ccb4:	005b      	lsls	r3, r3, #1
 800ccb6:	4413      	add	r3, r2
 800ccb8:	440b      	add	r3, r1
 800ccba:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800ccbe:	78d3      	ldrb	r3, [r2, #3]
 800ccc0:	f36f 0300 	bfc	r3, #0, #1
 800ccc4:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmRcvToggle = 0;
 800ccc6:	7bfa      	ldrb	r2, [r7, #15]
 800ccc8:	6879      	ldr	r1, [r7, #4]
 800ccca:	4613      	mov	r3, r2
 800cccc:	005b      	lsls	r3, r3, #1
 800ccce:	4413      	add	r3, r2
 800ccd0:	440b      	add	r3, r1
 800ccd2:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800ccd6:	78d3      	ldrb	r3, [r2, #3]
 800ccd8:	f36f 0341 	bfc	r3, #1, #1
 800ccdc:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 800ccde:	7bfb      	ldrb	r3, [r7, #15]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d001      	beq.n	800cce8 <_ZN3BTD10InitializeEv+0x7c>
 800cce4:	2101      	movs	r1, #1
 800cce6:	e000      	b.n	800ccea <_ZN3BTD10InitializeEv+0x7e>
 800cce8:	210f      	movs	r1, #15
 800ccea:	7bfa      	ldrb	r2, [r7, #15]
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	4613      	mov	r3, r2
 800ccf0:	005b      	lsls	r3, r3, #1
 800ccf2:	4413      	add	r3, r2
 800ccf4:	4403      	add	r3, r0
 800ccf6:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800ccfa:	78d3      	ldrb	r3, [r2, #3]
 800ccfc:	f361 0387 	bfi	r3, r1, #2, #6
 800cd00:	70d3      	strb	r3, [r2, #3]
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800cd02:	7bfb      	ldrb	r3, [r7, #15]
 800cd04:	3301      	adds	r3, #1
 800cd06:	73fb      	strb	r3, [r7, #15]
 800cd08:	e7b6      	b.n	800cc78 <_ZN3BTD10InitializeEv+0xc>
        }
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	73fb      	strb	r3, [r7, #15]
 800cd0e:	7bfb      	ldrb	r3, [r7, #15]
 800cd10:	2b03      	cmp	r3, #3
 800cd12:	d81c      	bhi.n	800cd4e <_ZN3BTD10InitializeEv+0xe2>
                if(btService[i])
 800cd14:	7bfb      	ldrb	r3, [r7, #15]
 800cd16:	687a      	ldr	r2, [r7, #4]
 800cd18:	3318      	adds	r3, #24
 800cd1a:	009b      	lsls	r3, r3, #2
 800cd1c:	4413      	add	r3, r2
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d010      	beq.n	800cd46 <_ZN3BTD10InitializeEv+0xda>
                        btService[i]->Reset(); // Reset all Bluetooth services
 800cd24:	7bfb      	ldrb	r3, [r7, #15]
 800cd26:	687a      	ldr	r2, [r7, #4]
 800cd28:	3318      	adds	r3, #24
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	4413      	add	r3, r2
 800cd2e:	6859      	ldr	r1, [r3, #4]
 800cd30:	7bfb      	ldrb	r3, [r7, #15]
 800cd32:	687a      	ldr	r2, [r7, #4]
 800cd34:	3318      	adds	r3, #24
 800cd36:	009b      	lsls	r3, r3, #2
 800cd38:	4413      	add	r3, r2
 800cd3a:	685b      	ldr	r3, [r3, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	3308      	adds	r3, #8
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	4608      	mov	r0, r1
 800cd44:	4798      	blx	r3
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800cd46:	7bfb      	ldrb	r3, [r7, #15]
 800cd48:	3301      	adds	r3, #1
 800cd4a:	73fb      	strb	r3, [r7, #15]
 800cd4c:	e7df      	b.n	800cd0e <_ZN3BTD10InitializeEv+0xa2>
        }

        connectToWii = false;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2200      	movs	r2, #0
 800cd52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        incomingWii = false;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        connectToHIDDevice = false;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2200      	movs	r2, #0
 800cd62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        incomingHIDDevice = false;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        incomingPSController = false;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2200      	movs	r2, #0
 800cd72:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        bAddress = 0; // Clear device address
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        bNumEP = 1; // Must have to be reset to 1
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2201      	movs	r2, #1
 800cd82:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        qNextPollTime = 0; // Reset next poll time
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	661a      	str	r2, [r3, #96]	; 0x60
        pollInterval = 0;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bPollEnable = false; // Don't start polling before dongle is connected
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2200      	movs	r2, #0
 800cd98:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        simple_pairing_supported = false;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
}
 800cda4:	bf00      	nop
 800cda6:	3710      	adds	r7, #16
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:

/* Extracts interrupt-IN, bulk-IN, bulk-OUT endpoint information from config descriptor */
void BTD::EndpointXtract(uint8_t conf, uint8_t iface __attribute__((unused)), uint8_t alt, uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *pep) {
 800cdac:	b480      	push	{r7}
 800cdae:	b085      	sub	sp, #20
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	4608      	mov	r0, r1
 800cdb6:	4611      	mov	r1, r2
 800cdb8:	461a      	mov	r2, r3
 800cdba:	4603      	mov	r3, r0
 800cdbc:	70fb      	strb	r3, [r7, #3]
 800cdbe:	460b      	mov	r3, r1
 800cdc0:	70bb      	strb	r3, [r7, #2]
 800cdc2:	4613      	mov	r3, r2
 800cdc4:	707b      	strb	r3, [r7, #1]
        //ErrorMessage<uint8_t>(PSTR("Conf.Val"),conf);
        //ErrorMessage<uint8_t>(PSTR("Iface Num"),iface);
        //ErrorMessage<uint8_t>(PSTR("Alt.Set"),alt);

        if(alt) // Wrong interface - by BT spec, no alt setting
 800cdc6:	787b      	ldrb	r3, [r7, #1]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d15d      	bne.n	800ce88 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xdc>
                return;

        bConfNum = conf;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	78fa      	ldrb	r2, [r7, #3]
 800cdd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) { // Interrupt In endpoint found
 800cdd4:	69fb      	ldr	r3, [r7, #28]
 800cdd6:	78db      	ldrb	r3, [r3, #3]
 800cdd8:	f003 0303 	and.w	r3, r3, #3
 800cddc:	2b03      	cmp	r3, #3
 800cdde:	d114      	bne.n	800ce0a <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
 800cde0:	69fb      	ldr	r3, [r7, #28]
 800cde2:	789b      	ldrb	r3, [r3, #2]
 800cde4:	b25b      	sxtb	r3, r3
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	da0f      	bge.n	800ce0a <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
                index = BTD_EVENT_PIPE;
 800cdea:	2301      	movs	r3, #1
 800cdec:	73fb      	strb	r3, [r7, #15]
                epInfo[index].bmNakPower = USB_NAK_NOWAIT;
 800cdee:	7bfa      	ldrb	r2, [r7, #15]
 800cdf0:	6879      	ldr	r1, [r7, #4]
 800cdf2:	4613      	mov	r3, r2
 800cdf4:	005b      	lsls	r3, r3, #1
 800cdf6:	4413      	add	r3, r2
 800cdf8:	440b      	add	r3, r1
 800cdfa:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800cdfe:	78d3      	ldrb	r3, [r2, #3]
 800ce00:	2101      	movs	r1, #1
 800ce02:	f361 0387 	bfi	r3, r1, #2, #6
 800ce06:	70d3      	strb	r3, [r2, #3]
 800ce08:	e00e      	b.n	800ce28 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7c>
        } else if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_BULK) // Bulk endpoint found
 800ce0a:	69fb      	ldr	r3, [r7, #28]
 800ce0c:	78db      	ldrb	r3, [r3, #3]
 800ce0e:	f003 0303 	and.w	r3, r3, #3
 800ce12:	2b02      	cmp	r3, #2
 800ce14:	d13a      	bne.n	800ce8c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe0>
                index = ((pep->bEndpointAddress & 0x80) == 0x80) ? BTD_DATAIN_PIPE : BTD_DATAOUT_PIPE;
 800ce16:	69fb      	ldr	r3, [r7, #28]
 800ce18:	789b      	ldrb	r3, [r3, #2]
 800ce1a:	b25b      	sxtb	r3, r3
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	da01      	bge.n	800ce24 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x78>
 800ce20:	2302      	movs	r3, #2
 800ce22:	e000      	b.n	800ce26 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7a>
 800ce24:	2303      	movs	r3, #3
 800ce26:	73fb      	strb	r3, [r7, #15]
        else
            return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 800ce28:	69fb      	ldr	r3, [r7, #28]
 800ce2a:	789b      	ldrb	r3, [r3, #2]
 800ce2c:	7bfa      	ldrb	r2, [r7, #15]
 800ce2e:	f003 030f 	and.w	r3, r3, #15
 800ce32:	b2d8      	uxtb	r0, r3
 800ce34:	6879      	ldr	r1, [r7, #4]
 800ce36:	4613      	mov	r3, r2
 800ce38:	005b      	lsls	r3, r3, #1
 800ce3a:	4413      	add	r3, r2
 800ce3c:	440b      	add	r3, r1
 800ce3e:	3351      	adds	r3, #81	; 0x51
 800ce40:	4602      	mov	r2, r0
 800ce42:	701a      	strb	r2, [r3, #0]
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 800ce44:	69fb      	ldr	r3, [r7, #28]
 800ce46:	889b      	ldrh	r3, [r3, #4]
 800ce48:	b29b      	uxth	r3, r3
 800ce4a:	7bfa      	ldrb	r2, [r7, #15]
 800ce4c:	b2d8      	uxtb	r0, r3
 800ce4e:	6879      	ldr	r1, [r7, #4]
 800ce50:	4613      	mov	r3, r2
 800ce52:	005b      	lsls	r3, r3, #1
 800ce54:	4413      	add	r3, r2
 800ce56:	440b      	add	r3, r1
 800ce58:	3352      	adds	r3, #82	; 0x52
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	701a      	strb	r2, [r3, #0]
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	799b      	ldrb	r3, [r3, #6]
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d204      	bcs.n	800ce76 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xca>
                pollInterval = pep->bInterval;
 800ce6c:	69fb      	ldr	r3, [r7, #28]
 800ce6e:	799a      	ldrb	r2, [r3, #6]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bNumEP++;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800ce7c:	3301      	adds	r3, #1
 800ce7e:	b2da      	uxtb	r2, r3
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800ce86:	e002      	b.n	800ce8e <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
                return;
 800ce88:	bf00      	nop
 800ce8a:	e000      	b.n	800ce8e <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
            return;
 800ce8c:	bf00      	nop
}
 800ce8e:	3714      	adds	r7, #20
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr

0800ce98 <_ZThn4_N3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 800ce98:	f1a0 0004 	sub.w	r0, r0, #4
 800ce9c:	f7ff bf86 	b.w	800cdac <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

0800cea0 <_ZN3BTD7ReleaseEv>:
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}

/* Performs a cleanup after failed Init() attempt */
uint8_t BTD::Release() {
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b082      	sub	sp, #8
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
        Initialize(); // Set all variables, endpoint structs etc. to default values
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f7ff fedf 	bl	800cc6c <_ZN3BTD10InitializeEv>
        pUsb->GetAddressPool().FreeAddress(bAddress);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7ff fa78 	bl	800c3a8 <_ZN3USB14GetAddressPoolEv>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	681a      	ldr	r2, [r3, #0]
 800cebc:	3208      	adds	r2, #8
 800cebe:	6812      	ldr	r2, [r2, #0]
 800cec0:	6879      	ldr	r1, [r7, #4]
 800cec2:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
 800cec6:	4618      	mov	r0, r3
 800cec8:	4790      	blx	r2
        return 0;
 800ceca:	2300      	movs	r3, #0
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3708      	adds	r7, #8
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <_ZN3BTD4PollEv>:

uint8_t BTD::Poll() {
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b082      	sub	sp, #8
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
        if(!bPollEnable)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800cee2:	f083 0301 	eor.w	r3, r3, #1
 800cee6:	b2db      	uxtb	r3, r3
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d001      	beq.n	800cef0 <_ZN3BTD4PollEv+0x1c>
                return 0;
 800ceec:	2300      	movs	r3, #0
 800ceee:	e01d      	b.n	800cf2c <_ZN3BTD4PollEv+0x58>
        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Don't poll if shorter than polling interval
 800cef0:	f7f4 ffaa 	bl	8001e48 <HAL_GetTick>
 800cef4:	4602      	mov	r2, r0
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cefa:	1ad3      	subs	r3, r2, r3
 800cefc:	43db      	mvns	r3, r3
 800cefe:	0fdb      	lsrs	r3, r3, #31
 800cf00:	b2db      	uxtb	r3, r3
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d011      	beq.n	800cf2a <_ZN3BTD4PollEv+0x56>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 800cf06:	f7f4 ff9f 	bl	8001e48 <HAL_GetTick>
 800cf0a:	4602      	mov	r2, r0
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800cf12:	441a      	add	r2, r3
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	661a      	str	r2, [r3, #96]	; 0x60
                HCI_event_task(); // Poll the HCI event pipe
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f000 f80b 	bl	800cf34 <_ZN3BTD14HCI_event_taskEv>
                HCI_task(); // HCI state machine
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f000 fb22 	bl	800d568 <_ZN3BTD8HCI_taskEv>
                ACL_event_task(); // Poll the ACL input pipe too
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f000 fe4b 	bl	800dbc0 <_ZN3BTD14ACL_event_taskEv>
        }
        return 0;
 800cf2a:	2300      	movs	r3, #0
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3708      	adds	r7, #8
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <_ZN3BTD14HCI_event_taskEv>:
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
                if(btService[i])
                        btService[i]->disconnect();
};

void BTD::HCI_event_task() {
 800cf34:	b5b0      	push	{r4, r5, r7, lr}
 800cf36:	b088      	sub	sp, #32
 800cf38:	af02      	add	r7, sp, #8
 800cf3a:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE; // Request more than 16 bytes anyway, the inTransfer routine will take care of this
 800cf3c:	2340      	movs	r3, #64	; 0x40
 800cf3e:	81bb      	strh	r3, [r7, #12]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_EVENT_PIPE ].epAddr, &length, hcibuf, pollInterval); // Input on endpoint 1
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	3389      	adds	r3, #137	; 0x89
 800cf54:	687a      	ldr	r2, [r7, #4]
 800cf56:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800cf5a:	f107 050c 	add.w	r5, r7, #12
 800cf5e:	9201      	str	r2, [sp, #4]
 800cf60:	9300      	str	r3, [sp, #0]
 800cf62:	462b      	mov	r3, r5
 800cf64:	4622      	mov	r2, r4
 800cf66:	f003 ff72 	bl	8010e4e <_ZN3USB10inTransferEhhPtPhh>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	73fb      	strb	r3, [r7, #15]

        if(!rcode || rcode == hrNAK) { // Check for errors
 800cf6e:	7bfb      	ldrb	r3, [r7, #15]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d003      	beq.n	800cf7c <_ZN3BTD14HCI_event_taskEv+0x48>
 800cf74:	7bfb      	ldrb	r3, [r7, #15]
 800cf76:	2b04      	cmp	r3, #4
 800cf78:	f040 82f1 	bne.w	800d55e <_ZN3BTD14HCI_event_taskEv+0x62a>
                switch(hcibuf[0]) { // Switch on event type
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800cf82:	3b01      	subs	r3, #1
 800cf84:	2b35      	cmp	r3, #53	; 0x35
 800cf86:	f200 82ea 	bhi.w	800d55e <_ZN3BTD14HCI_event_taskEv+0x62a>
 800cf8a:	a201      	add	r2, pc, #4	; (adr r2, 800cf90 <_ZN3BTD14HCI_event_taskEv+0x5c>)
 800cf8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf90:	0800d171 	.word	0x0800d171
 800cf94:	0800d1d1 	.word	0x0800d1d1
 800cf98:	0800d329 	.word	0x0800d329
 800cf9c:	0800d413 	.word	0x0800d413
 800cfa0:	0800d385 	.word	0x0800d385
 800cfa4:	0800d4d1 	.word	0x0800d4d1
 800cfa8:	0800d3b7 	.word	0x0800d3b7
 800cfac:	0800d549 	.word	0x0800d549
 800cfb0:	0800d549 	.word	0x0800d549
 800cfb4:	0800d55f 	.word	0x0800d55f
 800cfb8:	0800d55f 	.word	0x0800d55f
 800cfbc:	0800d549 	.word	0x0800d549
 800cfc0:	0800d549 	.word	0x0800d549
 800cfc4:	0800d069 	.word	0x0800d069
 800cfc8:	0800d549 	.word	0x0800d549
 800cfcc:	0800d55f 	.word	0x0800d55f
 800cfd0:	0800d55f 	.word	0x0800d55f
 800cfd4:	0800d549 	.word	0x0800d549
 800cfd8:	0800d549 	.word	0x0800d549
 800cfdc:	0800d55f 	.word	0x0800d55f
 800cfe0:	0800d55f 	.word	0x0800d55f
 800cfe4:	0800d49f 	.word	0x0800d49f
 800cfe8:	0800d4c9 	.word	0x0800d4c9
 800cfec:	0800d549 	.word	0x0800d549
 800cff0:	0800d549 	.word	0x0800d549
 800cff4:	0800d549 	.word	0x0800d549
 800cff8:	0800d549 	.word	0x0800d549
 800cffc:	0800d55f 	.word	0x0800d55f
 800d000:	0800d55f 	.word	0x0800d55f
 800d004:	0800d55f 	.word	0x0800d55f
 800d008:	0800d55f 	.word	0x0800d55f
 800d00c:	0800d549 	.word	0x0800d549
 800d010:	0800d55f 	.word	0x0800d55f
 800d014:	0800d55f 	.word	0x0800d55f
 800d018:	0800d55f 	.word	0x0800d55f
 800d01c:	0800d55f 	.word	0x0800d55f
 800d020:	0800d55f 	.word	0x0800d55f
 800d024:	0800d55f 	.word	0x0800d55f
 800d028:	0800d55f 	.word	0x0800d55f
 800d02c:	0800d55f 	.word	0x0800d55f
 800d030:	0800d55f 	.word	0x0800d55f
 800d034:	0800d55f 	.word	0x0800d55f
 800d038:	0800d55f 	.word	0x0800d55f
 800d03c:	0800d55f 	.word	0x0800d55f
 800d040:	0800d55f 	.word	0x0800d55f
 800d044:	0800d55f 	.word	0x0800d55f
 800d048:	0800d55f 	.word	0x0800d55f
 800d04c:	0800d55f 	.word	0x0800d55f
 800d050:	0800d539 	.word	0x0800d539
 800d054:	0800d549 	.word	0x0800d549
 800d058:	0800d541 	.word	0x0800d541
 800d05c:	0800d55f 	.word	0x0800d55f
 800d060:	0800d55f 	.word	0x0800d55f
 800d064:	0800d549 	.word	0x0800d549
                        case EV_COMMAND_COMPLETE:
                                if(!hcibuf[5]) { // Check if command succeeded
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800d06e:	2b00      	cmp	r3, #0
 800d070:	f040 826c 	bne.w	800d54c <_ZN3BTD14HCI_event_taskEv+0x618>
                                        hci_set_flag(HCI_FLAG_CMD_COMPLETE); // Set command complete flag
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d07a:	f043 0301 	orr.w	r3, r3, #1
 800d07e:	b29a      	uxth	r2, r3
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        if((hcibuf[3] == 0x01) && (hcibuf[4] == 0x10)) { // Parameters from read local version information
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d08c:	2b01      	cmp	r3, #1
 800d08e:	d114      	bne.n	800d0ba <_ZN3BTD14HCI_event_taskEv+0x186>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d096:	2b10      	cmp	r3, #16
 800d098:	d10f      	bne.n	800d0ba <_ZN3BTD14HCI_event_taskEv+0x186>
                                                hci_version = hcibuf[6]; // Used to check if it supports 2.0+EDR - see http://www.bluetooth.org/Technical/AssignedNumbers/hci.htm
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f893 208f 	ldrb.w	r2, [r3, #143]	; 0x8f
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                                if(!hci_check_flag(HCI_FLAG_READ_VERSION)) {
                                                        Notify(PSTR("\r\nHCI version: "), 0x80);
                                                        D_PrintHex<uint8_t > (hci_version, 0x80);
                                                }
#endif
                                                hci_set_flag(HCI_FLAG_READ_VERSION);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d0ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0b0:	b29a      	uxth	r2, r3
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800d0b8:	e059      	b.n	800d16e <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x04) && (hcibuf[4] == 0x10)) { // Parameters from read local extended features
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d0c0:	2b04      	cmp	r3, #4
 800d0c2:	d12a      	bne.n	800d11a <_ZN3BTD14HCI_event_taskEv+0x1e6>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d0ca:	2b10      	cmp	r3, #16
 800d0cc:	d125      	bne.n	800d11a <_ZN3BTD14HCI_event_taskEv+0x1e6>
                                                if(!hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d0d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d114      	bne.n	800d106 <_ZN3BTD14HCI_event_taskEv+0x1d2>
                                                        for(uint8_t i = 0; i < 8; i++) {
                                                                Notify(PSTR(" "), 0x80);
                                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                                        }
#endif
                                                        if(hcibuf[6] == 0) { // Page 0
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d10f      	bne.n	800d106 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
#endif
                                                                if(hcibuf[8 + 6] & (1U << 3)) {
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800d0ec:	f003 0308 	and.w	r3, r3, #8
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d004      	beq.n	800d0fe <_ZN3BTD14HCI_event_taskEv+0x1ca>
                                                                        simple_pairing_supported = true;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800d0fc:	e003      	b.n	800d106 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("supports"), 0x80);
#endif
                                                                } else {
                                                                        simple_pairing_supported = false;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2200      	movs	r2, #0
 800d102:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
                                                                Notify(PSTR(" secure simple pairing (host support)"), 0x80);
#endif
                                                        }
                                                }

                                                hci_set_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d10c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d110:	b29a      	uxth	r2, r3
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800d118:	e029      	b.n	800d16e <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x09) && (hcibuf[4] == 0x10)) { // Parameters from read local bluetooth address
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d120:	2b09      	cmp	r3, #9
 800d122:	f040 8213 	bne.w	800d54c <_ZN3BTD14HCI_event_taskEv+0x618>
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d12c:	2b10      	cmp	r3, #16
 800d12e:	f040 820d 	bne.w	800d54c <_ZN3BTD14HCI_event_taskEv+0x618>
                                                for(uint8_t i = 0; i < 6; i++)
 800d132:	2300      	movs	r3, #0
 800d134:	75fb      	strb	r3, [r7, #23]
 800d136:	7dfb      	ldrb	r3, [r7, #23]
 800d138:	2b05      	cmp	r3, #5
 800d13a:	d80e      	bhi.n	800d15a <_ZN3BTD14HCI_event_taskEv+0x226>
                                                        my_bdaddr[i] = hcibuf[6 + i];
 800d13c:	7dfb      	ldrb	r3, [r7, #23]
 800d13e:	1d9a      	adds	r2, r3, #6
 800d140:	7dfb      	ldrb	r3, [r7, #23]
 800d142:	6879      	ldr	r1, [r7, #4]
 800d144:	440a      	add	r2, r1
 800d146:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d14a:	687a      	ldr	r2, [r7, #4]
 800d14c:	4413      	add	r3, r2
 800d14e:	460a      	mov	r2, r1
 800d150:	751a      	strb	r2, [r3, #20]
                                                for(uint8_t i = 0; i < 6; i++)
 800d152:	7dfb      	ldrb	r3, [r7, #23]
 800d154:	3301      	adds	r3, #1
 800d156:	75fb      	strb	r3, [r7, #23]
 800d158:	e7ed      	b.n	800d136 <_ZN3BTD14HCI_event_taskEv+0x202>
                                                hci_set_flag(HCI_FLAG_READ_BDADDR);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d160:	f043 0320 	orr.w	r3, r3, #32
 800d164:	b29a      	uxth	r2, r3
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        }
                                }
                                break;
 800d16c:	e1ee      	b.n	800d54c <_ZN3BTD14HCI_event_taskEv+0x618>
 800d16e:	e1ed      	b.n	800d54c <_ZN3BTD14HCI_event_taskEv+0x618>
#endif
                                }
                                break;

                        case EV_INQUIRY_COMPLETE:
                                if(inquiry_counter >= 5 && (pairWithWii || pairWithHIDDevice)) {
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800d176:	2b04      	cmp	r3, #4
 800d178:	d921      	bls.n	800d1be <_ZN3BTD14HCI_event_taskEv+0x28a>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d180:	2b00      	cmp	r3, #0
 800d182:	d104      	bne.n	800d18e <_ZN3BTD14HCI_event_taskEv+0x25a>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d017      	beq.n	800d1be <_ZN3BTD14HCI_event_taskEv+0x28a>
                                        inquiry_counter = 0;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2200      	movs	r2, #0
 800d192:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nCouldn't find Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nCouldn't find HID device"), 0x80);
#endif
                                        connectToWii = false;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2200      	movs	r2, #0
 800d19a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        pairWithWii = false;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                                        connectToHIDDevice = false;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                        pairWithHIDDevice = false;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                        hci_state = HCI_SCANNING_STATE;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	220a      	movs	r2, #10
 800d1ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                }
                                inquiry_counter++;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	b2da      	uxtb	r2, r3
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                break;
 800d1ce:	e1c6      	b.n	800d55e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_INQUIRY_RESULT:
                                if(hcibuf[2]) { // Check that there is more than zero responses
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	f000 81ba 	beq.w	800d550 <_ZN3BTD14HCI_event_taskEv+0x61c>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nNumber of responses: "), 0x80);
                                        Notify(hcibuf[2], 0x80);
#endif
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800d1dc:	2300      	movs	r3, #0
 800d1de:	75bb      	strb	r3, [r7, #22]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d1e6:	7dba      	ldrb	r2, [r7, #22]
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	f080 81b1 	bcs.w	800d550 <_ZN3BTD14HCI_event_taskEv+0x61c>
                                                uint8_t offset = 8 * hcibuf[2] + 3 * i;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d1f4:	00db      	lsls	r3, r3, #3
 800d1f6:	b2da      	uxtb	r2, r3
 800d1f8:	7dbb      	ldrb	r3, [r7, #22]
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	0049      	lsls	r1, r1, #1
 800d1fe:	440b      	add	r3, r1
 800d200:	b2db      	uxtb	r3, r3
 800d202:	4413      	add	r3, r2
 800d204:	73bb      	strb	r3, [r7, #14]

                                                for(uint8_t j = 0; j < 3; j++)
 800d206:	2300      	movs	r3, #0
 800d208:	757b      	strb	r3, [r7, #21]
 800d20a:	7d7b      	ldrb	r3, [r7, #21]
 800d20c:	2b02      	cmp	r3, #2
 800d20e:	d811      	bhi.n	800d234 <_ZN3BTD14HCI_event_taskEv+0x300>
                                                        classOfDevice[j] = hcibuf[j + 4 + offset];
 800d210:	7d7b      	ldrb	r3, [r7, #21]
 800d212:	1d1a      	adds	r2, r3, #4
 800d214:	7bbb      	ldrb	r3, [r7, #14]
 800d216:	441a      	add	r2, r3
 800d218:	7d7b      	ldrb	r3, [r7, #21]
 800d21a:	6879      	ldr	r1, [r7, #4]
 800d21c:	440a      	add	r2, r1
 800d21e:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d222:	687a      	ldr	r2, [r7, #4]
 800d224:	4413      	add	r3, r2
 800d226:	460a      	mov	r2, r1
 800d228:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                                for(uint8_t j = 0; j < 3; j++)
 800d22c:	7d7b      	ldrb	r3, [r7, #21]
 800d22e:	3301      	adds	r3, #1
 800d230:	757b      	strb	r3, [r7, #21]
 800d232:	e7ea      	b.n	800d20a <_ZN3BTD14HCI_event_taskEv+0x2d6>
                                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                                Notify(PSTR(" "), 0x80);
                                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif

                                                if(pairWithWii && classOfDevice[2] == 0x00 && (classOfDevice[1] == 0x05) && (classOfDevice[0] & 0x0C)) { // See http://wiibrew.org/wiki/Wiimote#SDP_information
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d038      	beq.n	800d2b0 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d244:	2b00      	cmp	r3, #0
 800d246:	d133      	bne.n	800d2b0 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800d24e:	2b05      	cmp	r3, #5
 800d250:	d12e      	bne.n	800d2b0 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d258:	f003 030c 	and.w	r3, r3, #12
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d027      	beq.n	800d2b0 <_ZN3BTD14HCI_event_taskEv+0x37c>
                                                        checkRemoteName = true; // Check remote name to distinguish between the different controllers
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2201      	movs	r2, #1
 800d264:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

                                                        for(uint8_t j = 0; j < 6; j++)
 800d268:	2300      	movs	r3, #0
 800d26a:	753b      	strb	r3, [r7, #20]
 800d26c:	7d3b      	ldrb	r3, [r7, #20]
 800d26e:	2b05      	cmp	r3, #5
 800d270:	d814      	bhi.n	800d29c <_ZN3BTD14HCI_event_taskEv+0x368>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800d272:	7d3b      	ldrb	r3, [r7, #20]
 800d274:	1cd9      	adds	r1, r3, #3
 800d276:	7dba      	ldrb	r2, [r7, #22]
 800d278:	4613      	mov	r3, r2
 800d27a:	005b      	lsls	r3, r3, #1
 800d27c:	4413      	add	r3, r2
 800d27e:	005b      	lsls	r3, r3, #1
 800d280:	18ca      	adds	r2, r1, r3
 800d282:	7d3b      	ldrb	r3, [r7, #20]
 800d284:	6879      	ldr	r1, [r7, #4]
 800d286:	440a      	add	r2, r1
 800d288:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d28c:	687a      	ldr	r2, [r7, #4]
 800d28e:	4413      	add	r3, r2
 800d290:	460a      	mov	r2, r1
 800d292:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800d294:	7d3b      	ldrb	r3, [r7, #20]
 800d296:	3301      	adds	r3, #1
 800d298:	753b      	strb	r3, [r7, #20]
 800d29a:	e7e7      	b.n	800d26c <_ZN3BTD14HCI_event_taskEv+0x338>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d2a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2a6:	b29a      	uxth	r2, r3
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800d2ae:	e03a      	b.n	800d326 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                                } else if(pairWithHIDDevice && (classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad - see: http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d031      	beq.n	800d31e <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800d2c0:	f003 030f 	and.w	r3, r3, #15
 800d2c4:	2b05      	cmp	r3, #5
 800d2c6:	d12a      	bne.n	800d31e <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d2ce:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d023      	beq.n	800d31e <_ZN3BTD14HCI_event_taskEv+0x3ea>
                                                        if(classOfDevice[0] & 0x40)
                                                                Notify(PSTR("\r\nKeyboard found"), 0x80);
                                                        if(classOfDevice[0] & 0x08)
                                                                Notify(PSTR("\r\nGamepad found"), 0x80);
#endif
                                                        for(uint8_t j = 0; j < 6; j++)
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	74fb      	strb	r3, [r7, #19]
 800d2da:	7cfb      	ldrb	r3, [r7, #19]
 800d2dc:	2b05      	cmp	r3, #5
 800d2de:	d814      	bhi.n	800d30a <_ZN3BTD14HCI_event_taskEv+0x3d6>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800d2e0:	7cfb      	ldrb	r3, [r7, #19]
 800d2e2:	1cd9      	adds	r1, r3, #3
 800d2e4:	7dba      	ldrb	r2, [r7, #22]
 800d2e6:	4613      	mov	r3, r2
 800d2e8:	005b      	lsls	r3, r3, #1
 800d2ea:	4413      	add	r3, r2
 800d2ec:	005b      	lsls	r3, r3, #1
 800d2ee:	18ca      	adds	r2, r1, r3
 800d2f0:	7cfb      	ldrb	r3, [r7, #19]
 800d2f2:	6879      	ldr	r1, [r7, #4]
 800d2f4:	440a      	add	r2, r1
 800d2f6:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d2fa:	687a      	ldr	r2, [r7, #4]
 800d2fc:	4413      	add	r3, r2
 800d2fe:	460a      	mov	r2, r1
 800d300:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800d302:	7cfb      	ldrb	r3, [r7, #19]
 800d304:	3301      	adds	r3, #1
 800d306:	74fb      	strb	r3, [r7, #19]
 800d308:	e7e7      	b.n	800d2da <_ZN3BTD14HCI_event_taskEv+0x3a6>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d314:	b29a      	uxth	r2, r3
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800d31c:	e003      	b.n	800d326 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800d31e:	7dbb      	ldrb	r3, [r7, #22]
 800d320:	3301      	adds	r3, #1
 800d322:	75bb      	strb	r3, [r7, #22]
 800d324:	e75c      	b.n	800d1e0 <_ZN3BTD14HCI_event_taskEv+0x2ac>
                                                }
                                        }
                                }
                                break;
 800d326:	e113      	b.n	800d550 <_ZN3BTD14HCI_event_taskEv+0x61c>

                        case EV_CONNECT_COMPLETE:
                                hci_set_flag(HCI_FLAG_CONNECT_EVENT);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d32e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d332:	b29a      	uxth	r2, r3
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                if(!hcibuf[2]) { // Check if connected OK
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d340:	2b00      	cmp	r3, #0
 800d342:	d11a      	bne.n	800d37a <_ZN3BTD14HCI_event_taskEv+0x446>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nConnection established"), 0x80);
#endif
                                        hci_handle = hcibuf[3] | ((hcibuf[4] & 0x0F) << 8); // Store the handle for the ACL connection
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d34a:	b21a      	sxth	r2, r3
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d352:	021b      	lsls	r3, r3, #8
 800d354:	b21b      	sxth	r3, r3
 800d356:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d35a:	b21b      	sxth	r3, r3
 800d35c:	4313      	orrs	r3, r2
 800d35e:	b21b      	sxth	r3, r3
 800d360:	b29a      	uxth	r2, r3
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	835a      	strh	r2, [r3, #26]
                                        hci_set_flag(HCI_FLAG_CONNECT_COMPLETE); // Set connection complete flag
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d36c:	f043 0302 	orr.w	r3, r3, #2
 800d370:	b29a      	uxth	r2, r3
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                }
                                break;
 800d378:	e0f1      	b.n	800d55e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2206      	movs	r2, #6
 800d37e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800d382:	e0ec      	b.n	800d55e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_DISCONNECT_COMPLETE:
                                if(!hcibuf[2]) { // Check if disconnected OK
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	f040 80e2 	bne.w	800d554 <_ZN3BTD14HCI_event_taskEv+0x620>
                                        hci_set_flag(HCI_FLAG_DISCONNECT_COMPLETE); // Set disconnect command complete flag
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d396:	f043 0304 	orr.w	r3, r3, #4
 800d39a:	b29a      	uxth	r2, r3
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE); // Clear connection complete flag
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d3a8:	f023 0302 	bic.w	r3, r3, #2
 800d3ac:	b29a      	uxth	r2, r3
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800d3b4:	e0ce      	b.n	800d554 <_ZN3BTD14HCI_event_taskEv+0x620>

                        case EV_REMOTE_NAME_COMPLETE:
                                if(!hcibuf[2]) { // Check if reading is OK
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	f040 80cb 	bne.w	800d558 <_ZN3BTD14HCI_event_taskEv+0x624>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	74bb      	strb	r3, [r7, #18]
 800d3c6:	7cbb      	ldrb	r3, [r7, #18]
 800d3c8:	2b1d      	cmp	r3, #29
 800d3ca:	d818      	bhi.n	800d3fe <_ZN3BTD14HCI_event_taskEv+0x4ca>
                                                remote_name[i] = hcibuf[9 + i];
 800d3cc:	7cbb      	ldrb	r3, [r7, #18]
 800d3ce:	f103 0209 	add.w	r2, r3, #9
 800d3d2:	7cbb      	ldrb	r3, [r7, #18]
 800d3d4:	6879      	ldr	r1, [r7, #4]
 800d3d6:	440a      	add	r2, r1
 800d3d8:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d3dc:	687a      	ldr	r2, [r7, #4]
 800d3de:	4413      	add	r3, r2
 800d3e0:	460a      	mov	r2, r1
 800d3e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                                                if(remote_name[i] == '\0') // End of string
 800d3e6:	7cbb      	ldrb	r3, [r7, #18]
 800d3e8:	687a      	ldr	r2, [r7, #4]
 800d3ea:	4413      	add	r3, r2
 800d3ec:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d003      	beq.n	800d3fc <_ZN3BTD14HCI_event_taskEv+0x4c8>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800d3f4:	7cbb      	ldrb	r3, [r7, #18]
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	74bb      	strb	r3, [r7, #18]
 800d3fa:	e7e4      	b.n	800d3c6 <_ZN3BTD14HCI_event_taskEv+0x492>
                                                        break;
 800d3fc:	bf00      	nop
                                        }
                                        // TODO: Always set '\0' in remote name!
                                        hci_set_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d404:	f043 0308 	orr.w	r3, r3, #8
 800d408:	b29a      	uxth	r2, r3
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800d410:	e0a2      	b.n	800d558 <_ZN3BTD14HCI_event_taskEv+0x624>

                        case EV_INCOMING_CONNECT:
                                for(uint8_t i = 0; i < 6; i++)
 800d412:	2300      	movs	r3, #0
 800d414:	747b      	strb	r3, [r7, #17]
 800d416:	7c7b      	ldrb	r3, [r7, #17]
 800d418:	2b05      	cmp	r3, #5
 800d41a:	d80e      	bhi.n	800d43a <_ZN3BTD14HCI_event_taskEv+0x506>
                                        disc_bdaddr[i] = hcibuf[i + 2];
 800d41c:	7c7b      	ldrb	r3, [r7, #17]
 800d41e:	1c9a      	adds	r2, r3, #2
 800d420:	7c7b      	ldrb	r3, [r7, #17]
 800d422:	6879      	ldr	r1, [r7, #4]
 800d424:	440a      	add	r2, r1
 800d426:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d42a:	687a      	ldr	r2, [r7, #4]
 800d42c:	4413      	add	r3, r2
 800d42e:	460a      	mov	r2, r1
 800d430:	771a      	strb	r2, [r3, #28]
                                for(uint8_t i = 0; i < 6; i++)
 800d432:	7c7b      	ldrb	r3, [r7, #17]
 800d434:	3301      	adds	r3, #1
 800d436:	747b      	strb	r3, [r7, #17]
 800d438:	e7ed      	b.n	800d416 <_ZN3BTD14HCI_event_taskEv+0x4e2>

                                for(uint8_t i = 0; i < 3; i++)
 800d43a:	2300      	movs	r3, #0
 800d43c:	743b      	strb	r3, [r7, #16]
 800d43e:	7c3b      	ldrb	r3, [r7, #16]
 800d440:	2b02      	cmp	r3, #2
 800d442:	d810      	bhi.n	800d466 <_ZN3BTD14HCI_event_taskEv+0x532>
                                        classOfDevice[i] = hcibuf[i + 8];
 800d444:	7c3b      	ldrb	r3, [r7, #16]
 800d446:	f103 0208 	add.w	r2, r3, #8
 800d44a:	7c3b      	ldrb	r3, [r7, #16]
 800d44c:	6879      	ldr	r1, [r7, #4]
 800d44e:	440a      	add	r2, r1
 800d450:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d454:	687a      	ldr	r2, [r7, #4]
 800d456:	4413      	add	r3, r2
 800d458:	460a      	mov	r2, r1
 800d45a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                for(uint8_t i = 0; i < 3; i++)
 800d45e:	7c3b      	ldrb	r3, [r7, #16]
 800d460:	3301      	adds	r3, #1
 800d462:	743b      	strb	r3, [r7, #16]
 800d464:	e7eb      	b.n	800d43e <_ZN3BTD14HCI_event_taskEv+0x50a>

                                if((classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800d46c:	f003 030f 	and.w	r3, r3, #15
 800d470:	2b05      	cmp	r3, #5
 800d472:	d10a      	bne.n	800d48a <_ZN3BTD14HCI_event_taskEv+0x556>
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d47a:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d003      	beq.n	800d48a <_ZN3BTD14HCI_event_taskEv+0x556>
                                        if(classOfDevice[0] & 0x40)
                                                Notify(PSTR("\r\nKeyboard is connecting"), 0x80);
                                        if(classOfDevice[0] & 0x08)
                                                Notify(PSTR("\r\nGamepad is connecting"), 0x80);
#endif
                                        incomingHIDDevice = true;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2201      	movs	r2, #1
 800d486:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif
                                hci_set_flag(HCI_FLAG_INCOMING_REQUEST);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d490:	f043 0310 	orr.w	r3, r3, #16
 800d494:	b29a      	uxth	r2, r3
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                break;
 800d49c:	e05f      	b.n	800d55e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_PIN_CODE_REQUEST:
                                if(pairWithWii) {
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d003      	beq.n	800d4b0 <_ZN3BTD14HCI_event_taskEv+0x57c>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPairing with Wiimote"), 0x80);
#endif
                                        hci_pin_code_request_reply();
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f000 feec 	bl	800e286 <_ZN3BTD26hci_pin_code_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
#endif
                                        hci_pin_code_negative_request_reply();
                                }
                                break;
 800d4ae:	e056      	b.n	800d55e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                } else if(btdPin != NULL) {
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	691b      	ldr	r3, [r3, #16]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d003      	beq.n	800d4c0 <_ZN3BTD14HCI_event_taskEv+0x58c>
                                        hci_pin_code_request_reply();
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f000 fee4 	bl	800e286 <_ZN3BTD26hci_pin_code_request_replyEv>
                                break;
 800d4be:	e04e      	b.n	800d55e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_pin_code_negative_request_reply();
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f000 ff93 	bl	800e3ec <_ZN3BTD35hci_pin_code_negative_request_replyEv>
                                break;
 800d4c6:	e04a      	b.n	800d55e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_LINK_KEY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived Key Request"), 0x80);
#endif
                                hci_link_key_request_negative_reply();
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f000 ffca 	bl	800e462 <_ZN3BTD35hci_link_key_request_negative_replyEv>
                                break;
 800d4ce:	e046      	b.n	800d55e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_AUTHENTICATION_COMPLETE:
                                if(!hcibuf[2]) { // Check if pairing was successful
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d123      	bne.n	800d522 <_ZN3BTD14HCI_event_taskEv+0x5ee>
                                        if(pairWithWii && !connectToWii) {
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d00c      	beq.n	800d4fe <_ZN3BTD14HCI_event_taskEv+0x5ca>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d4ea:	f083 0301 	eor.w	r3, r3, #1
 800d4ee:	b2db      	uxtb	r3, r3
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d004      	beq.n	800d4fe <_ZN3BTD14HCI_event_taskEv+0x5ca>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nPairing successful with Wiimote"), 0x80);
#endif
                                                connectToWii = true; // Used to indicate to the Wii service, that it should connect to this device
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                        hci_disconnect(hci_handle);
                                        hci_state = HCI_DISCONNECT_STATE;
                                }
                                break;
 800d4fc:	e02e      	b.n	800d55c <_ZN3BTD14HCI_event_taskEv+0x628>
                                        } else if(pairWithHIDDevice && !connectToHIDDevice) {
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d504:	2b00      	cmp	r3, #0
 800d506:	d029      	beq.n	800d55c <_ZN3BTD14HCI_event_taskEv+0x628>
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d50e:	f083 0301 	eor.w	r3, r3, #1
 800d512:	b2db      	uxtb	r3, r3
 800d514:	2b00      	cmp	r3, #0
 800d516:	d021      	beq.n	800d55c <_ZN3BTD14HCI_event_taskEv+0x628>
                                                connectToHIDDevice = true; // Used to indicate to the BTHID service, that it should connect to this device
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2201      	movs	r2, #1
 800d51c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                break;
 800d520:	e01c      	b.n	800d55c <_ZN3BTD14HCI_event_taskEv+0x628>
                                        hci_disconnect(hci_handle);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	8b5b      	ldrh	r3, [r3, #26]
 800d526:	4619      	mov	r1, r3
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f001 f882 	bl	800e632 <_ZN3BTD14hci_disconnectEt>
                                        hci_state = HCI_DISCONNECT_STATE;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2210      	movs	r2, #16
 800d532:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800d536:	e011      	b.n	800d55c <_ZN3BTD14HCI_event_taskEv+0x628>

                        case EV_IO_CAPABILITY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived IO Capability Request"), 0x80);
#endif
                                hci_io_capability_request_reply();
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f000 ffcd 	bl	800e4d8 <_ZN3BTD31hci_io_capability_request_replyEv>
                                break;
 800d53e:	e00e      	b.n	800d55e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                }
#endif
#endif
                                // Simply confirm the connection, as the host has no "NoInputNoOutput" capabilities
                                hci_user_confirmation_request_reply();
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f001 f810 	bl	800e566 <_ZN3BTD35hci_user_confirmation_request_replyEv>
                                break;
 800d546:	e00a      	b.n	800d55e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                if(hcibuf[0] != 0x00) {
                                        Notify(PSTR("\r\nIgnore HCI Event: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[0], 0x80);
                                }
#endif
                                break;
 800d548:	bf00      	nop
 800d54a:	e008      	b.n	800d55e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d54c:	bf00      	nop
 800d54e:	e006      	b.n	800d55e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d550:	bf00      	nop
 800d552:	e004      	b.n	800d55e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d554:	bf00      	nop
 800d556:	e002      	b.n	800d55e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d558:	bf00      	nop
 800d55a:	e000      	b.n	800d55e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d55c:	bf00      	nop
        else {
                Notify(PSTR("\r\nHCI event error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
}
 800d55e:	bf00      	nop
 800d560:	3718      	adds	r7, #24
 800d562:	46bd      	mov	sp, r7
 800d564:	bdb0      	pop	{r4, r5, r7, pc}
 800d566:	bf00      	nop

0800d568 <_ZN3BTD8HCI_taskEv>:

/* Poll Bluetooth and print result */
void BTD::HCI_task() {
 800d568:	b580      	push	{r7, lr}
 800d56a:	b082      	sub	sp, #8
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
        switch(hci_state) {
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d576:	2b13      	cmp	r3, #19
 800d578:	f200 82ef 	bhi.w	800db5a <_ZN3BTD8HCI_taskEv+0x5f2>
 800d57c:	a201      	add	r2, pc, #4	; (adr r2, 800d584 <_ZN3BTD8HCI_taskEv+0x1c>)
 800d57e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d582:	bf00      	nop
 800d584:	0800d5d5 	.word	0x0800d5d5
 800d588:	0800d60f 	.word	0x0800d60f
 800d58c:	0800d695 	.word	0x0800d695
 800d590:	0800d6b5 	.word	0x0800d6b5
 800d594:	0800d6d5 	.word	0x0800d6d5
 800d598:	0800d729 	.word	0x0800d729
 800d59c:	0800d7cf 	.word	0x0800d7cf
 800d5a0:	0800d7fd 	.word	0x0800d7fd
 800d5a4:	0800d837 	.word	0x0800d837
 800d5a8:	0800d85f 	.word	0x0800d85f
 800d5ac:	0800d895 	.word	0x0800d895
 800d5b0:	0800d8f3 	.word	0x0800d8f3
 800d5b4:	0800d931 	.word	0x0800d931
 800d5b8:	0800da57 	.word	0x0800da57
 800d5bc:	0800db5b 	.word	0x0800db5b
 800d5c0:	0800da9d 	.word	0x0800da9d
 800d5c4:	0800dacb 	.word	0x0800dacb
 800d5c8:	0800d75f 	.word	0x0800d75f
 800d5cc:	0800d795 	.word	0x0800d795
 800d5d0:	0800d7b5 	.word	0x0800d7b5
                case HCI_INIT_STATE:
                        hci_counter++;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800d5da:	3301      	adds	r3, #1
 800d5dc:	b29a      	uxth	r2, r3
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > hci_num_reset_loops) { // wait until we have looped x times to clear any old events
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	f240 82b4 	bls.w	800db5e <_ZN3BTD8HCI_taskEv+0x5f6>
                                hci_reset();
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f000 fb7d 	bl	800dcf6 <_ZN3BTD9hci_resetEv>
                                hci_state = HCI_RESET_STATE;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2201      	movs	r2, #1
 800d600:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2200      	movs	r2, #0
 800d608:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        }
                        break;
 800d60c:	e2a7      	b.n	800db5e <_ZN3BTD8HCI_taskEv+0x5f6>

                case HCI_RESET_STATE:
                        hci_counter++;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800d614:	3301      	adds	r3, #1
 800d616:	b29a      	uxth	r2, r3
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d624:	f003 0301 	and.w	r3, r3, #1
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d00b      	beq.n	800d644 <_ZN3BTD8HCI_taskEv+0xdc>
                                hci_counter = 0;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2200      	movs	r2, #0
 800d630:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Reset complete"), 0x80);
#endif
                                hci_state = HCI_CLASS_STATE;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2202      	movs	r2, #2
 800d638:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_write_class_of_device();
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f001 f830 	bl	800e6a2 <_ZN3BTD25hci_write_class_of_deviceEv>
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
#endif
                                hci_state = HCI_INIT_STATE;
                                hci_counter = 0;
                        }
                        break;
 800d642:	e28e      	b.n	800db62 <_ZN3BTD8HCI_taskEv+0x5fa>
                        } else if(hci_counter > hci_num_reset_loops) {
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d650:	429a      	cmp	r2, r3
 800d652:	f240 8286 	bls.w	800db62 <_ZN3BTD8HCI_taskEv+0x5fa>
                                hci_num_reset_loops *= 10;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d65c:	461a      	mov	r2, r3
 800d65e:	0092      	lsls	r2, r2, #2
 800d660:	4413      	add	r3, r2
 800d662:	005b      	lsls	r3, r3, #1
 800d664:	b29a      	uxth	r2, r3
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                if(hci_num_reset_loops > 2000)
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d672:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d676:	d904      	bls.n	800d682 <_ZN3BTD8HCI_taskEv+0x11a>
                                        hci_num_reset_loops = 2000;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d67e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                hci_state = HCI_INIT_STATE;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2200      	movs	r2, #0
 800d68e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        break;
 800d692:	e266      	b.n	800db62 <_ZN3BTD8HCI_taskEv+0x5fa>

                case HCI_CLASS_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d69a:	f003 0301 	and.w	r3, r3, #1
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	f000 8261 	beq.w	800db66 <_ZN3BTD8HCI_taskEv+0x5fe>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWrite class of device"), 0x80);
#endif
                                hci_state = HCI_BDADDR_STATE;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2203      	movs	r2, #3
 800d6a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_read_bdaddr();
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f000 fb72 	bl	800dd96 <_ZN3BTD15hci_read_bdaddrEv>
                        }
                        break;
 800d6b2:	e258      	b.n	800db66 <_ZN3BTD8HCI_taskEv+0x5fe>

                case HCI_BDADDR_STATE:
                        if(hci_check_flag(HCI_FLAG_READ_BDADDR)) {
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d6ba:	f003 0320 	and.w	r3, r3, #32
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	f000 8253 	beq.w	800db6a <_ZN3BTD8HCI_taskEv+0x602>
                                        D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                                hci_read_local_version_information();
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f000 fb8a 	bl	800ddde <_ZN3BTD34hci_read_local_version_informationEv>
                                hci_state = HCI_LOCAL_VERSION_STATE;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2204      	movs	r2, #4
 800d6ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d6d2:	e24a      	b.n	800db6a <_ZN3BTD8HCI_taskEv+0x602>

                case HCI_LOCAL_VERSION_STATE: // The local version is used by the PS3BT class
                        if(hci_check_flag(HCI_FLAG_READ_VERSION)) {
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d6da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	f000 8245 	beq.w	800db6e <_ZN3BTD8HCI_taskEv+0x606>
                                if(btdName != NULL) {
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	68db      	ldr	r3, [r3, #12]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d00a      	beq.n	800d702 <_ZN3BTD8HCI_taskEv+0x19a>
                                        hci_write_local_name(btdName);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f000 fc5d 	bl	800dfb2 <_ZN3BTD20hci_write_local_nameEPKc>
                                        hci_state = HCI_WRITE_NAME_STATE;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2205      	movs	r2, #5
 800d6fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800d700:	e235      	b.n	800db6e <_ZN3BTD8HCI_taskEv+0x606>
                                } else if(useSimplePairing) {
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d008      	beq.n	800d71e <_ZN3BTD8HCI_taskEv+0x1b6>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800d70c:	2100      	movs	r1, #0
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f000 fb89 	bl	800de26 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2211      	movs	r2, #17
 800d718:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d71c:	e227      	b.n	800db6e <_ZN3BTD8HCI_taskEv+0x606>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2206      	movs	r2, #6
 800d722:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d726:	e222      	b.n	800db6e <_ZN3BTD8HCI_taskEv+0x606>

                case HCI_WRITE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d72e:	f003 0301 	and.w	r3, r3, #1
 800d732:	2b00      	cmp	r3, #0
 800d734:	f000 821d 	beq.w	800db72 <_ZN3BTD8HCI_taskEv+0x60a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nThe name was set to: "), 0x80);
                                NotifyStr(btdName, 0x80);
#endif
                                if(useSimplePairing) {
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d008      	beq.n	800d754 <_ZN3BTD8HCI_taskEv+0x1ec>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800d742:	2100      	movs	r1, #0
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f000 fb6e 	bl	800de26 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2211      	movs	r2, #17
 800d74e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800d752:	e20e      	b.n	800db72 <_ZN3BTD8HCI_taskEv+0x60a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2206      	movs	r2, #6
 800d758:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d75c:	e209      	b.n	800db72 <_ZN3BTD8HCI_taskEv+0x60a>

                case HCI_LOCAL_EXTENDED_FEATURES_STATE:
                        if(hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d768:	2b00      	cmp	r3, #0
 800d76a:	f000 8204 	beq.w	800db76 <_ZN3BTD8HCI_taskEv+0x60e>
                                if(simple_pairing_supported) {
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800d774:	2b00      	cmp	r3, #0
 800d776:	d008      	beq.n	800d78a <_ZN3BTD8HCI_taskEv+0x222>
                                        hci_write_simple_pairing_mode(true);
 800d778:	2101      	movs	r1, #1
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f000 fc9d 	bl	800e0ba <_ZN3BTD29hci_write_simple_pairing_modeEb>
                                        hci_state = HCI_WRITE_SIMPLE_PAIRING_STATE;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2212      	movs	r2, #18
 800d784:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800d788:	e1f5      	b.n	800db76 <_ZN3BTD8HCI_taskEv+0x60e>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2206      	movs	r2, #6
 800d78e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d792:	e1f0      	b.n	800db76 <_ZN3BTD8HCI_taskEv+0x60e>

                case HCI_WRITE_SIMPLE_PAIRING_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d79a:	f003 0301 	and.w	r3, r3, #1
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	f000 81eb 	beq.w	800db7a <_ZN3BTD8HCI_taskEv+0x612>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSimple pairing was enabled"), 0x80);
#endif
                                hci_set_event_mask();
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f000 fc4d 	bl	800e044 <_ZN3BTD18hci_set_event_maskEv>
                                hci_state = HCI_SET_EVENT_MASK_STATE;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2213      	movs	r2, #19
 800d7ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d7b2:	e1e2      	b.n	800db7a <_ZN3BTD8HCI_taskEv+0x612>

                case HCI_SET_EVENT_MASK_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d7ba:	f003 0301 	and.w	r3, r3, #1
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	f000 81dd 	beq.w	800db7e <_ZN3BTD8HCI_taskEv+0x616>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSet event mask completed"), 0x80);
#endif
                                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2206      	movs	r2, #6
 800d7c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d7cc:	e1d7      	b.n	800db7e <_ZN3BTD8HCI_taskEv+0x616>

                case HCI_CHECK_DEVICE_SERVICE:
                        if(pairWithHIDDevice || pairWithWii) { // Check if it should try to connect to a Wiimote
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d104      	bne.n	800d7e2 <_ZN3BTD8HCI_taskEv+0x27a>
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d007      	beq.n	800d7f2 <_ZN3BTD8HCI_taskEv+0x28a>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nStarting inquiry\r\nPress 1 & 2 on the Wiimote\r\nOr press the SYNC button if you are using a Wii U Pro Controller or a Wii Balance Board"), 0x80);
                                else
                                        Notify(PSTR("\r\nPlease enable discovery of your device"), 0x80);
#endif
                                hci_inquiry();
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f000 fc8f 	bl	800e106 <_ZN3BTD11hci_inquiryEv>
                                hci_state = HCI_INQUIRY_STATE;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2207      	movs	r2, #7
 800d7ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
                        break;
 800d7f0:	e1d8      	b.n	800dba4 <_ZN3BTD8HCI_taskEv+0x63c>
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	220a      	movs	r2, #10
 800d7f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d7fa:	e1d3      	b.n	800dba4 <_ZN3BTD8HCI_taskEv+0x63c>

                case HCI_INQUIRY_STATE:
                        if(hci_check_flag(HCI_FLAG_DEVICE_FOUND)) {
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d806:	2b00      	cmp	r3, #0
 800d808:	f000 81bb 	beq.w	800db82 <_ZN3BTD8HCI_taskEv+0x61a>
                                hci_inquiry_cancel(); // Stop inquiry
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f000 fcb2 	bl	800e176 <_ZN3BTD18hci_inquiry_cancelEv>
                                if(pairWithWii)
                                        Notify(PSTR("Wiimote"), 0x80);
                                else
                                        Notify(PSTR("device"), 0x80);
#endif
                                if(checkRemoteName) {
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d007      	beq.n	800d82c <_ZN3BTD8HCI_taskEv+0x2c4>
                                        hci_remote_name(); // We need to know the name to distinguish between the Wiimote, the new Wiimote with Motion Plus inside, a Wii U Pro Controller and a Wii Balance Board
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f000 fb74 	bl	800df0a <_ZN3BTD15hci_remote_nameEv>
                                        hci_state = HCI_REMOTE_NAME_STATE;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	220c      	movs	r2, #12
 800d826:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
                        }
                        break;
 800d82a:	e1aa      	b.n	800db82 <_ZN3BTD8HCI_taskEv+0x61a>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2208      	movs	r2, #8
 800d830:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d834:	e1a5      	b.n	800db82 <_ZN3BTD8HCI_taskEv+0x61a>

                case HCI_CONNECT_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d83c:	f003 0301 	and.w	r3, r3, #1
 800d840:	2b00      	cmp	r3, #0
 800d842:	f000 81a0 	beq.w	800db86 <_ZN3BTD8HCI_taskEv+0x61e>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nConnecting to Wiimote"), 0x80);
                                else
                                        Notify(PSTR("\r\nConnecting to HID device"), 0x80);
#endif
                                checkRemoteName = false;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2200      	movs	r2, #0
 800d84a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                                hci_connect();
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f000 fcac 	bl	800e1ac <_ZN3BTD11hci_connectEv>
                                hci_state = HCI_CONNECTED_DEVICE_STATE;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2209      	movs	r2, #9
 800d858:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d85c:	e193      	b.n	800db86 <_ZN3BTD8HCI_taskEv+0x61e>

                case HCI_CONNECTED_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_EVENT)) {
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d868:	2b00      	cmp	r3, #0
 800d86a:	f000 818e 	beq.w	800db8a <_ZN3BTD8HCI_taskEv+0x622>
                                if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d874:	f003 0302 	and.w	r3, r3, #2
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d007      	beq.n	800d88c <_ZN3BTD8HCI_taskEv+0x324>
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nConnected to Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nConnected to HID device"), 0x80);
#endif
                                        hci_authentication_request(); // This will start the pairing with the device
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f000 fead 	bl	800e5dc <_ZN3BTD26hci_authentication_requestEv>
                                        hci_state = HCI_SCANNING_STATE;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	220a      	movs	r2, #10
 800d886:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
#endif
                                        hci_connect(); // Try to connect one more time
                                }
                        }
                        break;
 800d88a:	e17e      	b.n	800db8a <_ZN3BTD8HCI_taskEv+0x622>
                                        hci_connect(); // Try to connect one more time
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f000 fc8d 	bl	800e1ac <_ZN3BTD11hci_connectEv>
                        break;
 800d892:	e17a      	b.n	800db8a <_ZN3BTD8HCI_taskEv+0x622>

                case HCI_SCANNING_STATE:
                        if(!connectToWii && !pairWithWii && !connectToHIDDevice && !pairWithHIDDevice) {
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d89a:	f083 0301 	eor.w	r3, r3, #1
 800d89e:	b2db      	uxtb	r3, r3
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	f000 8174 	beq.w	800db8e <_ZN3BTD8HCI_taskEv+0x626>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d8ac:	f083 0301 	eor.w	r3, r3, #1
 800d8b0:	b2db      	uxtb	r3, r3
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	f000 816b 	beq.w	800db8e <_ZN3BTD8HCI_taskEv+0x626>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d8be:	f083 0301 	eor.w	r3, r3, #1
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	f000 8162 	beq.w	800db8e <_ZN3BTD8HCI_taskEv+0x626>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d8d0:	f083 0301 	eor.w	r3, r3, #1
 800d8d4:	b2db      	uxtb	r3, r3
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	f000 8159 	beq.w	800db8e <_ZN3BTD8HCI_taskEv+0x626>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWait For Incoming Connection Request"), 0x80);
#endif
                                hci_write_scan_enable();
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f000 fa29 	bl	800dd34 <_ZN3BTD21hci_write_scan_enableEv>
                                waitingForConnection = true;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2201      	movs	r2, #1
 800d8e6:	721a      	strb	r2, [r3, #8]
                                hci_state = HCI_CONNECT_IN_STATE;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	220b      	movs	r2, #11
 800d8ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d8f0:	e14d      	b.n	800db8e <_ZN3BTD8HCI_taskEv+0x626>

                case HCI_CONNECT_IN_STATE:
                        if(hci_check_flag(HCI_FLAG_INCOMING_REQUEST)) {
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d8f8:	f003 0310 	and.w	r3, r3, #16
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d00a      	beq.n	800d916 <_ZN3BTD8HCI_taskEv+0x3ae>
                                waitingForConnection = false;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2200      	movs	r2, #0
 800d904:	721a      	strb	r2, [r3, #8]
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nIncoming Connection Request"), 0x80);
#endif
                                hci_remote_name();
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f000 faff 	bl	800df0a <_ZN3BTD15hci_remote_nameEv>
                                hci_state = HCI_REMOTE_NAME_STATE;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	220c      	movs	r2, #12
 800d910:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
                                hci_state = HCI_DISCONNECT_STATE;
                        break;
 800d914:	e13d      	b.n	800db92 <_ZN3BTD8HCI_taskEv+0x62a>
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d91c:	f003 0304 	and.w	r3, r3, #4
 800d920:	2b00      	cmp	r3, #0
 800d922:	f000 8136 	beq.w	800db92 <_ZN3BTD8HCI_taskEv+0x62a>
                                hci_state = HCI_DISCONNECT_STATE;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2210      	movs	r2, #16
 800d92a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d92e:	e130      	b.n	800db92 <_ZN3BTD8HCI_taskEv+0x62a>

                case HCI_REMOTE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_REMOTE_NAME_COMPLETE)) {
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d936:	f003 0308 	and.w	r3, r3, #8
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	f000 812b 	beq.w	800db96 <_ZN3BTD8HCI_taskEv+0x62e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nRemote Name: "), 0x80);
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
                                        Notifyc(remote_name[i], 0x80);
#endif
                                if(strncmp((const char*)remote_name, "Nintendo", 8) == 0) {
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	3322      	adds	r3, #34	; 0x22
 800d944:	2208      	movs	r2, #8
 800d946:	4999      	ldr	r1, [pc, #612]	; (800dbac <_ZN3BTD8HCI_taskEv+0x644>)
 800d948:	4618      	mov	r0, r3
 800d94a:	f004 fe27 	bl	801259c <strncmp>
 800d94e:	4603      	mov	r3, r0
 800d950:	2b00      	cmp	r3, #0
 800d952:	d147      	bne.n	800d9e4 <_ZN3BTD8HCI_taskEv+0x47c>
                                        incomingWii = true;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2201      	movs	r2, #1
 800d958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                                        motionPlusInside = false;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2200      	movs	r2, #0
 800d960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                                        wiiUProController = false;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2200      	movs	r2, #0
 800d968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                                        pairWiiUsingSync = false;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2200      	movs	r2, #0
 800d970:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nWiimote is connecting"), 0x80);
#endif
                                        if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-TR", 22) == 0) {
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	3322      	adds	r3, #34	; 0x22
 800d978:	2216      	movs	r2, #22
 800d97a:	498d      	ldr	r1, [pc, #564]	; (800dbb0 <_ZN3BTD8HCI_taskEv+0x648>)
 800d97c:	4618      	mov	r0, r3
 800d97e:	f004 fe0d 	bl	801259c <strncmp>
 800d982:	4603      	mov	r3, r0
 800d984:	2b00      	cmp	r3, #0
 800d986:	d104      	bne.n	800d992 <_ZN3BTD8HCI_taskEv+0x42a>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" with Motion Plus Inside"), 0x80);
#endif
                                                motionPlusInside = true;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2201      	movs	r2, #1
 800d98c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d990:	e028      	b.n	800d9e4 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-UC", 22) == 0) {
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	3322      	adds	r3, #34	; 0x22
 800d996:	2216      	movs	r2, #22
 800d998:	4986      	ldr	r1, [pc, #536]	; (800dbb4 <_ZN3BTD8HCI_taskEv+0x64c>)
 800d99a:	4618      	mov	r0, r3
 800d99c:	f004 fdfe 	bl	801259c <strncmp>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d110      	bne.n	800d9c8 <_ZN3BTD8HCI_taskEv+0x460>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii U Pro Controller"), 0x80);
#endif
                                                wiiUProController = motionPlusInside = pairWiiUsingSync = true;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d9c6:	e00d      	b.n	800d9e4 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-WBC-01", 19) == 0) {
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	3322      	adds	r3, #34	; 0x22
 800d9cc:	2213      	movs	r2, #19
 800d9ce:	497a      	ldr	r1, [pc, #488]	; (800dbb8 <_ZN3BTD8HCI_taskEv+0x650>)
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f004 fde3 	bl	801259c <strncmp>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d103      	bne.n	800d9e4 <_ZN3BTD8HCI_taskEv+0x47c>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii Balance Board"), 0x80);
#endif
                                                pairWiiUsingSync = true;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2201      	movs	r2, #1
 800d9e0:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
                                        }
                                }
                                if(classOfDevice[2] == 0 && classOfDevice[1] == 0x25 && classOfDevice[0] == 0x08 && strncmp((const char*)remote_name, "Wireless Controller", 19) == 0) {
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d117      	bne.n	800da1e <_ZN3BTD8HCI_taskEv+0x4b6>
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800d9f4:	2b25      	cmp	r3, #37	; 0x25
 800d9f6:	d112      	bne.n	800da1e <_ZN3BTD8HCI_taskEv+0x4b6>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d9fe:	2b08      	cmp	r3, #8
 800da00:	d10d      	bne.n	800da1e <_ZN3BTD8HCI_taskEv+0x4b6>
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	3322      	adds	r3, #34	; 0x22
 800da06:	2213      	movs	r2, #19
 800da08:	496c      	ldr	r1, [pc, #432]	; (800dbbc <_ZN3BTD8HCI_taskEv+0x654>)
 800da0a:	4618      	mov	r0, r3
 800da0c:	f004 fdc6 	bl	801259c <strncmp>
 800da10:	4603      	mov	r3, r0
 800da12:	2b00      	cmp	r3, #0
 800da14:	d103      	bne.n	800da1e <_ZN3BTD8HCI_taskEv+0x4b6>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPS4/PS5 controller is connecting"), 0x80);
#endif
                                        incomingPSController = true;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2201      	movs	r2, #1
 800da1a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                                }
                                if((pairWithWii || pairWithHIDDevice) && checkRemoteName)
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800da24:	2b00      	cmp	r3, #0
 800da26:	d104      	bne.n	800da32 <_ZN3BTD8HCI_taskEv+0x4ca>
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d009      	beq.n	800da46 <_ZN3BTD8HCI_taskEv+0x4de>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d004      	beq.n	800da46 <_ZN3BTD8HCI_taskEv+0x4de>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2208      	movs	r2, #8
 800da40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                else {
                                        hci_accept_connection();
                                        hci_state = HCI_CONNECTED_STATE;
                                }
                        }
                        break;
 800da44:	e0a7      	b.n	800db96 <_ZN3BTD8HCI_taskEv+0x62e>
                                        hci_accept_connection();
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f000 fa17 	bl	800de7a <_ZN3BTD21hci_accept_connectionEv>
                                        hci_state = HCI_CONNECTED_STATE;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	220d      	movs	r2, #13
 800da50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800da54:	e09f      	b.n	800db96 <_ZN3BTD8HCI_taskEv+0x62e>

                case HCI_CONNECTED_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800da5c:	f003 0302 	and.w	r3, r3, #2
 800da60:	2b00      	cmp	r3, #0
 800da62:	f000 809a 	beq.w	800db9a <_ZN3BTD8HCI_taskEv+0x632>
                                        D_PrintHex<uint8_t > (disc_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (disc_bdaddr[0], 0x80);
#endif
                                if(incomingPSController)
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d003      	beq.n	800da78 <_ZN3BTD8HCI_taskEv+0x510>
                                        connectToHIDDevice = true; // We should always connect to the PS4/PS5 controller
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2201      	movs	r2, #1
 800da74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

                                // Clear these flags for a new connection
                                l2capConnectionClaimed = false;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2200      	movs	r2, #0
 800da7c:	725a      	strb	r2, [r3, #9]
                                sdpConnectionClaimed = false;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2200      	movs	r2, #0
 800da82:	729a      	strb	r2, [r3, #10]
                                rfcommConnectionClaimed = false;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2200      	movs	r2, #0
 800da88:	72da      	strb	r2, [r3, #11]

                                hci_event_flag = 0;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2200      	movs	r2, #0
 800da8e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                hci_state = HCI_DONE_STATE;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	220f      	movs	r2, #15
 800da96:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800da9a:	e07e      	b.n	800db9a <_ZN3BTD8HCI_taskEv+0x632>

                case HCI_DONE_STATE:
                        hci_counter++;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800daa2:	3301      	adds	r3, #1
 800daa4:	b29a      	uxth	r2, r3
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > 1000) { // Wait until we have looped 1000 times to make sure that the L2CAP connection has been started
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800dab2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dab6:	d972      	bls.n	800db9e <_ZN3BTD8HCI_taskEv+0x636>
                                hci_counter = 0;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2200      	movs	r2, #0
 800dabc:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                                hci_state = HCI_SCANNING_STATE;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	220a      	movs	r2, #10
 800dac4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800dac8:	e069      	b.n	800db9e <_ZN3BTD8HCI_taskEv+0x636>

                case HCI_DISCONNECT_STATE:
                        if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE)) {
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dad0:	f003 0304 	and.w	r3, r3, #4
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d064      	beq.n	800dba2 <_ZN3BTD8HCI_taskEv+0x63a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Disconnected from Device"), 0x80);
#endif
                                hci_event_flag = 0; // Clear all flags
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2200      	movs	r2, #0
 800dadc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

                                // Reset all buffers
                                memset(hcibuf, 0, BULK_MAXPKTSIZE);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	3389      	adds	r3, #137	; 0x89
 800dae4:	2240      	movs	r2, #64	; 0x40
 800dae6:	2100      	movs	r1, #0
 800dae8:	4618      	mov	r0, r3
 800daea:	f004 fd0b 	bl	8012504 <memset>
                                memset(l2capinbuf, 0, BULK_MAXPKTSIZE);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	33c9      	adds	r3, #201	; 0xc9
 800daf2:	2240      	movs	r2, #64	; 0x40
 800daf4:	2100      	movs	r1, #0
 800daf6:	4618      	mov	r0, r3
 800daf8:	f004 fd04 	bl	8012504 <memset>

                                connectToWii = incomingWii = pairWithWii = false;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2200      	movs	r2, #0
 800db00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                connectToHIDDevice = incomingHIDDevice = pairWithHIDDevice = checkRemoteName = false;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2200      	movs	r2, #0
 800db20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                incomingPSController = false;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2200      	movs	r2, #0
 800db4c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

                                hci_state = HCI_SCANNING_STATE;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	220a      	movs	r2, #10
 800db54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800db58:	e023      	b.n	800dba2 <_ZN3BTD8HCI_taskEv+0x63a>
                default:
                        break;
 800db5a:	bf00      	nop
 800db5c:	e022      	b.n	800dba4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db5e:	bf00      	nop
 800db60:	e020      	b.n	800dba4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db62:	bf00      	nop
 800db64:	e01e      	b.n	800dba4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db66:	bf00      	nop
 800db68:	e01c      	b.n	800dba4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db6a:	bf00      	nop
 800db6c:	e01a      	b.n	800dba4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db6e:	bf00      	nop
 800db70:	e018      	b.n	800dba4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db72:	bf00      	nop
 800db74:	e016      	b.n	800dba4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db76:	bf00      	nop
 800db78:	e014      	b.n	800dba4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db7a:	bf00      	nop
 800db7c:	e012      	b.n	800dba4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db7e:	bf00      	nop
 800db80:	e010      	b.n	800dba4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db82:	bf00      	nop
 800db84:	e00e      	b.n	800dba4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db86:	bf00      	nop
 800db88:	e00c      	b.n	800dba4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db8a:	bf00      	nop
 800db8c:	e00a      	b.n	800dba4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db8e:	bf00      	nop
 800db90:	e008      	b.n	800dba4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db92:	bf00      	nop
 800db94:	e006      	b.n	800dba4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db96:	bf00      	nop
 800db98:	e004      	b.n	800dba4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db9a:	bf00      	nop
 800db9c:	e002      	b.n	800dba4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db9e:	bf00      	nop
 800dba0:	e000      	b.n	800dba4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dba2:	bf00      	nop
        }
}
 800dba4:	bf00      	nop
 800dba6:	3708      	adds	r7, #8
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}
 800dbac:	08012740 	.word	0x08012740
 800dbb0:	0801274c 	.word	0x0801274c
 800dbb4:	08012764 	.word	0x08012764
 800dbb8:	0801277c 	.word	0x0801277c
 800dbbc:	08012790 	.word	0x08012790

0800dbc0 <_ZN3BTD14ACL_event_taskEv>:

void BTD::ACL_event_task() {
 800dbc0:	b5b0      	push	{r4, r5, r7, lr}
 800dbc2:	b086      	sub	sp, #24
 800dbc4:	af02      	add	r7, sp, #8
 800dbc6:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE;
 800dbc8:	2340      	movs	r3, #64	; 0x40
 800dbca:	817b      	strh	r3, [r7, #10]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_DATAIN_PIPE ].epAddr, &length, l2capinbuf, pollInterval); // Input on endpoint 2
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f893 4057 	ldrb.w	r4, [r3, #87]	; 0x57
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	33c9      	adds	r3, #201	; 0xc9
 800dbe0:	687a      	ldr	r2, [r7, #4]
 800dbe2:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800dbe6:	f107 050a 	add.w	r5, r7, #10
 800dbea:	9201      	str	r2, [sp, #4]
 800dbec:	9300      	str	r3, [sp, #0]
 800dbee:	462b      	mov	r3, r5
 800dbf0:	4622      	mov	r2, r4
 800dbf2:	f003 f92c 	bl	8010e4e <_ZN3USB10inTransferEhhPtPhh>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	737b      	strb	r3, [r7, #13]

        if(!rcode) { // Check for errors
 800dbfa:	7b7b      	ldrb	r3, [r7, #13]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d125      	bne.n	800dc4c <_ZN3BTD14ACL_event_taskEv+0x8c>
                if(length > 0) { // Check if any data was read
 800dc00:	897b      	ldrh	r3, [r7, #10]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d022      	beq.n	800dc4c <_ZN3BTD14ACL_event_taskEv+0x8c>
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800dc06:	2300      	movs	r3, #0
 800dc08:	73fb      	strb	r3, [r7, #15]
 800dc0a:	7bfb      	ldrb	r3, [r7, #15]
 800dc0c:	2b03      	cmp	r3, #3
 800dc0e:	d81d      	bhi.n	800dc4c <_ZN3BTD14ACL_event_taskEv+0x8c>
                                if(btService[i])
 800dc10:	7bfb      	ldrb	r3, [r7, #15]
 800dc12:	687a      	ldr	r2, [r7, #4]
 800dc14:	3318      	adds	r3, #24
 800dc16:	009b      	lsls	r3, r3, #2
 800dc18:	4413      	add	r3, r2
 800dc1a:	685b      	ldr	r3, [r3, #4]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d011      	beq.n	800dc44 <_ZN3BTD14ACL_event_taskEv+0x84>
                                        btService[i]->ACLData(l2capinbuf);
 800dc20:	7bfb      	ldrb	r3, [r7, #15]
 800dc22:	687a      	ldr	r2, [r7, #4]
 800dc24:	3318      	adds	r3, #24
 800dc26:	009b      	lsls	r3, r3, #2
 800dc28:	4413      	add	r3, r2
 800dc2a:	6858      	ldr	r0, [r3, #4]
 800dc2c:	7bfb      	ldrb	r3, [r7, #15]
 800dc2e:	687a      	ldr	r2, [r7, #4]
 800dc30:	3318      	adds	r3, #24
 800dc32:	009b      	lsls	r3, r3, #2
 800dc34:	4413      	add	r3, r2
 800dc36:	685b      	ldr	r3, [r3, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	687a      	ldr	r2, [r7, #4]
 800dc3e:	32c9      	adds	r2, #201	; 0xc9
 800dc40:	4611      	mov	r1, r2
 800dc42:	4798      	blx	r3
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800dc44:	7bfb      	ldrb	r3, [r7, #15]
 800dc46:	3301      	adds	r3, #1
 800dc48:	73fb      	strb	r3, [r7, #15]
 800dc4a:	e7de      	b.n	800dc0a <_ZN3BTD14ACL_event_taskEv+0x4a>
        else if(rcode != hrNAK) {
                Notify(PSTR("\r\nACL data in error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	73bb      	strb	r3, [r7, #14]
 800dc50:	7bbb      	ldrb	r3, [r7, #14]
 800dc52:	2b03      	cmp	r3, #3
 800dc54:	d81c      	bhi.n	800dc90 <_ZN3BTD14ACL_event_taskEv+0xd0>
                if(btService[i])
 800dc56:	7bbb      	ldrb	r3, [r7, #14]
 800dc58:	687a      	ldr	r2, [r7, #4]
 800dc5a:	3318      	adds	r3, #24
 800dc5c:	009b      	lsls	r3, r3, #2
 800dc5e:	4413      	add	r3, r2
 800dc60:	685b      	ldr	r3, [r3, #4]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d010      	beq.n	800dc88 <_ZN3BTD14ACL_event_taskEv+0xc8>
                        btService[i]->Run();
 800dc66:	7bbb      	ldrb	r3, [r7, #14]
 800dc68:	687a      	ldr	r2, [r7, #4]
 800dc6a:	3318      	adds	r3, #24
 800dc6c:	009b      	lsls	r3, r3, #2
 800dc6e:	4413      	add	r3, r2
 800dc70:	6859      	ldr	r1, [r3, #4]
 800dc72:	7bbb      	ldrb	r3, [r7, #14]
 800dc74:	687a      	ldr	r2, [r7, #4]
 800dc76:	3318      	adds	r3, #24
 800dc78:	009b      	lsls	r3, r3, #2
 800dc7a:	4413      	add	r3, r2
 800dc7c:	685b      	ldr	r3, [r3, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	3304      	adds	r3, #4
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4608      	mov	r0, r1
 800dc86:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800dc88:	7bbb      	ldrb	r3, [r7, #14]
 800dc8a:	3301      	adds	r3, #1
 800dc8c:	73bb      	strb	r3, [r7, #14]
 800dc8e:	e7df      	b.n	800dc50 <_ZN3BTD14ACL_event_taskEv+0x90>
}
 800dc90:	bf00      	nop
 800dc92:	3710      	adds	r7, #16
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bdb0      	pop	{r4, r5, r7, pc}

0800dc98 <_ZN3BTD11HCI_CommandEPht>:

/************************************************************/
/*                    HCI Commands                        */

/************************************************************/
void BTD::HCI_Command(uint8_t* data, uint16_t nbytes) {
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b08c      	sub	sp, #48	; 0x30
 800dc9c:	af08      	add	r7, sp, #32
 800dc9e:	60f8      	str	r0, [r7, #12]
 800dca0:	60b9      	str	r1, [r7, #8]
 800dca2:	4613      	mov	r3, r2
 800dca4:	80fb      	strh	r3, [r7, #6]
        hci_clear_flag(HCI_FLAG_CMD_COMPLETE);
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dcac:	f023 0301 	bic.w	r3, r3, #1
 800dcb0:	b29a      	uxth	r2, r3
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        pUsb->ctrlReq(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bmREQ_HCI_OUT, 0x00, 0x00, 0x00, 0x00, nbytes, nbytes, data, NULL);
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800dcc8:	2300      	movs	r3, #0
 800dcca:	9307      	str	r3, [sp, #28]
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	9306      	str	r3, [sp, #24]
 800dcd0:	88fb      	ldrh	r3, [r7, #6]
 800dcd2:	9305      	str	r3, [sp, #20]
 800dcd4:	88fb      	ldrh	r3, [r7, #6]
 800dcd6:	9304      	str	r3, [sp, #16]
 800dcd8:	2300      	movs	r3, #0
 800dcda:	9303      	str	r3, [sp, #12]
 800dcdc:	2300      	movs	r3, #0
 800dcde:	9302      	str	r3, [sp, #8]
 800dce0:	2300      	movs	r3, #0
 800dce2:	9301      	str	r3, [sp, #4]
 800dce4:	2300      	movs	r3, #0
 800dce6:	9300      	str	r3, [sp, #0]
 800dce8:	2320      	movs	r3, #32
 800dcea:	f002 ffd8 	bl	8010c9e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800dcee:	bf00      	nop
 800dcf0:	3710      	adds	r7, #16
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}

0800dcf6 <_ZN3BTD9hci_resetEv>:

void BTD::hci_reset() {
 800dcf6:	b580      	push	{r7, lr}
 800dcf8:	b082      	sub	sp, #8
 800dcfa:	af00      	add	r7, sp, #0
 800dcfc:	6078      	str	r0, [r7, #4]
        hci_event_flag = 0; // Clear all the flags
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2200      	movs	r2, #0
 800dd02:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x03; // HCI OCF = 3
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2203      	movs	r2, #3
 800dd0a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	220c      	movs	r2, #12
 800dd12:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	3389      	adds	r3, #137	; 0x89
 800dd22:	2203      	movs	r2, #3
 800dd24:	4619      	mov	r1, r3
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f7ff ffb6 	bl	800dc98 <_ZN3BTD11HCI_CommandEPht>
}
 800dd2c:	bf00      	nop
 800dd2e:	3708      	adds	r7, #8
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}

0800dd34 <_ZN3BTD21hci_write_scan_enableEv>:

void BTD::hci_write_scan_enable() {
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b082      	sub	sp, #8
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_INCOMING_REQUEST);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dd42:	f023 0310 	bic.w	r3, r3, #16
 800dd46:	b29a      	uxth	r2, r3
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x1A; // HCI OCF = 1A
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	221a      	movs	r2, #26
 800dd52:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	220c      	movs	r2, #12
 800dd5a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2201      	movs	r2, #1
 800dd62:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        if(btdName != NULL)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	68db      	ldr	r3, [r3, #12]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d004      	beq.n	800dd78 <_ZN3BTD21hci_write_scan_enableEv+0x44>
                hcibuf[3] = 0x03; // Inquiry Scan enabled. Page Scan enabled.
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2203      	movs	r2, #3
 800dd72:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800dd76:	e003      	b.n	800dd80 <_ZN3BTD21hci_write_scan_enableEv+0x4c>
        else
                hcibuf[3] = 0x02; // Inquiry Scan disabled. Page Scan enabled.
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2202      	movs	r2, #2
 800dd7c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	3389      	adds	r3, #137	; 0x89
 800dd84:	2204      	movs	r2, #4
 800dd86:	4619      	mov	r1, r3
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f7ff ff85 	bl	800dc98 <_ZN3BTD11HCI_CommandEPht>
}
 800dd8e:	bf00      	nop
 800dd90:	3708      	adds	r7, #8
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}

0800dd96 <_ZN3BTD15hci_read_bdaddrEv>:
        hcibuf[3] = 0x00; // Inquiry Scan disabled. Page Scan disabled.

        HCI_Command(hcibuf, 4);
}

void BTD::hci_read_bdaddr() {
 800dd96:	b580      	push	{r7, lr}
 800dd98:	b082      	sub	sp, #8
 800dd9a:	af00      	add	r7, sp, #0
 800dd9c:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_BDADDR);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dda4:	f023 0320 	bic.w	r3, r3, #32
 800dda8:	b29a      	uxth	r2, r3
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2209      	movs	r2, #9
 800ddb4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2210      	movs	r2, #16
 800ddbc:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	3389      	adds	r3, #137	; 0x89
 800ddcc:	2203      	movs	r2, #3
 800ddce:	4619      	mov	r1, r3
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f7ff ff61 	bl	800dc98 <_ZN3BTD11HCI_CommandEPht>
}
 800ddd6:	bf00      	nop
 800ddd8:	3708      	adds	r7, #8
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}

0800ddde <_ZN3BTD34hci_read_local_version_informationEv>:

void BTD::hci_read_local_version_information() {
 800ddde:	b580      	push	{r7, lr}
 800dde0:	b082      	sub	sp, #8
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_VERSION);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ddec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ddf0:	b29a      	uxth	r2, r3
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01; // HCI OCF = 1
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2201      	movs	r2, #1
 800ddfc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2210      	movs	r2, #16
 800de04:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2200      	movs	r2, #0
 800de0c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	3389      	adds	r3, #137	; 0x89
 800de14:	2203      	movs	r2, #3
 800de16:	4619      	mov	r1, r3
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f7ff ff3d 	bl	800dc98 <_ZN3BTD11HCI_CommandEPht>
}
 800de1e:	bf00      	nop
 800de20:	3708      	adds	r7, #8
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}

0800de26 <_ZN3BTD32hci_read_local_extended_featuresEh>:

void BTD::hci_read_local_extended_features(uint8_t page_number) {
 800de26:	b580      	push	{r7, lr}
 800de28:	b082      	sub	sp, #8
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	6078      	str	r0, [r7, #4]
 800de2e:	460b      	mov	r3, r1
 800de30:	70fb      	strb	r3, [r7, #3]
        hci_clear_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800de38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800de3c:	b29a      	uxth	r2, r3
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x04; // HCI OCF = 4
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2204      	movs	r2, #4
 800de48:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2210      	movs	r2, #16
 800de50:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2201      	movs	r2, #1
 800de58:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = page_number;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	78fa      	ldrb	r2, [r7, #3]
 800de60:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	3389      	adds	r3, #137	; 0x89
 800de68:	2204      	movs	r2, #4
 800de6a:	4619      	mov	r1, r3
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f7ff ff13 	bl	800dc98 <_ZN3BTD11HCI_CommandEPht>
}
 800de72:	bf00      	nop
 800de74:	3708      	adds	r7, #8
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <_ZN3BTD21hci_accept_connectionEv>:

void BTD::hci_accept_connection() {
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b082      	sub	sp, #8
 800de7e:	af00      	add	r7, sp, #0
 800de80:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800de88:	f023 0302 	bic.w	r3, r3, #2
 800de8c:	b29a      	uxth	r2, r3
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2209      	movs	r2, #9
 800de98:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2204      	movs	r2, #4
 800dea0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x07; // parameter length 7
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2207      	movs	r2, #7
 800dea8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	7f1a      	ldrb	r2, [r3, #28]
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	7f5a      	ldrb	r2, [r3, #29]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	7f9a      	ldrb	r2, [r3, #30]
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	7fda      	ldrb	r2, [r3, #31]
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f893 2020 	ldrb.w	r2, [r3, #32]
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x00; // Switch role to master
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2200      	movs	r2, #0
 800def0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

        HCI_Command(hcibuf, 10);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	3389      	adds	r3, #137	; 0x89
 800def8:	220a      	movs	r2, #10
 800defa:	4619      	mov	r1, r3
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f7ff fecb 	bl	800dc98 <_ZN3BTD11HCI_CommandEPht>
}
 800df02:	bf00      	nop
 800df04:	3708      	adds	r7, #8
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}

0800df0a <_ZN3BTD15hci_remote_nameEv>:

void BTD::hci_remote_name() {
 800df0a:	b580      	push	{r7, lr}
 800df0c:	b082      	sub	sp, #8
 800df0e:	af00      	add	r7, sp, #0
 800df10:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800df18:	f023 0308 	bic.w	r3, r3, #8
 800df1c:	b29a      	uxth	r2, r3
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x19; // HCI OCF = 19
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2219      	movs	r2, #25
 800df28:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2204      	movs	r2, #4
 800df30:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0A; // parameter length = 10
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	220a      	movs	r2, #10
 800df38:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	7f1a      	ldrb	r2, [r3, #28]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	7f5a      	ldrb	r2, [r3, #29]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	7f9a      	ldrb	r2, [r3, #30]
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	7fda      	ldrb	r2, [r3, #31]
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f893 2020 	ldrb.w	r2, [r3, #32]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x01; // Page Scan Repetition Mode
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2201      	movs	r2, #1
 800df80:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // Reserved
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2200      	movs	r2, #0
 800df88:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // Clock offset - low byte
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2200      	movs	r2, #0
 800df90:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Clock offset - high byte
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2200      	movs	r2, #0
 800df98:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

        HCI_Command(hcibuf, 13);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	3389      	adds	r3, #137	; 0x89
 800dfa0:	220d      	movs	r2, #13
 800dfa2:	4619      	mov	r1, r3
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f7ff fe77 	bl	800dc98 <_ZN3BTD11HCI_CommandEPht>
}
 800dfaa:	bf00      	nop
 800dfac:	3708      	adds	r7, #8
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}

0800dfb2 <_ZN3BTD20hci_write_local_nameEPKc>:

void BTD::hci_write_local_name(const char* name) {
 800dfb2:	b590      	push	{r4, r7, lr}
 800dfb4:	b085      	sub	sp, #20
 800dfb6:	af00      	add	r7, sp, #0
 800dfb8:	6078      	str	r0, [r7, #4]
 800dfba:	6039      	str	r1, [r7, #0]
        hcibuf[0] = 0x13; // HCI OCF = 13
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2213      	movs	r2, #19
 800dfc0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	220c      	movs	r2, #12
 800dfc8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = strlen(name) + 1; // parameter length = the length of the string + end byte
 800dfcc:	6838      	ldr	r0, [r7, #0]
 800dfce:	f7f2 f91f 	bl	8000210 <strlen>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	b2db      	uxtb	r3, r3
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	b2da      	uxtb	r2, r3
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        uint8_t i;
        for(i = 0; i < strlen(name); i++)
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	73fb      	strb	r3, [r7, #15]
 800dfe4:	7bfc      	ldrb	r4, [r7, #15]
 800dfe6:	6838      	ldr	r0, [r7, #0]
 800dfe8:	f7f2 f912 	bl	8000210 <strlen>
 800dfec:	4603      	mov	r3, r0
 800dfee:	429c      	cmp	r4, r3
 800dff0:	d20e      	bcs.n	800e010 <_ZN3BTD20hci_write_local_nameEPKc+0x5e>
                hcibuf[i + 3] = name[i];
 800dff2:	7bfb      	ldrb	r3, [r7, #15]
 800dff4:	683a      	ldr	r2, [r7, #0]
 800dff6:	441a      	add	r2, r3
 800dff8:	7bfb      	ldrb	r3, [r7, #15]
 800dffa:	3303      	adds	r3, #3
 800dffc:	7811      	ldrb	r1, [r2, #0]
 800dffe:	687a      	ldr	r2, [r7, #4]
 800e000:	4413      	add	r3, r2
 800e002:	460a      	mov	r2, r1
 800e004:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        for(i = 0; i < strlen(name); i++)
 800e008:	7bfb      	ldrb	r3, [r7, #15]
 800e00a:	3301      	adds	r3, #1
 800e00c:	73fb      	strb	r3, [r7, #15]
 800e00e:	e7e9      	b.n	800dfe4 <_ZN3BTD20hci_write_local_nameEPKc+0x32>
        hcibuf[i + 3] = 0x00; // End of string
 800e010:	7bfb      	ldrb	r3, [r7, #15]
 800e012:	3303      	adds	r3, #3
 800e014:	687a      	ldr	r2, [r7, #4]
 800e016:	4413      	add	r3, r2
 800e018:	2200      	movs	r2, #0
 800e01a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

        HCI_Command(hcibuf, 4 + strlen(name));
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f103 0489 	add.w	r4, r3, #137	; 0x89
 800e024:	6838      	ldr	r0, [r7, #0]
 800e026:	f7f2 f8f3 	bl	8000210 <strlen>
 800e02a:	4603      	mov	r3, r0
 800e02c:	b29b      	uxth	r3, r3
 800e02e:	3304      	adds	r3, #4
 800e030:	b29b      	uxth	r3, r3
 800e032:	461a      	mov	r2, r3
 800e034:	4621      	mov	r1, r4
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f7ff fe2e 	bl	800dc98 <_ZN3BTD11HCI_CommandEPht>
}
 800e03c:	bf00      	nop
 800e03e:	3714      	adds	r7, #20
 800e040:	46bd      	mov	sp, r7
 800e042:	bd90      	pop	{r4, r7, pc}

0800e044 <_ZN3BTD18hci_set_event_maskEv>:

void BTD::hci_set_event_mask() {
 800e044:	b580      	push	{r7, lr}
 800e046:	b082      	sub	sp, #8
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x01; // HCI OCF = 01
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2201      	movs	r2, #1
 800e050:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	220c      	movs	r2, #12
 800e058:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x08;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2208      	movs	r2, #8
 800e060:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        // The first 6 bytes are the default of 1FFF FFFF FFFF
        // However we need to set bits 48-55 for simple pairing to work
        hcibuf[3] = 0xFF;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	22ff      	movs	r2, #255	; 0xff
 800e068:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0xFF;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	22ff      	movs	r2, #255	; 0xff
 800e070:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0xFF;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	22ff      	movs	r2, #255	; 0xff
 800e078:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0xFF;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	22ff      	movs	r2, #255	; 0xff
 800e080:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0xFF;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	22ff      	movs	r2, #255	; 0xff
 800e088:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = 0x1F;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	221f      	movs	r2, #31
 800e090:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0xFF; // Enable bits 48-55 used for simple pairing
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	22ff      	movs	r2, #255	; 0xff
 800e098:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

        HCI_Command(hcibuf, 11);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	3389      	adds	r3, #137	; 0x89
 800e0a8:	220b      	movs	r2, #11
 800e0aa:	4619      	mov	r1, r3
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f7ff fdf3 	bl	800dc98 <_ZN3BTD11HCI_CommandEPht>
}
 800e0b2:	bf00      	nop
 800e0b4:	3708      	adds	r7, #8
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}

0800e0ba <_ZN3BTD29hci_write_simple_pairing_modeEb>:

void BTD::hci_write_simple_pairing_mode(bool enable) {
 800e0ba:	b580      	push	{r7, lr}
 800e0bc:	b082      	sub	sp, #8
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	6078      	str	r0, [r7, #4]
 800e0c2:	460b      	mov	r3, r1
 800e0c4:	70fb      	strb	r3, [r7, #3]
        hcibuf[0] = 0x56; // HCI OCF = 56
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2256      	movs	r2, #86	; 0x56
 800e0ca:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	220c      	movs	r2, #12
 800e0d2:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 1; // parameter length = 1
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2201      	movs	r2, #1
 800e0da:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = enable ? 1 : 0;
 800e0de:	78fb      	ldrb	r3, [r7, #3]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d001      	beq.n	800e0e8 <_ZN3BTD29hci_write_simple_pairing_modeEb+0x2e>
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	e000      	b.n	800e0ea <_ZN3BTD29hci_write_simple_pairing_modeEb+0x30>
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	3389      	adds	r3, #137	; 0x89
 800e0f4:	2204      	movs	r2, #4
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f7ff fdcd 	bl	800dc98 <_ZN3BTD11HCI_CommandEPht>
}
 800e0fe:	bf00      	nop
 800e100:	3708      	adds	r7, #8
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}

0800e106 <_ZN3BTD11hci_inquiryEv>:

void BTD::hci_inquiry() {
 800e106:	b580      	push	{r7, lr}
 800e108:	b082      	sub	sp, #8
 800e10a:	af00      	add	r7, sp, #0
 800e10c:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_DEVICE_FOUND);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e118:	b29a      	uxth	r2, r3
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2201      	movs	r2, #1
 800e124:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2204      	movs	r2, #4
 800e12c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x05; // Parameter Total Length = 5
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2205      	movs	r2, #5
 800e134:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x33; // LAP: Genera/Unlimited Inquiry Access Code (GIAC = 0x9E8B33) - see https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2233      	movs	r2, #51	; 0x33
 800e13c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x8B;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	228b      	movs	r2, #139	; 0x8b
 800e144:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x9E;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	229e      	movs	r2, #158	; 0x9e
 800e14c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0x30; // Inquiry time = 61.44 sec (maximum)
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2230      	movs	r2, #48	; 0x30
 800e154:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0x0A; // 10 number of responses
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	220a      	movs	r2, #10
 800e15c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        HCI_Command(hcibuf, 8);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	3389      	adds	r3, #137	; 0x89
 800e164:	2208      	movs	r2, #8
 800e166:	4619      	mov	r1, r3
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f7ff fd95 	bl	800dc98 <_ZN3BTD11HCI_CommandEPht>
}
 800e16e:	bf00      	nop
 800e170:	3708      	adds	r7, #8
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}

0800e176 <_ZN3BTD18hci_inquiry_cancelEv>:

void BTD::hci_inquiry_cancel() {
 800e176:	b580      	push	{r7, lr}
 800e178:	b082      	sub	sp, #8
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x02;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2202      	movs	r2, #2
 800e182:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2204      	movs	r2, #4
 800e18a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00; // Parameter Total Length = 0
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2200      	movs	r2, #0
 800e192:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	3389      	adds	r3, #137	; 0x89
 800e19a:	2203      	movs	r2, #3
 800e19c:	4619      	mov	r1, r3
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	f7ff fd7a 	bl	800dc98 <_ZN3BTD11HCI_CommandEPht>
}
 800e1a4:	bf00      	nop
 800e1a6:	3708      	adds	r7, #8
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}

0800e1ac <_ZN3BTD11hci_connectEv>:

void BTD::hci_connect() {
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b082      	sub	sp, #8
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
        hci_connect(disc_bdaddr); // Use last discovered device
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	331c      	adds	r3, #28
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f000 f804 	bl	800e1c8 <_ZN3BTD11hci_connectEPh>
}
 800e1c0:	bf00      	nop
 800e1c2:	3708      	adds	r7, #8
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <_ZN3BTD11hci_connectEPh>:

void BTD::hci_connect(uint8_t *bdaddr) {
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	6039      	str	r1, [r7, #0]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE | HCI_FLAG_CONNECT_EVENT);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e1d8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800e1dc:	b29a      	uxth	r2, r3
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x05; // HCI OCF = 5
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2205      	movs	r2, #5
 800e1e8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2204      	movs	r2, #4
 800e1f0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0D; // parameter Total Length = 13
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	220d      	movs	r2, #13
 800e1f8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = bdaddr[0]; // 6 octet bdaddr (LSB)
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	781a      	ldrb	r2, [r3, #0]
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = bdaddr[1];
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	785a      	ldrb	r2, [r3, #1]
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = bdaddr[2];
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	789a      	ldrb	r2, [r3, #2]
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = bdaddr[3];
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	78da      	ldrb	r2, [r3, #3]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = bdaddr[4];
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	791a      	ldrb	r2, [r3, #4]
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = bdaddr[5];
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	795a      	ldrb	r2, [r3, #5]
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x18; // DM1 or DH1 may be used
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2218      	movs	r2, #24
 800e23c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0xCC; // DM3, DH3, DM5, DH5 may be used
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	22cc      	movs	r2, #204	; 0xcc
 800e244:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x01; // Page repetition mode R1
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2201      	movs	r2, #1
 800e24c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Reserved
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2200      	movs	r2, #0
 800e254:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
        hcibuf[13] = 0x00; // Clock offset
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2200      	movs	r2, #0
 800e25c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
        hcibuf[14] = 0x00; // Invalid clock offset
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2200      	movs	r2, #0
 800e264:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
        hcibuf[15] = 0x00; // Do not allow role switch
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2200      	movs	r2, #0
 800e26c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        HCI_Command(hcibuf, 16);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	3389      	adds	r3, #137	; 0x89
 800e274:	2210      	movs	r2, #16
 800e276:	4619      	mov	r1, r3
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f7ff fd0d 	bl	800dc98 <_ZN3BTD11HCI_CommandEPht>
}
 800e27e:	bf00      	nop
 800e280:	3708      	adds	r7, #8
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}

0800e286 <_ZN3BTD26hci_pin_code_request_replyEv>:

void BTD::hci_pin_code_request_reply() {
 800e286:	b590      	push	{r4, r7, lr}
 800e288:	b085      	sub	sp, #20
 800e28a:	af00      	add	r7, sp, #0
 800e28c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0D; // HCI OCF = 0D
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	220d      	movs	r2, #13
 800e292:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2204      	movs	r2, #4
 800e29a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x17; // parameter length 23
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2217      	movs	r2, #23
 800e2a2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	7f1a      	ldrb	r2, [r3, #28]
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	7f5a      	ldrb	r2, [r3, #29]
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	7f9a      	ldrb	r2, [r3, #30]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	7fda      	ldrb	r2, [r3, #31]
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        if(pairWithWii) {
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d03f      	beq.n	800e370 <_ZN3BTD26hci_pin_code_request_replyEv+0xea>
                hcibuf[9] = 6; // Pin length is the length of the Bluetooth address
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2206      	movs	r2, #6
 800e2f4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                if(pairWiiUsingSync) {
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d013      	beq.n	800e32a <_ZN3BTD26hci_pin_code_request_replyEv+0xa4>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPairing with Wii controller via SYNC"), 0x80);
#endif
                        for(uint8_t i = 0; i < 6; i++)
 800e302:	2300      	movs	r3, #0
 800e304:	73fb      	strb	r3, [r7, #15]
 800e306:	7bfb      	ldrb	r3, [r7, #15]
 800e308:	2b05      	cmp	r3, #5
 800e30a:	d822      	bhi.n	800e352 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = my_bdaddr[i]; // The pin is the Bluetooth dongles Bluetooth address backwards
 800e30c:	7bfa      	ldrb	r2, [r7, #15]
 800e30e:	7bfb      	ldrb	r3, [r7, #15]
 800e310:	330a      	adds	r3, #10
 800e312:	6879      	ldr	r1, [r7, #4]
 800e314:	440a      	add	r2, r1
 800e316:	7d11      	ldrb	r1, [r2, #20]
 800e318:	687a      	ldr	r2, [r7, #4]
 800e31a:	4413      	add	r3, r2
 800e31c:	460a      	mov	r2, r1
 800e31e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800e322:	7bfb      	ldrb	r3, [r7, #15]
 800e324:	3301      	adds	r3, #1
 800e326:	73fb      	strb	r3, [r7, #15]
 800e328:	e7ed      	b.n	800e306 <_ZN3BTD26hci_pin_code_request_replyEv+0x80>
                } else {
                        for(uint8_t i = 0; i < 6; i++)
 800e32a:	2300      	movs	r3, #0
 800e32c:	73bb      	strb	r3, [r7, #14]
 800e32e:	7bbb      	ldrb	r3, [r7, #14]
 800e330:	2b05      	cmp	r3, #5
 800e332:	d80e      	bhi.n	800e352 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = disc_bdaddr[i]; // The pin is the Wiimote's Bluetooth address backwards
 800e334:	7bba      	ldrb	r2, [r7, #14]
 800e336:	7bbb      	ldrb	r3, [r7, #14]
 800e338:	330a      	adds	r3, #10
 800e33a:	6879      	ldr	r1, [r7, #4]
 800e33c:	440a      	add	r2, r1
 800e33e:	7f11      	ldrb	r1, [r2, #28]
 800e340:	687a      	ldr	r2, [r7, #4]
 800e342:	4413      	add	r3, r2
 800e344:	460a      	mov	r2, r1
 800e346:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800e34a:	7bbb      	ldrb	r3, [r7, #14]
 800e34c:	3301      	adds	r3, #1
 800e34e:	73bb      	strb	r3, [r7, #14]
 800e350:	e7ed      	b.n	800e32e <_ZN3BTD26hci_pin_code_request_replyEv+0xa8>
                }
                for(uint8_t i = 16; i < 26; i++)
 800e352:	2310      	movs	r3, #16
 800e354:	737b      	strb	r3, [r7, #13]
 800e356:	7b7b      	ldrb	r3, [r7, #13]
 800e358:	2b19      	cmp	r3, #25
 800e35a:	d83c      	bhi.n	800e3d6 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i] = 0x00; // The rest should be 0
 800e35c:	7b7b      	ldrb	r3, [r7, #13]
 800e35e:	687a      	ldr	r2, [r7, #4]
 800e360:	4413      	add	r3, r2
 800e362:	2200      	movs	r2, #0
 800e364:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(uint8_t i = 16; i < 26; i++)
 800e368:	7b7b      	ldrb	r3, [r7, #13]
 800e36a:	3301      	adds	r3, #1
 800e36c:	737b      	strb	r3, [r7, #13]
 800e36e:	e7f2      	b.n	800e356 <_ZN3BTD26hci_pin_code_request_replyEv+0xd0>
        } else {
                hcibuf[9] = strlen(btdPin); // Length of pin
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	691b      	ldr	r3, [r3, #16]
 800e374:	4618      	mov	r0, r3
 800e376:	f7f1 ff4b 	bl	8000210 <strlen>
 800e37a:	4603      	mov	r3, r0
 800e37c:	b2da      	uxtb	r2, r3
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                uint8_t i;
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800e384:	2300      	movs	r3, #0
 800e386:	733b      	strb	r3, [r7, #12]
 800e388:	7b3c      	ldrb	r4, [r7, #12]
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	691b      	ldr	r3, [r3, #16]
 800e38e:	4618      	mov	r0, r3
 800e390:	f7f1 ff3e 	bl	8000210 <strlen>
 800e394:	4603      	mov	r3, r0
 800e396:	429c      	cmp	r4, r3
 800e398:	d20f      	bcs.n	800e3ba <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
                        hcibuf[i + 10] = btdPin[i];
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	691a      	ldr	r2, [r3, #16]
 800e39e:	7b3b      	ldrb	r3, [r7, #12]
 800e3a0:	441a      	add	r2, r3
 800e3a2:	7b3b      	ldrb	r3, [r7, #12]
 800e3a4:	330a      	adds	r3, #10
 800e3a6:	7811      	ldrb	r1, [r2, #0]
 800e3a8:	687a      	ldr	r2, [r7, #4]
 800e3aa:	4413      	add	r3, r2
 800e3ac:	460a      	mov	r2, r1
 800e3ae:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800e3b2:	7b3b      	ldrb	r3, [r7, #12]
 800e3b4:	3301      	adds	r3, #1
 800e3b6:	733b      	strb	r3, [r7, #12]
 800e3b8:	e7e6      	b.n	800e388 <_ZN3BTD26hci_pin_code_request_replyEv+0x102>
                for(; i < 16; i++)
 800e3ba:	7b3b      	ldrb	r3, [r7, #12]
 800e3bc:	2b0f      	cmp	r3, #15
 800e3be:	d80a      	bhi.n	800e3d6 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i + 10] = 0x00; // The rest should be 0
 800e3c0:	7b3b      	ldrb	r3, [r7, #12]
 800e3c2:	330a      	adds	r3, #10
 800e3c4:	687a      	ldr	r2, [r7, #4]
 800e3c6:	4413      	add	r3, r2
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(; i < 16; i++)
 800e3ce:	7b3b      	ldrb	r3, [r7, #12]
 800e3d0:	3301      	adds	r3, #1
 800e3d2:	733b      	strb	r3, [r7, #12]
 800e3d4:	e7f1      	b.n	800e3ba <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
        }

        HCI_Command(hcibuf, 26);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	3389      	adds	r3, #137	; 0x89
 800e3da:	221a      	movs	r2, #26
 800e3dc:	4619      	mov	r1, r3
 800e3de:	6878      	ldr	r0, [r7, #4]
 800e3e0:	f7ff fc5a 	bl	800dc98 <_ZN3BTD11HCI_CommandEPht>
}
 800e3e4:	bf00      	nop
 800e3e6:	3714      	adds	r7, #20
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd90      	pop	{r4, r7, pc}

0800e3ec <_ZN3BTD35hci_pin_code_negative_request_replyEv>:

void BTD::hci_pin_code_negative_request_reply() {
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b082      	sub	sp, #8
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0E; // HCI OCF = 0E
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	220e      	movs	r2, #14
 800e3f8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2204      	movs	r2, #4
 800e400:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2206      	movs	r2, #6
 800e408:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	7f1a      	ldrb	r2, [r3, #28]
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	7f5a      	ldrb	r2, [r3, #29]
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	7f9a      	ldrb	r2, [r3, #30]
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	7fda      	ldrb	r2, [r3, #31]
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	3389      	adds	r3, #137	; 0x89
 800e450:	2209      	movs	r2, #9
 800e452:	4619      	mov	r1, r3
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f7ff fc1f 	bl	800dc98 <_ZN3BTD11HCI_CommandEPht>
}
 800e45a:	bf00      	nop
 800e45c:	3708      	adds	r7, #8
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}

0800e462 <_ZN3BTD35hci_link_key_request_negative_replyEv>:

void BTD::hci_link_key_request_negative_reply() {
 800e462:	b580      	push	{r7, lr}
 800e464:	b082      	sub	sp, #8
 800e466:	af00      	add	r7, sp, #0
 800e468:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0C; // HCI OCF = 0C
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	220c      	movs	r2, #12
 800e46e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2204      	movs	r2, #4
 800e476:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2206      	movs	r2, #6
 800e47e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	7f1a      	ldrb	r2, [r3, #28]
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	7f5a      	ldrb	r2, [r3, #29]
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	7f9a      	ldrb	r2, [r3, #30]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	7fda      	ldrb	r2, [r3, #31]
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	3389      	adds	r3, #137	; 0x89
 800e4c6:	2209      	movs	r2, #9
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f7ff fbe4 	bl	800dc98 <_ZN3BTD11HCI_CommandEPht>
}
 800e4d0:	bf00      	nop
 800e4d2:	3708      	adds	r7, #8
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}

0800e4d8 <_ZN3BTD31hci_io_capability_request_replyEv>:

void BTD::hci_io_capability_request_reply() {
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b082      	sub	sp, #8
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2B; // HCI OCF = 2B
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	222b      	movs	r2, #43	; 0x2b
 800e4e4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2204      	movs	r2, #4
 800e4ec:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x09;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2209      	movs	r2, #9
 800e4f4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	7f1a      	ldrb	r2, [r3, #28]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	7f5a      	ldrb	r2, [r3, #29]
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	7f9a      	ldrb	r2, [r3, #30]
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	7fda      	ldrb	r2, [r3, #31]
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x03; // NoInputNoOutput
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2203      	movs	r2, #3
 800e53c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // OOB authentication data not present
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2200      	movs	r2, #0
 800e544:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // MITM Protection Not Required – No Bonding. Numeric comparison with automatic accept allowed
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2200      	movs	r2, #0
 800e54c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

        HCI_Command(hcibuf, 12);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	3389      	adds	r3, #137	; 0x89
 800e554:	220c      	movs	r2, #12
 800e556:	4619      	mov	r1, r3
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f7ff fb9d 	bl	800dc98 <_ZN3BTD11HCI_CommandEPht>
}
 800e55e:	bf00      	nop
 800e560:	3708      	adds	r7, #8
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}

0800e566 <_ZN3BTD35hci_user_confirmation_request_replyEv>:

void BTD::hci_user_confirmation_request_reply() {
 800e566:	b580      	push	{r7, lr}
 800e568:	b082      	sub	sp, #8
 800e56a:	af00      	add	r7, sp, #0
 800e56c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2C; // HCI OCF = 2C
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	222c      	movs	r2, #44	; 0x2c
 800e572:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2204      	movs	r2, #4
 800e57a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2206      	movs	r2, #6
 800e582:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	7f1a      	ldrb	r2, [r3, #28]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	7f5a      	ldrb	r2, [r3, #29]
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	7f9a      	ldrb	r2, [r3, #30]
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	7fda      	ldrb	r2, [r3, #31]
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	3389      	adds	r3, #137	; 0x89
 800e5ca:	2209      	movs	r2, #9
 800e5cc:	4619      	mov	r1, r3
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f7ff fb62 	bl	800dc98 <_ZN3BTD11HCI_CommandEPht>
}
 800e5d4:	bf00      	nop
 800e5d6:	3708      	adds	r7, #8
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}

0800e5dc <_ZN3BTD26hci_authentication_requestEv>:

void BTD::hci_authentication_request() {
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b082      	sub	sp, #8
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x11; // HCI OCF = 11
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2211      	movs	r2, #17
 800e5e8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2204      	movs	r2, #4
 800e5f0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x02; // parameter length = 2
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2202      	movs	r2, #2
 800e5f8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(hci_handle & 0xFF); //connection handle - low byte
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	8b5b      	ldrh	r3, [r3, #26]
 800e600:	b2da      	uxtb	r2, r3
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((hci_handle >> 8) & 0x0F); //connection handle - high byte
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	8b5b      	ldrh	r3, [r3, #26]
 800e60c:	121b      	asrs	r3, r3, #8
 800e60e:	b2db      	uxtb	r3, r3
 800e610:	f003 030f 	and.w	r3, r3, #15
 800e614:	b2da      	uxtb	r2, r3
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

        HCI_Command(hcibuf, 5);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	3389      	adds	r3, #137	; 0x89
 800e620:	2205      	movs	r2, #5
 800e622:	4619      	mov	r1, r3
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f7ff fb37 	bl	800dc98 <_ZN3BTD11HCI_CommandEPht>
}
 800e62a:	bf00      	nop
 800e62c:	3708      	adds	r7, #8
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}

0800e632 <_ZN3BTD14hci_disconnectEt>:

void BTD::hci_disconnect(uint16_t handle) { // This is called by the different services
 800e632:	b580      	push	{r7, lr}
 800e634:	b082      	sub	sp, #8
 800e636:	af00      	add	r7, sp, #0
 800e638:	6078      	str	r0, [r7, #4]
 800e63a:	460b      	mov	r3, r1
 800e63c:	807b      	strh	r3, [r7, #2]
        hci_clear_flag(HCI_FLAG_DISCONNECT_COMPLETE);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e644:	f023 0304 	bic.w	r3, r3, #4
 800e648:	b29a      	uxth	r2, r3
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x06; // HCI OCF = 6
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2206      	movs	r2, #6
 800e654:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2204      	movs	r2, #4
 800e65c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2203      	movs	r2, #3
 800e664:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(handle & 0xFF); //connection handle - low byte
 800e668:	887b      	ldrh	r3, [r7, #2]
 800e66a:	b2da      	uxtb	r2, r3
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((handle >> 8) & 0x0F); //connection handle - high byte
 800e672:	887b      	ldrh	r3, [r7, #2]
 800e674:	121b      	asrs	r3, r3, #8
 800e676:	b2db      	uxtb	r3, r3
 800e678:	f003 030f 	and.w	r3, r3, #15
 800e67c:	b2da      	uxtb	r2, r3
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x13; // reason
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2213      	movs	r2, #19
 800e688:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	3389      	adds	r3, #137	; 0x89
 800e690:	2206      	movs	r2, #6
 800e692:	4619      	mov	r1, r3
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f7ff faff 	bl	800dc98 <_ZN3BTD11HCI_CommandEPht>
}
 800e69a:	bf00      	nop
 800e69c:	3708      	adds	r7, #8
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}

0800e6a2 <_ZN3BTD25hci_write_class_of_deviceEv>:

void BTD::hci_write_class_of_device() { // See http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800e6a2:	b580      	push	{r7, lr}
 800e6a4:	b082      	sub	sp, #8
 800e6a6:	af00      	add	r7, sp, #0
 800e6a8:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x24; // HCI OCF = 24
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2224      	movs	r2, #36	; 0x24
 800e6ae:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	220c      	movs	r2, #12
 800e6b6:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2203      	movs	r2, #3
 800e6be:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x04; // Robot
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2204      	movs	r2, #4
 800e6c6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x08; // Toy
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2208      	movs	r2, #8
 800e6ce:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x00;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	3389      	adds	r3, #137	; 0x89
 800e6de:	2206      	movs	r2, #6
 800e6e0:	4619      	mov	r1, r3
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f7ff fad8 	bl	800dc98 <_ZN3BTD11HCI_CommandEPht>
}
 800e6e8:	bf00      	nop
 800e6ea:	3708      	adds	r7, #8
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}

0800e6f0 <_ZN3BTD13L2CAP_CommandEtPhhhh>:
 */
/************************************************************/
/*                    L2CAP Commands                        */

/************************************************************/
void BTD::L2CAP_Command(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh) {
 800e6f0:	b5b0      	push	{r4, r5, r7, lr}
 800e6f2:	b08a      	sub	sp, #40	; 0x28
 800e6f4:	af02      	add	r7, sp, #8
 800e6f6:	60f8      	str	r0, [r7, #12]
 800e6f8:	607a      	str	r2, [r7, #4]
 800e6fa:	461a      	mov	r2, r3
 800e6fc:	460b      	mov	r3, r1
 800e6fe:	817b      	strh	r3, [r7, #10]
 800e700:	4613      	mov	r3, r2
 800e702:	727b      	strb	r3, [r7, #9]
                Notify(PSTR(" - Channel ID: "), 0x80);
                D_PrintHex<uint8_t > (channelHigh, 0x80);
                Notify(PSTR(" "), 0x80);
                D_PrintHex<uint8_t > (channelLow, 0x80);
#endif
        }
 800e704:	466b      	mov	r3, sp
 800e706:	461d      	mov	r5, r3
        uint8_t buf[8 + nbytes];
 800e708:	7a7b      	ldrb	r3, [r7, #9]
 800e70a:	1ddc      	adds	r4, r3, #7
 800e70c:	61bc      	str	r4, [r7, #24]
 800e70e:	4623      	mov	r3, r4
 800e710:	3301      	adds	r3, #1
 800e712:	4618      	mov	r0, r3
 800e714:	f04f 0100 	mov.w	r1, #0
 800e718:	f04f 0200 	mov.w	r2, #0
 800e71c:	f04f 0300 	mov.w	r3, #0
 800e720:	00cb      	lsls	r3, r1, #3
 800e722:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800e726:	00c2      	lsls	r2, r0, #3
 800e728:	4623      	mov	r3, r4
 800e72a:	3301      	adds	r3, #1
 800e72c:	4618      	mov	r0, r3
 800e72e:	f04f 0100 	mov.w	r1, #0
 800e732:	f04f 0200 	mov.w	r2, #0
 800e736:	f04f 0300 	mov.w	r3, #0
 800e73a:	00cb      	lsls	r3, r1, #3
 800e73c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800e740:	00c2      	lsls	r2, r0, #3
 800e742:	4623      	mov	r3, r4
 800e744:	3301      	adds	r3, #1
 800e746:	3307      	adds	r3, #7
 800e748:	08db      	lsrs	r3, r3, #3
 800e74a:	00db      	lsls	r3, r3, #3
 800e74c:	ebad 0d03 	sub.w	sp, sp, r3
 800e750:	ab02      	add	r3, sp, #8
 800e752:	3300      	adds	r3, #0
 800e754:	617b      	str	r3, [r7, #20]
        buf[0] = (uint8_t)(handle & 0xff); // HCI handle with PB,BC flag
 800e756:	897b      	ldrh	r3, [r7, #10]
 800e758:	b2da      	uxtb	r2, r3
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	701a      	strb	r2, [r3, #0]
        buf[1] = (uint8_t)(((handle >> 8) & 0x0f) | 0x20);
 800e75e:	897b      	ldrh	r3, [r7, #10]
 800e760:	121b      	asrs	r3, r3, #8
 800e762:	b25b      	sxtb	r3, r3
 800e764:	f003 030f 	and.w	r3, r3, #15
 800e768:	b25b      	sxtb	r3, r3
 800e76a:	f043 0320 	orr.w	r3, r3, #32
 800e76e:	b25b      	sxtb	r3, r3
 800e770:	b2da      	uxtb	r2, r3
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	705a      	strb	r2, [r3, #1]
        buf[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
 800e776:	7a7b      	ldrb	r3, [r7, #9]
 800e778:	3304      	adds	r3, #4
 800e77a:	b2da      	uxtb	r2, r3
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	709a      	strb	r2, [r3, #2]
        buf[3] = (uint8_t)((4 + nbytes) >> 8);
 800e780:	7a7b      	ldrb	r3, [r7, #9]
 800e782:	3304      	adds	r3, #4
 800e784:	121b      	asrs	r3, r3, #8
 800e786:	b2da      	uxtb	r2, r3
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	70da      	strb	r2, [r3, #3]
        buf[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	7a7a      	ldrb	r2, [r7, #9]
 800e790:	711a      	strb	r2, [r3, #4]
        buf[5] = (uint8_t)(nbytes >> 8);
 800e792:	7a7b      	ldrb	r3, [r7, #9]
 800e794:	121b      	asrs	r3, r3, #8
 800e796:	b2da      	uxtb	r2, r3
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	715a      	strb	r2, [r3, #5]
        buf[6] = channelLow;
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800e7a2:	719a      	strb	r2, [r3, #6]
        buf[7] = channelHigh;
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800e7aa:	71da      	strb	r2, [r3, #7]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	83fb      	strh	r3, [r7, #30]
 800e7b0:	7a7b      	ldrb	r3, [r7, #9]
 800e7b2:	b29b      	uxth	r3, r3
 800e7b4:	8bfa      	ldrh	r2, [r7, #30]
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d20b      	bcs.n	800e7d2 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xe2>
                buf[8 + i] = data[i];
 800e7ba:	8bfb      	ldrh	r3, [r7, #30]
 800e7bc:	687a      	ldr	r2, [r7, #4]
 800e7be:	441a      	add	r2, r3
 800e7c0:	8bfb      	ldrh	r3, [r7, #30]
 800e7c2:	3308      	adds	r3, #8
 800e7c4:	7811      	ldrb	r1, [r2, #0]
 800e7c6:	697a      	ldr	r2, [r7, #20]
 800e7c8:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800e7ca:	8bfb      	ldrh	r3, [r7, #30]
 800e7cc:	3301      	adds	r3, #1
 800e7ce:	83fb      	strh	r3, [r7, #30]
 800e7d0:	e7ee      	b.n	800e7b0 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xc0>
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ BTD_DATAOUT_PIPE ].epAddr, (8 + nbytes), buf);
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800e7e2:	7a7b      	ldrb	r3, [r7, #9]
 800e7e4:	b29b      	uxth	r3, r3
 800e7e6:	3308      	adds	r3, #8
 800e7e8:	b29c      	uxth	r4, r3
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	9300      	str	r3, [sp, #0]
 800e7ee:	4623      	mov	r3, r4
 800e7f0:	f002 fc34 	bl	801105c <_ZN3USB11outTransferEhhtPh>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	74fb      	strb	r3, [r7, #19]
        if(rcode) {
 800e7f8:	7cfb      	ldrb	r3, [r7, #19]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d002      	beq.n	800e804 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x114>
                delay(100); // This small delay prevents it from overflowing if it fails
 800e7fe:	2064      	movs	r0, #100	; 0x64
 800e800:	f7f3 fb2e 	bl	8001e60 <HAL_Delay>
 800e804:	46ad      	mov	sp, r5
}
 800e806:	bf00      	nop
 800e808:	3720      	adds	r7, #32
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bdb0      	pop	{r4, r5, r7, pc}

0800e80e <_ZN3BTD24l2cap_connection_requestEthPht>:

void BTD::l2cap_connection_request(uint16_t handle, uint8_t rxid, uint8_t* scid, uint16_t psm) {
 800e80e:	b580      	push	{r7, lr}
 800e810:	b086      	sub	sp, #24
 800e812:	af02      	add	r7, sp, #8
 800e814:	60f8      	str	r0, [r7, #12]
 800e816:	607b      	str	r3, [r7, #4]
 800e818:	460b      	mov	r3, r1
 800e81a:	817b      	strh	r3, [r7, #10]
 800e81c:	4613      	mov	r3, r2
 800e81e:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_REQUEST; // Code
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	2202      	movs	r2, #2
 800e824:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	7a7a      	ldrb	r2, [r7, #9]
 800e82c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	2204      	movs	r2, #4
 800e834:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2200      	movs	r2, #0
 800e83c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = (uint8_t)(psm & 0xff); // PSM
 800e840:	8b3b      	ldrh	r3, [r7, #24]
 800e842:	b2da      	uxtb	r2, r3
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = (uint8_t)(psm >> 8);
 800e84a:	8b3b      	ldrh	r3, [r7, #24]
 800e84c:	121b      	asrs	r3, r3, #8
 800e84e:	b2da      	uxtb	r2, r3
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	781a      	ldrb	r2, [r3, #0]
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	785a      	ldrb	r2, [r3, #1]
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	f203 1209 	addw	r2, r3, #265	; 0x109
 800e870:	8979      	ldrh	r1, [r7, #10]
 800e872:	2300      	movs	r3, #0
 800e874:	9301      	str	r3, [sp, #4]
 800e876:	2301      	movs	r3, #1
 800e878:	9300      	str	r3, [sp, #0]
 800e87a:	2308      	movs	r3, #8
 800e87c:	68f8      	ldr	r0, [r7, #12]
 800e87e:	f7ff ff37 	bl	800e6f0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e882:	bf00      	nop
 800e884:	3710      	adds	r7, #16
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}

0800e88a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>:

void BTD::l2cap_connection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid, uint8_t result) {
 800e88a:	b580      	push	{r7, lr}
 800e88c:	b086      	sub	sp, #24
 800e88e:	af02      	add	r7, sp, #8
 800e890:	60f8      	str	r0, [r7, #12]
 800e892:	607b      	str	r3, [r7, #4]
 800e894:	460b      	mov	r3, r1
 800e896:	817b      	strh	r3, [r7, #10]
 800e898:	4613      	mov	r3, r2
 800e89a:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_RESPONSE; // Code
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	2203      	movs	r2, #3
 800e8a0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	7a7a      	ldrb	r2, [r7, #9]
 800e8a8:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	2208      	movs	r2, #8
 800e8b0:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	781a      	ldrb	r2, [r3, #0]
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	785a      	ldrb	r2, [r3, #1]
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800e8d0:	69bb      	ldr	r3, [r7, #24]
 800e8d2:	781a      	ldrb	r2, [r3, #0]
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800e8da:	69bb      	ldr	r3, [r7, #24]
 800e8dc:	785a      	ldrb	r2, [r3, #1]
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = result; // Result: Pending or Success
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	7f3a      	ldrb	r2, [r7, #28]
 800e8e8:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00; // No further information
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	2200      	movs	r2, #0
 800e900:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	f203 1209 	addw	r2, r3, #265	; 0x109
 800e90a:	8979      	ldrh	r1, [r7, #10]
 800e90c:	2300      	movs	r3, #0
 800e90e:	9301      	str	r3, [sp, #4]
 800e910:	2301      	movs	r3, #1
 800e912:	9300      	str	r3, [sp, #0]
 800e914:	230c      	movs	r3, #12
 800e916:	68f8      	ldr	r0, [r7, #12]
 800e918:	f7ff feea 	bl	800e6f0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e91c:	bf00      	nop
 800e91e:	3710      	adds	r7, #16
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}

0800e924 <_ZN3BTD20l2cap_config_requestEthPh>:

void BTD::l2cap_config_request(uint16_t handle, uint8_t rxid, uint8_t* dcid) {
 800e924:	b580      	push	{r7, lr}
 800e926:	b086      	sub	sp, #24
 800e928:	af02      	add	r7, sp, #8
 800e92a:	60f8      	str	r0, [r7, #12]
 800e92c:	607b      	str	r3, [r7, #4]
 800e92e:	460b      	mov	r3, r1
 800e930:	817b      	strh	r3, [r7, #10]
 800e932:	4613      	mov	r3, r2
 800e934:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_REQUEST; // Code
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	2204      	movs	r2, #4
 800e93a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	7a7a      	ldrb	r2, [r7, #9]
 800e942:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	2208      	movs	r2, #8
 800e94a:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	2200      	movs	r2, #0
 800e952:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	781a      	ldrb	r2, [r3, #0]
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	785a      	ldrb	r2, [r3, #1]
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flags
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	2200      	movs	r2, #0
 800e96e:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	2200      	movs	r2, #0
 800e976:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x01; // Config Opt: type = MTU (Maximum Transmission Unit) - Hint
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	2201      	movs	r2, #1
 800e97e:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x02; // Config Opt: length
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	2202      	movs	r2, #2
 800e986:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0xFF; // MTU
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	22ff      	movs	r2, #255	; 0xff
 800e98e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0xFF;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	22ff      	movs	r2, #255	; 0xff
 800e996:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	f203 1209 	addw	r2, r3, #265	; 0x109
 800e9a0:	8979      	ldrh	r1, [r7, #10]
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	9301      	str	r3, [sp, #4]
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	9300      	str	r3, [sp, #0]
 800e9aa:	230c      	movs	r3, #12
 800e9ac:	68f8      	ldr	r0, [r7, #12]
 800e9ae:	f7ff fe9f 	bl	800e6f0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e9b2:	bf00      	nop
 800e9b4:	3710      	adds	r7, #16
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}

0800e9ba <_ZN3BTD21l2cap_config_responseEthPh>:

void BTD::l2cap_config_response(uint16_t handle, uint8_t rxid, uint8_t* scid) {
 800e9ba:	b580      	push	{r7, lr}
 800e9bc:	b086      	sub	sp, #24
 800e9be:	af02      	add	r7, sp, #8
 800e9c0:	60f8      	str	r0, [r7, #12]
 800e9c2:	607b      	str	r3, [r7, #4]
 800e9c4:	460b      	mov	r3, r1
 800e9c6:	817b      	strh	r3, [r7, #10]
 800e9c8:	4613      	mov	r3, r2
 800e9ca:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_RESPONSE; // Code
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	2205      	movs	r2, #5
 800e9d0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	7a7a      	ldrb	r2, [r7, #9]
 800e9d8:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x0A; // Length
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	220a      	movs	r2, #10
 800e9e0:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = scid[0]; // Source CID
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	781a      	ldrb	r2, [r3, #0]
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = scid[1];
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	785a      	ldrb	r2, [r3, #1]
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flag
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	2200      	movs	r2, #0
 800ea04:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00; // Result
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	2200      	movs	r2, #0
 800ea14:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x01; // Config
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	2201      	movs	r2, #1
 800ea24:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x02;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	2202      	movs	r2, #2
 800ea2c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
        l2capoutbuf[12] = 0xA0;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	22a0      	movs	r2, #160	; 0xa0
 800ea34:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
        l2capoutbuf[13] = 0x02;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	2202      	movs	r2, #2
 800ea3c:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

        L2CAP_Command(handle, l2capoutbuf, 14);
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	f203 1209 	addw	r2, r3, #265	; 0x109
 800ea46:	8979      	ldrh	r1, [r7, #10]
 800ea48:	2300      	movs	r3, #0
 800ea4a:	9301      	str	r3, [sp, #4]
 800ea4c:	2301      	movs	r3, #1
 800ea4e:	9300      	str	r3, [sp, #0]
 800ea50:	230e      	movs	r3, #14
 800ea52:	68f8      	ldr	r0, [r7, #12]
 800ea54:	f7ff fe4c 	bl	800e6f0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800ea58:	bf00      	nop
 800ea5a:	3710      	adds	r7, #16
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}

0800ea60 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>:

void BTD::l2cap_disconnection_request(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b086      	sub	sp, #24
 800ea64:	af02      	add	r7, sp, #8
 800ea66:	60f8      	str	r0, [r7, #12]
 800ea68:	607b      	str	r3, [r7, #4]
 800ea6a:	460b      	mov	r3, r1
 800ea6c:	817b      	strh	r3, [r7, #10]
 800ea6e:	4613      	mov	r3, r2
 800ea70:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_REQUEST; // Code
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	2206      	movs	r2, #6
 800ea76:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	7a7a      	ldrb	r2, [r7, #9]
 800ea7e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	2204      	movs	r2, #4
 800ea86:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	781a      	ldrb	r2, [r3, #0]
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	785a      	ldrb	r2, [r3, #1]
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800eaa6:	69bb      	ldr	r3, [r7, #24]
 800eaa8:	781a      	ldrb	r2, [r3, #0]
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800eab0:	69bb      	ldr	r3, [r7, #24]
 800eab2:	785a      	ldrb	r2, [r3, #1]
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	f203 1209 	addw	r2, r3, #265	; 0x109
 800eac0:	8979      	ldrh	r1, [r7, #10]
 800eac2:	2300      	movs	r3, #0
 800eac4:	9301      	str	r3, [sp, #4]
 800eac6:	2301      	movs	r3, #1
 800eac8:	9300      	str	r3, [sp, #0]
 800eaca:	2308      	movs	r3, #8
 800eacc:	68f8      	ldr	r0, [r7, #12]
 800eace:	f7ff fe0f 	bl	800e6f0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800ead2:	bf00      	nop
 800ead4:	3710      	adds	r7, #16
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}

0800eada <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>:

void BTD::l2cap_disconnection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800eada:	b580      	push	{r7, lr}
 800eadc:	b086      	sub	sp, #24
 800eade:	af02      	add	r7, sp, #8
 800eae0:	60f8      	str	r0, [r7, #12]
 800eae2:	607b      	str	r3, [r7, #4]
 800eae4:	460b      	mov	r3, r1
 800eae6:	817b      	strh	r3, [r7, #10]
 800eae8:	4613      	mov	r3, r2
 800eaea:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_RESPONSE; // Code
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	2207      	movs	r2, #7
 800eaf0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	7a7a      	ldrb	r2, [r7, #9]
 800eaf8:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	2204      	movs	r2, #4
 800eb00:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	2200      	movs	r2, #0
 800eb08:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	781a      	ldrb	r2, [r3, #0]
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	785a      	ldrb	r2, [r3, #1]
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800eb20:	69bb      	ldr	r3, [r7, #24]
 800eb22:	781a      	ldrb	r2, [r3, #0]
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800eb2a:	69bb      	ldr	r3, [r7, #24]
 800eb2c:	785a      	ldrb	r2, [r3, #1]
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	f203 1209 	addw	r2, r3, #265	; 0x109
 800eb3a:	8979      	ldrh	r1, [r7, #10]
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	9301      	str	r3, [sp, #4]
 800eb40:	2301      	movs	r3, #1
 800eb42:	9300      	str	r3, [sp, #0]
 800eb44:	2308      	movs	r3, #8
 800eb46:	68f8      	ldr	r0, [r7, #12]
 800eb48:	f7ff fdd2 	bl	800e6f0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800eb4c:	bf00      	nop
 800eb4e:	3710      	adds	r7, #16
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}

0800eb54 <_ZN3BTD26l2cap_information_responseEthhh>:

void BTD::l2cap_information_response(uint16_t handle, uint8_t rxid, uint8_t infoTypeLow, uint8_t infoTypeHigh) {
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b084      	sub	sp, #16
 800eb58:	af02      	add	r7, sp, #8
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	4608      	mov	r0, r1
 800eb5e:	4611      	mov	r1, r2
 800eb60:	461a      	mov	r2, r3
 800eb62:	4603      	mov	r3, r0
 800eb64:	807b      	strh	r3, [r7, #2]
 800eb66:	460b      	mov	r3, r1
 800eb68:	707b      	strb	r3, [r7, #1]
 800eb6a:	4613      	mov	r3, r2
 800eb6c:	703b      	strb	r3, [r7, #0]
        l2capoutbuf[0] = L2CAP_CMD_INFORMATION_RESPONSE; // Code
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	220b      	movs	r2, #11
 800eb72:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	787a      	ldrb	r2, [r7, #1]
 800eb7a:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2208      	movs	r2, #8
 800eb82:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = infoTypeLow;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	783a      	ldrb	r2, [r7, #0]
 800eb92:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = infoTypeHigh;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	7c3a      	ldrb	r2, [r7, #16]
 800eb9a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Result = success
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2200      	movs	r2, #0
 800eba2:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00; // Result = success
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2200      	movs	r2, #0
 800ebaa:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2200      	movs	r2, #0
 800ebca:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f203 1209 	addw	r2, r3, #265	; 0x109
 800ebd4:	8879      	ldrh	r1, [r7, #2]
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	9301      	str	r3, [sp, #4]
 800ebda:	2301      	movs	r3, #1
 800ebdc:	9300      	str	r3, [sp, #0]
 800ebde:	230c      	movs	r3, #12
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f7ff fd85 	bl	800e6f0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800ebe6:	bf00      	nop
 800ebe8:	3708      	adds	r7, #8
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}

0800ebee <_ZN3BTD9setBdaddrEPh>:

/* PS3 Commands - only set Bluetooth address is implemented in this library */
void BTD::setBdaddr(uint8_t* bdaddr) {
 800ebee:	b580      	push	{r7, lr}
 800ebf0:	b08e      	sub	sp, #56	; 0x38
 800ebf2:	af08      	add	r7, sp, #32
 800ebf4:	6078      	str	r0, [r7, #4]
 800ebf6:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[8];
        buf[0] = 0x01;
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	733b      	strb	r3, [r7, #12]
        buf[1] = 0x00;
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	737b      	strb	r3, [r7, #13]

        for(uint8_t i = 0; i < 6; i++)
 800ec00:	2300      	movs	r3, #0
 800ec02:	75fb      	strb	r3, [r7, #23]
 800ec04:	7dfb      	ldrb	r3, [r7, #23]
 800ec06:	2b05      	cmp	r3, #5
 800ec08:	d811      	bhi.n	800ec2e <_ZN3BTD9setBdaddrEPh+0x40>
                buf[i + 2] = bdaddr[5 - i]; // Copy into buffer, has to be written reversed, so it is MSB first
 800ec0a:	7dfb      	ldrb	r3, [r7, #23]
 800ec0c:	f1c3 0305 	rsb	r3, r3, #5
 800ec10:	461a      	mov	r2, r3
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	441a      	add	r2, r3
 800ec16:	7dfb      	ldrb	r3, [r7, #23]
 800ec18:	3302      	adds	r3, #2
 800ec1a:	7812      	ldrb	r2, [r2, #0]
 800ec1c:	f107 0118 	add.w	r1, r7, #24
 800ec20:	440b      	add	r3, r1
 800ec22:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800ec26:	7dfb      	ldrb	r3, [r7, #23]
 800ec28:	3301      	adds	r3, #1
 800ec2a:	75fb      	strb	r3, [r7, #23]
 800ec2c:	e7ea      	b.n	800ec04 <_ZN3BTD9setBdaddrEPh+0x16>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0xF5, 0x03, 0x00, 8, 8, buf, NULL);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ec3e:	2300      	movs	r3, #0
 800ec40:	9307      	str	r3, [sp, #28]
 800ec42:	f107 030c 	add.w	r3, r7, #12
 800ec46:	9306      	str	r3, [sp, #24]
 800ec48:	2308      	movs	r3, #8
 800ec4a:	9305      	str	r3, [sp, #20]
 800ec4c:	2308      	movs	r3, #8
 800ec4e:	9304      	str	r3, [sp, #16]
 800ec50:	2300      	movs	r3, #0
 800ec52:	9303      	str	r3, [sp, #12]
 800ec54:	2303      	movs	r3, #3
 800ec56:	9302      	str	r3, [sp, #8]
 800ec58:	23f5      	movs	r3, #245	; 0xf5
 800ec5a:	9301      	str	r3, [sp, #4]
 800ec5c:	2309      	movs	r3, #9
 800ec5e:	9300      	str	r3, [sp, #0]
 800ec60:	2321      	movs	r3, #33	; 0x21
 800ec62:	f002 f81c 	bl	8010c9e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800ec66:	bf00      	nop
 800ec68:	3718      	adds	r7, #24
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}

0800ec6e <_ZN3BTD13setMoveBdaddrEPh>:

void BTD::setMoveBdaddr(uint8_t* bdaddr) {
 800ec6e:	b580      	push	{r7, lr}
 800ec70:	b08e      	sub	sp, #56	; 0x38
 800ec72:	af08      	add	r7, sp, #32
 800ec74:	6078      	str	r0, [r7, #4]
 800ec76:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[11];
        buf[0] = 0x05;
 800ec78:	2305      	movs	r3, #5
 800ec7a:	733b      	strb	r3, [r7, #12]
        buf[7] = 0x10;
 800ec7c:	2310      	movs	r3, #16
 800ec7e:	74fb      	strb	r3, [r7, #19]
        buf[8] = 0x01;
 800ec80:	2301      	movs	r3, #1
 800ec82:	753b      	strb	r3, [r7, #20]
        buf[9] = 0x02;
 800ec84:	2302      	movs	r3, #2
 800ec86:	757b      	strb	r3, [r7, #21]
        buf[10] = 0x12;
 800ec88:	2312      	movs	r3, #18
 800ec8a:	75bb      	strb	r3, [r7, #22]

        for(uint8_t i = 0; i < 6; i++)
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	75fb      	strb	r3, [r7, #23]
 800ec90:	7dfb      	ldrb	r3, [r7, #23]
 800ec92:	2b05      	cmp	r3, #5
 800ec94:	d80e      	bhi.n	800ecb4 <_ZN3BTD13setMoveBdaddrEPh+0x46>
                buf[i + 1] = bdaddr[i];
 800ec96:	7dfb      	ldrb	r3, [r7, #23]
 800ec98:	683a      	ldr	r2, [r7, #0]
 800ec9a:	441a      	add	r2, r3
 800ec9c:	7dfb      	ldrb	r3, [r7, #23]
 800ec9e:	3301      	adds	r3, #1
 800eca0:	7812      	ldrb	r2, [r2, #0]
 800eca2:	f107 0118 	add.w	r1, r7, #24
 800eca6:	440b      	add	r3, r1
 800eca8:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800ecac:	7dfb      	ldrb	r3, [r7, #23]
 800ecae:	3301      	adds	r3, #1
 800ecb0:	75fb      	strb	r3, [r7, #23]
 800ecb2:	e7ed      	b.n	800ec90 <_ZN3BTD13setMoveBdaddrEPh+0x22>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0x05), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0x05, 0x03, 0x00, 11, 11, buf, NULL);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	9307      	str	r3, [sp, #28]
 800ecc8:	f107 030c 	add.w	r3, r7, #12
 800eccc:	9306      	str	r3, [sp, #24]
 800ecce:	230b      	movs	r3, #11
 800ecd0:	9305      	str	r3, [sp, #20]
 800ecd2:	230b      	movs	r3, #11
 800ecd4:	9304      	str	r3, [sp, #16]
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	9303      	str	r3, [sp, #12]
 800ecda:	2303      	movs	r3, #3
 800ecdc:	9302      	str	r3, [sp, #8]
 800ecde:	2305      	movs	r3, #5
 800ece0:	9301      	str	r3, [sp, #4]
 800ece2:	2309      	movs	r3, #9
 800ece4:	9300      	str	r3, [sp, #0]
 800ece6:	2321      	movs	r3, #33	; 0x21
 800ece8:	f001 ffd9 	bl	8010c9e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800ecec:	bf00      	nop
 800ecee:	3718      	adds	r7, #24
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}

0800ecf4 <_ZN13USBReadParserC1Ev>:
class USBReadParser {
 800ecf4:	b480      	push	{r7}
 800ecf6:	b083      	sub	sp, #12
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
 800ecfc:	4a04      	ldr	r2, [pc, #16]	; (800ed10 <_ZN13USBReadParserC1Ev+0x1c>)
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	601a      	str	r2, [r3, #0]
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	4618      	mov	r0, r3
 800ed06:	370c      	adds	r7, #12
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0e:	4770      	bx	lr
 800ed10:	08012908 	.word	0x08012908

0800ed14 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b082      	sub	sp, #8
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	6039      	str	r1, [r7, #0]
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7ff ffe7 	bl	800ecf4 <_ZN13USBReadParserC1Ev>
 800ed26:	4a21      	ldr	r2, [pc, #132]	; (800edac <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	601a      	str	r2, [r3, #0]
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	683a      	ldr	r2, [r7, #0]
 800ed30:	605a      	str	r2, [r3, #4]
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	3308      	adds	r3, #8
 800ed36:	4618      	mov	r0, r3
 800ed38:	f7fd fb65 	bl	800c406 <_ZN16MultiValueBufferC1Ev>
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	3310      	adds	r3, #16
 800ed40:	4618      	mov	r0, r3
 800ed42:	f7fd fb77 	bl	800c434 <_ZN20MultiByteValueParserC1Ev>
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	3318      	adds	r3, #24
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7fd fb9e 	bl	800c48c <_ZN11ByteSkipperC1Ev>
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2200      	movs	r2, #0
 800ed54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2200      	movs	r2, #0
 800ed64:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f103 0220 	add.w	r2, r3, #32
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f103 0210 	add.w	r2, r3, #16
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	3308      	adds	r3, #8
 800ed86:	4619      	mov	r1, r3
 800ed88:	4610      	mov	r0, r2
 800ed8a:	f7fd fb67 	bl	800c45c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	f103 0218 	add.w	r2, r3, #24
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	3308      	adds	r3, #8
 800ed98:	4619      	mov	r1, r3
 800ed9a:	4610      	mov	r0, r2
 800ed9c:	f7fd fb8a 	bl	800c4b4 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	4618      	mov	r0, r3
 800eda4:	3708      	adds	r7, #8
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}
 800edaa:	bf00      	nop
 800edac:	080128b0 	.word	0x080128b0

0800edb0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b082      	sub	sp, #8
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
 800edb8:	6039      	str	r1, [r7, #0]
UseOr(false) {
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	4618      	mov	r0, r3
 800edbe:	f7ff ff99 	bl	800ecf4 <_ZN13USBReadParserC1Ev>
 800edc2:	4a21      	ldr	r2, [pc, #132]	; (800ee48 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	601a      	str	r2, [r3, #0]
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	683a      	ldr	r2, [r7, #0]
 800edcc:	605a      	str	r2, [r3, #4]
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	3308      	adds	r3, #8
 800edd2:	4618      	mov	r0, r3
 800edd4:	f7fd fb17 	bl	800c406 <_ZN16MultiValueBufferC1Ev>
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	3310      	adds	r3, #16
 800eddc:	4618      	mov	r0, r3
 800edde:	f7fd fb29 	bl	800c434 <_ZN20MultiByteValueParserC1Ev>
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	3318      	adds	r3, #24
 800ede6:	4618      	mov	r0, r3
 800ede8:	f7fd fb50 	bl	800c48c <_ZN11ByteSkipperC1Ev>
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2200      	movs	r2, #0
 800edf0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2200      	movs	r2, #0
 800edf8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2200      	movs	r2, #0
 800ee00:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2200      	movs	r2, #0
 800ee08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f103 0220 	add.w	r2, r3, #32
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f103 0210 	add.w	r2, r3, #16
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	3308      	adds	r3, #8
 800ee22:	4619      	mov	r1, r3
 800ee24:	4610      	mov	r0, r2
 800ee26:	f7fd fb19 	bl	800c45c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f103 0218 	add.w	r2, r3, #24
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	3308      	adds	r3, #8
 800ee34:	4619      	mov	r1, r3
 800ee36:	4610      	mov	r0, r2
 800ee38:	f7fd fb3c 	bl	800c4b4 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3708      	adds	r7, #8
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
 800ee46:	bf00      	nop
 800ee48:	080128a4 	.word	0x080128a4

0800ee4c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b086      	sub	sp, #24
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	60f8      	str	r0, [r7, #12]
 800ee54:	607a      	str	r2, [r7, #4]
 800ee56:	603b      	str	r3, [r7, #0]
 800ee58:	460b      	mov	r3, r1
 800ee5a:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800ee5c:	897b      	ldrh	r3, [r7, #10]
 800ee5e:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	613b      	str	r3, [r7, #16]

        while(cntdn)
 800ee64:	8afb      	ldrh	r3, [r7, #22]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d00f      	beq.n	800ee8a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800ee6a:	f107 0216 	add.w	r2, r7, #22
 800ee6e:	f107 0310 	add.w	r3, r7, #16
 800ee72:	4619      	mov	r1, r3
 800ee74:	68f8      	ldr	r0, [r7, #12]
 800ee76:	f000 f82d 	bl	800eed4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	f083 0301 	eor.w	r3, r3, #1
 800ee80:	b2db      	uxtb	r3, r3
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d100      	bne.n	800ee88 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800ee86:	e7ed      	b.n	800ee64 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800ee88:	bf00      	nop
}
 800ee8a:	3718      	adds	r7, #24
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}

0800ee90 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt>:
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b086      	sub	sp, #24
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	60f8      	str	r0, [r7, #12]
 800ee98:	607a      	str	r2, [r7, #4]
 800ee9a:	603b      	str	r3, [r7, #0]
 800ee9c:	460b      	mov	r3, r1
 800ee9e:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800eea0:	897b      	ldrh	r3, [r7, #10]
 800eea2:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	613b      	str	r3, [r7, #16]
        while(cntdn)
 800eea8:	8afb      	ldrh	r3, [r7, #22]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d00f      	beq.n	800eece <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800eeae:	f107 0216 	add.w	r2, r7, #22
 800eeb2:	f107 0310 	add.w	r3, r7, #16
 800eeb6:	4619      	mov	r1, r3
 800eeb8:	68f8      	ldr	r0, [r7, #12]
 800eeba:	f000 f981 	bl	800f1c0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800eebe:	4603      	mov	r3, r0
 800eec0:	f083 0301 	eor.w	r3, r3, #1
 800eec4:	b2db      	uxtb	r3, r3
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d100      	bne.n	800eecc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800eeca:	e7ed      	b.n	800eea8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800eecc:	bf00      	nop
}
 800eece:	3718      	adds	r7, #24
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}

0800eed4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800eed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eed6:	b089      	sub	sp, #36	; 0x24
 800eed8:	af02      	add	r7, sp, #8
 800eeda:	60f8      	str	r0, [r7, #12]
 800eedc:	60b9      	str	r1, [r7, #8]
 800eede:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	3320      	adds	r3, #32
 800eee4:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	3320      	adds	r3, #32
 800eeea:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eef2:	2b04      	cmp	r3, #4
 800eef4:	f200 815e 	bhi.w	800f1b4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800eef8:	a201      	add	r2, pc, #4	; (adr r2, 800ef00 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800eefa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eefe:	bf00      	nop
 800ef00:	0800ef15 	.word	0x0800ef15
 800ef04:	0800ef35 	.word	0x0800ef35
 800ef08:	0800ef77 	.word	0x0800ef77
 800ef0c:	0800ef8b 	.word	0x0800ef8b
 800ef10:	0800f04f 	.word	0x0800f04f
                case 0:
                        theBuffer.valueSize = 2;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	2202      	movs	r2, #2
 800ef18:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	f103 0210 	add.w	r2, r3, #16
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	3308      	adds	r3, #8
 800ef24:	4619      	mov	r1, r3
 800ef26:	4610      	mov	r0, r2
 800ef28:	f7fd fa98 	bl	800c45c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	2201      	movs	r2, #1
 800ef30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	3310      	adds	r3, #16
 800ef38:	687a      	ldr	r2, [r7, #4]
 800ef3a:	68b9      	ldr	r1, [r7, #8]
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f003 fa49 	bl	80123d4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800ef42:	4603      	mov	r3, r0
 800ef44:	f083 0301 	eor.w	r3, r3, #1
 800ef48:	b2db      	uxtb	r3, r3
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d001      	beq.n	800ef52 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	e131      	b.n	800f1b6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800ef58:	781a      	ldrb	r2, [r3, #0]
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800ef66:	785a      	ldrb	r2, [r3, #1]
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	2202      	movs	r2, #2
 800ef72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	3320      	adds	r3, #32
 800ef7a:	1c9a      	adds	r2, r3, #2
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	2203      	movs	r2, #3
 800ef86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 3:
                        switch(dscrType) {
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ef90:	3b02      	subs	r3, #2
 800ef92:	2b1f      	cmp	r3, #31
 800ef94:	d847      	bhi.n	800f026 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800ef96:	a201      	add	r2, pc, #4	; (adr r2, 800ef9c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800ef98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef9c:	0800f027 	.word	0x0800f027
 800efa0:	0800f027 	.word	0x0800f027
 800efa4:	0800f01d 	.word	0x0800f01d
 800efa8:	0800f027 	.word	0x0800f027
 800efac:	0800f027 	.word	0x0800f027
 800efb0:	0800f027 	.word	0x0800f027
 800efb4:	0800f027 	.word	0x0800f027
 800efb8:	0800f027 	.word	0x0800f027
 800efbc:	0800f027 	.word	0x0800f027
 800efc0:	0800f027 	.word	0x0800f027
 800efc4:	0800f027 	.word	0x0800f027
 800efc8:	0800f027 	.word	0x0800f027
 800efcc:	0800f027 	.word	0x0800f027
 800efd0:	0800f027 	.word	0x0800f027
 800efd4:	0800f027 	.word	0x0800f027
 800efd8:	0800f027 	.word	0x0800f027
 800efdc:	0800f027 	.word	0x0800f027
 800efe0:	0800f027 	.word	0x0800f027
 800efe4:	0800f027 	.word	0x0800f027
 800efe8:	0800f027 	.word	0x0800f027
 800efec:	0800f027 	.word	0x0800f027
 800eff0:	0800f027 	.word	0x0800f027
 800eff4:	0800f027 	.word	0x0800f027
 800eff8:	0800f027 	.word	0x0800f027
 800effc:	0800f027 	.word	0x0800f027
 800f000:	0800f027 	.word	0x0800f027
 800f004:	0800f027 	.word	0x0800f027
 800f008:	0800f027 	.word	0x0800f027
 800f00c:	0800f027 	.word	0x0800f027
 800f010:	0800f027 	.word	0x0800f027
 800f014:	0800f027 	.word	0x0800f027
 800f018:	0800f027 	.word	0x0800f027
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	2200      	movs	r2, #0
 800f020:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800f024:	bf00      	nop
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
                        }
                        theBuffer.valueSize = dscrLen - 2;
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f02c:	3b02      	subs	r3, #2
 800f02e:	b2da      	uxtb	r2, r3
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	f103 0210 	add.w	r2, r3, #16
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	3308      	adds	r3, #8
 800f03e:	4619      	mov	r1, r3
 800f040:	4610      	mov	r0, r2
 800f042:	f7fd fa0b 	bl	800c45c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	2204      	movs	r2, #4
 800f04a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 4:
                        switch(dscrType) {
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f054:	2b05      	cmp	r3, #5
 800f056:	d055      	beq.n	800f104 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800f058:	2b05      	cmp	r3, #5
 800f05a:	f300 8085 	bgt.w	800f168 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800f05e:	2b02      	cmp	r3, #2
 800f060:	d002      	beq.n	800f068 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800f062:	2b04      	cmp	r3, #4
 800f064:	d015      	beq.n	800f092 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800f066:	e07f      	b.n	800f168 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	3310      	adds	r3, #16
 800f06c:	687a      	ldr	r2, [r7, #4]
 800f06e:	68b9      	ldr	r1, [r7, #8]
 800f070:	4618      	mov	r0, r3
 800f072:	f003 f9af 	bl	80123d4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f076:	4603      	mov	r3, r0
 800f078:	f083 0301 	eor.w	r3, r3, #1
 800f07c:	b2db      	uxtb	r3, r3
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d001      	beq.n	800f086 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800f082:	2300      	movs	r3, #0
 800f084:	e097      	b.n	800f1b6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	795a      	ldrb	r2, [r3, #5]
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800f090:	e086      	b.n	800f1a0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	3310      	adds	r3, #16
 800f096:	687a      	ldr	r2, [r7, #4]
 800f098:	68b9      	ldr	r1, [r7, #8]
 800f09a:	4618      	mov	r0, r3
 800f09c:	f003 f99a 	bl	80123d4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	f083 0301 	eor.w	r3, r3, #1
 800f0a6:	b2db      	uxtb	r3, r3
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d001      	beq.n	800f0b0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	e082      	b.n	800f1b6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800f0b0:	693b      	ldr	r3, [r7, #16]
 800f0b2:	795b      	ldrb	r3, [r3, #5]
 800f0b4:	2be0      	cmp	r3, #224	; 0xe0
 800f0b6:	d16c      	bne.n	800f192 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800f0b8:	693b      	ldr	r3, [r7, #16]
 800f0ba:	799b      	ldrb	r3, [r3, #6]
 800f0bc:	2b01      	cmp	r3, #1
 800f0be:	d16a      	bne.n	800f196 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                                break;
                                        if(UseOr) {
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d004      	beq.n	800f0d4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800f0ca:	693b      	ldr	r3, [r7, #16]
 800f0cc:	79db      	ldrb	r3, [r3, #7]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d104      	bne.n	800f0dc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800f0d2:	e065      	b.n	800f1a0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800f0d4:	693b      	ldr	r3, [r7, #16]
 800f0d6:	79db      	ldrb	r3, [r3, #7]
 800f0d8:	2b01      	cmp	r3, #1
 800f0da:	d15e      	bne.n	800f19a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                                        break;
                                        }
                                        isGoodInterface = true;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	2201      	movs	r2, #1
 800f0e0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	789a      	ldrb	r2, [r3, #2]
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	78da      	ldrb	r2, [r3, #3]
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800f0f8:	693b      	ldr	r3, [r7, #16]
 800f0fa:	79da      	ldrb	r2, [r3, #7]
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800f102:	e04d      	b.n	800f1a0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	3310      	adds	r3, #16
 800f108:	687a      	ldr	r2, [r7, #4]
 800f10a:	68b9      	ldr	r1, [r7, #8]
 800f10c:	4618      	mov	r0, r3
 800f10e:	f003 f961 	bl	80123d4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f112:	4603      	mov	r3, r0
 800f114:	f083 0301 	eor.w	r3, r3, #1
 800f118:	b2db      	uxtb	r3, r3
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d001      	beq.n	800f122 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800f11e:	2300      	movs	r3, #0
 800f120:	e049      	b.n	800f1b6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d038      	beq.n	800f19e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	685b      	ldr	r3, [r3, #4]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d034      	beq.n	800f19e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	6858      	ldr	r0, [r3, #4]
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	685b      	ldr	r3, [r3, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	681c      	ldr	r4, [r3, #0]
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f158:	68fa      	ldr	r2, [r7, #12]
 800f15a:	3220      	adds	r2, #32
 800f15c:	9201      	str	r2, [sp, #4]
 800f15e:	9300      	str	r3, [sp, #0]
 800f160:	4633      	mov	r3, r6
 800f162:	462a      	mov	r2, r5
 800f164:	47a0      	blx	r4
                                        break;
 800f166:	e01a      	b.n	800f19e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	f103 0018 	add.w	r0, r3, #24
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f174:	b29b      	uxth	r3, r3
 800f176:	3b02      	subs	r3, #2
 800f178:	b29b      	uxth	r3, r3
 800f17a:	687a      	ldr	r2, [r7, #4]
 800f17c:	68b9      	ldr	r1, [r7, #8]
 800f17e:	f7fd f9ac 	bl	800c4da <_ZN11ByteSkipper4SkipEPPhPtt>
 800f182:	4603      	mov	r3, r0
 800f184:	f083 0301 	eor.w	r3, r3, #1
 800f188:	b2db      	uxtb	r3, r3
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d008      	beq.n	800f1a0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800f18e:	2300      	movs	r3, #0
 800f190:	e011      	b.n	800f1b6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800f192:	bf00      	nop
 800f194:	e004      	b.n	800f1a0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800f196:	bf00      	nop
 800f198:	e002      	b.n	800f1a0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800f19a:	bf00      	nop
 800f19c:	e000      	b.n	800f1a0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800f19e:	bf00      	nop
                        }
                        theBuffer.pValue = varBuffer;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	f103 0220 	add.w	r2, r3, #32
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
        return true;
 800f1b4:	2301      	movs	r3, #1
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	371c      	adds	r7, #28
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1be:	bf00      	nop

0800f1c0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800f1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1c2:	b089      	sub	sp, #36	; 0x24
 800f1c4:	af02      	add	r7, sp, #8
 800f1c6:	60f8      	str	r0, [r7, #12]
 800f1c8:	60b9      	str	r1, [r7, #8]
 800f1ca:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	3320      	adds	r3, #32
 800f1d0:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	3320      	adds	r3, #32
 800f1d6:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f1de:	2b04      	cmp	r3, #4
 800f1e0:	f200 815e 	bhi.w	800f4a0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800f1e4:	a201      	add	r2, pc, #4	; (adr r2, 800f1ec <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800f1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ea:	bf00      	nop
 800f1ec:	0800f201 	.word	0x0800f201
 800f1f0:	0800f221 	.word	0x0800f221
 800f1f4:	0800f263 	.word	0x0800f263
 800f1f8:	0800f277 	.word	0x0800f277
 800f1fc:	0800f33b 	.word	0x0800f33b
                        theBuffer.valueSize = 2;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	2202      	movs	r2, #2
 800f204:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	f103 0210 	add.w	r2, r3, #16
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	3308      	adds	r3, #8
 800f210:	4619      	mov	r1, r3
 800f212:	4610      	mov	r0, r2
 800f214:	f7fd f922 	bl	800c45c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	2201      	movs	r2, #1
 800f21c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        if(!valParser.Parse(pp, pcntdn))
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	3310      	adds	r3, #16
 800f224:	687a      	ldr	r2, [r7, #4]
 800f226:	68b9      	ldr	r1, [r7, #8]
 800f228:	4618      	mov	r0, r3
 800f22a:	f003 f8d3 	bl	80123d4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f22e:	4603      	mov	r3, r0
 800f230:	f083 0301 	eor.w	r3, r3, #1
 800f234:	b2db      	uxtb	r3, r3
 800f236:	2b00      	cmp	r3, #0
 800f238:	d001      	beq.n	800f23e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800f23a:	2300      	movs	r3, #0
 800f23c:	e131      	b.n	800f4a2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800f244:	781a      	ldrb	r2, [r3, #0]
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800f252:	785a      	ldrb	r2, [r3, #1]
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	2202      	movs	r2, #2
 800f25e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        theBuffer.pValue = varBuffer + 2;
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	3320      	adds	r3, #32
 800f266:	1c9a      	adds	r2, r3, #2
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	2203      	movs	r2, #3
 800f272:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f27c:	3b02      	subs	r3, #2
 800f27e:	2b1f      	cmp	r3, #31
 800f280:	d847      	bhi.n	800f312 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800f282:	a201      	add	r2, pc, #4	; (adr r2, 800f288 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800f284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f288:	0800f313 	.word	0x0800f313
 800f28c:	0800f313 	.word	0x0800f313
 800f290:	0800f309 	.word	0x0800f309
 800f294:	0800f313 	.word	0x0800f313
 800f298:	0800f313 	.word	0x0800f313
 800f29c:	0800f313 	.word	0x0800f313
 800f2a0:	0800f313 	.word	0x0800f313
 800f2a4:	0800f313 	.word	0x0800f313
 800f2a8:	0800f313 	.word	0x0800f313
 800f2ac:	0800f313 	.word	0x0800f313
 800f2b0:	0800f313 	.word	0x0800f313
 800f2b4:	0800f313 	.word	0x0800f313
 800f2b8:	0800f313 	.word	0x0800f313
 800f2bc:	0800f313 	.word	0x0800f313
 800f2c0:	0800f313 	.word	0x0800f313
 800f2c4:	0800f313 	.word	0x0800f313
 800f2c8:	0800f313 	.word	0x0800f313
 800f2cc:	0800f313 	.word	0x0800f313
 800f2d0:	0800f313 	.word	0x0800f313
 800f2d4:	0800f313 	.word	0x0800f313
 800f2d8:	0800f313 	.word	0x0800f313
 800f2dc:	0800f313 	.word	0x0800f313
 800f2e0:	0800f313 	.word	0x0800f313
 800f2e4:	0800f313 	.word	0x0800f313
 800f2e8:	0800f313 	.word	0x0800f313
 800f2ec:	0800f313 	.word	0x0800f313
 800f2f0:	0800f313 	.word	0x0800f313
 800f2f4:	0800f313 	.word	0x0800f313
 800f2f8:	0800f313 	.word	0x0800f313
 800f2fc:	0800f313 	.word	0x0800f313
 800f300:	0800f313 	.word	0x0800f313
 800f304:	0800f313 	.word	0x0800f313
                                        isGoodInterface = false;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	2200      	movs	r2, #0
 800f30c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800f310:	bf00      	nop
                        theBuffer.valueSize = dscrLen - 2;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f318:	3b02      	subs	r3, #2
 800f31a:	b2da      	uxtb	r2, r3
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	f103 0210 	add.w	r2, r3, #16
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	3308      	adds	r3, #8
 800f32a:	4619      	mov	r1, r3
 800f32c:	4610      	mov	r0, r2
 800f32e:	f7fd f895 	bl	800c45c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	2204      	movs	r2, #4
 800f336:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f340:	2b05      	cmp	r3, #5
 800f342:	d055      	beq.n	800f3f0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800f344:	2b05      	cmp	r3, #5
 800f346:	f300 8085 	bgt.w	800f454 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800f34a:	2b02      	cmp	r3, #2
 800f34c:	d002      	beq.n	800f354 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800f34e:	2b04      	cmp	r3, #4
 800f350:	d015      	beq.n	800f37e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800f352:	e07f      	b.n	800f454 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                        if(!valParser.Parse(pp, pcntdn))
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	3310      	adds	r3, #16
 800f358:	687a      	ldr	r2, [r7, #4]
 800f35a:	68b9      	ldr	r1, [r7, #8]
 800f35c:	4618      	mov	r0, r3
 800f35e:	f003 f839 	bl	80123d4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f362:	4603      	mov	r3, r0
 800f364:	f083 0301 	eor.w	r3, r3, #1
 800f368:	b2db      	uxtb	r3, r3
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d001      	beq.n	800f372 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800f36e:	2300      	movs	r3, #0
 800f370:	e097      	b.n	800f4a2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	795a      	ldrb	r2, [r3, #5]
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800f37c:	e086      	b.n	800f48c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	3310      	adds	r3, #16
 800f382:	687a      	ldr	r2, [r7, #4]
 800f384:	68b9      	ldr	r1, [r7, #8]
 800f386:	4618      	mov	r0, r3
 800f388:	f003 f824 	bl	80123d4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f38c:	4603      	mov	r3, r0
 800f38e:	f083 0301 	eor.w	r3, r3, #1
 800f392:	b2db      	uxtb	r3, r3
 800f394:	2b00      	cmp	r3, #0
 800f396:	d001      	beq.n	800f39c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800f398:	2300      	movs	r3, #0
 800f39a:	e082      	b.n	800f4a2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800f39c:	693b      	ldr	r3, [r7, #16]
 800f39e:	795b      	ldrb	r3, [r3, #5]
 800f3a0:	2bff      	cmp	r3, #255	; 0xff
 800f3a2:	d16c      	bne.n	800f47e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800f3a4:	693b      	ldr	r3, [r7, #16]
 800f3a6:	799b      	ldrb	r3, [r3, #6]
 800f3a8:	2b01      	cmp	r3, #1
 800f3aa:	d16a      	bne.n	800f482 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                        if(UseOr) {
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d004      	beq.n	800f3c0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800f3b6:	693b      	ldr	r3, [r7, #16]
 800f3b8:	79db      	ldrb	r3, [r3, #7]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d104      	bne.n	800f3c8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800f3be:	e065      	b.n	800f48c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800f3c0:	693b      	ldr	r3, [r7, #16]
 800f3c2:	79db      	ldrb	r3, [r3, #7]
 800f3c4:	2b01      	cmp	r3, #1
 800f3c6:	d15e      	bne.n	800f486 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                        isGoodInterface = true;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	2201      	movs	r2, #1
 800f3cc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	789a      	ldrb	r2, [r3, #2]
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800f3da:	693b      	ldr	r3, [r7, #16]
 800f3dc:	78da      	ldrb	r2, [r3, #3]
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800f3e4:	693b      	ldr	r3, [r7, #16]
 800f3e6:	79da      	ldrb	r2, [r3, #7]
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800f3ee:	e04d      	b.n	800f48c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	3310      	adds	r3, #16
 800f3f4:	687a      	ldr	r2, [r7, #4]
 800f3f6:	68b9      	ldr	r1, [r7, #8]
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f002 ffeb 	bl	80123d4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f3fe:	4603      	mov	r3, r0
 800f400:	f083 0301 	eor.w	r3, r3, #1
 800f404:	b2db      	uxtb	r3, r3
 800f406:	2b00      	cmp	r3, #0
 800f408:	d001      	beq.n	800f40e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800f40a:	2300      	movs	r3, #0
 800f40c:	e049      	b.n	800f4a2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f414:	2b00      	cmp	r3, #0
 800f416:	d038      	beq.n	800f48a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	685b      	ldr	r3, [r3, #4]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d034      	beq.n	800f48a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	6858      	ldr	r0, [r3, #4]
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	685b      	ldr	r3, [r3, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	681c      	ldr	r4, [r3, #0]
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f444:	68fa      	ldr	r2, [r7, #12]
 800f446:	3220      	adds	r2, #32
 800f448:	9201      	str	r2, [sp, #4]
 800f44a:	9300      	str	r3, [sp, #0]
 800f44c:	4633      	mov	r3, r6
 800f44e:	462a      	mov	r2, r5
 800f450:	47a0      	blx	r4
                                        break;
 800f452:	e01a      	b.n	800f48a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	f103 0018 	add.w	r0, r3, #24
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f460:	b29b      	uxth	r3, r3
 800f462:	3b02      	subs	r3, #2
 800f464:	b29b      	uxth	r3, r3
 800f466:	687a      	ldr	r2, [r7, #4]
 800f468:	68b9      	ldr	r1, [r7, #8]
 800f46a:	f7fd f836 	bl	800c4da <_ZN11ByteSkipper4SkipEPPhPtt>
 800f46e:	4603      	mov	r3, r0
 800f470:	f083 0301 	eor.w	r3, r3, #1
 800f474:	b2db      	uxtb	r3, r3
 800f476:	2b00      	cmp	r3, #0
 800f478:	d008      	beq.n	800f48c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800f47a:	2300      	movs	r3, #0
 800f47c:	e011      	b.n	800f4a2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800f47e:	bf00      	nop
 800f480:	e004      	b.n	800f48c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800f482:	bf00      	nop
 800f484:	e002      	b.n	800f48c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800f486:	bf00      	nop
 800f488:	e000      	b.n	800f48c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800f48a:	bf00      	nop
                        theBuffer.pValue = varBuffer;
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	f103 0220 	add.w	r2, r3, #32
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	2200      	movs	r2, #0
 800f49c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return true;
 800f4a0:	2301      	movs	r3, #1
}
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	371c      	adds	r7, #28
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4aa:	bf00      	nop

0800f4ac <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>:
        int8_t registerBluetoothService(BluetoothService *pService) {
 800f4ac:	b480      	push	{r7}
 800f4ae:	b085      	sub	sp, #20
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
 800f4b4:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	73fb      	strb	r3, [r7, #15]
 800f4ba:	7bfb      	ldrb	r3, [r7, #15]
 800f4bc:	2b03      	cmp	r3, #3
 800f4be:	d815      	bhi.n	800f4ec <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x40>
                        if(!btService[i]) {
 800f4c0:	7bfb      	ldrb	r3, [r7, #15]
 800f4c2:	687a      	ldr	r2, [r7, #4]
 800f4c4:	3318      	adds	r3, #24
 800f4c6:	009b      	lsls	r3, r3, #2
 800f4c8:	4413      	add	r3, r2
 800f4ca:	685b      	ldr	r3, [r3, #4]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d109      	bne.n	800f4e4 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x38>
                                btService[i] = pService;
 800f4d0:	7bfb      	ldrb	r3, [r7, #15]
 800f4d2:	687a      	ldr	r2, [r7, #4]
 800f4d4:	3318      	adds	r3, #24
 800f4d6:	009b      	lsls	r3, r3, #2
 800f4d8:	4413      	add	r3, r2
 800f4da:	683a      	ldr	r2, [r7, #0]
 800f4dc:	605a      	str	r2, [r3, #4]
                                return i; // Return ID
 800f4de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4e2:	e005      	b.n	800f4f0 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x44>
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800f4e4:	7bfb      	ldrb	r3, [r7, #15]
 800f4e6:	3301      	adds	r3, #1
 800f4e8:	73fb      	strb	r3, [r7, #15]
 800f4ea:	e7e6      	b.n	800f4ba <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0xe>
                return -1; // Error registering BluetoothService
 800f4ec:	f04f 33ff 	mov.w	r3, #4294967295
        };
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3714      	adds	r7, #20
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fa:	4770      	bx	lr

0800f4fc <_ZN16BluetoothServiceC1EP3BTD>:
};

/** All Bluetooth services should inherit this class. */
class BluetoothService {
public:
        BluetoothService(BTD *p) : pBtd(p) {
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b082      	sub	sp, #8
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
 800f504:	6039      	str	r1, [r7, #0]
 800f506:	4a0a      	ldr	r2, [pc, #40]	; (800f530 <_ZN16BluetoothServiceC1EP3BTD+0x34>)
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	601a      	str	r2, [r3, #0]
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	683a      	ldr	r2, [r7, #0]
 800f510:	609a      	str	r2, [r3, #8]
                if(pBtd)
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	689b      	ldr	r3, [r3, #8]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d005      	beq.n	800f526 <_ZN16BluetoothServiceC1EP3BTD+0x2a>
                        pBtd->registerBluetoothService(this); // Register it as a Bluetooth service
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	689b      	ldr	r3, [r3, #8]
 800f51e:	6879      	ldr	r1, [r7, #4]
 800f520:	4618      	mov	r0, r3
 800f522:	f7ff ffc3 	bl	800f4ac <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>
        };
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	4618      	mov	r0, r3
 800f52a:	3708      	adds	r7, #8
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}
 800f530:	0801296c 	.word	0x0801296c

0800f534 <_ZN16BluetoothService14checkHciHandleEPht>:
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void onInit() = 0;

        /** Used to check if the incoming L2CAP data matches the HCI Handle */
        bool checkHciHandle(uint8_t *buf, uint16_t handle) {
 800f534:	b480      	push	{r7}
 800f536:	b085      	sub	sp, #20
 800f538:	af00      	add	r7, sp, #0
 800f53a:	60f8      	str	r0, [r7, #12]
 800f53c:	60b9      	str	r1, [r7, #8]
 800f53e:	4613      	mov	r3, r2
 800f540:	80fb      	strh	r3, [r7, #6]
                return (buf[0] == (handle & 0xFF)) && (buf[1] == ((handle >> 8) | 0x20));
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	781b      	ldrb	r3, [r3, #0]
 800f546:	461a      	mov	r2, r3
 800f548:	88fb      	ldrh	r3, [r7, #6]
 800f54a:	b2db      	uxtb	r3, r3
 800f54c:	429a      	cmp	r2, r3
 800f54e:	d10b      	bne.n	800f568 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	3301      	adds	r3, #1
 800f554:	781b      	ldrb	r3, [r3, #0]
 800f556:	461a      	mov	r2, r3
 800f558:	88fb      	ldrh	r3, [r7, #6]
 800f55a:	121b      	asrs	r3, r3, #8
 800f55c:	f043 0320 	orr.w	r3, r3, #32
 800f560:	429a      	cmp	r2, r3
 800f562:	d101      	bne.n	800f568 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800f564:	2301      	movs	r3, #1
 800f566:	e000      	b.n	800f56a <_ZN16BluetoothService14checkHciHandleEPht+0x36>
 800f568:	2300      	movs	r3, #0
        }
 800f56a:	4618      	mov	r0, r3
 800f56c:	3714      	adds	r7, #20
 800f56e:	46bd      	mov	sp, r7
 800f570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f574:	4770      	bx	lr

0800f576 <_ZN5BTHID14ParseBTHIDDataEhPh>:
        virtual void ParseBTHIDData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 800f576:	b480      	push	{r7}
 800f578:	b085      	sub	sp, #20
 800f57a:	af00      	add	r7, sp, #0
 800f57c:	60f8      	str	r0, [r7, #12]
 800f57e:	460b      	mov	r3, r1
 800f580:	607a      	str	r2, [r7, #4]
 800f582:	72fb      	strb	r3, [r7, #11]
                return;
 800f584:	bf00      	nop
        };
 800f586:	3714      	adds	r7, #20
 800f588:	46bd      	mov	sp, r7
 800f58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58e:	4770      	bx	lr

0800f590 <_ZN5BTHID11OnInitBTHIDEv>:
        /** Called when a device is connected */
        virtual void OnInitBTHID() {
 800f590:	b480      	push	{r7}
 800f592:	b083      	sub	sp, #12
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
                return;
 800f598:	bf00      	nop
        };
 800f59a:	370c      	adds	r7, #12
 800f59c:	46bd      	mov	sp, r7
 800f59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a2:	4770      	bx	lr

0800f5a4 <_ZN5BTHID10ResetBTHIDEv>:
        /** Used to reset any buffers in the class that inherits this */
        virtual void ResetBTHID() {
 800f5a4:	b480      	push	{r7}
 800f5a6:	b083      	sub	sp, #12
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
                return;
 800f5ac:	bf00      	nop
        }
 800f5ae:	370c      	adds	r7, #12
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b6:	4770      	bx	lr

0800f5b8 <_ZN5BTHIDC1EP3BTDbPKc>:
#include "BTHID.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the HID device

BTHID::BTHID(BTD *p, bool pair, const char *pin) :
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b086      	sub	sp, #24
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	60f8      	str	r0, [r7, #12]
 800f5c0:	60b9      	str	r1, [r7, #8]
 800f5c2:	603b      	str	r3, [r7, #0]
 800f5c4:	4613      	mov	r3, r2
 800f5c6:	71fb      	strb	r3, [r7, #7]
BluetoothService(p), // Pointer to USB class instance - mandatory
protocolMode(USB_HID_BOOT_PROTOCOL) {
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	68b9      	ldr	r1, [r7, #8]
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f7ff ff95 	bl	800f4fc <_ZN16BluetoothServiceC1EP3BTD>
 800f5d2:	4a1f      	ldr	r2, [pc, #124]	; (800f650 <_ZN5BTHIDC1EP3BTDbPKc+0x98>)
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	601a      	str	r2, [r3, #0]
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	75fb      	strb	r3, [r7, #23]
 800f5e4:	7dfb      	ldrb	r3, [r7, #23]
 800f5e6:	2b01      	cmp	r3, #1
 800f5e8:	d809      	bhi.n	800f5fe <_ZN5BTHIDC1EP3BTDbPKc+0x46>
                pRptParser[i] = NULL;
 800f5ea:	7dfa      	ldrb	r2, [r7, #23]
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	3208      	adds	r2, #8
 800f5f0:	2100      	movs	r1, #0
 800f5f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800f5f6:	7dfb      	ldrb	r3, [r7, #23]
 800f5f8:	3301      	adds	r3, #1
 800f5fa:	75fb      	strb	r3, [r7, #23]
 800f5fc:	e7f2      	b.n	800f5e4 <_ZN5BTHIDC1EP3BTDbPKc+0x2c>

        pBtd->pairWithHIDDevice = pair;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	689b      	ldr	r3, [r3, #8]
 800f602:	79fa      	ldrb	r2, [r7, #7]
 800f604:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        pBtd->btdPin = pin;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	689b      	ldr	r3, [r3, #8]
 800f60c:	683a      	ldr	r2, [r7, #0]
 800f60e:	611a      	str	r2, [r3, #16]

        /* Set device cid for the control and intterrupt channelse - LSB */
        sdp_dcid[0] = 0x50; // 0x0050
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	2250      	movs	r2, #80	; 0x50
 800f614:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        sdp_dcid[1] = 0x00;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	2200      	movs	r2, #0
 800f61c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        control_dcid[0] = 0x70; // 0x0070
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	2270      	movs	r2, #112	; 0x70
 800f624:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        control_dcid[1] = 0x00;
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	2200      	movs	r2, #0
 800f62c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        interrupt_dcid[0] = 0x71; // 0x0071
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	2271      	movs	r2, #113	; 0x71
 800f634:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        interrupt_dcid[1] = 0x00;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	2200      	movs	r2, #0
 800f63c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

        Reset();
 800f640:	68f8      	ldr	r0, [r7, #12]
 800f642:	f000 f807 	bl	800f654 <_ZN5BTHID5ResetEv>
}
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	4618      	mov	r0, r3
 800f64a:	3718      	adds	r7, #24
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}
 800f650:	08012940 	.word	0x08012940

0800f654 <_ZN5BTHID5ResetEv>:

void BTHID::Reset() {
 800f654:	b580      	push	{r7, lr}
 800f656:	b082      	sub	sp, #8
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
        connected = false;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2200      	movs	r2, #0
 800f660:	755a      	strb	r2, [r3, #21]
        activeConnection = false;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2200      	movs	r2, #0
 800f666:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDPConnected = false;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	2200      	movs	r2, #0
 800f66e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        l2cap_event_flag = 0; // Reset flags
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2200      	movs	r2, #0
 800f676:	611a      	str	r2, [r3, #16]
        l2cap_sdp_state = L2CAP_SDP_WAIT;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	220a      	movs	r2, #10
 800f67c:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_WAIT;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2200      	movs	r2, #0
 800f682:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ResetBTHID();
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	3320      	adds	r3, #32
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	6878      	ldr	r0, [r7, #4]
 800f690:	4798      	blx	r3
}
 800f692:	bf00      	nop
 800f694:	3708      	adds	r7, #8
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}

0800f69a <_ZN5BTHID10disconnectEv>:

void BTHID::disconnect() { // Use this void to disconnect the device
 800f69a:	b590      	push	{r4, r7, lr}
 800f69c:	b085      	sub	sp, #20
 800f69e:	af02      	add	r7, sp, #8
 800f6a0:	6078      	str	r0, [r7, #4]
        if(SDPConnected)
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d014      	beq.n	800f6d6 <_ZN5BTHID10disconnectEv+0x3c>
                pBtd->l2cap_disconnection_request(hci_handle, ++identifier, sdp_scid, sdp_dcid);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	6898      	ldr	r0, [r3, #8]
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	8999      	ldrh	r1, [r3, #12]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	7d1b      	ldrb	r3, [r3, #20]
 800f6b8:	3301      	adds	r3, #1
 800f6ba:	b2da      	uxtb	r2, r3
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	751a      	strb	r2, [r3, #20]
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	7d1a      	ldrb	r2, [r3, #20]
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f103 041b 	add.w	r4, r3, #27
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	336f      	adds	r3, #111	; 0x6f
 800f6ce:	9300      	str	r3, [sp, #0]
 800f6d0:	4623      	mov	r3, r4
 800f6d2:	f7ff f9c5 	bl	800ea60 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        // First the HID interrupt channel has to be disconnected, then the HID control channel and finally the HCI connection
        pBtd->l2cap_disconnection_request(hci_handle, ++identifier, interrupt_scid, interrupt_dcid);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6898      	ldr	r0, [r3, #8]
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	8999      	ldrh	r1, [r3, #12]
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	7d1b      	ldrb	r3, [r3, #20]
 800f6e2:	3301      	adds	r3, #1
 800f6e4:	b2da      	uxtb	r2, r3
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	751a      	strb	r2, [r3, #20]
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	7d1a      	ldrb	r2, [r3, #20]
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	f103 0418 	add.w	r4, r3, #24
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	336d      	adds	r3, #109	; 0x6d
 800f6f8:	9300      	str	r3, [sp, #0]
 800f6fa:	4623      	mov	r3, r4
 800f6fc:	f7ff f9b0 	bl	800ea60 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        Reset();
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	3308      	adds	r3, #8
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	6878      	ldr	r0, [r7, #4]
 800f70a:	4798      	blx	r3
        l2cap_sdp_state = L2CAP_DISCONNECT_RESPONSE;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	220e      	movs	r2, #14
 800f710:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_INTERRUPT_DISCONNECT;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	2209      	movs	r2, #9
 800f716:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 800f71a:	bf00      	nop
 800f71c:	370c      	adds	r7, #12
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd90      	pop	{r4, r7, pc}

0800f722 <_ZN5BTHID7ACLDataEPh>:

void BTHID::ACLData(uint8_t* l2capinbuf) {
 800f722:	b590      	push	{r4, r7, lr}
 800f724:	b087      	sub	sp, #28
 800f726:	af02      	add	r7, sp, #8
 800f728:	6078      	str	r0, [r7, #4]
 800f72a:	6039      	str	r1, [r7, #0]
        if(!connected) {
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	7d5b      	ldrb	r3, [r3, #21]
 800f730:	f083 0301 	eor.w	r3, r3, #1
 800f734:	b2db      	uxtb	r3, r3
 800f736:	2b00      	cmp	r3, #0
 800f738:	d023      	beq.n	800f782 <_ZN5BTHID7ACLDataEPh+0x60>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	3308      	adds	r3, #8
 800f73e:	781b      	ldrb	r3, [r3, #0]
 800f740:	2b02      	cmp	r3, #2
 800f742:	d11e      	bne.n	800f782 <_ZN5BTHID7ACLDataEPh+0x60>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM && !pBtd->sdpConnectionClaimed) {
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	330c      	adds	r3, #12
 800f748:	781b      	ldrb	r3, [r3, #0]
 800f74a:	461a      	mov	r2, r3
 800f74c:	683b      	ldr	r3, [r7, #0]
 800f74e:	330d      	adds	r3, #13
 800f750:	781b      	ldrb	r3, [r3, #0]
 800f752:	021b      	lsls	r3, r3, #8
 800f754:	4313      	orrs	r3, r2
 800f756:	2b01      	cmp	r3, #1
 800f758:	d113      	bne.n	800f782 <_ZN5BTHID7ACLDataEPh+0x60>
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	689b      	ldr	r3, [r3, #8]
 800f75e:	7a9b      	ldrb	r3, [r3, #10]
 800f760:	f083 0301 	eor.w	r3, r3, #1
 800f764:	b2db      	uxtb	r3, r3
 800f766:	2b00      	cmp	r3, #0
 800f768:	d00b      	beq.n	800f782 <_ZN5BTHID7ACLDataEPh+0x60>
                                pBtd->sdpConnectionClaimed = true;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	689b      	ldr	r3, [r3, #8]
 800f76e:	2201      	movs	r2, #1
 800f770:	729a      	strb	r2, [r3, #10]
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	689b      	ldr	r3, [r3, #8]
 800f776:	8b5a      	ldrh	r2, [r3, #26]
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	819a      	strh	r2, [r3, #12]
                                l2cap_sdp_state = L2CAP_SDP_WAIT; // Reset state
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	220a      	movs	r2, #10
 800f780:	769a      	strb	r2, [r3, #26]
                        }
                }
        }

        if(!pBtd->l2capConnectionClaimed && pBtd->incomingHIDDevice && !connected && !activeConnection) {
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	689b      	ldr	r3, [r3, #8]
 800f786:	7a5b      	ldrb	r3, [r3, #9]
 800f788:	f083 0301 	eor.w	r3, r3, #1
 800f78c:	b2db      	uxtb	r3, r3
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d03a      	beq.n	800f808 <_ZN5BTHID7ACLDataEPh+0xe6>
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	689b      	ldr	r3, [r3, #8]
 800f796:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d034      	beq.n	800f808 <_ZN5BTHID7ACLDataEPh+0xe6>
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	7d5b      	ldrb	r3, [r3, #21]
 800f7a2:	f083 0301 	eor.w	r3, r3, #1
 800f7a6:	b2db      	uxtb	r3, r3
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d02d      	beq.n	800f808 <_ZN5BTHID7ACLDataEPh+0xe6>
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800f7b2:	f083 0301 	eor.w	r3, r3, #1
 800f7b6:	b2db      	uxtb	r3, r3
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d025      	beq.n	800f808 <_ZN5BTHID7ACLDataEPh+0xe6>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	3308      	adds	r3, #8
 800f7c0:	781b      	ldrb	r3, [r3, #0]
 800f7c2:	2b02      	cmp	r3, #2
 800f7c4:	d120      	bne.n	800f808 <_ZN5BTHID7ACLDataEPh+0xe6>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	330c      	adds	r3, #12
 800f7ca:	781b      	ldrb	r3, [r3, #0]
 800f7cc:	461a      	mov	r2, r3
 800f7ce:	683b      	ldr	r3, [r7, #0]
 800f7d0:	330d      	adds	r3, #13
 800f7d2:	781b      	ldrb	r3, [r3, #0]
 800f7d4:	021b      	lsls	r3, r3, #8
 800f7d6:	4313      	orrs	r3, r2
 800f7d8:	2b11      	cmp	r3, #17
 800f7da:	d115      	bne.n	800f808 <_ZN5BTHID7ACLDataEPh+0xe6>
                                pBtd->incomingHIDDevice = false;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	689b      	ldr	r3, [r3, #8]
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                pBtd->l2capConnectionClaimed = true; // Claim that the incoming connection belongs to this service
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	689b      	ldr	r3, [r3, #8]
 800f7ea:	2201      	movs	r2, #1
 800f7ec:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2201      	movs	r2, #1
 800f7f2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	689b      	ldr	r3, [r3, #8]
 800f7fa:	8b5a      	ldrh	r2, [r3, #26]
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	819a      	strh	r2, [r3, #12]
                                l2cap_state = L2CAP_WAIT;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2200      	movs	r2, #0
 800f804:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                }
        }

        if(checkHciHandle(l2capinbuf, hci_handle)) { // acl_handle_ok
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	899b      	ldrh	r3, [r3, #12]
 800f80e:	461a      	mov	r2, r3
 800f810:	6839      	ldr	r1, [r7, #0]
 800f812:	f7ff fe8f 	bl	800f534 <_ZN16BluetoothService14checkHciHandleEPht>
 800f816:	4603      	mov	r3, r0
 800f818:	2b00      	cmp	r3, #0
 800f81a:	f000 83d9 	beq.w	800ffd0 <_ZN5BTHID7ACLDataEPh+0x8ae>
                if((l2capinbuf[6] | (l2capinbuf[7] << 8)) == 0x0001U) { // l2cap_control - Channel ID for ACL-U
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	3306      	adds	r3, #6
 800f822:	781b      	ldrb	r3, [r3, #0]
 800f824:	461a      	mov	r2, r3
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	3307      	adds	r3, #7
 800f82a:	781b      	ldrb	r3, [r3, #0]
 800f82c:	021b      	lsls	r3, r3, #8
 800f82e:	4313      	orrs	r3, r2
 800f830:	2b01      	cmp	r3, #1
 800f832:	f040 829b 	bne.w	800fd6c <_ZN5BTHID7ACLDataEPh+0x64a>
                        if(l2capinbuf[8] == L2CAP_CMD_COMMAND_REJECT) {
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	3308      	adds	r3, #8
 800f83a:	781b      	ldrb	r3, [r3, #0]
 800f83c:	2b01      	cmp	r3, #1
 800f83e:	f000 83c1 	beq.w	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[15], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
#endif
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_RESPONSE) {
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	3308      	adds	r3, #8
 800f846:	781b      	ldrb	r3, [r3, #0]
 800f848:	2b03      	cmp	r3, #3
 800f84a:	f040 808d 	bne.w	800f968 <_ZN5BTHID7ACLDataEPh+0x246>
                                if(((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) && ((l2capinbuf[18] | (l2capinbuf[19] << 8)) == SUCCESSFUL)) { // Success
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	3310      	adds	r3, #16
 800f852:	781b      	ldrb	r3, [r3, #0]
 800f854:	461a      	mov	r2, r3
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	3311      	adds	r3, #17
 800f85a:	781b      	ldrb	r3, [r3, #0]
 800f85c:	021b      	lsls	r3, r3, #8
 800f85e:	4313      	orrs	r3, r2
 800f860:	2b00      	cmp	r3, #0
 800f862:	f040 83af 	bne.w	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	3312      	adds	r3, #18
 800f86a:	781b      	ldrb	r3, [r3, #0]
 800f86c:	461a      	mov	r2, r3
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	3313      	adds	r3, #19
 800f872:	781b      	ldrb	r3, [r3, #0]
 800f874:	021b      	lsls	r3, r3, #8
 800f876:	4313      	orrs	r3, r2
 800f878:	2b00      	cmp	r3, #0
 800f87a:	f040 83a3 	bne.w	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[14] == sdp_dcid[0] && l2capinbuf[15] == sdp_dcid[1]) {
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	330e      	adds	r3, #14
 800f882:	781a      	ldrb	r2, [r3, #0]
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800f88a:	429a      	cmp	r2, r3
 800f88c:	d124      	bne.n	800f8d8 <_ZN5BTHID7ACLDataEPh+0x1b6>
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	330f      	adds	r3, #15
 800f892:	781a      	ldrb	r2, [r3, #0]
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800f89a:	429a      	cmp	r2, r3
 800f89c:	d11c      	bne.n	800f8d8 <_ZN5BTHID7ACLDataEPh+0x1b6>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	7a5a      	ldrb	r2, [r3, #9]
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	751a      	strb	r2, [r3, #20]
                                                sdp_scid[0] = l2capinbuf[12];
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	7b1a      	ldrb	r2, [r3, #12]
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	76da      	strb	r2, [r3, #27]
                                                sdp_scid[1] = l2capinbuf[13];
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	7b5a      	ldrb	r2, [r3, #13]
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	771a      	strb	r2, [r3, #28]
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nSend SDP Config Request"), 0x80);
#endif
                                                identifier++;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	7d1b      	ldrb	r3, [r3, #20]
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	b2da      	uxtb	r2, r3
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	751a      	strb	r2, [r3, #20]
                                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	6898      	ldr	r0, [r3, #8]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	8999      	ldrh	r1, [r3, #12]
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	7d1a      	ldrb	r2, [r3, #20]
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	331b      	adds	r3, #27
 800f8d2:	f7ff f827 	bl	800e924 <_ZN3BTD20l2cap_config_requestEthPh>
 800f8d6:	e375      	b.n	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == control_dcid[0] && l2capinbuf[15] == control_dcid[1]) {
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	330e      	adds	r3, #14
 800f8dc:	781a      	ldrb	r2, [r3, #0]
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d11a      	bne.n	800f91e <_ZN5BTHID7ACLDataEPh+0x1fc>
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	330f      	adds	r3, #15
 800f8ec:	781a      	ldrb	r2, [r3, #0]
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	d112      	bne.n	800f91e <_ZN5BTHID7ACLDataEPh+0x1fc>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	7a5a      	ldrb	r2, [r3, #9]
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	751a      	strb	r2, [r3, #20]
                                                control_scid[0] = l2capinbuf[12];
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	7b1a      	ldrb	r2, [r3, #12]
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	759a      	strb	r2, [r3, #22]
                                                control_scid[1] = l2capinbuf[13];
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	7b5a      	ldrb	r2, [r3, #13]
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	75da      	strb	r2, [r3, #23]
                                                l2cap_set_flag(L2CAP_FLAG_CONTROL_CONNECTED);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	691b      	ldr	r3, [r3, #16]
 800f914:	f043 0204 	orr.w	r2, r3, #4
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	611a      	str	r2, [r3, #16]
 800f91c:	e352      	b.n	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == interrupt_dcid[0] && l2capinbuf[15] == interrupt_dcid[1]) {
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	330e      	adds	r3, #14
 800f922:	781a      	ldrb	r2, [r3, #0]
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800f92a:	429a      	cmp	r2, r3
 800f92c:	f040 834a 	bne.w	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	330f      	adds	r3, #15
 800f934:	781a      	ldrb	r2, [r3, #0]
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800f93c:	429a      	cmp	r2, r3
 800f93e:	f040 8341 	bne.w	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	7a5a      	ldrb	r2, [r3, #9]
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	751a      	strb	r2, [r3, #20]
                                                interrupt_scid[0] = l2capinbuf[12];
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	7b1a      	ldrb	r2, [r3, #12]
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	761a      	strb	r2, [r3, #24]
                                                interrupt_scid[1] = l2capinbuf[13];
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	7b5a      	ldrb	r2, [r3, #13]
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	765a      	strb	r2, [r3, #25]
                                                l2cap_set_flag(L2CAP_FLAG_INTERRUPT_CONNECTED);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	691b      	ldr	r3, [r3, #16]
 800f95e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	611a      	str	r2, [r3, #16]
 800f966:	e32d      	b.n	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	3308      	adds	r3, #8
 800f96c:	781b      	ldrb	r3, [r3, #0]
 800f96e:	2b02      	cmp	r3, #2
 800f970:	d15a      	bne.n	800fa28 <_ZN5BTHID7ACLDataEPh+0x306>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
                                Notify(PSTR(" Identifier: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[9], 0x80);
#endif
                                if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM) {
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	330c      	adds	r3, #12
 800f976:	781b      	ldrb	r3, [r3, #0]
 800f978:	461a      	mov	r2, r3
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	330d      	adds	r3, #13
 800f97e:	781b      	ldrb	r3, [r3, #0]
 800f980:	021b      	lsls	r3, r3, #8
 800f982:	4313      	orrs	r3, r2
 800f984:	2b01      	cmp	r3, #1
 800f986:	d112      	bne.n	800f9ae <_ZN5BTHID7ACLDataEPh+0x28c>
                                        identifier = l2capinbuf[9];
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	7a5a      	ldrb	r2, [r3, #9]
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	751a      	strb	r2, [r3, #20]
                                        sdp_scid[0] = l2capinbuf[14];
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	7b9a      	ldrb	r2, [r3, #14]
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	76da      	strb	r2, [r3, #27]
                                        sdp_scid[1] = l2capinbuf[15];
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	7bda      	ldrb	r2, [r3, #15]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	771a      	strb	r2, [r3, #28]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	691b      	ldr	r3, [r3, #16]
 800f9a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	611a      	str	r2, [r3, #16]
 800f9ac:	e30a      	b.n	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	330c      	adds	r3, #12
 800f9b2:	781b      	ldrb	r3, [r3, #0]
 800f9b4:	461a      	mov	r2, r3
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	330d      	adds	r3, #13
 800f9ba:	781b      	ldrb	r3, [r3, #0]
 800f9bc:	021b      	lsls	r3, r3, #8
 800f9be:	4313      	orrs	r3, r2
 800f9c0:	2b11      	cmp	r3, #17
 800f9c2:	d112      	bne.n	800f9ea <_ZN5BTHID7ACLDataEPh+0x2c8>
                                        identifier = l2capinbuf[9];
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	7a5a      	ldrb	r2, [r3, #9]
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	751a      	strb	r2, [r3, #20]
                                        control_scid[0] = l2capinbuf[14];
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	7b9a      	ldrb	r2, [r3, #14]
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	759a      	strb	r2, [r3, #22]
                                        control_scid[1] = l2capinbuf[15];
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	7bda      	ldrb	r2, [r3, #15]
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	75da      	strb	r2, [r3, #23]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST);
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	691b      	ldr	r3, [r3, #16]
 800f9e0:	f043 0201 	orr.w	r2, r3, #1
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	611a      	str	r2, [r3, #16]
 800f9e8:	e2ec      	b.n	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_INTR_PSM) {
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	330c      	adds	r3, #12
 800f9ee:	781b      	ldrb	r3, [r3, #0]
 800f9f0:	461a      	mov	r2, r3
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	330d      	adds	r3, #13
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	021b      	lsls	r3, r3, #8
 800f9fa:	4313      	orrs	r3, r2
 800f9fc:	2b13      	cmp	r3, #19
 800f9fe:	f040 82e1 	bne.w	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        identifier = l2capinbuf[9];
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	7a5a      	ldrb	r2, [r3, #9]
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	751a      	strb	r2, [r3, #20]
                                        interrupt_scid[0] = l2capinbuf[14];
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	7b9a      	ldrb	r2, [r3, #14]
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	761a      	strb	r2, [r3, #24]
                                        interrupt_scid[1] = l2capinbuf[15];
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	7bda      	ldrb	r2, [r3, #15]
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	765a      	strb	r2, [r3, #25]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	691b      	ldr	r3, [r3, #16]
 800fa1e:	f043 0210 	orr.w	r2, r3, #16
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	611a      	str	r2, [r3, #16]
 800fa26:	e2cd      	b.n	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_RESPONSE) {
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	3308      	adds	r3, #8
 800fa2c:	781b      	ldrb	r3, [r3, #0]
 800fa2e:	2b05      	cmp	r3, #5
 800fa30:	d15e      	bne.n	800faf0 <_ZN5BTHID7ACLDataEPh+0x3ce>
                                if((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) { // Success
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	3310      	adds	r3, #16
 800fa36:	781b      	ldrb	r3, [r3, #0]
 800fa38:	461a      	mov	r2, r3
 800fa3a:	683b      	ldr	r3, [r7, #0]
 800fa3c:	3311      	adds	r3, #17
 800fa3e:	781b      	ldrb	r3, [r3, #0]
 800fa40:	021b      	lsls	r3, r3, #8
 800fa42:	4313      	orrs	r3, r2
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	f040 82bd 	bne.w	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	330c      	adds	r3, #12
 800fa4e:	781a      	ldrb	r2, [r3, #0]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800fa56:	429a      	cmp	r2, r3
 800fa58:	d112      	bne.n	800fa80 <_ZN5BTHID7ACLDataEPh+0x35e>
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	330d      	adds	r3, #13
 800fa5e:	781a      	ldrb	r2, [r3, #0]
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fa66:	429a      	cmp	r2, r3
 800fa68:	d10a      	bne.n	800fa80 <_ZN5BTHID7ACLDataEPh+0x35e>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800fa6a:	683b      	ldr	r3, [r7, #0]
 800fa6c:	7a5a      	ldrb	r2, [r3, #9]
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS);
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	691b      	ldr	r3, [r3, #16]
 800fa76:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	611a      	str	r2, [r3, #16]
 800fa7e:	e2a1      	b.n	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	330c      	adds	r3, #12
 800fa84:	781a      	ldrb	r2, [r3, #0]
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800fa8c:	429a      	cmp	r2, r3
 800fa8e:	d112      	bne.n	800fab6 <_ZN5BTHID7ACLDataEPh+0x394>
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	330d      	adds	r3, #13
 800fa94:	781a      	ldrb	r2, [r3, #0]
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	d10a      	bne.n	800fab6 <_ZN5BTHID7ACLDataEPh+0x394>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800faa0:	683b      	ldr	r3, [r7, #0]
 800faa2:	7a5a      	ldrb	r2, [r3, #9]
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	691b      	ldr	r3, [r3, #16]
 800faac:	f043 0202 	orr.w	r2, r3, #2
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	611a      	str	r2, [r3, #16]
 800fab4:	e286      	b.n	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	330c      	adds	r3, #12
 800faba:	781a      	ldrb	r2, [r3, #0]
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800fac2:	429a      	cmp	r2, r3
 800fac4:	f040 827e 	bne.w	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	330d      	adds	r3, #13
 800facc:	781a      	ldrb	r2, [r3, #0]
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800fad4:	429a      	cmp	r2, r3
 800fad6:	f040 8275 	bne.w	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800fada:	683b      	ldr	r3, [r7, #0]
 800fadc:	7a5a      	ldrb	r2, [r3, #9]
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	691b      	ldr	r3, [r3, #16]
 800fae6:	f043 0220 	orr.w	r2, r3, #32
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	611a      	str	r2, [r3, #16]
 800faee:	e269      	b.n	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_REQUEST) {
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	3308      	adds	r3, #8
 800faf4:	781b      	ldrb	r3, [r3, #0]
 800faf6:	2b04      	cmp	r3, #4
 800faf8:	d155      	bne.n	800fba6 <_ZN5BTHID7ACLDataEPh+0x484>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	330c      	adds	r3, #12
 800fafe:	781a      	ldrb	r2, [r3, #0]
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800fb06:	429a      	cmp	r2, r3
 800fb08:	d113      	bne.n	800fb32 <_ZN5BTHID7ACLDataEPh+0x410>
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	330d      	adds	r3, #13
 800fb0e:	781a      	ldrb	r2, [r3, #0]
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fb16:	429a      	cmp	r2, r3
 800fb18:	d10b      	bne.n	800fb32 <_ZN5BTHID7ACLDataEPh+0x410>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nSDP Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], sdp_scid);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6898      	ldr	r0, [r3, #8]
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	8999      	ldrh	r1, [r3, #12]
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	3309      	adds	r3, #9
 800fb26:	781a      	ldrb	r2, [r3, #0]
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	331b      	adds	r3, #27
 800fb2c:	f7fe ff45 	bl	800e9ba <_ZN3BTD21l2cap_config_responseEthPh>
 800fb30:	e248      	b.n	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	330c      	adds	r3, #12
 800fb36:	781a      	ldrb	r2, [r3, #0]
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800fb3e:	429a      	cmp	r2, r3
 800fb40:	d113      	bne.n	800fb6a <_ZN5BTHID7ACLDataEPh+0x448>
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	330d      	adds	r3, #13
 800fb46:	781a      	ldrb	r2, [r3, #0]
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800fb4e:	429a      	cmp	r2, r3
 800fb50:	d10b      	bne.n	800fb6a <_ZN5BTHID7ACLDataEPh+0x448>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Control Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], control_scid);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6898      	ldr	r0, [r3, #8]
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	8999      	ldrh	r1, [r3, #12]
 800fb5a:	683b      	ldr	r3, [r7, #0]
 800fb5c:	3309      	adds	r3, #9
 800fb5e:	781a      	ldrb	r2, [r3, #0]
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	3316      	adds	r3, #22
 800fb64:	f7fe ff29 	bl	800e9ba <_ZN3BTD21l2cap_config_responseEthPh>
 800fb68:	e22c      	b.n	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	330c      	adds	r3, #12
 800fb6e:	781a      	ldrb	r2, [r3, #0]
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800fb76:	429a      	cmp	r2, r3
 800fb78:	f040 8224 	bne.w	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	330d      	adds	r3, #13
 800fb80:	781a      	ldrb	r2, [r3, #0]
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800fb88:	429a      	cmp	r2, r3
 800fb8a:	f040 821b 	bne.w	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Interrupt Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], interrupt_scid);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6898      	ldr	r0, [r3, #8]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	8999      	ldrh	r1, [r3, #12]
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	3309      	adds	r3, #9
 800fb9a:	781a      	ldrb	r2, [r3, #0]
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	3318      	adds	r3, #24
 800fba0:	f7fe ff0b 	bl	800e9ba <_ZN3BTD21l2cap_config_responseEthPh>
 800fba4:	e20e      	b.n	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_REQUEST) {
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	3308      	adds	r3, #8
 800fbaa:	781b      	ldrb	r3, [r3, #0]
 800fbac:	2b06      	cmp	r3, #6
 800fbae:	d170      	bne.n	800fc92 <_ZN5BTHID7ACLDataEPh+0x570>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	330c      	adds	r3, #12
 800fbb4:	781a      	ldrb	r2, [r3, #0]
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800fbbc:	429a      	cmp	r2, r3
 800fbbe:	d112      	bne.n	800fbe6 <_ZN5BTHID7ACLDataEPh+0x4c4>
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	330d      	adds	r3, #13
 800fbc4:	781a      	ldrb	r2, [r3, #0]
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fbcc:	429a      	cmp	r2, r3
 800fbce:	d10a      	bne.n	800fbe6 <_ZN5BTHID7ACLDataEPh+0x4c4>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	7a5a      	ldrb	r2, [r3, #9]
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST);
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	691b      	ldr	r3, [r3, #16]
 800fbdc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	611a      	str	r2, [r3, #16]
 800fbe4:	e1ee      	b.n	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	330c      	adds	r3, #12
 800fbea:	781a      	ldrb	r2, [r3, #0]
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800fbf2:	429a      	cmp	r2, r3
 800fbf4:	d121      	bne.n	800fc3a <_ZN5BTHID7ACLDataEPh+0x518>
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	330d      	adds	r3, #13
 800fbfa:	781a      	ldrb	r2, [r3, #0]
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800fc02:	429a      	cmp	r2, r3
 800fc04:	d119      	bne.n	800fc3a <_ZN5BTHID7ACLDataEPh+0x518>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fc06:	683b      	ldr	r3, [r7, #0]
 800fc08:	7a5a      	ldrb	r2, [r3, #9]
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, control_dcid, control_scid);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	6898      	ldr	r0, [r3, #8]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	8999      	ldrh	r1, [r3, #12]
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	7d1a      	ldrb	r2, [r3, #20]
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	3316      	adds	r3, #22
 800fc24:	9300      	str	r3, [sp, #0]
 800fc26:	4623      	mov	r3, r4
 800fc28:	f7fe ff57 	bl	800eada <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	3308      	adds	r3, #8
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	4798      	blx	r3
 800fc38:	e1c4      	b.n	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	330c      	adds	r3, #12
 800fc3e:	781a      	ldrb	r2, [r3, #0]
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800fc46:	429a      	cmp	r2, r3
 800fc48:	f040 81bc 	bne.w	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	330d      	adds	r3, #13
 800fc50:	781a      	ldrb	r2, [r3, #0]
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800fc58:	429a      	cmp	r2, r3
 800fc5a:	f040 81b3 	bne.w	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	7a5a      	ldrb	r2, [r3, #9]
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	6898      	ldr	r0, [r3, #8]
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	8999      	ldrh	r1, [r3, #12]
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	7d1a      	ldrb	r2, [r3, #20]
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	3318      	adds	r3, #24
 800fc7c:	9300      	str	r3, [sp, #0]
 800fc7e:	4623      	mov	r3, r4
 800fc80:	f7fe ff2b 	bl	800eada <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	3308      	adds	r3, #8
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	6878      	ldr	r0, [r7, #4]
 800fc8e:	4798      	blx	r3
 800fc90:	e198      	b.n	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_RESPONSE) {
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	3308      	adds	r3, #8
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	2b07      	cmp	r3, #7
 800fc9a:	d14c      	bne.n	800fd36 <_ZN5BTHID7ACLDataEPh+0x614>
                                if(l2capinbuf[12] == sdp_scid[0] && l2capinbuf[13] == sdp_scid[1]) {
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	330c      	adds	r3, #12
 800fca0:	781a      	ldrb	r2, [r3, #0]
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	7edb      	ldrb	r3, [r3, #27]
 800fca6:	429a      	cmp	r2, r3
 800fca8:	d111      	bne.n	800fcce <_ZN5BTHID7ACLDataEPh+0x5ac>
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	330d      	adds	r3, #13
 800fcae:	781a      	ldrb	r2, [r3, #0]
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	7f1b      	ldrb	r3, [r3, #28]
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d10a      	bne.n	800fcce <_ZN5BTHID7ACLDataEPh+0x5ac>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	7a5a      	ldrb	r2, [r3, #9]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_RESPONSE);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	691b      	ldr	r3, [r3, #16]
 800fcc4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	611a      	str	r2, [r3, #16]
 800fccc:	e17a      	b.n	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_scid[0] && l2capinbuf[13] == control_scid[1]) {
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	330c      	adds	r3, #12
 800fcd2:	781a      	ldrb	r2, [r3, #0]
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	7d9b      	ldrb	r3, [r3, #22]
 800fcd8:	429a      	cmp	r2, r3
 800fcda:	d111      	bne.n	800fd00 <_ZN5BTHID7ACLDataEPh+0x5de>
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	330d      	adds	r3, #13
 800fce0:	781a      	ldrb	r2, [r3, #0]
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	7ddb      	ldrb	r3, [r3, #23]
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d10a      	bne.n	800fd00 <_ZN5BTHID7ACLDataEPh+0x5de>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	7a5a      	ldrb	r2, [r3, #9]
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	691b      	ldr	r3, [r3, #16]
 800fcf6:	f043 0208 	orr.w	r2, r3, #8
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	611a      	str	r2, [r3, #16]
 800fcfe:	e161      	b.n	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_scid[0] && l2capinbuf[13] == interrupt_scid[1]) {
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	330c      	adds	r3, #12
 800fd04:	781a      	ldrb	r2, [r3, #0]
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	7e1b      	ldrb	r3, [r3, #24]
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	f040 815a 	bne.w	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	330d      	adds	r3, #13
 800fd14:	781a      	ldrb	r2, [r3, #0]
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	7e5b      	ldrb	r3, [r3, #25]
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	f040 8152 	bne.w	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	7a5a      	ldrb	r2, [r3, #9]
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	691b      	ldr	r3, [r3, #16]
 800fd2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	611a      	str	r2, [r3, #16]
 800fd34:	e146      	b.n	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_INFORMATION_REQUEST) {
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	3308      	adds	r3, #8
 800fd3a:	781b      	ldrb	r3, [r3, #0]
 800fd3c:	2b0a      	cmp	r3, #10
 800fd3e:	f040 8141 	bne.w	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nInformation request"), 0x80);
#endif
                                identifier = l2capinbuf[9];
 800fd42:	683b      	ldr	r3, [r7, #0]
 800fd44:	7a5a      	ldrb	r2, [r3, #9]
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_information_response(hci_handle, identifier, l2capinbuf[12], l2capinbuf[13]);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	6898      	ldr	r0, [r3, #8]
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	8999      	ldrh	r1, [r3, #12]
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	7d1a      	ldrb	r2, [r3, #20]
 800fd56:	683b      	ldr	r3, [r7, #0]
 800fd58:	330c      	adds	r3, #12
 800fd5a:	781c      	ldrb	r4, [r3, #0]
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	330d      	adds	r3, #13
 800fd60:	781b      	ldrb	r3, [r3, #0]
 800fd62:	9300      	str	r3, [sp, #0]
 800fd64:	4623      	mov	r3, r4
 800fd66:	f7fe fef5 	bl	800eb54 <_ZN3BTD26l2cap_information_responseEthhh>
 800fd6a:	e12b      	b.n	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                identifier = l2capinbuf[9];
                                Notify(PSTR("\r\nL2CAP Unknown Signaling Command: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == sdp_dcid[0] && l2capinbuf[7] == sdp_dcid[1]) { // SDP
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	3306      	adds	r3, #6
 800fd70:	781a      	ldrb	r2, [r3, #0]
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800fd78:	429a      	cmp	r2, r3
 800fd7a:	f040 8087 	bne.w	800fe8c <_ZN5BTHID7ACLDataEPh+0x76a>
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	3307      	adds	r3, #7
 800fd82:	781a      	ldrb	r2, [r3, #0]
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	d17e      	bne.n	800fe8c <_ZN5BTHID7ACLDataEPh+0x76a>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800fd8e:	683b      	ldr	r3, [r7, #0]
 800fd90:	3308      	adds	r3, #8
 800fd92:	781b      	ldrb	r3, [r3, #0]
 800fd94:	2b02      	cmp	r3, #2
 800fd96:	d131      	bne.n	800fdfc <_ZN5BTHID7ACLDataEPh+0x6da>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_SEARCH_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_SEARCH_RESPONSE;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2203      	movs	r2, #3
 800fd9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	7a5a      	ldrb	r2, [r3, #9]
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800fdaa:	683b      	ldr	r3, [r7, #0]
 800fdac:	7a9a      	ldrb	r2, [r3, #10]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2205      	movs	r2, #5
 800fdc0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB TotalServiceRecordCount
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x00; // LSB TotalServiceRecordCount = 0
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                l2capoutbuf[7] = 0x00; // MSB CurrentServiceRecordCount
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // LSB CurrentServiceRecordCount = 0
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	2200      	movs	r2, #0
 800fde0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	2200      	movs	r2, #0
 800fde8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	3328      	adds	r3, #40	; 0x28
 800fdf0:	220a      	movs	r2, #10
 800fdf2:	4619      	mov	r1, r3
 800fdf4:	6878      	ldr	r0, [r7, #4]
 800fdf6:	f000 fb6d 	bl	80104d4 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800fdfa:	e0e0      	b.n	800ffbe <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_ATTRIBUTE_REQUEST) {
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	3308      	adds	r3, #8
 800fe00:	781b      	ldrb	r3, [r3, #0]
 800fe02:	2b04      	cmp	r3, #4
 800fe04:	d131      	bne.n	800fe6a <_ZN5BTHID7ACLDataEPh+0x748>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_ATTRIBUTE_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_ATTRIBUTE_RESPONSE;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2205      	movs	r2, #5
 800fe0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	7a5a      	ldrb	r2, [r3, #9]
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	7a9a      	ldrb	r2, [r3, #10]
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2200      	movs	r2, #0
 800fe26:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	2205      	movs	r2, #5
 800fe2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB AttributeListByteCount
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	2200      	movs	r2, #0
 800fe36:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x02; // LSB AttributeListByteCount = 2
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	2202      	movs	r2, #2
 800fe3e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                // TODO: What to send?
                                l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	2235      	movs	r2, #53	; 0x35
 800fe46:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // Length = 0
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2200      	movs	r2, #0
 800fe56:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	3328      	adds	r3, #40	; 0x28
 800fe5e:	220a      	movs	r2, #10
 800fe60:	4619      	mov	r1, r3
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f000 fb36 	bl	80104d4 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800fe68:	e0a9      	b.n	800ffbe <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST) {
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	3308      	adds	r3, #8
 800fe6e:	781b      	ldrb	r3, [r3, #0]
 800fe70:	2b06      	cmp	r3, #6
 800fe72:	f040 80a4 	bne.w	800ffbe <_ZN5BTHID7ACLDataEPh+0x89c>
                                for(uint8_t i = 0; i < length; i++) {
                                        D_PrintHex<uint8_t > (l2capinbuf[13 + i], 0x80);
                                        Notify(PSTR(" "), 0x80);
                                }
#endif
                                serviceNotSupported(l2capinbuf[9], l2capinbuf[10]); // The service is not supported
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	3309      	adds	r3, #9
 800fe7a:	7819      	ldrb	r1, [r3, #0]
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	330a      	adds	r3, #10
 800fe80:	781b      	ldrb	r3, [r3, #0]
 800fe82:	461a      	mov	r2, r3
 800fe84:	6878      	ldr	r0, [r7, #4]
 800fe86:	f000 fb3f 	bl	8010508 <_ZN5BTHID19serviceNotSupportedEhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800fe8a:	e098      	b.n	800ffbe <_ZN5BTHID7ACLDataEPh+0x89c>
                        else {
                                Notify(PSTR("\r\nUnknown PDU: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == interrupt_dcid[0] && l2capinbuf[7] == interrupt_dcid[1]) { // l2cap_interrupt
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	3306      	adds	r3, #6
 800fe90:	781a      	ldrb	r2, [r3, #0]
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	d162      	bne.n	800ff62 <_ZN5BTHID7ACLDataEPh+0x840>
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	3307      	adds	r3, #7
 800fea0:	781a      	ldrb	r2, [r3, #0]
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800fea8:	429a      	cmp	r2, r3
 800feaa:	d15a      	bne.n	800ff62 <_ZN5BTHID7ACLDataEPh+0x840>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA1) { // HID BT DATA (0xA0) | Report Type (Input 0x01)
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	3308      	adds	r3, #8
 800feb0:	781b      	ldrb	r3, [r3, #0]
 800feb2:	2ba1      	cmp	r3, #161	; 0xa1
 800feb4:	f040 8085 	bne.w	800ffc2 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                lastBtDataInputIntMillis = (uint32_t)millis(); // Store the timestamp of the report
 800feb8:	f7f1 ffc6 	bl	8001e48 <HAL_GetTick>
 800febc:	4602      	mov	r2, r0
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	675a      	str	r2, [r3, #116]	; 0x74

                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	3305      	adds	r3, #5
 800fec6:	781b      	ldrb	r3, [r3, #0]
 800fec8:	021b      	lsls	r3, r3, #8
 800feca:	b21a      	sxth	r2, r3
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	3304      	adds	r3, #4
 800fed0:	781b      	ldrb	r3, [r3, #0]
 800fed2:	b21b      	sxth	r3, r3
 800fed4:	4313      	orrs	r3, r2
 800fed6:	b21b      	sxth	r3, r3
 800fed8:	81fb      	strh	r3, [r7, #14]
                                ParseBTHIDData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	3314      	adds	r3, #20
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	89fa      	ldrh	r2, [r7, #14]
 800fee4:	b2d2      	uxtb	r2, r2
 800fee6:	3a01      	subs	r2, #1
 800fee8:	b2d1      	uxtb	r1, r2
 800feea:	683a      	ldr	r2, [r7, #0]
 800feec:	3209      	adds	r2, #9
 800feee:	6878      	ldr	r0, [r7, #4]
 800fef0:	4798      	blx	r3

                                switch(l2capinbuf[9]) { // Report ID
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	3309      	adds	r3, #9
 800fef6:	781b      	ldrb	r3, [r3, #0]
 800fef8:	2b01      	cmp	r3, #1
 800fefa:	d002      	beq.n	800ff02 <_ZN5BTHID7ACLDataEPh+0x7e0>
 800fefc:	2b02      	cmp	r3, #2
 800fefe:	d016      	beq.n	800ff2e <_ZN5BTHID7ACLDataEPh+0x80c>
                        } else {
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nUnhandled L2CAP interrupt report: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
#endif
                        }
 800ff00:	e05f      	b.n	800ffc2 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                if(pRptParser[KEYBOARD_PARSER_ID])
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	6a1b      	ldr	r3, [r3, #32]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d027      	beq.n	800ff5a <_ZN5BTHID7ACLDataEPh+0x838>
                                                        pRptParser[KEYBOARD_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6a18      	ldr	r0, [r3, #32]
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	6a1b      	ldr	r3, [r3, #32]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	681c      	ldr	r4, [r3, #0]
 800ff16:	89fb      	ldrh	r3, [r7, #14]
 800ff18:	b2db      	uxtb	r3, r3
 800ff1a:	3b02      	subs	r3, #2
 800ff1c:	b2da      	uxtb	r2, r3
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	330a      	adds	r3, #10
 800ff22:	9300      	str	r3, [sp, #0]
 800ff24:	4613      	mov	r3, r2
 800ff26:	2200      	movs	r2, #0
 800ff28:	6879      	ldr	r1, [r7, #4]
 800ff2a:	47a0      	blx	r4
                                                break;
 800ff2c:	e015      	b.n	800ff5a <_ZN5BTHID7ACLDataEPh+0x838>
                                                if(pRptParser[MOUSE_PARSER_ID])
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d013      	beq.n	800ff5e <_ZN5BTHID7ACLDataEPh+0x83c>
                                                        pRptParser[MOUSE_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	681c      	ldr	r4, [r3, #0]
 800ff42:	89fb      	ldrh	r3, [r7, #14]
 800ff44:	b2db      	uxtb	r3, r3
 800ff46:	3b02      	subs	r3, #2
 800ff48:	b2da      	uxtb	r2, r3
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	330a      	adds	r3, #10
 800ff4e:	9300      	str	r3, [sp, #0]
 800ff50:	4613      	mov	r3, r2
 800ff52:	2200      	movs	r2, #0
 800ff54:	6879      	ldr	r1, [r7, #4]
 800ff56:	47a0      	blx	r4
                                                break;
 800ff58:	e001      	b.n	800ff5e <_ZN5BTHID7ACLDataEPh+0x83c>
                                                break;
 800ff5a:	bf00      	nop
 800ff5c:	e031      	b.n	800ffc2 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                break;
 800ff5e:	bf00      	nop
                        }
 800ff60:	e02f      	b.n	800ffc2 <_ZN5BTHID7ACLDataEPh+0x8a0>
                } else if(l2capinbuf[6] == control_dcid[0] && l2capinbuf[7] == control_dcid[1]) { // l2cap_control
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	3306      	adds	r3, #6
 800ff66:	781a      	ldrb	r2, [r3, #0]
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800ff6e:	429a      	cmp	r2, r3
 800ff70:	d128      	bne.n	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800ff72:	683b      	ldr	r3, [r7, #0]
 800ff74:	3307      	adds	r3, #7
 800ff76:	781a      	ldrb	r2, [r3, #0]
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	d120      	bne.n	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA3) { // HID BT DATA (0xA0) | Report Type (Feature 0x03)
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	3308      	adds	r3, #8
 800ff86:	781b      	ldrb	r3, [r3, #0]
 800ff88:	2ba3      	cmp	r3, #163	; 0xa3
 800ff8a:	d11b      	bne.n	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	3305      	adds	r3, #5
 800ff90:	781b      	ldrb	r3, [r3, #0]
 800ff92:	021b      	lsls	r3, r3, #8
 800ff94:	b21a      	sxth	r2, r3
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	3304      	adds	r3, #4
 800ff9a:	781b      	ldrb	r3, [r3, #0]
 800ff9c:	b21b      	sxth	r3, r3
 800ff9e:	4313      	orrs	r3, r2
 800ffa0:	b21b      	sxth	r3, r3
 800ffa2:	81bb      	strh	r3, [r7, #12]
                                ParseBTHIDControlData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	3318      	adds	r3, #24
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	89ba      	ldrh	r2, [r7, #12]
 800ffae:	b2d2      	uxtb	r2, r2
 800ffb0:	3a01      	subs	r2, #1
 800ffb2:	b2d1      	uxtb	r1, r2
 800ffb4:	683a      	ldr	r2, [r7, #0]
 800ffb6:	3209      	adds	r2, #9
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	4798      	blx	r3
 800ffbc:	e002      	b.n	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800ffbe:	bf00      	nop
 800ffc0:	e000      	b.n	800ffc4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        }
 800ffc2:	bf00      	nop
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
                }
#endif
                SDP_task();
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f000 f807 	bl	800ffd8 <_ZN5BTHID8SDP_taskEv>
                L2CAP_task();
 800ffca:	6878      	ldr	r0, [r7, #4]
 800ffcc:	f000 f8b4 	bl	8010138 <_ZN5BTHID10L2CAP_taskEv>
        }
}
 800ffd0:	bf00      	nop
 800ffd2:	3714      	adds	r7, #20
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd90      	pop	{r4, r7, pc}

0800ffd8 <_ZN5BTHID8SDP_taskEv>:

void BTHID::SDP_task() {
 800ffd8:	b5b0      	push	{r4, r5, r7, lr}
 800ffda:	b084      	sub	sp, #16
 800ffdc:	af02      	add	r7, sp, #8
 800ffde:	6078      	str	r0, [r7, #4]
        switch(l2cap_sdp_state) {
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	7e9b      	ldrb	r3, [r3, #26]
 800ffe4:	2b0e      	cmp	r3, #14
 800ffe6:	f000 8084 	beq.w	80100f2 <_ZN5BTHID8SDP_taskEv+0x11a>
 800ffea:	2b0e      	cmp	r3, #14
 800ffec:	f300 809f 	bgt.w	801012e <_ZN5BTHID8SDP_taskEv+0x156>
 800fff0:	2b0a      	cmp	r3, #10
 800fff2:	d002      	beq.n	800fffa <_ZN5BTHID8SDP_taskEv+0x22>
 800fff4:	2b0b      	cmp	r3, #11
 800fff6:	d068      	beq.n	80100ca <_ZN5BTHID8SDP_taskEv+0xf2>
                                hci_handle = -1; // Reset handle
                                Reset();
                        }
                        break;
        }
}
 800fff8:	e099      	b.n	801012e <_ZN5BTHID8SDP_taskEv+0x156>
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST)) {
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	691b      	ldr	r3, [r3, #16]
 800fffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010002:	2b00      	cmp	r3, #0
 8010004:	d041      	beq.n	801008a <_ZN5BTHID8SDP_taskEv+0xb2>
                                l2cap_clear_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST); // Clear flag
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	691b      	ldr	r3, [r3, #16]
 801000a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	611a      	str	r2, [r3, #16]
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, PENDING);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6898      	ldr	r0, [r3, #8]
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	8999      	ldrh	r1, [r3, #12]
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	7d1a      	ldrb	r2, [r3, #20]
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	331b      	adds	r3, #27
 8010028:	2501      	movs	r5, #1
 801002a:	9501      	str	r5, [sp, #4]
 801002c:	9300      	str	r3, [sp, #0]
 801002e:	4623      	mov	r3, r4
 8010030:	f7fe fc2b 	bl	800e88a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8010034:	2001      	movs	r0, #1
 8010036:	f7f1 ff13 	bl	8001e60 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, SUCCESSFUL);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	6898      	ldr	r0, [r3, #8]
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	8999      	ldrh	r1, [r3, #12]
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	7d1a      	ldrb	r2, [r3, #20]
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	331b      	adds	r3, #27
 8010050:	2500      	movs	r5, #0
 8010052:	9501      	str	r5, [sp, #4]
 8010054:	9300      	str	r3, [sp, #0]
 8010056:	4623      	mov	r3, r4
 8010058:	f7fe fc17 	bl	800e88a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	7d1b      	ldrb	r3, [r3, #20]
 8010060:	3301      	adds	r3, #1
 8010062:	b2da      	uxtb	r2, r3
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	751a      	strb	r2, [r3, #20]
                                delay(1);
 8010068:	2001      	movs	r0, #1
 801006a:	f7f1 fef9 	bl	8001e60 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	6898      	ldr	r0, [r3, #8]
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	8999      	ldrh	r1, [r3, #12]
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	7d1a      	ldrb	r2, [r3, #20]
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	331b      	adds	r3, #27
 801007e:	f7fe fc51 	bl	800e924 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_sdp_state = L2CAP_SDP_SUCCESS;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	220b      	movs	r2, #11
 8010086:	769a      	strb	r2, [r3, #26]
                        break;
 8010088:	e04c      	b.n	8010124 <_ZN5BTHID8SDP_taskEv+0x14c>
                        } else if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST)) {
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	691b      	ldr	r3, [r3, #16]
 801008e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010092:	2b00      	cmp	r3, #0
 8010094:	d046      	beq.n	8010124 <_ZN5BTHID8SDP_taskEv+0x14c>
                                l2cap_clear_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST); // Clear flag
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	691b      	ldr	r3, [r3, #16]
 801009a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	611a      	str	r2, [r3, #16]
                                SDPConnected = false;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	2200      	movs	r2, #0
 80100a6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                pBtd->l2cap_disconnection_response(hci_handle, identifier, sdp_dcid, sdp_scid);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	6898      	ldr	r0, [r3, #8]
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	8999      	ldrh	r1, [r3, #12]
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	7d1a      	ldrb	r2, [r3, #20]
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	331b      	adds	r3, #27
 80100c0:	9300      	str	r3, [sp, #0]
 80100c2:	4623      	mov	r3, r4
 80100c4:	f7fe fd09 	bl	800eada <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                        break;
 80100c8:	e02c      	b.n	8010124 <_ZN5BTHID8SDP_taskEv+0x14c>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS)) {
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	691b      	ldr	r3, [r3, #16]
 80100ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d028      	beq.n	8010128 <_ZN5BTHID8SDP_taskEv+0x150>
                                l2cap_clear_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS); // Clear flag
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	691b      	ldr	r3, [r3, #16]
 80100da:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	611a      	str	r2, [r3, #16]
                                SDPConnected = true;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2201      	movs	r2, #1
 80100e6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                l2cap_sdp_state = L2CAP_SDP_WAIT;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	220a      	movs	r2, #10
 80100ee:	769a      	strb	r2, [r3, #26]
                        break;
 80100f0:	e01a      	b.n	8010128 <_ZN5BTHID8SDP_taskEv+0x150>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_RESPONSE)) {
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	691b      	ldr	r3, [r3, #16]
 80100f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d016      	beq.n	801012c <_ZN5BTHID8SDP_taskEv+0x154>
                                pBtd->hci_disconnect(hci_handle);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	689a      	ldr	r2, [r3, #8]
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	899b      	ldrh	r3, [r3, #12]
 8010106:	4619      	mov	r1, r3
 8010108:	4610      	mov	r0, r2
 801010a:	f7fe fa92 	bl	800e632 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010114:	819a      	strh	r2, [r3, #12]
                                Reset();
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	3308      	adds	r3, #8
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	6878      	ldr	r0, [r7, #4]
 8010120:	4798      	blx	r3
                        break;
 8010122:	e003      	b.n	801012c <_ZN5BTHID8SDP_taskEv+0x154>
                        break;
 8010124:	bf00      	nop
 8010126:	e002      	b.n	801012e <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 8010128:	bf00      	nop
 801012a:	e000      	b.n	801012e <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 801012c:	bf00      	nop
}
 801012e:	bf00      	nop
 8010130:	3708      	adds	r7, #8
 8010132:	46bd      	mov	sp, r7
 8010134:	bdb0      	pop	{r4, r5, r7, pc}
	...

08010138 <_ZN5BTHID10L2CAP_taskEv>:

void BTHID::L2CAP_task() {
 8010138:	b5b0      	push	{r4, r5, r7, lr}
 801013a:	b084      	sub	sp, #16
 801013c:	af02      	add	r7, sp, #8
 801013e:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8010146:	3b01      	subs	r3, #1
 8010148:	2b08      	cmp	r3, #8
 801014a:	f200 812c 	bhi.w	80103a6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
 801014e:	a201      	add	r2, pc, #4	; (adr r2, 8010154 <_ZN5BTHID10L2CAP_taskEv+0x1c>)
 8010150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010154:	08010385 	.word	0x08010385
 8010158:	0801021f 	.word	0x0801021f
 801015c:	08010257 	.word	0x08010257
 8010160:	08010179 	.word	0x08010179
 8010164:	08010351 	.word	0x08010351
 8010168:	08010197 	.word	0x08010197
 801016c:	0801029f 	.word	0x0801029f
 8010170:	080102d5 	.word	0x080102d5
 8010174:	08010311 	.word	0x08010311
                        /* These states are used if the HID device is the host */
                case L2CAP_CONTROL_SUCCESS:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	691b      	ldr	r3, [r3, #16]
 801017c:	f003 0302 	and.w	r3, r3, #2
 8010180:	2b00      	cmp	r3, #0
 8010182:	f000 8101 	beq.w	8010388 <_ZN5BTHID10L2CAP_taskEv+0x250>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Control Successfully Configured"), 0x80);
#endif
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 8010186:	6878      	ldr	r0, [r7, #4]
 8010188:	f000 f9f9 	bl	801057e <_ZN5BTHID11setProtocolEv>
                                l2cap_state = L2CAP_INTERRUPT_SETUP;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	2206      	movs	r2, #6
 8010190:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8010194:	e0f8      	b.n	8010388 <_ZN5BTHID10L2CAP_taskEv+0x250>

                case L2CAP_INTERRUPT_SETUP:
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST)) {
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	691b      	ldr	r3, [r3, #16]
 801019a:	f003 0310 	and.w	r3, r3, #16
 801019e:	2b00      	cmp	r3, #0
 80101a0:	f000 80f4 	beq.w	801038c <_ZN5BTHID10L2CAP_taskEv+0x254>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Interrupt Incoming Connection Request"), 0x80);
#endif
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, PENDING);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	6898      	ldr	r0, [r3, #8]
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	8999      	ldrh	r1, [r3, #12]
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	7d1a      	ldrb	r2, [r3, #20]
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	3318      	adds	r3, #24
 80101ba:	2501      	movs	r5, #1
 80101bc:	9501      	str	r5, [sp, #4]
 80101be:	9300      	str	r3, [sp, #0]
 80101c0:	4623      	mov	r3, r4
 80101c2:	f7fe fb62 	bl	800e88a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 80101c6:	2001      	movs	r0, #1
 80101c8:	f7f1 fe4a 	bl	8001e60 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, SUCCESSFUL);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	6898      	ldr	r0, [r3, #8]
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	8999      	ldrh	r1, [r3, #12]
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	7d1a      	ldrb	r2, [r3, #20]
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	3318      	adds	r3, #24
 80101e2:	2500      	movs	r5, #0
 80101e4:	9501      	str	r5, [sp, #4]
 80101e6:	9300      	str	r3, [sp, #0]
 80101e8:	4623      	mov	r3, r4
 80101ea:	f7fe fb4e 	bl	800e88a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	7d1b      	ldrb	r3, [r3, #20]
 80101f2:	3301      	adds	r3, #1
 80101f4:	b2da      	uxtb	r2, r3
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	751a      	strb	r2, [r3, #20]
                                delay(1);
 80101fa:	2001      	movs	r0, #1
 80101fc:	f7f1 fe30 	bl	8001e60 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	6898      	ldr	r0, [r3, #8]
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	8999      	ldrh	r1, [r3, #12]
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	7d1a      	ldrb	r2, [r3, #20]
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	3318      	adds	r3, #24
 8010210:	f7fe fb88 	bl	800e924 <_ZN3BTD20l2cap_config_requestEthPh>

                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2208      	movs	r2, #8
 8010218:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801021c:	e0b6      	b.n	801038c <_ZN5BTHID10L2CAP_taskEv+0x254>

                        /* These states are used if the Arduino is the host */
                case L2CAP_CONTROL_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONTROL_CONNECTED)) {
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	691b      	ldr	r3, [r3, #16]
 8010222:	f003 0304 	and.w	r3, r3, #4
 8010226:	2b00      	cmp	r3, #0
 8010228:	f000 80b2 	beq.w	8010390 <_ZN5BTHID10L2CAP_taskEv+0x258>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Config Request"), 0x80);
#endif
                                identifier++;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	7d1b      	ldrb	r3, [r3, #20]
 8010230:	3301      	adds	r3, #1
 8010232:	b2da      	uxtb	r2, r3
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	6898      	ldr	r0, [r3, #8]
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	8999      	ldrh	r1, [r3, #12]
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	7d1a      	ldrb	r2, [r3, #20]
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	3316      	adds	r3, #22
 8010248:	f7fe fb6c 	bl	800e924 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_CONFIG_REQUEST;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	2203      	movs	r2, #3
 8010250:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8010254:	e09c      	b.n	8010390 <_ZN5BTHID10L2CAP_taskEv+0x258>

                case L2CAP_CONTROL_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	691b      	ldr	r3, [r3, #16]
 801025a:	f003 0302 	and.w	r3, r3, #2
 801025e:	2b00      	cmp	r3, #0
 8010260:	f000 8098 	beq.w	8010394 <_ZN5BTHID10L2CAP_taskEv+0x25c>
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 8010264:	6878      	ldr	r0, [r7, #4]
 8010266:	f000 f98a 	bl	801057e <_ZN5BTHID11setProtocolEv>
                                delay(1); // Short delay between commands - just to be sure
 801026a:	2001      	movs	r0, #1
 801026c:	f7f1 fdf8 	bl	8001e60 <HAL_Delay>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Connection Request"), 0x80);
#endif
                                identifier++;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	7d1b      	ldrb	r3, [r3, #20]
 8010274:	3301      	adds	r3, #1
 8010276:	b2da      	uxtb	r2, r3
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, interrupt_dcid, HID_INTR_PSM);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6898      	ldr	r0, [r3, #8]
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	8999      	ldrh	r1, [r3, #12]
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	7d1a      	ldrb	r2, [r3, #20]
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	336d      	adds	r3, #109	; 0x6d
 801028c:	2413      	movs	r4, #19
 801028e:	9400      	str	r4, [sp, #0]
 8010290:	f7fe fabd 	bl	800e80e <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_INTERRUPT_CONNECT_REQUEST;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2207      	movs	r2, #7
 8010298:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801029c:	e07a      	b.n	8010394 <_ZN5BTHID10L2CAP_taskEv+0x25c>

                case L2CAP_INTERRUPT_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_INTERRUPT_CONNECTED)) {
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	691b      	ldr	r3, [r3, #16]
 80102a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d076      	beq.n	8010398 <_ZN5BTHID10L2CAP_taskEv+0x260>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Config Request"), 0x80);
#endif
                                identifier++;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	7d1b      	ldrb	r3, [r3, #20]
 80102ae:	3301      	adds	r3, #1
 80102b0:	b2da      	uxtb	r2, r3
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	6898      	ldr	r0, [r3, #8]
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	8999      	ldrh	r1, [r3, #12]
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	7d1a      	ldrb	r2, [r3, #20]
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	3318      	adds	r3, #24
 80102c6:	f7fe fb2d 	bl	800e924 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	2208      	movs	r2, #8
 80102ce:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80102d2:	e061      	b.n	8010398 <_ZN5BTHID10L2CAP_taskEv+0x260>

                case L2CAP_INTERRUPT_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS)) { // Now the HID channels is established
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	691b      	ldr	r3, [r3, #16]
 80102d8:	f003 0320 	and.w	r3, r3, #32
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d05d      	beq.n	801039c <_ZN5BTHID10L2CAP_taskEv+0x264>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Channels Established"), 0x80);
#endif
                                pBtd->connectToHIDDevice = false;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	689b      	ldr	r3, [r3, #8]
 80102e4:	2200      	movs	r2, #0
 80102e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                pBtd->pairWithHIDDevice = false;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	689b      	ldr	r3, [r3, #8]
 80102ee:	2200      	movs	r2, #0
 80102f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                connected = true;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2201      	movs	r2, #1
 80102f8:	755a      	strb	r2, [r3, #21]
                                onInit();
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	3310      	adds	r3, #16
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	4798      	blx	r3
                                l2cap_state = L2CAP_DONE;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	2201      	movs	r2, #1
 801030a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801030e:	e045      	b.n	801039c <_ZN5BTHID10L2CAP_taskEv+0x264>

                case L2CAP_DONE:
                        break;

                case L2CAP_INTERRUPT_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE)) {
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	691b      	ldr	r3, [r3, #16]
 8010314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010318:	2b00      	cmp	r3, #0
 801031a:	d041      	beq.n	80103a0 <_ZN5BTHID10L2CAP_taskEv+0x268>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Interrupt Channel"), 0x80);
#endif
                                identifier++;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	7d1b      	ldrb	r3, [r3, #20]
 8010320:	3301      	adds	r3, #1
 8010322:	b2da      	uxtb	r2, r3
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_disconnection_request(hci_handle, identifier, control_scid, control_dcid);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	6898      	ldr	r0, [r3, #8]
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	8999      	ldrh	r1, [r3, #12]
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	7d1a      	ldrb	r2, [r3, #20]
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f103 0416 	add.w	r4, r3, #22
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	336b      	adds	r3, #107	; 0x6b
 801033e:	9300      	str	r3, [sp, #0]
 8010340:	4623      	mov	r3, r4
 8010342:	f7fe fb8d 	bl	800ea60 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
                                l2cap_state = L2CAP_CONTROL_DISCONNECT;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	2205      	movs	r2, #5
 801034a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801034e:	e027      	b.n	80103a0 <_ZN5BTHID10L2CAP_taskEv+0x268>

                case L2CAP_CONTROL_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE)) {
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	691b      	ldr	r3, [r3, #16]
 8010354:	f003 0308 	and.w	r3, r3, #8
 8010358:	2b00      	cmp	r3, #0
 801035a:	d023      	beq.n	80103a4 <_ZN5BTHID10L2CAP_taskEv+0x26c>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Control Channel"), 0x80);
#endif
                                pBtd->hci_disconnect(hci_handle);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	689a      	ldr	r2, [r3, #8]
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	899b      	ldrh	r3, [r3, #12]
 8010364:	4619      	mov	r1, r3
 8010366:	4610      	mov	r0, r2
 8010368:	f7fe f963 	bl	800e632 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010372:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2200      	movs	r2, #0
 8010378:	611a      	str	r2, [r3, #16]
                                l2cap_state = L2CAP_WAIT;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	2200      	movs	r2, #0
 801037e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8010382:	e00f      	b.n	80103a4 <_ZN5BTHID10L2CAP_taskEv+0x26c>
                        break;
 8010384:	bf00      	nop
 8010386:	e00e      	b.n	80103a6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010388:	bf00      	nop
 801038a:	e00c      	b.n	80103a6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 801038c:	bf00      	nop
 801038e:	e00a      	b.n	80103a6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010390:	bf00      	nop
 8010392:	e008      	b.n	80103a6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010394:	bf00      	nop
 8010396:	e006      	b.n	80103a6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010398:	bf00      	nop
 801039a:	e004      	b.n	80103a6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 801039c:	bf00      	nop
 801039e:	e002      	b.n	80103a6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80103a0:	bf00      	nop
 80103a2:	e000      	b.n	80103a6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80103a4:	bf00      	nop
        }
}
 80103a6:	bf00      	nop
 80103a8:	3708      	adds	r7, #8
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bdb0      	pop	{r4, r5, r7, pc}
 80103ae:	bf00      	nop

080103b0 <_ZN5BTHID3RunEv>:

void BTHID::Run() {
 80103b0:	b5b0      	push	{r4, r5, r7, lr}
 80103b2:	b084      	sub	sp, #16
 80103b4:	af02      	add	r7, sp, #8
 80103b6:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80103be:	2b00      	cmp	r3, #0
 80103c0:	f040 8084 	bne.w	80104cc <_ZN5BTHID3RunEv+0x11c>
                case L2CAP_WAIT:
                        if(pBtd->connectToHIDDevice && !pBtd->l2capConnectionClaimed && !connected && !activeConnection) {
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	689b      	ldr	r3, [r3, #8]
 80103c8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d03a      	beq.n	8010446 <_ZN5BTHID3RunEv+0x96>
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	689b      	ldr	r3, [r3, #8]
 80103d4:	7a5b      	ldrb	r3, [r3, #9]
 80103d6:	f083 0301 	eor.w	r3, r3, #1
 80103da:	b2db      	uxtb	r3, r3
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d032      	beq.n	8010446 <_ZN5BTHID3RunEv+0x96>
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	7d5b      	ldrb	r3, [r3, #21]
 80103e4:	f083 0301 	eor.w	r3, r3, #1
 80103e8:	b2db      	uxtb	r3, r3
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d02b      	beq.n	8010446 <_ZN5BTHID3RunEv+0x96>
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80103f4:	f083 0301 	eor.w	r3, r3, #1
 80103f8:	b2db      	uxtb	r3, r3
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d023      	beq.n	8010446 <_ZN5BTHID3RunEv+0x96>
                                pBtd->l2capConnectionClaimed = true;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	689b      	ldr	r3, [r3, #8]
 8010402:	2201      	movs	r2, #1
 8010404:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2201      	movs	r2, #1
 801040a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Connection Request"), 0x80);
#endif
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	689b      	ldr	r3, [r3, #8]
 8010412:	8b5a      	ldrh	r2, [r3, #26]
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2200      	movs	r2, #0
 801041c:	611a      	str	r2, [r3, #16]
                                identifier = 0;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	2200      	movs	r2, #0
 8010422:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, control_dcid, HID_CTRL_PSM);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	6898      	ldr	r0, [r3, #8]
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	8999      	ldrh	r1, [r3, #12]
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	7d1a      	ldrb	r2, [r3, #20]
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	336b      	adds	r3, #107	; 0x6b
 8010434:	2411      	movs	r4, #17
 8010436:	9400      	str	r4, [sp, #0]
 8010438:	f7fe f9e9 	bl	800e80e <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_CONTROL_CONNECT_REQUEST;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2202      	movs	r2, #2
 8010440:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                                identifier++;
                                delay(1);
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
                        }
                        break;
 8010444:	e041      	b.n	80104ca <_ZN5BTHID3RunEv+0x11a>
                        } else if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST)) {
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	691b      	ldr	r3, [r3, #16]
 801044a:	f003 0301 	and.w	r3, r3, #1
 801044e:	2b00      	cmp	r3, #0
 8010450:	d03b      	beq.n	80104ca <_ZN5BTHID3RunEv+0x11a>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, PENDING);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	6898      	ldr	r0, [r3, #8]
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	8999      	ldrh	r1, [r3, #12]
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	7d1a      	ldrb	r2, [r3, #20]
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	3316      	adds	r3, #22
 8010468:	2501      	movs	r5, #1
 801046a:	9501      	str	r5, [sp, #4]
 801046c:	9300      	str	r3, [sp, #0]
 801046e:	4623      	mov	r3, r4
 8010470:	f7fe fa0b 	bl	800e88a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8010474:	2001      	movs	r0, #1
 8010476:	f7f1 fcf3 	bl	8001e60 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, SUCCESSFUL);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	6898      	ldr	r0, [r3, #8]
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	8999      	ldrh	r1, [r3, #12]
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	7d1a      	ldrb	r2, [r3, #20]
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	3316      	adds	r3, #22
 8010490:	2500      	movs	r5, #0
 8010492:	9501      	str	r5, [sp, #4]
 8010494:	9300      	str	r3, [sp, #0]
 8010496:	4623      	mov	r3, r4
 8010498:	f7fe f9f7 	bl	800e88a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	7d1b      	ldrb	r3, [r3, #20]
 80104a0:	3301      	adds	r3, #1
 80104a2:	b2da      	uxtb	r2, r3
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	751a      	strb	r2, [r3, #20]
                                delay(1);
 80104a8:	2001      	movs	r0, #1
 80104aa:	f7f1 fcd9 	bl	8001e60 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	6898      	ldr	r0, [r3, #8]
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	8999      	ldrh	r1, [r3, #12]
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	7d1a      	ldrb	r2, [r3, #20]
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	3316      	adds	r3, #22
 80104be:	f7fe fa31 	bl	800e924 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	2204      	movs	r2, #4
 80104c6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        break;
 80104ca:	bf00      	nop
        }
}
 80104cc:	bf00      	nop
 80104ce:	3708      	adds	r7, #8
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bdb0      	pop	{r4, r5, r7, pc}

080104d4 <_ZN5BTHID11SDP_CommandEPhh>:

void BTHID::SDP_Command(uint8_t* data, uint8_t nbytes) { // See page 223 in the Bluetooth specs
 80104d4:	b590      	push	{r4, r7, lr}
 80104d6:	b087      	sub	sp, #28
 80104d8:	af02      	add	r7, sp, #8
 80104da:	60f8      	str	r0, [r7, #12]
 80104dc:	60b9      	str	r1, [r7, #8]
 80104de:	4613      	mov	r3, r2
 80104e0:	71fb      	strb	r3, [r7, #7]
        pBtd->L2CAP_Command(hci_handle, data, nbytes, sdp_scid[0], sdp_scid[1]);
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	6898      	ldr	r0, [r3, #8]
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	8999      	ldrh	r1, [r3, #12]
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	7edb      	ldrb	r3, [r3, #27]
 80104ee:	68fa      	ldr	r2, [r7, #12]
 80104f0:	7f12      	ldrb	r2, [r2, #28]
 80104f2:	79fc      	ldrb	r4, [r7, #7]
 80104f4:	9201      	str	r2, [sp, #4]
 80104f6:	9300      	str	r3, [sp, #0]
 80104f8:	4623      	mov	r3, r4
 80104fa:	68ba      	ldr	r2, [r7, #8]
 80104fc:	f7fe f8f8 	bl	800e6f0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8010500:	bf00      	nop
 8010502:	3714      	adds	r7, #20
 8010504:	46bd      	mov	sp, r7
 8010506:	bd90      	pop	{r4, r7, pc}

08010508 <_ZN5BTHID19serviceNotSupportedEhh>:

void BTHID::serviceNotSupported(uint8_t transactionIDHigh, uint8_t transactionIDLow) { // See page 235 in the Bluetooth specs
 8010508:	b580      	push	{r7, lr}
 801050a:	b082      	sub	sp, #8
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	460b      	mov	r3, r1
 8010512:	70fb      	strb	r3, [r7, #3]
 8010514:	4613      	mov	r3, r2
 8010516:	70bb      	strb	r3, [r7, #2]
        l2capoutbuf[0] = SDP_SERVICE_SEARCH_ATTRIBUTE_RESPONSE;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2207      	movs	r2, #7
 801051c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        l2capoutbuf[1] = transactionIDHigh;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	78fa      	ldrb	r2, [r7, #3]
 8010524:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        l2capoutbuf[2] = transactionIDLow;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	78ba      	ldrb	r2, [r7, #2]
 801052c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        l2capoutbuf[3] = 0x00; // MSB Parameter Length
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2200      	movs	r2, #0
 8010534:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2205      	movs	r2, #5
 801053c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        l2capoutbuf[5] = 0x00; // MSB AttributeListsByteCount
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	2200      	movs	r2, #0
 8010544:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        l2capoutbuf[6] = 0x02; // LSB AttributeListsByteCount = 2
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2202      	movs	r2, #2
 801054c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

        /* Attribute ID/Value Sequence: */
        l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2235      	movs	r2, #53	; 0x35
 8010554:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        l2capoutbuf[8] = 0x00; // Length = 0
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2200      	movs	r2, #0
 801055c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        l2capoutbuf[9] = 0x00; // No continuation state
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2200      	movs	r2, #0
 8010564:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        SDP_Command(l2capoutbuf, 10);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	3328      	adds	r3, #40	; 0x28
 801056c:	220a      	movs	r2, #10
 801056e:	4619      	mov	r1, r3
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f7ff ffaf 	bl	80104d4 <_ZN5BTHID11SDP_CommandEPhh>
}
 8010576:	bf00      	nop
 8010578:	3708      	adds	r7, #8
 801057a:	46bd      	mov	sp, r7
 801057c:	bd80      	pop	{r7, pc}

0801057e <_ZN5BTHID11setProtocolEv>:

/************************************************************/
/*                    HID Commands                          */

/************************************************************/
void BTHID::setProtocol() {
 801057e:	b590      	push	{r4, r7, lr}
 8010580:	b087      	sub	sp, #28
 8010582:	af02      	add	r7, sp, #8
 8010584:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nSet protocol mode: "), 0x80);
        D_PrintHex<uint8_t > (protocolMode, 0x80);
#endif
        if (protocolMode != USB_HID_BOOT_PROTOCOL && protocolMode != HID_RPT_PROTOCOL) {
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801058c:	2b00      	cmp	r3, #0
 801058e:	d008      	beq.n	80105a2 <_ZN5BTHID11setProtocolEv+0x24>
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8010596:	2b01      	cmp	r3, #1
 8010598:	d003      	beq.n	80105a2 <_ZN5BTHID11setProtocolEv+0x24>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nNot a valid protocol mode. Using Boot protocol instead."), 0x80);
#endif
                protocolMode = USB_HID_BOOT_PROTOCOL; // Use Boot Protocol by default
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2200      	movs	r2, #0
 801059e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        }
        uint8_t command = 0x70 | protocolMode; // Set Protocol, see Bluetooth HID specs page 33
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80105a8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80105ac:	b2db      	uxtb	r3, r3
 80105ae:	73fb      	strb	r3, [r7, #15]
        pBtd->L2CAP_Command(hci_handle, &command, 1, control_scid[0], control_scid[1]);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	6898      	ldr	r0, [r3, #8]
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	8999      	ldrh	r1, [r3, #12]
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	7d9b      	ldrb	r3, [r3, #22]
 80105bc:	687a      	ldr	r2, [r7, #4]
 80105be:	7dd2      	ldrb	r2, [r2, #23]
 80105c0:	f107 040f 	add.w	r4, r7, #15
 80105c4:	9201      	str	r2, [sp, #4]
 80105c6:	9300      	str	r3, [sp, #0]
 80105c8:	2301      	movs	r3, #1
 80105ca:	4622      	mov	r2, r4
 80105cc:	f7fe f890 	bl	800e6f0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 80105d0:	bf00      	nop
 80105d2:	3714      	adds	r7, #20
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd90      	pop	{r4, r7, pc}

080105d8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>:
};

// To enable serial debugging see "settings.h"
//#define PRINTREPORT // Uncomment to print the report send by the PS4 Controller

bool PS4Parser::checkDpad(ButtonEnum b) {
 80105d8:	b480      	push	{r7}
 80105da:	b083      	sub	sp, #12
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
 80105e0:	460b      	mov	r3, r1
 80105e2:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 80105e4:	78fb      	ldrb	r3, [r7, #3]
 80105e6:	2b03      	cmp	r3, #3
 80105e8:	d86e      	bhi.n	80106c8 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf0>
 80105ea:	a201      	add	r2, pc, #4	; (adr r2, 80105f0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x18>)
 80105ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105f0:	08010601 	.word	0x08010601
 80105f4:	08010633 	.word	0x08010633
 80105f8:	08010665 	.word	0x08010665
 80105fc:	08010697 	.word	0x08010697
                case UP:
                        return ps4Data.btn.dpad == DPAD_LEFT_UP || ps4Data.btn.dpad == DPAD_UP || ps4Data.btn.dpad == DPAD_UP_RIGHT;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	7a1b      	ldrb	r3, [r3, #8]
 8010604:	f003 030f 	and.w	r3, r3, #15
 8010608:	b2db      	uxtb	r3, r3
 801060a:	2b07      	cmp	r3, #7
 801060c:	d00d      	beq.n	801062a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	7a1b      	ldrb	r3, [r3, #8]
 8010612:	f003 030f 	and.w	r3, r3, #15
 8010616:	b2db      	uxtb	r3, r3
 8010618:	2b00      	cmp	r3, #0
 801061a:	d006      	beq.n	801062a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	7a1b      	ldrb	r3, [r3, #8]
 8010620:	f003 030f 	and.w	r3, r3, #15
 8010624:	b2db      	uxtb	r3, r3
 8010626:	2b01      	cmp	r3, #1
 8010628:	d101      	bne.n	801062e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x56>
 801062a:	2301      	movs	r3, #1
 801062c:	e04d      	b.n	80106ca <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 801062e:	2300      	movs	r3, #0
 8010630:	e04b      	b.n	80106ca <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return ps4Data.btn.dpad == DPAD_UP_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT_DOWN;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	7a1b      	ldrb	r3, [r3, #8]
 8010636:	f003 030f 	and.w	r3, r3, #15
 801063a:	b2db      	uxtb	r3, r3
 801063c:	2b01      	cmp	r3, #1
 801063e:	d00d      	beq.n	801065c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	7a1b      	ldrb	r3, [r3, #8]
 8010644:	f003 030f 	and.w	r3, r3, #15
 8010648:	b2db      	uxtb	r3, r3
 801064a:	2b02      	cmp	r3, #2
 801064c:	d006      	beq.n	801065c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	7a1b      	ldrb	r3, [r3, #8]
 8010652:	f003 030f 	and.w	r3, r3, #15
 8010656:	b2db      	uxtb	r3, r3
 8010658:	2b03      	cmp	r3, #3
 801065a:	d101      	bne.n	8010660 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x88>
 801065c:	2301      	movs	r3, #1
 801065e:	e034      	b.n	80106ca <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8010660:	2300      	movs	r3, #0
 8010662:	e032      	b.n	80106ca <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return ps4Data.btn.dpad == DPAD_RIGHT_DOWN || ps4Data.btn.dpad == DPAD_DOWN || ps4Data.btn.dpad == DPAD_DOWN_LEFT;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	7a1b      	ldrb	r3, [r3, #8]
 8010668:	f003 030f 	and.w	r3, r3, #15
 801066c:	b2db      	uxtb	r3, r3
 801066e:	2b03      	cmp	r3, #3
 8010670:	d00d      	beq.n	801068e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	7a1b      	ldrb	r3, [r3, #8]
 8010676:	f003 030f 	and.w	r3, r3, #15
 801067a:	b2db      	uxtb	r3, r3
 801067c:	2b04      	cmp	r3, #4
 801067e:	d006      	beq.n	801068e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	7a1b      	ldrb	r3, [r3, #8]
 8010684:	f003 030f 	and.w	r3, r3, #15
 8010688:	b2db      	uxtb	r3, r3
 801068a:	2b05      	cmp	r3, #5
 801068c:	d101      	bne.n	8010692 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xba>
 801068e:	2301      	movs	r3, #1
 8010690:	e01b      	b.n	80106ca <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8010692:	2300      	movs	r3, #0
 8010694:	e019      	b.n	80106ca <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return ps4Data.btn.dpad == DPAD_DOWN_LEFT || ps4Data.btn.dpad == DPAD_LEFT || ps4Data.btn.dpad == DPAD_LEFT_UP;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	7a1b      	ldrb	r3, [r3, #8]
 801069a:	f003 030f 	and.w	r3, r3, #15
 801069e:	b2db      	uxtb	r3, r3
 80106a0:	2b05      	cmp	r3, #5
 80106a2:	d00d      	beq.n	80106c0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	7a1b      	ldrb	r3, [r3, #8]
 80106a8:	f003 030f 	and.w	r3, r3, #15
 80106ac:	b2db      	uxtb	r3, r3
 80106ae:	2b06      	cmp	r3, #6
 80106b0:	d006      	beq.n	80106c0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	7a1b      	ldrb	r3, [r3, #8]
 80106b6:	f003 030f 	and.w	r3, r3, #15
 80106ba:	b2db      	uxtb	r3, r3
 80106bc:	2b07      	cmp	r3, #7
 80106be:	d101      	bne.n	80106c4 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xec>
 80106c0:	2301      	movs	r3, #1
 80106c2:	e002      	b.n	80106ca <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 80106c4:	2300      	movs	r3, #0
 80106c6:	e000      	b.n	80106ca <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 80106c8:	2300      	movs	r3, #0
        }
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	370c      	adds	r7, #12
 80106ce:	46bd      	mov	sp, r7
 80106d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d4:	4770      	bx	lr
 80106d6:	bf00      	nop

080106d8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>:

bool PS4Parser::getButtonPress(ButtonEnum b) {
 80106d8:	b580      	push	{r7, lr}
 80106da:	b082      	sub	sp, #8
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
 80106e0:	460b      	mov	r3, r1
 80106e2:	70fb      	strb	r3, [r7, #3]
        if (b <= LEFT) // Dpad
 80106e4:	78fb      	ldrb	r3, [r7, #3]
 80106e6:	2b03      	cmp	r3, #3
 80106e8:	d806      	bhi.n	80106f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x20>
                return checkDpad(b);
 80106ea:	78fb      	ldrb	r3, [r7, #3]
 80106ec:	4619      	mov	r1, r3
 80106ee:	6878      	ldr	r0, [r7, #4]
 80106f0:	f7ff ff72 	bl	80105d8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 80106f4:	4603      	mov	r3, r0
 80106f6:	e011      	b.n	801071c <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x44>
        else
                return ps4Data.btn.val & (1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]));
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	689b      	ldr	r3, [r3, #8]
 80106fc:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8010700:	4619      	mov	r1, r3
 8010702:	78fb      	ldrb	r3, [r7, #3]
 8010704:	4a07      	ldr	r2, [pc, #28]	; (8010724 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x4c>)
 8010706:	4413      	add	r3, r2
 8010708:	781b      	ldrb	r3, [r3, #0]
 801070a:	fa21 f303 	lsr.w	r3, r1, r3
 801070e:	f003 0301 	and.w	r3, r3, #1
 8010712:	2b00      	cmp	r3, #0
 8010714:	bf14      	ite	ne
 8010716:	2301      	movne	r3, #1
 8010718:	2300      	moveq	r3, #0
 801071a:	b2db      	uxtb	r3, r3
}
 801071c:	4618      	mov	r0, r3
 801071e:	3708      	adds	r7, #8
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}
 8010724:	08012980 	.word	0x08012980

08010728 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>:

bool PS4Parser::getButtonClick(ButtonEnum b) {
 8010728:	b480      	push	{r7}
 801072a:	b085      	sub	sp, #20
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
 8010730:	460b      	mov	r3, r1
 8010732:	70fb      	strb	r3, [r7, #3]
        uint32_t mask = 1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]);
 8010734:	78fb      	ldrb	r3, [r7, #3]
 8010736:	4a1b      	ldr	r2, [pc, #108]	; (80107a4 <_ZN9PS4Parser14getButtonClickE10ButtonEnum+0x7c>)
 8010738:	4413      	add	r3, r2
 801073a:	781b      	ldrb	r3, [r3, #0]
 801073c:	461a      	mov	r2, r3
 801073e:	2301      	movs	r3, #1
 8010740:	4093      	lsls	r3, r2
 8010742:	60fb      	str	r3, [r7, #12]
        bool click = buttonClickState.val & mask;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 801074a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801074e:	021b      	lsls	r3, r3, #8
 8010750:	4313      	orrs	r3, r2
 8010752:	461a      	mov	r2, r3
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	4013      	ands	r3, r2
 8010758:	2b00      	cmp	r3, #0
 801075a:	bf14      	ite	ne
 801075c:	2301      	movne	r3, #1
 801075e:	2300      	moveq	r3, #0
 8010760:	72fb      	strb	r3, [r7, #11]
        buttonClickState.val &= ~mask; // Clear "click" event
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8010768:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801076c:	021b      	lsls	r3, r3, #8
 801076e:	4313      	orrs	r3, r2
 8010770:	461a      	mov	r2, r3
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	43db      	mvns	r3, r3
 8010776:	4013      	ands	r3, r2
 8010778:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	b2d1      	uxtb	r1, r2
 8010780:	2000      	movs	r0, #0
 8010782:	4301      	orrs	r1, r0
 8010784:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 8010788:	0a12      	lsrs	r2, r2, #8
 801078a:	b292      	uxth	r2, r2
 801078c:	2100      	movs	r1, #0
 801078e:	430a      	orrs	r2, r1
 8010790:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        return click;
 8010794:	7afb      	ldrb	r3, [r7, #11]
}
 8010796:	4618      	mov	r0, r3
 8010798:	3714      	adds	r7, #20
 801079a:	46bd      	mov	sp, r7
 801079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a0:	4770      	bx	lr
 80107a2:	bf00      	nop
 80107a4:	08012980 	.word	0x08012980

080107a8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>:

uint8_t PS4Parser::getAnalogButton(ButtonEnum b) {
 80107a8:	b480      	push	{r7}
 80107aa:	b083      	sub	sp, #12
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
 80107b0:	460b      	mov	r3, r1
 80107b2:	70fb      	strb	r3, [r7, #3]
        if (b == L2) // These are the only analog buttons on the controller
 80107b4:	78fb      	ldrb	r3, [r7, #3]
 80107b6:	2b08      	cmp	r3, #8
 80107b8:	d102      	bne.n	80107c0 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x18>
                return ps4Data.trigger[0];
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	7adb      	ldrb	r3, [r3, #11]
 80107be:	e006      	b.n	80107ce <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        else if (b == R2)
 80107c0:	78fb      	ldrb	r3, [r7, #3]
 80107c2:	2b09      	cmp	r3, #9
 80107c4:	d102      	bne.n	80107cc <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x24>
                return ps4Data.trigger[1];
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	7b1b      	ldrb	r3, [r3, #12]
 80107ca:	e000      	b.n	80107ce <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        return 0;
 80107cc:	2300      	movs	r3, #0
}
 80107ce:	4618      	mov	r0, r3
 80107d0:	370c      	adds	r7, #12
 80107d2:	46bd      	mov	sp, r7
 80107d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d8:	4770      	bx	lr

080107da <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>:

uint8_t PS4Parser::getAnalogHat(AnalogHatEnum a) {
 80107da:	b480      	push	{r7}
 80107dc:	b083      	sub	sp, #12
 80107de:	af00      	add	r7, sp, #0
 80107e0:	6078      	str	r0, [r7, #4]
 80107e2:	460b      	mov	r3, r1
 80107e4:	70fb      	strb	r3, [r7, #3]
        return ps4Data.hatValue[(uint8_t)a];
 80107e6:	78fb      	ldrb	r3, [r7, #3]
 80107e8:	687a      	ldr	r2, [r7, #4]
 80107ea:	4413      	add	r3, r2
 80107ec:	791b      	ldrb	r3, [r3, #4]
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	370c      	adds	r7, #12
 80107f2:	46bd      	mov	sp, r7
 80107f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f8:	4770      	bx	lr

080107fa <_ZN9PS4Parser5ParseEhPh>:

void PS4Parser::Parse(uint8_t len, uint8_t *buf) {
 80107fa:	b580      	push	{r7, lr}
 80107fc:	b086      	sub	sp, #24
 80107fe:	af00      	add	r7, sp, #0
 8010800:	60f8      	str	r0, [r7, #12]
 8010802:	460b      	mov	r3, r1
 8010804:	607a      	str	r2, [r7, #4]
 8010806:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 8010808:	7afb      	ldrb	r3, [r7, #11]
 801080a:	2b01      	cmp	r3, #1
 801080c:	f240 80a6 	bls.w	801095c <_ZN9PS4Parser5ParseEhPh+0x162>
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2b00      	cmp	r3, #0
 8010814:	f000 80a2 	beq.w	801095c <_ZN9PS4Parser5ParseEhPh+0x162>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	781b      	ldrb	r3, [r3, #0]
 801081c:	2b01      	cmp	r3, #1
 801081e:	d10e      	bne.n	801083e <_ZN9PS4Parser5ParseEhPh+0x44>
                        memcpy(&ps4Data, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(ps4Data)));
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	1d18      	adds	r0, r3, #4
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	1c59      	adds	r1, r3, #1
 8010828:	7afb      	ldrb	r3, [r7, #11]
 801082a:	3b01      	subs	r3, #1
 801082c:	b2db      	uxtb	r3, r3
 801082e:	2b3c      	cmp	r3, #60	; 0x3c
 8010830:	bf28      	it	cs
 8010832:	233c      	movcs	r3, #60	; 0x3c
 8010834:	b2db      	uxtb	r3, r3
 8010836:	461a      	mov	r2, r3
 8010838:	f001 fe56 	bl	80124e8 <memcpy>
 801083c:	e016      	b.n	801086c <_ZN9PS4Parser5ParseEhPh+0x72>
                else if (buf[0] == 0x11) { // This report is send via Bluetooth, it has an offset of 2 compared to the USB data
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	781b      	ldrb	r3, [r3, #0]
 8010842:	2b11      	cmp	r3, #17
 8010844:	f040 8098 	bne.w	8010978 <_ZN9PS4Parser5ParseEhPh+0x17e>
                        if (len < 4) {
 8010848:	7afb      	ldrb	r3, [r7, #11]
 801084a:	2b03      	cmp	r3, #3
 801084c:	f240 8096 	bls.w	801097c <_ZN9PS4Parser5ParseEhPh+0x182>
                                Notify(PSTR("\r\nReport is too short: "), 0x80);
                                D_PrintHex<uint8_t > (len, 0x80);
#endif
                                return;
                        }
                        memcpy(&ps4Data, buf + 3, min((uint8_t)(len - 3), MFK_CASTUINT8T sizeof(ps4Data)));
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	1d18      	adds	r0, r3, #4
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	1cd9      	adds	r1, r3, #3
 8010858:	7afb      	ldrb	r3, [r7, #11]
 801085a:	3b03      	subs	r3, #3
 801085c:	b2db      	uxtb	r3, r3
 801085e:	2b3c      	cmp	r3, #60	; 0x3c
 8010860:	bf28      	it	cs
 8010862:	233c      	movcs	r3, #60	; 0x3c
 8010864:	b2db      	uxtb	r3, r3
 8010866:	461a      	mov	r2, r3
 8010868:	f001 fe3e 	bl	80124e8 <memcpy>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
#endif
                        return;
                }

                if (ps4Data.btn.val != oldButtonState.val) { // Check if anything has changed
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	689b      	ldr	r3, [r3, #8]
 8010870:	f3c3 0217 	ubfx	r2, r3, #0, #24
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010878:	f3c3 0317 	ubfx	r3, r3, #0, #24
 801087c:	429a      	cmp	r2, r3
 801087e:	d06d      	beq.n	801095c <_ZN9PS4Parser5ParseEhPh+0x162>
                        buttonClickState.val = ps4Data.btn.val & ~oldButtonState.val; // Update click state variable
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	689b      	ldr	r3, [r3, #8]
 8010884:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8010888:	461a      	mov	r2, r3
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801088e:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8010892:	43db      	mvns	r3, r3
 8010894:	4013      	ands	r3, r2
 8010896:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	b2d1      	uxtb	r1, r2
 801089e:	2000      	movs	r0, #0
 80108a0:	4301      	orrs	r1, r0
 80108a2:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 80108a6:	0a12      	lsrs	r2, r2, #8
 80108a8:	b292      	uxth	r2, r2
 80108aa:	2100      	movs	r1, #0
 80108ac:	430a      	orrs	r2, r1
 80108ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                        oldButtonState.val = ps4Data.btn.val;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	689b      	ldr	r3, [r3, #8]
 80108b6:	f3c3 0117 	ubfx	r1, r3, #0, #24
 80108ba:	68fa      	ldr	r2, [r7, #12]
 80108bc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80108be:	f361 0317 	bfi	r3, r1, #0, #24
 80108c2:	6413      	str	r3, [r2, #64]	; 0x40

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 80108c4:	2300      	movs	r3, #0
 80108c6:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 80108c8:	2100      	movs	r1, #0
 80108ca:	68f8      	ldr	r0, [r7, #12]
 80108cc:	f7ff fe84 	bl	80105d8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 80108d0:	4603      	mov	r3, r0
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d003      	beq.n	80108de <_ZN9PS4Parser5ParseEhPh+0xe4>
                                newDpad |= 1 << UP;
 80108d6:	7dfb      	ldrb	r3, [r7, #23]
 80108d8:	f043 0301 	orr.w	r3, r3, #1
 80108dc:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 80108de:	2101      	movs	r1, #1
 80108e0:	68f8      	ldr	r0, [r7, #12]
 80108e2:	f7ff fe79 	bl	80105d8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 80108e6:	4603      	mov	r3, r0
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d003      	beq.n	80108f4 <_ZN9PS4Parser5ParseEhPh+0xfa>
                                newDpad |= 1 << RIGHT;
 80108ec:	7dfb      	ldrb	r3, [r7, #23]
 80108ee:	f043 0302 	orr.w	r3, r3, #2
 80108f2:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 80108f4:	2102      	movs	r1, #2
 80108f6:	68f8      	ldr	r0, [r7, #12]
 80108f8:	f7ff fe6e 	bl	80105d8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 80108fc:	4603      	mov	r3, r0
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d003      	beq.n	801090a <_ZN9PS4Parser5ParseEhPh+0x110>
                                newDpad |= 1 << DOWN;
 8010902:	7dfb      	ldrb	r3, [r7, #23]
 8010904:	f043 0304 	orr.w	r3, r3, #4
 8010908:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 801090a:	2103      	movs	r1, #3
 801090c:	68f8      	ldr	r0, [r7, #12]
 801090e:	f7ff fe63 	bl	80105d8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8010912:	4603      	mov	r3, r0
 8010914:	2b00      	cmp	r3, #0
 8010916:	d003      	beq.n	8010920 <_ZN9PS4Parser5ParseEhPh+0x126>
                                newDpad |= 1 << LEFT;
 8010918:	7dfb      	ldrb	r3, [r7, #23]
 801091a:	f043 0308 	orr.w	r3, r3, #8
 801091e:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8010926:	7dfa      	ldrb	r2, [r7, #23]
 8010928:	429a      	cmp	r2, r3
 801092a:	d017      	beq.n	801095c <_ZN9PS4Parser5ParseEhPh+0x162>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8010932:	b25b      	sxtb	r3, r3
 8010934:	43db      	mvns	r3, r3
 8010936:	b25a      	sxtb	r2, r3
 8010938:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801093c:	4013      	ands	r3, r2
 801093e:	b25b      	sxtb	r3, r3
 8010940:	f003 030f 	and.w	r3, r3, #15
 8010944:	b2d9      	uxtb	r1, r3
 8010946:	68fa      	ldr	r2, [r7, #12]
 8010948:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 801094c:	f361 0303 	bfi	r3, r1, #0, #4
 8010950:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
                                oldDpad = newDpad;
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	7dfa      	ldrb	r2, [r7, #23]
 8010958:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                        }
                }
        }

        if (ps4Output.reportChanged)
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8010962:	2b00      	cmp	r3, #0
 8010964:	d00b      	beq.n	801097e <_ZN9PS4Parser5ParseEhPh+0x184>
                sendOutputReport(&ps4Output); // Send output report
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	68fa      	ldr	r2, [r7, #12]
 801096e:	3246      	adds	r2, #70	; 0x46
 8010970:	4611      	mov	r1, r2
 8010972:	68f8      	ldr	r0, [r7, #12]
 8010974:	4798      	blx	r3
 8010976:	e002      	b.n	801097e <_ZN9PS4Parser5ParseEhPh+0x184>
                        return;
 8010978:	bf00      	nop
 801097a:	e000      	b.n	801097e <_ZN9PS4Parser5ParseEhPh+0x184>
                                return;
 801097c:	bf00      	nop
}
 801097e:	3718      	adds	r7, #24
 8010980:	46bd      	mov	sp, r7
 8010982:	bd80      	pop	{r7, pc}

08010984 <_ZN9PS4Parser5ResetEv>:

void PS4Parser::Reset() {
 8010984:	b480      	push	{r7}
 8010986:	b085      	sub	sp, #20
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 801098c:	2300      	movs	r3, #0
 801098e:	73fb      	strb	r3, [r7, #15]
 8010990:	7bfb      	ldrb	r3, [r7, #15]
 8010992:	2b03      	cmp	r3, #3
 8010994:	d808      	bhi.n	80109a8 <_ZN9PS4Parser5ResetEv+0x24>
                ps4Data.hatValue[i] = 127; // Center value
 8010996:	7bfb      	ldrb	r3, [r7, #15]
 8010998:	687a      	ldr	r2, [r7, #4]
 801099a:	4413      	add	r3, r2
 801099c:	227f      	movs	r2, #127	; 0x7f
 801099e:	711a      	strb	r2, [r3, #4]
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 80109a0:	7bfb      	ldrb	r3, [r7, #15]
 80109a2:	3301      	adds	r3, #1
 80109a4:	73fb      	strb	r3, [r7, #15]
 80109a6:	e7f3      	b.n	8010990 <_ZN9PS4Parser5ResetEv+0xc>
        ps4Data.btn.val = 0;
 80109a8:	687a      	ldr	r2, [r7, #4]
 80109aa:	6893      	ldr	r3, [r2, #8]
 80109ac:	f36f 0317 	bfc	r3, #0, #24
 80109b0:	6093      	str	r3, [r2, #8]
        oldButtonState.val = 0;
 80109b2:	687a      	ldr	r2, [r7, #4]
 80109b4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80109b6:	f36f 0317 	bfc	r3, #0, #24
 80109ba:	6413      	str	r3, [r2, #64]	; 0x40
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 80109bc:	2300      	movs	r3, #0
 80109be:	73fb      	strb	r3, [r7, #15]
 80109c0:	7bfb      	ldrb	r3, [r7, #15]
 80109c2:	2b01      	cmp	r3, #1
 80109c4:	d808      	bhi.n	80109d8 <_ZN9PS4Parser5ResetEv+0x54>
                ps4Data.trigger[i] = 0;
 80109c6:	7bfb      	ldrb	r3, [r7, #15]
 80109c8:	687a      	ldr	r2, [r7, #4]
 80109ca:	4413      	add	r3, r2
 80109cc:	2200      	movs	r2, #0
 80109ce:	72da      	strb	r2, [r3, #11]
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 80109d0:	7bfb      	ldrb	r3, [r7, #15]
 80109d2:	3301      	adds	r3, #1
 80109d4:	73fb      	strb	r3, [r7, #15]
 80109d6:	e7f3      	b.n	80109c0 <_ZN9PS4Parser5ResetEv+0x3c>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 80109d8:	2300      	movs	r3, #0
 80109da:	73fb      	strb	r3, [r7, #15]
 80109dc:	7bfb      	ldrb	r3, [r7, #15]
 80109de:	2b02      	cmp	r3, #2
 80109e0:	d81b      	bhi.n	8010a1a <_ZN9PS4Parser5ResetEv+0x96>
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 80109e2:	2300      	movs	r3, #0
 80109e4:	73bb      	strb	r3, [r7, #14]
 80109e6:	7bbb      	ldrb	r3, [r7, #14]
 80109e8:	2b01      	cmp	r3, #1
 80109ea:	d812      	bhi.n	8010a12 <_ZN9PS4Parser5ResetEv+0x8e>
                        ps4Data.xy[i].finger[j].touching = 1; // The bit is cleared if the finger is touching the touchpad
 80109ec:	7bfa      	ldrb	r2, [r7, #15]
 80109ee:	7bbb      	ldrb	r3, [r7, #14]
 80109f0:	6879      	ldr	r1, [r7, #4]
 80109f2:	0098      	lsls	r0, r3, #2
 80109f4:	4613      	mov	r3, r2
 80109f6:	00db      	lsls	r3, r3, #3
 80109f8:	4413      	add	r3, r2
 80109fa:	4403      	add	r3, r0
 80109fc:	440b      	add	r3, r1
 80109fe:	f103 0220 	add.w	r2, r3, #32
 8010a02:	7993      	ldrb	r3, [r2, #6]
 8010a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a08:	7193      	strb	r3, [r2, #6]
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 8010a0a:	7bbb      	ldrb	r3, [r7, #14]
 8010a0c:	3301      	adds	r3, #1
 8010a0e:	73bb      	strb	r3, [r7, #14]
 8010a10:	e7e9      	b.n	80109e6 <_ZN9PS4Parser5ResetEv+0x62>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 8010a12:	7bfb      	ldrb	r3, [r7, #15]
 8010a14:	3301      	adds	r3, #1
 8010a16:	73fb      	strb	r3, [r7, #15]
 8010a18:	e7e0      	b.n	80109dc <_ZN9PS4Parser5ResetEv+0x58>
        }

        ps4Data.btn.dpad = DPAD_OFF;
 8010a1a:	687a      	ldr	r2, [r7, #4]
 8010a1c:	7a13      	ldrb	r3, [r2, #8]
 8010a1e:	2108      	movs	r1, #8
 8010a20:	f361 0303 	bfi	r3, r1, #0, #4
 8010a24:	7213      	strb	r3, [r2, #8]
        oldButtonState.dpad = DPAD_OFF;
 8010a26:	687a      	ldr	r2, [r7, #4]
 8010a28:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 8010a2c:	2108      	movs	r1, #8
 8010a2e:	f361 0303 	bfi	r3, r1, #0, #4
 8010a32:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
        buttonClickState.dpad = 0;
 8010a36:	687a      	ldr	r2, [r7, #4]
 8010a38:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8010a3c:	f36f 0303 	bfc	r3, #0, #4
 8010a40:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
        oldDpad = 0;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	2200      	movs	r2, #0
 8010a48:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

        ps4Output.bigRumble = ps4Output.smallRumble = 0;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2200      	movs	r2, #0
 8010a50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        ps4Output.r = ps4Output.g = ps4Output.b = 0;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2200      	movs	r2, #0
 8010a64:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        ps4Output.flashOn = ps4Output.flashOff = 0;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	2200      	movs	r2, #0
 8010a84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        ps4Output.reportChanged = false;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	2200      	movs	r2, #0
 8010a98:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
};
 8010a9c:	bf00      	nop
 8010a9e:	3714      	adds	r7, #20
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa6:	4770      	bx	lr

08010aa8 <_ZN2P95IsSetEv>:
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	af00      	add	r7, sp, #0
 8010aac:	2180      	movs	r1, #128	; 0x80
 8010aae:	4803      	ldr	r0, [pc, #12]	; (8010abc <_ZN2P95IsSetEv+0x14>)
 8010ab0:	f7f1 fc70 	bl	8002394 <HAL_GPIO_ReadPin>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	bd80      	pop	{r7, pc}
 8010aba:	bf00      	nop
 8010abc:	40020800 	.word	0x40020800

08010ac0 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b082      	sub	sp, #8
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
 8010ac8:	6878      	ldr	r0, [r7, #4]
 8010aca:	f001 f9bb 	bl	8011e44 <_ZN8MAX3421eI3P102P9EC1Ev>
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f001 f9d3 	bl	8011e7c <_ZN15AddressPoolImplILh16EEC1Ev>
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	2200      	movs	r2, #0
 8010ada:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 8010ade:	4b05      	ldr	r3, [pc, #20]	; (8010af4 <_ZN3USBC1Ev+0x34>)
 8010ae0:	2211      	movs	r2, #17
 8010ae2:	701a      	strb	r2, [r3, #0]
        init();
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	f000 f807 	bl	8010af8 <_ZN3USB4initEv>
}
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	4618      	mov	r0, r3
 8010aee:	3708      	adds	r7, #8
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd80      	pop	{r7, pc}
 8010af4:	20004f81 	.word	0x20004f81

08010af8 <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 8010af8:	b480      	push	{r7}
 8010afa:	b083      	sub	sp, #12
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
        //devConfigIndex = 0;
        bmHubPre = 0;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2200      	movs	r2, #0
 8010b04:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 8010b08:	bf00      	nop
 8010b0a:	370c      	adds	r7, #12
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b12:	4770      	bx	lr

08010b14 <_ZN3USB14getEpInfoEntryEhh>:

void USB::setUsbTaskState(uint8_t state) {
        usb_task_state = state;
}

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b086      	sub	sp, #24
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
 8010b1c:	460b      	mov	r3, r1
 8010b1e:	70fb      	strb	r3, [r7, #3]
 8010b20:	4613      	mov	r3, r2
 8010b22:	70bb      	strb	r3, [r7, #2]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	78fa      	ldrb	r2, [r7, #3]
 8010b28:	4611      	mov	r1, r2
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f001 f9e0 	bl	8011ef0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8010b30:	60f8      	str	r0, [r7, #12]

        if(!p || !p->epinfo)
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d003      	beq.n	8010b40 <_ZN3USB14getEpInfoEntryEhh+0x2c>
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d101      	bne.n	8010b44 <_ZN3USB14getEpInfoEntryEhh+0x30>
                return NULL;
 8010b40:	2300      	movs	r3, #0
 8010b42:	e018      	b.n	8010b76 <_ZN3USB14getEpInfoEntryEhh+0x62>

        EpInfo *pep = p->epinfo;
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	617b      	str	r3, [r7, #20]

        for(uint8_t i = 0; i < p->epcount; i++) {
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	74fb      	strb	r3, [r7, #19]
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	795b      	ldrb	r3, [r3, #5]
 8010b52:	7cfa      	ldrb	r2, [r7, #19]
 8010b54:	429a      	cmp	r2, r3
 8010b56:	d20d      	bcs.n	8010b74 <_ZN3USB14getEpInfoEntryEhh+0x60>
                if((pep)->epAddr == ep)
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	781b      	ldrb	r3, [r3, #0]
 8010b5c:	78ba      	ldrb	r2, [r7, #2]
 8010b5e:	429a      	cmp	r2, r3
 8010b60:	d101      	bne.n	8010b66 <_ZN3USB14getEpInfoEntryEhh+0x52>
                        return pep;
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	e007      	b.n	8010b76 <_ZN3USB14getEpInfoEntryEhh+0x62>

                pep++;
 8010b66:	697b      	ldr	r3, [r7, #20]
 8010b68:	3303      	adds	r3, #3
 8010b6a:	617b      	str	r3, [r7, #20]
        for(uint8_t i = 0; i < p->epcount; i++) {
 8010b6c:	7cfb      	ldrb	r3, [r7, #19]
 8010b6e:	3301      	adds	r3, #1
 8010b70:	74fb      	strb	r3, [r7, #19]
 8010b72:	e7ec      	b.n	8010b4e <_ZN3USB14getEpInfoEntryEhh+0x3a>
        }
        return NULL;
 8010b74:	2300      	movs	r3, #0
}
 8010b76:	4618      	mov	r0, r3
 8010b78:	3718      	adds	r7, #24
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd80      	pop	{r7, pc}

08010b7e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 8010b7e:	b580      	push	{r7, lr}
 8010b80:	b086      	sub	sp, #24
 8010b82:	af00      	add	r7, sp, #0
 8010b84:	60f8      	str	r0, [r7, #12]
 8010b86:	607b      	str	r3, [r7, #4]
 8010b88:	460b      	mov	r3, r1
 8010b8a:	72fb      	strb	r3, [r7, #11]
 8010b8c:	4613      	mov	r3, r2
 8010b8e:	72bb      	strb	r3, [r7, #10]
        if(!eprecord_ptr)
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d101      	bne.n	8010b9a <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x1c>
                return USB_ERROR_INVALID_ARGUMENT;
 8010b96:	23d8      	movs	r3, #216	; 0xd8
 8010b98:	e015      	b.n	8010bc6 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	7afa      	ldrb	r2, [r7, #11]
 8010b9e:	4611      	mov	r1, r2
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f001 f9a5 	bl	8011ef0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8010ba6:	6178      	str	r0, [r7, #20]

        if(!p)
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d101      	bne.n	8010bb2 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x34>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8010bae:	23d6      	movs	r3, #214	; 0xd6
 8010bb0:	e009      	b.n	8010bc6 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        p->address.devAddress = addr;
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	7afa      	ldrb	r2, [r7, #11]
 8010bb6:	711a      	strb	r2, [r3, #4]
        p->epinfo = eprecord_ptr;
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	687a      	ldr	r2, [r7, #4]
 8010bbc:	601a      	str	r2, [r3, #0]
        p->epcount = epcount;
 8010bbe:	697b      	ldr	r3, [r7, #20]
 8010bc0:	7aba      	ldrb	r2, [r7, #10]
 8010bc2:	715a      	strb	r2, [r3, #5]

        return 0;
 8010bc4:	2300      	movs	r3, #0
}
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	3718      	adds	r7, #24
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}

08010bce <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 8010bce:	b580      	push	{r7, lr}
 8010bd0:	b086      	sub	sp, #24
 8010bd2:	af00      	add	r7, sp, #0
 8010bd4:	60f8      	str	r0, [r7, #12]
 8010bd6:	607b      	str	r3, [r7, #4]
 8010bd8:	460b      	mov	r3, r1
 8010bda:	72fb      	strb	r3, [r7, #11]
 8010bdc:	4613      	mov	r3, r2
 8010bde:	72bb      	strb	r3, [r7, #10]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	7afa      	ldrb	r2, [r7, #11]
 8010be4:	4611      	mov	r1, r2
 8010be6:	4618      	mov	r0, r3
 8010be8:	f001 f982 	bl	8011ef0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8010bec:	6178      	str	r0, [r7, #20]

        if(!p)
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d101      	bne.n	8010bf8 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x2a>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8010bf4:	23d6      	movs	r3, #214	; 0xd6
 8010bf6:	e04e      	b.n	8010c96 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        if(!p->epinfo)
 8010bf8:	697b      	ldr	r3, [r7, #20]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d101      	bne.n	8010c04 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x36>
                return USB_ERROR_EPINFO_IS_NULL;
 8010c00:	23d7      	movs	r3, #215	; 0xd7
 8010c02:	e048      	b.n	8010c96 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *ppep = getEpInfoEntry(addr, ep);
 8010c04:	7aba      	ldrb	r2, [r7, #10]
 8010c06:	7afb      	ldrb	r3, [r7, #11]
 8010c08:	4619      	mov	r1, r3
 8010c0a:	68f8      	ldr	r0, [r7, #12]
 8010c0c:	f7ff ff82 	bl	8010b14 <_ZN3USB14getEpInfoEntryEhh>
 8010c10:	4602      	mov	r2, r0
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	601a      	str	r2, [r3, #0]

        if(!*ppep)
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d101      	bne.n	8010c22 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x54>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 8010c1e:	23db      	movs	r3, #219	; 0xdb
 8010c20:	e039      	b.n	8010c96 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	789b      	ldrb	r3, [r3, #2]
 8010c28:	f3c3 0385 	ubfx	r3, r3, #2, #6
 8010c2c:	b2db      	uxtb	r3, r3
 8010c2e:	2b0f      	cmp	r3, #15
 8010c30:	bf28      	it	cs
 8010c32:	230f      	movcs	r3, #15
 8010c34:	b2db      	uxtb	r3, r3
 8010c36:	461a      	mov	r2, r3
 8010c38:	2301      	movs	r3, #1
 8010c3a:	4093      	lsls	r3, r2
 8010c3c:	b29a      	uxth	r2, r3
 8010c3e:	6a3b      	ldr	r3, [r7, #32]
 8010c40:	801a      	strh	r2, [r3, #0]
        (*nak_limit)--;
 8010c42:	6a3b      	ldr	r3, [r7, #32]
 8010c44:	881b      	ldrh	r3, [r3, #0]
 8010c46:	3b01      	subs	r3, #1
 8010c48:	b29a      	uxth	r2, r3
 8010c4a:	6a3b      	ldr	r3, [r7, #32]
 8010c4c:	801a      	strh	r2, [r3, #0]
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 8010c4e:	7afb      	ldrb	r3, [r7, #11]
 8010c50:	461a      	mov	r2, r3
 8010c52:	21e0      	movs	r1, #224	; 0xe0
 8010c54:	68f8      	ldr	r0, [r7, #12]
 8010c56:	f7f0 fdd3 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        uint8_t mode = regRd(rMODE);
 8010c5a:	21d8      	movs	r1, #216	; 0xd8
 8010c5c:	68f8      	ldr	r0, [r7, #12]
 8010c5e:	f7f0 fe21 	bl	80018a4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010c62:	4603      	mov	r3, r0
 8010c64:	74fb      	strb	r3, [r7, #19]
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	799b      	ldrb	r3, [r3, #6]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d009      	beq.n	8010c82 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xb4>
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8010c74:	7cfb      	ldrb	r3, [r7, #19]
 8010c76:	4313      	orrs	r3, r2
 8010c78:	b2db      	uxtb	r3, r3
 8010c7a:	f043 0302 	orr.w	r3, r3, #2
 8010c7e:	b2db      	uxtb	r3, r3
 8010c80:	e003      	b.n	8010c8a <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xbc>
 8010c82:	7cfb      	ldrb	r3, [r7, #19]
 8010c84:	f023 0306 	bic.w	r3, r3, #6
 8010c88:	b2db      	uxtb	r3, r3
 8010c8a:	461a      	mov	r2, r3
 8010c8c:	21d8      	movs	r1, #216	; 0xd8
 8010c8e:	68f8      	ldr	r0, [r7, #12]
 8010c90:	f7f0 fdb6 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return 0;
 8010c94:	2300      	movs	r3, #0
}
 8010c96:	4618      	mov	r0, r3
 8010c98:	3718      	adds	r7, #24
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bd80      	pop	{r7, pc}

08010c9e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 8010c9e:	b590      	push	{r4, r7, lr}
 8010ca0:	b08b      	sub	sp, #44	; 0x2c
 8010ca2:	af02      	add	r7, sp, #8
 8010ca4:	6078      	str	r0, [r7, #4]
 8010ca6:	4608      	mov	r0, r1
 8010ca8:	4611      	mov	r1, r2
 8010caa:	461a      	mov	r2, r3
 8010cac:	4603      	mov	r3, r0
 8010cae:	70fb      	strb	r3, [r7, #3]
 8010cb0:	460b      	mov	r3, r1
 8010cb2:	70bb      	strb	r3, [r7, #2]
 8010cb4:	4613      	mov	r3, r2
 8010cb6:	707b      	strb	r3, [r7, #1]
        bool direction = false; //request direction, IN or OUT
 8010cb8:	2300      	movs	r3, #0
 8010cba:	76fb      	strb	r3, [r7, #27]
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	60fb      	str	r3, [r7, #12]
        uint16_t nak_limit = 0;
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	817b      	strh	r3, [r7, #10]

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8010cc4:	f107 000c 	add.w	r0, r7, #12
 8010cc8:	78ba      	ldrb	r2, [r7, #2]
 8010cca:	78f9      	ldrb	r1, [r7, #3]
 8010ccc:	f107 030a 	add.w	r3, r7, #10
 8010cd0:	9300      	str	r3, [sp, #0]
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	6878      	ldr	r0, [r7, #4]
 8010cd6:	f7ff ff7a 	bl	8010bce <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	77fb      	strb	r3, [r7, #31]

        if(rcode)
 8010cde:	7ffb      	ldrb	r3, [r7, #31]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d001      	beq.n	8010ce8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x4a>
                return rcode;
 8010ce4:	7ffb      	ldrb	r3, [r7, #31]
 8010ce6:	e0ae      	b.n	8010e46 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        direction = ((bmReqType & 0x80) > 0);
 8010ce8:	787b      	ldrb	r3, [r7, #1]
 8010cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	bfcc      	ite	gt
 8010cf2:	2301      	movgt	r3, #1
 8010cf4:	2300      	movle	r3, #0
 8010cf6:	76fb      	strb	r3, [r7, #27]

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 8010cf8:	787b      	ldrb	r3, [r7, #1]
 8010cfa:	743b      	strb	r3, [r7, #16]
        setup_pkt.bRequest = bRequest;
 8010cfc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8010d00:	747b      	strb	r3, [r7, #17]
        setup_pkt.wVal_u.wValueLo = wValLo;
 8010d02:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8010d06:	74bb      	strb	r3, [r7, #18]
        setup_pkt.wVal_u.wValueHi = wValHi;
 8010d08:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010d0c:	74fb      	strb	r3, [r7, #19]
        setup_pkt.wIndex = wInd;
 8010d0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010d10:	82bb      	strh	r3, [r7, #20]
        setup_pkt.wLength = total;
 8010d12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010d16:	82fb      	strh	r3, [r7, #22]

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 8010d18:	f107 0310 	add.w	r3, r7, #16
 8010d1c:	2208      	movs	r2, #8
 8010d1e:	2120      	movs	r1, #32
 8010d20:	6878      	ldr	r0, [r7, #4]
 8010d22:	f001 f90b 	bl	8011f3c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 8010d26:	897b      	ldrh	r3, [r7, #10]
 8010d28:	78ba      	ldrb	r2, [r7, #2]
 8010d2a:	2110      	movs	r1, #16
 8010d2c:	6878      	ldr	r0, [r7, #4]
 8010d2e:	f000 faf2 	bl	8011316 <_ZN3USB11dispatchPktEhht>
 8010d32:	4603      	mov	r3, r0
 8010d34:	77fb      	strb	r3, [r7, #31]

        if(rcode) //return HRSLT if not zero
 8010d36:	7ffb      	ldrb	r3, [r7, #31]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d001      	beq.n	8010d40 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa2>
                return ( rcode);
 8010d3c:	7ffb      	ldrb	r3, [r7, #31]
 8010d3e:	e082      	b.n	8010e46 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        if(dataptr != NULL) //data stage, if present
 8010d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d072      	beq.n	8010e2c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
        {
                if(direction) //IN transfer
 8010d46:	7efb      	ldrb	r3, [r7, #27]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d057      	beq.n	8010dfc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x15e>
                {
                        uint16_t left = total;
 8010d4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010d50:	83bb      	strh	r3, [r7, #28]

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 8010d52:	68fa      	ldr	r2, [r7, #12]
 8010d54:	7893      	ldrb	r3, [r2, #2]
 8010d56:	f043 0302 	orr.w	r3, r3, #2
 8010d5a:	7093      	strb	r3, [r2, #2]

                        while(left) {
 8010d5c:	8bbb      	ldrh	r3, [r7, #28]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d05f      	beq.n	8010e22 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 8010d62:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010d66:	813b      	strh	r3, [r7, #8]
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 8010d68:	68f9      	ldr	r1, [r7, #12]
 8010d6a:	897a      	ldrh	r2, [r7, #10]
 8010d6c:	f107 0008 	add.w	r0, r7, #8
 8010d70:	2300      	movs	r3, #0
 8010d72:	9301      	str	r3, [sp, #4]
 8010d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d76:	9300      	str	r3, [sp, #0]
 8010d78:	4603      	mov	r3, r0
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	f000 f8a6 	bl	8010ecc <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8010d80:	4603      	mov	r3, r0
 8010d82:	77fb      	strb	r3, [r7, #31]
                                if(rcode == hrTOGERR) {
 8010d84:	7ffb      	ldrb	r3, [r7, #31]
 8010d86:	2b06      	cmp	r3, #6
 8010d88:	d114      	bne.n	8010db4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x116>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 8010d8a:	21f8      	movs	r1, #248	; 0xf8
 8010d8c:	6878      	ldr	r0, [r7, #4]
 8010d8e:	f7f0 fd89 	bl	80018a4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010d92:	4603      	mov	r3, r0
 8010d94:	f003 0320 	and.w	r3, r3, #32
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	bf0c      	ite	eq
 8010d9c:	2301      	moveq	r3, #1
 8010d9e:	2300      	movne	r3, #0
 8010da0:	b2db      	uxtb	r3, r3
 8010da2:	68fa      	ldr	r2, [r7, #12]
 8010da4:	f003 0301 	and.w	r3, r3, #1
 8010da8:	b2d9      	uxtb	r1, r3
 8010daa:	7893      	ldrb	r3, [r2, #2]
 8010dac:	f361 0341 	bfi	r3, r1, #1, #1
 8010db0:	7093      	strb	r3, [r2, #2]
 8010db2:	e7d3      	b.n	8010d5c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        continue;
                                }

                                if(rcode)
 8010db4:	7ffb      	ldrb	r3, [r7, #31]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d001      	beq.n	8010dbe <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x120>
                                        return rcode;
 8010dba:	7ffb      	ldrb	r3, [r7, #31]
 8010dbc:	e043      	b.n	8010e46 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 8010dbe:	7ffb      	ldrb	r3, [r7, #31]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d111      	bne.n	8010de8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
 8010dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d00e      	beq.n	8010de8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 8010dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	681c      	ldr	r4, [r3, #0]
 8010dd0:	8939      	ldrh	r1, [r7, #8]
 8010dd2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010dd6:	8bbb      	ldrh	r3, [r7, #28]
 8010dd8:	1ad3      	subs	r3, r2, r3
 8010dda:	b29b      	uxth	r3, r3
 8010ddc:	833b      	strh	r3, [r7, #24]
 8010dde:	f107 0318 	add.w	r3, r7, #24
 8010de2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010de4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010de6:	47a0      	blx	r4

                                left -= read;
 8010de8:	893b      	ldrh	r3, [r7, #8]
 8010dea:	8bba      	ldrh	r2, [r7, #28]
 8010dec:	1ad3      	subs	r3, r2, r3
 8010dee:	83bb      	strh	r3, [r7, #28]

                                if(read < nbytes)
 8010df0:	893b      	ldrh	r3, [r7, #8]
 8010df2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010df6:	429a      	cmp	r2, r3
 8010df8:	d812      	bhi.n	8010e20 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x182>
                        while(left) {
 8010dfa:	e7af      	b.n	8010d5c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 8010dfc:	68fa      	ldr	r2, [r7, #12]
 8010dfe:	7893      	ldrb	r3, [r2, #2]
 8010e00:	f043 0301 	orr.w	r3, r3, #1
 8010e04:	7093      	strb	r3, [r2, #2]
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 8010e06:	68f9      	ldr	r1, [r7, #12]
 8010e08:	897a      	ldrh	r2, [r7, #10]
 8010e0a:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 8010e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e10:	9300      	str	r3, [sp, #0]
 8010e12:	4603      	mov	r3, r0
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	f000 f953 	bl	80110c0 <_ZN3USB11OutTransferEP6EpInfottPh>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	77fb      	strb	r3, [r7, #31]
 8010e1e:	e000      	b.n	8010e22 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                        break;
 8010e20:	bf00      	nop
                }
                if(rcode) //return error
 8010e22:	7ffb      	ldrb	r3, [r7, #31]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d001      	beq.n	8010e2c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
                        return ( rcode);
 8010e28:	7ffb      	ldrb	r3, [r7, #31]
 8010e2a:	e00c      	b.n	8010e46 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 8010e2c:	7efb      	ldrb	r3, [r7, #27]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d001      	beq.n	8010e36 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x198>
 8010e32:	21a0      	movs	r1, #160	; 0xa0
 8010e34:	e000      	b.n	8010e38 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x19a>
 8010e36:	2180      	movs	r1, #128	; 0x80
 8010e38:	897b      	ldrh	r3, [r7, #10]
 8010e3a:	78ba      	ldrb	r2, [r7, #2]
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	f000 fa6a 	bl	8011316 <_ZN3USB11dispatchPktEhht>
 8010e42:	4603      	mov	r3, r0
 8010e44:	bf00      	nop
}
 8010e46:	4618      	mov	r0, r3
 8010e48:	3724      	adds	r7, #36	; 0x24
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	bd90      	pop	{r4, r7, pc}

08010e4e <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 8010e4e:	b580      	push	{r7, lr}
 8010e50:	b08a      	sub	sp, #40	; 0x28
 8010e52:	af02      	add	r7, sp, #8
 8010e54:	60f8      	str	r0, [r7, #12]
 8010e56:	607b      	str	r3, [r7, #4]
 8010e58:	460b      	mov	r3, r1
 8010e5a:	72fb      	strb	r3, [r7, #11]
 8010e5c:	4613      	mov	r3, r2
 8010e5e:	72bb      	strb	r3, [r7, #10]
        EpInfo *pep = NULL;
 8010e60:	2300      	movs	r3, #0
 8010e62:	61bb      	str	r3, [r7, #24]
        uint16_t nak_limit = 0;
 8010e64:	2300      	movs	r3, #0
 8010e66:	82fb      	strh	r3, [r7, #22]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8010e68:	f107 0018 	add.w	r0, r7, #24
 8010e6c:	7aba      	ldrb	r2, [r7, #10]
 8010e6e:	7af9      	ldrb	r1, [r7, #11]
 8010e70:	f107 0316 	add.w	r3, r7, #22
 8010e74:	9300      	str	r3, [sp, #0]
 8010e76:	4603      	mov	r3, r0
 8010e78:	68f8      	ldr	r0, [r7, #12]
 8010e7a:	f7ff fea8 	bl	8010bce <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	77fb      	strb	r3, [r7, #31]

        if(rcode) {
 8010e82:	7ffb      	ldrb	r3, [r7, #31]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d010      	beq.n	8010eaa <_ZN3USB10inTransferEhhPtPhh+0x5c>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 8010e88:	7ffb      	ldrb	r3, [r7, #31]
 8010e8a:	2181      	movs	r1, #129	; 0x81
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	f001 f883 	bl	8011f98 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 8010e92:	7afb      	ldrb	r3, [r7, #11]
 8010e94:	2181      	movs	r1, #129	; 0x81
 8010e96:	4618      	mov	r0, r3
 8010e98:	f001 f87e 	bl	8011f98 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 8010e9c:	7abb      	ldrb	r3, [r7, #10]
 8010e9e:	2181      	movs	r1, #129	; 0x81
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f001 f879 	bl	8011f98 <_Z10D_PrintHexIhEvT_i>
                return rcode;
 8010ea6:	7ffb      	ldrb	r3, [r7, #31]
 8010ea8:	e00c      	b.n	8010ec4 <_ZN3USB10inTransferEhhPtPhh+0x76>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 8010eaa:	69b9      	ldr	r1, [r7, #24]
 8010eac:	8afa      	ldrh	r2, [r7, #22]
 8010eae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010eb2:	9301      	str	r3, [sp, #4]
 8010eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eb6:	9300      	str	r3, [sp, #0]
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	68f8      	ldr	r0, [r7, #12]
 8010ebc:	f000 f806 	bl	8010ecc <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	bf00      	nop
}
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	3720      	adds	r7, #32
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bd80      	pop	{r7, pc}

08010ecc <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b086      	sub	sp, #24
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	60f8      	str	r0, [r7, #12]
 8010ed4:	60b9      	str	r1, [r7, #8]
 8010ed6:	603b      	str	r3, [r7, #0]
 8010ed8:	4613      	mov	r3, r2
 8010eda:	80fb      	strh	r3, [r7, #6]
        uint8_t rcode = 0;
 8010edc:	2300      	movs	r3, #0
 8010ede:	75fb      	strb	r3, [r7, #23]
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 8010ee0:	683b      	ldr	r3, [r7, #0]
 8010ee2:	881b      	ldrh	r3, [r3, #0]
 8010ee4:	827b      	strh	r3, [r7, #18]
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 8010ee6:	68bb      	ldr	r3, [r7, #8]
 8010ee8:	785b      	ldrb	r3, [r3, #1]
 8010eea:	747b      	strb	r3, [r7, #17]

        *nbytesptr = 0;
 8010eec:	683b      	ldr	r3, [r7, #0]
 8010eee:	2200      	movs	r2, #0
 8010ef0:	801a      	strh	r2, [r3, #0]
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 8010ef2:	68bb      	ldr	r3, [r7, #8]
 8010ef4:	789b      	ldrb	r3, [r3, #2]
 8010ef6:	f003 0302 	and.w	r3, r3, #2
 8010efa:	b2db      	uxtb	r3, r3
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d001      	beq.n	8010f04 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x38>
 8010f00:	2320      	movs	r3, #32
 8010f02:	e000      	b.n	8010f06 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x3a>
 8010f04:	2310      	movs	r3, #16
 8010f06:	461a      	mov	r2, r3
 8010f08:	21e8      	movs	r1, #232	; 0xe8
 8010f0a:	68f8      	ldr	r0, [r7, #12]
 8010f0c:	f7f0 fc78 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 8010f10:	68bb      	ldr	r3, [r7, #8]
 8010f12:	781a      	ldrb	r2, [r3, #0]
 8010f14:	88fb      	ldrh	r3, [r7, #6]
 8010f16:	2100      	movs	r1, #0
 8010f18:	68f8      	ldr	r0, [r7, #12]
 8010f1a:	f000 f9fc 	bl	8011316 <_ZN3USB11dispatchPktEhht>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	75fb      	strb	r3, [r7, #23]
                if(rcode == hrTOGERR) {
 8010f22:	7dfb      	ldrb	r3, [r7, #23]
 8010f24:	2b06      	cmp	r3, #6
 8010f26:	d123      	bne.n	8010f70 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xa4>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 8010f28:	21f8      	movs	r1, #248	; 0xf8
 8010f2a:	68f8      	ldr	r0, [r7, #12]
 8010f2c:	f7f0 fcba 	bl	80018a4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010f30:	4603      	mov	r3, r0
 8010f32:	f003 0310 	and.w	r3, r3, #16
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	bf0c      	ite	eq
 8010f3a:	2301      	moveq	r3, #1
 8010f3c:	2300      	movne	r3, #0
 8010f3e:	b2db      	uxtb	r3, r3
 8010f40:	f003 0301 	and.w	r3, r3, #1
 8010f44:	b2d9      	uxtb	r1, r3
 8010f46:	68ba      	ldr	r2, [r7, #8]
 8010f48:	7893      	ldrb	r3, [r2, #2]
 8010f4a:	f361 0341 	bfi	r3, r1, #1, #1
 8010f4e:	7093      	strb	r3, [r2, #2]
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	789b      	ldrb	r3, [r3, #2]
 8010f54:	f003 0302 	and.w	r3, r3, #2
 8010f58:	b2db      	uxtb	r3, r3
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d001      	beq.n	8010f62 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x96>
 8010f5e:	2320      	movs	r3, #32
 8010f60:	e000      	b.n	8010f64 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x98>
 8010f62:	2310      	movs	r3, #16
 8010f64:	461a      	mov	r2, r3
 8010f66:	21e8      	movs	r1, #232	; 0xe8
 8010f68:	68f8      	ldr	r0, [r7, #12]
 8010f6a:	f7f0 fc49 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        continue;
 8010f6e:	e06e      	b.n	801104e <_ZN3USB10InTransferEP6EpInfotPtPhh+0x182>
                }
                if(rcode) {
 8010f70:	7dfb      	ldrb	r3, [r7, #23]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d16c      	bne.n	8011050 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x184>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 8010f76:	21c8      	movs	r1, #200	; 0xc8
 8010f78:	68f8      	ldr	r0, [r7, #12]
 8010f7a:	f7f0 fc93 	bl	80018a4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	f003 0304 	and.w	r3, r3, #4
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	bf0c      	ite	eq
 8010f88:	2301      	moveq	r3, #1
 8010f8a:	2300      	movne	r3, #0
 8010f8c:	b2db      	uxtb	r3, r3
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d002      	beq.n	8010f98 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xcc>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 8010f92:	23f0      	movs	r3, #240	; 0xf0
 8010f94:	75fb      	strb	r3, [r7, #23]
                        break;
 8010f96:	e05c      	b.n	8011052 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 8010f98:	2130      	movs	r1, #48	; 0x30
 8010f9a:	68f8      	ldr	r0, [r7, #12]
 8010f9c:	f7f0 fc82 	bl	80018a4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	75bb      	strb	r3, [r7, #22]
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 8010fa4:	7dba      	ldrb	r2, [r7, #22]
 8010fa6:	8a7b      	ldrh	r3, [r7, #18]
 8010fa8:	429a      	cmp	r2, r3
 8010faa:	dd01      	ble.n	8010fb0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xe4>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 8010fac:	8a7b      	ldrh	r3, [r7, #18]
 8010fae:	75bb      	strb	r3, [r7, #22]
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 8010fb0:	683b      	ldr	r3, [r7, #0]
 8010fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010fb6:	b29b      	uxth	r3, r3
 8010fb8:	8a7a      	ldrh	r2, [r7, #18]
 8010fba:	1ad3      	subs	r3, r2, r3
 8010fbc:	b29b      	uxth	r3, r3
 8010fbe:	82bb      	strh	r3, [r7, #20]

                if(mem_left < 0)
 8010fc0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	da01      	bge.n	8010fcc <_ZN3USB10InTransferEP6EpInfotPtPhh+0x100>
                        mem_left = 0;
 8010fc8:	2300      	movs	r3, #0
 8010fca:	82bb      	strh	r3, [r7, #20]

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 8010fcc:	7dba      	ldrb	r2, [r7, #22]
 8010fce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010fd2:	4293      	cmp	r3, r2
 8010fd4:	bfa8      	it	ge
 8010fd6:	4613      	movge	r3, r2
 8010fd8:	b2da      	uxtb	r2, r3
 8010fda:	6a3b      	ldr	r3, [r7, #32]
 8010fdc:	2108      	movs	r1, #8
 8010fde:	68f8      	ldr	r0, [r7, #12]
 8010fe0:	f000 ffe6 	bl	8011fb0 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>
 8010fe4:	6238      	str	r0, [r7, #32]

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 8010fe6:	2204      	movs	r2, #4
 8010fe8:	21c8      	movs	r1, #200	; 0xc8
 8010fea:	68f8      	ldr	r0, [r7, #12]
 8010fec:	f7f0 fc08 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 8010ff0:	683b      	ldr	r3, [r7, #0]
 8010ff2:	881a      	ldrh	r2, [r3, #0]
 8010ff4:	7dbb      	ldrb	r3, [r7, #22]
 8010ff6:	b29b      	uxth	r3, r3
 8010ff8:	4413      	add	r3, r2
 8010ffa:	b29a      	uxth	r2, r3
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	801a      	strh	r2, [r3, #0]

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 8011000:	7dba      	ldrb	r2, [r7, #22]
 8011002:	7c7b      	ldrb	r3, [r7, #17]
 8011004:	429a      	cmp	r2, r3
 8011006:	d304      	bcc.n	8011012 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x146>
 8011008:	683b      	ldr	r3, [r7, #0]
 801100a:	881b      	ldrh	r3, [r3, #0]
 801100c:	8a7a      	ldrh	r2, [r7, #18]
 801100e:	429a      	cmp	r2, r3
 8011010:	d813      	bhi.n	801103a <_ZN3USB10InTransferEP6EpInfotPtPhh+0x16e>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 8011012:	21f8      	movs	r1, #248	; 0xf8
 8011014:	68f8      	ldr	r0, [r7, #12]
 8011016:	f7f0 fc45 	bl	80018a4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801101a:	4603      	mov	r3, r0
 801101c:	f003 0310 	and.w	r3, r3, #16
 8011020:	2b00      	cmp	r3, #0
 8011022:	d001      	beq.n	8011028 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15c>
 8011024:	2101      	movs	r1, #1
 8011026:	e000      	b.n	801102a <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15e>
 8011028:	2100      	movs	r1, #0
 801102a:	68ba      	ldr	r2, [r7, #8]
 801102c:	7893      	ldrb	r3, [r2, #2]
 801102e:	f361 0341 	bfi	r3, r1, #1, #1
 8011032:	7093      	strb	r3, [r2, #2]
                        //printf("\r\n");
                        rcode = 0;
 8011034:	2300      	movs	r3, #0
 8011036:	75fb      	strb	r3, [r7, #23]
                        break;
 8011038:	e00b      	b.n	8011052 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                } else if(bInterval > 0)
 801103a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801103e:	2b00      	cmp	r3, #0
 8011040:	f43f af66 	beq.w	8010f10 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        delay(bInterval); // Delay according to polling interval
 8011044:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011048:	4618      	mov	r0, r3
 801104a:	f7f0 ff09 	bl	8001e60 <HAL_Delay>
        } //while( 1 )
 801104e:	e75f      	b.n	8010f10 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        break; //should be 0, indicating ACK. Else return error code.
 8011050:	bf00      	nop
        return ( rcode);
 8011052:	7dfb      	ldrb	r3, [r7, #23]
}
 8011054:	4618      	mov	r0, r3
 8011056:	3718      	adds	r7, #24
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}

0801105c <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 801105c:	b580      	push	{r7, lr}
 801105e:	b088      	sub	sp, #32
 8011060:	af02      	add	r7, sp, #8
 8011062:	6078      	str	r0, [r7, #4]
 8011064:	4608      	mov	r0, r1
 8011066:	4611      	mov	r1, r2
 8011068:	461a      	mov	r2, r3
 801106a:	4603      	mov	r3, r0
 801106c:	70fb      	strb	r3, [r7, #3]
 801106e:	460b      	mov	r3, r1
 8011070:	70bb      	strb	r3, [r7, #2]
 8011072:	4613      	mov	r3, r2
 8011074:	803b      	strh	r3, [r7, #0]
        EpInfo *pep = NULL;
 8011076:	2300      	movs	r3, #0
 8011078:	613b      	str	r3, [r7, #16]
        uint16_t nak_limit = 0;
 801107a:	2300      	movs	r3, #0
 801107c:	81fb      	strh	r3, [r7, #14]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 801107e:	f107 0010 	add.w	r0, r7, #16
 8011082:	78ba      	ldrb	r2, [r7, #2]
 8011084:	78f9      	ldrb	r1, [r7, #3]
 8011086:	f107 030e 	add.w	r3, r7, #14
 801108a:	9300      	str	r3, [sp, #0]
 801108c:	4603      	mov	r3, r0
 801108e:	6878      	ldr	r0, [r7, #4]
 8011090:	f7ff fd9d 	bl	8010bce <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8011094:	4603      	mov	r3, r0
 8011096:	75fb      	strb	r3, [r7, #23]

        if(rcode)
 8011098:	7dfb      	ldrb	r3, [r7, #23]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d001      	beq.n	80110a2 <_ZN3USB11outTransferEhhtPh+0x46>
                return rcode;
 801109e:	7dfb      	ldrb	r3, [r7, #23]
 80110a0:	e00a      	b.n	80110b8 <_ZN3USB11outTransferEhhtPh+0x5c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 80110a2:	6939      	ldr	r1, [r7, #16]
 80110a4:	89fa      	ldrh	r2, [r7, #14]
 80110a6:	8838      	ldrh	r0, [r7, #0]
 80110a8:	6a3b      	ldr	r3, [r7, #32]
 80110aa:	9300      	str	r3, [sp, #0]
 80110ac:	4603      	mov	r3, r0
 80110ae:	6878      	ldr	r0, [r7, #4]
 80110b0:	f000 f806 	bl	80110c0 <_ZN3USB11OutTransferEP6EpInfottPh>
 80110b4:	4603      	mov	r3, r0
 80110b6:	bf00      	nop
}
 80110b8:	4618      	mov	r0, r3
 80110ba:	3718      	adds	r7, #24
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd80      	pop	{r7, pc}

080110c0 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b08a      	sub	sp, #40	; 0x28
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	60f8      	str	r0, [r7, #12]
 80110c8:	60b9      	str	r1, [r7, #8]
 80110ca:	4611      	mov	r1, r2
 80110cc:	461a      	mov	r2, r3
 80110ce:	460b      	mov	r3, r1
 80110d0:	80fb      	strh	r3, [r7, #6]
 80110d2:	4613      	mov	r3, r2
 80110d4:	80bb      	strh	r3, [r7, #4]
        uint8_t rcode = hrSUCCESS, retry_count;
 80110d6:	2300      	movs	r3, #0
 80110d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uint8_t *data_p = data; //local copy of the data pointer
 80110dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110de:	623b      	str	r3, [r7, #32]
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 80110e0:	88bb      	ldrh	r3, [r7, #4]
 80110e2:	83bb      	strh	r3, [r7, #28]

        uint8_t maxpktsize = pep->maxPktSize;
 80110e4:	68bb      	ldr	r3, [r7, #8]
 80110e6:	785b      	ldrb	r3, [r3, #1]
 80110e8:	76fb      	strb	r3, [r7, #27]

        if(maxpktsize < 1 || maxpktsize > 64)
 80110ea:	7efb      	ldrb	r3, [r7, #27]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d002      	beq.n	80110f6 <_ZN3USB11OutTransferEP6EpInfottPh+0x36>
 80110f0:	7efb      	ldrb	r3, [r7, #27]
 80110f2:	2b40      	cmp	r3, #64	; 0x40
 80110f4:	d901      	bls.n	80110fa <_ZN3USB11OutTransferEP6EpInfottPh+0x3a>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 80110f6:	23da      	movs	r3, #218	; 0xda
 80110f8:	e109      	b.n	801130e <_ZN3USB11OutTransferEP6EpInfottPh+0x24e>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 80110fa:	f7f0 fea5 	bl	8001e48 <HAL_GetTick>
 80110fe:	4603      	mov	r3, r0
 8011100:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8011104:	3308      	adds	r3, #8
 8011106:	617b      	str	r3, [r7, #20]

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	789b      	ldrb	r3, [r3, #2]
 801110c:	f003 0301 	and.w	r3, r3, #1
 8011110:	b2db      	uxtb	r3, r3
 8011112:	2b00      	cmp	r3, #0
 8011114:	d001      	beq.n	801111a <_ZN3USB11OutTransferEP6EpInfottPh+0x5a>
 8011116:	2380      	movs	r3, #128	; 0x80
 8011118:	e000      	b.n	801111c <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
 801111a:	2340      	movs	r3, #64	; 0x40
 801111c:	461a      	mov	r2, r3
 801111e:	21e8      	movs	r1, #232	; 0xe8
 8011120:	68f8      	ldr	r0, [r7, #12]
 8011122:	f7f0 fb6d 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        while(bytes_left) {
 8011126:	8bbb      	ldrh	r3, [r7, #28]
 8011128:	2b00      	cmp	r3, #0
 801112a:	f000 80da 	beq.w	80112e2 <_ZN3USB11OutTransferEP6EpInfottPh+0x222>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 801112e:	2300      	movs	r3, #0
 8011130:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                nak_count = 0;
 8011134:	2300      	movs	r3, #0
 8011136:	83fb      	strh	r3, [r7, #30]
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 8011138:	7efb      	ldrb	r3, [r7, #27]
 801113a:	b29b      	uxth	r3, r3
 801113c:	8bba      	ldrh	r2, [r7, #28]
 801113e:	4293      	cmp	r3, r2
 8011140:	bf28      	it	cs
 8011142:	4613      	movcs	r3, r2
 8011144:	827b      	strh	r3, [r7, #18]
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 8011146:	8a7b      	ldrh	r3, [r7, #18]
 8011148:	b2da      	uxtb	r2, r3
 801114a:	6a3b      	ldr	r3, [r7, #32]
 801114c:	2110      	movs	r1, #16
 801114e:	68f8      	ldr	r0, [r7, #12]
 8011150:	f000 fef4 	bl	8011f3c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 8011154:	8a7b      	ldrh	r3, [r7, #18]
 8011156:	b2db      	uxtb	r3, r3
 8011158:	461a      	mov	r2, r3
 801115a:	2138      	movs	r1, #56	; 0x38
 801115c:	68f8      	ldr	r0, [r7, #12]
 801115e:	f7f0 fb4f 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 8011162:	68bb      	ldr	r3, [r7, #8]
 8011164:	781b      	ldrb	r3, [r3, #0]
 8011166:	f043 0320 	orr.w	r3, r3, #32
 801116a:	b2db      	uxtb	r3, r3
 801116c:	461a      	mov	r2, r3
 801116e:	21f0      	movs	r1, #240	; 0xf0
 8011170:	68f8      	ldr	r0, [r7, #12]
 8011172:	f7f0 fb45 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 8011176:	21c8      	movs	r1, #200	; 0xc8
 8011178:	68f8      	ldr	r0, [r7, #12]
 801117a:	f7f0 fb93 	bl	80018a4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801117e:	4603      	mov	r3, r0
 8011180:	b25b      	sxtb	r3, r3
 8011182:	43db      	mvns	r3, r3
 8011184:	b2db      	uxtb	r3, r3
 8011186:	09db      	lsrs	r3, r3, #7
 8011188:	b2db      	uxtb	r3, r3
 801118a:	2b00      	cmp	r3, #0
 801118c:	d000      	beq.n	8011190 <_ZN3USB11OutTransferEP6EpInfottPh+0xd0>
 801118e:	e7f2      	b.n	8011176 <_ZN3USB11OutTransferEP6EpInfottPh+0xb6>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 8011190:	2280      	movs	r2, #128	; 0x80
 8011192:	21c8      	movs	r1, #200	; 0xc8
 8011194:	68f8      	ldr	r0, [r7, #12]
 8011196:	f7f0 fb33 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 801119a:	21f8      	movs	r1, #248	; 0xf8
 801119c:	68f8      	ldr	r0, [r7, #12]
 801119e:	f7f0 fb81 	bl	80018a4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80111a2:	4603      	mov	r3, r0
 80111a4:	f003 030f 	and.w	r3, r3, #15
 80111a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 80111ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d008      	beq.n	80111c6 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 80111b4:	f7f0 fe48 	bl	8001e48 <HAL_GetTick>
 80111b8:	4602      	mov	r2, r0
 80111ba:	697b      	ldr	r3, [r7, #20]
 80111bc:	1ad3      	subs	r3, r2, r3
 80111be:	2b00      	cmp	r3, #0
 80111c0:	da01      	bge.n	80111c6 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 80111c2:	2301      	movs	r3, #1
 80111c4:	e000      	b.n	80111c8 <_ZN3USB11OutTransferEP6EpInfottPh+0x108>
 80111c6:	2300      	movs	r3, #0
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	f000 8081 	beq.w	80112d0 <_ZN3USB11OutTransferEP6EpInfottPh+0x210>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 80111ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111d2:	2b0e      	cmp	r3, #14
 80111d4:	d012      	beq.n	80111fc <_ZN3USB11OutTransferEP6EpInfottPh+0x13c>
 80111d6:	2b0e      	cmp	r3, #14
 80111d8:	f300 8085 	bgt.w	80112e6 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
 80111dc:	2b04      	cmp	r3, #4
 80111de:	d002      	beq.n	80111e6 <_ZN3USB11OutTransferEP6EpInfottPh+0x126>
 80111e0:	2b06      	cmp	r3, #6
 80111e2:	d015      	beq.n	8011210 <_ZN3USB11OutTransferEP6EpInfottPh+0x150>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 80111e4:	e07f      	b.n	80112e6 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
                                        nak_count++;
 80111e6:	8bfb      	ldrh	r3, [r7, #30]
 80111e8:	3301      	adds	r3, #1
 80111ea:	83fb      	strh	r3, [r7, #30]
                                        if(nak_limit && (nak_count == nak_limit))
 80111ec:	88fb      	ldrh	r3, [r7, #6]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d032      	beq.n	8011258 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
 80111f2:	8bfa      	ldrh	r2, [r7, #30]
 80111f4:	88fb      	ldrh	r3, [r7, #6]
 80111f6:	429a      	cmp	r2, r3
 80111f8:	d12e      	bne.n	8011258 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
                                                goto breakout;
 80111fa:	e075      	b.n	80112e8 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        retry_count++;
 80111fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011200:	3301      	adds	r3, #1
 8011202:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        if(retry_count == USB_RETRY_LIMIT)
 8011206:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801120a:	2b03      	cmp	r3, #3
 801120c:	d126      	bne.n	801125c <_ZN3USB11OutTransferEP6EpInfottPh+0x19c>
                                                goto breakout;
 801120e:	e06b      	b.n	80112e8 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 8011210:	21f8      	movs	r1, #248	; 0xf8
 8011212:	68f8      	ldr	r0, [r7, #12]
 8011214:	f7f0 fb46 	bl	80018a4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011218:	4603      	mov	r3, r0
 801121a:	f003 0320 	and.w	r3, r3, #32
 801121e:	2b00      	cmp	r3, #0
 8011220:	bf0c      	ite	eq
 8011222:	2301      	moveq	r3, #1
 8011224:	2300      	movne	r3, #0
 8011226:	b2db      	uxtb	r3, r3
 8011228:	f003 0301 	and.w	r3, r3, #1
 801122c:	b2d9      	uxtb	r1, r3
 801122e:	68ba      	ldr	r2, [r7, #8]
 8011230:	7893      	ldrb	r3, [r2, #2]
 8011232:	f361 0300 	bfi	r3, r1, #0, #1
 8011236:	7093      	strb	r3, [r2, #2]
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 8011238:	68bb      	ldr	r3, [r7, #8]
 801123a:	789b      	ldrb	r3, [r3, #2]
 801123c:	f003 0301 	and.w	r3, r3, #1
 8011240:	b2db      	uxtb	r3, r3
 8011242:	2b00      	cmp	r3, #0
 8011244:	d001      	beq.n	801124a <_ZN3USB11OutTransferEP6EpInfottPh+0x18a>
 8011246:	2380      	movs	r3, #128	; 0x80
 8011248:	e000      	b.n	801124c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 801124a:	2340      	movs	r3, #64	; 0x40
 801124c:	461a      	mov	r2, r3
 801124e:	21e8      	movs	r1, #232	; 0xe8
 8011250:	68f8      	ldr	r0, [r7, #12]
 8011252:	f7f0 fad5 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                        break;
 8011256:	e002      	b.n	801125e <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 8011258:	bf00      	nop
 801125a:	e000      	b.n	801125e <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 801125c:	bf00      	nop
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 801125e:	2200      	movs	r2, #0
 8011260:	2138      	movs	r1, #56	; 0x38
 8011262:	68f8      	ldr	r0, [r7, #12]
 8011264:	f7f0 facc 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 8011268:	6a3b      	ldr	r3, [r7, #32]
 801126a:	781b      	ldrb	r3, [r3, #0]
 801126c:	461a      	mov	r2, r3
 801126e:	2110      	movs	r1, #16
 8011270:	68f8      	ldr	r0, [r7, #12]
 8011272:	f7f0 fac5 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 8011276:	8a7b      	ldrh	r3, [r7, #18]
 8011278:	b2db      	uxtb	r3, r3
 801127a:	461a      	mov	r2, r3
 801127c:	2138      	movs	r1, #56	; 0x38
 801127e:	68f8      	ldr	r0, [r7, #12]
 8011280:	f7f0 fabe 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 8011284:	68bb      	ldr	r3, [r7, #8]
 8011286:	781b      	ldrb	r3, [r3, #0]
 8011288:	f043 0320 	orr.w	r3, r3, #32
 801128c:	b2db      	uxtb	r3, r3
 801128e:	461a      	mov	r2, r3
 8011290:	21f0      	movs	r1, #240	; 0xf0
 8011292:	68f8      	ldr	r0, [r7, #12]
 8011294:	f7f0 fab4 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 8011298:	21c8      	movs	r1, #200	; 0xc8
 801129a:	68f8      	ldr	r0, [r7, #12]
 801129c:	f7f0 fb02 	bl	80018a4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80112a0:	4603      	mov	r3, r0
 80112a2:	b25b      	sxtb	r3, r3
 80112a4:	43db      	mvns	r3, r3
 80112a6:	b2db      	uxtb	r3, r3
 80112a8:	09db      	lsrs	r3, r3, #7
 80112aa:	b2db      	uxtb	r3, r3
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d000      	beq.n	80112b2 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f2>
 80112b0:	e7f2      	b.n	8011298 <_ZN3USB11OutTransferEP6EpInfottPh+0x1d8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 80112b2:	2280      	movs	r2, #128	; 0x80
 80112b4:	21c8      	movs	r1, #200	; 0xc8
 80112b6:	68f8      	ldr	r0, [r7, #12]
 80112b8:	f7f0 faa2 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 80112bc:	21f8      	movs	r1, #248	; 0xf8
 80112be:	68f8      	ldr	r0, [r7, #12]
 80112c0:	f7f0 faf0 	bl	80018a4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80112c4:	4603      	mov	r3, r0
 80112c6:	f003 030f 	and.w	r3, r3, #15
 80112ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 80112ce:	e76d      	b.n	80111ac <_ZN3USB11OutTransferEP6EpInfottPh+0xec>
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 80112d0:	8bba      	ldrh	r2, [r7, #28]
 80112d2:	8a7b      	ldrh	r3, [r7, #18]
 80112d4:	1ad3      	subs	r3, r2, r3
 80112d6:	83bb      	strh	r3, [r7, #28]
                data_p += bytes_tosend;
 80112d8:	8a7b      	ldrh	r3, [r7, #18]
 80112da:	6a3a      	ldr	r2, [r7, #32]
 80112dc:	4413      	add	r3, r2
 80112de:	623b      	str	r3, [r7, #32]
        while(bytes_left) {
 80112e0:	e721      	b.n	8011126 <_ZN3USB11OutTransferEP6EpInfottPh+0x66>
        }//while( bytes_left...
breakout:
 80112e2:	bf00      	nop
 80112e4:	e000      	b.n	80112e8 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        goto breakout;
 80112e6:	bf00      	nop

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 80112e8:	21f8      	movs	r1, #248	; 0xf8
 80112ea:	68f8      	ldr	r0, [r7, #12]
 80112ec:	f7f0 fada 	bl	80018a4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80112f0:	4603      	mov	r3, r0
 80112f2:	f003 0320 	and.w	r3, r3, #32
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d001      	beq.n	80112fe <_ZN3USB11OutTransferEP6EpInfottPh+0x23e>
 80112fa:	2101      	movs	r1, #1
 80112fc:	e000      	b.n	8011300 <_ZN3USB11OutTransferEP6EpInfottPh+0x240>
 80112fe:	2100      	movs	r1, #0
 8011300:	68ba      	ldr	r2, [r7, #8]
 8011302:	7893      	ldrb	r3, [r2, #2]
 8011304:	f361 0300 	bfi	r3, r1, #0, #1
 8011308:	7093      	strb	r3, [r2, #2]
        return ( rcode); //should be 0 in all cases
 801130a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801130e:	4618      	mov	r0, r3
 8011310:	3728      	adds	r7, #40	; 0x28
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}

08011316 <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 8011316:	b580      	push	{r7, lr}
 8011318:	b086      	sub	sp, #24
 801131a:	af00      	add	r7, sp, #0
 801131c:	6078      	str	r0, [r7, #4]
 801131e:	4608      	mov	r0, r1
 8011320:	4611      	mov	r1, r2
 8011322:	461a      	mov	r2, r3
 8011324:	4603      	mov	r3, r0
 8011326:	70fb      	strb	r3, [r7, #3]
 8011328:	460b      	mov	r3, r1
 801132a:	70bb      	strb	r3, [r7, #2]
 801132c:	4613      	mov	r3, r2
 801132e:	803b      	strh	r3, [r7, #0]
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 8011330:	f7f0 fd8a 	bl	8001e48 <HAL_GetTick>
 8011334:	4603      	mov	r3, r0
 8011336:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 801133a:	3308      	adds	r3, #8
 801133c:	613b      	str	r3, [r7, #16]
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 801133e:	2300      	movs	r3, #0
 8011340:	75fb      	strb	r3, [r7, #23]
        uint8_t retry_count = 0;
 8011342:	2300      	movs	r3, #0
 8011344:	75bb      	strb	r3, [r7, #22]
        uint16_t nak_count = 0;
 8011346:	2300      	movs	r3, #0
 8011348:	82bb      	strh	r3, [r7, #20]

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 801134a:	f7f0 fd7d 	bl	8001e48 <HAL_GetTick>
 801134e:	4602      	mov	r2, r0
 8011350:	693b      	ldr	r3, [r7, #16]
 8011352:	1ad3      	subs	r3, r2, r3
 8011354:	0fdb      	lsrs	r3, r3, #31
 8011356:	b2db      	uxtb	r3, r3
 8011358:	2b00      	cmp	r3, #0
 801135a:	d04c      	beq.n	80113f6 <_ZN3USB11dispatchPktEhht+0xe0>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 801135c:	78fa      	ldrb	r2, [r7, #3]
 801135e:	78bb      	ldrb	r3, [r7, #2]
 8011360:	4313      	orrs	r3, r2
 8011362:	b2db      	uxtb	r3, r3
 8011364:	461a      	mov	r2, r3
 8011366:	21f0      	movs	r1, #240	; 0xf0
 8011368:	6878      	ldr	r0, [r7, #4]
 801136a:	f7f0 fa49 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 801136e:	23ff      	movs	r3, #255	; 0xff
 8011370:	75fb      	strb	r3, [r7, #23]

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 8011372:	f7f0 fd69 	bl	8001e48 <HAL_GetTick>
 8011376:	4602      	mov	r2, r0
 8011378:	693b      	ldr	r3, [r7, #16]
 801137a:	1ad3      	subs	r3, r2, r3
 801137c:	0fdb      	lsrs	r3, r3, #31
 801137e:	b2db      	uxtb	r3, r3
 8011380:	2b00      	cmp	r3, #0
 8011382:	d010      	beq.n	80113a6 <_ZN3USB11dispatchPktEhht+0x90>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 8011384:	21c8      	movs	r1, #200	; 0xc8
 8011386:	6878      	ldr	r0, [r7, #4]
 8011388:	f7f0 fa8c 	bl	80018a4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801138c:	4603      	mov	r3, r0
 801138e:	73fb      	strb	r3, [r7, #15]

                        if(tmpdata & bmHXFRDNIRQ) {
 8011390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011394:	2b00      	cmp	r3, #0
 8011396:	daec      	bge.n	8011372 <_ZN3USB11dispatchPktEhht+0x5c>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 8011398:	2280      	movs	r2, #128	; 0x80
 801139a:	21c8      	movs	r1, #200	; 0xc8
 801139c:	6878      	ldr	r0, [r7, #4]
 801139e:	f7f0 fa2f 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                rcode = 0x00;
 80113a2:	2300      	movs	r3, #0
 80113a4:	75fb      	strb	r3, [r7, #23]
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 80113a6:	21f8      	movs	r1, #248	; 0xf8
 80113a8:	6878      	ldr	r0, [r7, #4]
 80113aa:	f7f0 fa7b 	bl	80018a4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80113ae:	4603      	mov	r3, r0
 80113b0:	f003 030f 	and.w	r3, r3, #15
 80113b4:	75fb      	strb	r3, [r7, #23]

                switch(rcode) {
 80113b6:	7dfb      	ldrb	r3, [r7, #23]
 80113b8:	2b04      	cmp	r3, #4
 80113ba:	d002      	beq.n	80113c2 <_ZN3USB11dispatchPktEhht+0xac>
 80113bc:	2b0e      	cmp	r3, #14
 80113be:	d00c      	beq.n	80113da <_ZN3USB11dispatchPktEhht+0xc4>
 80113c0:	e013      	b.n	80113ea <_ZN3USB11dispatchPktEhht+0xd4>
                        case hrNAK:
                                nak_count++;
 80113c2:	8abb      	ldrh	r3, [r7, #20]
 80113c4:	3301      	adds	r3, #1
 80113c6:	82bb      	strh	r3, [r7, #20]
                                if(nak_limit && (nak_count == nak_limit))
 80113c8:	883b      	ldrh	r3, [r7, #0]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d00f      	beq.n	80113ee <_ZN3USB11dispatchPktEhht+0xd8>
 80113ce:	8aba      	ldrh	r2, [r7, #20]
 80113d0:	883b      	ldrh	r3, [r7, #0]
 80113d2:	429a      	cmp	r2, r3
 80113d4:	d10b      	bne.n	80113ee <_ZN3USB11dispatchPktEhht+0xd8>
                                        return (rcode);
 80113d6:	7dfb      	ldrb	r3, [r7, #23]
 80113d8:	e00e      	b.n	80113f8 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 80113da:	7dbb      	ldrb	r3, [r7, #22]
 80113dc:	3301      	adds	r3, #1
 80113de:	75bb      	strb	r3, [r7, #22]
                                if(retry_count == USB_RETRY_LIMIT)
 80113e0:	7dbb      	ldrb	r3, [r7, #22]
 80113e2:	2b03      	cmp	r3, #3
 80113e4:	d105      	bne.n	80113f2 <_ZN3USB11dispatchPktEhht+0xdc>
                                        return (rcode);
 80113e6:	7dfb      	ldrb	r3, [r7, #23]
 80113e8:	e006      	b.n	80113f8 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        default:
                                return (rcode);
 80113ea:	7dfb      	ldrb	r3, [r7, #23]
 80113ec:	e004      	b.n	80113f8 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
 80113ee:	bf00      	nop
 80113f0:	e7ab      	b.n	801134a <_ZN3USB11dispatchPktEhht+0x34>
                                break;
 80113f2:	bf00      	nop
        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 80113f4:	e7a9      	b.n	801134a <_ZN3USB11dispatchPktEhht+0x34>
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 80113f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80113f8:	4618      	mov	r0, r3
 80113fa:	3718      	adds	r7, #24
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bd80      	pop	{r7, pc}

08011400 <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b084      	sub	sp, #16
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 8011408:	2300      	movs	r3, #0
 801140a:	73fb      	strb	r3, [r7, #15]

        MAX3421E::Task();
 801140c:	6878      	ldr	r0, [r7, #4]
 801140e:	f000 fdfd 	bl	801200c <_ZN8MAX3421eI3P102P9E4TaskEv>

        tmpdata = getVbusState();
 8011412:	6878      	ldr	r0, [r7, #4]
 8011414:	f000 fe12 	bl	801203c <_ZN8MAX3421eI3P102P9E12getVbusStateEv>
 8011418:	4603      	mov	r3, r0
 801141a:	733b      	strb	r3, [r7, #12]

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 801141c:	7b3b      	ldrb	r3, [r7, #12]
 801141e:	2b03      	cmp	r3, #3
 8011420:	d82e      	bhi.n	8011480 <_ZN3USB4TaskEv+0x80>
 8011422:	a201      	add	r2, pc, #4	; (adr r2, 8011428 <_ZN3USB4TaskEv+0x28>)
 8011424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011428:	08011445 	.word	0x08011445
 801142c:	08011439 	.word	0x08011439
 8011430:	08011461 	.word	0x08011461
 8011434:	0801145d 	.word	0x0801145d
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 8011438:	4bbf      	ldr	r3, [pc, #764]	; (8011738 <_ZN3USB4TaskEv+0x338>)
 801143a:	2213      	movs	r2, #19
 801143c:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 801143e:	2300      	movs	r3, #0
 8011440:	73fb      	strb	r3, [r7, #15]
                        break;
 8011442:	e01d      	b.n	8011480 <_ZN3USB4TaskEv+0x80>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 8011444:	4bbc      	ldr	r3, [pc, #752]	; (8011738 <_ZN3USB4TaskEv+0x338>)
 8011446:	781b      	ldrb	r3, [r3, #0]
 8011448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801144c:	2b10      	cmp	r3, #16
 801144e:	d002      	beq.n	8011456 <_ZN3USB4TaskEv+0x56>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 8011450:	4bb9      	ldr	r3, [pc, #740]	; (8011738 <_ZN3USB4TaskEv+0x338>)
 8011452:	2211      	movs	r2, #17
 8011454:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 8011456:	2300      	movs	r3, #0
 8011458:	73fb      	strb	r3, [r7, #15]
                        break;
 801145a:	e011      	b.n	8011480 <_ZN3USB4TaskEv+0x80>
                case LSHOST:

                        lowspeed = true;
 801145c:	2301      	movs	r3, #1
 801145e:	73fb      	strb	r3, [r7, #15]
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 8011460:	4bb5      	ldr	r3, [pc, #724]	; (8011738 <_ZN3USB4TaskEv+0x338>)
 8011462:	781b      	ldrb	r3, [r3, #0]
 8011464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011468:	2b10      	cmp	r3, #16
 801146a:	d108      	bne.n	801147e <_ZN3USB4TaskEv+0x7e>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 801146c:	f7f0 fcec 	bl	8001e48 <HAL_GetTick>
 8011470:	4603      	mov	r3, r0
 8011472:	33c8      	adds	r3, #200	; 0xc8
 8011474:	4ab1      	ldr	r2, [pc, #708]	; (801173c <_ZN3USB4TaskEv+0x33c>)
 8011476:	6013      	str	r3, [r2, #0]
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 8011478:	4baf      	ldr	r3, [pc, #700]	; (8011738 <_ZN3USB4TaskEv+0x338>)
 801147a:	2220      	movs	r2, #32
 801147c:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 801147e:	bf00      	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 8011480:	2300      	movs	r3, #0
 8011482:	73bb      	strb	r3, [r7, #14]
 8011484:	7bbb      	ldrb	r3, [r7, #14]
 8011486:	2b0f      	cmp	r3, #15
 8011488:	d81b      	bhi.n	80114c2 <_ZN3USB4TaskEv+0xc2>
                if(devConfig[i])
 801148a:	7bba      	ldrb	r2, [r7, #14]
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	321e      	adds	r2, #30
 8011490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d010      	beq.n	80114ba <_ZN3USB4TaskEv+0xba>
                        rcode = devConfig[i]->Poll();
 8011498:	7bba      	ldrb	r2, [r7, #14]
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	321e      	adds	r2, #30
 801149e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80114a2:	7bba      	ldrb	r2, [r7, #14]
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	321e      	adds	r2, #30
 80114a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	330c      	adds	r3, #12
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	4608      	mov	r0, r1
 80114b4:	4798      	blx	r3
 80114b6:	4603      	mov	r3, r0
 80114b8:	72fb      	strb	r3, [r7, #11]
        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 80114ba:	7bbb      	ldrb	r3, [r7, #14]
 80114bc:	3301      	adds	r3, #1
 80114be:	73bb      	strb	r3, [r7, #14]
 80114c0:	e7e0      	b.n	8011484 <_ZN3USB4TaskEv+0x84>

        switch(usb_task_state) {
 80114c2:	4b9d      	ldr	r3, [pc, #628]	; (8011738 <_ZN3USB4TaskEv+0x338>)
 80114c4:	781b      	ldrb	r3, [r3, #0]
 80114c6:	2ba0      	cmp	r3, #160	; 0xa0
 80114c8:	f000 8123 	beq.w	8011712 <_ZN3USB4TaskEv+0x312>
 80114cc:	2ba0      	cmp	r3, #160	; 0xa0
 80114ce:	f300 812f 	bgt.w	8011730 <_ZN3USB4TaskEv+0x330>
 80114d2:	2b90      	cmp	r3, #144	; 0x90
 80114d4:	f000 811f 	beq.w	8011716 <_ZN3USB4TaskEv+0x316>
 80114d8:	2b90      	cmp	r3, #144	; 0x90
 80114da:	f300 8129 	bgt.w	8011730 <_ZN3USB4TaskEv+0x330>
 80114de:	2b80      	cmp	r3, #128	; 0x80
 80114e0:	f000 80fe 	beq.w	80116e0 <_ZN3USB4TaskEv+0x2e0>
 80114e4:	2b80      	cmp	r3, #128	; 0x80
 80114e6:	f300 8123 	bgt.w	8011730 <_ZN3USB4TaskEv+0x330>
 80114ea:	2b51      	cmp	r3, #81	; 0x51
 80114ec:	f000 80ea 	beq.w	80116c4 <_ZN3USB4TaskEv+0x2c4>
 80114f0:	2b51      	cmp	r3, #81	; 0x51
 80114f2:	f300 811d 	bgt.w	8011730 <_ZN3USB4TaskEv+0x330>
 80114f6:	2b40      	cmp	r3, #64	; 0x40
 80114f8:	dc6a      	bgt.n	80115d0 <_ZN3USB4TaskEv+0x1d0>
 80114fa:	2b11      	cmp	r3, #17
 80114fc:	f2c0 8118 	blt.w	8011730 <_ZN3USB4TaskEv+0x330>
 8011500:	3b11      	subs	r3, #17
 8011502:	2b2f      	cmp	r3, #47	; 0x2f
 8011504:	f200 8114 	bhi.w	8011730 <_ZN3USB4TaskEv+0x330>
 8011508:	a201      	add	r2, pc, #4	; (adr r2, 8011510 <_ZN3USB4TaskEv+0x110>)
 801150a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801150e:	bf00      	nop
 8011510:	080115d7 	.word	0x080115d7
 8011514:	0801171b 	.word	0x0801171b
 8011518:	0801171b 	.word	0x0801171b
 801151c:	08011731 	.word	0x08011731
 8011520:	08011731 	.word	0x08011731
 8011524:	08011731 	.word	0x08011731
 8011528:	08011731 	.word	0x08011731
 801152c:	08011731 	.word	0x08011731
 8011530:	08011731 	.word	0x08011731
 8011534:	08011731 	.word	0x08011731
 8011538:	08011731 	.word	0x08011731
 801153c:	08011731 	.word	0x08011731
 8011540:	08011731 	.word	0x08011731
 8011544:	08011731 	.word	0x08011731
 8011548:	08011731 	.word	0x08011731
 801154c:	08011627 	.word	0x08011627
 8011550:	08011731 	.word	0x08011731
 8011554:	08011731 	.word	0x08011731
 8011558:	08011731 	.word	0x08011731
 801155c:	08011731 	.word	0x08011731
 8011560:	08011731 	.word	0x08011731
 8011564:	08011731 	.word	0x08011731
 8011568:	08011731 	.word	0x08011731
 801156c:	08011731 	.word	0x08011731
 8011570:	08011731 	.word	0x08011731
 8011574:	08011731 	.word	0x08011731
 8011578:	08011731 	.word	0x08011731
 801157c:	08011731 	.word	0x08011731
 8011580:	08011731 	.word	0x08011731
 8011584:	08011731 	.word	0x08011731
 8011588:	08011731 	.word	0x08011731
 801158c:	08011643 	.word	0x08011643
 8011590:	08011731 	.word	0x08011731
 8011594:	08011731 	.word	0x08011731
 8011598:	08011731 	.word	0x08011731
 801159c:	08011731 	.word	0x08011731
 80115a0:	08011731 	.word	0x08011731
 80115a4:	08011731 	.word	0x08011731
 80115a8:	08011731 	.word	0x08011731
 80115ac:	08011731 	.word	0x08011731
 80115b0:	08011731 	.word	0x08011731
 80115b4:	08011731 	.word	0x08011731
 80115b8:	08011731 	.word	0x08011731
 80115bc:	08011731 	.word	0x08011731
 80115c0:	08011731 	.word	0x08011731
 80115c4:	08011731 	.word	0x08011731
 80115c8:	08011731 	.word	0x08011731
 80115cc:	08011655 	.word	0x08011655
 80115d0:	2b50      	cmp	r3, #80	; 0x50
 80115d2:	d05f      	beq.n	8011694 <_ZN3USB4TaskEv+0x294>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 80115d4:	e0ac      	b.n	8011730 <_ZN3USB4TaskEv+0x330>
                        init();
 80115d6:	6878      	ldr	r0, [r7, #4]
 80115d8:	f7ff fa8e 	bl	8010af8 <_ZN3USB4initEv>
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 80115dc:	2300      	movs	r3, #0
 80115de:	737b      	strb	r3, [r7, #13]
 80115e0:	7b7b      	ldrb	r3, [r7, #13]
 80115e2:	2b0f      	cmp	r3, #15
 80115e4:	d81b      	bhi.n	801161e <_ZN3USB4TaskEv+0x21e>
                                if(devConfig[i])
 80115e6:	7b7a      	ldrb	r2, [r7, #13]
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	321e      	adds	r2, #30
 80115ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d010      	beq.n	8011616 <_ZN3USB4TaskEv+0x216>
                                        rcode = devConfig[i]->Release();
 80115f4:	7b7a      	ldrb	r2, [r7, #13]
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	321e      	adds	r2, #30
 80115fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80115fe:	7b7a      	ldrb	r2, [r7, #13]
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	321e      	adds	r2, #30
 8011604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	3308      	adds	r3, #8
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	4608      	mov	r0, r1
 8011610:	4798      	blx	r3
 8011612:	4603      	mov	r3, r0
 8011614:	72fb      	strb	r3, [r7, #11]
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 8011616:	7b7b      	ldrb	r3, [r7, #13]
 8011618:	3301      	adds	r3, #1
 801161a:	737b      	strb	r3, [r7, #13]
 801161c:	e7e0      	b.n	80115e0 <_ZN3USB4TaskEv+0x1e0>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 801161e:	4b46      	ldr	r3, [pc, #280]	; (8011738 <_ZN3USB4TaskEv+0x338>)
 8011620:	2212      	movs	r2, #18
 8011622:	701a      	strb	r2, [r3, #0]
                        break;
 8011624:	e084      	b.n	8011730 <_ZN3USB4TaskEv+0x330>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 8011626:	f7f0 fc0f 	bl	8001e48 <HAL_GetTick>
 801162a:	4602      	mov	r2, r0
 801162c:	4b43      	ldr	r3, [pc, #268]	; (801173c <_ZN3USB4TaskEv+0x33c>)
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	1ad3      	subs	r3, r2, r3
 8011632:	43db      	mvns	r3, r3
 8011634:	0fdb      	lsrs	r3, r3, #31
 8011636:	b2db      	uxtb	r3, r3
 8011638:	2b00      	cmp	r3, #0
 801163a:	d070      	beq.n	801171e <_ZN3USB4TaskEv+0x31e>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 801163c:	4b3e      	ldr	r3, [pc, #248]	; (8011738 <_ZN3USB4TaskEv+0x338>)
 801163e:	2230      	movs	r2, #48	; 0x30
 8011640:	701a      	strb	r2, [r3, #0]
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8011642:	2201      	movs	r2, #1
 8011644:	21e8      	movs	r1, #232	; 0xe8
 8011646:	6878      	ldr	r0, [r7, #4]
 8011648:	f7f0 f8da 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 801164c:	4b3a      	ldr	r3, [pc, #232]	; (8011738 <_ZN3USB4TaskEv+0x338>)
 801164e:	2240      	movs	r2, #64	; 0x40
 8011650:	701a      	strb	r2, [r3, #0]
                        break;
 8011652:	e06d      	b.n	8011730 <_ZN3USB4TaskEv+0x330>
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 8011654:	21e8      	movs	r1, #232	; 0xe8
 8011656:	6878      	ldr	r0, [r7, #4]
 8011658:	f7f0 f924 	bl	80018a4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801165c:	4603      	mov	r3, r0
 801165e:	f003 0301 	and.w	r3, r3, #1
 8011662:	2b00      	cmp	r3, #0
 8011664:	bf0c      	ite	eq
 8011666:	2301      	moveq	r3, #1
 8011668:	2300      	movne	r3, #0
 801166a:	b2db      	uxtb	r3, r3
 801166c:	2b00      	cmp	r3, #0
 801166e:	d058      	beq.n	8011722 <_ZN3USB4TaskEv+0x322>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 8011670:	21d8      	movs	r1, #216	; 0xd8
 8011672:	6878      	ldr	r0, [r7, #4]
 8011674:	f7f0 f916 	bl	80018a4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011678:	4603      	mov	r3, r0
 801167a:	f043 0308 	orr.w	r3, r3, #8
 801167e:	733b      	strb	r3, [r7, #12]
                                regWr(rMODE, tmpdata);
 8011680:	7b3b      	ldrb	r3, [r7, #12]
 8011682:	461a      	mov	r2, r3
 8011684:	21d8      	movs	r1, #216	; 0xd8
 8011686:	6878      	ldr	r0, [r7, #4]
 8011688:	f7f0 f8ba 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 801168c:	4b2a      	ldr	r3, [pc, #168]	; (8011738 <_ZN3USB4TaskEv+0x338>)
 801168e:	2250      	movs	r2, #80	; 0x50
 8011690:	701a      	strb	r2, [r3, #0]
                        break;
 8011692:	e046      	b.n	8011722 <_ZN3USB4TaskEv+0x322>
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 8011694:	21c8      	movs	r1, #200	; 0xc8
 8011696:	6878      	ldr	r0, [r7, #4]
 8011698:	f7f0 f904 	bl	80018a4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801169c:	4603      	mov	r3, r0
 801169e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	bf14      	ite	ne
 80116a6:	2301      	movne	r3, #1
 80116a8:	2300      	moveq	r3, #0
 80116aa:	b2db      	uxtb	r3, r3
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d03a      	beq.n	8011726 <_ZN3USB4TaskEv+0x326>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 80116b0:	4b21      	ldr	r3, [pc, #132]	; (8011738 <_ZN3USB4TaskEv+0x338>)
 80116b2:	2251      	movs	r2, #81	; 0x51
 80116b4:	701a      	strb	r2, [r3, #0]
                                delay = (uint32_t)millis() + 20;
 80116b6:	f7f0 fbc7 	bl	8001e48 <HAL_GetTick>
 80116ba:	4603      	mov	r3, r0
 80116bc:	3314      	adds	r3, #20
 80116be:	4a1f      	ldr	r2, [pc, #124]	; (801173c <_ZN3USB4TaskEv+0x33c>)
 80116c0:	6013      	str	r3, [r2, #0]
                        break;
 80116c2:	e030      	b.n	8011726 <_ZN3USB4TaskEv+0x326>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 80116c4:	f7f0 fbc0 	bl	8001e48 <HAL_GetTick>
 80116c8:	4602      	mov	r2, r0
 80116ca:	4b1c      	ldr	r3, [pc, #112]	; (801173c <_ZN3USB4TaskEv+0x33c>)
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	1ad3      	subs	r3, r2, r3
 80116d0:	43db      	mvns	r3, r3
 80116d2:	0fdb      	lsrs	r3, r3, #31
 80116d4:	b2db      	uxtb	r3, r3
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d027      	beq.n	801172a <_ZN3USB4TaskEv+0x32a>
 80116da:	4b17      	ldr	r3, [pc, #92]	; (8011738 <_ZN3USB4TaskEv+0x338>)
 80116dc:	2280      	movs	r2, #128	; 0x80
 80116de:	701a      	strb	r2, [r3, #0]
                        rcode = Configuring(0, 0, lowspeed);
 80116e0:	7bfb      	ldrb	r3, [r7, #15]
 80116e2:	2200      	movs	r2, #0
 80116e4:	2100      	movs	r1, #0
 80116e6:	6878      	ldr	r0, [r7, #4]
 80116e8:	f000 f920 	bl	801192c <_ZN3USB11ConfiguringEhhb>
 80116ec:	4603      	mov	r3, r0
 80116ee:	72fb      	strb	r3, [r7, #11]
                        if(rcode) {
 80116f0:	7afb      	ldrb	r3, [r7, #11]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d009      	beq.n	801170a <_ZN3USB4TaskEv+0x30a>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 80116f6:	7afb      	ldrb	r3, [r7, #11]
 80116f8:	2bd2      	cmp	r3, #210	; 0xd2
 80116fa:	d018      	beq.n	801172e <_ZN3USB4TaskEv+0x32e>
                                        usb_error = rcode;
 80116fc:	4a10      	ldr	r2, [pc, #64]	; (8011740 <_ZN3USB4TaskEv+0x340>)
 80116fe:	7afb      	ldrb	r3, [r7, #11]
 8011700:	7013      	strb	r3, [r2, #0]
                                        usb_task_state = USB_STATE_ERROR;
 8011702:	4b0d      	ldr	r3, [pc, #52]	; (8011738 <_ZN3USB4TaskEv+0x338>)
 8011704:	22a0      	movs	r2, #160	; 0xa0
 8011706:	701a      	strb	r2, [r3, #0]
                        break;
 8011708:	e011      	b.n	801172e <_ZN3USB4TaskEv+0x32e>
                                usb_task_state = USB_STATE_RUNNING;
 801170a:	4b0b      	ldr	r3, [pc, #44]	; (8011738 <_ZN3USB4TaskEv+0x338>)
 801170c:	2290      	movs	r2, #144	; 0x90
 801170e:	701a      	strb	r2, [r3, #0]
                        break;
 8011710:	e00d      	b.n	801172e <_ZN3USB4TaskEv+0x32e>
                        break;
 8011712:	bf00      	nop
 8011714:	e00c      	b.n	8011730 <_ZN3USB4TaskEv+0x330>
                        break;
 8011716:	bf00      	nop
 8011718:	e00a      	b.n	8011730 <_ZN3USB4TaskEv+0x330>
                        break;
 801171a:	bf00      	nop
 801171c:	e008      	b.n	8011730 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 801171e:	bf00      	nop
 8011720:	e006      	b.n	8011730 <_ZN3USB4TaskEv+0x330>
                        break;
 8011722:	bf00      	nop
 8011724:	e004      	b.n	8011730 <_ZN3USB4TaskEv+0x330>
                        break;
 8011726:	bf00      	nop
 8011728:	e002      	b.n	8011730 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 801172a:	bf00      	nop
 801172c:	e000      	b.n	8011730 <_ZN3USB4TaskEv+0x330>
                        break;
 801172e:	bf00      	nop
}
 8011730:	bf00      	nop
 8011732:	3710      	adds	r7, #16
 8011734:	46bd      	mov	sp, r7
 8011736:	bd80      	pop	{r7, pc}
 8011738:	20004f81 	.word	0x20004f81
 801173c:	20004f84 	.word	0x20004f84
 8011740:	20004f80 	.word	0x20004f80

08011744 <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 8011744:	b580      	push	{r7, lr}
 8011746:	b086      	sub	sp, #24
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
 801174c:	4608      	mov	r0, r1
 801174e:	4611      	mov	r1, r2
 8011750:	461a      	mov	r2, r3
 8011752:	4603      	mov	r3, r0
 8011754:	70fb      	strb	r3, [r7, #3]
 8011756:	460b      	mov	r3, r1
 8011758:	70bb      	strb	r3, [r7, #2]
 801175a:	4613      	mov	r3, r2
 801175c:	707b      	strb	r3, [r7, #1]
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 801175e:	2300      	movs	r3, #0
 8011760:	617b      	str	r3, [r7, #20]
 8011762:	2300      	movs	r3, #0
 8011764:	613b      	str	r3, [r7, #16]

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	2100      	movs	r1, #0
 801176a:	4618      	mov	r0, r3
 801176c:	f000 fbc0 	bl	8011ef0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8011770:	6178      	str	r0, [r7, #20]

        if(!p0)
 8011772:	697b      	ldr	r3, [r7, #20]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d101      	bne.n	801177c <_ZN3USB17DefaultAddressingEhhb+0x38>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8011778:	23d6      	movs	r3, #214	; 0xd6
 801177a:	e03a      	b.n	80117f2 <_ZN3USB17DefaultAddressingEhhb+0xae>

        if(!p0->epinfo)
 801177c:	697b      	ldr	r3, [r7, #20]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d101      	bne.n	8011788 <_ZN3USB17DefaultAddressingEhhb+0x44>
                return USB_ERROR_EPINFO_IS_NULL;
 8011784:	23d7      	movs	r3, #215	; 0xd7
 8011786:	e034      	b.n	80117f2 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p0->lowspeed = (lowspeed) ? true : false;
 8011788:	697b      	ldr	r3, [r7, #20]
 801178a:	787a      	ldrb	r2, [r7, #1]
 801178c:	719a      	strb	r2, [r3, #6]

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 801178e:	6878      	ldr	r0, [r7, #4]
 8011790:	78bb      	ldrb	r3, [r7, #2]
 8011792:	78f9      	ldrb	r1, [r7, #3]
 8011794:	2200      	movs	r2, #0
 8011796:	f000 fc5f 	bl	8012058 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 801179a:	4603      	mov	r3, r0
 801179c:	73fb      	strb	r3, [r7, #15]

        if(!bAddress)
 801179e:	7bfb      	ldrb	r3, [r7, #15]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d101      	bne.n	80117a8 <_ZN3USB17DefaultAddressingEhhb+0x64>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 80117a4:	23d4      	movs	r3, #212	; 0xd4
 80117a6:	e024      	b.n	80117f2 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p = addrPool.GetUsbDevicePtr(bAddress);
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	7bfa      	ldrb	r2, [r7, #15]
 80117ac:	4611      	mov	r1, r2
 80117ae:	4618      	mov	r0, r3
 80117b0:	f000 fb9e 	bl	8011ef0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 80117b4:	6138      	str	r0, [r7, #16]

        if(!p)
 80117b6:	693b      	ldr	r3, [r7, #16]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d101      	bne.n	80117c0 <_ZN3USB17DefaultAddressingEhhb+0x7c>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 80117bc:	23d6      	movs	r3, #214	; 0xd6
 80117be:	e018      	b.n	80117f2 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p->lowspeed = lowspeed;
 80117c0:	693b      	ldr	r3, [r7, #16]
 80117c2:	787a      	ldrb	r2, [r7, #1]
 80117c4:	719a      	strb	r2, [r3, #6]

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 80117c6:	7bfb      	ldrb	r3, [r7, #15]
 80117c8:	2200      	movs	r2, #0
 80117ca:	2100      	movs	r1, #0
 80117cc:	6878      	ldr	r0, [r7, #4]
 80117ce:	f000 fae3 	bl	8011d98 <_ZN3USB7setAddrEhhh>
 80117d2:	4603      	mov	r3, r0
 80117d4:	73bb      	strb	r3, [r7, #14]

        if(rcode) {
 80117d6:	7bbb      	ldrb	r3, [r7, #14]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d009      	beq.n	80117f0 <_ZN3USB17DefaultAddressingEhhb+0xac>
                addrPool.FreeAddress(bAddress);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	7bfa      	ldrb	r2, [r7, #15]
 80117e0:	4611      	mov	r1, r2
 80117e2:	4618      	mov	r0, r3
 80117e4:	f000 fcd0 	bl	8012188 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 80117e8:	2300      	movs	r3, #0
 80117ea:	73fb      	strb	r3, [r7, #15]
                return rcode;
 80117ec:	7bbb      	ldrb	r3, [r7, #14]
 80117ee:	e000      	b.n	80117f2 <_ZN3USB17DefaultAddressingEhhb+0xae>
        }
        return 0;
 80117f0:	2300      	movs	r3, #0
};
 80117f2:	4618      	mov	r0, r3
 80117f4:	3718      	adds	r7, #24
 80117f6:	46bd      	mov	sp, r7
 80117f8:	bd80      	pop	{r7, pc}

080117fa <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 80117fa:	b590      	push	{r4, r7, lr}
 80117fc:	b085      	sub	sp, #20
 80117fe:	af00      	add	r7, sp, #0
 8011800:	6078      	str	r0, [r7, #4]
 8011802:	4608      	mov	r0, r1
 8011804:	4611      	mov	r1, r2
 8011806:	461a      	mov	r2, r3
 8011808:	4603      	mov	r3, r0
 801180a:	70fb      	strb	r3, [r7, #3]
 801180c:	460b      	mov	r3, r1
 801180e:	70bb      	strb	r3, [r7, #2]
 8011810:	4613      	mov	r3, r2
 8011812:	707b      	strb	r3, [r7, #1]
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 8011814:	2300      	movs	r3, #0
 8011816:	73fb      	strb	r3, [r7, #15]

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 8011818:	78fa      	ldrb	r2, [r7, #3]
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	321e      	adds	r2, #30
 801181e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011822:	78fa      	ldrb	r2, [r7, #3]
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	321e      	adds	r2, #30
 8011828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	3304      	adds	r3, #4
 8011830:	681c      	ldr	r4, [r3, #0]
 8011832:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011836:	787a      	ldrb	r2, [r7, #1]
 8011838:	78b9      	ldrb	r1, [r7, #2]
 801183a:	47a0      	blx	r4
 801183c:	4603      	mov	r3, r0
 801183e:	73bb      	strb	r3, [r7, #14]
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 8011840:	7bbb      	ldrb	r3, [r7, #14]
 8011842:	2be0      	cmp	r3, #224	; 0xe0
 8011844:	d11c      	bne.n	8011880 <_ZN3USB13AttemptConfigEhhhb+0x86>
                if(parent == 0) {
 8011846:	78bb      	ldrb	r3, [r7, #2]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d108      	bne.n	801185e <_ZN3USB13AttemptConfigEhhhb+0x64>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 801184c:	2201      	movs	r2, #1
 801184e:	21e8      	movs	r1, #232	; 0xe8
 8011850:	6878      	ldr	r0, [r7, #4]
 8011852:	f7ef ffd5 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 8011856:	2066      	movs	r0, #102	; 0x66
 8011858:	f7f0 fb02 	bl	8001e60 <HAL_Delay>
 801185c:	e022      	b.n	80118a4 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 801185e:	78ba      	ldrb	r2, [r7, #2]
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	321e      	adds	r2, #30
 8011864:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011868:	78ba      	ldrb	r2, [r7, #2]
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	321e      	adds	r2, #30
 801186e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	3314      	adds	r3, #20
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	787a      	ldrb	r2, [r7, #1]
 801187a:	4611      	mov	r1, r2
 801187c:	4798      	blx	r3
 801187e:	e011      	b.n	80118a4 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 8011880:	7bbb      	ldrb	r3, [r7, #14]
 8011882:	2b0d      	cmp	r3, #13
 8011884:	d109      	bne.n	801189a <_ZN3USB13AttemptConfigEhhhb+0xa0>
 8011886:	7bfb      	ldrb	r3, [r7, #15]
 8011888:	2b02      	cmp	r3, #2
 801188a:	d806      	bhi.n	801189a <_ZN3USB13AttemptConfigEhhhb+0xa0>
                delay(100);
 801188c:	2064      	movs	r0, #100	; 0x64
 801188e:	f7f0 fae7 	bl	8001e60 <HAL_Delay>
                retries++;
 8011892:	7bfb      	ldrb	r3, [r7, #15]
 8011894:	3301      	adds	r3, #1
 8011896:	73fb      	strb	r3, [r7, #15]
                goto again;
 8011898:	e7be      	b.n	8011818 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        } else if(rcode)
 801189a:	7bbb      	ldrb	r3, [r7, #14]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d001      	beq.n	80118a4 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                return rcode;
 80118a0:	7bbb      	ldrb	r3, [r7, #14]
 80118a2:	e03f      	b.n	8011924 <_ZN3USB13AttemptConfigEhhhb+0x12a>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 80118a4:	78fa      	ldrb	r2, [r7, #3]
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	321e      	adds	r2, #30
 80118aa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80118ae:	78fa      	ldrb	r2, [r7, #3]
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	321e      	adds	r2, #30
 80118b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	681c      	ldr	r4, [r3, #0]
 80118bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80118c0:	787a      	ldrb	r2, [r7, #1]
 80118c2:	78b9      	ldrb	r1, [r7, #2]
 80118c4:	47a0      	blx	r4
 80118c6:	4603      	mov	r3, r0
 80118c8:	73bb      	strb	r3, [r7, #14]
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 80118ca:	7bbb      	ldrb	r3, [r7, #14]
 80118cc:	2b0d      	cmp	r3, #13
 80118ce:	d109      	bne.n	80118e4 <_ZN3USB13AttemptConfigEhhhb+0xea>
 80118d0:	7bfb      	ldrb	r3, [r7, #15]
 80118d2:	2b02      	cmp	r3, #2
 80118d4:	d806      	bhi.n	80118e4 <_ZN3USB13AttemptConfigEhhhb+0xea>
                delay(100);
 80118d6:	2064      	movs	r0, #100	; 0x64
 80118d8:	f7f0 fac2 	bl	8001e60 <HAL_Delay>
                retries++;
 80118dc:	7bfb      	ldrb	r3, [r7, #15]
 80118de:	3301      	adds	r3, #1
 80118e0:	73fb      	strb	r3, [r7, #15]
                goto again;
 80118e2:	e799      	b.n	8011818 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        }
        if(rcode) {
 80118e4:	7bbb      	ldrb	r3, [r7, #14]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d01b      	beq.n	8011922 <_ZN3USB13AttemptConfigEhhhb+0x128>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 80118ea:	78bb      	ldrb	r3, [r7, #2]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d108      	bne.n	8011902 <_ZN3USB13AttemptConfigEhhhb+0x108>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 80118f0:	2201      	movs	r2, #1
 80118f2:	21e8      	movs	r1, #232	; 0xe8
 80118f4:	6878      	ldr	r0, [r7, #4]
 80118f6:	f7ef ff83 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 80118fa:	2066      	movs	r0, #102	; 0x66
 80118fc:	f7f0 fab0 	bl	8001e60 <HAL_Delay>
 8011900:	e00f      	b.n	8011922 <_ZN3USB13AttemptConfigEhhhb+0x128>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 8011902:	78ba      	ldrb	r2, [r7, #2]
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	321e      	adds	r2, #30
 8011908:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801190c:	78ba      	ldrb	r2, [r7, #2]
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	321e      	adds	r2, #30
 8011912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	3314      	adds	r3, #20
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	787a      	ldrb	r2, [r7, #1]
 801191e:	4611      	mov	r1, r2
 8011920:	4798      	blx	r3
                }
        }
        return rcode;
 8011922:	7bbb      	ldrb	r3, [r7, #14]
}
 8011924:	4618      	mov	r0, r3
 8011926:	3714      	adds	r7, #20
 8011928:	46bd      	mov	sp, r7
 801192a:	bd90      	pop	{r4, r7, pc}

0801192c <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 801192c:	b580      	push	{r7, lr}
 801192e:	b090      	sub	sp, #64	; 0x40
 8011930:	af02      	add	r7, sp, #8
 8011932:	6078      	str	r0, [r7, #4]
 8011934:	4608      	mov	r0, r1
 8011936:	4611      	mov	r1, r2
 8011938:	461a      	mov	r2, r3
 801193a:	4603      	mov	r3, r0
 801193c:	70fb      	strb	r3, [r7, #3]
 801193e:	460b      	mov	r3, r1
 8011940:	70bb      	strb	r3, [r7, #2]
 8011942:	4613      	mov	r3, r2
 8011944:	707b      	strb	r3, [r7, #1]
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 8011946:	2300      	movs	r3, #0
 8011948:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 801194c:	f107 030c 	add.w	r3, r7, #12
 8011950:	633b      	str	r3, [r7, #48]	; 0x30
        UsbDevice *p = NULL;
 8011952:	2300      	movs	r3, #0
 8011954:	62fb      	str	r3, [r7, #44]	; 0x2c
        EpInfo *oldep_ptr = NULL;
 8011956:	2300      	movs	r3, #0
 8011958:	62bb      	str	r3, [r7, #40]	; 0x28
        EpInfo epInfo;

        epInfo.epAddr = 0;
 801195a:	2300      	movs	r3, #0
 801195c:	723b      	strb	r3, [r7, #8]
        epInfo.maxPktSize = 8;
 801195e:	2308      	movs	r3, #8
 8011960:	727b      	strb	r3, [r7, #9]
        epInfo.bmSndToggle = 0;
 8011962:	7abb      	ldrb	r3, [r7, #10]
 8011964:	f36f 0300 	bfc	r3, #0, #1
 8011968:	72bb      	strb	r3, [r7, #10]
        epInfo.bmRcvToggle = 0;
 801196a:	7abb      	ldrb	r3, [r7, #10]
 801196c:	f36f 0341 	bfc	r3, #1, #1
 8011970:	72bb      	strb	r3, [r7, #10]
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 8011972:	7abb      	ldrb	r3, [r7, #10]
 8011974:	220f      	movs	r2, #15
 8011976:	f362 0387 	bfi	r3, r2, #2, #6
 801197a:	72bb      	strb	r3, [r7, #10]

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 801197c:	6878      	ldr	r0, [r7, #4]
 801197e:	f7fa fd13 	bl	800c3a8 <_ZN3USB14GetAddressPoolEv>
 8011982:	6278      	str	r0, [r7, #36]	; 0x24
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 8011984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	2100      	movs	r1, #0
 801198c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801198e:	4798      	blx	r3
 8011990:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(!p) {
 8011992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011994:	2b00      	cmp	r3, #0
 8011996:	d101      	bne.n	801199c <_ZN3USB11ConfiguringEhhb+0x70>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8011998:	23d6      	movs	r3, #214	; 0xd6
 801199a:	e15c      	b.n	8011c56 <_ZN3USB11ConfiguringEhhb+0x32a>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 801199c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	62bb      	str	r3, [r7, #40]	; 0x28

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 80119a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a4:	f107 0208 	add.w	r2, r7, #8
 80119a8:	601a      	str	r2, [r3, #0]

        p->lowspeed = lowspeed;
 80119aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ac:	787a      	ldrb	r2, [r7, #1]
 80119ae:	719a      	strb	r2, [r3, #6]
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 80119b0:	f107 030c 	add.w	r3, r7, #12
 80119b4:	9300      	str	r3, [sp, #0]
 80119b6:	2312      	movs	r3, #18
 80119b8:	2200      	movs	r2, #0
 80119ba:	2100      	movs	r1, #0
 80119bc:	6878      	ldr	r0, [r7, #4]
 80119be:	f000 f94e 	bl	8011c5e <_ZN3USB11getDevDescrEhhtPh>
 80119c2:	4603      	mov	r3, r0
 80119c4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 80119c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80119cc:	601a      	str	r2, [r3, #0]

        if(rcode) {
 80119ce:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d002      	beq.n	80119dc <_ZN3USB11ConfiguringEhhb+0xb0>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 80119d6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80119da:	e13c      	b.n	8011c56 <_ZN3USB11ConfiguringEhhb+0x32a>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 80119dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119de:	7a1a      	ldrb	r2, [r3, #8]
 80119e0:	7a5b      	ldrb	r3, [r3, #9]
 80119e2:	021b      	lsls	r3, r3, #8
 80119e4:	4313      	orrs	r3, r2
 80119e6:	847b      	strh	r3, [r7, #34]	; 0x22
        uint16_t pid = udd->idProduct;
 80119e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119ea:	7a9a      	ldrb	r2, [r3, #10]
 80119ec:	7adb      	ldrb	r3, [r3, #11]
 80119ee:	021b      	lsls	r3, r3, #8
 80119f0:	4313      	orrs	r3, r2
 80119f2:	843b      	strh	r3, [r7, #32]
        uint8_t klass = udd->bDeviceClass;
 80119f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119f6:	791b      	ldrb	r3, [r3, #4]
 80119f8:	77fb      	strb	r3, [r7, #31]
        uint8_t subklass = udd->bDeviceSubClass;
 80119fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119fc:	795b      	ldrb	r3, [r3, #5]
 80119fe:	77bb      	strb	r3, [r7, #30]
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8011a00:	2300      	movs	r3, #0
 8011a02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011a06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011a0a:	2b0f      	cmp	r3, #15
 8011a0c:	f200 8081 	bhi.w	8011b12 <_ZN3USB11ConfiguringEhhb+0x1e6>
                if(!devConfig[devConfigIndex]) continue; // no driver
 8011a10:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	321e      	adds	r2, #30
 8011a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d06e      	beq.n	8011afe <_ZN3USB11ConfiguringEhhb+0x1d2>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8011a20:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	321e      	adds	r2, #30
 8011a28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011a2c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	321e      	adds	r2, #30
 8011a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	3310      	adds	r3, #16
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	4608      	mov	r0, r1
 8011a40:	4798      	blx	r3
 8011a42:	4603      	mov	r3, r0
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	bf14      	ite	ne
 8011a48:	2301      	movne	r3, #1
 8011a4a:	2300      	moveq	r3, #0
 8011a4c:	b2db      	uxtb	r3, r3
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d157      	bne.n	8011b02 <_ZN3USB11ConfiguringEhhb+0x1d6>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 8011a52:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	321e      	adds	r2, #30
 8011a5a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011a5e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	321e      	adds	r2, #30
 8011a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	3320      	adds	r3, #32
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	7fba      	ldrb	r2, [r7, #30]
 8011a72:	4611      	mov	r1, r2
 8011a74:	4798      	blx	r3
 8011a76:	4603      	mov	r3, r0
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d02b      	beq.n	8011ad4 <_ZN3USB11ConfiguringEhhb+0x1a8>
 8011a7c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	321e      	adds	r2, #30
 8011a84:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011a88:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	321e      	adds	r2, #30
 8011a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	3318      	adds	r3, #24
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	8c3a      	ldrh	r2, [r7, #32]
 8011a9c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8011a9e:	4798      	blx	r3
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d114      	bne.n	8011ad0 <_ZN3USB11ConfiguringEhhb+0x1a4>
 8011aa6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	321e      	adds	r2, #30
 8011aae:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011ab2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	321e      	adds	r2, #30
 8011aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	331c      	adds	r3, #28
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	7ffa      	ldrb	r2, [r7, #31]
 8011ac6:	4611      	mov	r1, r2
 8011ac8:	4798      	blx	r3
 8011aca:	4603      	mov	r3, r0
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d001      	beq.n	8011ad4 <_ZN3USB11ConfiguringEhhb+0x1a8>
 8011ad0:	2301      	movs	r3, #1
 8011ad2:	e000      	b.n	8011ad6 <_ZN3USB11ConfiguringEhhb+0x1aa>
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d014      	beq.n	8011b04 <_ZN3USB11ConfiguringEhhb+0x1d8>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8011ada:	78b8      	ldrb	r0, [r7, #2]
 8011adc:	78fa      	ldrb	r2, [r7, #3]
 8011ade:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8011ae2:	787b      	ldrb	r3, [r7, #1]
 8011ae4:	9300      	str	r3, [sp, #0]
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	6878      	ldr	r0, [r7, #4]
 8011aea:	f7ff fe86 	bl	80117fa <_ZN3USB13AttemptConfigEhhhb>
 8011aee:	4603      	mov	r3, r0
 8011af0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 8011af4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011af8:	2bd1      	cmp	r3, #209	; 0xd1
 8011afa:	d109      	bne.n	8011b10 <_ZN3USB11ConfiguringEhhb+0x1e4>
 8011afc:	e002      	b.n	8011b04 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(!devConfig[devConfigIndex]) continue; // no driver
 8011afe:	bf00      	nop
 8011b00:	e000      	b.n	8011b04 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8011b02:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8011b04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011b08:	3301      	adds	r3, #1
 8011b0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011b0e:	e77a      	b.n	8011a06 <_ZN3USB11ConfiguringEhhb+0xda>
                                break;
 8011b10:	bf00      	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 8011b12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011b16:	2b0f      	cmp	r3, #15
 8011b18:	d802      	bhi.n	8011b20 <_ZN3USB11ConfiguringEhhb+0x1f4>
                return rcode;
 8011b1a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011b1e:	e09a      	b.n	8011c56 <_ZN3USB11ConfiguringEhhb+0x32a>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8011b20:	2300      	movs	r3, #0
 8011b22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011b26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011b2a:	2b0f      	cmp	r3, #15
 8011b2c:	f200 8088 	bhi.w	8011c40 <_ZN3USB11ConfiguringEhhb+0x314>
                if(!devConfig[devConfigIndex]) continue;
 8011b30:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	321e      	adds	r2, #30
 8011b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d074      	beq.n	8011c2a <_ZN3USB11ConfiguringEhhb+0x2fe>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8011b40:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	321e      	adds	r2, #30
 8011b48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011b4c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	321e      	adds	r2, #30
 8011b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	3310      	adds	r3, #16
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	4608      	mov	r0, r1
 8011b60:	4798      	blx	r3
 8011b62:	4603      	mov	r3, r0
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	bf14      	ite	ne
 8011b68:	2301      	movne	r3, #1
 8011b6a:	2300      	moveq	r3, #0
 8011b6c:	b2db      	uxtb	r3, r3
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d15d      	bne.n	8011c2e <_ZN3USB11ConfiguringEhhb+0x302>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8011b72:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	321e      	adds	r2, #30
 8011b7a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011b7e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	321e      	adds	r2, #30
 8011b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	3320      	adds	r3, #32
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	7fba      	ldrb	r2, [r7, #30]
 8011b92:	4611      	mov	r1, r2
 8011b94:	4798      	blx	r3
 8011b96:	4603      	mov	r3, r0
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d02b      	beq.n	8011bf4 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8011b9c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	321e      	adds	r2, #30
 8011ba4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011ba8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	321e      	adds	r2, #30
 8011bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	3318      	adds	r3, #24
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	8c3a      	ldrh	r2, [r7, #32]
 8011bbc:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8011bbe:	4798      	blx	r3
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d114      	bne.n	8011bf0 <_ZN3USB11ConfiguringEhhb+0x2c4>
 8011bc6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	321e      	adds	r2, #30
 8011bce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011bd2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	321e      	adds	r2, #30
 8011bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	331c      	adds	r3, #28
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	7ffa      	ldrb	r2, [r7, #31]
 8011be6:	4611      	mov	r1, r2
 8011be8:	4798      	blx	r3
 8011bea:	4603      	mov	r3, r0
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d001      	beq.n	8011bf4 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8011bf0:	2301      	movs	r3, #1
 8011bf2:	e000      	b.n	8011bf6 <_ZN3USB11ConfiguringEhhb+0x2ca>
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d11b      	bne.n	8011c32 <_ZN3USB11ConfiguringEhhb+0x306>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8011bfa:	78b8      	ldrb	r0, [r7, #2]
 8011bfc:	78fa      	ldrb	r2, [r7, #3]
 8011bfe:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8011c02:	787b      	ldrb	r3, [r7, #1]
 8011c04:	9300      	str	r3, [sp, #0]
 8011c06:	4603      	mov	r3, r0
 8011c08:	6878      	ldr	r0, [r7, #4]
 8011c0a:	f7ff fdf6 	bl	80117fa <_ZN3USB13AttemptConfigEhhhb>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 8011c14:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011c18:	2bd1      	cmp	r3, #209	; 0xd1
 8011c1a:	d00b      	beq.n	8011c34 <_ZN3USB11ConfiguringEhhb+0x308>
 8011c1c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011c20:	2bd9      	cmp	r3, #217	; 0xd9
 8011c22:	d007      	beq.n	8011c34 <_ZN3USB11ConfiguringEhhb+0x308>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 8011c24:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011c28:	e015      	b.n	8011c56 <_ZN3USB11ConfiguringEhhb+0x32a>
                if(!devConfig[devConfigIndex]) continue;
 8011c2a:	bf00      	nop
 8011c2c:	e002      	b.n	8011c34 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8011c2e:	bf00      	nop
 8011c30:	e000      	b.n	8011c34 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8011c32:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8011c34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c38:	3301      	adds	r3, #1
 8011c3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011c3e:	e772      	b.n	8011b26 <_ZN3USB11ConfiguringEhhb+0x1fa>
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 8011c40:	787b      	ldrb	r3, [r7, #1]
 8011c42:	78ba      	ldrb	r2, [r7, #2]
 8011c44:	78f9      	ldrb	r1, [r7, #3]
 8011c46:	6878      	ldr	r0, [r7, #4]
 8011c48:	f7ff fd7c 	bl	8011744 <_ZN3USB17DefaultAddressingEhhb>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        return rcode;
 8011c52:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 8011c56:	4618      	mov	r0, r3
 8011c58:	3738      	adds	r7, #56	; 0x38
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	bd80      	pop	{r7, pc}

08011c5e <_ZN3USB11getDevDescrEhhtPh>:
}

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 8011c5e:	b580      	push	{r7, lr}
 8011c60:	b08a      	sub	sp, #40	; 0x28
 8011c62:	af08      	add	r7, sp, #32
 8011c64:	6078      	str	r0, [r7, #4]
 8011c66:	4608      	mov	r0, r1
 8011c68:	4611      	mov	r1, r2
 8011c6a:	461a      	mov	r2, r3
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	70fb      	strb	r3, [r7, #3]
 8011c70:	460b      	mov	r3, r1
 8011c72:	70bb      	strb	r3, [r7, #2]
 8011c74:	4613      	mov	r3, r2
 8011c76:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 8011c78:	78ba      	ldrb	r2, [r7, #2]
 8011c7a:	78f9      	ldrb	r1, [r7, #3]
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	9307      	str	r3, [sp, #28]
 8011c80:	693b      	ldr	r3, [r7, #16]
 8011c82:	9306      	str	r3, [sp, #24]
 8011c84:	883b      	ldrh	r3, [r7, #0]
 8011c86:	9305      	str	r3, [sp, #20]
 8011c88:	883b      	ldrh	r3, [r7, #0]
 8011c8a:	9304      	str	r3, [sp, #16]
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	9303      	str	r3, [sp, #12]
 8011c90:	2301      	movs	r3, #1
 8011c92:	9302      	str	r3, [sp, #8]
 8011c94:	2300      	movs	r3, #0
 8011c96:	9301      	str	r3, [sp, #4]
 8011c98:	2306      	movs	r3, #6
 8011c9a:	9300      	str	r3, [sp, #0]
 8011c9c:	2380      	movs	r3, #128	; 0x80
 8011c9e:	6878      	ldr	r0, [r7, #4]
 8011ca0:	f7fe fffd 	bl	8010c9e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011ca4:	4603      	mov	r3, r0
}
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	3708      	adds	r7, #8
 8011caa:	46bd      	mov	sp, r7
 8011cac:	bd80      	pop	{r7, pc}

08011cae <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 8011cae:	b580      	push	{r7, lr}
 8011cb0:	b08a      	sub	sp, #40	; 0x28
 8011cb2:	af08      	add	r7, sp, #32
 8011cb4:	6078      	str	r0, [r7, #4]
 8011cb6:	4608      	mov	r0, r1
 8011cb8:	4611      	mov	r1, r2
 8011cba:	461a      	mov	r2, r3
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	70fb      	strb	r3, [r7, #3]
 8011cc0:	460b      	mov	r3, r1
 8011cc2:	70bb      	strb	r3, [r7, #2]
 8011cc4:	4613      	mov	r3, r2
 8011cc6:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 8011cc8:	78ba      	ldrb	r2, [r7, #2]
 8011cca:	78f9      	ldrb	r1, [r7, #3]
 8011ccc:	2300      	movs	r3, #0
 8011cce:	9307      	str	r3, [sp, #28]
 8011cd0:	697b      	ldr	r3, [r7, #20]
 8011cd2:	9306      	str	r3, [sp, #24]
 8011cd4:	883b      	ldrh	r3, [r7, #0]
 8011cd6:	9305      	str	r3, [sp, #20]
 8011cd8:	883b      	ldrh	r3, [r7, #0]
 8011cda:	9304      	str	r3, [sp, #16]
 8011cdc:	2300      	movs	r3, #0
 8011cde:	9303      	str	r3, [sp, #12]
 8011ce0:	2302      	movs	r3, #2
 8011ce2:	9302      	str	r3, [sp, #8]
 8011ce4:	7c3b      	ldrb	r3, [r7, #16]
 8011ce6:	9301      	str	r3, [sp, #4]
 8011ce8:	2306      	movs	r3, #6
 8011cea:	9300      	str	r3, [sp, #0]
 8011cec:	2380      	movs	r3, #128	; 0x80
 8011cee:	6878      	ldr	r0, [r7, #4]
 8011cf0:	f7fe ffd5 	bl	8010c9e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011cf4:	4603      	mov	r3, r0
}
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	3708      	adds	r7, #8
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	bd80      	pop	{r7, pc}

08011cfe <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 8011cfe:	b580      	push	{r7, lr}
 8011d00:	b09e      	sub	sp, #120	; 0x78
 8011d02:	af08      	add	r7, sp, #32
 8011d04:	6078      	str	r0, [r7, #4]
 8011d06:	4608      	mov	r0, r1
 8011d08:	4611      	mov	r1, r2
 8011d0a:	461a      	mov	r2, r3
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	70fb      	strb	r3, [r7, #3]
 8011d10:	460b      	mov	r3, r1
 8011d12:	70bb      	strb	r3, [r7, #2]
 8011d14:	4613      	mov	r3, r2
 8011d16:	707b      	strb	r3, [r7, #1]
        const uint8_t bufSize = 64;
 8011d18:	2340      	movs	r3, #64	; 0x40
 8011d1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 8011d1e:	f107 030c 	add.w	r3, r7, #12
 8011d22:	653b      	str	r3, [r7, #80]	; 0x50

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 8011d24:	78ba      	ldrb	r2, [r7, #2]
 8011d26:	78f9      	ldrb	r1, [r7, #3]
 8011d28:	f107 030c 	add.w	r3, r7, #12
 8011d2c:	9301      	str	r3, [sp, #4]
 8011d2e:	787b      	ldrb	r3, [r7, #1]
 8011d30:	9300      	str	r3, [sp, #0]
 8011d32:	2309      	movs	r3, #9
 8011d34:	6878      	ldr	r0, [r7, #4]
 8011d36:	f7ff ffba 	bl	8011cae <_ZN3USB12getConfDescrEhhthPh>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if(ret)
 8011d40:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d002      	beq.n	8011d4e <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x50>
                return ret;
 8011d48:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011d4c:	e020      	b.n	8011d90 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x92>

        uint16_t total = ucd->wTotalLength;
 8011d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d50:	789a      	ldrb	r2, [r3, #2]
 8011d52:	78db      	ldrb	r3, [r3, #3]
 8011d54:	021b      	lsls	r3, r3, #8
 8011d56:	4313      	orrs	r3, r2
 8011d58:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 8011d5c:	78ba      	ldrb	r2, [r7, #2]
 8011d5e:	78f9      	ldrb	r1, [r7, #3]
 8011d60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011d62:	9307      	str	r3, [sp, #28]
 8011d64:	f107 030c 	add.w	r3, r7, #12
 8011d68:	9306      	str	r3, [sp, #24]
 8011d6a:	2340      	movs	r3, #64	; 0x40
 8011d6c:	9305      	str	r3, [sp, #20]
 8011d6e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8011d72:	9304      	str	r3, [sp, #16]
 8011d74:	2300      	movs	r3, #0
 8011d76:	9303      	str	r3, [sp, #12]
 8011d78:	2302      	movs	r3, #2
 8011d7a:	9302      	str	r3, [sp, #8]
 8011d7c:	787b      	ldrb	r3, [r7, #1]
 8011d7e:	9301      	str	r3, [sp, #4]
 8011d80:	2306      	movs	r3, #6
 8011d82:	9300      	str	r3, [sp, #0]
 8011d84:	2380      	movs	r3, #128	; 0x80
 8011d86:	6878      	ldr	r0, [r7, #4]
 8011d88:	f7fe ff89 	bl	8010c9e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	bf00      	nop
}
 8011d90:	4618      	mov	r0, r3
 8011d92:	3758      	adds	r7, #88	; 0x58
 8011d94:	46bd      	mov	sp, r7
 8011d96:	bd80      	pop	{r7, pc}

08011d98 <_ZN3USB7setAddrEhhh>:
uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
}
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b08c      	sub	sp, #48	; 0x30
 8011d9c:	af08      	add	r7, sp, #32
 8011d9e:	6078      	str	r0, [r7, #4]
 8011da0:	4608      	mov	r0, r1
 8011da2:	4611      	mov	r1, r2
 8011da4:	461a      	mov	r2, r3
 8011da6:	4603      	mov	r3, r0
 8011da8:	70fb      	strb	r3, [r7, #3]
 8011daa:	460b      	mov	r3, r1
 8011dac:	70bb      	strb	r3, [r7, #2]
 8011dae:	4613      	mov	r3, r2
 8011db0:	707b      	strb	r3, [r7, #1]
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 8011db2:	78ba      	ldrb	r2, [r7, #2]
 8011db4:	78f9      	ldrb	r1, [r7, #3]
 8011db6:	2300      	movs	r3, #0
 8011db8:	9307      	str	r3, [sp, #28]
 8011dba:	2300      	movs	r3, #0
 8011dbc:	9306      	str	r3, [sp, #24]
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	9305      	str	r3, [sp, #20]
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	9304      	str	r3, [sp, #16]
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	9303      	str	r3, [sp, #12]
 8011dca:	2300      	movs	r3, #0
 8011dcc:	9302      	str	r3, [sp, #8]
 8011dce:	787b      	ldrb	r3, [r7, #1]
 8011dd0:	9301      	str	r3, [sp, #4]
 8011dd2:	2305      	movs	r3, #5
 8011dd4:	9300      	str	r3, [sp, #0]
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	6878      	ldr	r0, [r7, #4]
 8011dda:	f7fe ff60 	bl	8010c9e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011dde:	4603      	mov	r3, r0
 8011de0:	73fb      	strb	r3, [r7, #15]
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 8011de2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8011de6:	f7f0 f83b 	bl	8001e60 <HAL_Delay>
        return rcode;
 8011dea:	7bfb      	ldrb	r3, [r7, #15]
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 8011dec:	4618      	mov	r0, r3
 8011dee:	3710      	adds	r7, #16
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bd80      	pop	{r7, pc}

08011df4 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b08a      	sub	sp, #40	; 0x28
 8011df8:	af08      	add	r7, sp, #32
 8011dfa:	6078      	str	r0, [r7, #4]
 8011dfc:	4608      	mov	r0, r1
 8011dfe:	4611      	mov	r1, r2
 8011e00:	461a      	mov	r2, r3
 8011e02:	4603      	mov	r3, r0
 8011e04:	70fb      	strb	r3, [r7, #3]
 8011e06:	460b      	mov	r3, r1
 8011e08:	70bb      	strb	r3, [r7, #2]
 8011e0a:	4613      	mov	r3, r2
 8011e0c:	707b      	strb	r3, [r7, #1]
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 8011e0e:	78ba      	ldrb	r2, [r7, #2]
 8011e10:	78f9      	ldrb	r1, [r7, #3]
 8011e12:	2300      	movs	r3, #0
 8011e14:	9307      	str	r3, [sp, #28]
 8011e16:	2300      	movs	r3, #0
 8011e18:	9306      	str	r3, [sp, #24]
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	9305      	str	r3, [sp, #20]
 8011e1e:	2300      	movs	r3, #0
 8011e20:	9304      	str	r3, [sp, #16]
 8011e22:	2300      	movs	r3, #0
 8011e24:	9303      	str	r3, [sp, #12]
 8011e26:	2300      	movs	r3, #0
 8011e28:	9302      	str	r3, [sp, #8]
 8011e2a:	787b      	ldrb	r3, [r7, #1]
 8011e2c:	9301      	str	r3, [sp, #4]
 8011e2e:	2309      	movs	r3, #9
 8011e30:	9300      	str	r3, [sp, #0]
 8011e32:	2300      	movs	r3, #0
 8011e34:	6878      	ldr	r0, [r7, #4]
 8011e36:	f7fe ff32 	bl	8010c9e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011e3a:	4603      	mov	r3, r0
}
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	3708      	adds	r7, #8
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd80      	pop	{r7, pc}

08011e44 <_ZN8MAX3421eI3P102P9EC1Ev>:
MAX3421e< SPI_SS, INTR >::MAX3421e() {
 8011e44:	b480      	push	{r7}
 8011e46:	b083      	sub	sp, #12
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
};
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	4618      	mov	r0, r3
 8011e50:	370c      	adds	r7, #12
 8011e52:	46bd      	mov	sp, r7
 8011e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e58:	4770      	bx	lr
	...

08011e5c <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 8011e5c:	b480      	push	{r7}
 8011e5e:	b083      	sub	sp, #12
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
 8011e64:	4a04      	ldr	r2, [pc, #16]	; (8011e78 <_ZN11AddressPoolC1Ev+0x1c>)
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	601a      	str	r2, [r3, #0]
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	370c      	adds	r7, #12
 8011e70:	46bd      	mov	sp, r7
 8011e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e76:	4770      	bx	lr
 8011e78:	080129b0 	.word	0x080129b0

08011e7c <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b082      	sub	sp, #8
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	4618      	mov	r0, r3
 8011e88:	f7ff ffe8 	bl	8011e5c <_ZN11AddressPoolC1Ev>
 8011e8c:	4a17      	ldr	r2, [pc, #92]	; (8011eec <_ZN15AddressPoolImplILh16EEC1Ev+0x70>)
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	601a      	str	r2, [r3, #0]
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	2200      	movs	r2, #0
 8011e96:	71da      	strb	r2, [r3, #7]
                // Zero address is reserved
                InitEntry(0);
 8011e98:	2100      	movs	r1, #0
 8011e9a:	6878      	ldr	r0, [r7, #4]
 8011e9c:	f000 f990 	bl	80121c0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	731a      	strb	r2, [r3, #12]
                thePool[0].epinfo = &dev0ep;
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	1d1a      	adds	r2, r3, #4
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	609a      	str	r2, [r3, #8]
                dev0ep.epAddr = 0;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	711a      	strb	r2, [r3, #4]
                dev0ep.maxPktSize = 8;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	2208      	movs	r2, #8
 8011eb8:	715a      	strb	r2, [r3, #5]
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 8011eba:	687a      	ldr	r2, [r7, #4]
 8011ebc:	7993      	ldrb	r3, [r2, #6]
 8011ebe:	f36f 0300 	bfc	r3, #0, #1
 8011ec2:	7193      	strb	r3, [r2, #6]
                dev0ep.bmRcvToggle = 0;
 8011ec4:	687a      	ldr	r2, [r7, #4]
 8011ec6:	7993      	ldrb	r3, [r2, #6]
 8011ec8:	f36f 0341 	bfc	r3, #1, #1
 8011ecc:	7193      	strb	r3, [r2, #6]
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 8011ece:	687a      	ldr	r2, [r7, #4]
 8011ed0:	7993      	ldrb	r3, [r2, #6]
 8011ed2:	210f      	movs	r1, #15
 8011ed4:	f361 0387 	bfi	r3, r1, #2, #6
 8011ed8:	7193      	strb	r3, [r2, #6]

                InitAllAddresses();
 8011eda:	6878      	ldr	r0, [r7, #4]
 8011edc:	f000 f9a1 	bl	8012222 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	3708      	adds	r7, #8
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	bd80      	pop	{r7, pc}
 8011eea:	bf00      	nop
 8011eec:	0801299c 	.word	0x0801299c

08011ef0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b084      	sub	sp, #16
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]
 8011ef8:	460b      	mov	r3, r1
 8011efa:	70fb      	strb	r3, [r7, #3]
                if(!addr)
 8011efc:	78fb      	ldrb	r3, [r7, #3]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d102      	bne.n	8011f08 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x18>
                        return thePool;
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	3308      	adds	r3, #8
 8011f06:	e014      	b.n	8011f32 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x42>

                uint8_t index = FindAddressIndex(addr);
 8011f08:	78fb      	ldrb	r3, [r7, #3]
 8011f0a:	4619      	mov	r1, r3
 8011f0c:	6878      	ldr	r0, [r7, #4]
 8011f0e:	f000 f9a1 	bl	8012254 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8011f12:	4603      	mov	r3, r0
 8011f14:	73fb      	strb	r3, [r7, #15]

                return (!index) ? NULL : thePool + index;
 8011f16:	7bfb      	ldrb	r3, [r7, #15]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d008      	beq.n	8011f2e <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x3e>
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	f103 0108 	add.w	r1, r3, #8
 8011f22:	7bfa      	ldrb	r2, [r7, #15]
 8011f24:	4613      	mov	r3, r2
 8011f26:	00db      	lsls	r3, r3, #3
 8011f28:	1a9b      	subs	r3, r3, r2
 8011f2a:	440b      	add	r3, r1
 8011f2c:	e000      	b.n	8011f30 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x40>
 8011f2e:	2300      	movs	r3, #0
 8011f30:	bf00      	nop
        };
 8011f32:	4618      	mov	r0, r3
 8011f34:	3710      	adds	r7, #16
 8011f36:	46bd      	mov	sp, r7
 8011f38:	bd80      	pop	{r7, pc}
	...

08011f3c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b086      	sub	sp, #24
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	60f8      	str	r0, [r7, #12]
 8011f44:	607b      	str	r3, [r7, #4]
 8011f46:	460b      	mov	r3, r1
 8011f48:	72fb      	strb	r3, [r7, #11]
 8011f4a:	4613      	mov	r3, r2
 8011f4c:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 8011f4e:	f7ee fca7 	bl	80008a0 <_ZN3P105ClearEv>
        uint8_t data = reg | 0x02;
 8011f52:	7afb      	ldrb	r3, [r7, #11]
 8011f54:	f043 0302 	orr.w	r3, r3, #2
 8011f58:	b2db      	uxtb	r3, r3
 8011f5a:	75fb      	strb	r3, [r7, #23]
        HAL_SPI_Transmit(&SPI_Handle, &data, 1, HAL_MAX_DELAY);
 8011f5c:	f107 0117 	add.w	r1, r7, #23
 8011f60:	f04f 33ff 	mov.w	r3, #4294967295
 8011f64:	2201      	movs	r2, #1
 8011f66:	480b      	ldr	r0, [pc, #44]	; (8011f94 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 8011f68:	f7f2 fd4b 	bl	8004a02 <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 8011f6c:	7abb      	ldrb	r3, [r7, #10]
 8011f6e:	b29a      	uxth	r2, r3
 8011f70:	f04f 33ff 	mov.w	r3, #4294967295
 8011f74:	6879      	ldr	r1, [r7, #4]
 8011f76:	4807      	ldr	r0, [pc, #28]	; (8011f94 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 8011f78:	f7f2 fd43 	bl	8004a02 <HAL_SPI_Transmit>
        data_p += nbytes;
 8011f7c:	7abb      	ldrb	r3, [r7, #10]
 8011f7e:	687a      	ldr	r2, [r7, #4]
 8011f80:	4413      	add	r3, r2
 8011f82:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 8011f84:	f7ee fc80 	bl	8000888 <_ZN3P103SetEv>
        return ( data_p);
 8011f88:	687b      	ldr	r3, [r7, #4]
}
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	3718      	adds	r7, #24
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bd80      	pop	{r7, pc}
 8011f92:	bf00      	nop
 8011f94:	200002d4 	.word	0x200002d4

08011f98 <_Z10D_PrintHexIhEvT_i>:
                mask >>= 4;
        }
        prn->print((T)val, HEX);
}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 8011f98:	b480      	push	{r7}
 8011f9a:	b083      	sub	sp, #12
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	6039      	str	r1, [r7, #0]
 8011fa2:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 8011fa4:	bf00      	nop
 8011fa6:	370c      	adds	r7, #12
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fae:	4770      	bx	lr

08011fb0 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b084      	sub	sp, #16
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	60f8      	str	r0, [r7, #12]
 8011fb8:	607b      	str	r3, [r7, #4]
 8011fba:	460b      	mov	r3, r1
 8011fbc:	72fb      	strb	r3, [r7, #11]
 8011fbe:	4613      	mov	r3, r2
 8011fc0:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 8011fc2:	f7ee fc6d 	bl	80008a0 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8011fc6:	f107 010b 	add.w	r1, r7, #11
 8011fca:	f04f 33ff 	mov.w	r3, #4294967295
 8011fce:	2201      	movs	r2, #1
 8011fd0:	480d      	ldr	r0, [pc, #52]	; (8012008 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 8011fd2:	f7f2 fd16 	bl	8004a02 <HAL_SPI_Transmit>
        memset(data_p, 0, nbytes); // Make sure we send out empty bytes
 8011fd6:	7abb      	ldrb	r3, [r7, #10]
 8011fd8:	461a      	mov	r2, r3
 8011fda:	2100      	movs	r1, #0
 8011fdc:	6878      	ldr	r0, [r7, #4]
 8011fde:	f000 fa91 	bl	8012504 <memset>
        HAL_SPI_Receive(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 8011fe2:	7abb      	ldrb	r3, [r7, #10]
 8011fe4:	b29a      	uxth	r2, r3
 8011fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8011fea:	6879      	ldr	r1, [r7, #4]
 8011fec:	4806      	ldr	r0, [pc, #24]	; (8012008 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 8011fee:	f7f2 fe44 	bl	8004c7a <HAL_SPI_Receive>
        data_p += nbytes;
 8011ff2:	7abb      	ldrb	r3, [r7, #10]
 8011ff4:	687a      	ldr	r2, [r7, #4]
 8011ff6:	4413      	add	r3, r2
 8011ff8:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 8011ffa:	f7ee fc45 	bl	8000888 <_ZN3P103SetEv>
        return ( data_p);
 8011ffe:	687b      	ldr	r3, [r7, #4]
}
 8012000:	4618      	mov	r0, r3
 8012002:	3710      	adds	r7, #16
 8012004:	46bd      	mov	sp, r7
 8012006:	bd80      	pop	{r7, pc}
 8012008:	200002d4 	.word	0x200002d4

0801200c <_ZN8MAX3421eI3P102P9E4TaskEv>:

/* MAX3421 state change task and interrupt handler */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::Task(void) {
 801200c:	b580      	push	{r7, lr}
 801200e:	b084      	sub	sp, #16
 8012010:	af00      	add	r7, sp, #0
 8012012:	6078      	str	r0, [r7, #4]
        uint8_t rcode = 0;
 8012014:	2300      	movs	r3, #0
 8012016:	73fb      	strb	r3, [r7, #15]
        uint8_t pinvalue;
        //USB_HOST_SERIAL.print("Vbus state: ");
        //USB_HOST_SERIAL.println( vbusState, HEX );
        pinvalue = INTR::IsSet(); //Read();
 8012018:	f7fe fd46 	bl	8010aa8 <_ZN2P95IsSetEv>
 801201c:	4603      	mov	r3, r0
 801201e:	73bb      	strb	r3, [r7, #14]
        //pinvalue = digitalRead( MAX_INT );
        if(pinvalue == 0) {
 8012020:	7bbb      	ldrb	r3, [r7, #14]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d104      	bne.n	8012030 <_ZN8MAX3421eI3P102P9E4TaskEv+0x24>
                rcode = IntHandler();
 8012026:	6878      	ldr	r0, [r7, #4]
 8012028:	f000 f937 	bl	801229a <_ZN8MAX3421eI3P102P9E10IntHandlerEv>
 801202c:	4603      	mov	r3, r0
 801202e:	73fb      	strb	r3, [r7, #15]
        //    pinvalue = digitalRead( MAX_GPX );
        //    if( pinvalue == LOW ) {
        //        GpxHandler();
        //    }
        //    usbSM();                                //USB state machine
        return ( rcode);
 8012030:	7bfb      	ldrb	r3, [r7, #15]
}
 8012032:	4618      	mov	r0, r3
 8012034:	3710      	adds	r7, #16
 8012036:	46bd      	mov	sp, r7
 8012038:	bd80      	pop	{r7, pc}
	...

0801203c <_ZN8MAX3421eI3P102P9E12getVbusStateEv>:
        uint8_t getVbusState(void) {
 801203c:	b480      	push	{r7}
 801203e:	b083      	sub	sp, #12
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
                return vbusState;
 8012044:	4b03      	ldr	r3, [pc, #12]	; (8012054 <_ZN8MAX3421eI3P102P9E12getVbusStateEv+0x18>)
 8012046:	781b      	ldrb	r3, [r3, #0]
        };
 8012048:	4618      	mov	r0, r3
 801204a:	370c      	adds	r7, #12
 801204c:	46bd      	mov	sp, r7
 801204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012052:	4770      	bx	lr
 8012054:	20000650 	.word	0x20000650

08012058 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 8012058:	b580      	push	{r7, lr}
 801205a:	b084      	sub	sp, #16
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
 8012060:	4608      	mov	r0, r1
 8012062:	4611      	mov	r1, r2
 8012064:	461a      	mov	r2, r3
 8012066:	4603      	mov	r3, r0
 8012068:	70fb      	strb	r3, [r7, #3]
 801206a:	460b      	mov	r3, r1
 801206c:	70bb      	strb	r3, [r7, #2]
 801206e:	4613      	mov	r3, r2
 8012070:	707b      	strb	r3, [r7, #1]
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 8012072:	78fb      	ldrb	r3, [r7, #3]
 8012074:	733b      	strb	r3, [r7, #12]
                if(_parent.bmReserved || port > 7)
 8012076:	7b3b      	ldrb	r3, [r7, #12]
 8012078:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801207c:	b2db      	uxtb	r3, r3
 801207e:	2b00      	cmp	r3, #0
 8012080:	d102      	bne.n	8012088 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x30>
 8012082:	787b      	ldrb	r3, [r7, #1]
 8012084:	2b07      	cmp	r3, #7
 8012086:	d901      	bls.n	801208c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x34>
                        //if(parent > 127 || port > 7)
                        return 0;
 8012088:	2300      	movs	r3, #0
 801208a:	e079      	b.n	8012180 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(is_hub && hubCounter == 7)
 801208c:	78bb      	ldrb	r3, [r7, #2]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d005      	beq.n	801209e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	79db      	ldrb	r3, [r3, #7]
 8012096:	2b07      	cmp	r3, #7
 8012098:	d101      	bne.n	801209e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
                        return 0;
 801209a:	2300      	movs	r3, #0
 801209c:	e070      	b.n	8012180 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 801209e:	2100      	movs	r1, #0
 80120a0:	6878      	ldr	r0, [r7, #4]
 80120a2:	f000 f8d7 	bl	8012254 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 80120a6:	4603      	mov	r3, r0
 80120a8:	73fb      	strb	r3, [r7, #15]

                if(!index) // if empty entry is not found
 80120aa:	7bfb      	ldrb	r3, [r7, #15]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d101      	bne.n	80120b4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x5c>
                        return 0;
 80120b0:	2300      	movs	r3, #0
 80120b2:	e065      	b.n	8012180 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(_parent.devAddress == 0) {
 80120b4:	7b3b      	ldrb	r3, [r7, #12]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d124      	bne.n	8012104 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
                        if(is_hub) {
 80120ba:	78bb      	ldrb	r3, [r7, #2]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d00f      	beq.n	80120e0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x88>
                                thePool[index].address.devAddress = 0x41;
 80120c0:	7bfa      	ldrb	r2, [r7, #15]
 80120c2:	6879      	ldr	r1, [r7, #4]
 80120c4:	4613      	mov	r3, r2
 80120c6:	00db      	lsls	r3, r3, #3
 80120c8:	1a9b      	subs	r3, r3, r2
 80120ca:	440b      	add	r3, r1
 80120cc:	330c      	adds	r3, #12
 80120ce:	2241      	movs	r2, #65	; 0x41
 80120d0:	701a      	strb	r2, [r3, #0]
                                hubCounter++;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	79db      	ldrb	r3, [r3, #7]
 80120d6:	3301      	adds	r3, #1
 80120d8:	b2da      	uxtb	r2, r3
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	71da      	strb	r2, [r3, #7]
 80120de:	e008      	b.n	80120f2 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                        } else
                                thePool[index].address.devAddress = 1;
 80120e0:	7bfa      	ldrb	r2, [r7, #15]
 80120e2:	6879      	ldr	r1, [r7, #4]
 80120e4:	4613      	mov	r3, r2
 80120e6:	00db      	lsls	r3, r3, #3
 80120e8:	1a9b      	subs	r3, r3, r2
 80120ea:	440b      	add	r3, r1
 80120ec:	330c      	adds	r3, #12
 80120ee:	2201      	movs	r2, #1
 80120f0:	701a      	strb	r2, [r3, #0]

                        return thePool[index].address.devAddress;
 80120f2:	7bfa      	ldrb	r2, [r7, #15]
 80120f4:	6879      	ldr	r1, [r7, #4]
 80120f6:	4613      	mov	r3, r2
 80120f8:	00db      	lsls	r3, r3, #3
 80120fa:	1a9b      	subs	r3, r3, r2
 80120fc:	440b      	add	r3, r1
 80120fe:	330c      	adds	r3, #12
 8012100:	781b      	ldrb	r3, [r3, #0]
 8012102:	e03d      	b.n	8012180 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 8012104:	2300      	movs	r3, #0
 8012106:	723b      	strb	r3, [r7, #8]
                addr.bmParent = _parent.bmAddress;
 8012108:	7b3b      	ldrb	r3, [r7, #12]
 801210a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801210e:	b2da      	uxtb	r2, r3
 8012110:	7a3b      	ldrb	r3, [r7, #8]
 8012112:	f362 03c5 	bfi	r3, r2, #3, #3
 8012116:	723b      	strb	r3, [r7, #8]
                if(is_hub) {
 8012118:	78bb      	ldrb	r3, [r7, #2]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d013      	beq.n	8012146 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xee>
                        addr.bmHub = 1;
 801211e:	7a3b      	ldrb	r3, [r7, #8]
 8012120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012124:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = ++hubCounter;
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	79db      	ldrb	r3, [r3, #7]
 801212a:	3301      	adds	r3, #1
 801212c:	b2da      	uxtb	r2, r3
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	71da      	strb	r2, [r3, #7]
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	79db      	ldrb	r3, [r3, #7]
 8012136:	f003 0307 	and.w	r3, r3, #7
 801213a:	b2da      	uxtb	r2, r3
 801213c:	7a3b      	ldrb	r3, [r7, #8]
 801213e:	f362 0302 	bfi	r3, r2, #0, #3
 8012142:	723b      	strb	r3, [r7, #8]
 8012144:	e00b      	b.n	801215e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x106>
                } else {
                        addr.bmHub = 0;
 8012146:	7a3b      	ldrb	r3, [r7, #8]
 8012148:	f36f 1386 	bfc	r3, #6, #1
 801214c:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = port;
 801214e:	787b      	ldrb	r3, [r7, #1]
 8012150:	f003 0307 	and.w	r3, r3, #7
 8012154:	b2da      	uxtb	r2, r3
 8012156:	7a3b      	ldrb	r3, [r7, #8]
 8012158:	f362 0302 	bfi	r3, r2, #0, #3
 801215c:	723b      	strb	r3, [r7, #8]
                }
                thePool[index].address = addr;
 801215e:	7bfa      	ldrb	r2, [r7, #15]
 8012160:	6879      	ldr	r1, [r7, #4]
 8012162:	4613      	mov	r3, r2
 8012164:	00db      	lsls	r3, r3, #3
 8012166:	1a9b      	subs	r3, r3, r2
 8012168:	440b      	add	r3, r1
 801216a:	330c      	adds	r3, #12
 801216c:	7a3a      	ldrb	r2, [r7, #8]
 801216e:	701a      	strb	r2, [r3, #0]
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 8012170:	7bfa      	ldrb	r2, [r7, #15]
 8012172:	6879      	ldr	r1, [r7, #4]
 8012174:	4613      	mov	r3, r2
 8012176:	00db      	lsls	r3, r3, #3
 8012178:	1a9b      	subs	r3, r3, r2
 801217a:	440b      	add	r3, r1
 801217c:	330c      	adds	r3, #12
 801217e:	781b      	ldrb	r3, [r3, #0]
        };
 8012180:	4618      	mov	r0, r3
 8012182:	3710      	adds	r7, #16
 8012184:	46bd      	mov	sp, r7
 8012186:	bd80      	pop	{r7, pc}

08012188 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 8012188:	b580      	push	{r7, lr}
 801218a:	b084      	sub	sp, #16
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
 8012190:	460b      	mov	r3, r1
 8012192:	70fb      	strb	r3, [r7, #3]
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 8012194:	78fb      	ldrb	r3, [r7, #3]
 8012196:	2b41      	cmp	r3, #65	; 0x41
 8012198:	d103      	bne.n	80121a2 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x1a>
                        InitAllAddresses();
 801219a:	6878      	ldr	r0, [r7, #4]
 801219c:	f000 f841 	bl	8012222 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 80121a0:	e00b      	b.n	80121ba <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x32>
                }
                uint8_t index = FindAddressIndex(addr);
 80121a2:	78fb      	ldrb	r3, [r7, #3]
 80121a4:	4619      	mov	r1, r3
 80121a6:	6878      	ldr	r0, [r7, #4]
 80121a8:	f000 f854 	bl	8012254 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 80121ac:	4603      	mov	r3, r0
 80121ae:	73fb      	strb	r3, [r7, #15]
                FreeAddressByIndex(index);
 80121b0:	7bfb      	ldrb	r3, [r7, #15]
 80121b2:	4619      	mov	r1, r3
 80121b4:	6878      	ldr	r0, [r7, #4]
 80121b6:	f000 f893 	bl	80122e0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 80121ba:	3710      	adds	r7, #16
 80121bc:	46bd      	mov	sp, r7
 80121be:	bd80      	pop	{r7, pc}

080121c0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:
        void InitEntry(uint8_t index) {
 80121c0:	b480      	push	{r7}
 80121c2:	b083      	sub	sp, #12
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
 80121c8:	460b      	mov	r3, r1
 80121ca:	70fb      	strb	r3, [r7, #3]
                thePool[index].address.devAddress = 0;
 80121cc:	78fa      	ldrb	r2, [r7, #3]
 80121ce:	6879      	ldr	r1, [r7, #4]
 80121d0:	4613      	mov	r3, r2
 80121d2:	00db      	lsls	r3, r3, #3
 80121d4:	1a9b      	subs	r3, r3, r2
 80121d6:	440b      	add	r3, r1
 80121d8:	330c      	adds	r3, #12
 80121da:	2200      	movs	r2, #0
 80121dc:	701a      	strb	r2, [r3, #0]
                thePool[index].epcount = 1;
 80121de:	78fa      	ldrb	r2, [r7, #3]
 80121e0:	6879      	ldr	r1, [r7, #4]
 80121e2:	4613      	mov	r3, r2
 80121e4:	00db      	lsls	r3, r3, #3
 80121e6:	1a9b      	subs	r3, r3, r2
 80121e8:	440b      	add	r3, r1
 80121ea:	330d      	adds	r3, #13
 80121ec:	2201      	movs	r2, #1
 80121ee:	701a      	strb	r2, [r3, #0]
                thePool[index].lowspeed = 0;
 80121f0:	78fa      	ldrb	r2, [r7, #3]
 80121f2:	6879      	ldr	r1, [r7, #4]
 80121f4:	4613      	mov	r3, r2
 80121f6:	00db      	lsls	r3, r3, #3
 80121f8:	1a9b      	subs	r3, r3, r2
 80121fa:	440b      	add	r3, r1
 80121fc:	330e      	adds	r3, #14
 80121fe:	2200      	movs	r2, #0
 8012200:	701a      	strb	r2, [r3, #0]
                thePool[index].epinfo = &dev0ep;
 8012202:	78fa      	ldrb	r2, [r7, #3]
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	1d19      	adds	r1, r3, #4
 8012208:	6878      	ldr	r0, [r7, #4]
 801220a:	4613      	mov	r3, r2
 801220c:	00db      	lsls	r3, r3, #3
 801220e:	1a9b      	subs	r3, r3, r2
 8012210:	4403      	add	r3, r0
 8012212:	3308      	adds	r3, #8
 8012214:	6019      	str	r1, [r3, #0]
        };
 8012216:	bf00      	nop
 8012218:	370c      	adds	r7, #12
 801221a:	46bd      	mov	sp, r7
 801221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012220:	4770      	bx	lr

08012222 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
        void InitAllAddresses() {
 8012222:	b580      	push	{r7, lr}
 8012224:	b084      	sub	sp, #16
 8012226:	af00      	add	r7, sp, #0
 8012228:	6078      	str	r0, [r7, #4]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 801222a:	2301      	movs	r3, #1
 801222c:	73fb      	strb	r3, [r7, #15]
 801222e:	7bfb      	ldrb	r3, [r7, #15]
 8012230:	2b0f      	cmp	r3, #15
 8012232:	d808      	bhi.n	8012246 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x24>
                        InitEntry(i);
 8012234:	7bfb      	ldrb	r3, [r7, #15]
 8012236:	4619      	mov	r1, r3
 8012238:	6878      	ldr	r0, [r7, #4]
 801223a:	f7ff ffc1 	bl	80121c0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 801223e:	7bfb      	ldrb	r3, [r7, #15]
 8012240:	3301      	adds	r3, #1
 8012242:	73fb      	strb	r3, [r7, #15]
 8012244:	e7f3      	b.n	801222e <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0xc>
                hubCounter = 0;
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	2200      	movs	r2, #0
 801224a:	71da      	strb	r2, [r3, #7]
        };
 801224c:	bf00      	nop
 801224e:	3710      	adds	r7, #16
 8012250:	46bd      	mov	sp, r7
 8012252:	bd80      	pop	{r7, pc}

08012254 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
        uint8_t FindAddressIndex(uint8_t address = 0) {
 8012254:	b480      	push	{r7}
 8012256:	b085      	sub	sp, #20
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
 801225c:	460b      	mov	r3, r1
 801225e:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 8012260:	2301      	movs	r3, #1
 8012262:	73fb      	strb	r3, [r7, #15]
 8012264:	7bfb      	ldrb	r3, [r7, #15]
 8012266:	2b0f      	cmp	r3, #15
 8012268:	d810      	bhi.n	801228c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x38>
                        if(thePool[i].address.devAddress == address)
 801226a:	7bfa      	ldrb	r2, [r7, #15]
 801226c:	6879      	ldr	r1, [r7, #4]
 801226e:	4613      	mov	r3, r2
 8012270:	00db      	lsls	r3, r3, #3
 8012272:	1a9b      	subs	r3, r3, r2
 8012274:	440b      	add	r3, r1
 8012276:	330c      	adds	r3, #12
 8012278:	781b      	ldrb	r3, [r3, #0]
 801227a:	78fa      	ldrb	r2, [r7, #3]
 801227c:	429a      	cmp	r2, r3
 801227e:	d101      	bne.n	8012284 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x30>
                                return i;
 8012280:	7bfb      	ldrb	r3, [r7, #15]
 8012282:	e004      	b.n	801228e <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x3a>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 8012284:	7bfb      	ldrb	r3, [r7, #15]
 8012286:	3301      	adds	r3, #1
 8012288:	73fb      	strb	r3, [r7, #15]
 801228a:	e7eb      	b.n	8012264 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x10>
                return 0;
 801228c:	2300      	movs	r3, #0
        };
 801228e:	4618      	mov	r0, r3
 8012290:	3714      	adds	r7, #20
 8012292:	46bd      	mov	sp, r7
 8012294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012298:	4770      	bx	lr

0801229a <_ZN8MAX3421eI3P102P9E10IntHandlerEv>:

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
 801229a:	b580      	push	{r7, lr}
 801229c:	b084      	sub	sp, #16
 801229e:	af00      	add	r7, sp, #0
 80122a0:	6078      	str	r0, [r7, #4]
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
 80122a2:	2300      	movs	r3, #0
 80122a4:	73fb      	strb	r3, [r7, #15]
        HIRQ = regRd(rHIRQ); //determine interrupt source
 80122a6:	21c8      	movs	r1, #200	; 0xc8
 80122a8:	6878      	ldr	r0, [r7, #4]
 80122aa:	f7ef fafb 	bl	80018a4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80122ae:	4603      	mov	r3, r0
 80122b0:	73bb      	strb	r3, [r7, #14]
        //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
        //    HIRQ_sendback |= bmFRAMEIRQ;
        //}//end FRAMEIRQ handling
        if(HIRQ & bmCONDETIRQ) {
 80122b2:	7bbb      	ldrb	r3, [r7, #14]
 80122b4:	f003 0320 	and.w	r3, r3, #32
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d006      	beq.n	80122ca <_ZN8MAX3421eI3P102P9E10IntHandlerEv+0x30>
                busprobe();
 80122bc:	6878      	ldr	r0, [r7, #4]
 80122be:	f7ef fb13 	bl	80018e8 <_ZN8MAX3421eI3P102P9E8busprobeEv>
                HIRQ_sendback |= bmCONDETIRQ;
 80122c2:	7bfb      	ldrb	r3, [r7, #15]
 80122c4:	f043 0320 	orr.w	r3, r3, #32
 80122c8:	73fb      	strb	r3, [r7, #15]
        }
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        regWr(rHIRQ, HIRQ_sendback);
 80122ca:	7bfb      	ldrb	r3, [r7, #15]
 80122cc:	461a      	mov	r2, r3
 80122ce:	21c8      	movs	r1, #200	; 0xc8
 80122d0:	6878      	ldr	r0, [r7, #4]
 80122d2:	f7ef fa95 	bl	8001800 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        return ( HIRQ_sendback);
 80122d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80122d8:	4618      	mov	r0, r3
 80122da:	3710      	adds	r7, #16
 80122dc:	46bd      	mov	sp, r7
 80122de:	bd80      	pop	{r7, pc}

080122e0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
        void FreeAddressByIndex(uint8_t index) {
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b084      	sub	sp, #16
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
 80122e8:	460b      	mov	r3, r1
 80122ea:	70fb      	strb	r3, [r7, #3]
                if(index == 0)
 80122ec:	78fb      	ldrb	r3, [r7, #3]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d03a      	beq.n	8012368 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x88>
                UsbDeviceAddress uda = thePool[index].address;
 80122f2:	78fa      	ldrb	r2, [r7, #3]
 80122f4:	6879      	ldr	r1, [r7, #4]
 80122f6:	4613      	mov	r3, r2
 80122f8:	00db      	lsls	r3, r3, #3
 80122fa:	1a9b      	subs	r3, r3, r2
 80122fc:	440b      	add	r3, r1
 80122fe:	330c      	adds	r3, #12
 8012300:	781b      	ldrb	r3, [r3, #0]
 8012302:	733b      	strb	r3, [r7, #12]
                if(uda.bmHub == 1) {
 8012304:	7b3b      	ldrb	r3, [r7, #12]
 8012306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801230a:	b2db      	uxtb	r3, r3
 801230c:	2b00      	cmp	r3, #0
 801230e:	d025      	beq.n	801235c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 8012310:	2301      	movs	r3, #1
 8012312:	73fb      	strb	r3, [r7, #15]
 8012314:	7bfb      	ldrb	r3, [r7, #15]
 8012316:	461a      	mov	r2, r3
 8012318:	7b39      	ldrb	r1, [r7, #12]
 801231a:	6878      	ldr	r0, [r7, #4]
 801231c:	f000 f828 	bl	8012370 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 8012320:	4603      	mov	r3, r0
 8012322:	73fb      	strb	r3, [r7, #15]
 8012324:	7bfb      	ldrb	r3, [r7, #15]
 8012326:	2b00      	cmp	r3, #0
 8012328:	bf14      	ite	ne
 801232a:	2301      	movne	r3, #1
 801232c:	2300      	moveq	r3, #0
 801232e:	b2db      	uxtb	r3, r3
 8012330:	2b00      	cmp	r3, #0
 8012332:	d005      	beq.n	8012340 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x60>
                                FreeAddressByIndex(i);
 8012334:	7bfb      	ldrb	r3, [r7, #15]
 8012336:	4619      	mov	r1, r3
 8012338:	6878      	ldr	r0, [r7, #4]
 801233a:	f7ff ffd1 	bl	80122e0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 801233e:	e7e9      	b.n	8012314 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x34>
                        if(hubCounter == uda.bmAddress)
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	79db      	ldrb	r3, [r3, #7]
 8012344:	7b3a      	ldrb	r2, [r7, #12]
 8012346:	f3c2 0202 	ubfx	r2, r2, #0, #3
 801234a:	b2d2      	uxtb	r2, r2
 801234c:	4293      	cmp	r3, r2
 801234e:	d105      	bne.n	801235c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                                hubCounter--;
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	79db      	ldrb	r3, [r3, #7]
 8012354:	3b01      	subs	r3, #1
 8012356:	b2da      	uxtb	r2, r3
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	71da      	strb	r2, [r3, #7]
                InitEntry(index);
 801235c:	78fb      	ldrb	r3, [r7, #3]
 801235e:	4619      	mov	r1, r3
 8012360:	6878      	ldr	r0, [r7, #4]
 8012362:	f7ff ff2d 	bl	80121c0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 8012366:	e000      	b.n	801236a <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x8a>
                        return;
 8012368:	bf00      	nop
        }
 801236a:	3710      	adds	r7, #16
 801236c:	46bd      	mov	sp, r7
 801236e:	bd80      	pop	{r7, pc}

08012370 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 8012370:	b480      	push	{r7}
 8012372:	b085      	sub	sp, #20
 8012374:	af00      	add	r7, sp, #0
 8012376:	6078      	str	r0, [r7, #4]
 8012378:	7039      	strb	r1, [r7, #0]
 801237a:	4613      	mov	r3, r2
 801237c:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 801237e:	78fb      	ldrb	r3, [r7, #3]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d004      	beq.n	801238e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 8012384:	78fb      	ldrb	r3, [r7, #3]
 8012386:	2b0f      	cmp	r3, #15
 8012388:	d801      	bhi.n	801238e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 801238a:	78fb      	ldrb	r3, [r7, #3]
 801238c:	e000      	b.n	8012390 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x20>
 801238e:	2301      	movs	r3, #1
 8012390:	73fb      	strb	r3, [r7, #15]
 8012392:	7bfb      	ldrb	r3, [r7, #15]
 8012394:	2b0f      	cmp	r3, #15
 8012396:	d816      	bhi.n	80123c6 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x56>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 8012398:	7bfa      	ldrb	r2, [r7, #15]
 801239a:	6879      	ldr	r1, [r7, #4]
 801239c:	4613      	mov	r3, r2
 801239e:	00db      	lsls	r3, r3, #3
 80123a0:	1a9b      	subs	r3, r3, r2
 80123a2:	440b      	add	r3, r1
 80123a4:	3308      	adds	r3, #8
 80123a6:	791b      	ldrb	r3, [r3, #4]
 80123a8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80123ac:	b2da      	uxtb	r2, r3
 80123ae:	783b      	ldrb	r3, [r7, #0]
 80123b0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80123b4:	b2db      	uxtb	r3, r3
 80123b6:	429a      	cmp	r2, r3
 80123b8:	d101      	bne.n	80123be <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x4e>
                                return i;
 80123ba:	7bfb      	ldrb	r3, [r7, #15]
 80123bc:	e004      	b.n	80123c8 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x58>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 80123be:	7bfb      	ldrb	r3, [r7, #15]
 80123c0:	3301      	adds	r3, #1
 80123c2:	73fb      	strb	r3, [r7, #15]
 80123c4:	e7e5      	b.n	8012392 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x22>
                return 0;
 80123c6:	2300      	movs	r3, #0
        };
 80123c8:	4618      	mov	r0, r3
 80123ca:	3714      	adds	r7, #20
 80123cc:	46bd      	mov	sp, r7
 80123ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d2:	4770      	bx	lr

080123d4 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 80123d4:	b480      	push	{r7}
 80123d6:	b085      	sub	sp, #20
 80123d8:	af00      	add	r7, sp, #0
 80123da:	60f8      	str	r0, [r7, #12]
 80123dc:	60b9      	str	r1, [r7, #8]
 80123de:	607a      	str	r2, [r7, #4]
        if(!pBuf) {
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d101      	bne.n	80123ec <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
 80123e8:	2300      	movs	r3, #0
 80123ea:	e031      	b.n	8012450 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	791b      	ldrb	r3, [r3, #4]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d022      	beq.n	801243a <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	881b      	ldrh	r3, [r3, #0]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d01e      	beq.n	801243a <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
                pBuf[valueSize - countDown] = (**pp);
 80123fc:	68bb      	ldr	r3, [r7, #8]
 80123fe:	681a      	ldr	r2, [r3, #0]
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	68f9      	ldr	r1, [r7, #12]
 8012406:	7949      	ldrb	r1, [r1, #5]
 8012408:	4608      	mov	r0, r1
 801240a:	68f9      	ldr	r1, [r7, #12]
 801240c:	7909      	ldrb	r1, [r1, #4]
 801240e:	1a41      	subs	r1, r0, r1
 8012410:	440b      	add	r3, r1
 8012412:	7812      	ldrb	r2, [r2, #0]
 8012414:	701a      	strb	r2, [r3, #0]
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	791b      	ldrb	r3, [r3, #4]
 801241a:	3b01      	subs	r3, #1
 801241c:	b2da      	uxtb	r2, r3
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	711a      	strb	r2, [r3, #4]
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	881b      	ldrh	r3, [r3, #0]
 8012426:	3b01      	subs	r3, #1
 8012428:	b29a      	uxth	r2, r3
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	801a      	strh	r2, [r3, #0]
 801242e:	68bb      	ldr	r3, [r7, #8]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	1c5a      	adds	r2, r3, #1
 8012434:	68bb      	ldr	r3, [r7, #8]
 8012436:	601a      	str	r2, [r3, #0]
 8012438:	e7d8      	b.n	80123ec <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>

        if(countDown)
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	791b      	ldrb	r3, [r3, #4]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d001      	beq.n	8012446 <_ZN20MultiByteValueParser5ParseEPPhPt+0x72>
                return false;
 8012442:	2300      	movs	r3, #0
 8012444:	e004      	b.n	8012450 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>

        countDown = valueSize;
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	795a      	ldrb	r2, [r3, #5]
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	711a      	strb	r2, [r3, #4]
        return true;
 801244e:	2301      	movs	r3, #1
}
 8012450:	4618      	mov	r0, r3
 8012452:	3714      	adds	r7, #20
 8012454:	46bd      	mov	sp, r7
 8012456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801245a:	4770      	bx	lr

0801245c <__cxa_pure_virtual>:
 801245c:	b508      	push	{r3, lr}
 801245e:	f000 f80d 	bl	801247c <_ZSt9terminatev>

08012462 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8012462:	b508      	push	{r3, lr}
 8012464:	4780      	blx	r0
 8012466:	f000 f80e 	bl	8012486 <abort>
	...

0801246c <_ZSt13get_terminatev>:
 801246c:	4b02      	ldr	r3, [pc, #8]	; (8012478 <_ZSt13get_terminatev+0xc>)
 801246e:	6818      	ldr	r0, [r3, #0]
 8012470:	f3bf 8f5b 	dmb	ish
 8012474:	4770      	bx	lr
 8012476:	bf00      	nop
 8012478:	2000013c 	.word	0x2000013c

0801247c <_ZSt9terminatev>:
 801247c:	b508      	push	{r3, lr}
 801247e:	f7ff fff5 	bl	801246c <_ZSt13get_terminatev>
 8012482:	f7ff ffee 	bl	8012462 <_ZN10__cxxabiv111__terminateEPFvvE>

08012486 <abort>:
 8012486:	b508      	push	{r3, lr}
 8012488:	2006      	movs	r0, #6
 801248a:	f000 f86b 	bl	8012564 <raise>
 801248e:	2001      	movs	r0, #1
 8012490:	f7ef fc5a 	bl	8001d48 <_exit>

08012494 <__errno>:
 8012494:	4b01      	ldr	r3, [pc, #4]	; (801249c <__errno+0x8>)
 8012496:	6818      	ldr	r0, [r3, #0]
 8012498:	4770      	bx	lr
 801249a:	bf00      	nop
 801249c:	20000140 	.word	0x20000140

080124a0 <__libc_init_array>:
 80124a0:	b570      	push	{r4, r5, r6, lr}
 80124a2:	4d0d      	ldr	r5, [pc, #52]	; (80124d8 <__libc_init_array+0x38>)
 80124a4:	4c0d      	ldr	r4, [pc, #52]	; (80124dc <__libc_init_array+0x3c>)
 80124a6:	1b64      	subs	r4, r4, r5
 80124a8:	10a4      	asrs	r4, r4, #2
 80124aa:	2600      	movs	r6, #0
 80124ac:	42a6      	cmp	r6, r4
 80124ae:	d109      	bne.n	80124c4 <__libc_init_array+0x24>
 80124b0:	4d0b      	ldr	r5, [pc, #44]	; (80124e0 <__libc_init_array+0x40>)
 80124b2:	4c0c      	ldr	r4, [pc, #48]	; (80124e4 <__libc_init_array+0x44>)
 80124b4:	f000 f884 	bl	80125c0 <_init>
 80124b8:	1b64      	subs	r4, r4, r5
 80124ba:	10a4      	asrs	r4, r4, #2
 80124bc:	2600      	movs	r6, #0
 80124be:	42a6      	cmp	r6, r4
 80124c0:	d105      	bne.n	80124ce <__libc_init_array+0x2e>
 80124c2:	bd70      	pop	{r4, r5, r6, pc}
 80124c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80124c8:	4798      	blx	r3
 80124ca:	3601      	adds	r6, #1
 80124cc:	e7ee      	b.n	80124ac <__libc_init_array+0xc>
 80124ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80124d2:	4798      	blx	r3
 80124d4:	3601      	adds	r6, #1
 80124d6:	e7f2      	b.n	80124be <__libc_init_array+0x1e>
 80124d8:	08012a24 	.word	0x08012a24
 80124dc:	08012a24 	.word	0x08012a24
 80124e0:	08012a24 	.word	0x08012a24
 80124e4:	08012a2c 	.word	0x08012a2c

080124e8 <memcpy>:
 80124e8:	440a      	add	r2, r1
 80124ea:	4291      	cmp	r1, r2
 80124ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80124f0:	d100      	bne.n	80124f4 <memcpy+0xc>
 80124f2:	4770      	bx	lr
 80124f4:	b510      	push	{r4, lr}
 80124f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80124fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80124fe:	4291      	cmp	r1, r2
 8012500:	d1f9      	bne.n	80124f6 <memcpy+0xe>
 8012502:	bd10      	pop	{r4, pc}

08012504 <memset>:
 8012504:	4402      	add	r2, r0
 8012506:	4603      	mov	r3, r0
 8012508:	4293      	cmp	r3, r2
 801250a:	d100      	bne.n	801250e <memset+0xa>
 801250c:	4770      	bx	lr
 801250e:	f803 1b01 	strb.w	r1, [r3], #1
 8012512:	e7f9      	b.n	8012508 <memset+0x4>

08012514 <_raise_r>:
 8012514:	291f      	cmp	r1, #31
 8012516:	b538      	push	{r3, r4, r5, lr}
 8012518:	4604      	mov	r4, r0
 801251a:	460d      	mov	r5, r1
 801251c:	d904      	bls.n	8012528 <_raise_r+0x14>
 801251e:	2316      	movs	r3, #22
 8012520:	6003      	str	r3, [r0, #0]
 8012522:	f04f 30ff 	mov.w	r0, #4294967295
 8012526:	bd38      	pop	{r3, r4, r5, pc}
 8012528:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801252a:	b112      	cbz	r2, 8012532 <_raise_r+0x1e>
 801252c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012530:	b94b      	cbnz	r3, 8012546 <_raise_r+0x32>
 8012532:	4620      	mov	r0, r4
 8012534:	f000 f830 	bl	8012598 <_getpid_r>
 8012538:	462a      	mov	r2, r5
 801253a:	4601      	mov	r1, r0
 801253c:	4620      	mov	r0, r4
 801253e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012542:	f000 b817 	b.w	8012574 <_kill_r>
 8012546:	2b01      	cmp	r3, #1
 8012548:	d00a      	beq.n	8012560 <_raise_r+0x4c>
 801254a:	1c59      	adds	r1, r3, #1
 801254c:	d103      	bne.n	8012556 <_raise_r+0x42>
 801254e:	2316      	movs	r3, #22
 8012550:	6003      	str	r3, [r0, #0]
 8012552:	2001      	movs	r0, #1
 8012554:	e7e7      	b.n	8012526 <_raise_r+0x12>
 8012556:	2400      	movs	r4, #0
 8012558:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801255c:	4628      	mov	r0, r5
 801255e:	4798      	blx	r3
 8012560:	2000      	movs	r0, #0
 8012562:	e7e0      	b.n	8012526 <_raise_r+0x12>

08012564 <raise>:
 8012564:	4b02      	ldr	r3, [pc, #8]	; (8012570 <raise+0xc>)
 8012566:	4601      	mov	r1, r0
 8012568:	6818      	ldr	r0, [r3, #0]
 801256a:	f7ff bfd3 	b.w	8012514 <_raise_r>
 801256e:	bf00      	nop
 8012570:	20000140 	.word	0x20000140

08012574 <_kill_r>:
 8012574:	b538      	push	{r3, r4, r5, lr}
 8012576:	4d07      	ldr	r5, [pc, #28]	; (8012594 <_kill_r+0x20>)
 8012578:	2300      	movs	r3, #0
 801257a:	4604      	mov	r4, r0
 801257c:	4608      	mov	r0, r1
 801257e:	4611      	mov	r1, r2
 8012580:	602b      	str	r3, [r5, #0]
 8012582:	f7ef fbd1 	bl	8001d28 <_kill>
 8012586:	1c43      	adds	r3, r0, #1
 8012588:	d102      	bne.n	8012590 <_kill_r+0x1c>
 801258a:	682b      	ldr	r3, [r5, #0]
 801258c:	b103      	cbz	r3, 8012590 <_kill_r+0x1c>
 801258e:	6023      	str	r3, [r4, #0]
 8012590:	bd38      	pop	{r3, r4, r5, pc}
 8012592:	bf00      	nop
 8012594:	20005950 	.word	0x20005950

08012598 <_getpid_r>:
 8012598:	f7ef bbbe 	b.w	8001d18 <_getpid>

0801259c <strncmp>:
 801259c:	b510      	push	{r4, lr}
 801259e:	b16a      	cbz	r2, 80125bc <strncmp+0x20>
 80125a0:	3901      	subs	r1, #1
 80125a2:	1884      	adds	r4, r0, r2
 80125a4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80125a8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80125ac:	4293      	cmp	r3, r2
 80125ae:	d103      	bne.n	80125b8 <strncmp+0x1c>
 80125b0:	42a0      	cmp	r0, r4
 80125b2:	d001      	beq.n	80125b8 <strncmp+0x1c>
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d1f5      	bne.n	80125a4 <strncmp+0x8>
 80125b8:	1a98      	subs	r0, r3, r2
 80125ba:	bd10      	pop	{r4, pc}
 80125bc:	4610      	mov	r0, r2
 80125be:	e7fc      	b.n	80125ba <strncmp+0x1e>

080125c0 <_init>:
 80125c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125c2:	bf00      	nop
 80125c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125c6:	bc08      	pop	{r3}
 80125c8:	469e      	mov	lr, r3
 80125ca:	4770      	bx	lr

080125cc <_fini>:
 80125cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125ce:	bf00      	nop
 80125d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125d2:	bc08      	pop	{r3}
 80125d4:	469e      	mov	lr, r3
 80125d6:	4770      	bx	lr
